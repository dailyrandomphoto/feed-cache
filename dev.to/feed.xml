<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Quick Tips: How to Fix ‚ÄúRequests from referrer https://www.googleapis.com/ are blocked‚Äù error in Page Speed Insights</title>
      <author>InHuOfficial</author>
      <pubDate>Mon, 14 Jun 2021 08:07:58 +0000</pubDate>
      <link>https://dev.to/inhuofficial/quick-tips-how-to-fix-requests-from-referrer-https-www-googleapis-com-are-blocked-error-in-page-speed-insights-13ka</link>
      <guid>https://dev.to/inhuofficial/quick-tips-how-to-fix-requests-from-referrer-https-www-googleapis-com-are-blocked-error-in-page-speed-insights-13ka</guid>
      <description>&lt;p&gt;Are you trying to see how well your site (or someone else's!) performs using Page Speed Insights, but it keeps hanging at 50% complete and then throwing an error saying: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúRequests from referrer &lt;a href="https://www.googleapis.com/"&gt;https://www.googleapis.com/&lt;/a&gt; are blocked‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-easy-fix"&gt;
  &lt;/a&gt;
  The easy fix
&lt;/h2&gt;

&lt;p&gt;This is nearly always because either your anti-virus or firewall is blocking the request.&lt;/p&gt;

&lt;p&gt;This is especially likely in Brave browser when using "Shields Up".&lt;/p&gt;

&lt;p&gt;If you are using Brave browser, add an exception or temporarily switch "Shields" off. &lt;/p&gt;

&lt;p&gt;To check if it is a firewall / Brave browser interfering with your connection do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fire up Chrome or Firefox&lt;/li&gt;
&lt;li&gt;Go Incognito / disable extensions&lt;/li&gt;
&lt;li&gt;Disconnect from your Wi-Fi / wired connection&lt;/li&gt;
&lt;li&gt;Switch on the mobile hotspot on your phone (and ensure it is on data only)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Try running the test again.&lt;/p&gt;

&lt;p&gt;If the problem disappears then reverse the process one step at a time and keep trying until you encounter the same problem. This then lets you pinpoint what is actually blocking the request.&lt;/p&gt;

&lt;p&gt;If the problem does not disappear after doing that, then open the network tab, look for the request to "googleapis.com" and look to see if you have accidentally blocked the domain (and unblock it by right clicking on the entry and clicking "unblock googleapis.com"!).&lt;/p&gt;

&lt;p&gt;That is it, for 99% of people that will fix the problem (and most of the time it is simply Brave browser shields that is interfering).&lt;/p&gt;

&lt;p&gt;And if all else fails, you can just use "Lighthouse" in developer tools, the recommendations and score should be pretty similar as Page Speed Insights uses Lighthouse to power it anyway (you just won't get your origin and page summaries as part of the report). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-me-for-more-quick-tips-and-other-random-stuff"&gt;
  &lt;/a&gt;
  Follow me for more quick tips and other random stuff!
&lt;/h2&gt;

&lt;p&gt;I write about all sorts of random stuff, mainly focused around accessibility, website performance and abusing the internet.&lt;/p&gt;

&lt;p&gt;Give me a follow if any of that interests you. &lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__551686"&gt;
  
    .ltag__user__id__551686 .follow-action-button {
      background-color: #c62aa4 !important;
      color: #131111 !important;
      border-color: #c62aa4 !important;
    }
  
    &lt;a href="/inhuofficial" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/inhuofficial"&gt;InHuOfficial&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/inhuofficial"&gt;Specialising in accessibility and website load speed / performance. If you have a question about [accessibility] or [page-speed-insights] ask away and I will help any way I can!&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#for-the-algo"&gt;
  &lt;/a&gt;
  For the Algo!
&lt;/h2&gt;

&lt;p&gt;My new sign off experiment! &lt;/p&gt;

&lt;p&gt;If you enjoyed this article, give it a ‚ù§, if you thought it was special give it a ü¶Ñ and above all, don't forget:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Leave a comment for the algorithm! Especially if you have tried the above techniques and it still doesn't work, I will try and help if I can üòÅ!  &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>performance</category>
    </item>
    <item>
      <title>Anyone interested in reinforcement learning? [Startup looking for feedback]</title>
      <author>Joy</author>
      <pubDate>Mon, 14 Jun 2021 08:07:43 +0000</pubDate>
      <link>https://dev.to/joooyz/anyone-interested-in-reinforcement-learning-startup-looking-for-feedback-4de8</link>
      <guid>https://dev.to/joooyz/anyone-interested-in-reinforcement-learning-startup-looking-for-feedback-4de8</guid>
      <description>&lt;p&gt;Hey there,&lt;/p&gt;

&lt;p&gt;I'm working on a startup project called &lt;a href="https://www.gocoder.one"&gt;Coder One&lt;/a&gt; and we're building a next-generation OpenAI Gym with active competitions. Our goal is to give engineers a place to experiment, benchmark, and compete with the latest AI/ML algorithms.&lt;/p&gt;

&lt;p&gt;Here is a preview of our platform:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gyx8Puab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbpzzk2m15ur5eh7hevo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gyx8Puab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbpzzk2m15ur5eh7hevo.gif" alt="Coder One"&gt;&lt;/a&gt;&lt;br&gt;
It features competitive multiplayer games, where you can apply novel AI/ML algorithms to build your own game-playing agent.&lt;/p&gt;

&lt;p&gt;We're currently in private Beta, and &lt;strong&gt;would love to speak with anyone interested or experienced in AI/ML (particularly reinforcement learning and deep learning) for feedback.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please let me know if you'd be open to a couple questions over DM!&lt;/p&gt;

&lt;p&gt;Thank you üôè&lt;br&gt;
Joy&lt;/p&gt;

</description>
      <category>help</category>
      <category>machinelearning</category>
      <category>startup</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Solution: Maximum Units on a Truck</title>
      <author>seanpgallivan</author>
      <pubDate>Mon, 14 Jun 2021 07:50:57 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-maximum-units-on-a-truck-ak2</link>
      <guid>https://dev.to/seanpgallivan/solution-maximum-units-on-a-truck-ak2</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/maximum-units-on-a-truck/discuss/1271374"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1710-easy-maximum-units-on-a-truck"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/maximum-units-on-a-truck/"&gt;Leetcode Problem #1710 (&lt;em&gt;Easy&lt;/em&gt;): Maximum Units on a Truck&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are assigned to put some amount of boxes onto &lt;strong&gt;one truck&lt;/strong&gt;. You are given a 2D array &lt;code&gt;boxTypes&lt;/code&gt;, where &lt;code&gt;boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;code&gt;numberOfBoxes i&lt;/code&gt; is the number of boxes of type &lt;code&gt;i&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt; &lt;code&gt;numberOfUnitsPerBox i&lt;/code&gt; is the number of units in each box of the type &lt;code&gt;i&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You are also given an integer &lt;code&gt;truckSize&lt;/code&gt;, which is the &lt;strong&gt;maximum&lt;/strong&gt; number of &lt;strong&gt;boxes&lt;/strong&gt; that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed &lt;code&gt;truckSize&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Return &lt;em&gt;the &lt;strong&gt;maximum&lt;/strong&gt; total number of &lt;strong&gt;units&lt;/strong&gt; that can be put on the truck&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;There are:&lt;br&gt;&lt;br&gt;- 1 box of the first type that contains 3 units.&lt;br&gt;- 2 boxes of the second type that contain 2 units each.&lt;br&gt;- 3 boxes of the third type that contain 1 unit each.&lt;br&gt;&lt;br&gt;You can take all the boxes of the first and second types, and one box of the third type.&lt;br&gt;&lt;br&gt;The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;91&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= boxTypes.length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= numberOfBoxesi, numberOfUnitsPerBoxi &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= truckSize &amp;lt;= 10^6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;For this problem, we simply need to prioritize the more valuable boxes first. To do this, we should &lt;strong&gt;sort&lt;/strong&gt; the boxtypes array (&lt;strong&gt;B&lt;/strong&gt;) in descending order by the number of units per box (&lt;strong&gt;B[i][1]&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Then we can iterate through &lt;strong&gt;B&lt;/strong&gt; and at each step, we should add as many of the &lt;strong&gt;boxes&lt;/strong&gt; as we can, until we reach the truck size (&lt;strong&gt;T&lt;/strong&gt;). We should add the number of &lt;strong&gt;boxes&lt;/strong&gt; added multiplied by the units per box to our answer (&lt;strong&gt;ans&lt;/strong&gt;), and decrease &lt;strong&gt;T&lt;/strong&gt; by the same number of &lt;strong&gt;boxes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the truck is full (&lt;strong&gt;T == 0&lt;/strong&gt;), or once the iteration is done, we should &lt;strong&gt;return ans&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N log N)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the length of &lt;strong&gt;B&lt;/strong&gt;, for the sort&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(1)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;maximumUnits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;maximumUnits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;boxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;boxes&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
            &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;boxes&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;maximumUnits&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="no"&gt;B&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;B&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;B&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="no"&gt;T&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maximumUnits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];});&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>typedef VS using in type aliases declaration in C++</title>
      <author>Aastha Gupta</author>
      <pubDate>Mon, 14 Jun 2021 07:47:24 +0000</pubDate>
      <link>https://dev.to/guptaaastha/typedef-vs-using-in-type-aliases-declaration-in-c-fm2</link>
      <guid>https://dev.to/guptaaastha/typedef-vs-using-in-type-aliases-declaration-in-c-fm2</guid>
      <description>&lt;p&gt;In my previous posts, &lt;code&gt;typedef&lt;/code&gt; and &lt;code&gt;using&lt;/code&gt; were introduced. If you haven't read them, I'd recommend to check them out first before proceeding with this one ( &lt;a href="https://dev.to/guptaaastha/quick-introduction-to-typedef-in-c-5362"&gt;&lt;code&gt;typedef&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://dev.to/guptaaastha/quick-introduction-to-using-in-c-4n73"&gt;&lt;code&gt;using&lt;/code&gt;&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;Let's look at the following code snippets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ios_base&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fmtflags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ios_base&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fmtflags&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both these code snippets are equivalent! Infact, In C++11, the &lt;code&gt;using&lt;/code&gt; keyword when used for type alias is identical to &lt;code&gt;typedef&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;using&lt;/code&gt; is used specifically to type-alias &lt;code&gt;template&lt;/code&gt; instead of &lt;code&gt;typedef&lt;/code&gt; and &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1489.pdf"&gt;this paper&lt;/a&gt; explains it very well so.&lt;/p&gt;

&lt;p&gt;An excerpt from the paper:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It has been suggested to (re)use the keyword &lt;code&gt;typedef&lt;/code&gt; ‚Äî as done in the paper [4] ‚Äî to introduce template aliases:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
   &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyAllocator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;That notation has the advantage of using a keyword already known to introduce a type alias. However, it also displays several disadvantages among which the confusion of using a keyword known to introduce an alias for a type-name in a context where the alias does not designate a type, but a template; &lt;code&gt;Vec&lt;/code&gt; is not an alias for a type, and should not be taken for a &lt;code&gt;typedef-name&lt;/code&gt;. &lt;em&gt;The name &lt;code&gt;Vec&lt;/code&gt; is a name for the family&lt;/em&gt; &lt;code&gt;std::vector&amp;lt; [bullet] , MyAllocator&amp;lt; [bullet] &amp;gt; &amp;gt;&lt;/code&gt; ‚Äì where the bullet is a placeholder for a type-name. Consequently we do not propose the &lt;code&gt;typedef&lt;/code&gt; syntax. On the other hand the sentence&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;
    &lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Vec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyAllocator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;can be read/interpreted as: from now on, &lt;em&gt;I‚Äôll be using &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; as a synonym for &lt;code&gt;std::vector&amp;lt;T, MyAllocator&amp;lt;T&amp;gt; &amp;gt;&lt;/code&gt;&lt;/em&gt;. With that reading, the new syntax for aliasing seems reasonably logical.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You might wonder why a new keyword was not introduced and why &lt;code&gt;using&lt;/code&gt; was reused; there is infact a pretty good reason behind the rationale of not introducing a new keyword or new syntax every so often. The standard wants to avoid breaking old code as much as possible. This is why in proposal documents you might encounter sections like &lt;strong&gt;&lt;em&gt;Impact on the Standard&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Design decisions&lt;/em&gt;&lt;/strong&gt;, and how they might affect older code. There are situations when a proposal seems like a really good idea but might not have traction because it would be too difficult to implement or too confusing, or would contradict old code which is something that should be avoided.&lt;/p&gt;

&lt;p&gt;Thanks for giving this article a read and I'll see you in the next one üòÑ&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top Free Photo &amp; Video Editing Apps for 2021</title>
      <author>Stephan Reynolds</author>
      <pubDate>Mon, 14 Jun 2021 07:36:48 +0000</pubDate>
      <link>https://dev.to/stephanreynolds/top-free-photo-video-editing-apps-for-2021-4b49</link>
      <guid>https://dev.to/stephanreynolds/top-free-photo-video-editing-apps-for-2021-4b49</guid>
      <description>&lt;p&gt;Photographers are always looking to capture picture-perfect moments. With smartphone cameras now offering great optics to capture high-resolution and sharp results, photographers are increasingly using them to click high-quality images. There are a ton of free and paid good photo editing apps available now from the basic camera and sharing tools to full-featured photo editing apps that let you shoot, edit, and organize images better on your mobile phones. If you are looking for a free photo editor, just check out the list of the &lt;strong&gt;&lt;a href="https://appsupports.co/best-free-apps/6008/photo-video"&gt;best free photo and video editor apps&lt;/a&gt;&lt;/strong&gt; to enhance your photos with a few simple clicks. Discover the best photo-video editing apps for both beginners and pros, on iOS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alight Motion&lt;/strong&gt;&lt;br&gt;
Be part of the movement! Alight Motion, is the first professional Motion Design app for iPhone and iPad, bringing you professional-quality animation, motion graphics, visual effects, video editing, video compositing and more!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lensa: Photo &amp;amp; Picture Editor&lt;/strong&gt;&lt;br&gt;
Lensa is a brand new way of making your selfies look better, than you could have ever imagined. Forget about conventional filters and photo editing tools. We bring you the simplest, yet the most practical mobile app to date for perfecting your selfie es on the go. So, if there‚Äôs anything you think should be corrected in your selfie, you now have this amazing, simple app to help you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;YouCam Perfect: Photo Editor&lt;/strong&gt;&lt;br&gt;
Over 300 MILLION downloads and still counting! YouCam Perfect is the best selfie photo editing &amp;amp; beauty camera app. Download YouCam Perfect for all the selfie and photo editing &amp;amp; beautifying tools you need ‚Äì face beautify, teeth whiten ning, collages, filters, frames, effects, templates, HSL, fonts, stickers, and more!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KineMaster - Video Editor&lt;/strong&gt;&lt;br&gt;
KineMaster makes video editing fun on your iPhone, iPad, or M1 computer! KineMaster makes it easy to edit videos with lots of powerful tools, downloadable assets, and much more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Body Tune: Slim &amp;amp; Skinny Photo&lt;/strong&gt;&lt;br&gt;
Body Tune is a powerful body editor app with which you can easily get a slim and skinny body. Photo body reshaping has never been easier! Whether you want to slim, increase or emphasize any area of your body, Body Tune will make it happen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lomotif: Edit Video. Add Music&lt;/strong&gt;&lt;br&gt;
Best Video Editor for Making Awesome Edits with over 50 Million Users Worldwide! Create Videos with Music &amp;amp; Slideshows with UNLIMITED Clips, connect with other Lomotif users to grow your following, and share to Instagram, Snapchat, and TikTok!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adobe Lightroom Photo Editor&lt;/strong&gt;&lt;br&gt;
Adobe Photoshop Lightroom is a free, powerful photo editor and camera app that empowers your photography, helping you capture and edit stunning images. Easy-to-use image editing tools like sliders and filters for pictures make photo editing simple e. Retouch full-resolution photos, apply photo filters, or start photo editing wherever you are.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Background Eraser: Superimpose&lt;/strong&gt;&lt;br&gt;
This app helps to remove the background of any picture of yours and maintain transparency with just few taps. Just touch where you want to remove. "Target" function removes the area of similar color automatically. The image which one maintaining transparency background can be used with other apps ex) Keynote. Pages, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PhotoGrid Video Collage Maker&lt;/strong&gt;&lt;br&gt;
This is the best Collage App to create stunning images for social media, like Instagram posts and stories, Facebook posts, banners and covers, YouTube thumbnails, and Pinterest collections.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://appsupports.co/best-free-apps/6008/photo-video"&gt;https://appsupports.co/best-free-apps/6008/photo-video&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ios</category>
      <category>mobile</category>
      <category>iphone</category>
      <category>ipad</category>
    </item>
    <item>
      <title>AWS open source news and updates #72</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 14 Jun 2021 07:34:36 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-72-lj9</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-72-lj9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#14th-june-2021-instalment-72"&gt;
  &lt;/a&gt;
  14th June, 2021 - Instalment #72
&lt;/h2&gt;

&lt;p&gt;Newsletter #72.&lt;/p&gt;

&lt;p&gt;This week we have new open source projects such as Lift, that makes it super easy to deploy applications to production, a couple of new mods for the Steampipe project that let you do cost optimisation and security auditing, a nice project for tmux fans as well as a project that will get you started with ECS Anywhere. Community and AWS posts covering security, DevOps and IoT/Robotics, as well as Kubernetes, Open Shift, Apache Airflow, Linux and many more. And of course, later this week we have Open@Amazon, a free, live, event on Wednesday June 16th that starts at 9am on EDT.&lt;/p&gt;

&lt;p&gt;If you have not yet registered for Open@Amazon then don't worry, there is plenty of time. I hope I will see many of you on Wednesday for this event which is shaping up to be a really fantastic celebration of great open source builders and projects, covering a variety of different open source technologies. Check out the events section for more details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes:  Eric Greene, Rafa Xu, Yuan Shi, Elizabeth Nguyen, Colm Harte, Victor Julien, Kelley Misata, Shakeel Ahmad, Maritza Mills, Brian Carlson, Matt Laver, Jeremy Wallace, Imaya Kumar Jagannathan, Vikram Venkataraman, Alistair McLean, Jon Handler, Prashant Agrawal, Rodrigue Koffi and Rafael Pereyra, Francisco Gonzalez, Matthew Miller, Vu Dao, Vishesh Jindal, Petr Pridal, Andre Dufour, Ramses Alexander Coraspe Valdez, Jay Yeras, David Boeke, elpy1, Matthieu Napoli, Jason Umiker, Yehuda Cohen, Vani Eswarappa, Kostis Kapelonis and Curtis Rissi. &lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-from-open-source-projects"&gt;
  &lt;/a&gt;
  Latest from open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;lift&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/mi"&gt;lift&lt;/a&gt; is an exciting new open source project from Theodo that I noticed last week thanks to a tweet from Matthieu Napoli. Lift is a plugin that leverages the AWS CDK to expand the Serverless Framework beyond functions. This allows you to quick deploy production-ready websites, queues, storage buckets and more with a few lines in serverless.yml.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ssm-multi-tmux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/mj"&gt;ssm-multi-tmux&lt;/a&gt; this project from elpy1, is perfect for you tmux fans. It enables you to run an interactive AWS SSM command in synchronised tmux panes on one or more EC2 instances by specifying the autoscaling group name or tag key and value. Check out the quick demo to see how this looks executing htop on an autoscaling group containing 4 instances:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e1ncd9Nm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/elpy1/ssm-multi-tmux/blob/master/demo/multissm.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e1ncd9Nm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/elpy1/ssm-multi-tmux/blob/master/demo/multissm.gif%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steampipe mods&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thank you David Boeke for sharing with me a couple of new open source projects that built on top of steampipe, an open source project I previous covered, that lets you use SQL to query your AWS environment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/mg"&gt;steampipe-mod-aws-thrifty&lt;/a&gt; - this Steampipe mod checks your AWS account(s) for unused and under-utilised resources, with many (25+) cost savings/avoidance checks&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/mh"&gt;steampipe-mod-aws-compliance&lt;/a&gt; - open source scanning of 200+ security and compliance checks, that lets you run individual configuration, compliance and security controls or full compliance benchmarks for CIS and PCI across all your AWS accounts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;ecsanywhere-dind&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/mk"&gt;ecsanywhere-dind&lt;/a&gt; Jason Umiker has put together this repository that will help you quickly get started with running ECS Anywhere, and builds an Amazon Linux 2 container that has both systemd and docker that can serve as an ECS Anywhere sandbox.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-open-source-posts"&gt;
  &lt;/a&gt;
  Community open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Docker registry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/m9"&gt;Reducing data transfer costs with a Docker registry cache&lt;/a&gt; this is a super nice post from Vishesh Jindal on how they were able to reduce the cost of their AWS bill by first identifying an area of optimisation, and then putting together this creative solution that both helped them reduce the cost put also improve the performance of obtaining container images. This is a must read post this week.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In last weeks newsletter I covered the first of a two part series from Garry Stafford exploring open-source observability tools you can integrate with the Istio service mesh, and he has published the follow up post, &lt;a href="https://aws-oss.beachgeek.co.uk/ml"&gt;Kubernetes-based Microservice Observability with Istio Service Mesh: Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_ANsHp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AZPqwYhuZhICm0Z1ehdvKhA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_ANsHp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AZPqwYhuZhICm0Z1ehdvKhA.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/m8"&gt;IAM Service Account For aws-node DaemonSet&lt;/a&gt; prolific blogger and open source builder Vu Dao has put together this post on how to configure the Amazon VPC CNI plugin in your Kubernetes environments to use IAM roles for service accounts. He walks you step by step on what you need to do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/mm"&gt;Running ECS on CIS Hardened Amazon Linux&lt;/a&gt; nice post from Yehuda Cohen that shows what customer obsession looks like, as he works to get Amazon ECS up and running on the CIS hardened Amazon Linux images and runs into some problems. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MapLibre GL Native&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MapLibre GL Native is a community led fork derived from mapbox-gl-native prior to their switch to a non-OSS license, for both Android and iOS, developed by the MapTiler team in cooperation with Amazon, Facebook, Microsoft, and the MapLibre community. Following on from &lt;a href="https://aws-oss.beachgeek.co.uk/ma"&gt;this tweet&lt;/a&gt; from Andre Dufour, was the announcement post from Petr Pridal at MapTiler, &lt;a href="https://aws-oss.beachgeek.co.uk/mb"&gt;MapLibre GL Native: open-source mobile SDK for Android and iOS&lt;/a&gt; that shares more detail about the community, the project and resources on how you can get started. Check out the GitHub repo, &lt;a href="https://aws-oss.beachgeek.co.uk/mc"&gt;maplibre-gl-native, here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Snyk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/md"&gt;Automate vulnerability scanning in AWS CodePipeline with Snyk&lt;/a&gt; Jay Yeras with an import post this week on how you can use &lt;a href="https://aws-oss.beachgeek.co.uk/me"&gt;Snyk&lt;/a&gt; (an open source tool that helps you to find, fix and monitor known vulnerabilities in open source) and integrate with AWS CodePipeline so you can easily integrate security testing as part of your automated delivery pipelines. This post shows you how to set this up, and if you are not already doing this today, this is a good post to get you started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Two posts this week on Apache Airflow. Kicking things off is this amazing post, &lt;a href="https://aws-oss.beachgeek.co.uk/mf"&gt;Building an ETL pipeline with Apache Airflow and Visualizing AWS Redshift data using Microsoft Power BI&lt;/a&gt; from Ramses Alexander Coraspe Valdez that walks you through creating an epic solution on managing your Uber expenses (both Uber Eats and Rides) by incorporating Apache Airflow to orchestrate how to move and transform that data and then finally how you can visualise it. This is another must read post this week.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jjqf2CG7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/2654/1%2ATtmfX8AkTke2o3ov9P3Apw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jjqf2CG7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/2654/1%2ATtmfX8AkTke2o3ov9P3Apw.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/m7"&gt;Working with Amazon EKS and Amazon Managed Workflows for Apache Airflow (MWAA) v2.x&lt;/a&gt; this is a quick post I threw together last week, that came out of some conversation in the Apache Airflow open source slack community (if you use or are even experimenting with Apache Airflow, you should most certainly check it out, lots of deep expertise on all things Apache Airflow related). This post is an update on how to get the Amazon EKS example up and running, and builds upon the existing code example in the MWAA docs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-amazon-open-source-posts"&gt;
  &lt;/a&gt;
  AWS and Amazon open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Suricata&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Suricata is a fast, robust, open source network threat detection engine that includes real-time intrusion detection (IDS), an inline intrusion prevention system (IPS), network security monitoring (NSM), and offline packet capture (pcap) processing. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/lw"&gt;Scaling threat prevention on AWS with Suricata&lt;/a&gt; Victor Julien, Kelley Misata, Shakeel Ahmad, and Maritza Mills introduce you to Suricata and to the Open Information Security Foundation, which supports it. They also explain the important role open source security projects have in the security community as a whole and walked through an example of how you can import open source rulesets into AWS Network Firewall.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Distro for OpenTelemetry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/m3"&gt;Using AWS Distro for OpenTelemetry collector for cross-account metrics collection on Amazon ECS&lt;/a&gt; in this post, Rodrigue Koffi and Rafael Pereyra share with you how to use the AWS Distro for OpenTelemetry (ADOT) agent to collect application and platform metrics for workloads running on Amazon ECS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LgIS2JIi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/06/04/koffir_otel_cross-account-metrics_ecs-f1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LgIS2JIi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/06/04/koffir_otel_cross-account-metrics_ecs-f1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;COVID&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Colm Harte, Technical Director at NearForm wrote in the AWS open source blog last week, &lt;a href="https://aws-oss.beachgeek.co.uk/lv"&gt;How open source on AWS helped NearForm quickly build and scale its Covid-19 contact tracing app&lt;/a&gt; sharing why and how they use open source and AWS to help build digital products at speed and scale and then exploring how open source helps to build effective, trustworthy applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/m1"&gt;Building an ARM64 Rust development environment using AWS Graviton2 and AWS CDK&lt;/a&gt; Alistair McLean's post aims to show how you can set up the Visual Studio Code-based Code Server IDE, running on a Graviton2 EC2 instance, and use this environment for Rust development, including how you can build and install the rust-analyzer and CodeLLDB debugger plugins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--98n20WZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/05/13/blog_arch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--98n20WZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/05/13/blog_arch.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenShift&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/mn"&gt;Integrate ROSA with AWS CodeCommit&lt;/a&gt; Vani Eswarappa has put together this post that demonstrates how to integrate Red Hat OpenShift Service on AWS (ROSA) with AWS CodeCommit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-sqXoqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/06/08/Screen-Shot-2021-05-17-at-11.06.30-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-sqXoqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/06/08/Screen-Shot-2021-05-17-at-11.06.30-PM.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bottlerocket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/mo"&gt;Run Codefresh Pipelines on Amazon EKS Using Bottlerocket OS&lt;/a&gt; this collaboration between Kostis Kapelonis (Developer Advocate at Codefresh) and Curtis Rissi from AWS show you how to deploy Codefresh Runners on Amazon EKS using Bottlerocket-based nodes to help scale your build environments quickly and benefit from Bottlerocket OS‚Äôs hardened security and simplified management. Codefresh is a deployment platform specifically built for containers and Kubernetes, and you can use Codefresh to create CI/CD pipelines that take an application from source code all the way to production. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevOps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/lx"&gt;Choosing a Well-Architected CI/CD approach: Open-source software and AWS Services&lt;/a&gt; Brian Carlson continues his series of posts that discuss how to make informed decisions when choosing to implement open-source tools on AWS services, adopt managed AWS services, or use a combination of both - through the view of the Well Architected framework. Brian looks at key considerations for evaluating open-source software and AWS services from the perspectives of a startup company and a mature company as examples. Great post, really enjoyed reading this one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.NET on AWS Graviton 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ly"&gt;Build and deploy .NET web applications to ARM-powered AWS Graviton 2 Amazon ECS Clusters using AWS CDK&lt;/a&gt; Matt Laver has put together this post that demonstrates the low barrier to entry for .NET developers wanting to apply modern application development practices, using AWS CDK to define cloud applications as code, taking advantage of the price performance of ARM-based processors such as Graviton.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ywqbs4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/06/02/cdk-dotnet.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ywqbs4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/06/02/cdk-dotnet.jpeg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java/Jackson&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/m5"&gt;The AWS SDK for Java version 1.12 upgrades its dependency on Jackson&lt;/a&gt; Matthew Miller shares news on the minor version of AWS SDK for Java from 1.11 to 1.12 in order to upgrade the SDK‚Äôs dependency on the popular third-party JSON library, Jackson. He covers why we are doing this and how this might affect your applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Grafana&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/m0"&gt;Monitoring hybrid environments using Amazon Managed Service for Grafana&lt;/a&gt; Imaya Kumar Jagannathan and Vikram Venkataraman have put together this really nice post that walks you through the steps to visualise metrics from an Azure Cloud environment to Amazon Managed Service for Grafana (AMG) and create alert notifications in AMG to be sent to Amazon Simple Notification Service (Amazon SNS) and Slack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1NzQ6CI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/06/07/fig7-1024x482.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1NzQ6CI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/06/07/fig7-1024x482.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elastcisearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/m2"&gt;Monitor your Amazon ES domains with Amazon Elasticsearch Service Monitor&lt;/a&gt; Jon Handler and Prashant Agrawal show you how you can deploy and use an open source solution, the Amazon Elasticsearch Service Monitor, as way to monitor your Amazon ES infrastructure. Great post and very clear to follow as well as providing guidance on what costs you can expect to run this solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--71lvQTFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/06/04/bdb1578-monitor-es-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--71lvQTFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/06/04/bdb1578-monitor-es-3.png" alt="arch"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/lu"&gt;RedisConf Wrap Up&lt;/a&gt; Elizabeth Nguyen shares details and videos of a number of sessions we delivered and collaborated on as part of the recent RedisConf which we were a proud platinum sponsor of. Sessions included Building for high availability and extreme performance with Redis cluster, Microservices and Redis: A love story, Mitigating and preventing connection storms to keep your Redis cluster highly available, Working without a net: Extreme use cases of Redis and Better together: How AWS is helping build a stronger open source community. Lots of great sessions, so check them out.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CB2HEa6wS0Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS IoT EduKit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS IoT EduKit an IoT device and reference hardware that makes it easy for developers, from students to experienced professionals, to get hands-on experience building end-to-end IoT applications. If you want to take part in this really cool Hackathon, &lt;a href="https://aws-oss.beachgeek.co.uk/m6"&gt;Reinventing healthy spaces with AWS IoT EduKit&lt;/a&gt;, where you will build an open source healthy spaces solution using the M5Stack Core2 for AWS IoT EduKit reference hardware, AWS IoT Core, and at least one other cloud service. There are of course prizes for the best submissions, and details of how you can apply for the hardware as well as supporting resources. &lt;/p&gt;

&lt;p&gt;To get you ready, then check out this post from Francisco Gonzalez, &lt;a href="https://aws-oss.beachgeek.co.uk/m4"&gt;How to access and display files from Amazon S3 on IoT devices with AWS IoT EduKit&lt;/a&gt; as walks you through one of the sample tutorials available as part of the AWS IoT EduKit. Starting with one of the tutorial projects, Francisco builds this out into something more useful to provide you with ideas of how you can do something similar for your own projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--txTYPw2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f6e1126cedebf23e1463aee73f9df08783640400/2021/06/04/Slide1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--txTYPw2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f6e1126cedebf23e1463aee73f9df08783640400/2021/06/04/Slide1.jpeg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ROS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/lz"&gt;Deploy and Manage ROS Robots with AWS IoT Greengrass 2.0 and Docker&lt;/a&gt; Jeremy Wallace introduces you to a new way to deploy and manage robot software on production fleets at scale using AWS IoT Greengrass 2.0. AWS IoT Greengrass 2.0 is an open-source edge runtime and cloud service that reduces complexities when deploying and managing applications on robots. With AWS IoT Greengrass 2.0, developers can add local compute, messaging, and data management capabilities to their robotics fleets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rgfA5T3r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/a9334987ece78b6fe8bf130ef00b74847c1d3da6/2021/06/09/gg_deploy_01_ota_architecture_diagram.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rgfA5T3r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/a9334987ece78b6fe8bf130ef00b74847c1d3da6/2021/06/09/gg_deploy_01_ota_architecture_diagram.jpeg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a hands on keyboard type of post, my favourite!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Data on AWS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/lt"&gt;Exploring the UniProt protein knowledgebase with AWS Open Data and Amazon Neptune&lt;/a&gt; Eric Greene, Rafa Xu, and Yuan Shi collaborate on this post showing you how you can ingest Open Data sets available from the Open Data at AWS registry into your own Amazon Neptune database and then query the data with SPARQL, creating new relationships in the data, and visualising the data as a graph.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0oasVSk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/c5b76da3e608d34edb07244cd9b875ee86906328/2021/05/29/Example-5-results.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0oasVSk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/c5b76da3e608d34edb07244cd9b875ee86906328/2021/05/29/Example-5-results.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ActiveMQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now launch Apache ActiveMQ 5.16.2 brokers on Amazon MQ. This version update to ActiveMQ contains several fixes, improvements, and new features compared to the previously supported version, ActiveMQ 5.15.15.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Cassandra&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Keyspaces (for Apache Cassandra), a scalable, highly available, and fully managed Apache Cassandra‚Äìcompatible database service, is now in scope for AWS System and Organization Controls (SOC) Reports to help you run highly regulated Cassandra workloads more easily.&lt;/p&gt;

&lt;p&gt;AWS SOC Reports are independent third-party examination reports that demonstrate how AWS achieves key compliance controls and objectives. The purpose of these reports is to help you and your auditors understand the AWS controls established to support operations and compliance. Now, you can run Cassandra workloads that require the use of in-scope services for SOC 1, SOC 2, and SOC 3 reports more easily by using a fully managed and serverless database service.&lt;/p&gt;

&lt;p&gt;Amazon Keyspaces is in scope for AWS SOC 1, SOC 2, and SOC 3 Reports in all AWS Regions where AWS offers Keyspaces. To learn more, see Compliance Validation for Amazon Keyspaces (for Apache Cassandra).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;This week, make sure you attend &lt;a href="mailto:Open@Amazon"&gt;Open@Amazon&lt;/a&gt;. I am super excited about this event, so check out the blog post to find out more about the sessions and see you there on Wednesday.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open@Amazon&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;June 16th, 9:00am - 5:00PM EDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you missed it last week, next week we are running Open@Amazon, a celebration of open source on AWS with a fabulous cast of speakers, a fantastic broad set of topics and the event will be fully live so you can get your chance to interact with the speakers and the broader open source and AWS community. Check out the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/jo"&gt;What‚Äôs up with open source at AWS? Attend Open@Amazon live on Twitch June 16&lt;/a&gt; or just register to get a handy calendar invite &lt;a href="https://aws-oss.beachgeek.co.uk/jn"&gt;HERE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;23rd September, Bern Switzerland&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is this, an in person event returning? A stellar line up including our own Michael Hausenblas, an event looking at CNCF projects and the future of IT. Find out more and to view prices/register, by clicking &lt;a href="https://cloudnativeday.ch/en/#speakers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>Build an API in Rust (Part 1)</title>
      <author>NARUHODO</author>
      <pubDate>Mon, 14 Jun 2021 07:28:42 +0000</pubDate>
      <link>https://dev.to/naruhodo/build-an-api-in-rust-part-1-5c43</link>
      <guid>https://dev.to/naruhodo/build-an-api-in-rust-part-1-5c43</guid>
      <description>&lt;p&gt;In this multi-parts guide I will show you how to build a simple API in Rust. If you're not sure what Rust is, it's a low-level programming language created at Mozilla. It provides performances similar to C++ but is much safer thanks to the way its compiler is designed. It can catch many common runtime errors at compile time.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h4&gt;

&lt;p&gt;I myself am a beginner in Rust and there are still lots of things I need to learn. So it is possible that what I will show you might not be the best way to do things. If you notice something odd, please let me know!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h4&gt;

&lt;p&gt;To be able to follow this guide you should at least know the basics of Rust, if not I would advise checking the &lt;a href="https://doc.rust-lang.org/stable/book/"&gt;Rust Book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will also need to have &lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust and Cargo&lt;/a&gt; installed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-will-this-guide-cover"&gt;
  &lt;/a&gt;
  What will this guide cover?
&lt;/h4&gt;

&lt;p&gt;This guide is a bit long so I've decided to split it into 3 parts.&lt;/p&gt;

&lt;p&gt;The first part will cover the basics, I will explain how to setup the project and create one endpoint that will return a &lt;code&gt;Hello World!&lt;/code&gt; message.&lt;/p&gt;

&lt;p&gt;In the second part, I will connect the API to a MongoDB and add two endpoints to create and retrieve documents from the database.&lt;/p&gt;

&lt;p&gt;In the third and last part, I will show you how to build an authentication middleware to protect one of the endpoints.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-web-framework"&gt;
  &lt;/a&gt;
  The web framework
&lt;/h4&gt;

&lt;p&gt;I've decided to use &lt;code&gt;tide&lt;/code&gt; as the web framework. It is less popular than &lt;code&gt;actix&lt;/code&gt; (which is the most popular at the time being) but as I come from JavaScript, I feel more at home with &lt;code&gt;tide&lt;/code&gt; as it is a bit similar to &lt;code&gt;express&lt;/code&gt; and overall simpler to use in my opinion.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h4&gt;

&lt;p&gt;Let's start setting up the project.&lt;/p&gt;

&lt;p&gt;First, make sure you have &lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust and Cargo&lt;/a&gt; installed.&lt;/p&gt;

&lt;p&gt;Side-note, &lt;code&gt;cargo&lt;/code&gt; is the package manager for Rust, it is similar to &lt;code&gt;npm&lt;/code&gt; for those who come from JavaScript.&lt;/p&gt;

&lt;p&gt;Type the following command to create a new project with cargo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cargo new rust-api-example-part-1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're now ready to code, it would probably be easier to open this project in your favorite code editor.&lt;/p&gt;

&lt;p&gt;If you're using Visual Studio Code, I recommend installing the following extensions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rust-analyzer (matklad.rust-analyzer) (&lt;a href="https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer"&gt;VS Code marketplace link&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Better TOML (bungcip.better-toml) (&lt;a href="https://marketplace.visualstudio.com/items?itemName=bungcip.better-toml"&gt;VS Code marketplace link&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;rust-analyzer&lt;/strong&gt; provides all the useful features when coding in Rust (code completion, linting, documentation, etc)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Better TOML&lt;/strong&gt; provides syntax highlighting for &lt;code&gt;.toml&lt;/code&gt; files, which is the format used by Cargo for configuration.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installing-the-dependencies"&gt;
  &lt;/a&gt;
  Installing the dependencies
&lt;/h4&gt;

&lt;p&gt;Before we start coding, we need to install the dependencies. At this stage we will only need three of them, &lt;code&gt;tide&lt;/code&gt;, &lt;code&gt;async-std&lt;/code&gt; and &lt;code&gt;serde&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As I explained earlier, &lt;code&gt;tide&lt;/code&gt; is the web framework that we will use to build the API.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;async-std&lt;/code&gt; is an async runtime. Rust does not provide an async runtime by default, so it is up to us to install one. At the moment there are two popular options, &lt;code&gt;tokio&lt;/code&gt; and &lt;code&gt;async-std&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a bit annoying because it means that you need to make sure all the asynchronous libraries you will use in the project need to be compatible with the async runtime you picked.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tide&lt;/code&gt; requires that we use &lt;code&gt;async-std&lt;/code&gt; so we will install this runtime.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;serde&lt;/code&gt; is a framework to serialize and deserialize data (such as converting JSON objects to Rust structs).&lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;Cargo.toml&lt;/code&gt; file and add the following under &lt;code&gt;[dependencies]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="py"&gt;tide&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.16"&lt;/span&gt;
&lt;span class="nn"&gt;async-std&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;["attributes"]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;serde&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;["derive"]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can specify extra features like I did for &lt;code&gt;async-std&lt;/code&gt;, in this case we will need the &lt;code&gt;attributes&lt;/code&gt; feature.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#make-sure-it-runs"&gt;
  &lt;/a&gt;
  Make sure it runs
&lt;/h4&gt;

&lt;p&gt;By default when creating the project with cargo, you should have a default &lt;code&gt;src/main.rs&lt;/code&gt; file containing an example function.&lt;br&gt;
Let's make sure it runs with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cargo run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should print &lt;code&gt;Hello, world!&lt;/code&gt; in your terminal.&lt;/p&gt;

&lt;p&gt;Now you can delete that function so we can start setting up our API.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code!
&lt;/h4&gt;

&lt;p&gt;In the &lt;code&gt;src/main.rs&lt;/code&gt; file, add the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[async_std::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;tide&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tide&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="nf"&gt;.listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"127.0.0.1:8080"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;main&lt;/code&gt; function is now asynchronous because we've added the &lt;code&gt;async&lt;/code&gt; keyword in front. For it to work correctly we need to add a runtime, which is exactly what &lt;code&gt;#[async_std::main]&lt;/code&gt; does. It is an "attribute" macro that simply wraps our &lt;code&gt;main&lt;/code&gt; function in an asynchronous runtime.&lt;/p&gt;

&lt;p&gt;The function returns &lt;code&gt;tide::Result&amp;lt;()&amp;gt;&lt;/code&gt; which means it will return either nothing (&lt;code&gt;Ok(())&lt;/code&gt;) or a Tide error.&lt;/p&gt;

&lt;p&gt;Inside the function, we create a new Tide instance then we call the function &lt;code&gt;listen&lt;/code&gt; to start the local server on the port &lt;code&gt;8080&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you try to contact the API now, you will get a &lt;code&gt;404&lt;/code&gt;, because we didn't define any route yet.&lt;/p&gt;

&lt;p&gt;Let's create our first controller, add the following above the &lt;code&gt;main&lt;/code&gt; function in &lt;code&gt;src/main.rs&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;tide&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Clone,&lt;/span&gt; &lt;span class="nd"&gt;Debug)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;tide&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello world!"&lt;/span&gt;&lt;span class="nf"&gt;.into&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;hello&lt;/code&gt; controller is asynchronous and takes one parameter. Since we don't actually use the parameter we can add a leading underscore per convention. The &lt;code&gt;_req&lt;/code&gt; parameter is of type &lt;code&gt;Request&lt;/code&gt; (imported from &lt;code&gt;tide&lt;/code&gt;), it expects a State which is why I've defined an empty &lt;code&gt;State&lt;/code&gt; struct.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;State&lt;/code&gt; struct needs to implement the &lt;code&gt;Clone&lt;/code&gt; trait so we use the &lt;code&gt;derive&lt;/code&gt; marco from &lt;code&gt;serde&lt;/code&gt; to do so.&lt;/p&gt;

&lt;p&gt;The controller return type needs to be &lt;code&gt;tide::Result&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As for the implementation, we simply return a &lt;code&gt;&amp;amp;str&lt;/code&gt; that we transform into a &lt;code&gt;tide::Result&lt;/code&gt; with the &lt;code&gt;.into()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;That's all for our controller. Now we will need to make a few changes to our &lt;code&gt;main&lt;/code&gt; function. Change it with the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[async_std::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;tide&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tide&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;with_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;

  &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="nf"&gt;.at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="nf"&gt;.listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"127.0.0.1:8080"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've modified the initialization of our app to pass an empty &lt;code&gt;State&lt;/code&gt;. This will be useful later when we will need to pass around our database connection.&lt;/p&gt;

&lt;p&gt;Then I've added our endpoint &lt;code&gt;GET /hello&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now if you try to run the app and make a request to &lt;code&gt;http://localhost:8080/hello&lt;/code&gt; you should get &lt;code&gt;Hello world!&lt;/code&gt; as a response.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h4&gt;

&lt;p&gt;That's it for the part 1 of this guide, I hope it was helpful. If you noticed any error or something that could be improved, please let me know!&lt;/p&gt;

&lt;p&gt;You can find the the full example on GitHub: &lt;a href="https://github.com/ncribt/rust-api-example-part-1"&gt;https://github.com/ncribt/rust-api-example-part-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Discover more posts from me on my personal blog: &lt;a href="https://naruhodo.dev"&gt;https://naruhodo.dev&lt;/a&gt;&lt;/p&gt;

</description>
      <category>rust</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Paint Website | Javascript</title>
      <author>Knol Coder</author>
      <pubDate>Mon, 14 Jun 2021 07:11:39 +0000</pubDate>
      <link>https://dev.to/knolcoder/paint-website-javascript-2on1</link>
      <guid>https://dev.to/knolcoder/paint-website-javascript-2on1</guid>
      <description>&lt;p&gt;This Is A Paint Website , Here you can do painting in this website . i just created like ms paint. you can download source code by paying here. if you want free, the just comment here and lucky users will get it for free. &lt;/p&gt;

&lt;p&gt;Download From here  - &lt;a href="https://www.buymeacoffee.com/webme/e/27592"&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Demo - &lt;a href="https://genei.000webhostapp.com/paint-site/"&gt;https://genei.000webhostapp.com/paint-site/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Comment Here To Get It For Free !&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Getting Comfortable With CSS Selectors (Part 2) pseudo-classes and pseudo-elements in CSS</title>
      <author>Victor Ikechukwu</author>
      <pubDate>Mon, 14 Jun 2021 07:07:34 +0000</pubDate>
      <link>https://dev.to/mr_victor/getting-comfortable-with-css-selectors-part-2-pseudo-classes-and-pseudo-elements-in-css-nkb</link>
      <guid>https://dev.to/mr_victor/getting-comfortable-with-css-selectors-part-2-pseudo-classes-and-pseudo-elements-in-css-nkb</guid>
      <description>&lt;p&gt;Hello everyone üëã‚Äç, Welcome back to my series, &lt;a href="https://vickyikechukwu.hashnode.dev/series/css-selectors"&gt;Getting Comfortable With CSS Selectors&lt;/a&gt;,&lt;br&gt;
if this is the first post in the series you are reading, I recommend checking out my previous article &lt;a href="https://vickyikechukwu.hashnode.dev/getting-comfortable-with-css-selectors-part-1"&gt;Getting Comfortable With CSS Selectors (Part 1)&lt;/a&gt; to follow up in the in series üòâ. &lt;/p&gt;

&lt;p&gt;in this article, we are going to continue from where we left off in the first part of the series, where we talked about some of the selectors we have in CSS. we will be looking at the &lt;code&gt;Pseudo-Classes&lt;/code&gt; and &lt;code&gt;Pseudo-Elements&lt;/code&gt; CSS selectors. sounds cool right? let's get into it üëá.&lt;/p&gt;

&lt;h1&gt;Pseudo-classes&lt;/h1&gt;

&lt;blockquote&gt;
CSS pseudo-classes are not exactly selectors on their own, they are keywords added to a CSS selector and let developers specify a special state of the selected element(s).
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;All Pseudo-class selectors in CSS are preceded by a colon &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#1-xhover"&gt;
  &lt;/a&gt;
  1. X:hover
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Any button over which the user's pointer is hovering */&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;One of the most commonly used pseudo-class the &lt;code&gt;:hover&lt;/code&gt; &lt;code&gt;pseudo-class&lt;/code&gt;, which is used to style element(s) in the hover state &lt;code&gt;(when the user hovers our them with a pointing device, usually a mouse)&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;so in the example, we would give every link a color of pink when it is been hovered on. Want to apply specific styling when a user hovers over an element? This will get the job done! üëç.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-xfocus"&gt;
  &lt;/a&gt;
  2. X:focus
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt; &lt;span class="c"&gt;/* Selects any &amp;lt;input&amp;gt; with the field class when focused */&lt;/span&gt; 
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nc"&gt;.field&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;:focus&lt;/code&gt; CSS &lt;code&gt;pseudo-class&lt;/code&gt; represents an element (usually a form input) that has received focus (accepts keyboard or mouse events, or other forms of input).&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Vickyfloxy/embed/ExZeBpY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;in the codepen the &lt;code&gt;:focus&lt;/code&gt; &lt;code&gt;pseudo-class&lt;/code&gt; is used to give input with the &lt;code&gt;red-class&lt;/code&gt; &lt;code&gt;class&lt;/code&gt; a red background and a blue background to the input with the &lt;code&gt;blue-class&lt;/code&gt; &lt;code&gt;class&lt;/code&gt; whenever they are focused on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-xnthoftypen"&gt;
  &lt;/a&gt;
  3 X:nth-of-type(n)
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Selects every second &amp;lt;p&amp;gt; element among any group of siblings */&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;:nth-of-type&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;lime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;:nth-of-type()&lt;/code&gt; CSS &lt;code&gt;pseudo-class&lt;/code&gt; selects elements(selectors) of a given type based on their position/location among a group of siblings.&lt;/p&gt;

&lt;p&gt;say we have a &lt;code&gt;ul&lt;/code&gt; and we want to style every &lt;code&gt;li&lt;/code&gt;  whose numeric position in the list is even, no need to give them a special &lt;code&gt;class&lt;/code&gt;, we could do that with the &lt;code&gt;:nth-of-type()&lt;/code&gt; &lt;code&gt;pseudo-class&lt;/code&gt; selector!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Vickyfloxy/embed/XWpPLxv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
What about those whose numeric position in the list is odd, we got it covered&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Vickyfloxy/embed/KKaxjrr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#4-xfirstoftype"&gt;
  &lt;/a&gt;
  4. X:first-of-type
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;:first-of-type&lt;/code&gt; &lt;code&gt;pseudo-class&lt;/code&gt; Same as &lt;code&gt;:nth-of-type(1)&lt;/code&gt;. Represents an element that is the first sibling of its type in the list of children of its parent element.&lt;br&gt;
So if I wanted the first &lt;code&gt;li&lt;/code&gt; to have a different style from its siblings, I could easily do that using the &lt;code&gt;:first-of-type&lt;/code&gt; pseudo-class&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Vickyfloxy/embed/wvgELYm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-xvisited"&gt;
  &lt;/a&gt;
  5. X:visited
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Selects any &amp;lt;a&amp;gt; that has been visited */&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:visited&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In some websites, it's common to apply some special styles to links that the user has visited so that when they come back to the page, they can know the external links they have visited already.&lt;br&gt;
This can be done with &lt;code&gt;:visited&lt;/code&gt; CSS &lt;code&gt;pseudo-class&lt;/code&gt; as its styles only apply to links that have been visited by the user. &lt;/p&gt;

&lt;h1&gt;Pseudo-elements&lt;/h1&gt;

&lt;p&gt;We've got another interesting group called &lt;code&gt;pseudo-elements&lt;/code&gt;&lt;br&gt;
CSS &lt;code&gt;pseudo-elements&lt;/code&gt; are keywords added to a selector that lets you style a particular part of the selected element(s).&lt;/p&gt;

&lt;p&gt;I know, i know, it seems similar to CSS &lt;code&gt;pseudo-classes&lt;/code&gt; right ü§î. Well there are two main differences between them&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;pseudo-elements&lt;/code&gt; are preceded with two colons &lt;code&gt;::&lt;/code&gt; instead of one, although these days modern browsers are more forgiving and support both single &lt;code&gt;:&lt;/code&gt; and double &lt;code&gt;::&lt;/code&gt; colons for the &lt;code&gt;pseudo-elements&lt;/code&gt;. But it is a best practice to use two colons &lt;code&gt;::&lt;/code&gt; üòè&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;pseudo-classes&lt;/code&gt; are all about state, when we speak of state, I mean things like a visited link, a focused input field, an image that is being hovered upon, etc. While &lt;code&gt;pseudo-elements&lt;/code&gt; are used to style sections or a particular part of of an element, things like the first letter in a word, the first line, etc.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#6-xfirstletter-firstletter"&gt;
  &lt;/a&gt;
  6. X::first-letter (:first-letter)
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;::first-letter&lt;/code&gt; represents the first letter on the first line of a block-level element, as long it is not coming after an image or a table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="nd"&gt;::first-letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Vickyfloxy/embed/XWpPvjm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;as you can we use the &lt;code&gt;::first-letter&lt;/code&gt; pseudo-element to make the first letter of every &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 300% and pink üòÅ.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-xselection-selection"&gt;
  &lt;/a&gt;
  7. X::selection (:selection)
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="nd"&gt;::selection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;::selection&lt;/code&gt; &lt;code&gt;pseudo-element&lt;/code&gt; is used to select and style the portion of a document that has been highlighted by the user. This is a really fun pseudo-element selector.&lt;/p&gt;

&lt;p&gt;So if we wanted to overwrite the default styles of the browser that is applied text when they are selected/highlighted in our websites and apply our own custom styles, we can easily do that with the &lt;code&gt;::selection&lt;/code&gt; &lt;code&gt;pseudo-element&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-xbefore-before-and-xafter-after"&gt;
  &lt;/a&gt;
  8. X::before (:before) And X::after (:after)
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; &lt;code&gt;pseudo-elements&lt;/code&gt; are used to generate styleable content around the selected element's actual content, with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/content"&gt;CSS content&lt;/a&gt; property.&lt;/p&gt;

&lt;p&gt;we select the selector and after it, we give the &lt;code&gt;content&lt;/code&gt; property a value, and whatever we specify in the value will be added before or after the selector in the Html.&lt;/p&gt;

&lt;blockquote&gt;
   `X::before (:before):` Represents a styleable child pseudo-element immediately before the originating element's actual content.
&lt;/blockquote&gt;   

&lt;blockquote&gt;
   `X::after (:after):` Represents a styleable child pseudo-element immediately after the originating element's actual content.
&lt;/blockquote&gt;  

&lt;p&gt;By default the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; &lt;code&gt;pseudo-elements&lt;/code&gt; create an inline element, that can be styled and modified like any other element in the DOM. this gives us control to create cool interesting effects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üö® Note the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; &lt;code&gt;pseudo-element&lt;/code&gt; selectors should only be used to add cosmetic and stylistic content on our page. True content that is actually important for the page should be added to your page's markup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is an example of using the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; &lt;code&gt;pseudo-element&lt;/code&gt;s i found on Codepen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/giana/embed/yYBpVY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Alright coder This brings us to the end of the series,  we've covered quite a bit about CSS selectors In this series! üéâüéâü•Ç.&lt;/p&gt;

&lt;p&gt;for a more comprehensive guide on CSS selectors check out some of these resources.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Pseudo-classes_and_pseudo-elements"&gt;MDN guide&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;MDN Pseudo-classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"&gt;MDN Pseudo-elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And if you're up for it I have a &lt;a href="https://codepen.io/Vickyfloxy/pen/LYxgYzE"&gt;Little Exercise On Codepen&lt;/a&gt; üòè For you to test out your knowledge of what we have covered in this series. So I will like you to style the Html using the commented instructions in the CSS panel. Here is the &lt;a href="https://codepen.io/Vickyfloxy/pen/XWpxWeQ"&gt;Codepen Solution&lt;/a&gt; in case you get stuck üôÇ.  &lt;/p&gt;

&lt;p&gt;So what are you waiting for, take this knowledge out there and go write some top-notch CSS styles that will impress your friends üíÉüíÉ.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/molipa"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks so much for reading! ‚ù§ And keep on coding! üë®‚Äçüíª.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Share and Like it with your friends and feel free to follow me on &lt;a href="https://twitter.com/VectorIkechukwu"&gt;Twitter&lt;/a&gt; so you won't miss my latest articles again.&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>css3</category>
      <category>webdev</category>
    </item>
    <item>
      <title>AWS EC2</title>
      <author>Ajit Singh</author>
      <pubDate>Mon, 14 Jun 2021 06:42:50 +0000</pubDate>
      <link>https://dev.to/this-is-learning/aws-ec2-3ab4</link>
      <guid>https://dev.to/this-is-learning/aws-ec2-3ab4</guid>
      <description>&lt;p&gt;AWS EC2 is one of the most used service of the AWS ecosystem. It also a backbone of many other services.&lt;/p&gt;

&lt;p&gt;Let us understand what is EC2. In simple words EC2 is a computer that you get to use over the internet which you don't need to turn on and off AWS manage that for you just request them when you want your computer.&lt;/p&gt;

&lt;p&gt;In technical terms a server that you launch in AWS. It is used to compute, run virtual machines, save data, run cron jobs, etc. We mainly do the following on EC2&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Running virtual machines(A virtual machine, commonly shortened to just VM, is no different than any other physical computer like a laptop, smart phone, or server. It has a CPU, memory, disks to store your files, and can connect to the internet if needed. While the parts that make up your computer (called hardware) are physical and tangible, VMs are often thought of as virtual computers or software-defined computers within physical servers, existing only as code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Storing data or running computation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Running cron jobs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hosting servers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Running Machine learning models &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-ec2"&gt;
  &lt;/a&gt;
  Advantages of EC2
&lt;/h2&gt;

&lt;p&gt;The main advantages of EC2 are it's on demand computation, memory, RAM and network increase. Let us think of it in this way when you buy a computer it has some specification what if you want to change these specifications you have to buy a new RAM, an external hard disk or a new processor but when you are running a website the seasonal changes, unknown traffic, running a machine learning model with unknown amount of data(Live data, bug data) it makes it very hard to predict these things. EC2 provides a solution to this problem here you can change the specification on demand it just takes a few minutes. &lt;/p&gt;

&lt;p&gt;You can distribute load across multiple machines which provides resistance to machine failure. You can also deploy your application across multiple regions or continents which makes your services immune even to disasters across continents.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#os-choices"&gt;
  &lt;/a&gt;
  OS choices
&lt;/h2&gt;

&lt;p&gt;We got a virtual machine but we need a operating system to run something on it. There are three kind of OS available on AWS Linux(various distribution), windows, MacOS you can use them as needed&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ec2-configs-available"&gt;
  &lt;/a&gt;
  EC2 Configs Available
&lt;/h2&gt;

&lt;p&gt;You can configure your EC2 instances in whatever way you want in terms of RAM, memory, compute power, Network speed but there are additional configuration available on EC2&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Bootstrap scripts: After we have installed a OS if we need to run some startup scripts for example on starting our Linux or windows machine some programmes start running in the background(Cortana, Task Manager). We can run them via our bootstrap scripts(scripts that run when we start our EC2 instance). This are really useful for cases when our EC2 instance fails because our resources allocated to our instance are not enough or there is a power outage. Whenever we start our instance our bootstrap script runs and install software or setup the things we need for starting our server like setting up a ngnix config on start or starting an Apace server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firewall rules: We have to setup who has access to our EC2 instance this is where firewall rules comes. AWS already has some built in functionality to set up some kind of firewalls like security groups. You can also setup your own firewalls for additional security or compliance to laws in various regions.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;EC2 is a great solution to a problem that we all faced and still face in our personsonal computers of buying physical memory, processor, RAM for our computers. In this series we will learn more about it have a few hands on exercises which will all be in AWS free tier if you follow along. Next we will do a small exercise on how to setup your AWS EC2 instaces.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>Design Patterns Cheat¬†Sheet</title>
      <author>Ali Sherief</author>
      <pubDate>Mon, 14 Jun 2021 06:21:36 +0000</pubDate>
      <link>https://dev.to/zenulabidin/design-patterns-cheat-sheet-32ed</link>
      <guid>https://dev.to/zenulabidin/design-patterns-cheat-sheet-32ed</guid>
      <description>&lt;p&gt;No matter which programming language you are proficient in, it is always important that you know a few basic design patterns that will make your code architecture look better. After all, nothing beats a well-written program that's easily maintainable by others.&lt;/p&gt;

&lt;p&gt;Software engineers invented design patterns to templatize common concepts in software engineering. Most of these patterns naturally occur in many programs, and the templates were specifically designed to be as efficient when used in a particular setting as possible.&lt;/p&gt;

&lt;p&gt;As I'm expecting developers from all kinds of languages to be reading this, I will refrain from citing code examples for each design pattern since those who don't understand the language will find it difficult to understand. UML diagrams are the way to go here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proxy-pattern"&gt;
  &lt;/a&gt;
  Proxy Pattern
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aTWVzjLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/880/0%2ArNh2zghDqsvuJQt1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aTWVzjLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/880/0%2ArNh2zghDqsvuJQt1.jpg" alt="proxy pattern UML diagram"&gt;&lt;/a&gt; &lt;em&gt;Image from wikipedia.org&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The proxy pattern is used when we want a resource to be managed by a surrogate instead of directly. A scenario where the proxy pattern is particularly effective is during web content loading, by displaying a box with a moving gradient on the screen while a network request is downloading the actual content. Other uses of the proxy pattern are to act as a middleman between a remote resource, abstract expensive parts of the code into another class, implement access control to a resource, or implement resource locking.&lt;/p&gt;

&lt;p&gt;The proxy pattern consists of an interface with all the resource methods and two different classes that implement the interface concretely. The classes should have a protected constructor, virtual get &amp;amp; set methods, and a static function that calls the constructor itself. If your language doesn't support interfaces, use an abstract class and make the two classes' subclasses. Ensure you override all the methods that are part of the "interface" (actually the abstract class).&lt;/p&gt;

&lt;p&gt;One of these subclasses should be the real resource manager, and the other subclass should be the proxy surrogate that acts as the resource manager.&lt;/p&gt;

&lt;p&gt;The proxy pattern makes the most sense to use when your resource management is being done inside your program's main functions instead of in the background.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flyweight"&gt;
  &lt;/a&gt;
  Flyweight
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e8pzpF8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/880/0%2AisU-71b_vECRTl4Q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e8pzpF8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/880/0%2AisU-71b_vECRTl4Q.jpg" alt="flyweight pattern UML diagram"&gt;&lt;/a&gt; &lt;em&gt;Image from wikipedia.org&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Flyweight pattern is used for acting on several objects at once, which all have almost identical properties. The flyweight uses just one class for all the effectively constant class properties‚Ää-‚Ääthe rest of the state that has to change is passed as an argument to the methods the flyweight objects must support, implemented inside the Flyweight class itself.&lt;/p&gt;

&lt;p&gt;The rule of thumb for flyweight classes is &lt;strong&gt;never to update the internal state&lt;/strong&gt;. It is supposed to remain constant to preserve the memory savings it gives us. Consequentially, all intrinsic state should be marked as private.&lt;/p&gt;

&lt;p&gt;The mutable state should always be passed via a method argument and stored in a context manager object that corresponds to but is not a member of its flyweight class.&lt;/p&gt;

&lt;p&gt;You can still use hierarchical relationships inside flyweight classes, but this will have to be represented in the class hierarchy of the context objects you pass as arguments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strategy"&gt;
  &lt;/a&gt;
  Strategy
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e8pzpF8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/880/0%2AisU-71b_vECRTl4Q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e8pzpF8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/880/0%2AisU-71b_vECRTl4Q.jpg" alt="strategy pattern UML diagram"&gt;&lt;/a&gt; &lt;em&gt;Image from wikipedia.org&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The strategy pattern lets you define different ways to execute a task based on user input, hence the same strategy. It is one of the most commonly used patterns. Whenever a method uses an abstract class or interface to compute the result differently, it's using the strategy pattern. The strategy pattern is meant to make code more extensible and easier to test.&lt;/p&gt;

&lt;p&gt;A strategy is constructed using an interface full of actions a strategy must support, followed by multiple different class implementations of that interface. A context is a callable object reference pointing to the interface but is actually using one of the implementation classes.&lt;/p&gt;

&lt;p&gt;The strategy pattern is particularly effective for writing tests because you can make an interface with your class functions, an implementation with your real class, and another "mock" implementation that has all the functions but does not affect external state such as databases. You can substitute the real class for the mock class on the fly.&lt;/p&gt;




&lt;p&gt;Thanks for reading. If you have any comments about the design patterns used here, leave them below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://elements.envato.com/design-team-planning-for-a-new-project-PT5DFCH"&gt;Cover Image by sianstock from Envato¬†Elements&lt;/a&gt;&lt;/p&gt;

</description>
      <category>computerscience</category>
    </item>
    <item>
      <title>Unleash the full power of angular-i18next</title>
      <author>Adriano Raiano</author>
      <pubDate>Mon, 14 Jun 2021 06:11:23 +0000</pubDate>
      <link>https://dev.to/adrai/unleash-the-full-power-of-angular-i18next-4b7o</link>
      <guid>https://dev.to/adrai/unleash-the-full-power-of-angular-i18next-4b7o</guid>
      <description>&lt;p&gt;Let's talk about internationalization (i18n) for Angular (not AngularJS, not Angular 2, just Angular üòâ).&lt;/p&gt;

&lt;p&gt;When it comes to JavaScript localization. One of the most popular frameworks is &lt;a href="https://www.i18next.com"&gt;i18next&lt;/a&gt;. One of the most famous Angular extension for i18next is &lt;a href="https://github.com/Romanchuk/angular-i18next/"&gt;angular-i18next&lt;/a&gt;.&lt;br&gt;
It was created back in April 2017 by &lt;a href="https://github.com/Romanchuk"&gt;Sergey Romanchuk&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#toc"&gt;
  &lt;/a&gt;
  TOC
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-i18next"&gt;So first of all: "Why i18next?"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#start"&gt;Let's get into it...&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-started"&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#language-switcher"&gt;Language Switcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#separate"&gt;Separate translations from code&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-look"&gt;How does this look like?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#save-missing"&gt;save missing translations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more"&gt;üëÄ but there's more...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#congratulations"&gt;üéâü•≥ Congratulations üéäüéÅ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#so-first-of-all-why-i18next"&gt;
  &lt;/a&gt;
  So first of all: "Why i18next?" &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;i18next was created in late 2011. It's older than most of the libraries you will use nowadays, including your main frontend technology (angular, react, vue, ...).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‚û°Ô∏è sustainable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Based on how long i18next already is available open source, there is no real i18n case that could not be solved with i18next.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‚û°Ô∏è mature&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;i18next can be used in any javascript (and a few non-javascript - .net, elm, iOS, android, ruby, ...) environment, with any UI framework, with any i18n format, ... &lt;a href="https://www.i18next.com/overview/supported-frameworks"&gt;the possibilities are endless&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‚û°Ô∏è extensible&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There is a plenty of features and possibilities you'll get with i18next compared to other regular 18n frameworks.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‚û°Ô∏è rich&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.i18next.com/overview/comparison-to-others"&gt;Here you can find more information about why i18next is special.&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#lets-get-into-it"&gt;
  &lt;/a&gt;
  Let's get into it... &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Make sure you have Node.js and npm installed. It's best, if you have some experience with simple HTML, JavaScript and basic Angular, before jumping to &lt;a href="https://github.com/Romanchuk/angular-i18next/"&gt;angular-i18next&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Take your own Angular project or create a new one, i.e. with &lt;a href="https://angular.io/guide/setup-local#install-the-angular-cli"&gt;the Angular cli&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx @angular/cli new my-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To simplify let's remove the "generated" content of the angular-cli:&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eQKvRdid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlwvwcs502aawu3tj3y5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQKvRdid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlwvwcs502aawu3tj3y5.jpg" alt="app_0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to adapt the app to detect the language according to the user‚Äôs preference.&lt;br&gt;
And we will create a language switcher to make the content change between different languages.&lt;/p&gt;

&lt;p&gt;Let's install some i18next dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.i18next.com"&gt;i18next&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Romanchuk/angular-i18next/"&gt;angular-i18next&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/i18next/i18next-browser-languageDetector"&gt;i18next-browser-languagedetector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;npm install i18next angular-i18next i18next-browser-languagedetector&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's modify our &lt;code&gt;app.module.ts&lt;/code&gt; to integrate and initialize the i18next config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;APP_INITIALIZER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LOCALE_ID&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;I18NEXT_SERVICE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;I18NextModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;I18NextLoadResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ITranslationService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defaultInterpolationFormat&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;angular-i18next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LanguageDetector&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i18next-browser-languagedetector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;i18nextOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fallbackLng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;translation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;welcome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome to Your Angular App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;de&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;translation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;welcome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Willkommen zu Deiner Vue.js App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;interpolation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;I18NextModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interpolationFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultInterpolationFormat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;appInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i18next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ITranslationService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;I18NextLoadResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i18next&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LocizeApi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LanguageDetector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i18nextOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;localeIdFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i18next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ITranslationService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i18next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;I18N_PROVIDERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;APP_INITIALIZER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;useFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;appInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;I18NEXT_SERVICE&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LOCALE_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;I18NEXT_SERVICE&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;useFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;localeIdFactory&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;AppComponent&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;BrowserModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;I18NextModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;I18N_PROVIDERS&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, now let's update the &lt;code&gt;app.component.html&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Toolbar --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toolbar"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"banner"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{ 'welcome' | i18next }}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Highlight Card --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card highlight-card card-small"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{ 'welcome' | i18next }}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now see something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w3FPdqCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96q4exvnqo4g251aa5v8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w3FPdqCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96q4exvnqo4g251aa5v8.jpg" alt="app_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nice! So let's add an additional text, with an &lt;a href="https://www.i18next.com/translation-function/interpolation#unescape"&gt;interpolated unescaped&lt;/a&gt; value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Toolbar --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toolbar"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"banner"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{ 'welcome' | i18next }}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Highlight Card --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card highlight-card card-small"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{ 'welcome' | i18next }}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ 'descr' | i18next: { url: 'https://github.com/Romanchuk/angular-i18next' } }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do not forget to add the new key also to the resources:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;i18nextOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fallbackLng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;translation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;welcome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome to Your Angular App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;descr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;For a guide and recipes on how to configure / customize this project, check out {{-url}}.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;de&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;translation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;welcome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Willkommen zu Deiner Vue.js App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;descr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eine Anleitung und Rezepte f√ºr das Konfigurieren / Anpassen dieses Projekts findest du in {{-url}}.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;interpolation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;I18NextModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interpolationFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultInterpolationFormat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Does it work? - Of course!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vSDFvHer--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jusyge0m8tdk14dmpizj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vSDFvHer--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jusyge0m8tdk14dmpizj.jpg" alt="app_2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And thanks to the language-detector, you can also try to switch the language with the query parameter &lt;code&gt;?lng=de&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bok7TRk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxnb3ktc285nvbd2rotj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bok7TRk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxnb3ktc285nvbd2rotj.jpg" alt="app_3"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#language-switcher"&gt;
  &lt;/a&gt;
  Language Switcher &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We like to offer the possibility to change the language via some sort of language switcher.&lt;/p&gt;

&lt;p&gt;So let's add a footer section in our &lt;code&gt;app.component.html&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Footer --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;ngFor&lt;/span&gt; &lt;span class="na"&gt;let-lang&lt;/span&gt; &lt;span class="na"&gt;[ngForOf]=&lt;/span&gt;&lt;span class="s"&gt;"languages"&lt;/span&gt; &lt;span class="na"&gt;let-i=&lt;/span&gt;&lt;span class="s"&gt;"index"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"i !== 0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;|&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"language !== lang"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"javascript:void(0)"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link lang-item {{lang}}"&lt;/span&gt; &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"changeLanguage(lang)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ lang.toUpperCase() }}&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"language === lang"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"current lang-item {{lang}}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ lang.toUpperCase() }}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we need also to update the &lt;code&gt;app.components.ts&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Inject&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;I18NEXT_SERVICE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ITranslationService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;angular-i18next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component.less&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;de&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;I18NEXT_SERVICE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;i18NextService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ITranslationService&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i18NextService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialized&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i18NextService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;changeLanguage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i18NextService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i18NextService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changeLanguage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;updateState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NULSjrmp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zp7ac849dcyj0em81k6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NULSjrmp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zp7ac849dcyj0em81k6.jpg" alt="app_4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ü•≥ Awesome, you've just created your first language switcher!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/i18next/i18next-browser-languageDetector"&gt;i18next-browser-languagedetector&lt;/a&gt; now it tries to detect the browser language and automatically use that language if you've provided the translations for it. The manually selected language in the language switcher is persisted in the localStorage, next time you visit the page, that language is used as preferred language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#separate-translations-from-code"&gt;
  &lt;/a&gt;
  Separate translations from code &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Having the translations in our code works, but is not that suitable to work with, for translators.&lt;br&gt;
Let's separate the translations from the code and pleace them in dedicated json files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/locize/i18next-locize-backend"&gt;i18next-locize-backend&lt;/a&gt; will help us to do so.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="//../how-to-internationalize-react-i18next/#for-sure"&gt;What is locize?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#how-does-this-look-like"&gt;
  &lt;/a&gt;
  How does this look like? &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;First you need to signup at &lt;a href="https://locize.com/register"&gt;locize&lt;/a&gt; and &lt;a href="https://docs.locize.com/integration/getting-started/create-a-user-account"&gt;login&lt;/a&gt;.&lt;br&gt;
Then &lt;a href="https://docs.locize.com/integration/getting-started/add-a-new-project"&gt;create a new project&lt;/a&gt; in locize and add your translations. You can add your translations either by &lt;a href="https://docs.locize.com/more/general-questions/how-to-import-translations-from-a-file"&gt;importing the individual json files&lt;/a&gt; or via &lt;a href="https://docs.locize.com/integration/api#update-remove-translations"&gt;API&lt;/a&gt; or by using the &lt;a href="https://github.com/locize/locize-cli"&gt;CLI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install i18next-locize-backend&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Adapt the &lt;code&gt;app.modules.ts&lt;/code&gt; file to use the i18next-locize-backend and make sure you copy the project-id from within your locize project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;APP_INITIALIZER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LOCALE_ID&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;I18NEXT_SERVICE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;I18NextModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;I18NextLoadResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ITranslationService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defaultInterpolationFormat&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;angular-i18next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LanguageDetector&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i18next-browser-languagedetector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LocizeApi&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i18next-locize-backend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;i18nextOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fallbackLng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your-locize-project-id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;interpolation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;I18NextModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interpolationFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultInterpolationFormat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;appInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i18next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ITranslationService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;I18NextLoadResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i18next&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LocizeApi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LanguageDetector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i18nextOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;localeIdFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i18next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ITranslationService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i18next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;I18N_PROVIDERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;APP_INITIALIZER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;useFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;appInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;I18NEXT_SERVICE&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LOCALE_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;I18NEXT_SERVICE&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;useFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;localeIdFactory&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;AppComponent&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;BrowserModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;I18NextModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;I18N_PROVIDERS&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The app looks still the same, but the translations are now completely separated from the app and can be managed and released separately.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9XFlKtwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkuuj8ostc9obj968p1p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9XFlKtwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkuuj8ostc9obj968p1p.jpg" alt="app_4"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#save-missing-translations"&gt;
  &lt;/a&gt;
  save missing translations &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Thanks to the use of the &lt;a href="https://www.i18next.com/overview/configuration-options#missing-keys"&gt;saveMissing functionality&lt;/a&gt;, new keys gets added to locize automatically, while developing the app.&lt;/p&gt;

&lt;p&gt;Just pass &lt;code&gt;saveMissing: true&lt;/code&gt; in the i18next options and make sure you copy the api-key from within your locize project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;i18nextOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;saveMissing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// do not use the saveMissing functionality in production: https://docs.locize.com/guides-tips-and-tricks/going-production&lt;/span&gt;
  &lt;span class="na"&gt;fallbackLng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-locize-project-id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-api-key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// used for handleMissing functionality, do not add your api-key in a production build&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;interpolation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;I18NextModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interpolationFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultInterpolationFormat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each time you'll use a new key, it will be sent to locize, i.e.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cool&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="na"&gt;i18next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is very cool!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will result in locize like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJ-mbyfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18pcfn8xhfxv6djysqtk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJ-mbyfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18pcfn8xhfxv6djysqtk.jpg" alt="missing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-theres-more"&gt;
  &lt;/a&gt;
  üëÄ but there's more... &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Thanks to the &lt;a href="https://github.com/locize/locize-lastused"&gt;locize-lastused&lt;/a&gt; plugin, you'll be able to &lt;a href="https://docs.locize.com/guides-tips-and-tricks/unused-translations"&gt;find and filter in locize which keys are used or not used anymore&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With the help of the &lt;a href="https://github.com/locize/locize"&gt;locize&lt;/a&gt; plugin, you'll be able to use your app within the locize &lt;a href="https://docs.locize.com/more/incontext-editor"&gt;InContext Editor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, with the help of the &lt;a href="https://docs.locize.com/whats-inside/auto-machine-translation"&gt;auto-machinetranslation workflow&lt;/a&gt;, new keys not only gets added to locize automatically, while developing the app, but are also automatically translated into the target languages using machine translation:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLUNDWUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy4mqpppyli41nwibnpm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLUNDWUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy4mqpppyli41nwibnpm.jpg" alt="automatic translation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install locize-lastused locize&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;use them in &lt;code&gt;app.modules.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;APP_INITIALIZER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LOCALE_ID&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;I18NEXT_SERVICE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;I18NextModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;I18NextLoadResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ITranslationService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defaultInterpolationFormat&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;angular-i18next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LanguageDetector&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i18next-browser-languagedetector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LocizeApi&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i18next-locize-backend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LastUsed&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;locize-lastused&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;locizePlugin&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;locize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;locizeOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-locize-project-id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-api-key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// used for handleMissing functionality, do not add your api-key in a production buildyour&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;i18nextOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fallbackLng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;saveMissing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// do not use the saveMissing functionality in production: https://docs.locize.com/guides-tips-and-tricks/going-production&lt;/span&gt;
  &lt;span class="na"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;locizeOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;locizeLastUsed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;locizeOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;interpolation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;I18NextModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interpolationFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultInterpolationFormat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;appInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i18next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ITranslationService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;I18NextLoadResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i18next&lt;/span&gt;
      &lt;span class="c1"&gt;// locize-lastused&lt;/span&gt;
      &lt;span class="c1"&gt;// sets a timestamp of last access on every translation segment on locize&lt;/span&gt;
      &lt;span class="c1"&gt;// -&amp;gt; safely remove the ones not being touched for weeks/months&lt;/span&gt;
      &lt;span class="c1"&gt;// https://github.com/locize/locize-lastused&lt;/span&gt;
      &lt;span class="c1"&gt;// do not use the lastused functionality in production: https://docs.locize.com/guides-tips-and-tricks/going-production&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LastUsed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;// locize-editor&lt;/span&gt;
      &lt;span class="c1"&gt;// InContext Editor of locize&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locizePlugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;// i18next-locize-backend&lt;/span&gt;
      &lt;span class="c1"&gt;// loads translations from your project, saves new keys to it (saveMissing: true)&lt;/span&gt;
      &lt;span class="c1"&gt;// https://github.com/locize/i18next-locize-backend&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LocizeApi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LanguageDetector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i18nextOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;localeIdFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i18next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ITranslationService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i18next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;I18N_PROVIDERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;APP_INITIALIZER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;useFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;appInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;I18NEXT_SERVICE&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LOCALE_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;I18NEXT_SERVICE&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;useFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;localeIdFactory&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;AppComponent&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;BrowserModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;I18NextModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;I18N_PROVIDERS&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://docs.locize.com/whats-inside/auto-machine-translation"&gt;Automatic machine translation&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UUIysOvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rfusrzhuty28zl5z425.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UUIysOvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rfusrzhuty28zl5z425.jpg" alt="machine translation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="(https://docs.locize.com/guides-tips-and-tricks/unused-translations)"&gt;Last used translations filter&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pu7sK2UJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38quv5tsh5fomnx77wt1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pu7sK2UJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38quv5tsh5fomnx77wt1.jpg" alt="last used"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.locize.com/more/incontext-editor"&gt;InContext Editor&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NZxeqsnt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyyulpudnldjnoof24j8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NZxeqsnt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyyulpudnldjnoof24j8.jpg" alt="in context"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.locize.com/more/caching"&gt;Caching&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yeNBOcWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93baqmfar972iqf1kffz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yeNBOcWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93baqmfar972iqf1kffz.jpg" alt="caching"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.locize.com/more/versioning#merging-versions"&gt;Merging versions&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OOoigNWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpv70wwqwpkzjua9z155.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OOoigNWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpv70wwqwpkzjua9z155.jpg" alt="versions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;üßë‚Äçüíª The complete code can be found &lt;a href="https://github.com/locize/locize-angular-example"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#congratulations"&gt;
  &lt;/a&gt;
  üéâü•≥ Congratulations üéäüéÅ &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;I hope you‚Äôve learned a few new things about &lt;a href="https://www.i18next.com"&gt;i18next&lt;/a&gt;, &lt;a href="https://github.com/Romanchuk/angular-i18next/"&gt;angular-i18next&lt;/a&gt; and &lt;a href="https://locize.com"&gt;modern localization workflows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So if you want to take your i18n topic to the next level, it's worth to try &lt;a href="https://locize.com"&gt;locize&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The founders of &lt;a href="https://locize.com"&gt;locize&lt;/a&gt; are also the creators of &lt;a href="https://www.i18next.com"&gt;i18next&lt;/a&gt;. So with using &lt;a href="https://locize.com"&gt;locize&lt;/a&gt; you directly support the future of &lt;a href="https://www.i18next.com"&gt;i18next&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  üëç
&lt;/h1&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
