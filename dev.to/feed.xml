<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Comprehensive Guide to Angular Performance Tuning</title>
      <author>Tarun Gurang</author>
      <pubDate>Tue, 23 Nov 2021 06:07:33 +0000</pubDate>
      <link>https://dev.to/tarungurang/the-comprehensive-guide-to-angular-performance-tuning-1l5n</link>
      <guid>https://dev.to/tarungurang/the-comprehensive-guide-to-angular-performance-tuning-1l5n</guid>
      <description>&lt;p&gt;It's not uncommon to see Angular apps slow down over time. Angular is a performant platform, but if we don't know how to create performant Angular apps, our apps will become slower as they evolve. As a result, any serious Angular developer must be aware of what makes an Angular app slow in order to prevent it from being slow in the first place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improving-change-detection"&gt;
  &lt;/a&gt;
  Improving change detection
&lt;/h2&gt;

&lt;p&gt;Change detection can be the most performance-intensive part of Angular apps, so it's important to understand how to render the templates efficiently so that we would just re-rendering a component if it has new changes to display.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onpush-change-detection"&gt;
  &lt;/a&gt;
  OnPush change detection
&lt;/h2&gt;

&lt;p&gt;When an asynchronous event occurs in the app, such as click, XMLHttpRequest, or setTimeout, the default change detection behavior for components is to re-render. This can be a matter of concern because it will result in a lot of needless renderings of models that haven't been updated.&lt;/p&gt;

&lt;p&gt;When an asynchronous event occurs in the app, such as click, XMLHttpRequest, or setTimeout, the default change detection behavior for components is to re-render. This can be a matter of concern because it will result in a lot of needless renderings of models that haven't been updated.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A new reference has been added to one of its input properties&lt;/li&gt;
&lt;li&gt;An event originating from the component or one of its children, such as a click on a component button.&lt;/li&gt;
&lt;li&gt;Explicit shift detection run&lt;/li&gt;
&lt;li&gt;To use this technique, simply set the change-detection strategy in the component's decorator as follows:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Component({
    selector: 'app-todo-list',
    templateUrl: './todo-list.component.html',
    styleUrls: ['./todo-list.component.scss'],
    changeDetection: ChangeDetectionStrategy.OnPush
  })
  export class TodoListComponent implements OnInit {}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#design-for-immutability"&gt;
  &lt;/a&gt;
  Design for immutability
&lt;/h3&gt;

&lt;p&gt;Since we need a new reference given to a component's input to activate change detection with onPush, we must ensure that all state changes are immutable to use this process. If we're using Redux for state management, we'll notice that each time the state changes, we'll get a new instance, which will cause change detection for onPush components when given to a component's inputs. With this method, we'll need container components to get data from the store, as well as presentation components that can only communicate with other components via input and output.&lt;/p&gt;

&lt;p&gt;The async pipe is the simplest way to provide store data to the template. This will appear to have the data outside of an observable and will ensure that the stream is cleaned up when the object is automatically destroyed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xml&amp;gt;&amp;lt;div class="mx-auto col-10"&amp;gt;&amp;lt;h5&amp;gt;{{'todo-list' | translate}}&amp;lt;/h5&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;app-cards-list&amp;gt;&amp;lt;/app-cards-list&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;app-add-todo&amp;gt;&amp;lt;/app-add-todo&amp;gt;
&amp;lt;/xml&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#make-onpush-the-default-change-detection-strategy"&gt;
  &lt;/a&gt;
  Make onPush the default change detection strategy
&lt;/h3&gt;

&lt;p&gt;While creating new components with Angular CLI, we can use schematics to render onPush the default changeDetection strategy. In Angular, simply add this to the schematic’s property. json is a type of data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"schematics": {
    "@schematics/angular:component": {
      "styleext": "scss",
      "changeDetection": "OnPush"
    }
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-pipes-instead-of-methods-in-templates"&gt;
  &lt;/a&gt;
  Using pipes instead of methods in templates
&lt;/h3&gt;

&lt;p&gt;When a component is re-rendered, methods in a prototype will be named. Even with onPush change detection, this means it will be activated any time the component or any of its children is interacted with (click, type). If the methods perform intensive computations, the app will become sluggish as it scales because it must recompute every time the part is accessed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.ifourtechnolab.com/blog/accessibility-with-angular"&gt;Accessibility With Angular&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instead, we might use a pure pipe to ensure that we're just recalculating when the pipe's input shifts. As we previously discussed, async pipe is an example of a pure pipe. When the observable emits a value, it will recompute. If we're dealing with pure functions, we want to make sure we're just recomputing when the input changes. A pure function is one that, given the same input, always returns the same result. As a result, if the input hasn't changed, it's pointless to recompute the output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public getDuedateTodayCount(todoItems: TODOItem[]) {
  console.log('Called getDuedateTodayCount');
  return todoItems.filter((todo) =&amp;gt; this.isToday(new Date(todo.dueDate))).length;
}
private isToday(someDate) {
  const today = new Date();
  return (
    someDate.getDate() == today.getDate() &amp;amp;&amp;amp;
    someDate.getMonth() == today.getMonth() &amp;amp;&amp;amp;
    someDate.getFullYear() == today.getFullYear()
  );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#with-method"&gt;
  &lt;/a&gt;
  With method
&lt;/h4&gt;

&lt;p&gt;Let's look at what's happening when a template system is used instead of a pipe.&lt;/p&gt;

&lt;p&gt;Consider the following procedure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public getDuedateTodayCount(todoItems: TODOItem[]) {
  console.log('Called getDuedateTodayCount');
  return todoItems.filter((todo) =&amp;gt; this.isToday(new Date(todo.dueDate))).length;
}
private isToday(someDate) {
  const today = new Date();
  return (
    someDate.getDate() == today.getDate() &amp;amp;&amp;amp;
    someDate.getMonth() == today.getMonth() &amp;amp;&amp;amp;
    someDate.getFullYear() == today.getFullYear()
  );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#with-pipe"&gt;
  &lt;/a&gt;
  With pipe
&lt;/h4&gt;

&lt;p&gt;This can be solved by changing the method to a pipe, which is pure by default and will rerun the logic if the input changes.&lt;/p&gt;

&lt;p&gt;We get the following results by building a new pipe and transferring the logic we used previously inside of it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Pipe, PipeTransform } from '@angular/core';
import { TODOItem } from '@app/shared/models/todo-item';
@Pipe({
  name: 'duedateTodayCount'
})
export class DuedateTodayCountPipe implements PipeTransform {
  transform(todoItems: TODOItem[], args?: any): any {
    console.log('Called getDuedateTodayCount');
    return todoItems.filter((todo) =&amp;gt; this.isToday(new Date(todo.dueDate))).length;
  }
  private isToday(someDate) {
    const today = new Date();
    return (
      someDate.getDate() == today.getDate() &amp;amp;&amp;amp;
      someDate.getMonth() == today.getMonth() &amp;amp;&amp;amp;
      someDate.getFullYear() == today.getFullYear()
    );
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#cache-values-from-pure-pipes-and-functions"&gt;
  &lt;/a&gt;
  Cache values from pure pipes and functions
&lt;/h5&gt;

&lt;p&gt;We can also boost this by using pure pipes by remembering/caching previous values so that we don't have to recompute if the pipe has already been run with the same input. Pure pipes don't keep track of previous values; instead, they check to see if the input hasn't changed the relationship so they don't have to recalculate. To do the previous value caching, we'll need to combine it with something else.&lt;/p&gt;

&lt;p&gt;The Lodash memorize method is a simple way to accomplish this. Since the input is an array of objects, this isn't very realistic in this situation. If the pipe accepts a simple data type as input, such as a number, it may be advantageous to use this as a key to cache results and prevent re-computation.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#using-trackby-in-ngfor"&gt;
  &lt;/a&gt;
  Using trackBy in ngFor
&lt;/h5&gt;

&lt;p&gt;While using ngFor to update a list, Angular can delete the entire list from the DOM and rebuild it because it has no way of verifying which object has been added or removed. The trackBy function solves this by allowing us to give Angular a function to evaluate which item in the ngFor list has been modified or removed, and then then re-render it.&lt;/p&gt;

&lt;p&gt;This is how the track by feature looks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public trackByFn(index, item) {
  return item.id;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#for-heavy-computations-detach-change-detection"&gt;
  &lt;/a&gt;
  For heavy computations: Detach change detection
&lt;/h5&gt;

&lt;p&gt;In extreme cases, we can only need to manually enable change detection for a few components. That is, if a component is instantiated 100s of times on the same page and re-rendering each one is costly, we can disable automatic change detection for the component entirely and only cause changes manually where they are needed.&lt;/p&gt;

&lt;p&gt;We could detach change detection and only run this when the to do Item is set in the todoItem set property if we choose to do this for the todo items:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Component({
    selector: 'app-todo-item-list-row',
    templateUrl: './todo-item-list-row.component.html',
    styleUrls: ['./todo-item-list-row.component.scss'],
    changeDetection: ChangeDetectionStrategy.OnPush
  })
  export class TodoItemListRowComponent implements OnInit {
    private _todoItem : TODOItem;
    public get todoItem() : TODOItem {
      return this._todoItem;
    }
    @Input()
    public set todoItem(v : TODOItem) {
      this._todoItem = v;
      this.cdr.detectChanges();
    }  
    @Input() public readOnlyTODO: boolean;
    @Output() public todoDelete = new EventEmitter();
    @Output() public todoEdit = new EventEmitter();
    @Output() public todoComplete = new EventEmitter&amp;lt;todoitem&amp;gt;();

    constructor(private cdr: ChangeDetectorRef) {}
    public ngOnInit() {
      this.cdr.detach();
    }
    public completeClick() {
      const newTodo = {
        ...this.todoItem,
        completed: !this.todoItem.completed
      };
      this.todoComplete.emit(newTodo);
    }
    public deleteClick() {
      this.todoDelete.emit(this.todoItem.id);
    }
    public editClick() {
      this.todoEdit.emit(this.todoItem);
    }
  }
&amp;lt;/todoitem&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#improving-page-load"&gt;
  &lt;/a&gt;
  Improving page load
&lt;/h5&gt;

&lt;p&gt;The time it takes for a website to load is an important factor in today's user experience. Every millisecond a user waits will result in a sales loss due to a higher bounce rate and a poor user experience, so this is an area where we should focus our efforts. Faster websites are rewarded by search engines, so page load time has an effect on SEO.&lt;/p&gt;

&lt;p&gt;We want to use Angular PWA caching, lazy loading, and bundling to improve page load time.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#cache-static-content-using-angular-pwa"&gt;
  &lt;/a&gt;
  Cache static content using Angular PWA
&lt;/h5&gt;

&lt;p&gt;Since the static content is already in the browser, caching it will make our Angular app load faster. This is easily accomplished with Angular PWA, which uses service workers to store and present static content, such as JavaScript, CSS bundles, images, and static served files, without requiring a server request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking for Genuine &lt;a href="https://www.ifourtechnolab.com/angular-js-development-company"&gt;Angular Development Company&lt;/a&gt;? Enquire Today.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#cache-http-calls-using-angular-pwa"&gt;
  &lt;/a&gt;
  Cache HTTP calls using Angular PWA
&lt;/h5&gt;

&lt;p&gt;We can easily set up caching rules for HTTP calls with Angular PWA to give our app a faster user experience without cluttering it with a lot of caching code. we can either optimize for freshness or efficiency, that is, read the cache only if the HTTP call times out, or check the cache first and then call the API only when the cache expires.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#lazy-load-routes"&gt;
  &lt;/a&gt;
  Lazy load routes
&lt;/h5&gt;

&lt;p&gt;Lazy loading routes ensure that each function is packaged in its own bundle and that this bundle can be loaded only when it is needed.&lt;/p&gt;

&lt;p&gt;To allow lazy loading, simply build a child route file in a function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const routes: Routes = [
  {
    path: '',
    component: TodoListCompletedComponent
  }
];
export const TodoListCompletedRoutes = RouterModule.forChild(routes);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import routes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@NgModule({
  imports: [FormsModule, CommonModule, SharedModule, TodoListCompletedRoutes],
  declarations: [TodoListCompletedComponent]
})
export class TodoListCompletedModule {}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;using loadChildren in the root route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const appRoutes: Routes = [
  {
    path: rootPath,
    component: TodoListComponent,
    pathMatch: 'full'
  },
  {
    path: completedTodoPath,
    loadChildren: './todo-list-completed/todo-list-completed.module#TodoListCompletedModule'
  }
];
export const appRouterModule = RouterModule.forRoot(appRoutes);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#optimizing-bundling-and-preloading"&gt;
  &lt;/a&gt;
  Optimizing bundling and preloading
&lt;/h5&gt;

&lt;p&gt;We may choose to preload feature modules to speed up page load even further. This way, when we choose to make a lazily loaded feature module, navigation is instant.&lt;/p&gt;

&lt;p&gt;This can be accomplished by setting PreloadModules as the preloadingStrategy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;RouterModule.forRoot(routes, {
  preloadingStrategy: PreloadAllModules
})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All feature modules will be loaded when the page loads, allowing us quicker page loading and instant navigation when we choose to load other feature modules. This can be further optimized by using a custom preloading Strategy like the one shown here to load only a subset of the routes on app startup&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#serverside-rendering-with-angular-universal"&gt;
  &lt;/a&gt;
  Server-side rendering with Angular Universal
&lt;/h5&gt;

&lt;p&gt;It is recommended that server-side rendering be used for Angular apps that contain indexed pages. This ensures that the pages are entirely made by the server before being shown to the browser, resulting in a faster page load. This would necessitate the app not relying on any native DOM components, and instead injecting document from the Angular providers, for example.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#improving-ux"&gt;
  &lt;/a&gt;
  Improving UX
&lt;/h5&gt;

&lt;p&gt;Performance tuning is all about improving the bottleneck, which is the part of the system that has the most impact on the user experience. Often the alternative is simply to approach behavior with more optimism, resulting in less waiting for the customer.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#optimistic-updates"&gt;
  &lt;/a&gt;
  Optimistic updates
&lt;/h5&gt;

&lt;p&gt;Optimistic changes occur when a change is expressed in the user interface before being saved on the server. The user would have a snappier native-like experience as a result of this. As a result, in the event that the server fails to save the changes, we must roll back the state. Strongbrew has written a post on how to do this in a generic way, making positive changes simple to implement in our code.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#how-should-we-prioritize-performance-tuning"&gt;
  &lt;/a&gt;
  How should we prioritize performance tuning?
&lt;/h5&gt;

&lt;p&gt;Start with the low-hanging fruit: onPush, lazy loading, and PWA, and then figure out where our system's output bottlenecks are. Any enhancement that does not address the bottleneck is a mirage, as it will not enhance the app's user experience. Detaching the change detection is a tuning technique that can be used only if we have a particular issue with a component's change detection affecting output.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h5&gt;

&lt;p&gt;In this blog we have learned how to tune the output of our Angular app in this article. Change detection, page load, and UX enhancements were some of the performance tuning categories we looked at. Any change in a system should start with identifying bottlenecks and attempting to solve them using one of the methods described in this article.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>With No Code Builders, Why Should Clients Hire a Developer?</title>
      <author>Kyle Prinsloo</author>
      <pubDate>Tue, 23 Nov 2021 06:07:17 +0000</pubDate>
      <link>https://dev.to/study_web_dev/with-no-code-builders-why-should-clients-hire-a-developer-53ip</link>
      <guid>https://dev.to/study_web_dev/with-no-code-builders-why-should-clients-hire-a-developer-53ip</guid>
      <description>&lt;p&gt;With the advent of tools that make building an e-commerce site or basic portfolio website simpler than ever, many developers are starting to wonder if this serves as a bad omen for things to come…&lt;/p&gt;

&lt;p&gt;If any client can simply open up an account on a no-code builder, drag and drop a few components until they're happy with the design, click 'Publish' and call it a day, how is there possibly any hope for developers and web designers?&lt;/p&gt;

&lt;p&gt;Unless you're just getting started as a developer, you've probably heard a similar version of this doom and gloom argument before, but worry not my friend, there's more than a glimmer of hope.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR: No-code builders should be seen as an opportunity - not a threat.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, I'm going to explore exactly what sort of no-code builders are out there, the mistaken threat they pose to developers, and the actual benefit of hiring a developer which you can use to build up your confidence to bolster your proposal proposition success.&lt;/p&gt;

&lt;p&gt;I tweeted this last year, give it a read to get an overview.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--RHr1l2Tu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1387758016716578821/Srn36e3M_normal.png" alt="Kyle Prinsloo profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kyle Prinsloo
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/study_web_dev"&gt;@study_web_dev&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🔥 My two-cents on:&lt;br&gt;&lt;br&gt;“Why would a client want to pay for a website, when they can just do it themselves for free with platforms like:&lt;br&gt;&lt;br&gt;- Wix&lt;br&gt;- Shopify&lt;br&gt;- WebFlow&lt;br&gt;- WordPress&lt;br&gt;- Squarespace&lt;br&gt;- etc.&lt;br&gt;&lt;br&gt;Here's my answer in a thread 🧵⬇️
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:15 AM - 23 Sep 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1308681311608025088" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1308681311608025088" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1308681311608025088" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#what-are-nocode-builders"&gt;
  &lt;/a&gt;
  What are No-Code Builders?
&lt;/h2&gt;

&lt;p&gt;No-code builders are tools on the web that make building websites, e-commerce stores, and even full-blown applications possible without writing any code. Low-code builders are similar but can be ever so slightly more technical.&lt;/p&gt;

&lt;p&gt;In reality, no-code builders are sometimes confused with low-code builders where only a very little amount of code is needed when building out the site or app.&lt;/p&gt;

&lt;p&gt;There is a huge variety of no-code and low-code builders out there today which could give you, a new or even more experienced developer, the impression that your job is being acutely challenged by smart software.&lt;/p&gt;

&lt;p&gt;Webflow, for example, claims to be "the modern way to build for the web" where users of the tool can "build production-ready experiences without coding". On Webflow, you're able to design in the browser, build a site, connect it to a CMS, and host it all without writing a single line of code. Even the Webflow site itself is built using Webflow, which brings a tear to my eye, but in a good way.&lt;/p&gt;

&lt;p&gt;Webflow is just one of these site-building tools.&lt;/p&gt;

&lt;p&gt;You may have heard of others like Wix, Squarespace, or Weebly. They're all very similar tools, but essentially they do what Webflow allows you to do, although all of them offer a slightly worse experience in comparison with Webflow. &lt;/p&gt;

&lt;p&gt;All of these mentioned builders normally come with pre-packaged designs that allow you to simply select a design, replace the placeholder text with yours, and click 'Publish'.&lt;/p&gt;

&lt;p&gt;There are some caveats to this and they're bigger than you may expect…&lt;/p&gt;

&lt;p&gt;But more on that later.&lt;/p&gt;

&lt;p&gt;Moving on from site-builders, there are plenty of other no-code builders out there.&lt;/p&gt;

&lt;p&gt;Shopify is another tool you may be familiar with especially if you've worked with clients that require e-commerce solutions. Shopify offers businesses the means to construct a fully working online store without the need for a custom-coded solution.&lt;/p&gt;

&lt;p&gt;And then there is WordPress.&lt;/p&gt;

&lt;p&gt;No talk of no-code builders would be complete without mentioning probably the world's most famous content management system. It's estimated that over 75 million sites will use it today; WordPress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-no-code-builders-wont-replace-developers"&gt;
  &lt;/a&gt;
  Why No Code Builders Won't Replace Developers
&lt;/h2&gt;

&lt;p&gt;No-code builders are all over the Internet these days and are being used by millions of people but does this mean that they are replacing developers?&lt;/p&gt;

&lt;p&gt;Not for now, no.&lt;/p&gt;

&lt;p&gt;While these tools allow for sites and apps to be built much faster than what it would take a developer to hand-code them, these tools are still quite useless in the hands of someone who doesn't know what they are doing.&lt;/p&gt;

&lt;p&gt;What often happens is that someone with a business idea, let's call that someone "Jim", will see the multitude of ads for no-code tools (they have really high marketing budgets), notice how simple it appears to design, build, and host a website, and is then fooled into thinking that he can do something just as good.&lt;/p&gt;

&lt;p&gt;Jim will then purchase a subscription to a no-code tool like Wix (it's free but only to a very limited extent) and set about designing and building a site. After several hours or days, Jim has put together a site that, to his eye, looks great and is a sure-fire way of propelling his business to success.&lt;/p&gt;

&lt;p&gt;Except that... well, it is an objectively bad website in terms of its design and usability.&lt;/p&gt;

&lt;p&gt;It takes Jim a few embarrassing conversations with a few friends and colleagues to realize that his site is not as good as he initially thought and that maybe it's better if he turned to a professional to sand the rough edges of his site or even redo it entirely.&lt;/p&gt;

&lt;p&gt;Jim then approaches a developer or designer for the work who then charges a fair wage for the work done. At the end of the day, Jim possesses a Wix website that looks pretty good but now he has spent double or triple his budget and wasted precious time in getting up a site that can achieve his business goals.&lt;/p&gt;

&lt;p&gt;Many freelancers know this fake story actually happens where they have to 'fix' a lot of bad client websites they made themselves.&lt;/p&gt;

&lt;p&gt;That's the troubling thing about many of these no-code tools.&lt;/p&gt;

&lt;p&gt;Clients often start off thinking they know what they're doing thanks to the "if I can do it, you can do it" nature of these no-code builder advertising campaigns.&lt;/p&gt;

&lt;p&gt;At the end of the day, there are quite a few big trade-offs when a client chooses a no-code builder over a developer. The first mistake, however, is thinking that there should be a choice between a developer and a no-code builder.&lt;/p&gt;

&lt;p&gt;If there's one thing you takeaway from this, remember this:&lt;/p&gt;

&lt;p&gt;You will always get people who want to cut their own lawn, and you will always get people who pay others to cut it for them.&lt;/p&gt;

&lt;p&gt;Don't worry about those who want to cut their own lawn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-positive-sum-game-of-developers-amp-nocode-builders"&gt;
  &lt;/a&gt;
  The Positive Sum Game of Developers &amp;amp; No-Code Builders
&lt;/h2&gt;

&lt;p&gt;Developers only write code.&lt;/p&gt;

&lt;p&gt;At least that's what everyone thinks.&lt;/p&gt;

&lt;p&gt;In reality, developers provide solutions to problems. How they provide these solutions have changed with time. But, at the end of the day, developers are hired to solve technical problems and provide tangible value to a client or company.&lt;/p&gt;

&lt;p&gt;That’s the core of what developers do.&lt;/p&gt;

&lt;p&gt;Developers have, for a long time, tended towards snobbishness. In particular, many have looked down at abstracted programming languages and environments as "lesser" or "illegitimate".&lt;/p&gt;

&lt;p&gt;Companies and clients that require custom software solutions still need developers for specific tasks. You don't see Amazon turning to Shopify to run its latest brand merchandise shop. Likewise, clients who need custom solutions will hire developers who understand software.&lt;/p&gt;

&lt;p&gt;Those companies that will rather use a no-code builder probably did not have developers working for them full-time anyways. The thing is, these builders don't facilitate the kind of work that developers do in the first place.&lt;/p&gt;

&lt;p&gt;More abstraction in the case of software tools and solutions does not replace developers. Rather, it equips them to complete tasks that would otherwise be unnecessarily time-consuming. This allows higher productivity which is better for the company or client in question!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-potential-issues-of-nocode-building-apps"&gt;
  &lt;/a&gt;
  What are the Potential Issues of No-Code Building Apps?
&lt;/h2&gt;

&lt;p&gt;It is undeniable that many businesses and companies are attracted to the enticing benefits of no-code building platforms, but you should bear in mind that there are always some cons to something such as the following:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limited-features-and-templates"&gt;
  &lt;/a&gt;
  Limited features and templates
&lt;/h3&gt;

&lt;p&gt;If your business requires a more distinctive procedure or strategy, the no-code option may not be a good choice.&lt;/p&gt;

&lt;p&gt;No code development platforms give multiple templates and components that may be modified to fulfill a set of use cases when it comes to building up the various elements of an application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;p&gt;Since you're developing an app or a website from another app or website, there's no guarantee that you're safe from any breach or major issues that the no-code platform can encounter.&lt;/p&gt;

&lt;p&gt;You won't even have control over the provider's technology stack when you use no-code. If the provider's internal security is breached, you and your project would be exposed including all of the money and time you put into developing it would be wasted. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ownership"&gt;
  &lt;/a&gt;
  Ownership
&lt;/h3&gt;

&lt;p&gt;You need to rely on the original vendor to ensure that your application is properly maintained in the future. If you have a contract with no-code builders, it might be hard and costly for you to switch providers if needed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-benefits-of-hiring-a-developer"&gt;
  &lt;/a&gt;
  The Benefits of Hiring a Developer
&lt;/h2&gt;

&lt;p&gt;Developers are professionals.&lt;/p&gt;

&lt;p&gt;They understand the intricacies and nuances of the web that allow them to know when a website or application is not working as it should. This is valuable in and of itself but the real value of a developer is in his or her ability to prevent problems before they even arise and this is where many clients who don’t use a developer get caught out.&lt;/p&gt;

&lt;p&gt;Developers also often bring varied skill sets to the table. You’d be hard-pressed these days to find a developer who is also not well versed in at least one other complementary skill such as design, digital marketing, content writing, or SEO.&lt;/p&gt;

&lt;p&gt;Hiring a developer is not the same as getting a subscription for a new software tool to get a job done. A developer represents expertise that understands the holistic picture. It is this key point that results in vastly differing results when a no-code tool is put in the hands of a developer versus it being used by the client himself.&lt;/p&gt;

&lt;p&gt;Developers are experts.&lt;/p&gt;

&lt;p&gt;Clients with unknown tools in their hands are not.&lt;/p&gt;

&lt;p&gt;What clients get by hiring developers are people who can bridge the gap between software capabilities and the business requirements of the client. How a developer achieves this is often abstracted away from the client who really only cares for the end product and whether it works and looks as expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-youre-the-asset-not-the-tool-you-use"&gt;
  &lt;/a&gt;
  Conclusion: You're The Asset - Not The Tool You Use
&lt;/h2&gt;

&lt;p&gt;No-code tools may initially serve as a source of anxiety for developers and their sense of work security but digging a little deeper reveals a different story.&lt;/p&gt;

&lt;p&gt;Technology has evolved and continues to do so at a rapid pace. Those who maintain their value in the workforce are those who remain relevant.&lt;/p&gt;

&lt;p&gt;A developer who uses a low- or no-code tool to achieve a specific client requirement is just as relevant as a developer who hand-codes the solution.&lt;/p&gt;

&lt;p&gt;The key differentiator here is time. Everyone values their own time the most. Save your client time and you’ll set yourself apart from the developers looking to remain in their old ways.&lt;/p&gt;

&lt;p&gt;This can be a nuanced argument but a common developer vs. no-code tool story can be boiled down to this:&lt;/p&gt;

&lt;p&gt;A client needs an expert to build his or her product. They will realize this at some point if they go down the journey of building their product themselves.&lt;/p&gt;

&lt;p&gt;It’s up to you, the developer, to remain vigilant in upgrading your skillset and confident in the business and technical acumen that you can offer clients.&lt;/p&gt;

&lt;p&gt;Do this and you’ll forever be a sought-after professional developer who adds value.&lt;/p&gt;

&lt;p&gt;And remember, &lt;strong&gt;you'll always get the guy who wants to cut his own lawn, but you'll always get the other guy who pays someone to do it for him.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Same principle applies to web development, design, freelancing, etc.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

&lt;p&gt;If you have anything to add or say about no-code builders, let me know!&lt;/p&gt;

&lt;p&gt;Until next time,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kylep.co/"&gt;Kyle&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>coding</category>
      <category>beginners</category>
    </item>
    <item>
      <title>React Components</title>
      <author>RohitrajDeshmukh</author>
      <pubDate>Tue, 23 Nov 2021 06:00:42 +0000</pubDate>
      <link>https://dev.to/rohitrajdeshmukh/react-components-1101</link>
      <guid>https://dev.to/rohitrajdeshmukh/react-components-1101</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-component"&gt;
  &lt;/a&gt;
  What is component?
&lt;/h2&gt;

&lt;p&gt;Components are basic building blocks of Ract App. A component is a class or a function that accepts inputs and returns react element that describes how the user interface should look. Components are independent and re-usable. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-are-main-two-types-of-components"&gt;
  &lt;/a&gt;
  There are main two types of Components
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Class Component&lt;/li&gt;
&lt;li&gt;Functional Component&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#class-component"&gt;
  &lt;/a&gt;
  Class Component
&lt;/h2&gt;

&lt;p&gt;A Class component requires you to extends from React.Components and create a Render function that returns a React Element. A class component is called as statefull class component. Whenever the state of the components changes the render method will call.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Create Class Component name as Demo&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Demo extends React.Component 
{
  render() 
  {
    return &amp;lt;h1&amp;gt;Hello, I am Rohitraj!&amp;lt;/h1&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functional-component"&gt;
  &lt;/a&gt;
  Functional Component
&lt;/h2&gt;

&lt;p&gt;A Functional component accepts props as an argument and returns a React Element. There is no render method used in funtional component. A function component is called as stateless functional component. It render the user interface based on props.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Create Funtional Component name as Demo&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Demo() 
{
  return &amp;lt;h1&amp;gt;Hello, I am Rohitraj!&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rendering-a-component"&gt;
  &lt;/a&gt;
  Rendering a Component
&lt;/h2&gt;

&lt;p&gt;Rendering a component means a component with render prop which takes a funtion that returns a React Element and call it.&lt;br&gt;
Given below is the example where ReactDOM.render renders your component i.e.  to the DOM in the root element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ReactDOM.render(&amp;lt;Demo /&amp;gt;, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#components-in-component"&gt;
  &lt;/a&gt;
  Components in Component
&lt;/h2&gt;

&lt;p&gt;we can use components inside other component. Means we can create multiple funtions in one component and return one function into another funtion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Demo() {
  return &amp;lt;h1&amp;gt;I am Rohitraj!&amp;lt;/h1&amp;gt;;
}

function Sample() {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Who are you?&amp;lt;/h1&amp;gt;
      &amp;lt;Demo /&amp;gt;
    &amp;lt;/&amp;gt;
  );
}

ReactDOM.render(&amp;lt;Sample /&amp;gt;, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#components-in-files"&gt;
  &lt;/a&gt;
  Components in Files
&lt;/h2&gt;

&lt;p&gt;We can create a new file with .js extension and inside that we create a funtion and returns some HTML element and we export this function. Given below you can see the example:-&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;This is the new file we called it as Demo.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Demo() {
  return &amp;lt;h1&amp;gt;Hello, I am Rohitraj!&amp;lt;/h1&amp;gt;;
}

export default Car;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what we called a Demo Component. Now you have to import this file in your application. So for that we use the &lt;em&gt;import&lt;/em&gt; statment then the &lt;em&gt;function_name&lt;/em&gt; and the &lt;em&gt;path&lt;/em&gt; where the file is located. Given below you can see this:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';
import Demo from './Demo.js';

ReactDOM.render(&amp;lt;Demo /&amp;gt;, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Getting started with Remix</title>
      <author>Carlo Gino Catapang</author>
      <pubDate>Tue, 23 Nov 2021 05:58:29 +0000</pubDate>
      <link>https://dev.to/codegino/getting-started-with-remix-10o0</link>
      <guid>https://dev.to/codegino/getting-started-with-remix-10o0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-remix"&gt;
  &lt;/a&gt;
  What is Remix?
&lt;/h2&gt;

&lt;p&gt;Remix is a "relatively" new framework which was open sourced on &lt;em&gt;23rd of November 2021&lt;/em&gt;. It was originally created by the awesome &lt;a href="https://twitter.com/ryanflorence"&gt;Ryan Florence&lt;/a&gt; and &lt;a href="https://twitter.com/mjackson"&gt;Michael Jackson&lt;/a&gt;, and with the recent addition of &lt;a href="https://twitter.com/kentcdodds"&gt;Kent C. Dodds&lt;/a&gt; it allows the framework to sell itself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As per their &lt;a href="https://remix.run/"&gt;website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Remix is a full stack web framework that let’s you focus on the user interface and work back through web fundamentals to deliver a fast, slick, and resilient user experience.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's get started with the actual coding.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#create-a-basic-remix-app"&gt;
  &lt;/a&gt;
  Create a basic Remix app
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This is my interpretation after scratching the surface of the &lt;a href="https://remix.run/docs/en/v1"&gt;documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;Make sure you have &lt;a href="https://nodejs.org/en/"&gt;node&lt;/a&gt; installed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-remix@latest
&lt;span class="c"&gt;# follow the prompts&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;whatever you named the project]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE: There will be an option to run &lt;code&gt;npm install&lt;/code&gt; to install the dependencies immediately.&lt;br&gt;
This will create a &lt;code&gt;package-lock.json&lt;/code&gt;. If you want to use yarn, you can skip this step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#running-the-app"&gt;
  &lt;/a&gt;
  Running the app
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Based on what you choose in the image below, a custom &lt;code&gt;README.md&lt;/code&gt; file is created at the project's root.&lt;br&gt;
Make sure to check the steps on how to run the application locally&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JkirEOki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/o14gibX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JkirEOki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/o14gibX.png" width="876" height="406"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#running-examples"&gt;
  &lt;/a&gt;
  Running examples
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;You can use yarn for the steps below if you prefer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For Remix App Server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Express Server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Start the Remix development asset server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm run dev

&lt;span class="c"&gt;# In a new tab start your express app:&lt;/span&gt;
npm run start:dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CEajRxju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/LQLhdpb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CEajRxju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/LQLhdpb.png" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't, make sure to check &lt;code&gt;README.md&lt;/code&gt; for specific instructions on how to run the app locally,&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;I will be using &lt;code&gt;TypeScript&lt;/code&gt; for this blog; if you prefer to use vanilla JavaScript, remove the type usages and change the extensions from &lt;code&gt;.tsx&lt;/code&gt; to &lt;code&gt;.jsx&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h3&gt;

&lt;p&gt;Let's start coding with a clean slate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Remove demo files&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; app/routes/demos app/styles/demos

&lt;span class="c"&gt;# We'll recreate this files later&lt;/span&gt;
&lt;span class="nb"&gt;rm &lt;/span&gt;app/routes/index.tsx app/root.tsx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-a-file-named-raw-roottsx-endraw-file-under-raw-app-endraw-folder"&gt;
  &lt;/a&gt;
  Create a file named &lt;code&gt;root.tsx&lt;/code&gt; file under &lt;code&gt;app&lt;/code&gt; folder.
&lt;/h4&gt;

&lt;p&gt;This file will serve as the global container for the app.&lt;/p&gt;

&lt;p&gt;// app/root.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;LiveReload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Outlet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Scripts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;ScrollRestoration&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Outlet&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Here is the blueprint of our document&lt;/span&gt;
&lt;span class="c1"&gt;// It looks like our typical HTML but with a few extra tags&lt;/span&gt;
&lt;span class="c1"&gt;// I will discuss in another blog post those Components coming from the remix package&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charSet&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width,initial-scale=1"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Meta&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Links&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ScrollRestoration&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Scripts&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LiveReload&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Layout is a wrapper component that provides a consistent layout for all pages.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PropsWithChildren&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-the-index-route-file-raw-indextsx-endraw-under-raw-approutes-endraw-folder"&gt;
  &lt;/a&gt;
  Create the index route file &lt;code&gt;index.tsx&lt;/code&gt; under &lt;code&gt;app/routes&lt;/code&gt; folder.
&lt;/h4&gt;

&lt;p&gt;Let's proceed with the mandatory &lt;code&gt;hello world&lt;/code&gt; example.&lt;/p&gt;

&lt;p&gt;// app/routes/index.jsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding the two files above will yield the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rdj86GvT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kSS5vUz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rdj86GvT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kSS5vUz.png" width="694" height="344"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-link"&gt;
  &lt;/a&gt;
  Create a link
&lt;/h3&gt;

&lt;p&gt;We'll add the links inside &lt;code&gt;Layout&lt;/code&gt; since it will be reusable across all pages.&lt;/p&gt;

&lt;p&gt;// app/root.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PropsWithChildren&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/pokemons"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Pokemons&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wAvwBY9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FRFNy05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAvwBY9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FRFNy05.png" width="702" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking the link or navigating to the URL, you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g0fxA-YM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rPlNuL2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g0fxA-YM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rPlNuL2.png" width="702" height="396"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;It is expected since we have not created a route handler for the &lt;code&gt;/pokemons&lt;/code&gt; page.&lt;/p&gt;



&lt;p&gt;Before creating that route, let us use &lt;code&gt;CatchBoundary&lt;/code&gt; to create a custom &lt;code&gt;404&lt;/code&gt; error message as a fallback for all Not Found routes.&lt;/p&gt;

&lt;p&gt;// app/root.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCatch&lt;/span&gt; &lt;span class="cm"&gt;/*other imports*/&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CatchBoundary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;caught&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is a custom error message for 404 pages&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// You can customize the behavior for other status codes&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Document&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the customized &lt;code&gt;404&lt;/code&gt; error page: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ByhW_ZBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/tw8NqI4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ByhW_ZBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/tw8NqI4.png" width="702" height="396"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To fix this &lt;code&gt;404&lt;/code&gt; error, let's create the &lt;code&gt;/pokemons&lt;/code&gt; route&lt;/p&gt;

&lt;p&gt;// app/routes/pokemons/index.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Pokemons&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Pokemons&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nfyICHMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/B3FgSe7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nfyICHMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/B3FgSe7.png" width="702" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-meta-tags"&gt;
  &lt;/a&gt;
  Adding meta tags
&lt;/h3&gt;

&lt;p&gt;Meta tags are used here to update the title and description of the page. To learn more what meta is used for, check &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta"&gt;this&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;// app/routes/pokemons/index.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pokemons&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;List of Pokemons&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// export default function Pokemons...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should see an updated &lt;code&gt;head&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HAmBVTJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FAVI0hK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HAmBVTJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FAVI0hK.png" width="694" height="344"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fetching-data"&gt;
  &lt;/a&gt;
  Fetching Data
&lt;/h3&gt;

&lt;p&gt;Unlike the vanilla React where usually fetch the data from the client-side, in Remix we can load data from the server using a the concept of a &lt;code&gt;loader&lt;/code&gt;&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#create-a-loader"&gt;
  &lt;/a&gt;
  Create a Loader
&lt;/h4&gt;

&lt;p&gt;// app/routes/pokemons/index.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// previous imports&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LoaderFunction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LoaderFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://pokeapi.co/api/v2/pokemon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// export default function Pokemons...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are wondering where is the &lt;code&gt;.then(res =&amp;gt; res.json())&lt;/code&gt; part, you are not alone.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'm still cheking how they allow this magic to happen.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can still write the typical fetch as usual.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h4&gt;
  &lt;a href="#accessing-data-in-react"&gt;
  &lt;/a&gt;
  Accessing data in React
&lt;/h4&gt;

&lt;p&gt;Use the &lt;code&gt;useLoaderData&lt;/code&gt; hook to access the data in React land.&lt;/p&gt;

&lt;p&gt;// app/routes/pokemons/index.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="cm"&gt;/*other imports*/&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// export let loader: LoaderFunction...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Pokemons&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;// Try to use console.log here&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Pokemons&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/pokemons/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Combining the two previous codes will result to:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--65wFEEQG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/dGe8mID.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--65wFEEQG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/dGe8mID.png" width="694" height="556"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#creating-a-dynamic-route"&gt;
  &lt;/a&gt;
  Creating a dynamic route
&lt;/h3&gt;

&lt;p&gt;For this demo, let's use the file path convention.&lt;/p&gt;

&lt;p&gt;Under the &lt;code&gt;pokemons&lt;/code&gt; folder, create a folder named &lt;code&gt;$pokemonName.tsx&lt;/code&gt;.&lt;br&gt;
&lt;em&gt;Yes, it's not a typo; add a &lt;strong&gt;$&lt;/strong&gt; before the file name. We'll see how to use it later.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;// app/routes/pokemons/$pokemonName.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Pokemon&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Specific Pokemon Route&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we click &lt;code&gt;bulbasaur&lt;/code&gt; in the list, we should see something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--isTmJJh5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mqGcGMk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--isTmJJh5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mqGcGMk.png" width="668" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, how do we customize the page to show the details of a Pokemon?&lt;/p&gt;



&lt;p&gt;By naming the file &lt;code&gt;$pokemonName.tsx&lt;/code&gt;, inside the file, we can access &lt;code&gt;pokemonName&lt;/code&gt; inside the &lt;code&gt;params&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;We can use this information to fetch the specific data from the server. &lt;code&gt;see line #9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;// app/routes/pokemons/$pokemonName.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LoaderFunction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LoaderFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokemonName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pokemonName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// OR const { pokemonName } = params;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`https://pokeapi.co/api/v2/pokemon/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pokemonName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="c1"&gt;// We'll map the data based on our needs&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pokemonName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;img&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sprites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;front_default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Pokemon&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; #&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Weight: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the code above, we can show these details in our page&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fLhHL2Kc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CGAbGbY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fLhHL2Kc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CGAbGbY.png" width="668" height="348"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#update-meta-of-pokemon-route"&gt;
  &lt;/a&gt;
  Update meta of pokemon route
&lt;/h4&gt;

&lt;p&gt;Before wrapping this up, let's update the meta of the Pokemon details page.&lt;/p&gt;

&lt;p&gt;// app/routes/pokemons/$pokemonName.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MetaFunction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MetaFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Details of &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is a page with a better title and description&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VQWlTo3f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/u05HbDJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQWlTo3f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/u05HbDJ.png" width="702" height="355"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h2&gt;

&lt;p&gt;Link to the &lt;a href="https://github.com/codegino/my-remix-app"&gt;repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's a &lt;a href="https://my-remix-app-bqf4bn4ci-codegino.vercel.app"&gt;demo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Styling&lt;/li&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;li&gt;Form Handling&lt;/li&gt;
&lt;li&gt;MDX&lt;/li&gt;
&lt;li&gt;Configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is still a pretty small application for me to assess what Remix really can do, and there's still much to learn. So far, I like how easy it is to create an application from scratch, and I find the convention easy to follow. I also like how they provide &lt;code&gt;hooks&lt;/code&gt; to make working with the data, errors, and such.Having said that, I definitely will explore more about Remix and the ecosystem in the future.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>remix</category>
    </item>
    <item>
      <title>18 Python one-liners that will speed up your coding process.</title>
      <author>Yash Makan</author>
      <pubDate>Tue, 23 Nov 2021 05:41:19 +0000</pubDate>
      <link>https://dev.to/yash_makan/18-python-one-liners-that-will-speed-up-your-coding-process-21md</link>
      <guid>https://dev.to/yash_makan/18-python-one-liners-that-will-speed-up-your-coding-process-21md</guid>
      <description>&lt;p&gt;Hi folks, I am Yash Makan and in today's blog, we are going to talk about one-liners in python. I clearly remember when I chose to learn python it was just because of the simplicity and readability. But you know what you can make the python code even more easy with less lines of code. Yup! thats right my friend. These one-liner code can save you a lot of time, memory and can impress your friends...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BqjaW6UL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/Bvo7iDxInexT0oCHgg/giphy.gif%3Fcid%3Decf05e47oy9b0df2af0v2j9pw2tpnog57mkdyzdd42he0y6s%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BqjaW6UL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/Bvo7iDxInexT0oCHgg/giphy.gif%3Fcid%3Decf05e47oy9b0df2af0v2j9pw2tpnog57mkdyzdd42he0y6s%26rid%3Dgiphy.gif%26ct%3Dg" alt="https://media3.giphy.com/media/Bvo7iDxInexT0oCHgg/giphy.gif?cid=ecf05e47oy9b0df2af0v2j9pw2tpnog57mkdyzdd42he0y6s&amp;amp;rid=giphy.gif&amp;amp;ct=g" width="480" height="264"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-oneliner-code"&gt;
  &lt;/a&gt;
  what is a one-liner code?
&lt;/h2&gt;

&lt;p&gt;You can think of one-liner code as a block of code compressed together so that it fits inside one line. It is the concise, useful programs packed in just one single line. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-i-need-them"&gt;
  &lt;/a&gt;
  why do I need them?
&lt;/h2&gt;

&lt;p&gt;So if you are not a big fan of writing one-liners or you are just curious that why do I have to know these then below are some pretty convincing topics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understanding One-liners will make a python expert as you will get a much better understanding of the language.&lt;/li&gt;
&lt;li&gt;This will help you to write the code faster. You can write the piece of code much faster than others which will help you in competitive programming.&lt;/li&gt;
&lt;li&gt;On-liners will improve your basics and roots of programming as they strengthen your basics.&lt;/li&gt;
&lt;li&gt;You will write the code more in a pythonic way. Generally, people who come from different languages often write code in an un-pythonic way in python for example they don't use list comprehension, multiple assignments, and slicing etc.&lt;/li&gt;
&lt;li&gt;You can impress your friends, colleagues and you can give a good impression in your interview if you have a good grasp of one-liners.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But also it can be a little hard as well. Imagine programming as chess. You know the basics is like knowing what is variables, loops, conditions, data structures, classes but learning the master movies and creating your own strategy is like one-liners. In the beginning, it can be hard and quite overwhelming but once you get to know them. You can achieve greatness and win matches faster than a lot of other players. Everything has a price to pay my friend...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-ifelse"&gt;
  &lt;/a&gt;
  1. If-else
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-elif"&gt;
  &lt;/a&gt;
  2. Elif
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"no"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"maybe"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"no"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"maybe"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-if-without-else"&gt;
  &lt;/a&gt;
  3. If without else
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hi'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-function"&gt;
  &lt;/a&gt;
  4. Function
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"hello "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hello "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"def f(x):&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;    return 'hello '+ x"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-loop"&gt;
  &lt;/a&gt;
  5. Loop
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-loop-with-if"&gt;
  &lt;/a&gt;
  6. Loop with If
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-loop-with-if-else"&gt;
  &lt;/a&gt;
  7. Loop with if else
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#8-while-loop-with-if-else"&gt;
  &lt;/a&gt;
  8. While Loop with if else
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"FIVE"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"FIVE"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#9-swap-variables"&gt;
  &lt;/a&gt;
  9. swap variables
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-multiple-assignment"&gt;
  &lt;/a&gt;
  10. Multiple Assignment
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ONE"&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;3.001&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"One"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.001&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#11-write-string-in-file"&gt;
  &lt;/a&gt;
  11. Write String In File
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Helllloooooo"&lt;/span&gt;
&lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello.txt"&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Helllloooooo"&lt;/span&gt;
&lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello.txt"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#12quicksort"&gt;
  &lt;/a&gt;
  12.Quicksort
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Source - https://stackabuse.com/quicksort-in-python/
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;quick_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;quick_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;quick_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;quick_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#13-fibonacci"&gt;
  &lt;/a&gt;
  13. Fibonacci
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#14-http-server"&gt;
  &lt;/a&gt;
  14. HTTP Server
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;http.server&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socketserver&lt;/span&gt;
&lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleHTTPRequestHandler&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;socketserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"serving at port"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#15-nested-for-loops"&gt;
  &lt;/a&gt;
  15. Nested For Loops
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;iter1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;iter2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iter1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iter2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iter1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iter2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#16-print-without-newline"&gt;
  &lt;/a&gt;
  16. Print Without Newline
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#17-class"&gt;
  &lt;/a&gt;
  17. Class
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;School&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; 
    &lt;span class="n"&gt;fun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;School&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'School'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'fun'&lt;/span&gt;&lt;span class="p"&gt;:{}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#18-walrus-python-38"&gt;
  &lt;/a&gt;
  18. Walrus:= (Python 3.8)
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;gt; "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;"quit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You entered:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;gt; "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;"quit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You entered:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So now you have some understanding of python one-liners and this will help to speed up your coding process. I hope that you've learnt something new from this article as I myself get to know some cool tricks and one-liners that I didn't know earlier. If this is the case with you as well then do click the heart button when increases my motivation(1 like = 1 good karma). Also, share the post with your friends so that they too can learn something new(don't be selfish...). Hope to be in your mind again, till then b-bye!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3ignATo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/w89ak63KNl0nJl80ig/giphy.gif%3Fcid%3Decf05e478g5vv310sx1w5035xnuj17tgxbdtlcpcvas5fsoj%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3ignATo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/w89ak63KNl0nJl80ig/giphy.gif%3Fcid%3Decf05e478g5vv310sx1w5035xnuj17tgxbdtlcpcvas5fsoj%26rid%3Dgiphy.gif%26ct%3Dg" alt="https://media4.giphy.com/media/w89ak63KNl0nJl80ig/giphy.gif?cid=ecf05e478g5vv310sx1w5035xnuj17tgxbdtlcpcvas5fsoj&amp;amp;rid=giphy.gif&amp;amp;ct=g" width="480" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#socials"&gt;
  &lt;/a&gt;
  Socials
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.yashmakan.co.in/"&gt;My Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Yash_Makan"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.yashmakan.co.in/banner"&gt;Banner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building RESTful APIs with Node JS &amp; Hoppscotch</title>
      <author>Sankalp Swami</author>
      <pubDate>Tue, 23 Nov 2021 05:29:41 +0000</pubDate>
      <link>https://dev.to/aviyel/live-event-building-restful-apis-with-node-js-hoppscotch-1oll</link>
      <guid>https://dev.to/aviyel/live-event-building-restful-apis-with-node-js-hoppscotch-1oll</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ry4XnJGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81cko8ru5kfutgtv5i37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ry4XnJGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81cko8ru5kfutgtv5i37.png" alt="Samuel's Event" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
It all began when I failed miserably with my bulky monolithic web application which I developed for a client when working at a startup. I felt so disappointed that I even thought of quitting programming completely. But the hunger for knowledge pushed me harder and made me work on building scalable web applications and that was how I came across RESTful APIs.&lt;/p&gt;

&lt;p&gt;If you are planning to get into Backend Development, it is a must to understand what RESTful APIs are and how they work for building a robust, reliable, and scalable web application. Despite googling for hours, you are still chaotic about RESTful APIs? Time to relax as Aviyel is coming with an amazing event to answer all of your questions.&lt;/p&gt;

&lt;p&gt;Why you should join this event?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You will learn how to make CRUD API endpoints with Node.js, and Express.js.&lt;/li&gt;
&lt;li&gt;You will learn how to test your backend APIs with Hoppscotch.&lt;/li&gt;
&lt;li&gt;You will learn how to set up your database using HarperDB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ayodele Samuel Adebayo (unclebigbay) is coming live on Aviyel to clear all your doubts about RESTful APIs. Unclebigbay is a Nigerian software developer, technical writer, and content creator who writes about programming concepts and project-based articles on his blog. He graduated from Tiidelab's coding Bootcamp, and currently works as a freelancer, where he enjoys participating in open source projects and hackathons, with two of his projects making it to the winning list of hackathons on Hashnode. Unclebigbay can be seen playing volleyball with his sports team if he is not coding or writing.&lt;/p&gt;

&lt;p&gt;Join us to get hands-on experience with APIs and open-source!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Date: November 28th, 2021&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Time: 8.00 AM PST | 11:00 AM EST&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Register Here 👉&lt;/strong&gt;: &lt;a href="https://bit.ly/3nHxPYL"&gt;https://bit.ly/3nHxPYL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Impressed? Check out the rest of our events!&lt;br&gt;
Let’s build open-source together! 🎉&lt;br&gt;
Team Aviyel&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ayodele Samuel Adebayo Socials!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/unclebigbay143"&gt;unclebigbay&lt;/a&gt;&lt;br&gt;
Hashnode: &lt;a href="https://unclebigbay.com/"&gt;unclebigbay&lt;/a&gt;&lt;br&gt;
Dev.to: &lt;a href="https://dev.to/unclebigbay"&gt;Unclebigbay&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/ayodele-samuel-ayodele-55902819a/"&gt;Ayodele Samuel Adebayo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Bind Data in a Blazor Rich Text Editor Component</title>
      <author>Techguy</author>
      <pubDate>Tue, 23 Nov 2021 04:54:36 +0000</pubDate>
      <link>https://dev.to/syncfusion/how-to-bind-data-in-a-blazor-rich-text-editor-component-55pd</link>
      <guid>https://dev.to/syncfusion/how-to-bind-data-in-a-blazor-rich-text-editor-component-55pd</guid>
      <description>&lt;p&gt;Learn how to bind data in the Syncfusion &lt;a href="https://www.syncfusion.com/blazor-components/blazor-wysiwyg-rich-text-editor?utm_source=dev.to&amp;amp;utm_medium=socialmedia&amp;amp;utm_campaign=backlink_promotion"&gt;Blazor Rich Text Editor (RTE)&lt;/a&gt; in a Blazor WebAssembly app. This video explains how to bind the HTML data to the Rich Text Editor using one-way, two-way, and dynamic value binding. Also, it explains how to bind markdown data to the Rich Text Editor.&lt;/p&gt;

&lt;p&gt;Product Overview:&lt;a href="https://www.syncfusion.com/blazor-components/blazor-wysiwyg-rich-text-editor?utm_source=dev.to&amp;amp;utm_medium=socialmedia&amp;amp;utm_campaign=backlink_promotion"&gt;Blazor Rich Text Editor (RTE)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example project: &lt;a href="https://github.com/SyncfusionExamples"&gt;https://github.com/SyncfusionExamples&lt;/a&gt;...&lt;/p&gt;

&lt;p&gt;Explore tutorial videos: &lt;a href="https://bit.ly/3fAz0Ch"&gt;https://bit.ly/3fAz0Ch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0rDnLJKbf-Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>csharp</category>
      <category>dotnet</category>
      <category>blazor</category>
    </item>
    <item>
      <title>Medical Landing Page</title>
      <author>Md Moskur Alam</author>
      <pubDate>Tue, 23 Nov 2021 03:57:13 +0000</pubDate>
      <link>https://dev.to/moskur_alam/medical-landing-page-ccp</link>
      <guid>https://dev.to/moskur_alam/medical-landing-page-ccp</guid>
      <description>&lt;p&gt;Download 15,000+ Design Resources.&lt;/p&gt;

&lt;p&gt;Download thousands of free &amp;amp; premium web design, illustration, bootstrap template, flutter app, icon, 3d illustration, and graphic assets for your UI, UX design project from &lt;a href="https://www.uihut.com/web-designs"&gt;UIHUT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good news🔥🔥🔥&lt;/p&gt;

&lt;p&gt;Our Black Friday Offer👇&lt;/p&gt;

&lt;p&gt;Get Lifetime Access Only for 99$. Use the "mas10" coupon for the extra 10% off&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Python Log 從小白到入門</title>
      <author>Leon</author>
      <pubDate>Tue, 23 Nov 2021 03:48:42 +0000</pubDate>
      <link>https://dev.to/leon0824/python-log-cong-xiao-bai-dao-ru-men-3bk9</link>
      <guid>https://dev.to/leon0824/python-log-cong-xiao-bai-dao-ru-men-3bk9</guid>
      <description>&lt;p&gt;我們有時會有要在程式執行時輸出一些後台訊息的需求，用於顯示程式當下的行為，這樣的訊息我們稱為 log。&lt;/p&gt;

&lt;p&gt;在開發階段我們會用 log 來協助除錯，而在正式環境也會留下一些必要的 log 以便日後追蹤，例如記下用戶登入的時間／地點／裝置等資訊，讓我們可以利用這些 log 來檢測出不尋常的登入行為。&lt;/p&gt;

&lt;p&gt;與 &lt;code&gt;print()&lt;/code&gt; 大法不同的是，log 除了把訊息顯示在螢幕外，還有有更豐富的設定選項，例如輸出到檔案，以及設定檔案的保留週期等等，這些都是 &lt;code&gt;print()&lt;/code&gt; 大法難以實現的特性，因此對於記錄程式行為的需求，建議還是老老實實地用專門的 log 套件來實現。&lt;/p&gt;

&lt;p&gt;在 Python 的世界，標準函式庫就有內建 log 模組 &lt;code&gt;logging&lt;/code&gt;。&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-%E7%9A%84-logging"&gt;
  &lt;/a&gt;
  Python 的 logging
&lt;/h2&gt;

&lt;p&gt;因為是內建在標準函式庫內，所以可以直接引入：&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'debug message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'info message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'warning message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'error message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;critical&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'critical message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;上面的範例是最簡單的用法，引入 &lt;code&gt;logging&lt;/code&gt; 後可以直接調用，直接調用會把訊息顯示在螢幕上，上面我們調用了五個函式，他們代表的是訊息的重大程度，在 Python 文件內的定義如下：&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
&lt;th&gt;級別&lt;/th&gt;
&lt;th&gt;級別數字&lt;/th&gt;
&lt;th&gt;何時使用&lt;/th&gt;
&lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
&lt;td&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;細節信息，僅當診斷問題時適用。&lt;/td&gt;
&lt;/tr&gt;
        &lt;tr&gt;
&lt;td&gt;&lt;code&gt;INFO&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;確認程序按預期進行。&lt;/td&gt;
&lt;/tr&gt;
        &lt;tr&gt;
&lt;td&gt;&lt;code&gt;WARNING&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;表明有已經或即將發生的意外（例如：磁盤空間不足）。程序仍按預計進行。&lt;/td&gt;
&lt;/tr&gt;
        &lt;tr&gt;
&lt;td&gt;&lt;code&gt;ERROR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;由於嚴重問題，程序的某些功能已經不能正常運行。&lt;/td&gt;
&lt;/tr&gt;
        &lt;tr&gt;
&lt;td&gt;&lt;code&gt;CRITICAL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;嚴重的錯誤，表明程序已不能繼執行。&lt;/td&gt;
&lt;/tr&gt;
    &lt;/tbody&gt;
    來源：〈&lt;a href="https://docs.python.org/zh-tw/3/howto/logging.html"&gt;如何使用 Logging 模組&lt;/a&gt;〉
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;上面的範例執行後輸出如下：&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WARNING:root:warning message
ERROR:root:error message
CRITICAL:root:critical message
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;注意到 debug 和 info 訊息不見了！&lt;/p&gt;

&lt;p&gt;因為 &lt;code&gt;logging&lt;/code&gt; 預設只輸出 warning 及比 warning 更嚴重（即級別 ≥ 30）的訊息，這樣的預設配置較符合正式環境的需求，避免過多無謂的 info、debug 訊息輸出的 IO 作業把效能拖垮，或把空間灌爆。&lt;/p&gt;

&lt;p&gt;在開發階段一般我們會把所有的訊息級別都打開方便我們除錯，因此我們把上面的範例修改一下：&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'dev'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'debug message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'info message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'warning message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'error message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;critical&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'critical message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;這個範例引入了 &lt;code&gt;logging&lt;/code&gt; 的其它概念，下面一一說明。&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logger"&gt;
  &lt;/a&gt;
  Logger
&lt;/h3&gt;

&lt;p&gt;在第一個範例未做任何設定的 &lt;code&gt;logging&lt;/code&gt; 我們操作的是一個稱為 &lt;code&gt;root&lt;/code&gt; 的 logger，而現在這個範例我們用 &lt;code&gt;getLogger()&lt;/code&gt; 函式建立了另一個 &lt;code&gt;dev_logger&lt;/code&gt;，後面的設定也都是基於這個新的 &lt;code&gt;dev_logger&lt;/code&gt;，我們可以利用 logger 的機制建立無數個 logger，每個 logger 都可以有自己的組態，例如儲存到不同的檔案，或者不同的輸出的格式等等，雖然 &lt;code&gt;root&lt;/code&gt; logger 也是可以被做設定的，但個人建議另外建立自己的 logger 再把它變成自己喜歡的形狀，而不要去更動 &lt;code&gt;root&lt;/code&gt; logger 的行為，避免無意中改掉專案內依賴套件的 logger 行為。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZTkSk4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekewbpflu8r6qq0mn3qk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZTkSk4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekewbpflu8r6qq0mn3qk.jpg" alt="我能感覺出來 你裡面變了" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;
來源：網路



&lt;p&gt;而那句 &lt;code&gt;setLevel(logging.DEBUG)&lt;/code&gt; 自然就是設定 logger 輸出級別的函式，裡面的 &lt;code&gt;logging.DEBUG&lt;/code&gt; 也很單純，就是整數 &lt;code&gt;10&lt;/code&gt;，意即輸出 debug 及比 debug 更嚴重（即級別 ≥ 10）的的訊息。&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handler"&gt;
  &lt;/a&gt;
  Handler
&lt;/h3&gt;

&lt;p&gt;在 &lt;code&gt;logging&lt;/code&gt; 模組的 handler 負責處理 log 訊息的輸出工作，例如輸出到螢幕上或者某個檔案內，而我們這邊使用了 &lt;code&gt;logging.StreamHandler()&lt;/code&gt; 這個 &lt;code&gt;logging&lt;/code&gt; 模組內預帶的 handler。&lt;code&gt;StreamHandler()&lt;/code&gt; 在不加任何參數的情況下，會把訊息輸出到 stderr，在作業系統未做額外的配置下，stderr 可以簡單的理解為顯示到螢幕上。&lt;/p&gt;

&lt;p&gt;而 &lt;code&gt;addHandler()&lt;/code&gt; 就望文生義了。&lt;/p&gt;

&lt;p&gt;值得一提的是，一個 logger 可以加上數個 handler，意即 &lt;code&gt;dev_logger&lt;/code&gt; 除了加入一個 &lt;code&gt;StreamHandler&lt;/code&gt; 外，還可以再定義其他的 handler，例如一個 &lt;code&gt;FileHandler&lt;/code&gt;，如此一則 log 訊息就會被顯示在螢幕上以及被存到某個 log 檔內。&lt;/p&gt;




&lt;p&gt;把上面的範例程式跑出來會輸出這些訊息：&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;debug message
info message
warning message
error message
critical message
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;回頭和第一個範例的結果比較一下，會發現訊息的格式不太一樣，因為我們並未對 &lt;code&gt;dev_logger&lt;/code&gt; 設定它的訊息格式，而原始的 &lt;code&gt;root&lt;/code&gt; logger 是有預設它的訊息格式的。&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#formatter"&gt;
  &lt;/a&gt;
  Formatter
&lt;/h3&gt;

&lt;p&gt;在此我們再引入另一個 &lt;code&gt;logging&lt;/code&gt; 設定 log 訊息格式的特性 formatter。&lt;/p&gt;

&lt;p&gt;再把範例加工一下：&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'dev'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'%(asctime)s - %(name)s - %(levelname)s - %(message)s'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'debug message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'info message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'warning message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'error message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dev_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;critical&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'critical message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;先看輸出結果：&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2005-03-19 15:10:26,618 - dev - DEBUG - debug message
2005-03-19 15:10:26,620 - dev - INFO - info message
2005-03-19 15:10:26,695 - dev - WARNING - warn message
2005-03-19 15:10:26,697 - dev - ERROR - error message
2005-03-19 15:10:26,773 - dev - CRITICAL - critical message
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;這裡的格式是由程式內的 &lt;code&gt;formatter&lt;/code&gt; 定義的，它是一個 &lt;code&gt;logging.Formatter&lt;/code&gt; 物件，在實例化時餵入的字串定義了這個 formatter 的格式。除了範例內的代號，完整的格式代號如下：&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;格式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(asctime)s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;建立 log 時間&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(created)f&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;建立 log 的 Unix 時間&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(filename)s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;發出 log 的程式檔名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(funcName)s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;發出 log 的函式名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(levelname)s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;log 的級別&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(levelno)s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;log 的級別數字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(lineno)d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;發出 log 的行號&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(message)s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;log 的訊息內容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(module)s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;發出 log 的模組名稱&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(msecs)d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;建立 log 時間的毫秒部份&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(name)s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;發出 log 的 logger 名稱&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(pathname)s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;發出 log 的程式的路徑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(process)d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;發出 log 的程序的 ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(processName)s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;發出 log 的程序名稱&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(relativeCreated)d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;log 從創建到發出的毫秒時間差&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(thread)d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;發出 log 的線程 ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(threadName)s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;發出 log 的線程名稱&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;格式代號這麼多，而在設定 log 格式時也並沒有所謂的最佳實踐格式，該怎麼設可以參考下面的原則：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;足夠的資訊量，但不要一股腦的全塞進去，追求的是穠纖合度的平衡，爆量的 log 只會把機台的 IO 和空間塞爆。&lt;/li&gt;
&lt;li&gt;人機皆可讀，log 除了給人看之外，也可以餵給外部的 log 分析服務，做到提醒或警報的功能。&lt;/li&gt;
&lt;li&gt;不易混淆的分隔符號，讓不論是人讀或機讀都可以快速的解析出訊息的區段，而不會在茫茫 log 海中迷失。&lt;/li&gt;
&lt;li&gt;適度的分類與分級，利用前面提到的 logger 與級別的機制，對 log 做分類與分級，debug 用的訊息不要流到別的層級；critical 的訊息不要放到 warning 而被忽略。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;綜合以上，範例內的 &lt;code&gt;'%(asctime)s - %(name)s - %(levelname)s - %(message)s'&lt;/code&gt; 就是個頗不錯的格式。&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E5%B0%88%E6%A1%88%E5%85%A7%E7%9A%84-log-%E6%A8%A1%E7%B5%84"&gt;
  &lt;/a&gt;
  專案內的 Log 模組
&lt;/h2&gt;

&lt;p&gt;上一個部份談的是 &lt;code&gt;logging&lt;/code&gt; 本身的用法，若要在專案內導入 log 機制，還需要考慮這幾點：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;專案內的其它套件是否也有定義自己的 log？&lt;/li&gt;
&lt;li&gt;要如何讓自己的 log 與其他套件的 log 和平共存而不互相干擾？&lt;/li&gt;
&lt;li&gt;或者是如何依自己的需求魔改其他套件的 log 行為？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以 uvicorn 這個 ASGI server 來說，它就有自己的 log 機制，每當它跑起來就會開始吐訊息：&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INFO:     Started server process [20870]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;不只 uvicorn，大多數的 HTTP server 也都會吐出類似的 log，內容有啟動資訊以及訪客的請求資訊等等。&lt;/p&gt;

&lt;p&gt;如果你不想和它的 log 互相干擾，那比較好的方式是建立自己的 logger，並設定自己的 handler 和 formatter，就如同前一部分的範例那樣。&lt;/p&gt;

&lt;p&gt;另外由於你的 logger 有可能會在多個其他的 Python 模組內被引入，建議也把 logger 寫成獨立的模組便於使用。&lt;/p&gt;

&lt;p&gt;如果你想魔改其它套件的 log 納為己用，那我在此為您加油！祝您好運！&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_1sYqypC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdoe5lb20ekoldbfbbzl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_1sYqypC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdoe5lb20ekoldbfbbzl.jpg" alt="加油，好嗎" width="880" height="679"&gt;&lt;/a&gt;&lt;/p&gt;
來源：《超級星光大道》



&lt;h2&gt;
  &lt;a href="#%E7%B5%90%E8%AA%9E"&gt;
  &lt;/a&gt;
  結語
&lt;/h2&gt;

&lt;p&gt;這篇介紹了 &lt;code&gt;logging&lt;/code&gt; 模組的基礎用法，有些特性是本文並未涉及的，特別是組態檔的部份，&lt;code&gt;logging&lt;/code&gt; 可以從外部的組態檔讀入配置，這樣的特性讓我們可以更好的把專案內的 log 設定與程式邏輯分離，並把所有的 logger 組織在一份獨立的檔案內，也更符合&lt;a href="https://zh.wikipedia.org/wiki/%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB"&gt;關注點分離&lt;/a&gt;的原則，或許未來可以再寫一篇來騙稿費。:p&lt;/p&gt;

</description>
      <category>python</category>
      <category>logging</category>
    </item>
    <item>
      <title>What is dev.to for?</title>
      <author>neoan</author>
      <pubDate>Tue, 23 Nov 2021 03:01:48 +0000</pubDate>
      <link>https://dev.to/sroehrl/what-is-devto-for-4koa</link>
      <guid>https://dev.to/sroehrl/what-is-devto-for-4koa</guid>
      <description>&lt;p&gt;Lately there has been an influx of certain kinds of posts on dev.to that we should probably talk about: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uneducated-opinion-pieces"&gt;
  &lt;/a&gt;
  Uneducated opinion pieces
&lt;/h2&gt;

&lt;p&gt;Before I describe what kind of articles I am referring to, let's first clarify what dev.to enabled and what - in my opinion - should not be jeopardized: The absence of gate-keeping, which destroyed the vibe of many other platforms, communities, etc.&lt;/p&gt;

&lt;p&gt;However, this inclusiveness has particular dangers that have met a threshold recently. What I am referring to are posts that seem to be driven by a "learn by explaining it" approach and that are often simply too dangerous to leave uncommented. Way too often a mode of speech is used that would lead the beginner to believe that an expert is sharing advice while completely wrong or misleading statements are picked up and quoted. This has become so bad that I find people citing these sources and therefore unwillingly propagate misinformation similar to the false-news phenomenon in the political realm. Additionally, these articles tend to state opinion as fact. In my opinion, it is relatively easy to avoid mixing opinion with facts through language in our field as we only apply established technology.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-the-call-to-action"&gt;
  &lt;/a&gt;
  So what's the call to action?
&lt;/h2&gt;

&lt;p&gt;The question is what this community should do to avoid becoming a heap of nonsense or half-truths rather than a source of actual knowledge, given the understandable fact that many learners aren't able to distinguish between transfer of knowledge and confident nonsense. &lt;/p&gt;

&lt;p&gt;Are you expecting the same, or is this observation based on my personal feed? Thoughts?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Automated Web Application Code Testing On A Budget</title>
      <author>matthewekeller</author>
      <pubDate>Tue, 23 Nov 2021 01:56:37 +0000</pubDate>
      <link>https://dev.to/matthewekeller/automated-web-application-code-testing-on-a-budget-50g</link>
      <guid>https://dev.to/matthewekeller/automated-web-application-code-testing-on-a-budget-50g</guid>
      <description>&lt;p&gt;For a software development manager or architect that works for a large company with endless resources then it is easy to simply follow the idealistic automated code testing philosopy that goes something like this. "Yes boss, we have 80% code coverage with both our unit tests and our automated functional tests.  Here is a chart.  Look at all of this green.  You can see what a great job we are doing!"  This will of course make all of the non technical types exceedingly happy because green is a pleasant color and they like to see lots of green.&lt;br&gt;
 &lt;br&gt;
For the other employees that work in companies with limited budgets then this sort of approach is naive, and frankly quite expensive.  There definitely is an important place for testing in any development lifecycle but like most things the real goal is to get the most bang for your buck (aka. the most for your money).&lt;br&gt;
 &lt;br&gt;
Let's start by debunking some fallacies&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) &lt;b&gt;Code coverage equals code quality&lt;/b&gt; - Horrible code can be covered 100% by unit tests.  Writing unit tests should improve code quality but it in no way guarantees it.&lt;br&gt;
2) &lt;b&gt;Test driven development is the prefered way to write all code&lt;/b&gt; - The truth is that 90% of developers took TDD training in 2015 when it was all the rage, played along and quickly went back to writing the code first.  The reason for this is that it is a huge waste of time to write tests for something that doesn't even exist, especially when the developer is in the creative process of figuring out what they are trying to do.  TDD can work for special cases where the inputs and the outputs of a method are known right from the start.  However, seeing as how in the real world a developer is actually figuring out how many methods to write, how many layers of methods to write, and even what these method signatures are, then TDD is more or less impossible, until the thing that is to be tested has formed and by that time most of the code is done.  In actuality, a developer does TDD in their head while they code because they are imagining the paths through the code while they write it.  The smarter and more experienced they are, the better they are at visualizing this while they work, and the more they limit the code to predictable paths.&lt;br&gt;
3) &lt;b&gt;Tests make the code easier to maintain&lt;/b&gt; -  This depends of what is meant by easier.  It is easier to change the code without breaking it, because ideally the tests should tell the developer if a mistake was made.  However, a code base with high coverage will force the developer to break the tests with almost any code change, and therefore fixing all the tests every time something is refactored makes the code more difficult to maintain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now let's define a couple things for reference later.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) &lt;b&gt;Manual Testing&lt;/b&gt; - Testing done by human being.  Your QA department.  Humans are expensive but they will also find things wrong that your developers never thought of.  Never get rid of them completely, just reduce the amount of tedious testing they need to do with automation.&lt;br&gt;
2) &lt;b&gt;Unit Testing&lt;/b&gt; - This is code that tests code at the method or class level.  It isolates the object being tested by faking everything around it and sends information into it and tests for expected output.  Unit tests are usually written in the same language as the code they are testing and are expected to run fast because they should be done in memory and not interface to any other systems.  Unit tests typically take 3 times as long to write as the code they are testing, so they are expensive.  Furthermore, very high code coverage percentages in unit tests actually ends up enforcing how the code is written rather than what the code does, and therefore pours a &lt;u&gt;layer of virtual concrete&lt;/u&gt; over your code base that needs to be jack hammered up and rebuilt every time you refactor.&lt;br&gt;
2) &lt;b&gt;Integration Testing&lt;/b&gt; - Similar to unit tests but these tests target calls from one system to another.  For example, testing code that lives on the web server but queries against the database.  Unlike unit tests the integration tests need to operate against a real version of the other system because they are testing the real interaction between the two systems.  For example, a DAO (Data Access Object) Test must query against a real database with tables in it because it needs to verify that the fields it is running against actually exist and are of the size and type it expects.&lt;br&gt;
3) &lt;b&gt;Automated Functional Testing&lt;/b&gt; - Software that mimicks a manual tester.  It's basically a robot program that acts as a human user and manipulates an application from the front end.&lt;br&gt;
4) &lt;b&gt;Client side script testing&lt;/b&gt; - This is a type of testing particular to web applications because it is testing code that runs on the browser.  There are actually two categories of client side script&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
        Client side utility scripts - Deep libraries of script 
        that are used potentially in multiple spots and have
        multiple levels of method calls.
    
    &lt;/li&gt;
&lt;li&gt;
        Page level scripts - Small pieces of code that utilize 
        other larger libraries and are called in events in a web 
        page.  Code that hides a div or changes the color of 
        something for example.
    &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#saving-money"&gt;
  &lt;/a&gt;
  Saving Money
&lt;/h1&gt;

&lt;p&gt;Now it's time to get the important part of this article.  How can a company get the most bang for its buck and accumulate more gold bars (see photo above), instead of pouring money down the drain. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AmsU2WNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68q52iqmw75x64h5vclu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AmsU2WNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68q52iqmw75x64h5vclu.jpg" alt="Image description" width="749" height="648"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) &lt;b&gt;Target your unit testing&lt;/b&gt; - Forget about blanket percentages across your entire application.  That is like trying to keep every room in an entire hospital as clean as the surgery rooms, which is a waste of money and impossible.  Unit tests should target two kinds of code &lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Important code - Code that simply can't break because it is core to your business.  For example, code that has a direct impact on financial transactions.  Its probably a good idea to cover this code at a 100% level, but it should be written to isolate it from all of the other less important code.
    &lt;/li&gt;
    &lt;li&gt;Complex code - Code that is hard to understand and easily broken because of its complexity.  This needs to be covered because the testing framework will assist in its creation to begin with and because it needs to be protected against accidental breakage later.
    &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rest of your code should be covered lightly, if at all.  Why waste your time covering a simple if statement, or a form bean setter for example.  Don't cover simple stuff.  Also, don't cover display code that will obviously break and be discoverd by Automated Functional Testing.  More on that later.&lt;/p&gt;

&lt;p&gt;2) &lt;b&gt;Still pursue high test code coverage on integration objects&lt;/b&gt; - Integration testing is of high importance and should be thoroughly covered.  Also, if the code is written correctly, for example DAO classes, should have very little branching and should be easy to cover at near 100%.  Keep business logic out of the integration code so that it is as linear as possible and the writing of unit tests should be straight forward. Integration tests are good insurance against surprises from your own company's database or from company or third party services.&lt;/p&gt;

&lt;p&gt;3) &lt;b&gt;Limit Automated Functional Testing To Mostly Smoke Tests&lt;/b&gt; - The great thing about AFT is that it covers the entire stack.  Just bringing up that web page probably exercises a couple 1000 lines of code, all the way from the UI to the database.  Smoke tests are relatively cheap to write because they only include enough details to spider around the website the way a Googlebot would.  Yet a smoke test can alert you if any of your javascript breaks or for that matter anything in your happy path view chain that would cause an exception on the page.  Detailed AFT tests on the other hand are very expensive to write and also quite brittle.  Small changes to the UI can break detailed tests as can changes to the data in your test database.  Some detailed AFT tests might be in order but limit them to avoid costs incurred by having to refactoring them frequently.&lt;/p&gt;

&lt;p&gt;4) &lt;b&gt;Do not unit test page level script&lt;/b&gt; - That javascript that has 20 lines of validation in it that checks the field types before form submission, or that javascript that popups up the calendar, are a complete waste of time and money to write unit tests for.  Mocking the DOM HTML to feed it to a js unit test to test simple script like this is a very bad return on investment. A developer that edits this script but never pushes that button to see if the code works should just be shown the door instead.  On the other hand, if a script utility is written that has hundreds or thousands of lines of code then it should be unit tested and treated like server side code.  Also, large js libraries like React and Angular move a large portion of what used to be server side to the client and therefore this script code needs to be covered with tests using the same philosophy outlined above in the unit testing section.  &lt;/p&gt;

&lt;p&gt;5) &lt;b&gt;Avoid testing overlap between unit tests and automated functional tests&lt;/b&gt; - A good portion of "less important" unit testing can be avoided if the same code is exercised by AFT tests.  For example, a lot of server side controller code and views will be fully exercised by AFT smoke tests so this code does not need to be thoroughly covered.  The same can be said, for example, for React and Angular routing code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As can be seen, a thoughtful approach to testing can help your company reap the benefits of testing but still keep the budget under control.  There is no perfect approach and there are no perfect tests, but like any business decision the best approach is to be smart enough to get the most for your money.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>devops</category>
    </item>
    <item>
      <title>Automate everything... until you can't. </title>
      <author>Kalob Taulien</author>
      <pubDate>Tue, 23 Nov 2021 01:43:44 +0000</pubDate>
      <link>https://dev.to/kalobtaulien/automate-everything-until-you-cant-38h3</link>
      <guid>https://dev.to/kalobtaulien/automate-everything-until-you-cant-38h3</guid>
      <description>&lt;p&gt;Lots of people talk about tech taking their jobs and automating humans out of a job. &lt;/p&gt;

&lt;p&gt;And while that's sometimes true, there are a few subjects where people can't be replaced.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is an article about how we use tech to automate big tasks at &lt;a href="https://arbington.com"&gt;Arbington.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But, once again, not everything can be automated (or can be automated but very poorly). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automating-big-tasks"&gt;
  &lt;/a&gt;
  Automating big tasks
&lt;/h2&gt;

&lt;p&gt;At Arbington.com we deal with a lot of scale. We have over 49,000 videos, over 4,500 hours of content, over 1,500 courses and lists of 10's of thousands of businesses, teachers and students to reach out to. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If I asked you to manually gather a list of 40,000 businesses in North America, could you compile that list with contact details in less than 3 days? &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The answer to the above question is obviously &lt;strong&gt;no&lt;/strong&gt;. People just can't operate that fast. &lt;/p&gt;

&lt;p&gt;But computers can. &lt;/p&gt;

&lt;p&gt;Using &lt;strong&gt;Python&lt;/strong&gt; and less than 50 lines of code I was able to find business listing sites all over the web, scrape them, and collect data from each page. &lt;/p&gt;

&lt;p&gt;This is all free information that's accessible to everybody. It's just A LOT of information.&lt;/p&gt;

&lt;p&gt;And computers are good at doing one task over and over, for as long as they have reason to continue doing it. Whether that's scraping, checking if a site is down, or serving a website to thousands of views per minute. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tools-we-use"&gt;
  &lt;/a&gt;
  Tools we use
&lt;/h3&gt;

&lt;p&gt;Instead of hiring a small army of people to collect all the data we wanted, we wrote a small Python script that uses &lt;code&gt;requests&lt;/code&gt; and Beautiful Soup 4 to get the page and parse the HTML. Then we used simple &lt;code&gt;for&lt;/code&gt; loops to loop through all the data, and a handful of &lt;code&gt;if&lt;/code&gt; statements to validate some basic data. &lt;/p&gt;

&lt;p&gt;Then we put all that finalized data into a huge Python list and used &lt;a href="https://airtable-python-wrapper.readthedocs.io/en/airtable-python-wrapper/"&gt;&lt;code&gt;airtable-python-wrapper&lt;/code&gt;&lt;/a&gt;,&lt;br&gt;
Python and Airtable to bulk insert data into one of our tables. &lt;/p&gt;

&lt;p&gt;The whole process took about 20 minutes to write code (and solve little bugs that came up with inconsistent data) and about 3 hours to run. &lt;/p&gt;

&lt;p&gt;Once the code was written, we pointed it at a website and said, "Fly my beautiful butterfly, fly". &lt;/p&gt;

&lt;p&gt;And then we waited. &lt;/p&gt;

&lt;p&gt;If there's enough demand, maybe I'll post one of our scraping scripts to show you how we created a bot to gather and parse data, and put it into a useable table on Airtable. Leave a comment below if that interests you. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-python-its-easy-and-fun"&gt;
  &lt;/a&gt;
  Learn Python. It's easy, and fun!
&lt;/h3&gt;

&lt;p&gt;As a side note, if you're not familiar with Python you might want to consider learning it. It's the worlds #1 most popular coding language now. &lt;/p&gt;

&lt;p&gt;And at Arbington.com we &lt;a href="https://arbington.com/search/?q=python"&gt;have over 35 python courses&lt;/a&gt;. Take them all for free with a 14 day free trial and then it's just $15/month after that. For 35 courses on Udemy that's going to be over $350. I'll let you do the math and comparison on that 😉 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#human-data-is-messy-though"&gt;
  &lt;/a&gt;
  Human data is messy though
&lt;/h3&gt;

&lt;p&gt;People, AKA: humans, are messy. We don't format phone numbers or email addresses the in a standardized way. People write:&lt;br&gt;
&lt;code&gt;test at gmail.com&lt;/code&gt;, &lt;code&gt;test @ gmail . com&lt;/code&gt;, &lt;code&gt;test [at] gmail [dot] com&lt;/code&gt;, and about a zillion other ways of trying to avoid spam bots from collecting their email addresses, phone numbers, business names, addresses, and so on. &lt;/p&gt;

&lt;p&gt;First, we had to find a few directories that had relatively clean data in a consistent format. &lt;/p&gt;

&lt;p&gt;Then we put all the data in Airtable and found the outliers with a simple filter and search. That looks like filtering for &lt;code&gt;" "&lt;/code&gt; (a space) in an email address, for example. &lt;/p&gt;

&lt;p&gt;Then, manually, we went and cleaned up the data so it was consistent for the entire team. From there, it became a people-focused task: emailing prospects one by one and answering questions. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We literally have hundreds of thousands of contacts now. And 95% of the data was collected through automated methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What would have taken a team of people MONTHS to achieve, took us a matter of days. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-still-need-people"&gt;
  &lt;/a&gt;
  We still need people
&lt;/h2&gt;

&lt;p&gt;Once we had all the data from our automated tasks, we needed to fill the gaps. &lt;/p&gt;

&lt;p&gt;Not every business lists a phone number, email address or physical address. Not every portfolio website has an email address. And when they do, it's formatting incorrectly. &lt;/p&gt;

&lt;p&gt;This is where people come in. &lt;/p&gt;

&lt;p&gt;Instead of trying to code an automated tool that could account for every type of email address (including images) we simply said, "humans are better for this." &lt;/p&gt;

&lt;p&gt;Humans have unparalleled pattern recognition. We can match an email address just by looking at it without reading it. Even with all the variations of email addresses out there. &lt;/p&gt;

&lt;p&gt;So we went and manually collected the missing data. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;People are simple better at tasks that involve creativity or advanced pattern recognition. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Could we have automated this? Absolutely. But it'd have taken us a long time to create a cool tool that would ultimately be thrown away. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opportunity-happens-when-people-connect"&gt;
  &lt;/a&gt;
  Opportunity happens when people connect
&lt;/h3&gt;

&lt;p&gt;The next big hurdle that tech couldn't solve was a simple conversation with our potential business partners. &lt;/p&gt;

&lt;p&gt;We couldn't just email 40,000 businesses with one message. Businesses are unique, like people, and we needed to cater to each business differently. &lt;/p&gt;

&lt;p&gt;Again, this is where people come in. &lt;/p&gt;

&lt;p&gt;People can handle objections, consider situations, understand when to sell and when to back off, and customize each response to be friendly and helpful. &lt;/p&gt;

&lt;p&gt;Automation can't do that. &lt;/p&gt;

&lt;p&gt;Yes, of course it's a lot more work to hire a team of people to do this, but the end result is a much higher ROI than if we automated everything. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Automation can't replace people&lt;/strong&gt; - that's the point I'm driving here. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When it comes to communication, creativity and empathy we simply cannot automate most of that (some exceptions apply, of course) &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-you-fear-losing-your-job-as-a-dev-or-being-automated-out-before-you-land-a-job-as-a-developer"&gt;
  &lt;/a&gt;
  Should you fear losing your job as a dev, or being automated out before you land a job as a developer?
&lt;/h2&gt;

&lt;p&gt;Nope. Absolutely not. &lt;/p&gt;

&lt;p&gt;Sure, there are lots of no-code solutions out there. And when starting a startup, definitely take that approach! It'll save you a lot of pain of coding your own solutions, dealing with bugs and edge cases that users bring up. &lt;/p&gt;

&lt;p&gt;But at the end of the day, your app/website/business has custom logic that likely can't be completely automated and will absolutely require human input. &lt;/p&gt;

&lt;p&gt;Maybe in 2100 we'll have to open this conversation again, but for now you're safe as a developer. &lt;/p&gt;

&lt;p&gt;For now, you can learn all your automation coding needs on &lt;a href="https://arbington.com/"&gt;Arbington.com&lt;/a&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;💴 $15/month&lt;/li&gt;
&lt;li&gt;🏫 14 day free trial &lt;/li&gt;
&lt;li&gt;👩‍🏫 1,500+ courses &lt;/li&gt;
&lt;li&gt;🔥 Certificate of Completion included in every premium courses&lt;/li&gt;
&lt;li&gt;Check out &lt;a href="https://airtable.com"&gt;Airtable.com&lt;/a&gt; - we love this service so much we don't even want to get paid for referring them. ♥️ &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-next-apis"&gt;
  &lt;/a&gt;
  What's next? API's!
&lt;/h2&gt;

&lt;p&gt;In the next article I'll talk about the API's we use, how we use them, and why we use them. It'll be pretty dev-heavy - so if web development is your cup of tea, stick around for that one. &lt;/p&gt;

</description>
      <category>startup</category>
      <category>performance</category>
      <category>scale</category>
      <category>python</category>
    </item>
  </channel>
</rss>
