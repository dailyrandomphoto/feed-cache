<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Your one stop solution to sharing your resume with everyone using GitHub</title>
      <author>Jai dewani</author>
      <pubDate>Fri, 23 Jul 2021 16:40:24 +0000</pubDate>
      <link>https://dev.to/jai_dewani/your-one-stop-solution-to-sharing-your-resume-with-everyone-using-github-4o4n</link>
      <guid>https://dev.to/jai_dewani/your-one-stop-solution-to-sharing-your-resume-with-everyone-using-github-4o4n</guid>
      <description>&lt;p&gt;Things I am going to cover: &lt;/p&gt;

&lt;p&gt;→ Hosting your resume hassle-free&lt;br&gt;&lt;br&gt;
→ How to use your &lt;code&gt;github.io&lt;/code&gt; domain instead of random google drive links&lt;br&gt;&lt;br&gt;
→ Update your resume with easy commits without changing the URL &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can checkout my &lt;a href="https://github.com/jai-dewani/resume"&gt;template repository&lt;/a&gt; and start using it with just one click&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGbdlE5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627054753408/9sJgXsuv6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGbdlE5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627054753408/9sJgXsuv6.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;It has been a reoccurring problem in my life, where suppose I am filling a form where I have been asked to provide a URL pointing to my &lt;strong&gt;latest&lt;/strong&gt; resume (emphasis on the latest, cause most of these forms were to be shared with HRs and recruiters so you want all the latest achievements there), and everyone like I used Google Drive to easily share there resume by creating a sharable link.&lt;/p&gt;

&lt;p&gt;But most often than not my slow brain would think of that &lt;strong&gt;one&lt;/strong&gt; important thing I missed out on in my resume or say I got selected into a prestigious program just days after filling this forum. Now I need this information to be there on that resume accessible from the same URL, so what should I do? But now I think I have a way to solve this problem using GitHub and GitHub Actions&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;Before I explain my solution, let me preface that my resume is written in latex which I need to compile to generate my resume in PDF format so I have incorporated that step as well to save my 10 seconds which otherwise I would have wasted on compiling 😂 but you can skip that step if you don't use latex to generate your resume and directly push your pdf instead of latex files into master branch though you might need to remove all the latex compiling steps from the GitHub actions. Don't hesitate to reach out to me on Twitter &lt;a href="//www.twitter.com/jai_dewani"&gt;@jai_dewani&lt;/a&gt; if you need any help customizing this repository to your need.  &lt;/p&gt;

&lt;p&gt;Here is what my solution is: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a repository named &lt;code&gt;resume&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Commit all the required latex files into the main branch
&lt;/li&gt;
&lt;li&gt;Commit an &lt;code&gt;index.html&lt;/code&gt; which when hit should redirect you to your resume.
So theoretically you could just share the URL &lt;code&gt;&amp;lt;github-username&amp;gt;.github.io/resume&lt;/code&gt; and it will redirect the person to &lt;code&gt;&amp;lt;github-username&amp;gt;.github.io/resume/resume.pdf&lt;/code&gt;. Here is what that HTML looks like
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Loading, wait....&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    Loading, wait....
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt; 
&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jai-dewani.github.io/resume/resume.pdf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Create a GitHub workflow that would move this file to the &lt;code&gt;gh-pages&lt;/code&gt; with the &lt;code&gt;index.html&lt;/code&gt; file as well cause this is the file responsible for redirecting the user from &lt;code&gt;&amp;lt;github-username&amp;gt;.github.io/resume&lt;/code&gt; to &lt;code&gt;&amp;lt;github-username&amp;gt;.github.io/resume/resume.pdf&lt;/code&gt;. After testing various ways to do the same thing, I have settled on this workflow which compiles all the latex, creates a build folder and moves everything necessary to it, and pushed the build folder to &lt;code&gt;gh-pages&lt;/code&gt; branch
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Compile and upload résumé PDF&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;main"&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;resume.tex"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;index.html"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;.github/workflows/**"&lt;/span&gt;
    &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;main"&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;resume.tex"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;index.html"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;.github/workflows/**"&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build_latex&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;danteev/texlive:latest&lt;/span&gt;
        &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
              &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
              &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;persist-credentials&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;

            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Compile LaTeX document&lt;/span&gt;
              &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;xu-cheng/latex-action@v2&lt;/span&gt;
              &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;root_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;resume.tex&lt;/span&gt;

            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Post Processing&lt;/span&gt;
              &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
                  &lt;span class="s"&gt;mkdir build &lt;/span&gt;
                  &lt;span class="s"&gt;cp *.pdf build/ &lt;/span&gt;
                  &lt;span class="s"&gt;cp index.html build/&lt;/span&gt;

            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Git add&lt;/span&gt;
              &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;git add resume.pdf&lt;/span&gt;

            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy to GitHub Pages&lt;/span&gt;
              &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;JamesIves/github-pages-deploy-action@4.1.4&lt;/span&gt;
              &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;BRANCH&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gh-pages&lt;/span&gt;
                  &lt;span class="na"&gt;FOLDER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build&lt;/span&gt;
                  &lt;span class="na"&gt;CLEAN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Enable GitHub pages for &lt;code&gt;gh-pages&lt;/code&gt; to host all the files in that branch on your &lt;code&gt;&amp;lt;github-username&amp;gt;.github.io/resume&lt;/code&gt; URL.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now when you share the URL to the repo &lt;code&gt;&amp;lt;github-username&amp;gt;.github.io/resume&lt;/code&gt; and it will redirect the person to your resume &lt;code&gt;&amp;lt;github-username&amp;gt;.github.io/resume/Resume-&amp;lt;name&amp;gt;.pdf&lt;/code&gt; or you could share the pdf link directly, totally an aesthetic choice. &lt;/p&gt;

&lt;p&gt;Some advantages of this are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Since you are using a GitHub repository, it should be easy to override the PDF resume, make a commit, push on main branch and the GitHub action would make all the changes required and push them to the &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The URL that you would share for resume will have your GitHub username as well so it would help create a different identity of you compared to most resume links which are just long-ass Google Drive links. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think I now have a permanent solution to this problem which I personally like will use till I find something even better xD&lt;/p&gt;

&lt;p&gt;PS: You even connect the main branch of your repo to overleaf after connecting your GitHub to overleaf to update the latex file from overleaf only which provides you an almost live rendered version of your latex and push from there to your repo which would then compile the latex file and push the PDF into &lt;code&gt;gh-pages&lt;/code&gt; branch. &lt;/p&gt;

&lt;p&gt;Did I just spend 4 hours solving a problem that takes 10 mins manually? Yes. &lt;br&gt;
and I would do that again if required, every time 😂&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PS: You can check out my resume at &lt;a href="https://jai-dewani.github.io/resume"&gt;https://jai-dewani.github.io/resume&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  Update
&lt;/h2&gt;

&lt;p&gt;I am now using iframe to render the pdf on the &lt;code&gt;&amp;lt;github-username&amp;gt;.github.io/resume&lt;/code&gt; page only, instead of redirecting to the full pdf URL, this was I can skip that ugly redirecting page and the URL looks clean as well. So the new &lt;code&gt;index.html&lt;/code&gt; looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Resume - Jai Kumar Dewani&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"height: 100vh;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://jai-dewani.github.io/resume/resume.pdf"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the people who might be thinking why I haven't used PDF.js yet is because I think people feel comfortable in whatever PDF engine their browser is using cause, they are used to it by now and I don't want to introduce javascript to this solution unless it's really necessary.&lt;/p&gt;

&lt;p&gt;Do let me know if there is anything I missed out on that we can do to make this workflow more seamless cause the base idea was mine but a lot of small things that you see here were suggested to me by other people&lt;/p&gt;

&lt;p&gt;Credits: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/ronaksakhuja"&gt;@ronaksakhuja&lt;/a&gt; and &lt;a href="https://github.com/rajivnayanc"&gt;@rajivnayanc&lt;/a&gt; for sharing their &lt;a href="https://github.com/ronaksakhuja/resume"&gt;@ronaksakhuja/resume&lt;/a&gt; and &amp;lt;private&amp;gt; repositories for giving me an idea, how I can create an action for compiling the latex file to generate the PDF on the fly on every update (makes my life so easy)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/imabp/"&gt;@imabp&lt;/a&gt; gave me the idea to make this a template repository, check out his &lt;a href="https://github.com/imabp/resume"&gt;version&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/harshkapadia2/"&gt;@harshkapadia2&lt;/a&gt; for sharing his &lt;a href="https://github.com/harshkapadia2/resume"&gt;@harshkapadia2/resume&lt;/a&gt; repository and giving me some ideas on how I can improve my action file and also pointing out that &lt;a href="https://github.com/himanshusharma89/"&gt;@himanshusharma89&lt;/a&gt; is using some sort of method to embed his PDF in the HTML view so the mobile users don't need to download the file just for viewing. CHeckout this repo here &lt;a href="https://github.com/himanshusharma89/resume/"&gt;@himanshusharma89/resume&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This blog was originally posted at &lt;a href="https://jai-dewani.github.io/blogs"&gt;Blogs by JaiD&lt;/a&gt;, you can read more blogs written by me there as well&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>How I stopped freaking out when speaking to people | A journey with 4 lessons</title>
      <author>Bilaniuc Dragos</author>
      <pubDate>Fri, 23 Jul 2021 16:33:27 +0000</pubDate>
      <link>https://dev.to/dragosbln/how-i-stopped-freaking-out-when-speaking-to-people-a-journey-with-4-lessons-24jn</link>
      <guid>https://dev.to/dragosbln/how-i-stopped-freaking-out-when-speaking-to-people-a-journey-with-4-lessons-24jn</guid>
      <description>&lt;p&gt;Imagine: You're in 6th grade. Your English teacher gives you the main role in a poetry event that will appear on TV. On the big day, you walk on the stage. The camera turns upon you. Everyone's eyes turn upon you. You take a deep breath, and… blank.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRDlaNEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he5jlp4i3jytpmhjwiwi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRDlaNEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he5jlp4i3jytpmhjwiwi.jpg" alt="dark image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I always like to point to that story as the reason for my excessive fear of speaking in front of people. Of course, there must be lots of other reasons for it, but having a brain fart at 11 years old - on TV and in front of everyone - sounds dramatic enough, so we'll stick to that. The fact is, this became one of my deepest fears.&lt;/p&gt;

&lt;p&gt;Learning to live with this fear - and (spoiler alert) going from that panicked little kid to winning the Speaker of the Year award in front of over 300 people - was the most transformational journey of my life. It taught me some of the most important lessons I know, so I decided to write about them. Maybe they'll help you, too :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#denial"&gt;
  &lt;/a&gt;
  Denial
&lt;/h2&gt;

&lt;p&gt;For as long as I can remember, whenever I'd have to speak in front of people, my heart would start thumping, my mind would start racing and I'd start blurting out words rapidly and with no coherence. And the fact that &lt;em&gt;I was in complete denial of this fear&lt;/em&gt; didn't help at all.&lt;/p&gt;

&lt;p&gt;I quickly fell into a very nasty loop: I'd try to mask my insecurities with "confidence hacks" from youtube, people around me would smell that and become even more repulsed, which confirmed my insecurities, which in turn made me seek even more tricks and hacks… and so on.&lt;/p&gt;

&lt;p&gt;And this loop led me into a really dark place. I couldn't feel an authentic connection with anyone - not because there was anything wrong with the people around me, but because I never allowed them to see who I really was.&lt;/p&gt;

&lt;p&gt;All I was doing was keeping up this facade of fake confidence, and getting disappointed and frustrated every time it would inevitably fail to solve my problems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5ORQUQZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9w24rstik8desxkoz9in.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5ORQUQZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9w24rstik8desxkoz9in.jpg" alt="masks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#change"&gt;
  &lt;/a&gt;
  Change
&lt;/h2&gt;

&lt;p&gt;The trigger for change came at a leadership event that I participated in. I was my usual self, feeling awkward and trying to mask it with tricks and hacks.&lt;/p&gt;

&lt;p&gt;And then, there was this guy - speaking calmly, telling the right jokes at the right times, never really "trying" anything, but making everyone feel good - especially when he got in front of the group. Everyone wanted to be around him. And I wanted to &lt;em&gt;be him&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Following his advice, I joined Toastmasters, an organization that had regular meetings for practicing public speaking - and this is where the real pain of confronting my fears and insecurities began.&lt;/p&gt;

&lt;p&gt;At first, I was obsessively practicing my speeches (30–40–50 times!), just to make sure what happened in 6th grade would never happen again. And it went quite well, insofar as blocking on the stage went.&lt;/p&gt;

&lt;p&gt;But the painful part came after a speech was over, and I would look over the recording. I could barely stand to look for more than 2 minutes - that's how unnatural and awkward I saw myself on the stage. All my insecurities were exposed in front of everyone. And that was a hard pill to swallow.&lt;/p&gt;

&lt;p&gt;The only thing that kept me going was gradually learning the lessons I'll talk about. The made me stick to this journey, one painful step at a time, until I was holding this speech:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3-rij92I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8gasmqx0r38ryqgygbp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3-rij92I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8gasmqx0r38ryqgygbp.jpg" alt="speech"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;that ended up with me holding this beauty, as one of the biggest achievements of my life:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jBtcL3DP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqypv5cfloppph74l5cy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jBtcL3DP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqypv5cfloppph74l5cy.jpg" alt="award"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, on to the lessons…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-most-powerful-thing-to-know-is-that-its-okay-to-fuck%C2%A0up"&gt;
  &lt;/a&gt;
  1. The most powerful thing to know is that it's okay to fuck up
&lt;/h2&gt;

&lt;p&gt;And I'm not saying it in a make-me-feel-better way. This is actually the best way to minimize the mental chatter that's such a big part of fear. &lt;/p&gt;

&lt;p&gt;Most times, fear would begin with the question "what happens if I fuck up?", which would trigger an endless loop of apocalyptic scenarios in my head - scenarios that were totally ungrounded in reality. Once I accepted that it's okay to fuck up, I could short-circuit the loop by answering that question with a realistic "nothing much".&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jEz0FJWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8aqkvkvfexhmu3ke04dy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jEz0FJWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8aqkvkvfexhmu3ke04dy.jpg" alt="shrug"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Toastmasters taught me that environment can play a crucial role here. If the feedback for my first speech was an honest "you suck, just go home" - you can bet I'd still be filling the pockets of "hack your confidence" gurus on youtube. &lt;/p&gt;

&lt;p&gt;Instead, the message was always: it's not a big deal - it happens to everyone. And that's about the most empowering message you can get when confronting fear and insecurities.&lt;/p&gt;

&lt;p&gt;Another thing that really helped me with this point was seeing other people around me awkwardly trying to confront the same fear and fucking up themselves. Knowing that I was not the only one struggling (and failing) was what kept me going, during some of my most intense moments of self-criticism. &lt;/p&gt;

&lt;p&gt;And this brings me to my second eye-opening lesson:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-encouraging-others-is-the-best-way-of-dealing-with-your-own%C2%A0fear"&gt;
  &lt;/a&gt;
  2. Encouraging others is the best way of dealing with your own fear
&lt;/h2&gt;

&lt;p&gt;And this is something I  didn't expect at all: the most effective method of dealing with my own fear didn't have much to do with me. It was all about encouraging others to confront their own version of this fear of public speaking.&lt;/p&gt;

&lt;p&gt;And not just because it's the right thing to do in a higher, humanitarian way. It's actually the best thing you can do, egotistically speaking. Because when you see someone else dealing with the same kind of fear you're dealing with - and start encouraging them - something amazing happens:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;that fear becomes smaller for both of you&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This was another huge advantage at Toastmasters: being a member, I didn't only give speeches. I would also have to evaluate others, encourage them and give them the best feedback I was capable of. &lt;em&gt;And telling others that they can do it, I suddenly found myself believing it, too!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Find someone that's dealing with the same kind of fear. Encourage them and let them know that it's okay to struggle and even to fail. Then feel the empowerment this simple act brings upon you, in your own struggles.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o978qBju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hrkb33mdtjbqy7oorjd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o978qBju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hrkb33mdtjbqy7oorjd.jpg" alt="friends at the lake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this lesson kept me fighting, until I finally realised that:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-you-dont-conquer-fear-you-learn-to-live-with%C2%A0it"&gt;
  &lt;/a&gt;
  3. You don't conquer fear. You learn to live with it
&lt;/h2&gt;

&lt;p&gt;About 2 years passed since I won that trophy that marked the success of my "public speaking project". Since then, I've had quite a lot of events to moderate and speeches to present. In short, I kept gaining experience.&lt;/p&gt;

&lt;p&gt;But just the other day, I was going to this salsa&amp;amp;bachata party where I didn't know anyone. I arrived a little earlier, and there were a few people gathered up in a discussion. As I approached them, my heart started thumping, my thoughts started racing - all the good old friends were right back.&lt;/p&gt;

&lt;p&gt;And this is the biggest takeaway from my journey:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My fear never went away. I just learned to live with it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;More specifically, I learned to expect fear, &lt;em&gt;without expecting that it will ruin everything&lt;/em&gt;. To leave it in the background, and keep going anyways.&lt;/p&gt;

&lt;p&gt;I believe I learned to do this simply through experience. Speech after speech - no matter how much I rehearsed or how small the audience was - the same feelings of fear would arise. And, speech after speech, they would prove to be less tragic than I imagined.&lt;/p&gt;

&lt;p&gt;Eventually, those feelings became just part of the landscape - not going away, but not consuming all my attention, either. And that's how I started to actually enjoying public speaking. That's how my gruesome fight came to an end- not because I won or lost, but because &lt;em&gt;I stopped fighting.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;What I wish I knew then is how much mediation can help with this - since its core training is leaving thoughts and emotions in the background. And it's such an effective way of doing it that, in hindsight, I believe it would've saved me months of pain and frustration I had to go through, just to begin to learn this lesson.&lt;/p&gt;

&lt;p&gt;Just for the record, after trying out lots of apps and techniques, the most effective way of meditating for me right now is through &lt;a href="https://app.www.calm.com/program/mVcvqWcR8C/how-to-meditate"&gt;the guided sessions of Jeff Warren, available on Calm&lt;/a&gt;. If you have a hyperactive mind like mine, he might resonate with you, as well :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TrcDhcfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f94vvlwtz0u8cvbfxnne.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TrcDhcfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f94vvlwtz0u8cvbfxnne.jpg" alt="stones"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the last big lesson this journey had to teach me was that:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-its-absolutely-worth%C2%A0it"&gt;
  &lt;/a&gt;
  4. It's absolutely worth it
&lt;/h2&gt;

&lt;p&gt;I believe that one of the most perverse things when it comes to dealing with fear and insecurities is how easily the battle can be lost before it even begins.&lt;/p&gt;

&lt;p&gt;For such a long time, all I did was find circumstances and excuses. I'd tell myself it's alright, I'll eventually cover those insecurities up with confidence hacks. Or I'd have a little fuckup and see it as confirmation that I'll never be able to do it. Or, most often, I'd just delay things, expecting some enlightenment moment where all my fears and insecurities would disappear, just like magic.&lt;/p&gt;

&lt;p&gt;And now, I can confidently say that these were the worst ways in which I was sabotaging myself. Because learning to live with only this one fear, changed the way I looked at every other area of my life.&lt;/p&gt;

&lt;p&gt;More and more often, when faced with insecurities, fears and uncomfortable situations, I found myself thinking:&lt;br&gt;
 &lt;br&gt;
&lt;em&gt;"if public speaking didn't kill me, this won't kill me either"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And soon enough, this automatic way of thinking made me take on opportunities that would've terrified me before - opportunities that, among others, ended up sending my professional growth through the roof.&lt;/p&gt;

&lt;p&gt;I gained the courage to begin freelancing, to assume the role of Tech Lead in my projects, and, soon after, to become the CTO of a very promising startup.&lt;/p&gt;

&lt;p&gt;All of these moves came with lots of doubts, fears and insecurities packed in. And the only way I could get over them was through the lessons learned in this seemingly unrelated journey of confronting my deep fear of public speaking.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;So, that's about it for my journey. Confronting my fear taught me some of the most valuable lessons I know: that &lt;em&gt;it's okay to fuck up&lt;/em&gt;, that &lt;em&gt;encouraging others pays huge dividends&lt;/em&gt;, that &lt;em&gt;you can live with fear&lt;/em&gt; and that &lt;em&gt;it's totally worth doing it&lt;/em&gt;. I hope you found some value in those lessons, as well. &lt;/p&gt;

&lt;p&gt;But, at the end of the day, this is just one journey among millions. Fear and insecurities are everywhere, and each of us is trying our best to deal with them. If you're struggling, rest assured that you are not alone, not by a long shot. &lt;/p&gt;

&lt;p&gt;And if my specific lessons don't work for you, what will definitely work is what you're already doing now: keeping an open mind, seeking out new ideas and enlarging your own perspectives. A little bit from here, a little bit from there, and that's how you're building up your own recipe for dealing with this existential human condition.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Kudos to you, for keeping an open mind in front of so many fears and insecurities!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pe9CCXwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abxjoba9oerahvpl0p2a.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pe9CCXwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abxjoba9oerahvpl0p2a.jpg" alt="smiling frog"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>motivation</category>
      <category>leadership</category>
      <category>learning</category>
    </item>
    <item>
      <title>Machine Learning Roadmap 2021</title>
      <author>Rocky</author>
      <pubDate>Fri, 23 Jul 2021 16:08:29 +0000</pubDate>
      <link>https://dev.to/codelivly/machine-learning-roadmap-2021-38h8</link>
      <guid>https://dev.to/codelivly/machine-learning-roadmap-2021-38h8</guid>
      <description>&lt;p&gt;Machine Learning is getting computers to learn like humans and improve their learning over time with autonomous fashion by feeding them information and data in the form of observations. Machine Learning is based on algorithms which can learn from data without being explicitly programmed.&lt;/p&gt;
&lt;p&gt;When it comes to Machine Learning or any Programming field there are lot of options and programming languages to choose and one can get lost and confused for choosing the right option so this article on Complete machine learning roadmap 2021 it will valid in the future also will clear all your doubts and confusion and you will have :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A clear Machine Learing roadmap&lt;/li&gt;
&lt;li&gt;A clear way to start your Machine Learning journey&lt;/li&gt;
&lt;li&gt;And write code and create your ML algorithms&lt;/li&gt;
&lt;/ul&gt;
&lt;span&gt;&lt;b&gt;Read More&lt;/b&gt;: &lt;a href="https://bit.ly/3kKPbmx"&gt;&lt;span&gt;Machine Learning Roadmap 2021&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;

</description>
      <category>machinelearning</category>
    </item>
    <item>
      <title>7 of the best JavaScript learning resources (free and paid)</title>
      <author>Pasca Vlad</author>
      <pubDate>Fri, 23 Jul 2021 16:06:25 +0000</pubDate>
      <link>https://dev.to/pascavld/7-of-the-best-javascript-learning-resources-free-and-paid-jlp</link>
      <guid>https://dev.to/pascavld/7-of-the-best-javascript-learning-resources-free-and-paid-jlp</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found value in this thread you will most likely enjoy my tweets too so make sure you follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;  for more information about web development and how to improve as a developer. This article was first published on my &lt;a href="https://vladpasca.hashnode.dev/"&gt;Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-freecodecamp"&gt;
  &lt;/a&gt;
  1. @freeCodeCamp
&lt;/h3&gt;

&lt;p&gt;In this course, you'll learn fundamental programming concepts in JavaScript. You'll start with basic data structures like numbers and strings. &lt;/p&gt;

&lt;p&gt;Then you'll learn to work with arrays, objects, functions, if/else statements, and more.&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-javascript-info"&gt;
  &lt;/a&gt;
  2. JavaScript Info
&lt;/h3&gt;

&lt;p&gt;Modern JavaScript Tutorial: simple, but detailed explanations with examples and tasks, including: closures, document events, object oriented programming and more.&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://javascript.info/"&gt;https://javascript.info/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-html-to-react-ebook"&gt;
  &lt;/a&gt;
  3. HTML to React eBook
&lt;/h3&gt;

&lt;p&gt;Become a successful JavaScript developer&lt;/p&gt;

&lt;p&gt;What and Why JavaScript, Variables, Data types, Conditionals, Looping, Classes,  Closure, Callbacks, Promises, ES6+, ES2020, Good and bad practices, design patterns, and much more.&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://gumroad.com/a/416027763"&gt;https://gumroad.com/a/416027763&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-the-javascript-beginners-handbook-by-flaviocopes"&gt;
  &lt;/a&gt;
  4. The JavaScript Beginner's Handbook by &lt;a class="mentioned-user" href="https://dev.to/flaviocopes"&gt;@flaviocopes&lt;/a&gt;

&lt;/h3&gt;

&lt;p&gt;This eBook helps you learn JavaScript quickly.&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://flaviocopes.com/page/javascript-handbook/"&gt;https://flaviocopes.com/page/javascript-handbook/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-javascript-crash-course-for-beginners-from-traversymedia"&gt;
  &lt;/a&gt;
  5. Javascript Crash Course For Beginners from &lt;a class="mentioned-user" href="https://dev.to/traversymedia"&gt;@traversymedia&lt;/a&gt;

&lt;/h3&gt;

&lt;p&gt;If you enjoy learning from video format resources this is perfect for you.&lt;/p&gt;

&lt;p&gt;This Youtube video contains everything you need to kick-start your JavaScript journey&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://youtu.be/hdI2bqOjy3c"&gt;https://youtu.be/hdI2bqOjy3c&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-you-dont-know-js"&gt;
  &lt;/a&gt;
  6. You don't know JS
&lt;/h3&gt;

&lt;p&gt;This is a series of books diving deep into the core mechanisms of the JavaScript language.&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;https://github.com/getify/You-Dont-Know-JS&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-mdn-web-docs"&gt;
  &lt;/a&gt;
  7. MDN Web Docs
&lt;/h3&gt;

&lt;p&gt;Learn how to program in JavaScript with guides and tutorials.&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Javascript"&gt;https://developer.mozilla.org/en-US/docs/Web/Javascript&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;freeCodeCamp &lt;/li&gt;
&lt;li&gt;JavaScript Info&lt;/li&gt;
&lt;li&gt;HTML to React eBook&lt;/li&gt;
&lt;li&gt;The JavaScript Beginner's Handbook&lt;/li&gt;
&lt;li&gt;Javascript Crash Course For Beginners&lt;/li&gt;
&lt;li&gt;You don't know JS&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;I hope found this useful and if you did please let me know. If you have any question feel free to DM me on  &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt; .&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Alexa in Arabic</title>
      <author>awedis</author>
      <pubDate>Fri, 23 Jul 2021 16:00:43 +0000</pubDate>
      <link>https://dev.to/awedis/alexa-in-arabic-5ek2</link>
      <guid>https://dev.to/awedis/alexa-in-arabic-5ek2</guid>
      <description>&lt;p&gt;Let us Make a quote generator skill&lt;/p&gt;

&lt;p&gt;The main points that will be tackled in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implementing the Arabic language in Alexa&lt;/li&gt;
&lt;li&gt;Localization&lt;/li&gt;
&lt;li&gt;DynamoDB communication&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To keep our skill simple, will create a random quote generator, when you ask Alexa for a quote it will say a random one from our list of quotes, later to make things a bit more interesting will add functionality that you can ask a quote for different modes, like for example "I want a motivation quote" or "give me a business quote" which will read the data from DynamoDB&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-lets-see-the-steps-need-to-be-done-to-add-the-arabic-language"&gt;
  &lt;/a&gt;
  First let's see the steps need to be done to add the Arabic language
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Route to language settings &amp;amp; add a new language from the available list, choose Arabic and save it.&lt;br&gt;
The images shown below are a quick flow of how can be done using the console.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o2YajLV9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jono819m3zxqj5acz8ha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o2YajLV9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jono819m3zxqj5acz8ha.png" alt="screen 1"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qASp1xDF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/le0pr8fvsangw3sq2yue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qASp1xDF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/le0pr8fvsangw3sq2yue.png" alt="screen 2"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zP3lIA8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adrln9m7mt93mw8egha6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zP3lIA8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adrln9m7mt93mw8egha6.png" alt="screen 3"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We will have 2 interaction models one for the English language &amp;amp; another one for the Arabic.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;English Interaction Model (en-US.json)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"interactionModel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"languageModel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"invocationName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"random quote"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"intents"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AMAZON.CancelIntent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nl"&gt;"samples"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AMAZON.HelpIntent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nl"&gt;"samples"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AMAZON.StopIntent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nl"&gt;"samples"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AMAZON.NavigateHomeIntent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nl"&gt;"samples"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"RandomQuoteIntent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nl"&gt;"slots"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nl"&gt;"samples"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                      &lt;/span&gt;&lt;span class="s2"&gt;"give me quote"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                      &lt;/span&gt;&lt;span class="s2"&gt;"I want a quote"&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"types"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Arabic Interaction Model (ar-SA.json)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"interactionModel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"languageModel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"invocationName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"قول عشوائي"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"intents"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AMAZON.CancelIntent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"samples"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AMAZON.HelpIntent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"samples"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AMAZON.StopIntent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"samples"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AMAZON.NavigateHomeIntent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"samples"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AMAZON.FallbackIntent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"samples"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"RandomQuoteIntent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"slots"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"samples"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"من فضلك أعطني قولاً"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"أريد قولًا"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"types"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#our-localization-function-where-all-the-magic-happens"&gt;
  &lt;/a&gt;
  Our localization function, where all the magic happens
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The function is executed on the request interceptor: &lt;em&gt;Request interceptors are invoked immediately before the execution of the selected handler for an incoming request. You can use them to add any logic that needs to be performed for each request, irrespective of the type of request.&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us add i18Next package which will handle our internationalization logic&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ask-sdk-core"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.6.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ask-sdk-model"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.18.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"aws-sdk"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.326.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"i18next"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^20.3.2"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add inside the exports.handler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addRequestInterceptors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;LocalisationRequestInterceptor&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;LocalisationRequestInterceptor&lt;/strong&gt; function will check what language the user is using and it will return a list of locales for that specific language&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LocalisationRequestInterceptor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handlerInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Alexa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getLocale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handlerInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestEnvelope&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;languageStrings&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;handlerInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localizationClient&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;strong&gt;localizationClient&lt;/strong&gt; function will check the local type if its object returns its value, else if its array, it will return a random value from it, how cool is that right? 😉 now all we have to do is to use the function and add some locales to our code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localizationClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;returnObjects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally this way we can use our helper function "t" 😀&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;speakOutput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handlerInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;WELCOME_MSG&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our locales.js file which holds all our speeches for different languages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;translation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;WELCOME_MSG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Welcome to random quote, say I want a quote`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;translation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;WELCOME_MSG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`مرحبًا بك في قول عشوائي ، قل أريد قولً`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Outputs:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BfIFLUdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7alb6a3gzpf20qsobr0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BfIFLUdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7alb6a3gzpf20qsobr0u.png" alt="output-1-en"&gt;&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2q9z6uQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dw4vz1b5ovipxdh1d9ej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2q9z6uQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dw4vz1b5ovipxdh1d9ej.png" alt="output-1-ar"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-make-our-skill-more-interesting-using-dynamodb-sunglasses"&gt;
  &lt;/a&gt;
  Let's make our skill more interesting using DynamoDB 😎
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;What's DynamoDB? Amazon DynamoDB is a fully managed proprietary NoSQL database service that supports key–value and document &lt;br&gt;
data structures&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First, add the right permissions so that our lambda function can access DynamoDB, below image shows the policy that can be attached to the role&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IpZwtnNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jv8k4qopmhqwho6cl72.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IpZwtnNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jv8k4qopmhqwho6cl72.png" alt="iam"&gt;&lt;/a&gt;&lt;br&gt;
Great now let's create our table, with the data in it. Will name the table randomQuote, and let's give a partition-key "languageId" which will hold our language type. This way it will become simple to make queries to it, and for the modes let's have two "motivation" &amp;amp; "business" types, below images show both the English and Arabic languages that are created.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J3oHaKjq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b60htgrwdu9plxgtrjr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J3oHaKjq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b60htgrwdu9plxgtrjr8.png" alt="dynamo-en"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lVObBlsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mldluqeq59zir5z0obi1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVObBlsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mldluqeq59zir5z0obi1.png" alt="dynamo-ar"&gt;&lt;/a&gt; &lt;br&gt;
Let's check our updated interaction models, for the customQuote slot we will use AMAZON.SearchQuery to keep things simple, but you can use custom slot types too where you need to define a list of synonyms.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"CustomQuoteIntent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"slots"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"customQuote"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AMAZON.SearchQuery"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"samples"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"give me a {customQuote} quote"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"I want a {customQuote} quote"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"CustomQuoteIntent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"slots"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"customQuote"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AMAZON.SearchQuery"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"samples"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"أعطني مقولة {customQuote}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"أريد مقولة {customQuote}"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to make our queries will have two helper functions, one that creates the connection with the database, and the other one that does the query&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dbHelper.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aws-sdk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CONFIG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../config/aws&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dynamoDBHelper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dynamoDBHelper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;AWS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CONFIG&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REGION&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dynamoDB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DynamoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DocumentClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dynamoDB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;queryHelper.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CONFIG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../config/aws&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tableName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CONFIG&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dbHelper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./dbHelper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;queries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getQuotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;languageID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;tableName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;KeyConditionExpression&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#languageID = :language_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;ExpressionAttributeNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#languageID&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;languageId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;ExpressionAttributeValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:language_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;languageID&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dynamoDB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dbHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dynamoDBHelper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dynamoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let's have a quick look to our query response through Amazon CloudWatch.&lt;br&gt;
&lt;em&gt;Amazon CloudWatch is a monitoring and management service that provides data and actionable insights for AWS, hybrid, and on-premises applications and infrastructure resources. With CloudWatch, you can collect and access all your performance and operational data in form of logs and metrics from a single platform.&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hQIfLCJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hn6t3o6sb0qdbpy1fxhb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hQIfLCJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hn6t3o6sb0qdbpy1fxhb.png" alt="cloudwatch"&gt;&lt;/a&gt;&lt;br&gt;
Nice, now let us check the Intent Handler function in index.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CustomQuoteIntentHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;canHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handlerInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Alexa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRequestType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handlerInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestEnvelope&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IntentRequest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Alexa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getIntentName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handlerInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestEnvelope&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CustomQuoteIntent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handlerInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slotValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handlerInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestEnvelope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slots&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customQuote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;languageID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Alexa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getLocale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handlerInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestEnvelope&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;speakOutput&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getQuotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;languageID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;quoteArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;slotValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="nx"&gt;speakOutput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;quoteArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;quoteArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-- ERROR --&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;speakOutput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handlerInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ERROR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;handlerInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseBuilder&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;speakOutput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getResponse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function will make a query using our queryHelper functions, in these two lines we take the list of quotes (by its mode) and then a random quote from it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;quoteArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;slotValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;speakOutput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;quoteArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;quoteArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our output&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z2g_xQdk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvrmbnj04t1lknnhcy78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z2g_xQdk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvrmbnj04t1lknnhcy78.png" alt="output-2-en"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mfliR9mb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u530f1f7q55pp4q5jrcr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mfliR9mb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u530f1f7q55pp4q5jrcr.png" alt="output-2-ar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it 😊 This was a bit long article, hope it was really helpful and clear, of course, some stuff can be improved and enhanced but for the sake of keeping stuff simple, I didn't want to go too deep.&lt;/p&gt;

&lt;p&gt;Moreover implementing the Arabic language in Alexa will open doors for many skills that can be done and published in new regions with Arabic language demand, again hope it was straightforward and easy to grab with me. I wish you all a fun and engaging skill development journey.&lt;/p&gt;

&lt;p&gt;The source code&lt;br&gt;
&lt;a href="https://github.com/awedis/random-quote"&gt;https://github.com/awedis/random-quote&lt;/a&gt;&lt;/p&gt;

</description>
      <category>alexa</category>
      <category>node</category>
      <category>aws</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Spawn an HTTP server from your Mock Service Worker request handlers.</title>
      <author>Artem Zakharchenko</author>
      <pubDate>Fri, 23 Jul 2021 15:50:15 +0000</pubDate>
      <link>https://dev.to/kettanaito/spawn-an-http-server-from-your-mock-service-worker-request-handlers-2c19</link>
      <guid>https://dev.to/kettanaito/spawn-an-http-server-from-your-mock-service-worker-request-handlers-2c19</guid>
      <description>&lt;p&gt;When &lt;a href="https://mswjs.io/"&gt;Mock Service Worker&lt;/a&gt; was released, it had a clear mission to enable API mocking without the need to spawn and maintain an actual HTTP server. This purposeful restriction, among a few other core principles, has led to thousands of developers writing declarative, agnostic, and reusable mocks every day, prototyping amazing applications and delivering stunning products with confidence.&lt;/p&gt;

&lt;p&gt;While our "you don't need a mocking server" principle still stands strong today, we listen closely and analyze all the great feedback that our users share with us in order to improve the project and increase the amount of use cases it could cover.&lt;/p&gt;

&lt;p&gt;Today, I'm excited to tell you about a project that &lt;a href="https://github.com/idolize"&gt;David Idol&lt;/a&gt; and I have collaborated on with a goal to bring Mock Service Worker to more challenging usage contexts. We named it "http-middleware".&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mswjs"&gt;
        mswjs
      &lt;/a&gt; / &lt;a href="https://github.com/mswjs/http-middleware"&gt;
        http-middleware
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Spawn an HTTP server from your request handlers or apply them to an existing server using a middleware.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#the-concept"&gt;
  &lt;/a&gt;
  The Concept
&lt;/h2&gt;

&lt;p&gt;The premise of &lt;code&gt;http-middleware&lt;/code&gt; is extremely straightforward: &lt;em&gt;reuse your request handlers to create an actual HTTP server&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This project is designed to cover more complex use cases when the standard Mock Service Worker approach isn't sufficient. Such use cases include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding the ability to &lt;code&gt;curl&lt;/code&gt; your mock definitions, for example, for local debugging;&lt;/li&gt;
&lt;li&gt;Integrating API mocking in complex application architecture (i.e. with dockerized apps).&lt;/li&gt;
&lt;li&gt;Prototyping Node.js server development.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that this project is &lt;strong&gt;not a go-to solution for API mocking&lt;/strong&gt;, and you should always favor Mock Service Worker instead. It's created to handle complex use cases and you'd know when you need it. As a rule of thumb: when in doubt, prefer MSW.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn more about how to &lt;a href="https://mswjs.io/docs/getting-started/install"&gt;get started with MSW&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-usage"&gt;
  &lt;/a&gt;
  The Usage
&lt;/h2&gt;

&lt;p&gt;The "http-middleware" project is so concise that I've decided to write a brief usage tutorial right here, right now. Let's get a server running in 2 minutes with your request handlers being the source of truth.&lt;/p&gt;

&lt;p&gt;First, create a project if you don't have one already:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, install the necessary dependencies:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;express msw @mswjs/http-middleware &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To keep things simple, let's have a single &lt;code&gt;server.js&lt;/code&gt; file where we will declare our server:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, use the &lt;code&gt;createServer&lt;/code&gt; function to spawn an &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt; server. Provide it with the request handlers you want to be responsible for producing responses:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// server.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createServer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mswjs/http-middleware&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;httpServer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;httpServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9090&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Learn more about writing &lt;a href="https://mswjs.io/docs/getting-started/mocks"&gt;request handlers&lt;/a&gt; with Mock Service Worker. You can reuse the &lt;em&gt;same&lt;/em&gt; handlers you write in tests, local development, and debugging.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now run your server:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Try making a &lt;code&gt;GET http://localhost:9090&lt;/code&gt; request. You'll see that the response was resolved based on the request handler you've specified:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;OK&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Content-Type:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;text/plain;&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="s2"&gt;"Hello world"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Done 🎉&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#adding-to-an-existing-server"&gt;
  &lt;/a&gt;
  Adding to an existing server
&lt;/h3&gt;

&lt;p&gt;Alternatively, you can apply request handlers via a middleware, which is handy in case you already have a server:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// existing-server.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createMiddleware&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mswjs/http-middleware&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;createMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-cherry-on-top"&gt;
  &lt;/a&gt;
  The Cherry on Top
&lt;/h2&gt;

&lt;p&gt;With request handlers acting as the source of truth, you get the same benefits as when using MSW: &lt;em&gt;shared API mocking logic&lt;/em&gt; across different environments and purposes.&lt;/p&gt;

&lt;p&gt;I can't stress enough how important it is to have a clean, deterministic testing setup. There is absolutely no reason to install 3 different libraries for API mocking just because you want to mock the same API in an integration test, and then in an end-to-end test, and then to debug an irksome data-driven bug.&lt;/p&gt;

&lt;p&gt;Mock Service Worker allows you to write your API mocks &lt;strong&gt;&lt;em&gt;once&lt;/em&gt;&lt;/strong&gt; and reuse them &lt;em&gt;anywhere&lt;/em&gt; later: when working on the app, when testing it in Node.js, when running automated tests in Cypress, when debugging. All that using the same familiar consistent syntax. Don't miss out.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mswjs"&gt;
        mswjs
      &lt;/a&gt; / &lt;a href="https://github.com/mswjs/msw"&gt;
        msw
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Seamless REST/GraphQL API mocking library for browser and Node.js.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#embrace-the-ecosystem"&gt;
  &lt;/a&gt;
  Embrace the ecosystem
&lt;/h3&gt;

&lt;p&gt;By leveraging libraries like &lt;a href="https://github.com/mswjs/data"&gt;@mswjs/data&lt;/a&gt;, you can have data-driven type-safe API mocking reused across the &lt;em&gt;entire stack&lt;/em&gt;. Develop and iterate on your next product with the speed of light by the flexibility Mock Service Worker and its ecosystem gives you.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#afterword"&gt;
  &lt;/a&gt;
  Afterword
&lt;/h2&gt;

&lt;p&gt;We're excited to see what impact this small package will have in your development workflow! Make sure to &lt;a href="https://twitter.com/ApiMocking"&gt;&lt;strong&gt;follow Mock Service Worker on Twitter&lt;/strong&gt;&lt;/a&gt; to get the latest news and be notified about many upcoming features. &lt;/p&gt;

&lt;p&gt;We also highly encourage you to contribute to the &lt;code&gt;http-middleware&lt;/code&gt; package with your ideas and feedback on GitHub:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mswjs"&gt;
        mswjs
      &lt;/a&gt; / &lt;a href="https://github.com/mswjs/http-middleware"&gt;
        http-middleware
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Spawn an HTTP server from your request handlers or apply them to an existing server using a middleware.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Stay awesome ❤️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>testing</category>
      <category>api</category>
      <category>backend</category>
    </item>
    <item>
      <title>A Perfect  Product Card Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Fri, 23 Jul 2021 15:28:00 +0000</pubDate>
      <link>https://dev.to/nikhil27b/a-perfect-product-card-using-html-css-2lf2</link>
      <guid>https://dev.to/nikhil27b/a-perfect-product-card-using-html-css-2lf2</guid>
      <description>&lt;p&gt;Hello Guys,&lt;/p&gt;

&lt;p&gt;Today I created a Amazing Product Card Using HTML &amp;amp; CSS. this simple product card using some css properties flex and box-shadow to create the card effect. I hope you like this also comments about your thoughts.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nikhil27b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L13Hplw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DVAuMQ0j--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/481802/ff897af1-c333-4e04-8f08-d6d1356a1c14.jpeg" alt="nikhil27b"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nikhil27b/glassmorphism-sign-in-form-using-html-css-3a2a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Glassmorphism Sign In Form Using HTML &amp;amp; CSS&lt;/h2&gt;
      &lt;h3&gt;Nikhil Bobade  ・ Jul 6 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/XWRzRXr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Placement Series 2021</title>
      <author>Shreyansh Sinha</author>
      <pubDate>Fri, 23 Jul 2021 14:50:39 +0000</pubDate>
      <link>https://dev.to/shreyanshsinha/placement-series-2021-2l5a</link>
      <guid>https://dev.to/shreyanshsinha/placement-series-2021-2l5a</guid>
      <description>&lt;p&gt;Placement season for the batch of 2022 will be starting in few days across most of the NITs and other engineering colleges. While most of the students would be preparing hard for their placements, one might also get intimidated by the huge syllabus which the academics offer. The post (and subsequently some other posts also) intends to provide some important topics about all the important subjects regarding Placements. #ComputerNetworks is quite an important subject with respect to placements.&lt;br&gt;
Here are some of the important topics to look at:&lt;/p&gt;

&lt;p&gt;1) OSI Model and TCP/IP Model (Thorough idea of each layer and also a protocol which is used in each layer)&lt;br&gt;
2) IP Address (IP4, IP6)&lt;br&gt;
3) MAC Address&lt;br&gt;
4) Packet Switching and Circuit Switching&lt;br&gt;
5) Ethernet (Ethernet Header)&lt;br&gt;
6) CSMA/CD, Exponential backoff&lt;br&gt;
7)DNS, DNS Header (What happens when you enter the URL and hit enter)&lt;br&gt;
8) Framing&lt;br&gt;
9) Routers and Routing Algorithms (Count to Infinity Problem)&lt;br&gt;
10) Knowledge about Ports, Swithes, Bridge, Repeater, Hub (In which layer do they operate in)&lt;br&gt;
11) Error Correction (Parity Bit, 2D Parity, CRC Check)&lt;br&gt;
12) Check Sum Computation (Hamming Code)&lt;br&gt;
13) TCP vs UDP&lt;br&gt;
14) TCP Header, 2 way Handshake and 3 way Handshake&lt;br&gt;
15) Protocols (HTTP, HTTPS, ARP, TCP, UDP, FTP, SMTP)&lt;br&gt;
16) Sliding Window Protocol&lt;br&gt;
17) HTTP vs HTTPS&lt;br&gt;
18) Does DNS use TCP or UDP ?&lt;br&gt;
19) Network Topologies&lt;br&gt;
20) CIDER, Classful and Classless Addressing&lt;/p&gt;

&lt;p&gt;I personally found these topics to be the most frequently asked ones. Any suggestions are most welcome. Best of luck for Placements !!&lt;/p&gt;

</description>
      <category>placements2021</category>
      <category>batchof2022</category>
      <category>computernetworks</category>
    </item>
    <item>
      <title>How to Use async/await with The Fetch API in JavaScript</title>
      <author>Mehdi Aoussiad</author>
      <pubDate>Fri, 23 Jul 2021 14:42:59 +0000</pubDate>
      <link>https://dev.to/aoussiadmehdi/how-to-use-async-await-with-the-fetch-api-in-javascript-1agl</link>
      <guid>https://dev.to/aoussiadmehdi/how-to-use-async-await-with-the-fetch-api-in-javascript-1agl</guid>
      <description>&lt;p&gt;Using the fetch API is a good idea if you want to make HTTP requests and get data from APIs. It's easy to use, you only need to know JavaScript.&lt;/p&gt;

&lt;p&gt;The fetch API is an alternative to the old XML HttpRequest. However, the majority of developers prefer to use fetch because it's very simple and straightforward. Since the method &lt;code&gt;fetch()&lt;/code&gt; returns a promise, we can use async/await syntax to make our code cleaner and easy to read.&lt;/p&gt;

&lt;p&gt;In this article, we'll learn about the fetch API and how to use it with async/await syntax. Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-the-fetch-api"&gt;
  &lt;/a&gt;
  Introduction to the fetch API
&lt;/h2&gt;

&lt;p&gt;The fetch API is the easiest way to assess resources in the network. It's a tool that allows us to make HTTP requests using different methods such as &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;To start making requests, we use the method &lt;code&gt;fetch()&lt;/code&gt; and pass it the required arguments. The fetch method accepts two arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The 1st argument: the URL where you want to make the request(in a string). It can also take a response object.&lt;/li&gt;
&lt;li&gt;The 2nd argument: A configuration object that takes properties for the request method, &lt;code&gt;headers&lt;/code&gt;, &lt;code&gt;body&lt;/code&gt;, and all other options.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the method &lt;code&gt;fetch()&lt;/code&gt; returns a promise, we can use &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; methods of promises to handle the requests. The promise gets resolved if the request is completed. On the other hand, if the request fails due to any error, the promise will be rejected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fetch-example-without-asyncawait"&gt;
  &lt;/a&gt;
  Fetch example without async/await
&lt;/h2&gt;

&lt;p&gt;To make it simple for you, we will provide an example of using fetch to get data from an API. In this example, we will use fetch without async/await just to show you how the syntax looks.&lt;/p&gt;

&lt;p&gt;By using fetch, we will try to get a list of users from the JsonPlaceholder fake API.&lt;br&gt;
Here is the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, when you only pass the first argument(API URL) to the method &lt;code&gt;fetch()&lt;/code&gt; you're only allowed to do GET requests. That's enough if you only want to get data from an API. However, you can still pass the configuration object as a second argument if you want to do other HTTP requests like &lt;code&gt;POST&lt;/code&gt; for example.&lt;/p&gt;

&lt;p&gt;In the example above, we used the method &lt;code&gt;fetch&lt;/code&gt; and pass it the API URL as a first argument. Since fetch returns a promise, we used &lt;code&gt;then&lt;/code&gt; method to get the response from the API in a JSON format and &lt;code&gt;catch&lt;/code&gt; method to handle an error if it occurs. As a result, the requested data gets printed in the console. You can take that data and display anywhere on your page if you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-asyncawait-with-fetch"&gt;
  &lt;/a&gt;
  Using async/await with fetch
&lt;/h2&gt;

&lt;p&gt;As we know, async/await allows us to write asynchronous code in a much cleaner way. It allows us to avoid the headaches of using callbacks and &lt;code&gt;then&lt;/code&gt; &lt;code&gt;catch&lt;/code&gt; syntax in our code.&lt;/p&gt;

&lt;p&gt;That's why I always prefer using async/await when using the fetch API. In this section, we will implement the same example that we did above, but now using async/await syntax.&lt;/p&gt;

&lt;p&gt;To use async/await, make sure to create an asynchronous function by using the keyword &lt;code&gt;async&lt;/code&gt;. The keyword &lt;code&gt;await&lt;/code&gt; is permitted inside the function.&lt;br&gt;
Here is the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;API_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// fetched users&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the syntax now is cleaner. We only added the keyword &lt;code&gt;async&lt;/code&gt; to the begining of the function. Then we used the keyword &lt;code&gt;await&lt;/code&gt; when assigning the variables. Since &lt;code&gt;fetchUsers&lt;/code&gt; is an asynchronous function, it returns a promise. As a result, we used one &lt;code&gt;then&lt;/code&gt; method to handle the promise.&lt;/p&gt;

&lt;p&gt;So this is how to get data from an API using fetch and async/await. Now you can do anything with the data &lt;code&gt;users&lt;/code&gt; that we got from the API. You can display it on the page if you want.&lt;/p&gt;

&lt;p&gt;You can also use &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; to handle errors if you want. Here is the same example above, but now adding error handling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;API_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// fetched users&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're not familiar with error handling in JavaScript, I suggest that you learn about it from other resources. It's a useful thing to know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The fetch API is very useful when it comes to working with APIs in general. Combining fetch with async/await is a good way to make your code cleaner and easy to read.&lt;/p&gt;

&lt;p&gt;Thank you for reading. If you're interested in more webdev content, make sure to visit our new blog &lt;a href="https://webdevidea.com/"&gt;WebDevIdea&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>coding</category>
    </item>
    <item>
      <title>Validation; joi brings you "Joy" 😁</title>
      <author>Olufemi obafunmiso</author>
      <pubDate>Fri, 23 Jul 2021 14:36:54 +0000</pubDate>
      <link>https://dev.to/olufemi/validation-joi-brings-you-joy-fof</link>
      <guid>https://dev.to/olufemi/validation-joi-brings-you-joy-fof</guid>
      <description>&lt;p&gt;Ever tried to do some sort of schema validation while building API(s) and you have to write a lot of &lt;code&gt;If else&lt;/code&gt; conditions/statements to ensure you throw error when the user inputs  wrong data? Yeah, it's stressful and trust me, you still won't cater for all scenarios. &lt;br&gt;
The good news is  joi has come to your rescue and it's here to bring you joy [pun intended].&lt;br&gt;
In this tutorial, I will be showing you how to validate with &lt;code&gt;joi&lt;/code&gt;. &lt;br&gt;
&lt;code&gt;joi&lt;/code&gt; helps define data easily without the need to worry about not throwing error; joi does the job for you by throwing error.&lt;/p&gt;

&lt;p&gt;[For this tutorial, I assumed you already know how to setup a server with &lt;code&gt;express.js&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Install all dependencies required for this task &lt;code&gt;npm install joi express&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial we'll be validating the following details;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;username&lt;/li&gt;
&lt;li&gt;Password&lt;/li&gt;
&lt;li&gt;firstname&lt;/li&gt;
&lt;li&gt;lastname&lt;/li&gt;
&lt;li&gt;email&lt;/li&gt;
&lt;li&gt;phonenumber&lt;/li&gt;
&lt;li&gt;date of birth [DOB]&lt;/li&gt;
&lt;li&gt;Sex&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get right into it 💻💻💻&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Joi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;joi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/register&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Define Schema&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Joi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Joi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;alphanum&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Joi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9&lt;/span&gt;&lt;span class="se"&gt;]{3,30}&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;confirm_password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Joi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Joi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;any.only&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password does not match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;firstname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Joi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Joi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Joi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;minDomainSegments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;phonenumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Joi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;([&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;])?(\d&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;dob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Joi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;01-01-2003&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;iso&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;date.format&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Date format is YYYY-MM-DD`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;date.max&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;`Age must be 18+`&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Joi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;transger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;others&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// Validate req.body against the defined schema&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;validation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Invalid request data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Registration successful&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;failed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Joi.object()&lt;/code&gt; instantiate a Joi schema object to work with. The schema require &lt;code&gt;Joi.object()&lt;/code&gt; to process validation and other Joi features.&lt;br&gt;
I will be explaining the schema constraints and if I have explained some constraints already I won't need to repeat e.g if I have explained &lt;code&gt;.string()&lt;/code&gt; I won't be repeating it again in order to keep the article short and simple.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The constraints for &lt;code&gt;username&lt;/code&gt; include:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.string()&lt;/code&gt; a string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;"s"&lt;/code&gt; is in lowercase, not uppercase i.e if you use &lt;code&gt;.String()&lt;/code&gt; joi will throw this error &lt;code&gt;Joi.String is not a function&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;min(6)&lt;/code&gt; - at least 6 characters long&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.max(30)&lt;/code&gt; - not more than 30 characters&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.alphanum()&lt;/code&gt; - contain alphanumeric characters e.g (olufemi78)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.uppercase()&lt;/code&gt; - This means when the user input  username, joi should convert  to uppercase (interesting yeah? 😉)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;required()&lt;/code&gt; - This means username is required, if user does not pass it, joi will throw error &lt;code&gt;"\"username\" is required"&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The constraints for &lt;code&gt;password&lt;/code&gt; include:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.regex('^[a-zA-Z0-9]{3,30}$')&lt;/code&gt; - This means, it must satisfy the custom regex pattern.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Here's the explanation of the regex pattern&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Asserts&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;zA&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Z0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Matches&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="nx"&gt;character&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;must&lt;/span&gt; &lt;span class="nx"&gt;between&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;

    &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;End&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use  &lt;a href="http://regex101.com/#pcre"&gt;regex101&lt;/a&gt;  to play with regex. The right pane explains it token by token.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The constraints for &lt;code&gt;confirm_password&lt;/code&gt; include:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.equal(Joi.ref('password'))&lt;/code&gt; - This means it reference &lt;code&gt;password&lt;/code&gt; and it must be equal to password.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;messages({ 'any.only': 'password does not match' })&lt;/code&gt; - If &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;confirm_password&lt;/code&gt; does not match, joi will throw this custom error &lt;code&gt;password does not match&lt;/code&gt; . &lt;code&gt;any.only&lt;/code&gt; is error type so whenever the error type is &lt;code&gt;any.only&lt;/code&gt; I prefer to send custom message and not the typical joi error message. Just make's the error message more descriptive to the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The constraints for &lt;code&gt;firstname&lt;/code&gt; and &lt;code&gt;lastname&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;username&lt;/code&gt; name is required while &lt;code&gt;lastname&lt;/code&gt; is not required&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The constraints for &lt;code&gt;email&lt;/code&gt; include:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.email({minDomainSegments: 2})&lt;/code&gt; - It must be a valid email string and must have two domain parts e.g. &lt;code&gt;user.com&lt;/code&gt; . One fascinating thing about email validation with joi is that you can decide the top-level domains (TLDs) you want. e.g; you want only &lt;code&gt;.com&lt;/code&gt; and &lt;code&gt;.net&lt;/code&gt; &lt;code&gt;.email({ minDomainSegments: 2, tlds: { allow: ['com', 'net'] } })&lt;/code&gt; This will only allow &lt;code&gt;.com&lt;/code&gt; and &lt;code&gt;.net&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The constraints for &lt;code&gt;phonenumber&lt;/code&gt; include:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It must be a string with digits in the format based on the regex pattern e.g &lt;code&gt;+248888888888&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The constraints for &lt;code&gt;dob&lt;/code&gt; include:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Joi.date().max('01-01-2003').iso()&lt;/code&gt; - it must be a valid date in ISO 8601 format and it cannot be after Jan 1, 2003. This is super useful if you want to ensure a certain age range can not register on your platform e.g a betting website allow only 18+.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;messages({'date.format':&lt;/code&gt; &lt;code&gt;Date format is YYYY-MM-DD&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'date.max':Age must be 18+})&lt;/code&gt;- This means if user enter invalid date format and joi throws error, rather sending back the not too fancy joi error message, send a custom message.
Custom messages breakdown:&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'date.format'&lt;/code&gt;: means the error type i.e if joi is throwing error type that is &lt;code&gt;'date.format'&lt;/code&gt;, then send this custom message &lt;code&gt;Date format is YYYY-MM-DD&lt;/code&gt; to the user. if error type is '&lt;code&gt;date.max':&lt;/code&gt; then send this custom message &lt;code&gt;Age must be 18+&lt;/code&gt; . If there's no custom message for this particular error type (&lt;code&gt;date.max&lt;/code&gt;), joi will throw this &lt;code&gt;'"dob" must be less than or equal to "2003-01-01T00:00:00.000Z"'&lt;/code&gt;. To aid user experience, I decided to make it easy by sending &lt;code&gt;"Age must be 18+"&lt;/code&gt; rather than joi error message. You can literally send any message you pleased. Since it's a custom message, you're fully in control of the message. That's really cool 👌&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The constraints for &lt;code&gt;sex&lt;/code&gt; include:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.valid('male', 'female','transger')&lt;/code&gt; - This means only 4 options are accepted i.e &lt;code&gt;male&lt;/code&gt;, &lt;code&gt;female&lt;/code&gt;, &lt;code&gt;transgender&lt;/code&gt; and &lt;code&gt;others&lt;/code&gt;.  If user enter any other option aside from the 4, joi will throw this error &lt;code&gt;"\"sex\" must be one of [male, female, transger, others]"&lt;/code&gt;. This come in handy for analytics. You can easily know the genders that register on your platform.
const validation = schema.validate(req.body);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This line of code takes in the &lt;code&gt;data&lt;/code&gt; from the body request and validates it against the &lt;code&gt;schema&lt;/code&gt; already defined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;validation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

          &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;422&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Invalid request data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What I did here is to destructure the joi response object after validation and use &lt;code&gt;map()&lt;/code&gt; to pick out just the error message and not the whole error object.&lt;/p&gt;

&lt;p&gt;Everything is set now. Lets enjoy the thrills and superpower of joi 🔥🔥🔥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rhUAsT_z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1610300851439_Screenshot%2B2021-01-10%2Bat%2B18.44.18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rhUAsT_z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1610300851439_Screenshot%2B2021-01-10%2Bat%2B18.44.18.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwuQ0xah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1610287972263_Screenshot%2B2021-01-10%2Bat%2B14.49.22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwuQ0xah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1610287972263_Screenshot%2B2021-01-10%2Bat%2B14.49.22.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6fcjGlJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1610287972278_Screenshot%2B2021-01-10%2Bat%2B14.49.41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6fcjGlJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1610287972278_Screenshot%2B2021-01-10%2Bat%2B14.49.41.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---RVof50C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1610287972286_Screenshot%2B2021-01-10%2Bat%2B14.59.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---RVof50C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1610287972286_Screenshot%2B2021-01-10%2Bat%2B14.59.52.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iLWhEpVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1610287972296_Screenshot%2B2021-01-10%2Bat%2B15.01.35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iLWhEpVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1610287972296_Screenshot%2B2021-01-10%2Bat%2B15.01.35.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dRSSPhtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1610287972308_Screenshot%2B2021-01-10%2Bat%2B15.02.24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dRSSPhtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1610287972308_Screenshot%2B2021-01-10%2Bat%2B15.02.24.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EXTRAS&lt;/strong&gt;:&lt;br&gt;
So far we've seen string, number, email etc validation. What about arrays, Objects, and array of objects? Yeah, I got you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#array"&gt;
  &lt;/a&gt;
  Array
&lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meta:Joi.array()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The above validates an array.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jNaayxNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456094873_Screenshot%2B2021-07-16%2Bat%2B17.54.16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jNaayxNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456094873_Screenshot%2B2021-07-16%2Bat%2B17.54.16.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3IJBrpL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456809071_Screenshot%2B2021-07-16%2Bat%2B17.52.54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3IJBrpL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456809071_Screenshot%2B2021-07-16%2Bat%2B17.52.54.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#object"&gt;
  &lt;/a&gt;
  Object
&lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meta:Joi.object()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The above validates an Object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--umcax_D7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456162558_Screenshot%2B2021-07-16%2Bat%2B17.55.15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--umcax_D7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456162558_Screenshot%2B2021-07-16%2Bat%2B17.55.15.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b43K3_zr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456168049_Screenshot%2B2021-07-16%2Bat%2B17.56.05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b43K3_zr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456168049_Screenshot%2B2021-07-16%2Bat%2B17.56.05.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#joialternatives"&gt;
  &lt;/a&gt;
  Joi.alternatives()
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Joi.alternatives()&lt;/code&gt; can be used to pass  many alternatives like array, object, string etc. For example, in a scenario where you're either expecting an array or object, especially when you depend on an external API and you can't be so sure if the response would be an array or an object.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meta:Joi.alternatives().try(Joi.object(), Joi.array())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ILtUrIvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456325713_Screenshot%2B2021-07-16%2Bat%2B17.52.54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ILtUrIvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456325713_Screenshot%2B2021-07-16%2Bat%2B17.52.54.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R8qxlVJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456417885_Screenshot%2B2021-07-16%2Bat%2B17.56.05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R8qxlVJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456417885_Screenshot%2B2021-07-16%2Bat%2B17.56.05.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, you can go step further to validate the items in the array or object.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Joi.array().items(Joi.string())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YLC8sJJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456457657_Screenshot%2B2021-07-16%2Bat%2B18.05.24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YLC8sJJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456457657_Screenshot%2B2021-07-16%2Bat%2B18.05.24.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JAQwd8zS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456482610_Screenshot%2B2021-07-16%2Bat%2B18.05.39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JAQwd8zS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456482610_Screenshot%2B2021-07-16%2Bat%2B18.05.39.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Joi.array().items(Joi.object())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VqQNAsWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456508612_Screenshot%2B2021-07-16%2Bat%2B18.09.16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VqQNAsWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456508612_Screenshot%2B2021-07-16%2Bat%2B18.09.16.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VzWSEz3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456757429_Screenshot%2B2021-07-16%2Bat%2B18.32.12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VzWSEz3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EB38424D386749E635CCDF8757FD937DB6738220A46C64FBDC64FF4DB41D7B53_1626456757429_Screenshot%2B2021-07-16%2Bat%2B18.32.12.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Joi is super cool and I would recommend it for server-side validation. &lt;/p&gt;

&lt;p&gt;Check Joi docs  &lt;a href="https://joi.dev/"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;See Project  &lt;a href="https://glitch.com/edit/#!/joi-validation"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Do you like this article? Hit me up on  &lt;a href="https://twitter.com/femioba_"&gt;twitter&lt;/a&gt;  or  &lt;a href="https://www.linkedin.com/in/olufemi-obafunmiso/"&gt;linkedin&lt;/a&gt; &lt;/p&gt;

</description>
      <category>node</category>
      <category>apis</category>
      <category>javascript</category>
      <category>express</category>
    </item>
    <item>
      <title>Crazy Laravel Stack (Fantastically Powerful)</title>
      <author>Clean Code Studio</author>
      <pubDate>Fri, 23 Jul 2021 14:12:15 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/fanatic-laravel-stack-fantastically-laravel-combo-stacked-with-knock-out-power-3dbf</link>
      <guid>https://dev.to/cleancodestudio/fanatic-laravel-stack-fantastically-laravel-combo-stacked-with-knock-out-power-3dbf</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Driven by a deeply personal vendetta against college debt - I've created, shared, spoken, written, recorded, published, posted, developed, built, and invested - invested time, energy, and resources into sharing knowledge.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nearing 500,000 global viewers, over 3000 subscribers, and with &lt;a href="https://youtube.com/c/cleancodestudio"&gt;125+ published Clean Code Studio screencasts&lt;/a&gt; -- I have invested the time and energy into Clean Code Studio and feel the time has finally come to do something...something that may quite possibly be - bat s*** crazy.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What's crazy you ask? Great question!&lt;/p&gt;

&lt;p&gt;So, let me break this down first. Here's a list of several of the contributions I've made via Clean Code Studio to improve the coding and educational resources available out there and further demolish this crazy notion that going to college (to quite literally deep dive into debt more times than not) is a flat out terrible idea. After the contributions to date, we'll dive into the crazy. &lt;/p&gt;

&lt;p&gt;Okay - so check it - here's a list of the coding and educational contributions made directly through me as Clean Code Studio, for Clean Code Studio, or because of Clean Code Studio.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://youtube.com/c/cleancodestudio"&gt;125+ Clean Code Studio YouTube screencasts&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;&lt;a href="https://npmjs.com/package/vuejs-form"&gt;10+ Developed and Published NPM Packages (Installed thousands of times Over)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/cleancodestudio"&gt;12+ dev.to blog posts published (With nearly 9,000+ readers)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/users/8541350/clean-code-studio"&gt;Top 25% rank in stack overflow questions answered&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;Spoke with 2nd Year UMKC Computer Science Majors (As a 23 Year old who had dropped out of college myself, I was impressed with the offer to come share the knowledge with computer science students at the University. The professor let me in on how he knew the degree wasn't that important for computer science any more and thought I'd have a solid take on personal branding beyond the degree since I had a solid gig without the piece of paper.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tiktok.com/@cleancodestudio?lang=en"&gt;Clean Code Studio TikTok Humor (#WhatProgrammersSay vs. #WhatProgrammersMean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;&lt;a href="https://packagist.org/packages/clean-code-studio/laravel-make-facades"&gt;Developed 5+ Packagist Packages (Installed by Devs thousands of times)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;There's reddit threads, Github repos, udemy courses, leetcode submissions/feedback, etc... &lt;/p&gt;

&lt;p&gt;Buutttt - &lt;em&gt;&lt;strong&gt;Here's the crazy part (And a sliiiggghtttly embarrassing admission)!!&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://cleancode.studio"&gt;Clean Code Studio&lt;/a&gt; - the website - source of the Clean Code Clean Life ~ Simplify brand - the center piece of our online presence....&lt;/p&gt;

&lt;p&gt;Yah, so it kinda uses Google sites right now - like the default google website builder, the one that is literally worse than any other website builder out there. &lt;/p&gt;

&lt;p&gt;Clean Code Studio, content wise, has some great content - but the website as it is in its current state is lacking.&lt;/p&gt;

&lt;p&gt;Thus, once we hit 3000 subscribers - I decided to adjust.&lt;/p&gt;

&lt;p&gt;I started building out the actual Clean Code Studio Website Application earlier this week (2 days ago to be precise). &lt;/p&gt;




&lt;p&gt;I'm a Laravel fan boy - thus I started building the application out using Laravel. &lt;/p&gt;




&lt;p&gt;&lt;strong&gt;_THAT's WHEN THINGS WENT SIDEWAYS (S&lt;/strong&gt;* BLEW UP INTO ALL TYPES OF CRAZY - CRAZY GOOD)!!_**&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. I started with Laravel&lt;/li&gt;
&lt;li&gt;2. Then I noticed Laravel Spark was re-created AND re-branded &lt;/li&gt;
&lt;li&gt;3. Laravel Spark (link way below) was now Laravel Spark Classic &lt;/li&gt;
&lt;li&gt;4. Laravel Spark (link way below) is now Laravel Spark Next&lt;/li&gt;
&lt;li&gt;5. Laravel Spark Next Doesn't Care Which Front-end Preset You Use (Laravel Spark Classic was biased towards vue.js)&lt;/li&gt;
&lt;li&gt;6. Laravel Spark Next needs a front-end preset - it just doesn't care about which one it is. I pulled in &lt;strong&gt;Laravel Jet Stream&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;7. Using Laravel Jet Stream, I set up the auth, created the teams, set up team &amp;amp; user actions/emails/notifications, added the ability for users/teams to add profile picture updates, and configured the password to be re-settable, and for two factor authentication to be optional, etc...&lt;/li&gt;
&lt;li&gt;8. Laravel Jet Stream Configures All Of This, There was very little customization on my part (if any).&lt;/li&gt;
&lt;li&gt;9 Laravel Jet Stream Can Also Use Inertia.js (AKA Vue.js SPA front-end instead of using Live Wire with Laravel Jet Stream)&lt;/li&gt;
&lt;li&gt;10. Laravel Spark Next takes care of billing. I chose the new laravel-spark-paddle (Credit card or paypal payment optioni - super easy set up)&lt;/li&gt;
&lt;li&gt;11. At this point, I remembered how fun Laravel Nova was to use as a user (I had used Laravel nova on a few past projects - it's amazing).&lt;/li&gt;
&lt;li&gt;12. Laravel Nova is technically supposed to be used as an admin panel.&lt;/li&gt;
&lt;li&gt;13. With Laravel JetStream we have the authentication and the profile/team scaffolds. With Laravel Spark we have the Billing Scaffolds and Integration. And now - after bringing in Laravel Nova - we have an admin panel allowing us to easily connect, create, relate, destroy, search, sort, and access all of the model data from both Laravel JetStream and Laravel Spark directly from an admin panel via Laravel Nova.&lt;/li&gt;
&lt;li&gt;14. Then, there's Laravel Sanctum - Laravel JetStream let's you use Laravel Sanctum. Laravel Sanctum lets you create a publicly facing API that provides tokens with abilities for users to interact with your API. &lt;/li&gt;
&lt;li&gt;15. Laravel Sanctum allows you to create a public, user accessible, API that creates tokens that authorize api access for

&lt;ul&gt;
&lt;li&gt;API Token Authentication&lt;/li&gt;
&lt;li&gt;SPA Authentication&lt;/li&gt;
&lt;li&gt;Mobile Application Authentication&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;16. And allows testing of APIs using the &lt;code&gt;Sanctum::actingAs&lt;/code&gt; method that allows you to authenticate a user and specify which abilities should be granted to their token.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All together, we have &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://laravel.com"&gt;Laravel&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Laravel - Framework for web artisans&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://laravel-mix.com"&gt;Laravel Mix&lt;/a&gt; 

&lt;ul&gt;
&lt;li&gt;Laravel Mix - Webpack Asset Compilation/Webpack Wrapper&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://laravel.com/docs/8.x/sail"&gt;Laravel Sail&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Laravel Sail - Local Docker Environment for Laravel&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://spark.laravel.com"&gt;Laravel Spark&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Laravel Spark - SaaS App Scaffolding &lt;/li&gt;
&lt;li&gt;Laravel Spark - Integrates Billing Features Into Laravel 
Application&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://laravel.com/docs/8.x/cashier-paddle"&gt;Laravel Cashier Paddle&lt;/a&gt; 

&lt;ul&gt;
&lt;li&gt;Laravel Cashier Paddle provides an expressive, fluent interface to Paddle's subscription billing services. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nova.laravel.com"&gt;Laravel Nova&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Laravel Nova - Admin Panel for Laravel (Eloquent Models)&lt;/li&gt;
&lt;li&gt; &lt;a href="https://laravel.com/docs/8.x/scout#introduction"&gt;Laravel Scout&lt;/a&gt; 

&lt;ul&gt;
&lt;li&gt;Laravel Scout - Optional driver for adding full-text search to your eloquent models&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jetstream.laravel.com/2.x/introduction.html"&gt;Laravel Jet Stream&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Jetstream - Provides the implementation for your application's login, registration, email verification, two-factor authentication, session management, API via Laravel Sanctum, and optional team management features.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://laravel.com/docs/8.x/fortify"&gt;Laravel Fortify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Laravel Fortify is a frontend agnostic authentication backend implementation for Laravel&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://laravel.com/docs/8.x/sanctum#introduction"&gt;Laravel Sanctum&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Laravel Sanctum provides a featherweight authentication system for SPAs (single page applications), mobile applications, and simple, token based APIs. Sanctum allows each user of your application to generate multiple API tokens for their account. These tokens may be granted abilities / scopes which specify which actions the tokens are allowed to perform.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://forge.laravel.com"&gt;Laravel Forge&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Laravel Forge - Server management and site deployment service (Deploying app to stage - then to prod)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This Laravel stack listed above is what I'm currently working with to create &lt;a href="https://dev.toClean%20Code%20Studio"&gt;https://cleancode.studio&lt;/a&gt; - so far, I'm extremely impressed. With Laravel Spark Next being released and non being biased towards any front-end - This tech stack of more than half of Laravel's core eco system integrates all but seamlessly. &lt;/p&gt;

&lt;p&gt;Below is the actual README.md I pulled from my Clean Code Studio private repo. Feel free to check it out!&lt;/p&gt;

&lt;p&gt;I also highly recommend &lt;a href="https://www.npmjs.com/package/doctoc"&gt;doctoc&lt;/a&gt; from NPM if you're starting to build out a long read me. It automatically creates a table of contents for any markdown file based on headers and sub-header relationships :) &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Install Doctoc&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;doctoc&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Open &lt;code&gt;package.json&lt;/code&gt; and add &lt;code&gt;"index-readme": "doctoc README.md" to your&lt;/code&gt;scripts` object&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
// package.json&lt;/p&gt;

&lt;p&gt;"private": true,&lt;br&gt;
"scripts": {&lt;br&gt;
        "dev": "npm run development",&lt;br&gt;
        "development": "mix",&lt;br&gt;
        "watch": "mix watch",&lt;br&gt;
        "watch-poll": "mix watch -- --watch-options-poll=1000",&lt;br&gt;
        "hot": "mix watch --hot",&lt;br&gt;
        "prod": "npm run production",&lt;br&gt;
        "production": "mix --production",&lt;br&gt;
        "index-readme": "doctoc README.md" &lt;br&gt;
    },&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Whenever you want to generate a table of content in your README.md - simply run &lt;code&gt;npm run index-readme&lt;/code&gt;&lt;/strong&gt; &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#my-actual-clean-code-studio-readmemd-pulled-from-my-personal-project-this-morning"&gt;
  &lt;/a&gt;
  My Actual Clean Code Studio README.md (Pulled from my personal project this morning)
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#clean-code-studio"&gt;Clean Code Studio&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#setup-local-dev-environment"&gt;Setup Local Dev Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#github"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#composer"&gt;Composer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#env-environment-variables"&gt;.env (Environment Variables)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#database"&gt;Database&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#env-sqlite-local-settings-for-database"&gt;.env (SQLite local) Settings for Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrate-database-tables-and-seed-dummy-data"&gt;Migrate database tables and seed dummy data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#compile-front-end-assets"&gt;Compile Front-end Assets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#boot-development-server"&gt;Boot Development Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tech-stack"&gt;Tech Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#php-80"&gt;PHP 8.0+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#laravel-80"&gt;Laravel 8.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#vue-js-305"&gt;Vue JS 3.05&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#admin-panel"&gt;Admin panel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uses-laravel-nova-v3270"&gt;(Uses Laravel Nova v3.27.0)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#billing"&gt;Billing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uses-laravel-spark-next"&gt;(Uses Laravel Spark Next)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uses-paddle-payment-gateway-via-spark-next"&gt;(Uses Paddle Payment Gateway Via Spark Next)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#authentication"&gt;Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uses-laravel-jetstream"&gt;(Uses Laravel Jetstream)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#css"&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uses-tailwind-css"&gt;(Uses Tailwind CSS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-tailwind-within-laravel-jetstream"&gt;(Using Tailwind within Laravel Jetstream)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#js"&gt;JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uses-vuejs-front-end"&gt;(Uses Vue.js Front-end)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uses-inertiajs-for-development"&gt;(Uses Inertia.js for development)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#webpack-jscssasset-bundler"&gt;Webpack (JS/CSS/ASSET Bundler)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uses-laravel-mix-wrapper-to-simplify-webpack"&gt;(Uses Laravel Mix Wrapper To Simplify Webpack)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#app-apis"&gt;App APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#public-user-accessable-apis"&gt;Public User Accessable APIs&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#public-apis-authenticate-user-tokens-via-laravel-sanctum"&gt;(Public API's Authenticate User Tokens Via Laravel Sanctum)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#api-token-authentication"&gt;API Token Authentication&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#api-tokens---issuing"&gt;API Tokens - Issuing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#api-tokens---abilities"&gt;API Tokens - Abilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#api-tokens---protecting-routes"&gt;API Tokens - Protecting Routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#api-tokens---revoking-tokens"&gt;API Tokens - Revoking Tokens&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#spa-token-authentication"&gt;SPA Token Authentication&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#spa-auth---configuration"&gt;SPA Auth - Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#spa-auth---authenticating"&gt;SPA Auth - Authenticating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#spa-auth---authenticating---csrf-protection"&gt;SPA Auth - Authenticating - CSRF Protection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#spa-auth---authenticating---logging-in"&gt;SPA Auth - Authenticating - Logging In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#spa-auth---protecting-routes"&gt;SPA Auth - Protecting Routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#spa-auth---authorizing-private-broadcast-channels"&gt;SPA Auth - Authorizing Private Broadcast Channels&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#private-broadcast-channel-authentication"&gt;Private Broadcast Channel Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing-user-accessible-apis-laravel-sanctum-testing"&gt;Testing User Accessible APIs (Laravel Sanctum Testing)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#internal-clean-code-studio-apis"&gt;Internal Clean Code Studio APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#brand"&gt;Brand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#clean-code-studio-branding"&gt;Clean Code Studio Branding&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#canva-create-visual-designs"&gt;Canva (Create Visual Designs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#icons-storedsaved-via-canva-account"&gt;Icons (Stored/saved via canva account)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#apply-brand-to"&gt;Apply Brand To...&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#adding-brand-to-admin-panel"&gt;Adding Brand To Admin Panel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-brand-to-billing-sections"&gt;Adding Brand To Billing Sections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-brand-to-notification-email-template"&gt;Adding Brand To Notification Email Template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#clean-code-studio-online-presence"&gt;Clean Code Studio Online Presence&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#website-httpscleancodestudio"&gt;Website: https://cleancode.studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#youtube-httpsyoutubecomccleancodestudio"&gt;Youtube: https://youtube.com/c/cleancodestudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#leetcode-httpsleetcodecomzhorton34"&gt;LeetCode: https://leetcode.com/zhorton34/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#github-httpsgithubcomzhorton34"&gt;Github: https://github.com/zhorton34&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#devto-httpsdevtocleancodestudio"&gt;DevTo: https://dev.to/cleancode.studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#twitter-httpstwittercomcleancodestudio"&gt;Twitter: https://twitter.com/cleancodestudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reddit--httpsredditcomusercleancodestudio"&gt;Reddit:  https://reddit.com/user/cleancodestudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tiktok-httpswwwtiktokcomcleancodestudio"&gt;TikTok: https://www.tiktok.com/@cleancodestudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#instagram-httpswwwinstagramcomcleancodestudio"&gt;Instagram: https://www.instagram.com/cleancodestudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#facebook-httpswwwfacebookcomcleancodestudio"&gt;Facebook: https://www.facebook.com/CleanCodeStudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#packagist-httpspackagistorgpackagesclean-code-studio"&gt;Packagist: https://packagist.org/packages/clean-code-studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#linkedin-httpswwwlinkedincomcompanycleancodestudio"&gt;LinkedIn: https://www.linkedin.com/company/cleancodestudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#npm-node-package-manager-httpsnpmjscomzhorton999"&gt;Npm (Node Package Manager): https://npmjs.com/~zhorton999&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stack-overflow-httpsstackoverflowcomusers8541350clean-code-studio"&gt;Stack Overflow: https://stackoverflow.com/users/8541350/clean-code-studio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#deployment"&gt;Deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#laravel-forge-server-management--site-deployment"&gt;Laravel Forge (Server management &amp;amp; site deployment)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#staging-site"&gt;Staging Site&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#stage-database"&gt;Stage Database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#production-site"&gt;Production Site&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#production-database"&gt;Production Database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#clean-code-studio--content-resources"&gt;Clean Code Studio ~ Content Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing"&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#billing-tests-laravel-spark"&gt;Billing Tests (Laravel Spark)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#public-facing-api-tests-laravel-sanctum"&gt;Public Facing API Tests (Laravel Sanctum)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#postsvideosscreencasts--notes-clean-code-studio-content"&gt;Posts/Videos/Screencasts &amp;amp; Notes (Clean Code Studio Content)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#faang-notes-google-drive"&gt;FAANG Notes (Google Drive)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resume-notes-google-drive"&gt;RESUME Notes (Google Drive)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dev-to-written-blog-posts"&gt;DEV To (Written Blog Posts)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#youtube-videos-screencasts"&gt;YouTube Videos (Screencasts)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#youtube-playlists-screencasts"&gt;YouTube Playlists (Screencasts)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#youtube-community-comments--posts"&gt;Youtube Community (Comments &amp;amp; Posts)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#youtube-about-with-links-to-socials"&gt;YouTube About (With Links To Socials)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#apis-to-retrieve-created-content-api-retrievable-clean-code-studio-content"&gt;APIs to Retrieve Created Content (API Retrievable Clean Code Studio Content)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#dev-to-get-blogs-api"&gt;Dev To (Get Blogs API)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#youtube-get-screencasts-api"&gt;Youtube (Get Screencasts API)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#google-drive-api"&gt;Google Drive API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#terminalconsolecommand-line--commands"&gt;Terminal/Console/Command Line  Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#php-artisan-console-commands"&gt;&lt;code&gt;php artisan&lt;/code&gt; Console Commands&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#php-artisan-serve-boot-local-server"&gt;&lt;code&gt;php artisan serve&lt;/code&gt; (boot local server)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#php-artisan-routelist-see-all-routes"&gt;&lt;code&gt;php artisan route:list&lt;/code&gt; (see all routes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#php-artisan-migratefresh---seed-migrate-tables-to-database-and-run-seeders-to-populate-database-with-dummy-data"&gt;&lt;code&gt;php artisan migrate:fresh --seed&lt;/code&gt; (migrate tables to database and run seeders to populate database with dummy data)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#npm-run-console-commands"&gt;&lt;code&gt;npm run&lt;/code&gt; Console Commands&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#npm-run-dev-compile-assets-once-for-local-dev"&gt;&lt;code&gt;npm run dev&lt;/code&gt; (compile assets once for local dev)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#npm-run-watch-compile-assets-and-watch-for-changes-to-re-compile"&gt;&lt;code&gt;npm run watch&lt;/code&gt; (compile assets and watch for changes to re-compile)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#npm-run-production-build-application-for-production-deployment"&gt;&lt;code&gt;npm run production&lt;/code&gt; (build application for production deployment)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#npm-run-index-readme-adds-table-of-contents-to-read-me"&gt;&lt;code&gt;npm run index-readme&lt;/code&gt; (Adds table of contents to read me)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#clean-code-studio"&gt;
  &lt;/a&gt;
  Clean Code Studio
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#setup-local-dev-environment"&gt;
  &lt;/a&gt;
  Setup Local Dev Environment
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  GitHub
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sh&lt;br&gt;
git clone https://github.com/zhorton34/cleancodestudio &amp;amp;&amp;amp; cd cleancodestudio&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#composer"&gt;
  &lt;/a&gt;
  Composer
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;php&lt;br&gt;
composer install&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#env-environment-variables"&gt;
  &lt;/a&gt;
  .env (Environment Variables)
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sh&lt;br&gt;
mv .env.local .env&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#env-sqlite-local-settings-for-database"&gt;
  &lt;/a&gt;
  .env (SQLite local) Settings for Database
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`sh&lt;br&gt;
DB_CONNECTION=sqlite&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dbhost127001"&gt;
  &lt;/a&gt;
  DB_HOST=127.0.0.1
&lt;/h1&gt;

&lt;p&gt;DB_PORT=3306&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dbdatabasedatabase"&gt;
  &lt;/a&gt;
  DB_DATABASE=database
&lt;/h1&gt;

&lt;p&gt;DB_USERNAME=root&lt;br&gt;
DB_PASSWORD=&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#migrate-database-tables-and-seed-dummy-data"&gt;
  &lt;/a&gt;
  Migrate database tables and seed dummy data
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;php&lt;br&gt;
php artisan migrate:fresh --seed&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compile-frontend-assets"&gt;
  &lt;/a&gt;
  Compile Front-end Assets
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;js&lt;br&gt;
npm install &amp;amp;&amp;amp; npm watch&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boot-development-server"&gt;
  &lt;/a&gt;
  Boot Development Server
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;php&lt;br&gt;
php artisan serve&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#php-80"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.php.net/ChangeLog-8.php"&gt;PHP 8.0+&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#laravel-80"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com"&gt;Laravel 8.0&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#vue-js-305"&gt;
  &lt;/a&gt;
  &lt;a href="https://v3.vuejs.org/"&gt;Vue JS 3.05&lt;/a&gt;
&lt;/h3&gt;




&lt;h4&gt;
  &lt;a href="#admin-panel"&gt;
  &lt;/a&gt;
  &lt;a href="https://cleancode.studio/admin"&gt;Admin panel&lt;/a&gt;
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#uses-laravel-nova-v3270"&gt;
  &lt;/a&gt;
  &lt;a href="https://nova.laravel.com"&gt;(Uses Laravel Nova v3.27.0)&lt;/a&gt;
&lt;/h5&gt;




&lt;h4&gt;
  &lt;a href="#billing"&gt;
  &lt;/a&gt;
  &lt;a href="https://cleancode.studio/billing"&gt;Billing&lt;/a&gt;
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#uses-laravel-spark-next"&gt;
  &lt;/a&gt;
  &lt;a href="https://spark.laravel.com"&gt;(Uses Laravel Spark Next)&lt;/a&gt;
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#uses-paddle-payment-gateway-via-spark-next"&gt;
  &lt;/a&gt;
  &lt;a href="https://paddle.com/"&gt;(Uses Paddle Payment Gateway Via Spark Next)&lt;/a&gt;
&lt;/h5&gt;




&lt;h4&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  &lt;a href="https://cleancode.studio/login"&gt;Authentication&lt;/a&gt;
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#uses-laravel-jetstream"&gt;
  &lt;/a&gt;
  &lt;a href="https://jetstream.laravel.com/2.x/concept-overview.html#laravel-fortify"&gt;(Uses Laravel Jetstream)&lt;/a&gt;
&lt;/h5&gt;




&lt;h4&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/zhorton34/cleancodestudio/tree/master/resources/css"&gt;CSS&lt;/a&gt;
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#uses-tailwind-css"&gt;
  &lt;/a&gt;
  &lt;a href="https://tailwindcss.com/"&gt;(Uses Tailwind CSS)&lt;/a&gt;
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#using-tailwind-within-laravel-jetstream"&gt;
  &lt;/a&gt;
  &lt;a href="https://jetstream.laravel.com/2.x/concept-overview.html#tailwind"&gt;(Using Tailwind within Laravel Jetstream)&lt;/a&gt;
&lt;/h5&gt;




&lt;h4&gt;
  &lt;a href="#js"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/zhorton34/cleancodestudio/tree/master/resources/js"&gt;JS&lt;/a&gt;
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#uses-vuejs-frontend"&gt;
  &lt;/a&gt;
  &lt;a href="https://vuejs.org"&gt;(Uses Vue.js Front-end)&lt;/a&gt;
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#uses-inertiajs-for-development"&gt;
  &lt;/a&gt;
  &lt;a href="https://inertiajs.org"&gt;(Uses Inertia.js for development)&lt;/a&gt;
&lt;/h5&gt;




&lt;h4&gt;
  &lt;a href="#webpack-jscssasset-bundler"&gt;
  &lt;/a&gt;
  &lt;a href="%5Bhttps://webpack%5D(https://webpack.js.org/)"&gt;Webpack (JS/CSS/ASSET Bundler)&lt;/a&gt;
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#uses-laravel-mix-wrapper-to-simplify-webpack"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel-mix.com"&gt;(Uses Laravel Mix Wrapper To Simplify Webpack)&lt;/a&gt;
&lt;/h5&gt;




&lt;h2&gt;
  &lt;a href="#app-apis"&gt;
  &lt;/a&gt;
  App APIs
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#public-user-accessable-apis"&gt;
  &lt;/a&gt;
  &lt;a href="https://jetstream.laravel.com/2.x/features/api.html"&gt;Public User Accessable APIs&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#public-apis-authenticate-user-tokens-via-laravel-sanctum"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum"&gt;(Public API's Authenticate User Tokens Via Laravel Sanctum)&lt;/a&gt;
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#api-token-authentication"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum#api-token-authentication"&gt;API Token Authentication&lt;/a&gt;
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#api-tokens-issuing"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum#issuing-api-tokens"&gt;API Tokens - Issuing&lt;/a&gt;
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#api-tokens-abilities"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum#token-abilities"&gt;API Tokens - Abilities&lt;/a&gt;
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#api-tokens-protecting-routes"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum#protecting-routes"&gt;API Tokens - Protecting Routes&lt;/a&gt;
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#api-tokens-revoking-tokens"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum#revoking-tokens"&gt;API Tokens - Revoking Tokens&lt;/a&gt;
&lt;/h6&gt;

&lt;h5&gt;
  &lt;a href="#spa-token-authentication"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum#spa-authentication"&gt;SPA Token Authentication&lt;/a&gt;
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#spa-auth-configuration"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum#spa-configuration"&gt;SPA Auth - Configuration&lt;/a&gt;
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#spa-auth-authenticating"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum#spa-authenticating"&gt;SPA Auth - Authenticating&lt;/a&gt;
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#spa-auth-authenticating-csrf-protection"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum#csrf-protection"&gt;SPA Auth - Authenticating - CSRF Protection&lt;/a&gt;
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#spa-auth-authenticating-logging-in"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum#csrf-protection"&gt;SPA Auth - Authenticating - Logging In&lt;/a&gt;
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#spa-auth-protecting-routes"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum#protecting-spa-routes"&gt;SPA Auth - Protecting Routes&lt;/a&gt;
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#spa-auth-authorizing-private-broadcast-channels"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum#authorizing-private-broadcast-channels"&gt;SPA Auth - Authorizing Private Broadcast Channels&lt;/a&gt;
&lt;/h6&gt;

&lt;h5&gt;
  &lt;a href="#private-broadcast-channel-authentication"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum#authorizing-private-broadcast-channels"&gt;Private Broadcast Channel Authentication&lt;/a&gt;
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#testing-user-accessible-apis-laravel-sanctum-testing"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum#testing"&gt;Testing User Accessible APIs (Laravel Sanctum Testing)&lt;/a&gt;
&lt;/h5&gt;




&lt;h3&gt;
  &lt;a href="#internal-clean-code-studio-apis"&gt;
  &lt;/a&gt;
  Internal Clean Code Studio APIs
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#brand"&gt;
  &lt;/a&gt;
  Brand
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#clean-code-studio-branding"&gt;
  &lt;/a&gt;
  &lt;a href="(https://drive.google.com/drive/folders/1GG6K-uWiYQoLM5HjUI38adj9BP8yj8LC?usp=sharing)"&gt;Clean Code Studio Branding&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#canva-create-visual-designs"&gt;
  &lt;/a&gt;
  &lt;a href="https://canva.com"&gt;Canva (Create Visual Designs)&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#icons-storedsaved-via-canva-account"&gt;
  &lt;/a&gt;
  &lt;a href="https://canva.com"&gt;Icons (Stored/saved via canva account)&lt;/a&gt;
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#apply-brand-to"&gt;
  &lt;/a&gt;
  Apply Brand To...
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#adding-brand-to-admin-panel"&gt;
  &lt;/a&gt;
  &lt;a href="https://nova.laravel.com/docs/3.0/customization/themes.html#overview"&gt;Adding Brand To Admin Panel&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#adding-brand-to-billing-sections"&gt;
  &lt;/a&gt;
  &lt;a href="https://spark.laravel.com/docs/1.x/spark-stripe/customization.html#branding"&gt;Adding Brand To Billing Sections&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#adding-brand-to-notification-email-template"&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/@christianjombo/customizing-laravels-default-notification-email-template-adding-a-logo-and-changing-ff6f107dd640"&gt;Adding Brand To Notification Email Template&lt;/a&gt;
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#clean-code-studio-online-presence"&gt;
  &lt;/a&gt;
  &lt;a href="https://youtube.com/c/cleancodestudio/about"&gt;Clean Code Studio Online Presence&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#website-httpscleancodestudio"&gt;
  &lt;/a&gt;
  Website: &lt;a href="https://cleancode.studio"&gt;https://cleancode.studio&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#youtube-httpsyoutubecomccleancodestudio"&gt;
  &lt;/a&gt;
  Youtube: &lt;a href="https://youtube.com/c/cleancodestudio"&gt;https://youtube.com/c/cleancodestudio&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#leetcode-httpsleetcodecomzhorton34"&gt;
  &lt;/a&gt;
  LeetCode: &lt;a href="https://leetcode.com/zhorton34/"&gt;https://leetcode.com/zhorton34/&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#github-httpsgithubcomzhorton34"&gt;
  &lt;/a&gt;
  Github: &lt;a href="https://github.com/zhorton34"&gt;https://github.com/zhorton34&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#devto-httpsdevtocleancodestudio"&gt;
  &lt;/a&gt;
  DevTo: &lt;a href="https://dev.to/cleancode.studio"&gt;https://dev.to/cleancode.studio&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#twitter-httpstwittercomcleancodestudio"&gt;
  &lt;/a&gt;
  Twitter: &lt;a href="https://twitter.com/cleancodestudio"&gt;https://twitter.com/cleancodestudio&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#reddit-httpsredditcomusercleancodestudio"&gt;
  &lt;/a&gt;
  Reddit:  &lt;a href="https://reddit.com/user/cleancodestudio"&gt;https://reddit.com/user/cleancodestudio&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#tiktok-httpswwwtiktokcomcleancodestudio"&gt;
  &lt;/a&gt;
  TikTok: &lt;a href="https://www.tiktok.com/@cleancodestudio"&gt;https://www.tiktok.com/@cleancodestudio&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#instagram-httpswwwinstagramcomcleancodestudio"&gt;
  &lt;/a&gt;
  Instagram: &lt;a href="https://www.instagram.com/cleancodestudio"&gt;https://www.instagram.com/cleancodestudio&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#facebook-httpswwwfacebookcomcleancodestudio"&gt;
  &lt;/a&gt;
  Facebook: &lt;a href="https://www.facebook.com/CleanCodeStudio"&gt;https://www.facebook.com/CleanCodeStudio&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#packagist-httpspackagistorgpackagescleancodestudio"&gt;
  &lt;/a&gt;
  Packagist: &lt;a href="https://packagist.org/packages/clean-code-studio"&gt;https://packagist.org/packages/clean-code-studio&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#linkedin-httpswwwlinkedincomcompanycleancodestudio"&gt;
  &lt;/a&gt;
  LinkedIn: &lt;a href="https://www.linkedin.com/company/cleancodestudio"&gt;https://www.linkedin.com/company/cleancodestudio&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#npm-node-package-manager-httpsnpmjscomzhorton999"&gt;
  &lt;/a&gt;
  Npm (Node Package Manager): &lt;a href="https://npmjs.com/%7Ezhorton999"&gt;https://npmjs.com/~zhorton999&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#stack-overflow-httpsstackoverflowcomusers8541350cleancodestudio"&gt;
  &lt;/a&gt;
  Stack Overflow: &lt;a href="https://stackoverflow.com/users/8541350/clean-code-studio"&gt;https://stackoverflow.com/users/8541350/clean-code-studio&lt;/a&gt;
&lt;/h4&gt;




&lt;h2&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#laravel-forge-server-management-amp-site-deployment"&gt;
  &lt;/a&gt;
  &lt;a href="https://forge.laravel.com"&gt;Laravel Forge (Server management &amp;amp; site deployment)&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#staging-site"&gt;
  &lt;/a&gt;
  &lt;a href="https://stage.cleancode.studio"&gt;Staging Site&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#stage-database"&gt;
  &lt;/a&gt;
  Stage Database
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;User: stage&lt;/li&gt;
&lt;li&gt;Database: stage&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#production-site"&gt;
  &lt;/a&gt;
  &lt;a href="https://cleancode.studio"&gt;Production Site&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#production-database"&gt;
  &lt;/a&gt;
  Production Database
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;User: forge&lt;/li&gt;
&lt;li&gt;Database: forge&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#clean-code-studio-content-resources"&gt;
  &lt;/a&gt;
  Clean Code Studio ~ Content Resources
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#billing-tests-laravel-spark"&gt;
  &lt;/a&gt;
  &lt;a href="https://spark.laravel.com/docs/1.x/spark-stripe/testing.html"&gt;Billing Tests (Laravel Spark)&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#public-facing-api-tests-laravel-sanctum"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/sanctum#authorizing-private-broadcast-channels"&gt;Public Facing API Tests (Laravel Sanctum)&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#postsvideosscreencasts-amp-notes-clean-code-studio-content"&gt;
  &lt;/a&gt;
  Posts/Videos/Screencasts &amp;amp; Notes (Clean Code Studio Content)
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#faang-notes-google-drive"&gt;
  &lt;/a&gt;
  &lt;a href="https://drive.google.com/drive/folders/1ZBFsNxBXTw6Sjk3KSY5Te9gc50lphxji?usp=sharing"&gt;FAANG Notes (Google Drive)&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#resume-notes-google-drive"&gt;
  &lt;/a&gt;
  &lt;a href="https://drive.google.com/drive/folders/1ES8gDexI4OyIUdK6q8xowtvYSGP2oRgk?usp=sharing"&gt;RESUME Notes (Google Drive)&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#dev-to-written-blog-posts"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/cleancodestudio"&gt;DEV To (Written Blog Posts)&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#youtube-videos-screencasts"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/c/CleanCodeStudio/videos"&gt;YouTube Videos (Screencasts)&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#youtube-playlists-screencasts"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/c/CleanCodeStudio/playlists"&gt;YouTube Playlists (Screencasts)&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#youtube-community-comments-amp-posts"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/c/CleanCodeStudio/community"&gt;Youtube Community (Comments &amp;amp; Posts)&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#youtube-about-with-links-to-socials"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/c/CleanCodeStudio/about"&gt;YouTube About (With Links To Socials)&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#apis-to-retrieve-created-content-api-retrievable-clean-code-studio-content"&gt;
  &lt;/a&gt;
  APIs to Retrieve Created Content (API Retrievable Clean Code Studio Content)
&lt;/h3&gt;




&lt;h4&gt;
  &lt;a href="#dev-to-get-blogs-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.forem.com/api/"&gt;Dev To (Get Blogs API)&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#youtube-get-screencasts-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://developers.google.com/youtube/v3"&gt;Youtube (Get Screencasts API)&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#google-drive-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://developers.google.com/drive"&gt;Google Drive API&lt;/a&gt;
&lt;/h4&gt;




&lt;h2&gt;
  &lt;a href="#terminalconsolecommand-line-commands"&gt;
  &lt;/a&gt;
  Terminal/Console/Command Line  Commands
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#-endraw-php-artisan-raw-console-commands"&gt;
  &lt;/a&gt;
  &lt;code&gt;php artisan&lt;/code&gt; Console Commands
&lt;/h3&gt;




&lt;h4&gt;
  &lt;a href="#-endraw-php-artisan-serve-raw-boot-local-server"&gt;
  &lt;/a&gt;
  &lt;code&gt;php artisan serve&lt;/code&gt; (boot local server)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-endraw-php-artisan-routelist-raw-see-all-routes"&gt;
  &lt;/a&gt;
  &lt;code&gt;php artisan route:list&lt;/code&gt; (see all routes)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-endraw-php-artisan-migratefresh-seed-raw-migrate-tables-to-database-and-run-seeders-to-populate-database-with-dummy-data"&gt;
  &lt;/a&gt;
  &lt;code&gt;php artisan migrate:fresh --seed&lt;/code&gt; (migrate tables to database and run seeders to populate database with dummy data)
&lt;/h4&gt;




&lt;h3&gt;
  &lt;a href="#-endraw-npm-run-raw-console-commands"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm run&lt;/code&gt; Console Commands
&lt;/h3&gt;




&lt;h4&gt;
  &lt;a href="#-endraw-npm-run-dev-raw-compile-assets-once-for-local-dev"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm run dev&lt;/code&gt; (compile assets once for local dev)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-endraw-npm-run-watch-raw-compile-assets-and-watch-for-changes-to-recompile"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm run watch&lt;/code&gt; (compile assets and watch for changes to re-compile)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-endraw-npm-run-production-raw-build-application-for-production-deployment"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm run production&lt;/code&gt; (build application for production deployment)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-endraw-npm-run-indexreadme-adds-table-of-contents-to-read-me"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm run index-readme&lt;/code&gt; (Adds table of contents to read me)
&lt;/h4&gt;

</description>
      <category>laravel</category>
      <category>javascript</category>
      <category>npm</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Implementing Merge Sort in Rust</title>
      <author>felixfaisal</author>
      <pubDate>Fri, 23 Jul 2021 13:57:49 +0000</pubDate>
      <link>https://dev.to/felixfaisal/implementing-merge-sort-in-rust-4ko8</link>
      <guid>https://dev.to/felixfaisal/implementing-merge-sort-in-rust-4ko8</guid>
      <description>&lt;p&gt;Merge sort is arguably the most popular &lt;strong&gt;divide and conquer&lt;/strong&gt; algorithm, It is one of the first algorithms any software engineer learns while learning algorithms and also while preparing for interviews. Let's implement merge sort in Rust &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#divide-and-conquer"&gt;
  &lt;/a&gt;
  Divide and Conquer
&lt;/h2&gt;

&lt;p&gt;Divide and Conquer is an algorithm design paradigm where we break down the problem statement into two or more parts until it can be solved directly. &lt;/p&gt;

&lt;p&gt;Here we want to sort an array(or vector) in asceding order so we first break down the problem using recursion and then solve the problem. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#merge-sort-algorithm"&gt;
  &lt;/a&gt;
  Merge Sort Algorithm
&lt;/h2&gt;

&lt;p&gt;Here's the psuedocode for merge sort algorithm&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Step 1: Divide the array into two parts 
Step 2: Sort one half of the array 
Step 3: Sort second half of the array 
Step 4: Merge the two halfs
Step 5: Perform these operations recursively
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's visualize this psuedocode using a diagram&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9sMboe5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5km9h1x4d928g9laghx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9sMboe5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5km9h1x4d928g9laghx.png" alt="Diagram"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#rust-code"&gt;
  &lt;/a&gt;
  Rust code
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;merge_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;merge_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;merge_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;arr&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here &lt;code&gt;right - 1 &amp;gt; left&lt;/code&gt; is the terminating condition meaning that the array cannot be divided anymore. We calculate the midpoint of the array and then divide them further recursively after which we merge the arrays by calling &lt;code&gt;merge(arr, left, mid, right)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;L1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;R1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;L1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;R1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="cm"&gt;/* Merge the temp arrays back into arr[l..r]*/&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;// Initial index of first subarray&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;// Initial index of second subarray&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;// Initial index of merged subarray&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cm"&gt;/* Copy the remaining elements of R[], if there
    are any */&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;arr&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we merge the two sorted sub arrays in ascending order into a single array, We do this by checking less than condition and then inserting into the array. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h2&gt;

&lt;p&gt;Let's run these functions using a main function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;merge_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sorted array is {:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the output!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    Finished dev &lt;span class="o"&gt;[&lt;/span&gt;unoptimized + debuginfo] target&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in &lt;/span&gt;2.83s
     Running &lt;span class="sb"&gt;`&lt;/span&gt;target/debug/rust-code-gen&lt;span class="sb"&gt;`&lt;/span&gt;
Sorted array is &lt;span class="o"&gt;[&lt;/span&gt;8, 9, 11, 22, 25, 34, 64]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are definitely better ways of implementing this algorithm. Implementing fundamental algorithms in Rust can help beginners understand Rust better and feel more confident. &lt;/p&gt;

</description>
      <category>rust</category>
      <category>algorithms</category>
      <category>interview</category>
      <category>sorting</category>
    </item>
  </channel>
</rss>
