<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Train a Deep Neural Network to recognize handwritten digits with Dannjs.</title>
      <author>Matias Vazquez-Levi</author>
      <pubDate>Fri, 13 Aug 2021 15:07:00 +0000</pubDate>
      <link>https://dev.to/matiasvlevi/train-a-deep-neural-network-to-recognize-handwritten-digits-with-dannjs-d5o</link>
      <guid>https://dev.to/matiasvlevi/train-a-deep-neural-network-to-recognize-handwritten-digits-with-dannjs-d5o</guid>
      <description>&lt;p&gt;A famous task performed by Deep models is handwritten digit recognition.&lt;br&gt;
Here is how you can create your model &amp;amp; train it with some images of digits.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Nodejs&lt;/li&gt;
&lt;li&gt;Some knowledge about neural networks&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#using"&gt;
  &lt;/a&gt;
  Using
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/easy-mnist"&gt;easy-mnist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dannjs.org/"&gt;Dannjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/fs"&gt;fs&lt;/a&gt; (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#mnist"&gt;
  &lt;/a&gt;
  MNIST
&lt;/h3&gt;

&lt;p&gt;We're going to use a dataset called MNIST. You can read more about it &lt;a href="https://en.wikipedia.org/wiki/MNIST_database"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;MNIST is a dataset containing a total of 70 000 28x28 images of handwritten digits.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--29f1O4P0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/800/1%2ALyRlX__08q40UJohhJG9Ow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--29f1O4P0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/800/1%2ALyRlX__08q40UJohhJG9Ow.png"&gt;&lt;/a&gt;&lt;br&gt;
It contains an image and a label in order to identify the digit.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#mnist-to-a-deep-model"&gt;
  &lt;/a&gt;
  MNIST to a Deep Model
&lt;/h3&gt;

&lt;p&gt;To show these images to our Deep model, we're going to need to feed every pixel with values ranging in-between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. A &lt;code&gt;0&lt;/code&gt; would represent a black pixel and a &lt;code&gt;1&lt;/code&gt; would represent a white pixel. &lt;/p&gt;

&lt;p&gt;The image below demonstrates this very well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S0yN4Jb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dudeperf3ct.github.io/images/mnist_cnn_files/mnist_cnn_keras_8_0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S0yN4Jb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dudeperf3ct.github.io/images/mnist_cnn_files/mnist_cnn_keras_8_0.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could see a 28 by 28 image as an array of 784 values. This is how we are going to feed the images to our neural network.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2DN89eHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/BnqTxnh/mnist-Image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2DN89eHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/BnqTxnh/mnist-Image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When feeding our model with image data, we also need to give the desired output in order to train it. In the image above, the neuron labeled 6 is circled to demonstrate this.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Now that we understand how we are going to train our MNIST model, let's get started!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h3&gt;

&lt;p&gt;Start by initiating an npm project with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to access the dataset, install the MNIST npm package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i easy-mnist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are also going to install our Neural Network library, &lt;a href="https://dannjs.org/"&gt;Dannjs&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i dannjs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#import-the-dataset"&gt;
  &lt;/a&gt;
  Import the dataset
&lt;/h3&gt;

&lt;p&gt;In our &lt;code&gt;index.js&lt;/code&gt; file, were going to require the dataset. We are creating a training set of &lt;code&gt;60 000&lt;/code&gt; images and a testing set of &lt;code&gt;10 000&lt;/code&gt; images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;easy-mnist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;makeData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is going to create two sets, the training set &amp;amp; the testing set.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Luckily, our dataset of images already comes in 784-length array format and the labels come as a 10-length array.&lt;br&gt;
We can access those like so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// For the training set&lt;/span&gt;
&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;
&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;

&lt;span class="c1"&gt;// For the testing set&lt;/span&gt;
&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;testdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;
&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;testdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-our-model"&gt;
  &lt;/a&gt;
  Creating our Model
&lt;/h3&gt;

&lt;p&gt;We first need to create a model, for this, we are going to import dannjs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Dann&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dannjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;dann&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then create a Dann model with 784 inputs and 10 outputs. We're also going to add two hidden neuron layers with &lt;code&gt;leakyReLU&lt;/code&gt; activations and then set the learning rate to &lt;code&gt;0.0001&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Dann&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;784&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHiddenLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;leakyReLU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHiddenLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;leakyReLU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeWeights&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then log the model to confirm the model creation was successful&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#training-the-model"&gt;
  &lt;/a&gt;
  Training the model
&lt;/h3&gt;

&lt;p&gt;For our model to be trained, we need to iterate through the whole training set. Having completed the entirety of the training set is what we call an epoch. In order to successfully train a model, we need multiple epochs.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;This is what 1 epoch looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then loop multiple epochs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;epochs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;epochs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Completed epoch &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; with a loss of &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With 10 epochs, depending on the model you created &amp;amp; your CPU's performance, it might take a few minutes. 10 epochs might not even be enough to train a very accurate model.&lt;/p&gt;

&lt;p&gt;Around 100 epochs, your model might reach an acceptable level of accuracy.&lt;/p&gt;

&lt;p&gt;The number of epochs &amp;amp; training time all depend on a lot of factors about the model. Experiment with the creation of a neural network, try adding one more layer, changing activation functions, or changing the learning rate, and see what happens.&lt;/p&gt;

&lt;p&gt;Since it might take a while to train, it is a good idea to save a model in order to keep training progress.&lt;br&gt;
Here is how you can do so using &lt;code&gt;fs&lt;/code&gt;, (do not forget to install it with &lt;code&gt;npm i fs&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Import fs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Saving our model to &lt;code&gt;myModel.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myModel.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Loading back our model from &lt;code&gt;myModel.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myModel.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Dann&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFromJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So there you have it! How to train an MNIST model with Dannjs.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;We are hosting a MNIST model contest, the most accurate model wins!&lt;br&gt;
You can submit your model &lt;a href="https://dannjs.org/drawNumber"&gt;here&lt;/a&gt; &amp;amp; try it out live.&lt;br&gt;
Results are posted in our discord server here is the &lt;a href="https://discord.gg/yeAqHsGdtU"&gt;invite link&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dannjs</category>
      <category>machinelearning</category>
      <category>node</category>
      <category>deeplearning</category>
    </item>
    <item>
      <title>How to learn Javascript easily</title>
      <author>Sergiy</author>
      <pubDate>Fri, 13 Aug 2021 14:32:34 +0000</pubDate>
      <link>https://dev.to/sergchr/how-to-learn-javascript-easily-2dfb</link>
      <guid>https://dev.to/sergchr/how-to-learn-javascript-easily-2dfb</guid>
      <description>&lt;p&gt;&lt;em&gt;tl;dr search for "learn javascript theory" in Google and pick any website. Go repeat what they teach in Codepen. Repeat for every theory section.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So you're prepared to learn something exciting! The first thing you need: a theory on how those things work. Only basic things such as syntax and programming fundamentals. Like what? Understand why do we need programming it at all. What things are possible, what aren't&lt;/p&gt;

&lt;p&gt;Step 0. &lt;strong&gt;A place where to write and execute code&lt;/strong&gt;. To see the result of your code. Go to Codepen and create a pen. Or choose another code editor. This is where you'll be writing programs while studying.&lt;/p&gt;

&lt;p&gt;Step 1. &lt;strong&gt;Choose any website where you can learn about the language syntax&lt;/strong&gt;. Google "javascript tutorial", "learn js" and so. The source doesn't matter at this point, pick any.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://javascript.info/"&gt;This&lt;/a&gt; is a great resource.&lt;/p&gt;

&lt;p&gt;Get familiar with how to write code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to create a variable;&lt;/li&gt;
&lt;li&gt;how to make a function;&lt;/li&gt;
&lt;li&gt;how to call a function;&lt;/li&gt;
&lt;li&gt;how to read function arguments, handle them, and return something useful;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congrats on this milestone! You now can write basic code. Note that it isn't so straightforward to write it though in the beginning. It's okay you can't follow tutorials. Try to write basic things. Get used to the style and then go further.&lt;/p&gt;

&lt;p&gt;Don't go to the next step until you code the practice tasks in the tutorials you followed. It's important! Don't skip the tasks!&lt;/p&gt;

&lt;p&gt;Step 2. &lt;strong&gt;Learn about data structures and when to use them.&lt;/strong&gt; There are primitive structures such as numbers, strings, booleans. And there are more complex types such as arrays, objects. You should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;understand when to use arrays and objects;&lt;/li&gt;
&lt;li&gt;know the difference between the two;&lt;/li&gt;
&lt;li&gt;write a lot of code using various data structures;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don't go further if you aren't comfortable with writing Javascript code. Functions, operations with objects, arrays. If you don't understand some part, it's okay and it doesn't mean you're dumb. I was trying to learn to code a lot of times and it was hard. Go back and read the theory, then solve the practical tasks. If you can't deal with them, go to Stackoverflow and see solutions. Understand how they work.&lt;/p&gt;

&lt;p&gt;Most of the time if you don't understand something, it's because you skipped a section. Or, didn't read it carefully. Or, the information isn't simple enough. Try following a different source. See a video tutorial. Still, finding it difficult? Write me.&lt;/p&gt;

&lt;p&gt;Step 3. &lt;strong&gt;Deciding your niche in applying Javascript.&lt;/strong&gt; With JS, you can program:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;front-ends(interactive visual representation). It's websites with logic. You need HTML, CSS to create visual blocks and JS to say a browser what to do. For example, when you press a button, JS handles the press and does something useful. Sends your data to a server to save in a database;&lt;/li&gt;
&lt;li&gt;back-ends(server-side code: Node.JS). This is where you can handle the data a website sends you. Store it in a database, or send it somewhere else. Or, transform it and save it;&lt;/li&gt;
&lt;li&gt;mobile apps. With React Native framework you can do such, isn't that cool?&lt;/li&gt;
&lt;li&gt;desktop apps;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 4. &lt;strong&gt;When you decide what path you want to take, learn the specifics of that environment.&lt;/strong&gt;&lt;br&gt;
For browsers(front-end path) you need to learn DOM. I.e. how to interact with visual elements on a website page. Think what projects you'd want to create - a personal website, an online store. Or something else. And create it! Make only a super simple and tiny version. Find a theory you will need when you encounter unknowns. E.g. how to find all buttons on a page and handle clicks on every one of them.&lt;/p&gt;

&lt;p&gt;If you prefer server-side coding, you should learn Node.JS. It's a thing that helps you to run Javascript in a server-side environment. Learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a basic HTTP server;&lt;/li&gt;
&lt;li&gt;handle the HTTP requests. E.g. when calling &lt;code&gt;GET /api/hello&lt;/code&gt; to return "Hi!";Then practice. Pick up the Express library. It simplifies creating code on a server. Make some HTTP routes, do some transformations of data you receive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, of course, create an interesting project! A server for an online store website? A Discord bot?&lt;/p&gt;

&lt;p&gt;For mobile and desktop apps, the strategy is the same. Learn specifics about the frameworks(React Native for mobiles or Electron for desktops). Create pet projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The most important thing in learning Javascript fast enough is to practice a lot. Don't skip it. Thus you learn applicable things that solidify what you've been reading a lot.&lt;/p&gt;

&lt;p&gt;Focus on one area. Solidify your knowledge in one niche, then go further after understanding the basics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/sergchr"&gt;Follow me on Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>learning</category>
    </item>
    <item>
      <title>Full Stack Twitter Clone</title>
      <author>Cihat Salik</author>
      <pubDate>Fri, 13 Aug 2021 13:59:40 +0000</pubDate>
      <link>https://dev.to/cihat/full-stack-twitter-clone-3k81</link>
      <guid>https://dev.to/cihat/full-stack-twitter-clone-3k81</guid>
      <description>&lt;p&gt;In the project, I am doing it to develop myself on the back-end side. I spend my experience and effort to become a full-stack developer using Node.js and mongoDB.&lt;/p&gt;

&lt;p&gt;In this project, I preferred Node.js in Back-end, mongoDB as Service, object document mapper (ODM) mongoose, Vue.js and pug in Front-end, SCSS for styling. I'm thinking of deploying my project to Google Cloud.&lt;/p&gt;

&lt;p&gt;As a front-end developer, it's a study I've done about wondering what's going on with the backend. It is a project that I aim to learn by making a full-stack project using express.js and mongoDB, which are the most common frameworks of Node.js.&lt;/p&gt;

&lt;p&gt;The project is ongoing, I know there are many missing, I continue to work on it. I would be very happy if you would like to contribute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#used-technologies"&gt;
  &lt;/a&gt;
  Used technologies
&lt;/h3&gt;

&lt;p&gt;Back-End&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Express.js&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;Mongoose&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Front-End&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vue.js &lt;/li&gt;
&lt;li&gt;SCSS&lt;/li&gt;
&lt;li&gt;Pug&lt;/li&gt;
&lt;li&gt;axios&lt;/li&gt;
&lt;li&gt;Vuex&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Containerization&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;docker-compose&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deployment&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google Cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/cihat/full-stack-twitter-clone"&gt;Project's open source code link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--keGpKqcQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/57585087/129368881-67e96d9b-2346-49d2-a288-05bae52aef1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--keGpKqcQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/57585087/129368881-67e96d9b-2346-49d2-a288-05bae52aef1f.png" alt="Class Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jVrnmuSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/57585087/129048076-a2b17cc9-3bc5-4447-baaa-14100f64aa03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jVrnmuSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/57585087/129048076-a2b17cc9-3bc5-4447-baaa-14100f64aa03.png" alt="Basic version"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-184tYa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/57585087/129362860-a552ed07-9426-4d87-9115-e35777793d8c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-184tYa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/57585087/129362860-a552ed07-9426-4d87-9115-e35777793d8c.png" alt="Basic-II version"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>vue</category>
      <category>express</category>
    </item>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 13th August 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 13 Aug 2021 13:48:14 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-13th-august-2021-4bf2</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-13th-august-2021-4bf2</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-mitosis"&gt;
  &lt;/a&gt;
  1. Mitosis
&lt;/h3&gt;

&lt;p&gt;Write components once, run everywhere. Compiles to Vue, React, Solid, Angular, Svelte, and more.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/BuilderIO"&gt;
        BuilderIO
      &lt;/a&gt; / &lt;a href="https://github.com/BuilderIO/mitosis"&gt;
        mitosis
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Write components once, run everywhere. Compiles to Vue, React, Solid, Angular, Svelte, and more. 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="MD"&gt;
&lt;br&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/81ed037ac3a7586cddaaf2e213b1c1374625a2ba4e56749e720923b71fe39cea/68747470733a2f2f63646e2e6275696c6465722e696f2f6170692f76312f696d6167652f617373657473253246594a494762346930316a7677305352644c3542742532466135303861346465313532393436336662306561333163636338646137613139"&gt;&lt;img width="400" src="https://camo.githubusercontent.com/81ed037ac3a7586cddaaf2e213b1c1374625a2ba4e56749e720923b71fe39cea/68747470733a2f2f63646e2e6275696c6465722e696f2f6170692f76312f696d6167652f617373657473253246594a494762346930316a7677305352644c3542742532466135303861346465313532393436336662306561333163636338646137613139"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
  Write components once, run everywhere. Compiles to Vue, React, Solid, Angular, Svelte, and Liquid
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://github.com/prettier/prettier"&gt;&lt;img alt="code style: prettier" src="https://camo.githubusercontent.com/48a41f43affa2e6253d6a48e0ee662ec53ce13c46442ac815e81d36b6e6b434d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64655f7374796c652d70726574746965722d6666363962342e737667"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/BuilderIO/mitosis/pulls"&gt;&lt;img alt="PRs Welcome" src="https://camo.githubusercontent.com/b0ad703a46e8b249ef2a969ab95b2cb361a2866ecb8fe18495a2229f5847102d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e737667"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/BuilderIO/mitosis"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/c75d1862ac907b0ff2739fca2cfa89aa3b8257002978560c39ee53c7bdd335e8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4275696c646572494f2f6d69746f736973"&gt;&lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/@builder.io/mitosis" rel="nofollow"&gt;&lt;img alt="Types" src="https://camo.githubusercontent.com/76909b370eaf0843b8be479596705b70fe060fc44c9ba6a8e43e8345815c2834/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f74797065732f406275696c6465722e696f2f6d69746f736973"&gt;&lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/@builder.io/mitosis" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f4f3266845fcb570f9b081a97849186e9357dd6da610a08f4248b96634bafc1a/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f406275696c6465722e696f2f6d69746f7369732e7376673f73616e6974697a653d74727565"&gt;&lt;/a&gt;
&lt;/p&gt;



&lt;p&gt;
  &lt;a href="https://jsx-lite.builder.io/" rel="nofollow"&gt;
    &lt;img width="800" alt="Fiddle" src="https://camo.githubusercontent.com/de6f8a26f66c2e358a5910150e22b71834080bab5b5beeac71b785ba9b4ba56e/68747470733a2f2f696d6775722e636f6d2f483157547447652e676966"&gt;
  &lt;/a&gt;
&lt;/p&gt;



&lt;h2&gt;
At a glance&lt;/h2&gt;

&lt;p&gt;Mitosis is inspired by many modern frameworks. You'll see components look like React components and use React-like hooks, but have simple mutable state like Vue, use a static form of JSX like Solid, compile away like Svelte, and uses a simple, prescriptive structure like Angular.&lt;/p&gt;

&lt;p&gt;This is what a basic Mitosis component that manages some state looks like:&lt;/p&gt;

&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;useState&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-v"&gt;Show&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-v"&gt;For&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'@builder.io/mitosis'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; &lt;span class="pl-k"&gt;default&lt;/span&gt; &lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-v"&gt;MyComponent&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;props&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;state&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useState&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c1"&gt;newItemName&lt;/span&gt;: &lt;span class="pl-s"&gt;'New item'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
    &lt;span class="pl-c1"&gt;list&lt;/span&gt;: &lt;span class="pl-kos"&gt;[&lt;/span&gt;&lt;span class="pl-s"&gt;'hello'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s"&gt;'world'&lt;/span&gt;&lt;span class="pl-kos"&gt;]&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
    &lt;span class="pl-en"&gt;addItem&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
      &lt;span class="pl-s1"&gt;state&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;list&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;[&lt;/span&gt;...&lt;span class="pl-s1"&gt;state&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;list&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;state&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;newItemName&lt;/span&gt;&lt;span class="pl-kos"&gt;]&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
    &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;div&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;Show&lt;/span&gt; &lt;span class="pl-c1"&gt;when&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-s1"&gt;props&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;showInput&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/BuilderIO/mitosis"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#2-react-suite"&gt;
  &lt;/a&gt;
  2. React Suite
&lt;/h3&gt;

&lt;p&gt;React Suite is a set of react component libraries for enterprise system products. It is a well-thought-out and developer-friendly UI framework.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/rsuite"&gt;
        rsuite
      &lt;/a&gt; / &lt;a href="https://github.com/rsuite/rsuite"&gt;
        rsuite
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🧱 A suite of React components .
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://rsuitejs.com" rel="nofollow"&gt;
   &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KuXkDG2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1203827/65102389-7be3f100-d9fd-11e9-859e-ae9617ed2f91.png" alt="React Suite logo"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;English | &lt;a href="https://github.com/rsuite/rsuite/blob/master/README_zh.md"&gt;中文版&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/rsuite" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e383fbf07cd90925655b72fc683361a19dc814a90d7710e2decde54d8999ab46/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f7273756974652f6e657874" alt="npm"&gt;&lt;/a&gt;
&lt;a href="https://github.com/rsuite/rsuite/actions?query=branch%3Amaster+workflow%3A%22Node.js+CI%22"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--txBbhGgb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rsuite/rsuite/workflows/Node.js%2520CI/badge.svg%3Fbranch%3Dmaster" alt="GitHub Actions"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/rsuite/rsuite" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a587ea0e6d8fd19006f808d2b6accabe7d8fefcd23624a51b06cace07ffaab23/68747470733a2f2f636f6465636f762e696f2f67682f7273756974652f7273756974652f6272616e63682f6e6578742f67726170682f62616467652e7376673f746f6b656e3d4847654b643042443374" alt="codecov"&gt;&lt;/a&gt;
&lt;a href="https://discord.gg/R8mnjwh" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d60a769b2a1c2a4fb15d3e0d28806750c63bdec6ebad58be2e7f108eab7a0e26/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446973636f72642d4a6f696e253230636861742532302545322538362539322d3733386264372e737667" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/rsuite/rsuite?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/071b6315f3152366274ed3a847c95875aa8bf8060dfa141ab592f59e20afc07d/68747470733a2f2f696d672e736869656c64732e696f2f6769747465722f726f6f6d2f7273756974652f7273756974653f6c6162656c3d636861742d656e676c697368" alt="Gitter"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/rsuite/rsuite-CN?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3b7215e6264e678e100a039b63e21a87e7e1a75dddfc4783f75e447e66591b9f/68747470733a2f2f696d672e736869656c64732e696f2f6769747465722f726f6f6d2f7273756974652f7273756974653f6c6162656c3d636861742d6368696e657365" alt="Gitter"&gt;&lt;/a&gt;
&lt;a href="https://gitpod.io/#https://github.com/rsuite/rsuite" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod ready-to-code"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React Suite is a set of react component libraries for enterprise system products. It is a well-thought-out and developer-friendly UI framework.&lt;/p&gt;
&lt;h3&gt;
UI Design&lt;/h3&gt;
&lt;p&gt;React Suite Design Prototype and specification, click to &lt;a href="https://rsuitejs.com/design/default" rel="nofollow"&gt;view&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Supported Platforms&lt;/h2&gt;
&lt;h3&gt;
Browser&lt;/h3&gt;
&lt;p&gt;React Suite supports the latest, stable releases of all major browsers and platforms. IE&amp;lt;=9 is no longer supported since React Suite 3.0. React Suite is designed and implemented for use on modern desktop browsers rather than mobile browsers.&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IE&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=11&lt;/td&gt;
&lt;td&gt;&amp;gt;=14&lt;/td&gt;
&lt;td&gt;&amp;gt;= 45&lt;/td&gt;
&lt;td&gt;&amp;gt;= 49&lt;/td&gt;
&lt;td&gt;&amp;gt;= 10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
Server&lt;/h3&gt;
&lt;p&gt;React Suite supports server side rendering. Support &lt;a href="https://github.com/zeit/next.js"&gt;Next.js&lt;/a&gt; to build applications.&lt;/p&gt;
&lt;h2&gt;
Supported development environment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Supports React 16 +&lt;/li&gt;
&lt;li&gt;Supports &lt;a href="http://www.typescriptlang.org/" rel="nofollow"&gt;TypeScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Supports &lt;a href="https://electronjs.org/" rel="nofollow"&gt;Electron&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Supports &lt;a href="https://github.com/shurygindv/bs-rsuite-ui-react"&gt;Reason&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;React Suite is available as an &lt;a href="https://www.npmjs.com/package/rsuite" rel="nofollow"&gt;npm package&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm i rsuite@next --save&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;or if you prefer Yarn&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;yarn add rsuite@next&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Here's a simple example&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-v"&gt;Button&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'rsuite'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/rsuite/rsuite"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-little-state-machine"&gt;
  &lt;/a&gt;
  3. Little State Machine
&lt;/h3&gt;

&lt;p&gt;React custom hook for persist state management&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bluebill1049"&gt;
        bluebill1049
      &lt;/a&gt; / &lt;a href="https://github.com/bluebill1049/little-state-machine"&gt;
        little-state-machine
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      📠 React custom hook for persist state management
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;a href="https://lrz5wloklm.csb.app/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ON3v-Oha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/bluebill1049/little-state-machine/raw/master/docs/logo.png%3Fraw%3Dtrue" alt="Little State Machine - React Hooks for state management" width="140px"&gt;&lt;/a&gt;
    &lt;h1&gt;
Little State Machine&lt;/h1&gt;
&lt;p&gt;State management made super simple&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/little-state-machine" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ae44362dc454bbffc28729180b278eb712e1955da80c325932c3f9834148e6ab/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f6c6974746c652d73746174652d6d616368696e652e7376673f7374796c653d666f722d7468652d6261646765" alt="npm downloads"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/little-state-machine" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/780a173687ba5be894a9fcc96bb168638b70495e89446f860202776a41ed6d54/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f6c6974746c652d73746174652d6d616368696e652e7376673f7374796c653d666f722d7468652d6261646765" alt="npm"&gt;&lt;/a&gt;
&lt;a href="https://bundlephobia.com/result?p=little-state-machine" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/83e032c36c863bbf5b9d5dc48c2ee575fec0412d9010644a57d7da6dea385223/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f6c6974746c652d73746174652d6d616368696e653f7374796c653d666f722d7468652d6261646765" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;
✨ Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tiny with 0 dependency and simple (715B &lt;em&gt;gzip&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Persist state by default (&lt;code&gt;sessionStorage&lt;/code&gt; or &lt;code&gt;localStorage&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Build with React Hooks&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
📦 Installation&lt;/h2&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;$ npm install little-state-machine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
🕹 API&lt;/h2&gt;
&lt;h4&gt;
🔗 &lt;code&gt;StateMachineProvider&lt;/code&gt;
&lt;/h4&gt;
&lt;p&gt;This is a Provider Component to wrapper around your entire app in order to create context.&lt;/p&gt;
&lt;div class="highlight highlight-source-tsx position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-smi"&gt;StateMachineProvider&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-smi"&gt;App&lt;/span&gt; &lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-smi"&gt;StateMachineProvider&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
🔗 &lt;code&gt;createStore&lt;/code&gt;
&lt;/h4&gt;
&lt;p&gt;Function to initialize the global store, invoked at your app root (where &lt;code&gt;&amp;lt;StateMachineProvider /&amp;gt;&lt;/code&gt; lives).&lt;/p&gt;
&lt;div class="highlight highlight-source-tsx position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-en"&gt;log&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;store&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-smi"&gt;console&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;log&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;store&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-s1"&gt;store&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;
&lt;span class="pl-en"&gt;createStore&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;
  &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c1"&gt;yourDetail&lt;/span&gt;: &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-c1"&gt;firstName&lt;/span&gt;: &lt;span class="pl-s"&gt;''&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-c1"&gt;lastName&lt;/span&gt;: &lt;span class="pl-s"&gt;''&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c"&gt;// it's an object of your state&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-kos"&gt;{&lt;/span&gt;
     &lt;span class="pl-c1"&gt;name&lt;/span&gt;?: string&lt;span class="pl-kos"&gt;;&lt;/span&gt; &lt;span class="pl-c"&gt;// rename the store&lt;/span&gt;
     &lt;span class="pl-s1"&gt;middleWares&lt;/span&gt;?: &lt;span class="pl-kos"&gt;[&lt;/span&gt; &lt;span class="pl-s1"&gt;log&lt;/span&gt; &lt;span class="pl-kos"&gt;]&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt; &lt;span class="pl-c"&gt;// function to invoke each action&lt;/span&gt;
     &lt;span class="pl-s1"&gt;storageType&lt;/span&gt;?: &lt;span class="pl-smi"&gt;Storage&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/bluebill1049/little-state-machine"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-xicons"&gt;
  &lt;/a&gt;
  4. xicons
&lt;/h3&gt;

&lt;p&gt;SVG Vue/React components integrated from fluentui-system-icons, ionicons, ant-design-icons, material-design-icons, Font-Awesome, tabler-icons and carbon icons. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/07akioni"&gt;
        07akioni
      &lt;/a&gt; / &lt;a href="https://github.com/07akioni/xicons"&gt;
        xicons
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SVG Vue/React components integrated from fluentui-system-icons, ionicons, ant-design-icons, material-design-icons, Font-Awesome, tabler-icons and carbon icons. (Vue3, Vue2, React, SVG)
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
xicons &lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/78f47a09877ba9d28da1887a93e5c3bc2efb309c1e910eb21135becd2998238a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License: MIT"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;English · &lt;a href="https://github.com/07akioni/xicons/blob/main/README.zh-CN.md"&gt;中文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Include &lt;code&gt;vicons&lt;/code&gt;(vue3), &lt;code&gt;ricons&lt;/code&gt;(react), &lt;code&gt;sicons&lt;/code&gt;(svg) &amp;amp; &lt;code&gt;v2icons&lt;/code&gt;(vue2).&lt;/p&gt;
&lt;p&gt;SVG Vue/React components integrated from &lt;a href="https://github.com/microsoft/fluentui-system-icons"&gt;&lt;code&gt;fluentui-system-icons&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/ionic-team/ionicons"&gt;&lt;code&gt;ionicons&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/ant-design/ant-design-icons"&gt;&lt;code&gt;ant-design-icons&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/google/material-design-icons"&gt;&lt;code&gt;material-design-icons&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/FortAwesome/Font-Awesome"&gt;&lt;code&gt;Font-Awesome&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/tabler/tabler-icons"&gt;&lt;code&gt;tabler-icons&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/carbon-design-system/carbon/tree/main/packages/icons"&gt;&lt;code&gt;carbon&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Util icon component for customizing color &amp;amp; size is also provided.&lt;/p&gt;
&lt;h2&gt;
Icons Preview &amp;amp; Search&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.xicons.org" rel="nofollow"&gt;https://www.xicons.org&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;h3&gt;
Icons Installation&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Install packages on your demand&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For react&lt;/span&gt;
npm i -D @ricons/fluent
npm i -D @ricons/ionicons4
npm i -D @ricons/ionicons5
npm i -D @ricons/antd
npm i -D @ricons/material
npm i -D @ricons/fa &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; font awesome&lt;/span&gt;
npm i -D @ricons/tabler
npm i -D @ricons/carbon
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For vue3&lt;/span&gt;
npm i -D @vicons/fluent
npm i -D @vicons/ionicons4
npm i -D @vicons/ionicons5
npm i -D @vicons/antd
npm i -D @vicons/material
npm i -D @vicons/fa &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; font awesome&lt;/span&gt;
npm i -D @vicons/tabler
npm i -D @vicons/carbon
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For vue2&lt;/span&gt;
npm i -D @v2icons/fluent
npm i -D @v2icons/ionicons4
npm i -D @v2icons/ionicons5
npm&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/07akioni/xicons"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#5-color-thief"&gt;
  &lt;/a&gt;
  5. Color Thief
&lt;/h3&gt;

&lt;p&gt;Grab the color palette from an image using just Javascript. Works in the browser and in Node.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/lokesh"&gt;
        lokesh
      &lt;/a&gt; / &lt;a href="https://github.com/lokesh/color-thief"&gt;
        color-thief
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Grab the color palette from an image using just Javascript.  Works in the browser and in Node.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Color Thief&lt;/h1&gt;
&lt;p&gt;Grab the color palette from an image using just Javascript.Works in the browser and in Node.&lt;/p&gt;
&lt;h3&gt;
View the &lt;a href="https://lokeshdhakar.com/projects/color-thief/" rel="nofollow"&gt;demo page&lt;/a&gt; for examples, API docs, and more.&lt;/h3&gt;

&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;h3&gt;
Project structure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;build/&lt;/code&gt; - Simple script that copies and renames files into the /dist folder.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cypress/&lt;/code&gt; - Browsers tests.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dist/&lt;/code&gt; - Generated distribution files created by &lt;a href="https://github.com/developit/microbundle"&gt;microbundle&lt;/a&gt; package and a couple of files copied via build script.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;examples/&lt;/code&gt; - CSS, JS, and Images for the index.html example page.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;src/color-thief-node.js&lt;/code&gt; - Source for the Node (commonjs) compatible version of the script.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;src/color-thief.js&lt;/code&gt; - Source for the browser (ES6, AMD, Global var) compatible version of the script.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;src/core.js&lt;/code&gt; - Functions shared between the node and browser versions of the script.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;test/&lt;/code&gt; - Node integration tests. Uses Chai.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;index.html&lt;/code&gt; - Example page.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Running tests&lt;/h3&gt;
&lt;p&gt;There are two sets of tests:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Browser tests run with &lt;a href="https://www.cypress.io" rel="nofollow"&gt;Cypress&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Node tests run with &lt;a href="https://karma-runner.github.io/latest/index.html" rel="nofollow"&gt;Karma&lt;/a&gt; and utilizing &lt;a href="https://mochajs.org/" rel="nofollow"&gt;Mocha&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/lokesh/color-thief"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#6-integration-test-best-practices"&gt;
  &lt;/a&gt;
  6. Integration Test Best Practices
&lt;/h3&gt;

&lt;p&gt;Master the art of the most powerful testing technique for Node.js: Component tests. Including super-comprehensive best practices list and an example app&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/testjavascript"&gt;
        testjavascript
      &lt;/a&gt; / &lt;a href="https://github.com/testjavascript/nodejs-integration-tests-best-practices"&gt;
        nodejs-integration-tests-best-practices
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ✅  Master the art of the most powerful testing technique for Node.js: Component tests. Including super-comprehensive best practices list and an example app (August 2021)
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/testjavascript/nodejs-integration-tests-best-practices./graphics/main-header.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h9bvpvx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/testjavascript/nodejs-integration-tests-best-practices./graphics/main-header.png" alt="Header" title="Component Tests"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2&gt;
Master the art of the most powerful testing technique for backend&lt;/h2&gt;

&lt;h1&gt;
3 things to your benefit&lt;/h1&gt;
&lt;p&gt;Component/integration test is an hybrid between E2E and unit tets. It's gaining a lot of popularity and going by the testing diamond model it is considered as the default technique for modern backend. Its main idea is testing an entire component (e.g., Microservice) as-is, through the API, with all the layers including database but fake anything exterenous. This brings &lt;strong&gt;both&lt;/strong&gt; high confidence &lt;strong&gt;and&lt;/strong&gt; great developer experience. However, doing it right, fast, exhaustive and maximing the value demand some learning and skills. This is the mission statement of this repo. Warning: You might fall in love with testing  💚&lt;/p&gt;
&lt;p&gt;This repository contains:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. ✅ 40+ Best Practices List -&lt;/strong&gt; Detailed instructions on how to write component tests in the RIGHT way including code example and reference to the example application&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 📊  Example application -&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/testjavascript/nodejs-integration-tests-best-practices"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#7-jsencrypt"&gt;
  &lt;/a&gt;
  7. jsEncrypt
&lt;/h3&gt;

&lt;p&gt;A Javascript library to perform OpenSSL RSA Encryption, Decryption, and Key Generation.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/travist"&gt;
        travist
      &lt;/a&gt; / &lt;a href="https://github.com/travist/jsencrypt"&gt;
        jsencrypt
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Javascript library to perform OpenSSL RSA Encryption, Decryption, and Key Generation.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Website&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://travistidwell.com/jsencrypt" rel="nofollow"&gt;http://travistidwell.com/jsencrypt&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Introduction&lt;/h1&gt;
&lt;p&gt;When browsing the internet looking for a good solution to RSA Javascript
encryption, there is a whole slew of libraries that basically take the fantastic
work done by Tom Wu @ &lt;a href="http://www-cs-students.stanford.edu/~tjw/jsbn/" rel="nofollow"&gt;http://www-cs-students.stanford.edu/~tjw/jsbn/&lt;/a&gt; and then
modify that code to do what they want.&lt;/p&gt;
&lt;p&gt;What I couldn't find, however, was a simple wrapper around this library that
basically uses the library &lt;a href="https://github.com/travist/jsencrypt/pull/6"&gt;practically&lt;/a&gt; untouched, but adds a wrapper to provide parsing of
actual Private and Public key-pairs generated with OpenSSL.&lt;/p&gt;
&lt;p&gt;This library is the result of these efforts.&lt;/p&gt;
&lt;h1&gt;
How to use this library.&lt;/h1&gt;
&lt;p&gt;This library should work hand-in-hand with openssl.  With that said, here is how to use this library.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Within your terminal (Unix based OS) type the following.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;openssl genrsa -out rsa_1024_priv.pem 1024
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;This generates a private key, which you can see by doing the following...&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;cat rsa_1024_priv.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;You can then copy and paste this in the Private Key…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/travist/jsencrypt"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#8-giscus"&gt;
  &lt;/a&gt;
  8. giscus
&lt;/h3&gt;

&lt;p&gt;A comments system powered by GitHub Discussions. Let visitors leave comments and reactions on your website via GitHub! &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/laymonage"&gt;
        laymonage
      &lt;/a&gt; / &lt;a href="https://github.com/laymonage/giscus"&gt;
        giscus
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A comments system powered by GitHub Discussions. :octocat: 💬 💎
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a href="https://giscus.app" rel="nofollow"&gt;giscus&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;A comments system powered by &lt;a href="https://docs.github.com/en/discussions"&gt;GitHub Discussions&lt;/a&gt;. Let visitors leave comments and reactions on your website via GitHub! Heavily inspired by &lt;a href="https://github.com/utterance/utterances"&gt;utterances&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/laymonage/giscus"&gt;Open source&lt;/a&gt;. 🌏
&lt;/li&gt;
&lt;li&gt;No tracking, no ads, always free. 📡 🚫
&lt;/li&gt;
&lt;li&gt;No database needed. All data is stored in GitHub Discussions. &lt;img class="emoji" title=":octocat:" alt=":octocat:" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ABKpJP58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.githubassets.com/images/icons/emoji/octocat.png" height="20" width="20"&gt;
&lt;/li&gt;
&lt;li&gt;Supports &lt;a href="https://github.com/laymonage/giscus/blob/main/ADVANCED-USAGE.md#data-theme"&gt;custom themes&lt;/a&gt;! 🌗
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/laymonage/giscus/blob/main/ADVANCED-USAGE.md"&gt;Extensively configurable&lt;/a&gt;. 🔧
&lt;/li&gt;
&lt;li&gt;Automatically fetches new comments and edits from GitHub. 🔃
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/laymonage/giscus/blob/main/SELF-HOSTING.md"&gt;Can be self-hosted&lt;/a&gt;! 🤳
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br&gt;
giscus is still under active development. GitHub is also still actively developing Discussions and its API. Thus, some features of giscus may break or change over time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
how it works&lt;/h2&gt;
&lt;p&gt;When giscus loads, the &lt;a href="https://docs.github.com/en/graphql/guides/using-the-graphql-api-for-discussions#search"&gt;GitHub Discussions search API&lt;/a&gt; is used to find the Discussion associated with the page based on a chosen mapping (URL, &lt;code&gt;pathname&lt;/code&gt;, &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, etc.). If a matching discussion cannot be found, the giscus bot will automatically create a discussion the first time someone leaves…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/laymonage/giscus"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#9-growthbook"&gt;
  &lt;/a&gt;
  9. GrowthBook
&lt;/h3&gt;

&lt;p&gt;The Open Source A/B Testing Platform &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/growthbook"&gt;
        growthbook
      &lt;/a&gt; / &lt;a href="https://github.com/growthbook/growthbook"&gt;
        growthbook
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Open Source A/B Testing Platform
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://www.growthbook.io" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/877084ad7be5134a8e686f7da8585a02c721d326b874432af7dde3c58616b24d/68747470733a2f2f7777772e67726f777468626f6f6b2e696f2f6c6f676f732f67726f777468626f6f6b2d6c6f676f4032782e706e67" width="400px" alt="Growth Book - The Open Source A/B Testing Platform"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The Open Source A/B Testing Platform&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
    &lt;a href="https://github.com/growthbook/growthbook/actions/workflows/ci.yml"&gt;&lt;img src="https://camo.githubusercontent.com/0dccceb38c06989abacae9eab7bff2f5c45124127cedb6a32a900f7ca50839ee/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f67726f777468626f6f6b2f67726f777468626f6f6b2f4349" alt="Build Status" height="22"&gt;&lt;/a&gt;
    &lt;a href="https://github.com/growthbook/growthbook/blob/main/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/469c7fca26ee5921a4edfa640d181ac711028a5eb2eccc8069f6ff7ebb984e9b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f67726f777468626f6f6b2f67726f777468626f6f6b" alt="MIT License" height="22"&gt;&lt;/a&gt;
    &lt;a href="https://github.com/growthbook/growthbook/releases"&gt;&lt;img src="https://camo.githubusercontent.com/ab205e51d9bfa32a2f012059291340491f52dd00cdc87c8bdcf42972cc271f40/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f67726f777468626f6f6b2f67726f777468626f6f6b3f636f6c6f723d626c756526736f72743d73656d766572" alt="Release" height="22"&gt;&lt;/a&gt;
    &lt;a href="https://join.slack.com/t/growthbookusers/shared_invite/zt-oiq9s1qd-dHHvw4xjpnoRV1QQrq6vUg" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5278535a339d7e84ad5c0a180c6aa1c564567ce2f3a02f93320239e462fb2f73/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f736c61636b2d6a6f696e2d4530314535413f6c6f676f3d736c61636b" alt="Join us on Slack" height="22"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Get up and running in 1 minute with:&lt;/p&gt;

&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/growthbook/growthbook.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; growthbook
docker-compose up -d&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Then visit &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.growthbook.io" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tczYWoEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1087514/124157227-26f05e00-da5e-11eb-9f73-3ceabc6ecf9e.png" alt="Growth Book Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Our Philosophy&lt;/h2&gt;
&lt;p&gt;The top 1% of companies spend thousands of hours building their own A/B testing platforms in-house
The other 99% are left paying for expensive 3rd party SaaS tools or hacking together unmaintained open source libraries.&lt;/p&gt;
&lt;p&gt;Growth Book gives you the flexibility and power of a fully-featured in-house A/B testing platform without needing to build it yourself.&lt;/p&gt;
&lt;h2&gt;
Major Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
❄️ Pull data from Snowflake, Redshift, BigQuery, Mixpanel, Google Analytics, &lt;a href="https://docs.growthbook.io/app/datasources" rel="nofollow"&gt;and more&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🆎 Bayesian statistics engine with support for binomial, count, duration, and revenue metrics&lt;/li&gt;
&lt;li&gt;
⬇️ Drill down into A/B test results by browser, country, or any other attribute&lt;/li&gt;
&lt;li&gt;
💻 Client libraries for &lt;a href="https://github.com/growthbook/growthbook-react"&gt;React&lt;/a&gt;, &lt;a href="https://github.com/growthbook/growthbook-js"&gt;Javascript&lt;/a&gt;, &lt;a href="https://github.com/growthbook/growthbook-php"&gt;PHP&lt;/a&gt;, &lt;a href="https://github.com/growthbook/growthbook-ruby"&gt;Ruby&lt;/a&gt;, and &lt;a href="https://github.com/growthbook/growthbook-python"&gt;Python&lt;/a&gt; with more coming soon&lt;/li&gt;
&lt;li&gt;
👁️ &lt;a href="https://docs.growthbook.io/app/visual" rel="nofollow"&gt;Visual Editor&lt;/a&gt; for non-technical users to create…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/growthbook/growthbook"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#10-ariang"&gt;
  &lt;/a&gt;
  10. AriaNg
&lt;/h3&gt;

&lt;p&gt;AriaNg, a modern web frontend making aria2 easier to use.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mayswind"&gt;
        mayswind
      &lt;/a&gt; / &lt;a href="https://github.com/mayswind/AriaNg"&gt;
        AriaNg
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      AriaNg, a modern web frontend making aria2 easier to use.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
AriaNg&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/mayswind/AriaNg/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/af3db639ebc65c6431067cdfd30e9f3460777c90af544d7f5f933645a1b2a05e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d61797377696e642f417269614e672e7376673f7374796c653d666c6174" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://circleci.com/gh/mayswind/AriaNg/tree/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d4f7d6568a24a7ef9f17c8949cbf1f28ae16ea52db3417c52ce307a49b47f2a6/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f70726f6a6563742f6769746875622f6d61797377696e642f417269614e672e7376673f7374796c653d666c6174" alt="Lastest Build"&gt;&lt;/a&gt;
&lt;a href="https://github.com/mayswind/AriaNg/releases"&gt;&lt;img src="https://camo.githubusercontent.com/596d3b3e365e63ea8ff564a2be327ca2734b15675152cdadc41eea8c40207558/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6d61797377696e642f417269614e672e7376673f7374796c653d666c6174" alt="Lastest Release"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Introduction&lt;/h2&gt;
&lt;p&gt;AriaNg is a modern web frontend making &lt;a href="https://github.com/aria2/aria2"&gt;aria2&lt;/a&gt; easier to use. AriaNg is written in pure html &amp;amp; javascript, thus it does not need any compilers or runtime environment. You can just put AriaNg in your web server and open it in your browser. AriaNg uses responsive layout, and supports any desktop or mobile devices.&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Pure Html &amp;amp; Javascript, no runtime required&lt;/li&gt;
&lt;li&gt;Responsive design, supporting desktop and mobile devices&lt;/li&gt;
&lt;li&gt;User-friendly interface
&lt;ul&gt;
&lt;li&gt;Sort tasks (by name, size, progress, remaining time, download speed, etc.), files, bittorrent peers&lt;/li&gt;
&lt;li&gt;Search tasks&lt;/li&gt;
&lt;li&gt;Retry tasks&lt;/li&gt;
&lt;li&gt;Adjust task order by dragging&lt;/li&gt;
&lt;li&gt;More information of tasks (health percentage, client information of bt peers, etc.)&lt;/li&gt;
&lt;li&gt;Filter files by specified file types (videos, audios, pictures, documents, applications, archives, etc.) or file extensions&lt;/li&gt;
&lt;li&gt;Tree view for multi-directory task&lt;/li&gt;
&lt;li&gt;Download / upload speed chart for aria2 or single task&lt;/li&gt;
&lt;li&gt;Full support for aria2 settings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dark theme&lt;/li&gt;
&lt;li&gt;Url command line…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mayswind/AriaNg"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing 📈
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +1,467 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +842 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;Machine Learning for Beginners&lt;/a&gt; +633 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/danistefanovic/build-your-own-x"&gt;Build your own X&lt;/a&gt; +540 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;Developer Roadmap&lt;/a&gt; +537 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/bubkoo/html-to-image"&gt;html-to-image&lt;/a&gt; +17%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/BuilderIO/mitosis"&gt;Mitosis&lt;/a&gt; +16%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cweijan/vscode-database-client"&gt;VSCode Database Client&lt;/a&gt; +13%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/imbhargav5/rooks"&gt;Rooks&lt;/a&gt; +11%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/epicmaxco/vuestic-ui"&gt;Vuestic UI&lt;/a&gt; +7%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +8,558 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;Machine Learning for Beginners&lt;/a&gt; +5,734 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +5,387 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/Web-Dev-For-Beginners"&gt;Web Development for Beginners&lt;/a&gt; +2,912 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nocodb/nocodb"&gt;NocoDB&lt;/a&gt; +2,899 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/junhoyeo/use-color"&gt;use-color&lt;/a&gt; +111%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bubkoo/html-to-image"&gt;html-to-image&lt;/a&gt; +88%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/saadeghi/daisyui"&gt;DaisyUI&lt;/a&gt; +73%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/snowpackjs/astro"&gt;Astro&lt;/a&gt; +58%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;Machine Learning for Beginners&lt;/a&gt; +53%&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For all for the latest rankings please checkout &lt;a href="https://stargazing.dev"&gt;Stargazing.dev&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/iain_freestone"&gt;follow me&lt;/a&gt; on Twitter where I regularly post bite size tips relating to HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Laravel Dashboard Templates - Open-source and FREE</title>
      <author>Sm0ke</author>
      <pubDate>Fri, 13 Aug 2021 13:47:37 +0000</pubDate>
      <link>https://dev.to/sm0ke/laravel-dashboard-template-curated-list-34nf</link>
      <guid>https://dev.to/sm0ke/laravel-dashboard-template-curated-list-34nf</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents a curated list of open-source &lt;strong&gt;&lt;a href="https://www.admin-dashboards.com/laravel-dashboard-template-curated-list/"&gt;Laravel Dashboard Templates&lt;/a&gt;&lt;/strong&gt; crafted on top of modern UI kits by well-known agencies and open-source enthusiasts. Projects are actively supported and sources can be downloaded from Github under permissive licenses (MIT, LGPL).  For newcomers, &lt;strong&gt;Laravel&lt;/strong&gt; is a free, open-source PHP web framework intended to develop web applications following the model–view–controller (MVC) pattern.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://www.admin-dashboards.com/"&gt;Admin Dashboards&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;(free) &lt;a href="https://bit.ly/3xHOk93"&gt;Laravel Soft UI Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;(free) &lt;a href="https://bit.ly/3m12EY8"&gt;Vue Material Dashboard Laravel&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;(free) &lt;a href="https://themesberg.com/product/laravel/volt-admin-dashboard-template"&gt;Volt Laravel Admin Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;(free) &lt;a href="https://github.com/coreui/coreui-free-laravel-admin-template"&gt;CoreUI Laravel&lt;/a&gt; - Github Repository&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Disclosure&lt;/em&gt; - &lt;strong&gt;This post contains affiliate links&lt;/strong&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you use these links to buy something (no additional cost to you) I may earn a commission, product, or service. &lt;strong&gt;Thank you!&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#laravel-template-soft-dashboard"&gt;
  &lt;/a&gt;
  Laravel Template - Soft Dashboard
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Soft UI Dashboard Laravel&lt;/strong&gt; comes with dozens of handcrafted UI elements tailored for Bootstrap 5 and an out-of-the-box Laravel backend. The Livewire integration allows you to build dynamic interfaces easier without leaving the comfort of your favorite framework. If you combine this even further with Alpine.js, you get the perfect combo for kickstarting your next project.&lt;/p&gt;

&lt;p&gt;Whether you're working on a side project or delivering to a client, we've got you covered. Soft UI Dashboard Laravel is released under MIT license, so you can use it both for personal and commercial projects for free. All you need to do is start coding.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/3AHgVgn"&gt;Laravel Soft UI Dashboard&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/3xHOk93"&gt;Laravel Soft UI Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vS1YL8q2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8lts9f05dlazme5unxel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vS1YL8q2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8lts9f05dlazme5unxel.png" alt="Laravel Dashboard Template - Soft UI Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#laravel-template-material-design"&gt;
  &lt;/a&gt;
  Laravel Template - Material Design
&lt;/h2&gt;

&lt;p&gt;Using this open-source starter, even beginners are able to build awesome-looking apps with a flexible architecture across a variety of devices and operating systems. &lt;strong&gt;Material Dashboard&lt;/strong&gt; makes use of light, surface, and movement. The general layout resembles sheets of paper following multiple different layers so that the depth and order is obvious. The navigation stays mainly on the left sidebar and the content is on the right inside the main panel.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/2VMtEiQ"&gt;Laravel Template Material Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/3m12EY8"&gt;Laravel Template Material Dashboard&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--usnLSwca--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9d49w92ncw4c4idqkld.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--usnLSwca--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9d49w92ncw4c4idqkld.png" alt="Laravel Template - Material Design."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#volt-laravel-dashboard-template"&gt;
  &lt;/a&gt;
  Volt Laravel Dashboard Template
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Volt Dashboard Laravel&lt;/strong&gt; features dozens of handcrafted UI elements tailored for Bootstrap 5 and an out-of-the-box Laravel backend. The Livewire integration allows you to build dynamic interfaces easier without leaving the comfort of your favorite framework. If you combine this even further with Alpine.js, you get the perfect combo for your next big project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://themesberg.com/product/laravel/volt-admin-dashboard-template"&gt;Volt Laravel Template&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://volt-laravel-admin-dashboard.updivision.com/"&gt;Volt Laravel Template&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9HlC1Sc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sea6mqw5rk8bovu3118m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9HlC1Sc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sea6mqw5rk8bovu3118m.png" alt="Laravel Dashboard Template - Volt Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#coreui-laravel-dashboard-template"&gt;
  &lt;/a&gt;
  CoreUI Laravel Dashboard Template
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2VTDaxg"&gt;CoreUI&lt;/a&gt; is meant to be the UX game changer. Pure &amp;amp; transparent code is devoid of redundant components, so the app is light enough to offer ultimate user experience. This means mobile devices also, where the navigation is just as easy and intuitive as on a desktop or laptop.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/coreui/coreui-free-laravel-admin-template"&gt;CoreUI Laravel Dashboard Template&lt;/a&gt; - source code&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/2VTDaxg"&gt;CoreUI&lt;/a&gt; - project HOMEpage&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fw82OnHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp877kp5u6nynyj521nz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fw82OnHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp877kp5u6nynyj521nz.png" alt="CoreUI Laravel Dashboard Template - Open-source starter crafted in Laravel by CoreUI agency."&gt;&lt;/a&gt; &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more Laravel resources please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://laravel.com/"&gt;Laravel&lt;/a&gt; - the official website&lt;/li&gt;
&lt;li&gt;More &lt;a href="https://bit.ly/3gE4Hi3"&gt;Laravel Free Themes&lt;/a&gt; crafted by Creative-Tim &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>laravel</category>
      <category>webdev</category>
      <category>dashboards</category>
    </item>
    <item>
      <title>Play in one team with your body, not against each other</title>
      <author>Nikita Grechino</author>
      <pubDate>Fri, 13 Aug 2021 13:32:07 +0000</pubDate>
      <link>https://dev.to/fromaline/play-in-one-team-with-your-body-not-against-each-other-4olh</link>
      <guid>https://dev.to/fromaline/play-in-one-team-with-your-body-not-against-each-other-4olh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-problem"&gt;
  &lt;/a&gt;
  A problem
&lt;/h2&gt;

&lt;p&gt;As a beginner developer, I want to study fundamental computer science concepts, practice algorithms/data structures skills, complete side-projects, and of course, try out all new JS frameworks. In short, I need to take a step in the right direction every day. But it seems like there isn’t enough time on a typical day. I wake up, have breakfast, take a shower, get to work, and have a rest with my friends and family in the evening.&lt;/p&gt;

&lt;p&gt;Wait, why I don’t have time in the morning? Oh, it’s because I usually hit a snooze button dozens of times and feel pretty sleepy, anyway. However, I already tweaked my sleeping schedule several times, but still to no avail.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-solution"&gt;
  &lt;/a&gt;
  A solution
&lt;/h2&gt;

&lt;p&gt;So, isn’t there a better way to start a day to maximize productivity from the ground up? Turns out, there is.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do not use an alarm clock at all.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As many of you know, the human body has a so-called biological clock. The clock governs a sleep-wake cycle but also affects mood and mental alertness. But an alarm clock disturbs the natural mechanism by forcing your body to wake up whether or not you got enough sleep.&lt;/p&gt;

&lt;p&gt;As always, the dose makes the poison. If you set an alarm clock once a month, it’s not a big deal. However, its daily usage completely disorients your natural clock.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-implement-new-knowledge-in-real-life"&gt;
  &lt;/a&gt;
  How to implement new knowledge in real life?
&lt;/h2&gt;

&lt;p&gt;Developers have a lot of flexibility in working hours and it’s the ideal situation to achieve alarm-less life. First, warn colleagues about your experiment. Then forget about alarm clocks for a week, but follow the simple rule.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Stop kidding yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you nod off, go to bed. When you feel tired, go to bed. There is no workaround. So get used to it.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-result"&gt;
  &lt;/a&gt;
  A result
&lt;/h2&gt;

&lt;p&gt;I noticed positive results after a week of the new routine. I went to sleep in the gap between 10:30 and 11:30 PM, and my body waked me up around 6 AM.&lt;/p&gt;

&lt;p&gt;I’ve been following the new routine for two months now and I’m eager to continue. I have enough time to study CS in the morning every day and have a rest after full-time work. It’s all because now we play in one team with my body, not against each other.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>studying</category>
      <category>morning</category>
    </item>
    <item>
      <title>Getting Started with Systems Programming with Rust (Part 1)</title>
      <author>Beka Modebadze</author>
      <pubDate>Fri, 13 Aug 2021 13:25:35 +0000</pubDate>
      <link>https://dev.to/bexxmodd/getting-started-with-systems-programming-with-rust-part-1-2i13</link>
      <guid>https://dev.to/bexxmodd/getting-started-with-systems-programming-with-rust-part-1-2i13</guid>
      <description>&lt;p&gt;You can find original post on &lt;a href="https://www.bexxmodd.com/post/systems-programming-with-rust-1"&gt;my personal blog.&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;A modern computer is a very complex creation that evolved into the current state through decades of research and development. Sometimes it appears to be like black magic. There’s no magic in it, just science. However, some of the minds like Alan Turing, Charles Babbage, Ada Lovelace, John von Neumann, and many others are magical, as they made this possible.&lt;/p&gt;
&lt;br&gt;


&lt;p&gt;Ok, that’s enough of introductions and let us dive into the fundamentals of systems programming. In this part we’ll learn:&lt;/p&gt;
&lt;br&gt;&lt;ul&gt;- What is the process?&lt;/ul&gt;
&lt;ul&gt;- How are they created and executed?&lt;/ul&gt;
&lt;ul&gt;- Look at some code examples in Rust and compare them to C.&lt;/ul&gt;
&lt;br&gt;&lt;p&gt;  Before diving into code we’ll start to build up from the lowest level of the main components of the operating systems. As shown in Figure 1-a the lowest level of any computer is Hardware, next comes the Kernel mode which runs on bare metal. This is where the operating system, like Linux, is located.&lt;/p&gt;
&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jHT-juyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2AYFdpr8NZXzEo8vSOOVKj0g.png"&gt;&lt;p&gt;  Figure 1-a.  &lt;/p&gt;


&lt;/center&gt;
&lt;br&gt;&lt;p&gt;  On top of the Kernel mode, we have a User-mode. For a user to be able to interact with the kernel AND use other higher-level software, like web browser, E-mail reader, etc. it requires a user interface program. This can be a window, Graphical User Interface, or it can be a shell which is a &lt;b&gt;command interpreted &lt;/b&gt;that is used to read commands from a terminal and execute them&lt;/p&gt;
&lt;br&gt;&lt;h2&gt;  Processes: Parent and Child&lt;/h2&gt;  The main concept in all operating systems is a process. A process is basically a running program. You can think of it as a drawer that contains all the information about that particular program. Some processes start running at the start of the computer, some run in the background, and some are called and interacted by the user, through the shell, for example.&lt;br&gt;&lt;p&gt;  All the processes have an id. The very first process is initiated, when the system is booted. This process has an id of 1 and is called init. After that, init will call other processes and so on. When we type a command in a shell for the OS to execute, the system should create a new process that will run the compiler. When the process has finished compiling, it will make a system call to terminate itself.&lt;/p&gt;
&lt;br&gt;&lt;p&gt;  In UNIX systems every new process is a child process of some parent process. Process creation is done by cloning a parent process, which is referred to as forking (Figure 1-b). Each process has one parent but can have multiple child processes. The structure of the processes resembles a tree, where init is the root, meaning it’s at the top of the hierarchy.&lt;/p&gt;
&lt;br&gt;&lt;p&gt;  After the process’s creation, the parent and the child processes are the same, except the parent will have some arbitrary ID number, and the child process will have an ID equal to 0. Next, the system substitutes the child process’s execution with a new program. When the process is done fulfilling its purpose, it’s terminated and exited normally (voluntary). The process can also be exited due to an error or killed by another process (involuntary).&lt;/p&gt;
&lt;br&gt;&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eh7Kr5gv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AlCncraMXCqZZlRqm9mT31g.gif"&gt;&lt;p&gt;  Figure 1-b.  &lt;/p&gt;
&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;&lt;br&gt;&lt;p&gt;  The system also keeps track of all the processes, maintaining their data in what’s called a &lt;b&gt;processes table&lt;/b&gt;. It holds information like process id, process owner, process priority, environment variables for each process, the parent process. In addition to that, it also holds the info in what state a particular process is. Each process can be in one of the following four states:&lt;/p&gt;
&lt;br&gt;&lt;ul&gt;RUNNABLE — The process is running / actively using the CPU.&lt;/ul&gt;
&lt;ul&gt;SLEEPING — The process is runnable, but is waiting for another process to stop/finish first.&lt;/ul&gt;
&lt;ul&gt;STOPPED — This state indicates that the process has been suspended for further proceeding. It can be restarted to run again by a signal.&lt;/ul&gt;
&lt;ul&gt;ZOMBIE — The process is terminated when ‘system exit’ is called or someone else kills the process. However, the process has not been removed from the process table.&lt;/ul&gt;
&lt;br&gt;&lt;p&gt;  Often processes have to interact with each other and can change the state and go from Running to sleeping, then back to running (Figure 1-c). This is usually done by a &lt;code&gt;SIGSTOP&lt;/code&gt; signal, which is issued by Ctrl + Z (We’ll review signals in-depth in upcoming parts). Same with the stopped process, its activity can be restarted. Except for the Zombie state, which once killed can’t be restarted or continued.&lt;/p&gt;
&lt;br&gt;&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Y3MKKk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A9FvTHt_LyvtmJhfnjmwzFw.png"&gt;&lt;p&gt; Figure 1-c.  &lt;/p&gt;
&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;&lt;h2&gt;C vs Rust&lt;/h2&gt;
&lt;p&gt;  In C, which is an official Linux kernel programming language, process creation is done first by forking the new process and then explicitly asking a system to execute a new directive on a child process. If we don’t do that, both parent and child processes will be executing the same directive. Here is an example of executing &lt;code&gt;ls&lt;/code&gt; command, which lists files of given directory:  &lt;/p&gt;
&lt;br&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include stdio.h
#include sys/types.h
#include sys/wait.h
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;pid_t&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fork failed"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I'm child process and I will execute ls command"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv_list&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;execv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ls"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error in execve"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default:&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I'm parent process and I'll just print this"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;  As you can see we have to manage the processes manually and monitor if the execution was successful. Also, we have to handle errors. If we want a command to be executed only by a child we have to manually check if the current process is a child, which is done here by &lt;code&gt;case 0&lt;/code&gt;. In Rust, the same can be achieved with a &lt;a href="https://doc.rust-lang.org/std/process/struct.Command.html"&gt;standard library’s process module&lt;/a&gt;:&lt;br&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;process&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ls"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nf"&gt;.env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PATH"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"/bin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nf"&gt;.output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to execute process"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c"&gt;// if no error, program will continue..&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;br&gt;&lt;p&gt; Here &lt;code&gt;Command::new()&lt;/code&gt;is a process builder which is responsible for spawning and handling a child process. Just like in a C code, we supply a command we want to execute, environmental variables, command argument, and call &lt;code&gt;output&lt;/code&gt; method on it. The output will execute the command as a child process, waiting for it to finish, and returns the collected output.&lt;/p&gt;
&lt;br&gt;&lt;p&gt;  Instead of &lt;code&gt;output()&lt;/code&gt; we also have options to use either &lt;code&gt;status()&lt;/code&gt; or &lt;code&gt;spawn()&lt;/code&gt;. Each of these methods is responsible for forking a child process with subtle differences:&lt;/p&gt;
&lt;br&gt;&lt;ul&gt;
&lt;code&gt;output()&lt;/code&gt; : Will run the program and return a result of the &lt;code&gt;Output&lt;/code&gt;, only after child processes finish running.  &lt;/ul&gt;
&lt;ul&gt;
&lt;code&gt;status()&lt;/code&gt;: Will run the program and return a result of &lt;code&gt;ExitStatus&lt;/code&gt; after process compilation. This allows checking the status of the compiled program.&lt;/ul&gt;
&lt;ul&gt;
&lt;code&gt;spawn()&lt;/code&gt;: Will run the program and return a result which is a &lt;code&gt;Child&lt;/code&gt; process. This doesn’t wait for the program compilation. This option allows for &lt;code&gt;wait&lt;/code&gt; and &lt;code&gt;kill&lt;/code&gt; directives or we can get an id of that process.&lt;/ul&gt;
&lt;br&gt;&lt;p&gt;  Here, &lt;code&gt;env()&lt;/code&gt; is optional, as the Command is smart enough to look for the path of a /bin folder. Finally, all the error handling is done by &lt;code&gt;expect()&lt;/code&gt;. It unwraps the result if &lt;code&gt;Ok&lt;/code&gt;, meaning the program was executed successfully, or &lt;code&gt;Err&lt;/code&gt; if something went wrong and will &lt;code&gt;panic!&lt;/code&gt;. If you want your program not to terminate if &lt;code&gt;Err&lt;/code&gt; encountered you can do something like this:&lt;/p&gt;
&lt;br&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;process&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;get_user_input&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c"&gt;// custom function&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                            &lt;span class="nf"&gt;.envs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PATH"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"/bin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                            &lt;span class="nf"&gt;.status&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}: command not found!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// the rest of the program...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;br&gt;&lt;p&gt;  Here &lt;code&gt;status()&lt;/code&gt; is handier and calling it will return &lt;code&gt;Ok&lt;/code&gt; if the legit command is supplied by the user and execute. But we are only interested in handling if the unavailable command was supplied. That’s why we only check if &lt;code&gt;Err&lt;/code&gt; was returned, and if so print that “command was not found” into the terminal and continue the current program execution, instead of terminating.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;spawn()&lt;/code&gt; is used to manage the order of execution between several children and parent processes. It contains &lt;code&gt;stdin&lt;/code&gt; &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; fields and has, familiar to C programmers, &lt;code&gt;wait()&lt;/code&gt; , &lt;code&gt;kill()&lt;/code&gt; and &lt;code&gt;id()&lt;/code&gt; methods. We’ll look at this part of the processes in the next part and we’ll also see how Rust takes care of race conditions when two or more threads can access shared data and they try to change it at the same time.&lt;/p&gt;
&lt;br&gt;&lt;h2&gt; Summary&lt;/h2&gt;
&lt;p&gt;  In this introductory part, we reviewed what are processes, how they are created and compared Rust's implementation of the processes creation and command execution to C. We saw that Rust code not only is less prone to human errors but it’s less verbose and more concise. In the next parts, we’ll take a look at managing processes execution time and states, and handling system signals&lt;/p&gt;

</description>
      <category>rust</category>
      <category>systems</category>
      <category>programming</category>
      <category>linux</category>
    </item>
    <item>
      <title>Making a Media Library with Redwood</title>
      <author>Milecia</author>
      <pubDate>Fri, 13 Aug 2021 13:09:01 +0000</pubDate>
      <link>https://dev.to/flippedcoding/making-a-media-library-with-redwood-2do7</link>
      <guid>https://dev.to/flippedcoding/making-a-media-library-with-redwood-2do7</guid>
      <description>&lt;p&gt;You might have a blog or a site that specializes in giving users video and image content. You can make yourself a media library to manage all of your content and keep it relevant to your users. That way you can see the exact data you need and you can arrange your images and videos in ways that don't affect users.&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll make a small media library to handle videos and images for us. You'll be able to upload the videos and images to Cloudinary and then show them in your own library. We'll be storing references to that content in our own Postgres database that we could use to reference images in other places.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-cloudinary-account"&gt;
  &lt;/a&gt;
  Setting up a Cloudinary account
&lt;/h2&gt;

&lt;p&gt;The first thing we'll do is set up a Cloudinary account. You can &lt;a href="https://cloudinary.com/signup"&gt;sign up for a free account here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then you'll have a single place to upload all of your users' media content. That way you don't have to worry about storing all of your content and you can just fetch and upload your videos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-redwood-app"&gt;
  &lt;/a&gt;
  Setting up the Redwood app
&lt;/h2&gt;

&lt;p&gt;Now you can go to a terminal and we'll make our new Redwood app with the following command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn create redwood-app media-library&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When this finishes, you'll have a full-stack app that just needs a little updating. In the &lt;code&gt;api&lt;/code&gt; folder you'll find all of the code to handle your database and GraphQL back-end. In the &lt;code&gt;web&lt;/code&gt; folder you'll find the code for the React front-end. We'll start with the database schema because Redwood uses this to handle a lot of work for us.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-the-models"&gt;
  &lt;/a&gt;
  Making the models
&lt;/h3&gt;

&lt;p&gt;Open &lt;code&gt;schema.prisma&lt;/code&gt; in the &lt;code&gt;api &amp;gt; db&lt;/code&gt; directory. Make sure to update your &lt;code&gt;provider&lt;/code&gt; to &lt;code&gt;postgresql&lt;/code&gt; instead of &lt;code&gt;sqlite&lt;/code&gt; since we'll using a Postgres database. Take a moment to update the &lt;code&gt;.env&lt;/code&gt; file in the root of the project. You'll need to uncomment the &lt;code&gt;DATABASE_URL&lt;/code&gt; value and update it to your Postgres connection string. It might look like this.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DATABASE_URL=postgres://postgres:admin@localhost:5432/media_library&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you don't have Postgres installed locally, &lt;a href="https://www.postgresql.org/download/"&gt;you can download it here&lt;/a&gt; and get your connection string from pgAdmin once the installation is finished.&lt;/p&gt;

&lt;p&gt;You can close &lt;code&gt;.env&lt;/code&gt; now and go back to &lt;code&gt;schema.prisma&lt;/code&gt; because we need to add our models. You can delete the example model in the file and add the following ones.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;Video&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;       &lt;span class="nx"&gt;Int&lt;/span&gt;    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;autoincrement&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;     &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;duration&lt;/span&gt; &lt;span class="nx"&gt;Float&lt;/span&gt;
  &lt;span class="nx"&gt;url&lt;/span&gt;      &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;     &lt;span class="nx"&gt;Int&lt;/span&gt;    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;autoincrement&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;   &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;url&lt;/span&gt;    &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have the database schema ready so we can run a quick migration to set up the database.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw prisma migrate dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will create the tables with the columns and constraints we defined in the models. Just to have some data to look at, we'll seed our database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seeding-the-database"&gt;
  &lt;/a&gt;
  Seeding the database
&lt;/h3&gt;

&lt;p&gt;Inside of &lt;code&gt;api &amp;gt; db&lt;/code&gt;, open &lt;code&gt;seed.js&lt;/code&gt; and delete all of the commented out code in the &lt;code&gt;main&lt;/code&gt; function. We'll be adding our own seed calls with the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beth_vid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;765.34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beth_img&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;example.com/beth.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run this command to seed your database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rw prisma db seed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With your fresh data applied, we can move on to the best part of Redwood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-redwood-to-generate-the-frontend-and-backend"&gt;
  &lt;/a&gt;
  Using Redwood to generate the front-end and back-end
&lt;/h2&gt;

&lt;p&gt;Now we'll use my favorite Redwood command to generate the CRUD to work with videos for the front-end and back-end of this project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw g scaffold video&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This one command generates a React front-end to handle everything we need to add video records to the database. If you look in &lt;code&gt;api &amp;gt; db &amp;gt; src &amp;gt; graphql&lt;/code&gt;, you'll see a new sdl file that contains all of the types for our queries and mutations for handling videos. In &lt;code&gt;api &amp;gt; db &amp;gt; src &amp;gt; services&lt;/code&gt;, you'll see a new &lt;code&gt;videos&lt;/code&gt; directory. This folder has all of the resolvers to handle the database updates. It also has a test that you can add on to.&lt;/p&gt;

&lt;p&gt;On the front-end of the app, take a look at &lt;code&gt;web &amp;gt; src &amp;gt; pages&lt;/code&gt;, you'll see a lot of new directories for videos. These contain pages that show different aspects of the CRUD functionality.&lt;/p&gt;

&lt;p&gt;Take a look in &lt;code&gt;web &amp;gt; src &amp;gt; components&lt;/code&gt; and you'll see even more directories for videos. These directories contain the files that handle the data on the front-end and the form we could use to handle adding videos to the database.&lt;/p&gt;

&lt;p&gt;We're going to run the &lt;code&gt;scaffold&lt;/code&gt; command one more time to generate all of the files for images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rw g scaffold image
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is everything we need to start working with the Cloudinary upload widget.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-cloudinary-upload-widget"&gt;
  &lt;/a&gt;
  Adding the Cloudinary upload widget
&lt;/h2&gt;

&lt;p&gt;We're not actually going to use the form to add videos to the database. We're going to do that automatically after we upload the videos to Cloudinary. To start with, we'll add the Cloudinary widget to the &lt;code&gt;NewVideo&lt;/code&gt; component. We can use a package to add this widget so we'll install that in the &lt;code&gt;web&lt;/code&gt; directory first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add react-cloudinary-upload-widget
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go to &lt;code&gt;web &amp;gt; src &amp;gt; components &amp;gt; NewVideo&lt;/code&gt; and edit the file there. This is where the edit form for the video gets pulled in. We'll add the import for the upload widget components we need along with the other imports.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;WidgetLoader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Widget&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-cloudinary-upload-widget&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we'll add the uploader widget components. In the code right above the &lt;code&gt;VideoForm&lt;/code&gt;, add this code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;WidgetLoader&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Widget&lt;/span&gt;
  &lt;span class="nx"&gt;sources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;camera&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
  &lt;span class="nx"&gt;cloudName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CLOUD_NAME&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;uploadPreset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UPLOAD_PRESET&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;120px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;25px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;successCallBack&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While you can check out what each of these props does for the widget in the &lt;a href="https://github.com/bubbaspaarx/react-cloudinary-upload-widget#readme"&gt;README in the repo&lt;/a&gt;, there are a few we need to highlight. The &lt;code&gt;CLOUD_NAME&lt;/code&gt; and &lt;code&gt;UPLOAD_PRESET&lt;/code&gt; need to be defined in your &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-an-upload-preset-in-the-cloudinary-console"&gt;
  &lt;/a&gt;
  Making an upload preset in the Cloudinary console
&lt;/h3&gt;

&lt;p&gt;You'll need the values for these two fields and you'll get those from your Cloudinary console. The cloud name is on the dashboard as soon as you log in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8I0093ZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/cloud_name.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8I0093ZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/cloud_name.png" alt="cloud name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll need to go to the &lt;a href="https://cloudinary.com/console/settings/upload"&gt;settings page for uploads&lt;/a&gt; and create a new unsigned upload preset. Your upload setting page will look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybxXVo3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1625837578/e-603fc55d218a650069f5228b/vyiyxaahjdaxbqpt1zio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybxXVo3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1625837578/e-603fc55d218a650069f5228b/vyiyxaahjdaxbqpt1zio.png" alt="upload settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you scroll down the page a bit, you'll see the "Upload presets" section. Click on "Add upload preset" to create a new unsigned preset. You be taken to a page that looks like this and the only thing you need to do is change "Signed" to "Unsigned" and save that change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Hy-P6Ag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1625837557/e-603fc55d218a650069f5228b/p0y8npxjslxqqv2cuqgk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Hy-P6Ag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1625837557/e-603fc55d218a650069f5228b/p0y8npxjslxqqv2cuqgk.png" alt="preset settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The value you see for "Upload preset name" is what you will need to set for your &lt;code&gt;UPLOAD_PRESET&lt;/code&gt; in the &lt;code&gt;.env&lt;/code&gt;. With these two values, you're &lt;code&gt;.env&lt;/code&gt; should look similar to this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;CLOUD_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;test0
&lt;span class="nv"&gt;UPLOAD_PRESET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;rftg435ebtre4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#making-the-success-callback"&gt;
  &lt;/a&gt;
  Making the success callback
&lt;/h3&gt;

&lt;p&gt;Now that we have those values in place, we need to define the callback for a successful video upload. This is where we'll get the URL to store in the database and where we'll make that GraphQL call now. You can delete the form now!&lt;/p&gt;

&lt;p&gt;The success callback will look like this. It'll go right above the &lt;code&gt;return&lt;/code&gt; statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;successCallBack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;videoInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;videoInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;original_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;videoInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;videoInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;createVideo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run the app with &lt;code&gt;yarn rw dev&lt;/code&gt; and go to &lt;code&gt;http://localhost:8910/videos/new&lt;/code&gt; in your browser, you should see a new button above the form that says "Open". This opens the Cloudinary upload widget.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--00s8NsB8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1625837461/e-603fc55d218a650069f5228b/crvkstwqwqpmmpl8y85a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--00s8NsB8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1625837461/e-603fc55d218a650069f5228b/crvkstwqwqpmmpl8y85a.png" alt="upload button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKt4BABy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1625837490/e-603fc55d218a650069f5228b/g85drai4anpv5gtjm62x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKt4BABy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1625837490/e-603fc55d218a650069f5228b/g85drai4anpv5gtjm62x.png" alt="upload widget"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Upload a few videos and you'll see you get redirected to the main videos page that has a table with references to all your videos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zt9wbXxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1625837507/e-603fc55d218a650069f5228b/utyqalhfdskofvzblktx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zt9wbXxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1625837507/e-603fc55d218a650069f5228b/utyqalhfdskofvzblktx.png" alt="video table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All that's left now is to show the videos on this page in a library format!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#showing-the-media"&gt;
  &lt;/a&gt;
  Showing the media
&lt;/h2&gt;

&lt;p&gt;Now you'll need to go to &lt;code&gt;web &amp;gt; src &amp;gt; components &amp;gt; Videos&lt;/code&gt; and open &lt;code&gt;Video.js&lt;/code&gt;. This is the file that has the table we see with our video info listed. We're going to keep the table and add the videos above it.&lt;/p&gt;

&lt;p&gt;Since this component already has all of the video data fetched, we're going to add another &lt;code&gt;.map&lt;/code&gt; over the videos and create new elements. Add this code right above the table element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
  &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;flexWrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;space-evenly&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;marginBottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;24px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;videos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;320&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;240&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video/mp4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Your&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="nx"&gt;does&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;support&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/video&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;))}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you reload your page, you should see something similar to this, but with your videos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wuwcw49P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1625837530/e-603fc55d218a650069f5228b/cpstw0fbzbeypf4bazx1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wuwcw49P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1625837530/e-603fc55d218a650069f5228b/cpstw0fbzbeypf4bazx1.png" alt="video library"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're done! Now you have a fully functional media library. You can customize how content is displayed and how users interact with it if you add a little more imagination to what we started. You could add this functionality to the &lt;code&gt;Image&lt;/code&gt; components we didn't cover. (It's why I put them in this guide.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finished-code"&gt;
  &lt;/a&gt;
  Finished code
&lt;/h2&gt;

&lt;p&gt;You can check out the full code in this GitHub repo in the &lt;code&gt;media-library&lt;/code&gt; directory. Or you can check out the front-end in this &lt;a href="https://codesandbox.io/s/beautiful-shape-n5gjs"&gt;Code Sandbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: You won't be able to see everything in the Code Sandbox because it doesn't support monorepos like Redwood.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Storing media references to your own database can give you the flexibility to monitor changes over time. They can also act as a buffer against people trying to access your Cloudinary account. Some performance aspects might also make media references in your database useful.&lt;/p&gt;

&lt;p&gt;Regardless of what your reasons are, now you know how to handle this use case quickly with the help of Redwood.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>graphql</category>
    </item>
    <item>
      <title>Smashed a DEV Bug: Tiny regex fix</title>
      <author>Siddharth</author>
      <pubDate>Fri, 13 Aug 2021 12:54:07 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/smashed-a-dev-bug-tiny-regex-fix-208</link>
      <guid>https://dev.to/siddharthshyniben/smashed-a-dev-bug-tiny-regex-fix-208</guid>
      <description>&lt;h3&gt;
  &lt;a href="#i-fixed-a-tiny-regex"&gt;
  &lt;/a&gt;
  I fixed a tiny regex
&lt;/h3&gt;

&lt;p&gt;Hey there! I'm Siddharth Shyniben, a 13 year old dev just coding for a hobby. I participated in the &lt;a href="https://dev.to/devteam/bug-smash-is-back-join-the-challenge-g41"&gt;DEV Bug smash v2&lt;/a&gt;, and I wrote this post to tell you about it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-source-background"&gt;
  &lt;/a&gt;
  Open Source Background
&lt;/h3&gt;

&lt;p&gt;I started coding around ~4 years back, after being inspired by my father, who does the same. Back then, my code was only on my computer, and I never dreamed of my code being viewed by everyone. Once I &lt;del&gt;discovered&lt;/del&gt; started using GitHub around 2 years ago, all that changed. Suddenly, everyone could see my code, and report bugs, and contribute. I could host sites using GitHub pages. &lt;/p&gt;

&lt;p&gt;GitHub was what introduced me to open-source. Seeing how beneficial open-source was to me (and everyone else), I started open sourcing almost all my work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-this-bug"&gt;
  &lt;/a&gt;
  About This Bug
&lt;/h3&gt;

&lt;p&gt;The bug was a very simple one, and most of you may not have seen it.&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/14334"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Bad regex for detecting SVG on Navigation Links
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#14334&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/omenking"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--FD117d3Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/7776%3Fv%3D4" alt="omenking avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/omenking"&gt;omenking&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/14334"&gt;&lt;time&gt;Jul 26, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;The dreaded error:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/7776/126993336-98586854-0676-42de-98da-dafc584bdf8f.png" rel="nofollow"&gt;&lt;img width="1018" alt="Screen Shot 2021-07-26 at 8 57 12 AM" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCKEvDdb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7776/126993336-98586854-0676-42de-98da-dafc584bdf8f.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code in question:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-v"&gt;NavigationLink&lt;/span&gt; &amp;lt; &lt;span class="pl-v"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="pl-c1"&gt;SVG_REGEXP&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-pds"&gt;/&amp;lt;svg .*&amp;gt;/i&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;freeze&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Testing with rubular
&lt;a href="https://user-images.githubusercontent.com/7776/126993412-d9c51c0a-650b-4843-8d64-9eb9ca3a3595.png" rel="nofollow"&gt;&lt;img width="955" alt="Screen Shot 2021-07-26 at 9 03 10 AM" src="https://res.cloudinary.com/practicaldev/image/fetch/s--bLVuXMAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7776/126993412-d9c51c0a-650b-4843-8d64-9eb9ca3a3595.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So the problem is that the Regex expects svg text to be all on a single line:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/7776/126993535-996ea229-fb5e-42d5-9ea6-13ae1ee26d47.png" rel="nofollow"&gt;&lt;img width="1026" alt="Screen Shot 2021-07-26 at 9 06 04 AM" src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkCemulE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7776/126993535-996ea229-fb5e-42d5-9ea6-13ae1ee26d47.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When exporting svg from illustrator it will sometimes insert a XML schema tag first.&lt;/p&gt;
&lt;p&gt;Yep Single line formatting fixed it:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/7776/126994357-a23f4f06-62e7-4988-9532-748d166e89a8.png" rel="nofollow"&gt;&lt;img width="597" alt="Screen Shot 2021-07-26 at 9 11 39 AM" src="https://res.cloudinary.com/practicaldev/image/fetch/s--F39n5r-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7776/126994357-a23f4f06-62e7-4988-9532-748d166e89a8.png"&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/14334"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;When you use &lt;a href="https://github.com/forem/forem"&gt;Forem&lt;/a&gt; to create a new community, you get to customize the sidebar, including the icons of the links. There is a function to validate the icon SVG, which looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/&amp;lt;svg .*&amp;gt;/i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But this regex wouldn't match multiline SVGs, so we had to manually remove all the newlines in the SVG.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-i-smashed-it"&gt;
  &lt;/a&gt;
  How I Smashed It
&lt;/h3&gt;

&lt;p&gt;The bug was pretty easy to smash, just had to add a single flag:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/&amp;lt;svg .*&amp;gt;/im
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/pull/14481"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Navigation Link: fix regex to allow multiline SVG
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#14481&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/SiddharthShyniben"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJYP2Q0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/76640268%3Fv%3D4" alt="SiddharthShyniben avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/SiddharthShyniben"&gt;SiddharthShyniben&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/pull/14481"&gt;&lt;time&gt;Aug 12, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;h2&gt;
&lt;a id="user-content-what-type-of-pr-is-this-check-all-applicable" class="anchor" href="#what-type-of-pr-is-this-check-all-applicable"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What type of PR is this? (check all applicable)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Refactor&lt;/li&gt;
&lt;li&gt;[ ] Feature&lt;/li&gt;
&lt;li&gt;[x] Bug Fix&lt;/li&gt;
&lt;li&gt;[ ] Optimization&lt;/li&gt;
&lt;li&gt;[ ] Documentation Update&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-description" class="anchor" href="#description"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Description&lt;/h2&gt;
&lt;p&gt;Allows the regex which is used to test SVG match multiline SVGs. Fixes #14334&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-related-tickets--documents" class="anchor" href="#related-tickets--documents"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Related Tickets &amp;amp; Documents&lt;/h2&gt;
&lt;p&gt;Closes #14334&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-qa-instructions-screenshots-recordings" class="anchor" href="#qa-instructions-screenshots-recordings"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;QA Instructions, Screenshots, Recordings&lt;/h2&gt;
&lt;p&gt;NA&lt;/p&gt;
&lt;h3&gt;
&lt;a id="user-content-ui-accessibility-concerns" class="anchor" href="#ui-accessibility-concerns"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;UI accessibility concerns?&lt;/h3&gt;
&lt;p&gt;NA&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-addedupdated-tests" class="anchor" href="#addedupdated-tests"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Added/updated tests?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Yes&lt;/li&gt;
&lt;li&gt;[x] No, and this is why: Not sure if there are any tests for this&lt;/li&gt;
&lt;li&gt;[x] I need help with writing tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-forem-core-team-only-how-will-this-change-be-communicated" class="anchor" href="#forem-core-team-only-how-will-this-change-be-communicated"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;[Forem core team only] How will this change be communicated?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Will this PR introduce a change that impacts Forem members or creators, the
development process, or any of our internal teams? If so, please note how you
will share this change with the people who need to know about it.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] I've updated the &lt;a href="https://docs.forem.com" rel="nofollow"&gt;Developer Docs&lt;/a&gt; and/or
&lt;a href="https://admin.forem.com/" rel="nofollow"&gt;Admin Guide&lt;/a&gt;, or
&lt;a href="https://storybook.forem.com/" rel="nofollow"&gt;Storybook&lt;/a&gt; (for Crayons components)&lt;/li&gt;
&lt;li&gt;[ ] I've updated the README or added inline documentation&lt;/li&gt;
&lt;li&gt;[ ] I've added an entry to
&lt;a href="https://github.com/forem/forem/tree/main/CHANGELOG.md"&gt;&lt;code&gt;CHANGELOG.md&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] I will share this change in a &lt;a href="https://forem.dev/t/changelog" rel="nofollow"&gt;Changelog&lt;/a&gt;
or in a &lt;a href="http://forem.dev" rel="nofollow"&gt;forem.dev&lt;/a&gt; post&lt;/li&gt;
&lt;li&gt;[ ] I will share this change internally with the appropriate teams&lt;/li&gt;
&lt;li&gt;[ ] I'm not sure how best to communicate this change and need help&lt;/li&gt;
&lt;li&gt;[ ] This change does not need to be communicated, and this is why not: &lt;em&gt;please
replace this line with details on why this change doesn't need to be
shared&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-optional-are-there-any-post-deployment-tasks-we-need-to-perform" class="anchor" href="#optional-are-there-any-post-deployment-tasks-we-need-to-perform"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;[optional] Are there any post deployment tasks we need to perform?&lt;/h2&gt;
&lt;p&gt;NA&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-optional-what-gif-best-describes-this-pr-or-how-it-makes-you-feel" class="anchor" href="#optional-what-gif-best-describes-this-pr-or-how-it-makes-you-feel"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;[optional] What gif best describes this PR or how it makes you feel?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/478418d6b8447180205637546eb37373e6150f8d2863a19b8ae15528a9159da8/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f5a3969414d664f446c514737774c6f584b4e2f736f757263652e676966" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/478418d6b8447180205637546eb37373e6150f8d2863a19b8ae15528a9159da8/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f5a3969414d664f446c514737774c6f584b4e2f736f757263652e676966" alt="Teeny Tiny one"&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/pull/14481"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reflection"&gt;
  &lt;/a&gt;
  Reflection
&lt;/h3&gt;

&lt;p&gt;This was a pretty basic issue, and I can only consider this a warmup, so there's nothing much to say here. But, I've taken up another issue, and I'll elaborate when I write about that :D.&lt;/p&gt;

&lt;p&gt;One &lt;strong&gt;super important&lt;/strong&gt; takeaway, is that once you learn one programming language, most other ones are pretty easy to use. I have &lt;em&gt;zero&lt;/em&gt; experience in ruby, but guess what? I've smashed 2 bugs (one from the previous bug smash). So, If you're worried because you don't know a programming language used – don't worry, It might take you less than a day to learn it. This applies to a lot of stuff.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suggestions-for-dev-community-bug-smash"&gt;
  &lt;/a&gt;
  Suggestions for DEV Community Bug Smash
&lt;/h3&gt;

&lt;p&gt;More bug smashes! There's a really great feeling when you contribute to OSS! Maybe you could make this a seasonal thing :D&lt;/p&gt;

</description>
      <category>devbugsmash</category>
    </item>
    <item>
      <title>Today's Daily Dose of Programming Humor</title>
      <author>Daily Developer Jokes</author>
      <pubDate>Fri, 13 Aug 2021 12:00:18 +0000</pubDate>
      <link>https://dev.to/dailydeveloperjokes/today-s-daily-dose-of-programming-humor-3c70</link>
      <guid>https://dev.to/dailydeveloperjokes/today-s-daily-dose-of-programming-humor-3c70</guid>
      <description>&lt;p&gt;Hi there! Here's today's Daily Developer Joke. We hope you enjoy it; it's a good one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--awdS7kd0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e12593b1b51e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--awdS7kd0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e12593b1b51e.png" alt="Joke Image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;For more jokes, and to submit your own joke to get featured, check out the &lt;a href="https://dailydeveloperjokes.github.io/"&gt;Daily Developer Jokes Website&lt;/a&gt;. We're also open sourced, so feel free to view &lt;a href="https://github.com/dailydeveloperjokes"&gt;our GitHub Profile&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leave-this-post-a-if-you-liked-todays-joke-and-stay-tuned-for-tomorrows-joke-too"&gt;
  &lt;/a&gt;
  Leave this post a ❤️ if you liked today's joke, and stay tuned for tomorrow's joke too!
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This joke comes from &lt;a href="https://github.com/wesbos/dad-jokes"&gt;Dad-Jokes GitHub Repo by Wes Bos&lt;/a&gt; (thank you!), whose owner has given me permission to use this joke with credit.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>dailydeveloperjokes</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Did you know: local-first-cooperation?</title>
      <author>Alexander Halemba</author>
      <pubDate>Fri, 13 Aug 2021 11:44:32 +0000</pubDate>
      <link>https://dev.to/alexander89/did-you-know-local-first-cooperation-f1l</link>
      <guid>https://dev.to/alexander89/did-you-know-local-first-cooperation-f1l</guid>
      <description>&lt;p&gt;This is definitely something I like to share with you:&lt;/p&gt;

&lt;p&gt;Some pretty smart people try to evolve software to the next level. I am currently working on a project using this pattern technic and will publish DevLog videos as soon I get them post processed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.local-first-cooperation.org/:"&gt;https://www.local-first-cooperation.org/:&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discover-realworld-usecases"&gt;
  &lt;/a&gt;
  Discover real-world use-cases
&lt;/h2&gt;

&lt;p&gt;See how Local-First Cooperation applies to a wide range of use-cases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nUeWsGyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5k8q3j0w40o83o1jlqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nUeWsGyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5k8q3j0w40o83o1jlqm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>localfirst</category>
      <category>eventsourcing</category>
      <category>architecture</category>
      <category>distributedsystems</category>
    </item>
    <item>
      <title>Big O, code efficiency analysis</title>
      <author>Andrei Chirila</author>
      <pubDate>Fri, 13 Aug 2021 11:44:27 +0000</pubDate>
      <link>https://dev.to/kerosz/big-o-code-efficiency-analysis-phk</link>
      <guid>https://dev.to/kerosz/big-o-code-efficiency-analysis-phk</guid>
      <description>&lt;p&gt;In this article I would do my best to introduce you to algorithmic complexity and a way to roughly measure it by using the Big O notation. You can also check the &lt;strong&gt;original&lt;/strong&gt;  article at &lt;a href="https://www.chirila.dev/writing"&gt;chirila.dev/writing/cfa&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-measuring-code-efficiency-is-important"&gt;
  &lt;/a&gt;
  Why measuring code efficiency is important
&lt;/h2&gt;

&lt;p&gt;First of, probably the most significant fact to &lt;strong&gt;why it is important&lt;/strong&gt;, is because we want to reason about how the code we currently have affects our programs. We can test our code on a smaller scale, but &lt;em&gt;how are we going to predict the way our code is going to run on a bigger scale&lt;/em&gt; and how the code we write is able to solve a problem of a particular size.&lt;/p&gt;

&lt;p&gt;Second reason, would be to understand &lt;strong&gt;how the code we write, when we design or implement an algorithm would affect the problem at hand&lt;/strong&gt;. You can start taking decisions based on how certain data structures, or implementation details can impact the final time complexity of our program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-we-care"&gt;
  &lt;/a&gt;
  Why should we care
&lt;/h2&gt;

&lt;p&gt;One argument that is usually given, on why you shouldn't care about it, is that computers are getting progressively faster, thus making the computations faster. But on the other hand, the data volume that is being computed gets bigger and bigger, to the point that in 2016 google announced that they are serving &lt;strong&gt;130.000.000.000.000&lt;/strong&gt; &lt;em&gt;(130 trillion)&lt;/em&gt; pages, compared to their report from 2013 when they only served around 30.000.000.000.000 (30 trillion). While computers getting faster is undoubtedly true, we can see how the data volume we are working with gets massive, so writing just a simple algorithm that goes over the whole data set isn't enough, even today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pre-requirements"&gt;
  &lt;/a&gt;
  Pre requirements
&lt;/h2&gt;

&lt;p&gt;To follow along with this article it would be advised to have some previews knowledge on the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;basic understanding of algorithms&lt;/li&gt;
&lt;li&gt;basic understanding of computer science fundamentals&lt;/li&gt;
&lt;li&gt;basic understanding of data structures&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#code-analysis"&gt;
  &lt;/a&gt;
  Code analysis
&lt;/h2&gt;

&lt;p&gt;Now that we understand why writing efficient code matters, let's talk about what makes our code efficient and how do we measure the complexity of an algorithm.&lt;/p&gt;

&lt;p&gt;We can measure an algorithm complexity by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;time &lt;em&gt;(duration)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;space &lt;em&gt;(memory)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this in mind, there comes a big problem, how do we &lt;strong&gt;generalize and abstract&lt;/strong&gt; these measurements. If we are talking about time complexity, how do we measure the time our program takes to execute a piece of code. We can definitely use timers to find out, which would be the intuitive way of doing it, in &lt;strong&gt;node&lt;/strong&gt; we can simply record the time before and after the execution and subtract those values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;average&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Execution time: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;ms`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Doing it this particular way, exposes our measurements to inconsistency:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;execution time, &lt;strong&gt;varies between algorithms&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;execution time, &lt;strong&gt;varies between implementations&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;execution time, &lt;strong&gt;varies between systems/computers&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;execution time, &lt;strong&gt;is not predictable on lager scale&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to &lt;em&gt;consistently&lt;/em&gt; measure an algorithm we need a better alternative, that can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;count the amount of operations we perform without worrying of implementation details&lt;/li&gt;
&lt;li&gt;focus on how the time and space complexities scale&lt;/li&gt;
&lt;li&gt;measure the algorithm based on the &lt;strong&gt;size of the input&lt;/strong&gt; and the number of steps taken&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#growth-of-operations"&gt;
  &lt;/a&gt;
  Growth of operations
&lt;/h3&gt;

&lt;p&gt;Let's look at a code example, that will iterate over a list of elements and return whether or not an element exists within the list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this scenario, what is the time complexity of our code ? Well, &lt;strong&gt;it depends&lt;/strong&gt; on how lucky you are. It could be that the first element in the list is our element, in that case it only goes over the loop once, and it's done, this is known as &lt;strong&gt;best case scenario&lt;/strong&gt;. But it can as well be that our element isn't within the list, in that case we have to go through the entire list and return &lt;em&gt;false&lt;/em&gt;, which is the &lt;strong&gt;worst case scenario&lt;/strong&gt;. We can also run multiple examples on this code and see how many iterations it goes through, and that will give us the &lt;strong&gt;average case&lt;/strong&gt;, on average we are likely to look at half of the list to find our element.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#asymptotic-notations"&gt;
  &lt;/a&gt;
  Asymptotic Notations
&lt;/h4&gt;

&lt;p&gt;Asymptotic notations are mathematical tools used to represent the complexities of algorithms. There are three notations that are commonly used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Big Omega (Ω) Notation&lt;/code&gt;, gives a lower bound of an algorithm &lt;em&gt;(best case)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Big Theta (Θ) Notation&lt;/code&gt;, gives an exact bound of an algorithm &lt;em&gt;(average case)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Big Oh (O) Notation&lt;/code&gt;, gives an upper bound of an algorithm &lt;em&gt;(worst case)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes is useful to look at the average case to give you a rough sense of how the algorithm will perform in the long run, but when we talk about code analysis we usually talk about &lt;strong&gt;worst case&lt;/strong&gt;, because it usually defines the bottleneck we are after.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#big-o-notation"&gt;
  &lt;/a&gt;
  Big O Notation
&lt;/h2&gt;

&lt;p&gt;Let's look at the example from before, that computes the average of a given list of numbers, and specifically at line &lt;em&gt;3&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;average&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We right away notice a loop which goes from a starting point of &lt;code&gt;i = 0&lt;/code&gt; to the &lt;code&gt;i &amp;lt; nums.length&lt;/code&gt;, meaning that the time complexity of this code would be the size of the given input &lt;code&gt;nums&lt;/code&gt;, in this case having a length of &lt;strong&gt;3&lt;/strong&gt; &lt;em&gt;(elements in the list of nums)&lt;/em&gt;. We can generalize the input name as &lt;code&gt;n&lt;/code&gt;. Therefor we can say the complexity of our average function is &lt;strong&gt;O(3n)&lt;/strong&gt;, furthermore we can drop any coefficients and constants and we are left with a complexity of &lt;strong&gt;O(n)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;At this point you might wonder how are we able to drop that 3; that's just a simplification we make which is possible because Big O is only interested in how the performance of our algorithm changes in relation with the size of the input.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simplifications"&gt;
  &lt;/a&gt;
  Simplifications
&lt;/h3&gt;

&lt;p&gt;Let's look at some example simplifications to better understand how we can simplify our notation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O(6 * n) = &lt;strong&gt;O(n)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;O(14n) = O(14 * n) = &lt;strong&gt;O(n)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;O(3891n) = O(3891 * n) = &lt;strong&gt;O(n)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;O(n / 4) = O(¼ * n) = &lt;strong&gt;O(n)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;O(3n * n * 322) = O(n * n) = &lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;O(n&lt;sup&gt;2&lt;/sup&gt; + 2n + 9) = &lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;O(800 + n + n&lt;sup&gt;3&lt;/sup&gt; + n&lt;sup&gt;2&lt;/sup&gt;) = &lt;strong&gt;O(n&lt;sup&gt;3&lt;/sup&gt;)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;O(4n&lt;sup&gt;12&lt;/sup&gt; + 2&lt;sup&gt;n&lt;/sup&gt;) = &lt;strong&gt;O(2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;O(441) = &lt;strong&gt;O(1)&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we have seen some examples we can go ahead and &lt;em&gt;define&lt;/em&gt; some rules:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Law of Multiplication&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;used with &lt;code&gt;nested&lt;/code&gt; statements
&amp;gt; &lt;em&gt;When Big O is the product of multiple terms, we can drop any coefficients and constants&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Law of Addition&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;used with &lt;code&gt;sequential&lt;/code&gt; statements
&amp;gt; &lt;em&gt;When Big O is the sum of multiple terms, we can keep the largest term, and drop the rest&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#time-complexity-analysis-examples"&gt;
  &lt;/a&gt;
  Time complexity analysis examples
&lt;/h4&gt;

&lt;p&gt;To better understand how we can analyze the time complexity of our code and simplify our notation let's look at some trivial examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// We have 2 separate loops&lt;/span&gt;
&lt;span class="c1"&gt;// O(3n + 3n) = O(n) -&amp;gt; addition, we keep the largest term&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;exampleOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// calling the function with [1, 2, 3] -&amp;gt; list of length 3&lt;/span&gt;
&lt;span class="nx"&gt;exampleOne&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;// We have 2 separate loops, one of them being a nested loop&lt;/span&gt;
&lt;span class="c1"&gt;// O(5n * 5n + n / 2) = O(n² + n) = O(n²) -&amp;gt; addition, we keep the largest term&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;exampleTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// code&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// calling the function with [5, 6, 7, 8, 9] -&amp;gt; list of length 5&lt;/span&gt;
&lt;span class="nx"&gt;exampleTwo&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;// First outer loop, iterates a constant number of times (100), and has a nested loop&lt;/span&gt;
&lt;span class="c1"&gt;// Second loop, iterates a constant number of times (4350)&lt;/span&gt;
&lt;span class="c1"&gt;// O(100 * 4n + 4350) = O(n) -&amp;gt; addition, we keep the largest term&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;exampleThree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// code&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4350&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// calling the function with [2, 4, 6, 8] -&amp;gt; list of length 4&lt;/span&gt;
&lt;span class="nx"&gt;exampleThree&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#space-complexity-analysis-examples"&gt;
  &lt;/a&gt;
  Space complexity analysis examples
&lt;/h4&gt;

&lt;p&gt;Until now we only talked about time but space is equally important depending on the specifications of our system. It might be the case that we have a limited memory and thus we would have to make some time complexity tradeoffs in order to gain some better space complexity.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 3 variables created that are not dependent of the input size&lt;/span&gt;
&lt;span class="c1"&gt;// O(3) = O(1) -&amp;gt; simplification of a constant term&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// declaring a variable 'total'&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// declaring a variable 'i' once&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/**
    Even though we create this variable every loop
    at the end of each iteration it will be disposed
    so we only ever have one variable
    */&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// 3 variables created, one grows with the input size&lt;/span&gt;
&lt;span class="c1"&gt;// O(2 + n) = O(n) -&amp;gt; addition, we keep the largest term&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// variable grows with the input size&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reversedList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// pushing each element in the list in the 'reversedList' thus growing it's size&lt;/span&gt;
    &lt;span class="nx"&gt;reversedList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#complexity-classes"&gt;
  &lt;/a&gt;
  Complexity classes
&lt;/h3&gt;

&lt;p&gt;There are a set of complexity classes that we will go over in an ascending order from most performant to least performant ones.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--10cZaF79--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.stack.imgur.com/WcBRI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--10cZaF79--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.stack.imgur.com/WcBRI.png" alt="Big O Complexity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's have a look on how these classes would scale with the input size;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;th&gt;n=10&lt;/th&gt;
&lt;th&gt;n=100&lt;/th&gt;
&lt;th&gt;n=1000&lt;/th&gt;
&lt;th&gt;n=1000000&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(log n)&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;1000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(n log(n))&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;3000&lt;/td&gt;
&lt;td&gt;6000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(n²)&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;1000000&lt;/td&gt;
&lt;td&gt;1000000000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(2ⁿ)&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;1267650600228229401496703205376&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Have fun!&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Have fun!&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#constant-o1"&gt;
  &lt;/a&gt;
  Constant – O(1)
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;amount of time or steps it takes does not depend on the input size&lt;/li&gt;
&lt;li&gt;can have loops or recursive functions as long as the number of iteration or calls are independent of the input size&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we want to identify constant time we usually look for operations that aren't growing/scaling with the input size, typically code that doesn't iterate over the size of the input. Some operations that we consider to run in constant time are: &lt;strong&gt;arithmetic operations&lt;/strong&gt;, &lt;strong&gt;accessing an array index&lt;/strong&gt;, &lt;strong&gt;hashmap lookups&lt;/strong&gt;, &lt;strong&gt;inserting a node into a linked list&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Time: O(1) -&amp;gt; does not depend on the input size&lt;/span&gt;
&lt;span class="c1"&gt;// Space: O(1) -&amp;gt; does not grow with the input&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Time: O(1)&lt;/span&gt;
&lt;span class="c1"&gt;// Space: O(1)&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sumFirstAndLast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// accessing array index and getting it's length is a constant operation&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#logarithmic-ologn"&gt;
  &lt;/a&gt;
  Logarithmic – O(log(n))
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;amount of time or steps it takes grows as a logarithm of the input size&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To better understand what this means, we need to understand what a &lt;em&gt;logarithm&lt;/em&gt; is, in short a &lt;code&gt;logarithm&lt;/code&gt; is the opposite of an &lt;code&gt;exponent&lt;/code&gt;. If in the case of an exponent we multiply, in the case of a logarithm we &lt;strong&gt;divide&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exponent&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;2&lt;sup&gt;4&lt;/sup&gt; = 16&lt;/strong&gt; – 2 * 2 * 2 * 2&lt;/li&gt;
&lt;li&gt;we say 2 to the power of 4 is 16&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Logarithm&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;log216 = 4&lt;/strong&gt; – 16 / 2 = 8 / 2 = 4 / 2 = 2 / 2 = 1&lt;/li&gt;
&lt;li&gt;we count how many times &lt;em&gt;(4 times)&lt;/em&gt; we divided by &lt;em&gt;2&lt;/em&gt; which is our &lt;strong&gt;base&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;we say log in base 2 of 16 is 4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some algorithms that have log complexity are &lt;strong&gt;binary search&lt;/strong&gt; and &lt;strong&gt;bisection search&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Time: O(log(n)) -&amp;gt; each iteration we divide by 2&lt;/span&gt;
&lt;span class="c1"&gt;// Space: O(1)&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;countDownStep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Binary search of a list&lt;/span&gt;
&lt;span class="c1"&gt;// Time: O(log(n)) -&amp;gt; each iteration we divide our list by 2&lt;/span&gt;
&lt;span class="c1"&gt;// Space: O(1)&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// if element is at the middle we return it's index&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// going either right or left of the list&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;       
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#linear-on"&gt;
  &lt;/a&gt;
  Linear – O(n)
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;amount of time or steps it takes depends on the size of the input&lt;/li&gt;
&lt;li&gt;iterative loops and recursive functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have seen a lot of linear iterative complexity at this point, so let's jump into some examples where I would include an iterative and recursive linear complexity example &lt;em&gt;(if you are not familiar with recursion I would advice to research it, will write an article about it at some point and link it here)&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Iterative factorial&lt;/span&gt;
&lt;span class="c1"&gt;// Time: O(n) -&amp;gt; iterating n times&lt;/span&gt;
&lt;span class="c1"&gt;// Space: O(1) &lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;iterFactorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;product&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Recursive factorial&lt;/span&gt;
&lt;span class="c1"&gt;// Time: O(n) -&amp;gt; number of function calls is dependent of n&lt;/span&gt;
&lt;span class="c1"&gt;// Space: O(n) -&amp;gt; there are always n function calls in our call stack&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;recurFactorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// base case&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;recurFactorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you were to time these 2 functions, you may notice that the recursive one runs slower then the iterative version, due to the function calls. You can optimize it using a &lt;code&gt;memoization&lt;/code&gt; strategy, but I would talk about this in another article.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#linearithmic-on-logn"&gt;
  &lt;/a&gt;
  Linearithmic – O(n log(n))
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;amount of time or steps it takes depends on the size of the input that grows logarithmic&lt;/li&gt;
&lt;li&gt;sequential loops nested in log complexity loops&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linearithmic complexity is also known as &lt;strong&gt;loglinear&lt;/strong&gt; or &lt;strong&gt;n log n&lt;/strong&gt;, this particular complexity class is bigger than &lt;em&gt;O(n)&lt;/em&gt; but smaller than &lt;em&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/em&gt;. Many practical algorithms are linearithmic, most commonly used being &lt;strong&gt;merge sort&lt;/strong&gt; and &lt;strong&gt;quick sort&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Time: O(n log(n)) -&amp;gt; sequential loop (slice method), nested into log loop&lt;/span&gt;
&lt;span class="c1"&gt;// Space: O(1)&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;iterPrintHalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Time: O(n log(n)) -&amp;gt; sequential loop (slice method), into log recursive call&lt;/span&gt;
&lt;span class="c1"&gt;// Space: O(n) -&amp;gt; there are always n size function calls in our call stack&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;recurPrintHalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;recurPrintHalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#polynominal-onc"&gt;
  &lt;/a&gt;
  Polynominal – O(n&lt;sup&gt;c&lt;/sup&gt;)
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;n&lt;/em&gt; being the size of input and &lt;em&gt;c&lt;/em&gt; being a constant, where &lt;code&gt;c &amp;gt; 1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;typically multiple nested loops or recursive calls&lt;/li&gt;
&lt;li&gt;includes quadratic &lt;em&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/em&gt;, cubic &lt;em&gt;O(n&lt;sup&gt;3&lt;/sup&gt;)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the polynominal algorithms are quadratic and include &lt;strong&gt;bubble sort&lt;/strong&gt;, &lt;strong&gt;insertion sort&lt;/strong&gt;, &lt;strong&gt;selection sort&lt;/strong&gt;, &lt;strong&gt;traversing 2D arrays&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Time: O(n²) -&amp;gt; 2 nested loops&lt;/span&gt;
&lt;span class="c1"&gt;// Space: O(1)&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bubbleSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temp1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temp2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;temp2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// swap&lt;/span&gt;
        &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// update&lt;/span&gt;
        &lt;span class="nx"&gt;temp1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;temp2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#exponential-ocn"&gt;
  &lt;/a&gt;
  Exponential – O(c&lt;sup&gt;n&lt;/sup&gt;)
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;n&lt;/em&gt; being the size of input and &lt;em&gt;c&lt;/em&gt; being a constant, where &lt;code&gt;c &amp;gt; 1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;recursive functions, where more than one call is made for each size of the input&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many important problems are exponential by nature but as cost can be high it leads us to consider more approximate solutions as they provide better time complexities. Some exponential algorithms include &lt;strong&gt;towers of hanoi&lt;/strong&gt;, &lt;strong&gt;recursive fibonacci&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Time: O(2ⁿ) -&amp;gt; two recursive calls are made for each input&lt;/span&gt;
&lt;span class="c1"&gt;// Space: O(n) -&amp;gt; we only have n calls on the call stack&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This recursive function can be optimized by using a &lt;code&gt;memoization&lt;/code&gt; strategy.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#factorial-on"&gt;
  &lt;/a&gt;
  Factorial – O(n!)
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;recursive functions, where each call is dependent on the input size&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main difference between exponential and factorial is that in exponential we make a &lt;em&gt;constant&lt;/em&gt; number of recursive calls, where in factorial we are making &lt;em&gt;n&lt;/em&gt; number calls. Popular algorithms that are factorial include &lt;strong&gt;traveling salesman&lt;/strong&gt;, &lt;strong&gt;permutations&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Time: O(n!) -&amp;gt; n recursive calls are made based on the size of the input&lt;/span&gt;
&lt;span class="c1"&gt;// Space: O(n) -&amp;gt; we only have n calls on the call stack&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;trivialExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// code&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;trivialExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Time: O(n!) -&amp;gt; n recursive calls are made based on the size of the input&lt;/span&gt;
&lt;span class="c1"&gt;// Space: O(n) -&amp;gt; we only have n calls on the call stack&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reminder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reminder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We talked about why writing efficient code is important and what are some strategies we can take to measure our code efficiency. We introduced Big O Notation as a solution to generally analyze the complexities of our algorithms, and briefly mentioned the other 2 asymptotic notations. We then analyzed some code using Big O notation, and talked about the most used complexity classes and how are they scaling with the input size, giving examples to better visualize and understand the way we typically analyze our code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.chirila.dev/writing"&gt;Original Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Big_O_notation"&gt;Big O Notation Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Time_complexity"&gt;Time complexity Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bigocheatsheet.com/"&gt;Big O Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.stat.rice.edu/~dobelman/notes_papers/math/big_O.little_o.pdf"&gt;Asymptotic Notations RICE University&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
