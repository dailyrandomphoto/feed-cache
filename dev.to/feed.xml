<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learning Python-Basic course: Day 25,Summary of the basic course.</title>
      <author>Aatmaj</author>
      <pubDate>Fri, 30 Jul 2021 05:08:46 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-25-summary-of-the-basic-course-563j</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-25-summary-of-the-basic-course-563j</guid>
      <description>&lt;p&gt;So friends today is the last lecture of the basic course and today we will just summarize whatever we learnt till now.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-1-introduction-and-installation-ee8"&gt;Day 1&lt;/a&gt;&lt;/strong&gt; We learnt what is Python, installed Python and wrote our very first hello world program. We also understood why Python is advantageous to other languages like C and Java.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-2-statements-comments-and-indentation-5b71"&gt;Day 2&lt;/a&gt;&lt;/strong&gt; We learnt about Python statement types like assignments, expressions, declarations. We learnt how comments are written and the need of indentation. We then solved a few practice programs. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-3-operators-and-if-elif-else-51cc"&gt;Day 3&lt;/a&gt;&lt;/strong&gt; We covered logical, relational, assignment and arithmetic operators, saw how they work. Then we understood the if-else syntax and solved a few problems on that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-4-the-for-loop-40m8"&gt;Day 4&lt;/a&gt;&lt;/strong&gt; We learnt the For Loop in Python, how it differed from C, and solved some questions related to it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-5-summary-of-the-week-and-interview-questions-37m0"&gt;Day 5&lt;/a&gt;&lt;/strong&gt; After quickly summarizing the week's learnings, we solved some questions which are asked in technical interviews.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-6-the-while-loop-and-more-questions-k23"&gt;Day 6&lt;/a&gt;&lt;/strong&gt; We learnt about the while loop, checked the meaning behind &lt;code&gt;while-else&lt;/code&gt; and solved questions related to it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-7-exercises-and-coding-challenges-2l2b"&gt;Day 7&lt;/a&gt;&lt;/strong&gt; We solved some more exciting questions on the for and while loop, and an coding challenge.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-8-unicode-in-python-4pdc"&gt;Day 8&lt;/a&gt;&lt;/strong&gt; We learnt about Unicode in Python and solved questions. We learnt the use of &lt;code&gt;ord()&lt;/code&gt; and &lt;code&gt;chr()&lt;/code&gt; methods. the &lt;code&gt;ord&lt;/code&gt; method returns the unicode of the charater while &lt;code&gt;chr()&lt;/code&gt; returns the character.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-9-summary-of-the-week-and-exercises-ji6"&gt;Day 9&lt;/a&gt;&lt;/strong&gt; After summarizing the week's learnings, we practiced everything related to it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-10-lists-in-python-1hcb"&gt;Day 10&lt;/a&gt;&lt;/strong&gt; We learnt about lists in Python, and various list functions like popping, appending, copying and much more. We then used these functions for creating a program for dynamic generation of lists.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-11-multidimensional-lists-and-tuples-3bfl"&gt;Day 11&lt;/a&gt;&lt;/strong&gt; We learnt about multidimensional lists, dynamic generation of multidimensional lists and had an introduction to tuples. We learnt that tuples were non mutable lists which cannot be changed or altered in anyway after they are hardcoded.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-12-basic-algorithms-1edc"&gt;Day 12&lt;/a&gt;&lt;/strong&gt; We used lists to make algorithms like bubble sorting, binary searching and sequential searching.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-13-summary-of-the-week-and-stack-implementation-1b56"&gt;Day 13&lt;/a&gt;&lt;/strong&gt; We learnt how to implement stack in Python and summarized the week. Stacks and queues can be easily implemented in Python using lists and some cleaver use of it's inbuilt functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-14-basic-exception-and-error-handling-using-try-except-5f38"&gt;Day 14&lt;/a&gt;&lt;/strong&gt; we covered the &lt;code&gt;try&lt;/code&gt; &lt;code&gt;catch&lt;/code&gt; statements, and basic exception handling. Advanced exception handling and types of exceptions, user defined exceptions is for later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-15-more-about-try-except-1nmj"&gt;Day 15&lt;/a&gt;&lt;/strong&gt; We solved some creative questions based on &lt;code&gt;try&lt;/code&gt; &lt;code&gt;catch&lt;/code&gt; and learnt about nesting them. We also saw one really challenging question related to &lt;code&gt;try&lt;/code&gt; &lt;code&gt;except&lt;/code&gt; &lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-15-more-about-try-except-1nmj"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-16-fractal-lists-and-other-questions-1ca6"&gt;Day 16&lt;/a&gt;&lt;/strong&gt; We solved more questions on lists now with the added power of &lt;code&gt;try&lt;/code&gt; &lt;code&gt;except&lt;/code&gt;. We covered questions like fractal lists, alphabetical order of lists and reversing lists.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-17-summary-of-the-week-and-insertion-sort-4bi0"&gt;Day 17&lt;/a&gt;&lt;/strong&gt; We learnt how to implement insertion sort in Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-18-dictionaries-in-python-30af"&gt;Day 18&lt;/a&gt;&lt;/strong&gt; We learnt about dictionaries. We checked out one example which covered many inbuilt functions related to dictionaries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-19-practicing-dictionary-exercises-1723"&gt;Day 19&lt;/a&gt;&lt;/strong&gt; We practiced a few questions on dictionaries and had quite a thorough practice of dictionaries in Python. We did programs to fuse two separate lists to a single dictionary, paired out even numbers and made fancy dictionaries using for loops.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-20-hashtables-via-dictionaries-3nf1"&gt;Day 20&lt;/a&gt;&lt;/strong&gt; We learnt about hashtables and how to create them using dictionaries. We tried out simple and chained hashtables and worked out information retrieval using them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-21-summary-of-the-week-and-dictionary-exercises-391e"&gt;Day 21&lt;/a&gt;&lt;/strong&gt; This lecture was devoted to solving exercises related to dictionaries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-22-string-methods-part-1-9j8"&gt;Day 22&lt;/a&gt;&lt;/strong&gt; We covered string methods for effects like case changing, word manipulations, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/aatmaj/day-23-fi9"&gt;Day 23&lt;/a&gt;&lt;/strong&gt; We leant about the string methods which are required for GUI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=""&gt;Day 24&lt;/a&gt;&lt;/strong&gt;- We finished off with string functions&lt;/p&gt;



&lt;p&gt;Epilogue- We all know that neither me nor you have ever seen each other. Learning in remote environment is a difficult, and teaching is perhaps even more difficult. Teaching is never a one-way process. When a teacher teaches with pattern, he/she expects that the student must respond back. Either with doubts, remarks or nods of approval.&lt;br&gt;
But friends, being remote, we cannot interact with each other. The only way we can connect is through the comments below. So I urge everyone to comment on the posts. Currently I am in doubt whether you all are understanding me or not. Should I speed up the pace or maybe explain more clearly? I am not getting any feedback from you. Any doubts, discussions, remarks or even a simple hi from you is a great source of motivation for me. So I look forward to your comments below...😊&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;This marks the end of the Basic module of the Learning Python Course!&lt;/p&gt;




&lt;p&gt;Please visit the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning Python Repository&lt;/a&gt;, which contains all the material for this course.&lt;/p&gt;




&lt;p&gt;You all can ask me any doubts by forking &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/main/Basic/Doubts/Doubts.md"&gt;this file&lt;/a&gt; and sending a pull request.&lt;/p&gt;

</description>
      <category>python</category>
      <category>learningpython</category>
    </item>
    <item>
      <title>How to Add BUY ME A COFFEE Button in DEV.TO Blog</title>
      <author>capscode</author>
      <pubDate>Fri, 30 Jul 2021 04:58:47 +0000</pubDate>
      <link>https://dev.to/capscode/how-to-add-buy-me-a-coffee-button-in-dev-to-blog-1d23</link>
      <guid>https://dev.to/capscode/how-to-add-buy-me-a-coffee-button-in-dev-to-blog-1d23</guid>
      <description>&lt;p&gt;Hello Dev, &lt;/p&gt;

&lt;p&gt;In this article i will show you and help you out adding &lt;strong&gt;"BUY ME A COFFEE"&lt;/strong&gt; button in you &lt;strong&gt;dev.to&lt;/strong&gt; blog post in very simple and easiest way (ONLY IN 2 STEPS).&lt;/p&gt;

&lt;p&gt;So without wasting any time, lets get into the article&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 1&lt;/strong&gt; : Please first make your account @ &lt;a href="http://www.buymeacoffee.com"&gt;www.buymeacoffee.com&lt;/a&gt; and get your username.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 2&lt;/strong&gt; : Add the below anchor tag wherever you want to add your buy me a coffee button in your blog post.&lt;br&gt;
 and make sure to add your username in &lt;code&gt;href&lt;/code&gt; link : &lt;code&gt;https://www.buymeacoffee.com/your_username&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.buymeacoffee.com/capscode"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.buymeacoffee.com/buttons/default-orange.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Buy Me A Coffee"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"41"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"174"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#if-you-liked-the-post-then-you-can-buy-me-my-first-coffee-ever-thanks-in-advance"&gt;
  &lt;/a&gt;
  IF YOU LIKED THE POST, THEN YOU CAN BUY ME MY FIRST COFFEE EVER, THANKS IN ADVANCE.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/capscode"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading this far. This is a brief introduction oN &lt;strong&gt;How to add BUY ME A COFFFEE BUTTON IN DEV.TO BLOG POST&lt;/strong&gt; .&lt;br&gt;
If you find this article useful, like and share this article. Someone could find it useful too. If you find anything technically inaccurate please feel free to comment below.&lt;/p&gt;

&lt;p&gt;Hope its a nice and informative read for you.&lt;br&gt;
VISIT &lt;a href="https://www.capscode.in/#/blog"&gt;https://www.capscode.in/#/blog&lt;/a&gt; TO LEARN MORE...&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/capscode"&gt;@capscode&lt;/a&gt;
 &lt;/p&gt;

</description>
      <category>discuss</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>6 Key Lesson’s to Learn From Rich Dad Poor Dad for Programmers</title>
      <author>Afzal Imam</author>
      <pubDate>Fri, 30 Jul 2021 04:35:49 +0000</pubDate>
      <link>https://dev.to/afzalimamias/6-key-lesson-s-to-learn-from-rich-dad-poor-dad-for-programmers-4knp</link>
      <guid>https://dev.to/afzalimamias/6-key-lesson-s-to-learn-from-rich-dad-poor-dad-for-programmers-4knp</guid>
      <description>&lt;p&gt;For any person in the world to achieve financial freedom, it is most important to have a strong financial education.&lt;/p&gt;

&lt;p&gt;According to experts, the best way to increase financial education is to read books. This is the reason that many books in the world are written on this topic and the most popular book named &lt;a href="https://pdfbooks.myeduwaves.com/2020/07/rich-dad-poor-dad-pdf-free-download.html"&gt; Rich Dad Poor Dad &lt;/a&gt;, written by American author Robert Kiyosaki, is also one of those books. A lot of people read this book to achieve their goals and become successful in life.&lt;/p&gt;

&lt;p&gt;That is why it is considered one of the most famous books in the world in terms of financial education. In today's post, I will tell you 6 important lessons and a summary of this book.&lt;/p&gt;

&lt;p&gt;The story of the book Rich Dad Poor Dad is based on author Robert Kiyosaki's own life. In this book, he writes about his two fathers, one of whom is his real father, whom he has given the title of Poor Dad, and the other is his mouth-bolt father who is actually his friend's father and he is named Rich Dad in the book.&lt;/p&gt;

&lt;p&gt;In fact, his real father is a very educated and hard-working person, a teacher by profession and financially very weak. That's why Robert calls him Poor Dad in the book.&lt;/p&gt;

&lt;p&gt;On the other hand, his mouth-bolt father has studied only till class VIII. But due to strong financial education, he is counted among the biggest and richest businessman of his city. That's why Robert calls him Rich Dad in the book.&lt;/p&gt;

&lt;p&gt;In this entire story, Robert's rich dad gives him six important lessons at different stages of his life for 30 years which are very important to succeed in life, become rich and stay rich forever.&lt;/p&gt;

&lt;p&gt;6 lessons told by Robert's rich dad can make any person rich and successful in the world, no matter how poorly educated is that person. So let us tell you about the same six lessons written by Robert in the book.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lesson-no-1-rich-dont-work-for-money-money-work-for-them"&gt;
  &lt;/a&gt;
  Lesson No 1. Rich Don't Work For Money, Money Work For Them
&lt;/h2&gt;

&lt;p&gt;Robert's rich dad explains that most of the people in the world have been trapped in a particular circle for many decades and he calls this circle the Rat Race. In fact, most of the people in the world today only want to study in a good college, find a good job, get married and then keep paying for things like home and car from their salary for the rest of their lives.&lt;/p&gt;

&lt;p&gt;People do not realize that they work hard in this kind of life, but only someone else gets the benefit of their hard work. Many people are also unhappy to be a part of this Rat Race. But still, because of the fear, greed and responsibilities of their mind, they compulsively remain a part of it.&lt;/p&gt;

&lt;p&gt;Rich Dad says that a person should first get out of this Rat Race by eliminating his fear and then do something in which you should not work for money but make money work for you. There is an old saying that money attracts money. In the same way, you also need to do something in your life in which only your money can earn for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lesson-no-2-keeping-money-is-more-important-than-making-it"&gt;
  &lt;/a&gt;
  Lesson No 2. Keeping Money Is More Important Than Making It
&lt;/h2&gt;

&lt;p&gt;You will get to see many such sportsmen and celebrities in the world who were once very rich. But today they have nothing. In fact, people go from rich to poor in this way because they lack financial education. They do not have the skill to maintain and grow money.&lt;/p&gt;

&lt;p&gt;Giving an example of this financial illiteracy, Rich Dad says that all over the world a house is considered an asset, whereas according to him, a house is not an asset but a liability. Because assets are those that increase your money even more over time, whereas in the case of a house you have to pay its EMI and loan for many years. Due to which money does not come in your pocket but only goes.&lt;/p&gt;

&lt;p&gt;Rich dad considers only those things as assets that make you earn money sitting at home. They say that only earning money is not enough to become rich, but it is most important to learn how to maintain and grow your money.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lesson-no-3-get-in-your-business-along-with-your-job"&gt;
  &lt;/a&gt;
  Lesson No 3. Get In Your Business Along With Your Job
&lt;/h2&gt;

&lt;p&gt;When a person gets his favourite job, he makes up his mind to do it for the rest of his life and then without thinking anything, he spends his whole life doing that job.&lt;/p&gt;

&lt;p&gt;Rich dad says that if any person in the world wants, he can do any other work along with his job and can also become the king of a new business empire without leaving his job.&lt;/p&gt;

&lt;p&gt;Now to understand this, we can take the example of Ray Kroc, the founder of the world's largest fast-food chain company McDonald's. If any of us are asked this question, from which business does Ray Kroc earn money? Then the answer of all of us would be that from the fast-food business. But actually, Ray Kroc's main business is not fast food but real estate. Because while expanding the business of McDonald's, he has become the biggest real estate owner in the whole world today. Along with doing fast food business, he has created such an empire of real estate which makes him really rich today.&lt;/p&gt;

&lt;p&gt;In the same way, a common man can also create some such assets and source of income along with doing his job, which will earn money for him. Some examples have also been given by the writer, which includes starting a business, investing in the stock market, investing money in real estate, and buying properties that profit.&lt;/p&gt;

&lt;p&gt;By adopting any one of these methods, you can create a new source of income for yourself. Even Rich Dad advises every person to do this because only then does a person become really rich.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lesson-no-4-taxes-are-for-only-middle-class-and-poors"&gt;
  &lt;/a&gt;
  Lesson No 4. Taxes Are For Only Middle Class And Poors
&lt;/h2&gt;

&lt;p&gt;In this lesson Rich Dad explains the history of tax, he says that the tax was actually a system designed to bridge the gap between the rich and the poor i.e. initially only the rich were taxed and that tax money was used for the poor people facilities.&lt;/p&gt;

&lt;p&gt;But gradually the middle and upper-middle class also started paying taxes and if we talk about today, then this matter has been completely reversed. Because today rich people save themselves from paying taxes by using their brains and cunning and the highest tax that is deposited in the account of the government is given by the middle and upper-middle class only.&lt;/p&gt;

&lt;p&gt;Rich businessmen and industrialists first earn money and then spend that money to fulfil all their needs and aspirations and in the end, if anything is left then they pay tax with that money. Whereas the middle and upper-middle-class people earn money as well as pay taxes and then spend whatever is left on them in the end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lesson-no-5-the-rich-invent-money"&gt;
  &lt;/a&gt;
  Lesson No 5. The Rich Invent Money
&lt;/h2&gt;

&lt;p&gt;Jeff Bezos, Bill Gates, Mark Zuckerberg, Elon Musk and if we talk about India, then Dhirubhai Ambani, Shiv Nadar and Azim Premji are some of the names who have brought a business or idea inside the world, about which no one had thought of this before. These people have invested money with the same revolutionary idea.&lt;/p&gt;

&lt;p&gt;Before any other person could find any opportunity present in the market, these people found that opportunity and took action on it immediately. That is why it is said that these people did not earn money but invent it. Because it brought things into the world that was not already here. Similarly, you should also think not only about earning money but also about inventing money.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lesson-no-6-rich-learns-all-the-time-and-know-how-to-sell-their-ideas"&gt;
  &lt;/a&gt;
  Lesson No 6: Rich Learns All The Time And Know How To Sell Their Ideas
&lt;/h2&gt;

&lt;p&gt;Many such people in America make and sell a much better burger than that of McDonald's at the same price. But not every person understands how one of his products or ideas is sold on a large scale. That's why even after making a good pizza burger than McDonald's, he can sell it only in a limited area or in limited quantity. Whereas McDonald's sells its burgers all over the world without any limit. In fact, through this last lesson, the author explains to us that rich people never stop learning new things and new skills. Because of this habit, they always know how their product or their idea can be sold on a large scale in the world.&lt;/p&gt;

&lt;p&gt;So this was all about this post. All the lessons of the book Rich Dad Poor Dad are very useful for a programmer as well as general person.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>books</category>
      <category>leadership</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Writing a command system in JavaScript</title>
      <author>Siddharth</author>
      <pubDate>Fri, 30 Jul 2021 04:33:48 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/writing-a-command-system-in-javascript-ifd</link>
      <guid>https://dev.to/siddharthshyniben/writing-a-command-system-in-javascript-ifd</guid>
      <description>&lt;p&gt;If you &lt;a href="https://google.com/search?q=text+adventure"&gt;search Google for "text adventure"&lt;/a&gt; and open the Developer tools, you get a neat little text adventure game to play, which involves the blue &lt;code&gt;G&lt;/code&gt; finding his friends red &lt;code&gt;o&lt;/code&gt;, yellow &lt;code&gt;o&lt;/code&gt;, blue &lt;code&gt;g&lt;/code&gt;, green &lt;code&gt;l&lt;/code&gt;, and the always quirky red &lt;code&gt;e&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rWLPDymS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/76640268/127134594-2cd44287-2c5a-47a5-bebc-6e2ebe3a38ab.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWLPDymS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/76640268/127134594-2cd44287-2c5a-47a5-bebc-6e2ebe3a38ab.gif" alt="text-adventure"&gt;&lt;/a&gt;&lt;/p&gt;
Pretty hard



&lt;p&gt;I started wondering how they did this: They implemented a whole command system without using any external stuff, with only plain JavaScript. And so at once I started digging through the code, immediately stopped because it was obfuscated, and started thinking. The result was &lt;a href="https://github.com/SiddharthShyniben/cmd-quiz"&gt;this&lt;/a&gt; simple trivia quiz (&lt;a href="https://siddharthshyniben.github.io/cmd-quiz/"&gt;hosted here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6RBU5GRN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh30jvzzr76ybkuroe05.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6RBU5GRN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh30jvzzr76ybkuroe05.gif" alt="Quiz!"&gt;&lt;/a&gt;&lt;/p&gt;
I'm really bad at trivia.Wondering how I'm styling those logs? Check out &lt;a href="https://dev.to/siddharthshyniben/how-to-add-css-to-console-log-s-2hk5"&gt;this explainer&lt;/a&gt; I wrote








&lt;h2&gt;
  &lt;a href="#how-does-this-even-work"&gt;
  &lt;/a&gt;
  How does this even work?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;north&lt;/code&gt;, &lt;code&gt;moon&lt;/code&gt;, they all don't seem to be anything. If you open the DevTools and run them, you'll just get a &lt;code&gt;Uncaught ReferenceError: yes is not defined&lt;/code&gt;. But that gives us a hint – why don't we define it?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Later...&lt;/span&gt;
&lt;span class="nx"&gt;yes&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; "yes"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That works perfectly, but we have no way of saying whether it was called. But then, we can use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get"&gt;getters&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-demo-of-getters"&gt;
  &lt;/a&gt;
  Quick demo of getters
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;something entirely different&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="c1"&gt;//=&amp;gt; 'something entirely different'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;We obviously can't use getters on global variables, but we can just set the variables on window and add getters to them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Do something&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Got yes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}});&lt;/span&gt;

&lt;span class="nx"&gt;yes&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; "yes"&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; "Got yes" (logged to console)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's basically it, you can just keep setting variables statically or dynamically, and you basically get a command system!&lt;/p&gt;




&lt;p&gt;What are the uses of this? I dunno, all this can be done by using regular functions instead of this. Maybe easter eggs? Maybe for some debugging?&lt;/p&gt;

&lt;p&gt;I can't wait to see people writing code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{...}})&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Wait, is main supposed to be a function or something?&lt;/span&gt;
&lt;span class="c1"&gt;// Linters are gonna be angry...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Trying out one of the most cursed gba games. Shrek Swamp Kart Speedway</title>
      <author>Cybear Tron</author>
      <pubDate>Fri, 30 Jul 2021 03:58:20 +0000</pubDate>
      <link>https://dev.to/cybeartron/trying-out-one-of-the-most-cursed-gba-games-shrek-swamp-kart-speedway-3c2n</link>
      <guid>https://dev.to/cybeartron/trying-out-one-of-the-most-cursed-gba-games-shrek-swamp-kart-speedway-3c2n</guid>
      <description>&lt;p&gt;Hwlo there!!!! So today I will try this game called Shrek Swamp Kart Speedway which is considered very damn cursed!!&lt;/p&gt;

&lt;p&gt;The Visual Boy Advance (VBA) emulator will help us here on our journey!!! Cuz I dont have a real game boy advance lol!&lt;/p&gt;

&lt;p&gt;Ok So I heard that this is one of the worst games and was jus a Mario Kart with a Shrek Skin. I have personally never watched Shrek or played Mario Kart.. So lets try.. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tf3o6h6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627554789132/Ob6NxpySK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tf3o6h6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627554789132/Ob6NxpySK.png" alt="Shrek---Swamp-Kart-Speedway-(U)-[!].png"&gt;&lt;/a&gt;&lt;br&gt;
This is where I am... Wish me luck&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--41FDDDmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627554832455/dEVz3MkRV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41FDDDmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627554832455/dEVz3MkRV.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
OH MY FRICKING GOD!! THATS CURSED ALREADY OH NO!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ved1-tP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627554870849/N9meMhJef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ved1-tP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627554870849/N9meMhJef.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Watching these weirdos bobbing their head is giving me anxiety.&lt;br&gt;
I will just go with the gingerbread. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FYtF60kb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627555086669/9OQVkyyO4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYtF60kb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627555086669/9OQVkyyO4.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
ITS FRICKING HARD AND AS I WAS TOLD, THE CONTROLS ARE BAD!! ITS TOO SPEED !! I have never been a good car game player so maybe to an extent its my incopetence.&lt;br&gt;
Ok So I will rather Jus do a gameplay video here ok?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/3azFgxaytZ8"&gt;https://youtu.be/3azFgxaytZ8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check it out here.... I got the hang of it quick and came 2nd while I could come 1st but got stuck. It was actually hard and it took me like 5 attempts after which I started recording. The Graphics were the worst!!! And the controls the hardest!! AND THE FRICKING HEAD BOBBING I SHOWED IN THE VIDEO!! I WAS DAMN FEELING WEIRD!!!&lt;/p&gt;

&lt;p&gt;I mean thats it for today.. I forgot to save it... There are a lot of levels I guess in this game...&lt;/p&gt;

&lt;p&gt;Bye!!!&lt;/p&gt;

</description>
      <category>cursed</category>
      <category>gba</category>
      <category>game</category>
      <category>review</category>
    </item>
    <item>
      <title>Updates on dev.to clone in Angular - July 30</title>
      <author>Ajit Singh</author>
      <pubDate>Fri, 30 Jul 2021 03:53:13 +0000</pubDate>
      <link>https://dev.to/this-is-angular/updates-on-dev-to-clone-in-angular-july-30-514f</link>
      <guid>https://dev.to/this-is-angular/updates-on-dev-to-clone-in-angular-july-30-514f</guid>
      <description>&lt;p&gt;Github Repo - &lt;a href="https://github.com/ajitsinghkaler/devto-clone"&gt;https://github.com/ajitsinghkaler/devto-clone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deployed on Firebase - &lt;a href="https://dev-toclone.firebaseapp.com/"&gt;https://dev-toclone.firebaseapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last week I added article section dev.to clone.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8edw7kdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syxzk0w3xwwqjylu0wsy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8edw7kdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syxzk0w3xwwqjylu0wsy.png" alt="Dev.to clone July 30"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This week we added the tags store and joined the tags to the api. We mostly follow a pattern to add an api service which makes all the api calls and a store service which sores al the data related to that service. &lt;/p&gt;

&lt;p&gt;We also added listings using the same pattern. This is the first time we used *rxLet. It really makes working with all Observable in the templates easier do &lt;a href="https://github.com/rx-angular/rx-angular/blob/master/libs/template/docs/api/let-directive.md"&gt;check&lt;/a&gt; it out. It allows you four states for an observable suspense, error. complete so that you can handle each one of them separately and gets rid of the *ngIf with async pipe. Like if you want to display something else while loading and error is a big disadvantage of the async pipe when used with an api.&lt;/p&gt;

&lt;p&gt;There was one interesting thing we did this time we created a reusable component which when passed a tag will show all the top articles from these tags in the last 3 days if you want to check &lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/4a031584b9008c2733c64d1e61fb00883d5db94f"&gt;this&lt;/a&gt; out. &lt;/p&gt;

&lt;p&gt;This is how it looks now&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GWwFl1bN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iag6222gych0y86ts846.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GWwFl1bN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iag6222gych0y86ts846.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Next week we will start working on article details page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/issues/6"&gt;Issue&lt;/a&gt;&lt;br&gt;
The article tag store and article store are quite common can we make them one. Same for listings HTML and article-tag HTML. I'm not sure what to do about this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commits-done-in-this-update"&gt;
  &lt;/a&gt;
  Commits done in this update
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/4a031584b9008c2733c64d1e61fb00883d5db94f"&gt;added right side tags articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/6889840004204b4ae0997dc52abc6cc95824b16f"&gt;add listings to homepage &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/359198b4cd2154cfe46aeefd8f7cf6f2d4c7fdba"&gt;add tags store&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#contributions"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/che_off"&gt;Chellappan&lt;/a&gt; has also offered some help. He will raise a detailed feature request on what he will work on Waiting for that. &lt;/p&gt;

&lt;p&gt;If you want to contribute too. I've created a lot of issues. Anyone can work on issues but for feature requests you have to raise a detailed feature request before working on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/VakilSunny"&gt;Sunny&lt;/a&gt; also raised his first pr on the project. Thank you sunny.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Build a Design Picker Extension with Vanilla Javascript</title>
      <author>Ashik Varma</author>
      <pubDate>Fri, 30 Jul 2021 02:55:36 +0000</pubDate>
      <link>https://dev.to/ashikvarma11/build-a-chrome-extension-with-vanilla-javascript-3jnf</link>
      <guid>https://dev.to/ashikvarma11/build-a-chrome-extension-with-vanilla-javascript-3jnf</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Sometimes you like the fonts and color palettes used in websites that you visit and wish to check out what they are. Most people use different extensions for this purpose. &lt;/p&gt;

&lt;p&gt;Fetching a CSS property from wherever you click is so easy, that if you could build an extension, fetching the most relevant properties you want in one go improves your productivity. &lt;/p&gt;

&lt;p&gt;I'm going to walk you through the steps I've used to build a simple extension using pure JavaScript and CSS.&lt;/p&gt;

&lt;p&gt;If you'd like to explore it first, Check out -&amp;gt;   &lt;a href="https://github.com/ashikvarma11/design-picker"&gt;Github Link&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#files"&gt;
  &lt;/a&gt;
  Files
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#manifest-file"&gt;
  &lt;/a&gt;
  Manifest file
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "manifest_version": 2,
  "name": "Picker Extension",
  "version": "1.0.0",
  "content_scripts": [
    {
      "matches": ["&amp;lt;all_urls&amp;gt;"],
      "html": ["popup/popup.html"],
      "js": ["content.js"]
    }
  ],
  "permissions": ["tabs"],
  "icons": { "16": "icon.png", "48": "icon.png", "128": "icon.png" },

  "browser_action": {
    "default_popup": "popup/popup.html",
    "default_title": "Picker"
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;code&gt;manifest.json&lt;/code&gt; file is where the configuration for your project exists. The browser derives the name, paths to your scripts, icons, permissions, etc. through this file. Furthermore, we have a list of options to specify the nature of your extension, like, how it should be rendered when the user opens a new tab or which all websites should this extension be applied to, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#content-script"&gt;
  &lt;/a&gt;
  Content Script
&lt;/h3&gt;

&lt;p&gt;A content script is a JavaScript file that has access to the DOM of the website that you visit. This means that you can get and set the properties of any element in the DOM tree.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pop-up"&gt;
  &lt;/a&gt;
  Pop up
&lt;/h3&gt;

&lt;p&gt;This is the window that pops up when you click on the extension icon. Pop-up doesn't have access to the content of the website that you visit. This is also referred to as "Extension" in the Chrome development docs. It has its DOM and is standalone. But, we can make the connection between your Content Script and Popup script through a series of "Message Passing".&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-your-design"&gt;
  &lt;/a&gt;
  Get your Design
&lt;/h1&gt;

&lt;p&gt;In the Content script -&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function listenToClick() {
  document.addEventListener("click", function (event) {
    payLoad = {
      ...payLoad,
      fontFamily: window
        .getComputedStyle(currElement, null)
        .getPropertyValue("font-family"),
      fontSize: window
        .getComputedStyle(currElement, null)
        .getPropertyValue("font-size"),
      color: window
        .getComputedStyle(currElement, null)
        .getPropertyValue("color"),
      backgroundColor: window
        .getComputedStyle(currElement, null)
        .getPropertyValue("background-color"),
    };
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Two global variables - &lt;code&gt;payLoad&lt;/code&gt; and &lt;code&gt;currElement&lt;/code&gt; - are initialized outside this function. Whenever the user &lt;strong&gt;hover&lt;/strong&gt; over an element, the &lt;strong&gt;currElement&lt;/strong&gt; will be set. Further, clicking the element fetches the design using the code above.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#initiate-a-handshake"&gt;
  &lt;/a&gt;
  Initiate a Handshake
&lt;/h1&gt;

&lt;p&gt;You need to ping the content script and get the design values you obtained in the content script as response.&lt;/p&gt;

&lt;p&gt;In the Popup script -&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function initiateHandshake() {
  chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
    chrome.tabs.sendMessage(
      tabs[0].id,
      { message: "handshake" },applyValuesToView);
  });
}

function applyValuesToView(response) {
  let message = response;
  if (message != undefined) {
    if (message["color"]) font_col.innerHTML = message["color"];
    if (message["backgroundColor"]) bg_col.innerHTML = message["backgroundColor"];
    if (message["fontSize"]) font_size.innerHTML = message["fontSize"];
    if (message["fontFamily"]) font_fam.innerHTML = message["fontFamily"];
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whenever the user opens the popup, a &lt;strong&gt;handshake&lt;/strong&gt; message is sent to the content-script and in response, it will send the design data fetched when an element was clicked. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#send-response-for-handshake"&gt;
  &lt;/a&gt;
  Send Response for Handshake
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function listenToPopUp() {
  chrome.runtime.onMessage.addListener(function (
    request,
    sender,
    sendResponse
  ) {
    if (request.message === "handshake") sendResponse(payLoad);
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#copy-design-value"&gt;
  &lt;/a&gt;
  Copy design value
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function copyDesign(event) {
  var tempInput = document.createElement("input");
  tempInput.value = event.target.innerText;
  document.body.appendChild(tempInput);
  tempInput.select();
  document.execCommand("copy");
  document.body.removeChild(tempInput);
  toggleSnackBar();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a hack for copying the text to the clipboard. An ** input** element is created to simulate click and copy through the JavaScript code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We use a similar approach whenever we want to download content from a link.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#publish-the-extension"&gt;
  &lt;/a&gt;
  Publish the Extension
&lt;/h1&gt;

&lt;p&gt;Navigate to &lt;code&gt;chrome://extensions/&lt;/code&gt; and click on the &lt;code&gt;Load unpacked&lt;/code&gt; button.&lt;br&gt;
A prompt will appear to select your folder. Add the whole folder and it will install your extension &lt;strong&gt;locally&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;This will run only on **your&lt;/em&gt;* browser.* &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it.
&lt;/h1&gt;

&lt;p&gt;Feel free to fork the repo and customize your extension as you like.&lt;br&gt;
Thank you, for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Automating Route53 DNS Updates for Blue/Green Deployments (the hard way)</title>
      <author>James Ingold</author>
      <pubDate>Fri, 30 Jul 2021 00:54:31 +0000</pubDate>
      <link>https://dev.to/jamesingold/automating-route53-dns-updates-for-blue-green-deployments-the-hard-way-1hhh</link>
      <guid>https://dev.to/jamesingold/automating-route53-dns-updates-for-blue-green-deployments-the-hard-way-1hhh</guid>
      <description>&lt;h4&gt;
  &lt;a href="#bluegreen-architecture"&gt;
  &lt;/a&gt;
  Blue/Green Architecture
&lt;/h4&gt;

&lt;p&gt;A blue/green architecture in some form or fashion is a necessity for highly available systems. This means that you have at least two seperate production environments. The blue one is in use, handling live traffic while the green one is a clone of the production system and ready to go in case of emergency or routine maintenance. Ideally, these systems are in different regions and possibly even different cloud providers depending on your need to reduce risk. There are several ways to achieve blue/green deployments and it could be as simple as having two different servers which you can switch between. Regardless of your setup, at some point you will have to switch the DNS to point from the blue environment to the green environment. For example, &lt;a href="https://aws.amazon.com/quickstart/architecture/blue-green-deployment/"&gt;AWS CodePipeline&lt;/a&gt; manages this for Elastic Beanstalk. Most environments won't manage the DNS updates for you though, so in this post I'll show you how to script out updates to AWS Route53 to manage blue/green DNS the hard way. For my use case, I have several domains pointed to an elastic load balancer in front of a kubernetes cluster. EKS clusters in different regions make up the blue/green architecture, which means we have to switch the DNS to move between them. &lt;/p&gt;

&lt;p&gt;As a side note, it's good to practice switching environments so that the first time isn't under the intense pressure of something going wrong. Switching which environment is live should be as seamingless as possible, with no downtime or stress. In this example, I'll be using Route53 to switch DNS urls from one AWS elastic load balancer to another with a python script.&lt;/p&gt;

&lt;p&gt;Boto, the python library for AWS, isn't the easiest to use for Route53. I'll break down each step of the script but if you want to skip ahead, &lt;a href="https://gist.github.com/james-ingold/5458f137b95a34aff4f5676daec23acd"&gt;here's the full gist.&lt;/a&gt; We're going to build a python utility script to handle updating DNS entries and then a shell script for handling bulk updates. Let's write some code!&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#python-script-for-updating-route53-entries"&gt;
  &lt;/a&gt;
  Python Script for Updating Route53 Entries
&lt;/h5&gt;

&lt;p&gt;Create a new python file and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python
&lt;/span&gt;
&lt;span class="s"&gt;"""
Update DNS for a RecordSet on AWS Route53
"""&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;

&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"--zoneId"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Route53 Zone Id, recommend setting this as an environment variable"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"--hostname"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"The hostname to update example.domain.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"--dns"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"The new dns value"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;route53&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'route53'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;zoneid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zoneId&lt;/span&gt;
&lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;
&lt;span class="n"&gt;CNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dns&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;zoneid&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;CNAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please provide a zone id, hostname and new dns"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're using argparse to pass in our zoneId, hostname, and the new dns. I recommend setting your hosted zone id as an environment variable so you don't have to remember it. If you only have one Route53 hosted zone, you can use Boto to get all the hosted zones (route53.get_all_hosted_zones()) and then use the first one.&lt;/p&gt;

&lt;p&gt;Now that we've got our AWS Route53 Hosted Zone ID, we can write the update DNS function. I'm going to use a shell script to pass in an array of domain names because in production, there are some domains that I don't want to update. If you have a simpler set up, you could iterate through the record sets and update each DNS without the need for the shell script. An environment variable could also hold the domains to update without using the shell script as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;updatedns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newdns&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;sets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;route53&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_resource_record_sets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HostedZoneId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;zoneid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rset&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ResourceRecordSets'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;rset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Type'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'CNAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;curdnsrecord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ResourceRecords'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curdnsrecord&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curdnsrecord&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;curdnsrecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;curdns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;
        &lt;span class="c1"&gt;# print('Current DNS CNAME: %s' % curdns)
&lt;/span&gt;        &lt;span class="n"&gt;curttl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'TTL'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;# print('Current DNS TTL: %s' % curttl)
&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;curdns&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;newdns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# UPSERT the record
&lt;/span&gt;            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Updating %s'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;route53&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;change_resource_record_sets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="n"&gt;HostedZoneId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;zoneid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="n"&gt;ChangeBatch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;'Changes'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                  &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;'Action'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'UPSERT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'ResourceRecordSet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                      &lt;span class="s"&gt;'Name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s"&gt;'Type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'CNAME'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s"&gt;'TTL'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;curttl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s"&gt;'ResourceRecords'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                          &lt;span class="s"&gt;'Value'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;newdns&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                      &lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                  &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're passing in the hostname to update and the new DNS entry to the updatedns function. From there, we check out each RecordSet and see if it matches the hostname that we're trying to update. If it does, we copy over the time to live property and then change the dns if it doesn't match what was passed in. The Route53 client's change_resource_record_set is handy because we can use the 'UPSERT' action to create or update by hostname.&lt;/p&gt;

&lt;p&gt;That's it for the python file, check out the full gist &lt;a href="https://gist.github.com/james-ingold/5458f137b95a34aff4f5676daec23acd"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#bonus-shell-script-to-pass-domains-to-update"&gt;
  &lt;/a&gt;
  Bonus: Shell script to Pass Domains to Update
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# Shell script to update AWS Route53 DNS when switching Blue/Green Deployments&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$# &lt;/span&gt;&lt;span class="nt"&gt;-lt&lt;/span&gt; 1 &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Please supply &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt; destination DNS address (likely an ELB address)"&lt;/span&gt;
  &lt;span class="k"&gt;return &lt;/span&gt;1
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# array of domains to update&lt;/span&gt;
&lt;span class="nv"&gt;domains&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"example.mydomain.com"&lt;/span&gt; &lt;span class="s2"&gt;"example2.mydomain.com"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for &lt;/span&gt;i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;domains&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;do
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"updating &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  python updatedns.py &lt;span class="nt"&gt;--zoneId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$MY_ROUTE53_HOSTED_ZONE&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;--hostname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;--dns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;done

&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Finished updating Route53 records"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h5&gt;

&lt;p&gt;That's it! We've now automated changing DNS for blue/green environments using AWS Route53, the hard way. If you know any easier way, let me know! Happy Codings&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/route53.html"&gt;Boto Route53 Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/james-ingold/5458f137b95a34aff4f5676daec23acd"&gt;updatedns.py gist&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>aws</category>
      <category>python</category>
      <category>bash</category>
    </item>
    <item>
      <title>4 Less used HTML tags and their uses</title>
      <author>Kritika Pattalam Bharathkumar</author>
      <pubDate>Fri, 30 Jul 2021 00:42:29 +0000</pubDate>
      <link>https://dev.to/kritikapattalam/4-less-used-html-tags-and-their-uses-2df6</link>
      <guid>https://dev.to/kritikapattalam/4-less-used-html-tags-and-their-uses-2df6</guid>
      <description>&lt;p&gt;As part of this blog we are going to see 4 less used HTML tags during web development&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-refresh-the-browser-or-redirect-the-page"&gt;
  &lt;/a&gt;
  1) Refresh the browser or redirect the page
&lt;/h3&gt;

&lt;p&gt;Did you know that you can refresh the browser automatically every few seconds with just a single line of code?.&lt;/p&gt;

&lt;p&gt;Yes, this can be done using the  http-equiv="refresh" attribute on the meta tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta http-equiv="refresh" content="30"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;content value for 30 here means , the page will refresh every 30 seconds. Enter the value you want and see the page refresh every few seconds. &lt;/li&gt;
&lt;li&gt;if you add a url value followed by the integer, the page will redirect to the given url after the specified time.
eg:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta http-equiv="refresh" content="3;url=https://dev.to"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Refresh might have accessibility concerns so use with caution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-calculating-with-output-tag"&gt;
  &lt;/a&gt;
  2) Calculating with output tag
&lt;/h3&gt;

&lt;p&gt;Output tag is used to represent the result of a calculation. In the below example we can calculate sum of two input fields and display it in the output field directly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;for attribute eg: for="a b"&lt;br&gt;
is used to tell the output tag, which fields are used for the manipulation. In the below code pen for attribute value is the id of the two input fields. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;using the name attribute value, the results from the oninput javascript is populated into the output tag. eg: output tag name value is result hence in javascript you can pass the result after calculation using result.value&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form oninput="result.value=parseInt(a.value)+parseInt(b.value)"&amp;gt;
    &amp;lt;input type="range" id="a" value="50"&amp;gt; +
    &amp;lt;input type="number" id="b" value="100"&amp;gt; =
    &amp;lt;output name="result" for="a b"&amp;gt;&amp;lt;/output&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kpattalam/embed/QWpRKez?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-base-tag"&gt;
  &lt;/a&gt;
  3) base tag
&lt;/h3&gt;

&lt;p&gt;This tag is very useful when your entire webpage points to the same base URL&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The base HTML element specifies the base URL to use for all relative URLs in a document. There can be only one  element in a document.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;head&amp;gt;
     &amp;lt;base href="https://kritika-pattalam.hashnode.dev/" target="_blank"&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
      &amp;lt;a href="2-simple-ways-you-can-truncate-text-using-css"&amp;gt;Click on this url&amp;lt;/a&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#how-to-use-it-"&gt;
  &lt;/a&gt;
  How to use it ?.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In the below codepen, I have specified the base href attribute to my hashnode main blog page. eg: &lt;a href="https://kritika-pattalam.hashnode.dev/"&gt;https://kritika-pattalam.hashnode.dev/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;In the anchor tag instead of specifying the absolute URL, I have used the relative URL of my blog post eg : 2-simple-ways-you-can-truncate-text-using-css 
And the entire blog URL is : &lt;a href="https://kritika-pattalam.hashnode.dev/2-simple-ways-you-can-truncate-text-using-css"&gt;https://kritika-pattalam.hashnode.dev/2-simple-ways-you-can-truncate-text-using-css&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kpattalam/embed/dyvEOVZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-template-tag-in-html-the-content-template-element"&gt;
  &lt;/a&gt;
  4) Template tag in HTML - The Content Template element
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The HTML &lt;strong&gt;template&lt;/strong&gt; tag permits you to declare pieces of HTML sections that can be cloned and embedded into the DOM using script. &lt;/li&gt;
&lt;li&gt;The contents of the template tag are not added to the DOM on page load, they are only inserted based on some user interaction. Eg: Lets say there is an image inside the template tag, the image does not get downloaded until the template is cloned and inserted into the DOM structure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kpattalam/embed/vYxwgGb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Leave me a comment below if you know about other rarely used HTML tags.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references-mdn-docs"&gt;
  &lt;/a&gt;
  References - mdn docs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base"&gt;Base Tag&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta"&gt;http-equiv="refresh"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output"&gt;output tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template"&gt;template tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets connect on  &lt;a href="https://twitter.com/KritikaPattalam"&gt;Twitter&lt;/a&gt;  | &lt;a href="https://www.linkedin.com/in/kritika-p-296739155/"&gt;LinkedIn&lt;/a&gt; for more web development related chats.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Next.js E-Commerce Tutorial: SPA Example</title>
      <author>Pierre-Guillaume Laurin</author>
      <pubDate>Fri, 30 Jul 2021 00:32:07 +0000</pubDate>
      <link>https://dev.to/pierreguillaumelaurin/next-js-e-commerce-tutorial-spa-example-2mf9</link>
      <guid>https://dev.to/pierreguillaumelaurin/next-js-e-commerce-tutorial-spa-example-2mf9</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In a rush? Skip to the &lt;a href="#tutorial"&gt;tutorial&lt;/a&gt; or &lt;a href="https://snipcart-next-2021.vercel.app/"&gt;live example&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like many web developers, I have been doing quite a lot of React stuff recently. The last few years have seen its usage in the industry grow in a trajectory commensurate to its &lt;a href="https://www.facebook.com/"&gt;parent company&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These days, there isn’t much you can’t do with React, whether you’re a seasoned developer or a complete beginner.&lt;/p&gt;

&lt;p&gt;This is mostly due to the creation of tools such as Next.js that have successfully simplified React frontend development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FpVDhiCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://snipcart.com/media/205932/nextjs_simplify_react_2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpVDhiCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://snipcart.com/media/205932/nextjs_simplify_react_2.gif" alt="Next.js Simplified React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, today, we'll &lt;strong&gt;explore how to craft a Next.js e-commerce single-page application quickly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the technical tutorial below, I’ll show you how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up a Next.js development environment&lt;/li&gt;
&lt;li&gt;Create new pages &amp;amp; components&lt;/li&gt;
&lt;li&gt;Fetch data &amp;amp; import components&lt;/li&gt;
&lt;li&gt;Create serverless API routes in Next&lt;/li&gt;
&lt;li&gt;Add a shopping cart to a Next.js app&lt;/li&gt;
&lt;li&gt;Style the app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But before we go through this, let’s make sure we understand what Next.js is and how it can improve your next e-commerce projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-nextjs"&gt;
  &lt;/a&gt;
  What's Next.js?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;In a nutshell, Next.js is a lightweight framework for React applications that allows you to build server-side rendering and static applications in React easily.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It takes all the good parts of React and makes it even easier to get an app running with optimized rendering performance. Next.js does this thanks to multiple built-in configurations—automatic code-splitting, file-system routing, server-side rendering, static files exporting, and styling solutions.&lt;/p&gt;

&lt;p&gt;Trust me when I say that you can build a LOT of different things with Next.js:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Static websites—we’ve listed it as one of the &lt;a href="https://snipcart.com/blog/choose-best-static-site-generator"&gt;top static site generators for 2021&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://snipcart.com/blog/pwa-example-ecommerce-gatsby"&gt;Progressive Web Apps&lt;/a&gt; (PWAs)&lt;/li&gt;
&lt;li&gt;Server-rendered applications&lt;/li&gt;
&lt;li&gt;SEO-friendly websites—as we’ve demonstrated &lt;a href="https://snipcart.com/blog/react-seo-nextjs-tutorial"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mobile apps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was built by &lt;a href="https://zeit.co/"&gt;Zeit&lt;/a&gt; (now Vercel) back in 2016 and has quickly gained traction to the point of becoming one of the &lt;a href="https://jamstack.org/generators/"&gt;most popular tools&lt;/a&gt; of its kind. I mean, it’s used by Marvel, Netflix, Uber, Nike… and the list goes on.&lt;/p&gt;

&lt;p&gt;Okay, this is all great, and I’m genuinely excited to play with Next.js here. But is it any good for e-commerce?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-amp-ecommerce-a-good-fit"&gt;
  &lt;/a&gt;
  Next.js &amp;amp; e-commerce: a good fit?
&lt;/h2&gt;

&lt;p&gt;Like any static site generator or JavaScript framework out there, one of its most significant advantages, vs. more traditional e-commerce platforms, is the options it gives to developers to create a kickass shopping UX while removing the burden of many implementation details required for building a web app. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uw7ElDIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://snipcart.com/media/205928/kickass.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uw7ElDIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://snipcart.com/media/205928/kickass.gif" alt="Next.js kickass for e-commerce"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depending on your need, you can easily build a server-side or statically rendering app with Next, which implements those for you while also abstracting other details such as &lt;a href="https://webpack.js.org/"&gt;app-bundling&lt;/a&gt; and &lt;a href="https://babeljs.io/"&gt;transcompilation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The power of the &lt;a href="https://snipcart.com/blog/jamstack"&gt;Jamstack&lt;/a&gt; right here!&lt;/p&gt;

&lt;p&gt;We’ve covered the general &lt;a href="https://snipcart.com/blog/react-ecommerce-tutorial"&gt;React e-commerce ecosystem&lt;/a&gt; and its benefits in an earlier post. I would strongly suggest reading it to understand further why it’s a great fit.&lt;/p&gt;

&lt;p&gt;But on the probable chance that you're pressed for time, here’s a TL;DR:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;→ The use of components for flexibility.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Component-based development enables easy code reuse through your app but also the writing of small features. Or, in our case, small e-commerce functionalities. This comes in handy once you start scaling and expanding your shopping cart integration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;→ Virtual DOM (document object model) for performance.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React’s &lt;a href="https://www.rigelnetworks.com/using-virtual-dom-react-js-top-5-benefits/"&gt;virtual DOM&lt;/a&gt; provides a more efficient way of updating the view in a web application. Performance is Everything in e-commerce; all milli-seconds count.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y54doITV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205929/speed-uxplusseo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y54doITV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205929/speed-uxplusseo.png" alt="Better Speed = Better UX &amp;amp; SEO = More profit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;→ Popularity &amp;amp; vast community.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Any issue has probably been documented already, so you're likely to find a solution to any potential pitfalls in your way.&lt;/p&gt;

&lt;p&gt;Next.js features like server-side rendering and static exporting push these React benefits even further by guaranteeing that &lt;strong&gt;your website/app will be SEO-friendly&lt;/strong&gt;. This is something vital to any e-commerce business.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Still need social proof? Here are some &lt;a href="https://nextjs.org/showcase#e-commerce"&gt;Next.js e-commerce site examples&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="tutorial"&gt;Technical tutorial: a Next.js e-commerce SPA&lt;/h2&gt;

&lt;p&gt;Okay, time to jump into code and create our own handcrafted Next.js e-commerce app with the help of Snipcart. For you fish aficionados — or really anyone waiting for the beta of any cool software library — rest assured because we will make a betta fish store today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qpmiksaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205930/nextjs-ecommerce-fish-store.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qpmiksaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205930/nextjs-ecommerce-fish-store.png" alt="https://snipcart.com/media/205930/nextjs-ecommerce-fish-store.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Basic understanding of &lt;a href="https://snipcart.com/blog/react-nextjs-single-page-application-seo#spa"&gt;single-page applications&lt;/a&gt; (SPAs)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://app.snipcart.com/register"&gt;A Snipcart account&lt;/a&gt; (forever free in test mode)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/"&gt;Npm&lt;/a&gt; and &lt;a href="https://nodejs.org/en/"&gt;node.js&lt;/a&gt; installed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basic knowledge of &lt;a href="https://reactjs.org/tutorial/tutorial.html"&gt;React&lt;/a&gt; &amp;amp; &lt;a href="https://snipcart.com/blog/learn-typescript-why-use-ts"&gt;TypeScript&lt;/a&gt; will also help you here, but it is not mandatory to follow along.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-setting-up-the-development-environment"&gt;
  &lt;/a&gt;
  1. Setting up the development environment
&lt;/h3&gt;

&lt;p&gt;First, let set up our environment so that we can start building.&lt;/p&gt;

&lt;p&gt;Open a terminal and type the following command:&lt;br&gt;
&lt;code&gt;npx create-next-app --typescript&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A prompt will appear asking you for the project's name. It will then install all of the project dependencies for you and create files and folders. We'll look into these further in this tutorial.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Beginner note: The command's &lt;code&gt;--typescript&lt;/code&gt; options will set up a Typescript project, which I often favor. The typing system helps prevent many runtime errors and perky bugs. It also allows for better refactoring in the long run!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, run &lt;code&gt;npm run dev&lt;/code&gt;. Your app should now be served at &lt;code&gt;localhost:3000&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-defining-a-layout"&gt;
  &lt;/a&gt;
  2. Defining a layout
&lt;/h3&gt;

&lt;p&gt;With our environment ready, let's create a layout for our store. It will include a Header and a Footer with links to our cart and contact information.&lt;/p&gt;

&lt;p&gt;We will add this layout to the app's main entry point. In &lt;code&gt;Next&lt;/code&gt;, this entry point is located at &lt;code&gt;pages/_app.tsx&lt;/code&gt;. You can see that the &lt;code&gt;MyApp&lt;/code&gt; function returns the &lt;code&gt;pageProps&lt;/code&gt;. We will use this function to create our app's layout:&lt;/p&gt;

&lt;p&gt;At the project's root, create a &lt;code&gt;components&lt;/code&gt; directory in which — you guessed it — we will create our components.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-creating-components"&gt;
  &lt;/a&gt;
  1. Creating components
&lt;/h3&gt;

&lt;p&gt;Now let's create the components we need.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;components&lt;/code&gt; directory, create a &lt;code&gt;Header.tsx&lt;/code&gt; file with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/Header.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/static/logo.svg"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;FishCastle&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;textDecoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"31"&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"27"&lt;/span&gt; &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0 0 31 27"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;http://www.w3.org/2000/svg&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#9094FF"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Link&lt;/code&gt; component from Next.js allows us to convert most HTML elements into in-website links.&lt;/p&gt;

&lt;p&gt;Still in the &lt;code&gt;components&lt;/code&gt; directory, create a &lt;code&gt;Footer.tsx&lt;/code&gt; file with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/Footer.tsx&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                Next.js app with a&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;https://snipcart.com&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Snipcar        t&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;- powered store
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;https://github.com/snipcart/snipcart-nextjs&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Github&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-integrating-components"&gt;
  &lt;/a&gt;
  2. Integrating components
&lt;/h3&gt;

&lt;p&gt;Let's now integrate those components into our app. First, create a &lt;code&gt;Layout&lt;/code&gt; component and put the &lt;code&gt;Header&lt;/code&gt; and &lt;code&gt;Footer&lt;/code&gt; in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Header&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Footer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;PropsWithChildren&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;  &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;PropsWithChildren&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Footer&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With your layout components created, all that's left to do is to add it to the &lt;code&gt;_app.tsx&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// _app.tsx&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run your app's dev mode and go to your localhost page, you should now see your app's layout created. Later in this tutorial, we will see how to add style to it and give it that &lt;strong&gt;drip&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;But first things first, let's give our homepage the content it deserves.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-customizing-your-homepage"&gt;
  &lt;/a&gt;
  3. Customizing your homepage
&lt;/h3&gt;

&lt;p&gt;As we need to display both information about our store and the products we will sell, we will create a few different components to keep things modular and maintainable. Then, we will look at how to assemble them:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-creating-required-components"&gt;
  &lt;/a&gt;
  1. Creating required components
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#the-product-component"&gt;
  &lt;/a&gt;
  The product component
&lt;/h3&gt;

&lt;p&gt;As this is a Next.js tutorial for an e-commerce app, you will need a &lt;code&gt;Product&lt;/code&gt; component to show on your homepage.&lt;/p&gt;

&lt;p&gt;The component will output whatever information you need to display about our particular product. You can create an &lt;code&gt;IProduct&lt;/code&gt; interface that matches &lt;a href="https://docs.snipcart.com/v3/setup/products"&gt;Snipcart's product definition&lt;/a&gt; and an &lt;code&gt;IProductProps&lt;/code&gt; interface to define the types of our props, which will be pass as a parameter to the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/Product.tsx&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IProduct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StaticImageData&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Underneath the interface, add this component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/Product.tsx&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IProductProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IProduct&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IProductProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product__title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product__description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product__image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Image&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"product__price-button-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product__price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;$&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
                    &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`snipcart-add-item &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product__button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    Add to cart
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a-note-on-the-image-component"&gt;
  &lt;/a&gt;
  A note on the Image component
&lt;/h3&gt;

&lt;p&gt;Notice in the block below we are using Next.js's &lt;a href="https://nextjs.org/docs/basic-features/image-optimization"&gt;Image component&lt;/a&gt; instead of a good ol' &lt;code&gt;img&lt;/code&gt; tag. The former is actually an extension of the latter. It allows automatic image optimization, lazy loading by default, and providing images in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types"&gt;WebP&lt;/a&gt; when the browser allows it, which optimizes images to the client device. Moreover, the component optimizes image on requests, which saves you build time. This helps to reduce your website loading time and thus keep your users' interest! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-product-list-component"&gt;
  &lt;/a&gt;
  2. The product list component
&lt;/h3&gt;

&lt;p&gt;We will integrate this product component into a &lt;code&gt;ProductList&lt;/code&gt; component, whose name is quite self-explanatory. The &lt;code&gt;ProductList.tsx&lt;/code&gt; component will be used to display our list of products on the homepage. Therefore, you can create an &lt;code&gt;IProductListProps&lt;/code&gt; interface that describes an array of &lt;code&gt;IProduct&lt;/code&gt;, which is eventually going to be passed by our website:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IProduct&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IProductListProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IProduct&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ProductList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IProductListProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"product-list"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="na"&gt;product&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ProductList&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-prerendering-data-and-importing-components"&gt;
  &lt;/a&gt;
  4. Pre-rendering data and importing components
&lt;/h3&gt;

&lt;p&gt;At this stage, you'll probably want to populate your products to the ProductList component. In pure React, you could use &lt;a href="https://reactjs.org/docs/hooks-reference.html#useeffect"&gt;React's useEffect lifecycle&lt;/a&gt; inside the &lt;code&gt;ProductList&lt;/code&gt; to fill the data. However, this method won't get called on the server during a static or server-side rendering.&lt;/p&gt;

&lt;p&gt;Thankfully Next.js adds two ways to pre-render the data: &lt;code&gt;getStaticProps&lt;/code&gt;, which fetches data at build time, and &lt;code&gt;getServerSideProps&lt;/code&gt;, which fetches data &lt;em&gt;on each request&lt;/em&gt;. The latter may be useful, for example, for an auction store where the price may be rapidly fluctuating. In our use case, since the product doesn't change often, we will use the former as the pre-rendering will decrease loading time by saving the user a request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Jumbotron&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProductList&lt;/span&gt; &lt;span class="na"&gt;products&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Contact&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IProduct&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;halfmoon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Halfmoon Betta&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;25.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;halfmoonBettaPicture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Halfmoon betta is arguably one of the prettiest betta species. It is recognized by its large tail that can flare up to 180 degrees.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/products/halfmoon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;(...)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;veiltail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Veiltail Betta&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;5.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;veiltailBettaPicture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;By far the most common betta fish. You can recognize it by its long tail aiming downwards.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/products/veiltail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;products&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-importing-snipcart"&gt;
  &lt;/a&gt;
  5. Importing Snipcart
&lt;/h3&gt;

&lt;p&gt;Now, let's install Snipcart into our website. First, you'll need to import the &lt;code&gt;Head&lt;/code&gt; component from next/head inside your index.tsx page, which will allow you to add HTML inside the &lt;code&gt;&amp;lt;Head&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;You can do so by adding the following code inside the Index function return clause:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.tsx&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My awesome store&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;https://app.snipcart.com&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;https://cdn.snipcart.com&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;https://cdn.snipcart.com/themes/v3.2.0/default/snipcart.css&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"shortcut icon"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"../public/favicon.ico"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;For more information on how to use the &lt;code&gt;Head&lt;/code&gt; component to optimize for SEO, have a look at our &lt;a href="https://snipcart.com/blog/react-nextjs-single-page-application-seo"&gt;article regarding SEO using Next.js&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We now need to load Snipcart's script content. Next.js offers a Script component in the &lt;code&gt;next/script&lt;/code&gt;, module to do so. It allows for performance optimization by offering &lt;a href="https://nextjs.org/docs/basic-features/script"&gt;different loading strategies&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.tsx&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.snipcart.com/themes/v3.2.0/default/snipcart.js"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;hidden&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"snipcart"&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;api&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"YOUR_PUBLIC_API_KEY"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to swap the &lt;code&gt;data-api-key&lt;/code&gt; attribute with your own API key ;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-product-validation"&gt;
  &lt;/a&gt;
  6. Product validation
&lt;/h3&gt;

&lt;p&gt;Now that Snipcart is installed, the last step before completing orders is to validate your products.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-html-validation"&gt;
  &lt;/a&gt;
  1. HTML validation
&lt;/h3&gt;

&lt;p&gt;The first way to do that is by simply changing the URL in your product list to &lt;code&gt;/&lt;/code&gt; for each product to the homepage for Snipcart's &lt;a href="https://docs.snipcart.com/v3/setup/order-validation"&gt;HTML validation&lt;/a&gt;. It will read the &lt;code&gt;/&lt;/code&gt; on our homepage and crawl it in order to validate the products if you want. You can do just that and skip to the next section, and you will have a working e-commerce site!&lt;/p&gt;

&lt;p&gt;If you are curious, let's take the opportunity to check out a neat Next.js feature:&lt;br&gt;
&lt;a href="https://nextjs.org/docs/api-routes/dynamic-api-routes"&gt;serverless API routes&lt;/a&gt; combined with Snipcart's &lt;a href="https://babeljs.io/"&gt;JSON validation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-json-validation-using-nextjs-serverless-api"&gt;
  &lt;/a&gt;
  2. JSON validation using Next.js serverless API
&lt;/h3&gt;

&lt;p&gt;For more complex scenarios, it might be useful to have an API returning our products information in JSON format. To do so, we will need to have a unique URL for each product that will return its information in a JSON file.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Configuring static API routes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While technically we only need a dynamic API route returning each product, let's make this API &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;RESTful&lt;/a&gt; and have a route returning the whole product list.&lt;/p&gt;

&lt;p&gt;You may have noticed that an API folder was created with the project. In this folder, create another one called &lt;code&gt;products&lt;/code&gt; and add an &lt;code&gt;index.ts&lt;/code&gt; file to it with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In pages/api/products/index.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you now go to &lt;code&gt;https://localhost:3000/${YOUR_PORT}&lt;/code&gt;, you will get a JSON file containing your product list.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Configuring dynamic API routes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the &lt;code&gt;products&lt;/code&gt; folder, add the following to the &lt;code&gt;[productId].ts&lt;/code&gt; file. Notice the brackets. This special syntax tells Next.js that [productid] is a dynamic parameter. Hence if you go to &lt;code&gt;/api/products/ONE_OF_YOUR_PRODUCTS_ID&lt;/code&gt;, you should get the JSON information of one of our products.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IProduct&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../../components/Product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ISnipcartProduct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="c1"&gt;// Hack to pass the image URL instead of the StaticImage object we required&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IProduct&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;snipcartProduct&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ISnipcartProduct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snipcartProduct&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now be able to complete a test order! &lt;/p&gt;

&lt;p&gt;It's time to style our website, so it's more appealing to our future customers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-styling-your-nextjs-spa"&gt;
  &lt;/a&gt;
  7. Styling your Next.js SPA
&lt;/h3&gt;

&lt;p&gt;If you paid attention, you saw that most of the components in this tutorial already had classnames. We will now look at 2 different ways to apply them:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-setting-up-a-global-stylesheet"&gt;
  &lt;/a&gt;
  1. Setting up a global stylesheet
&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;style&lt;/code&gt;s folder, create a &lt;code&gt;global.scss&lt;/code&gt; style sheet. Afterwards, simply import it to &lt;code&gt;pages/_app.tsx&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// in pages/_app.tsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/globals.scss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Global stylesheets can only be imported in the &lt;code&gt;_app.tsx&lt;/code&gt; file.&lt;br&gt;
I used SCSS, which does not come built-in with Next.js, but can be easily integrated simply by running &lt;code&gt;npm install sass&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-setting-up-css-modules-for-our-components"&gt;
  &lt;/a&gt;
  2. Setting up CSS modules for our components
&lt;/h3&gt;

&lt;p&gt;Next.js also supports CSS modules, which can become quite handy if your CSS file gets larger. To use it, simply create a file respecting the &lt;code&gt;[name].module.css&lt;/code&gt; convention, for example, &lt;code&gt;Product.module.css&lt;/code&gt; or &lt;code&gt;Product.module.scss&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Afterward, you can import it as a &lt;code&gt;styles&lt;/code&gt; object in the component's file and access the styles with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Product.module.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;(...)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IProductProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product__title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product__description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      (...)
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For further examples of how these styles are applied, have a look at the project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/snipcart/snipcart-next"&gt;&lt;strong&gt;Github Repo&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://snipcart-next-2021.vercel.app/"&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Allow me a shout-out to Michael from Snipcart, who came up with the neat UI design!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And voilà! You're server-side rendered Next.js e-commerce store should be ready to go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h3&gt;

&lt;p&gt;I liked how easy it was to create a static website with great performance using Next.js. I did notice some parts of the Next.js documentation could be more up-to-date.&lt;/p&gt;

&lt;p&gt;We could have explored Image optimization on mobile using the &lt;code&gt;Image&lt;/code&gt; component or Next's dynamic imports to push this demo further.&lt;/p&gt;

&lt;p&gt;Are you up to it? If so, let us know how it goes in the comments below!&lt;/p&gt;




&lt;p&gt;Liked this article? Hit the share buttons below.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>next</category>
    </item>
    <item>
      <title>Diving In to Team-Based Development</title>
      <author>Becca Peckman</author>
      <pubDate>Thu, 29 Jul 2021 23:53:07 +0000</pubDate>
      <link>https://dev.to/becpeck/diving-in-to-team-based-development-59pe</link>
      <guid>https://dev.to/becpeck/diving-in-to-team-based-development-59pe</guid>
      <description>&lt;p&gt;I just finished my largest and most involved experience working on a development team, and I’m here to reflect on my takeaways. This experience consisted of a month-long internship, working on an already established software project, while I had previously only worked on teams where we built the project from the ground up, so many of the conventions around development process and communication were new to me. The project my team inherited was a data collation and exploration tool for asylum court case outcomes, which we were building on behalf of &lt;a href="https://www.humanrightsfirst.org/"&gt;Human Rights First&lt;/a&gt;, an international human rights organization. They noticed that many asylum case outcomes were highly dependent on the legal opinions of the judge hearing the case, and that in cases where multiple potential avenues of legal argument were possible, some framings did better with many judges than others did. &lt;/p&gt;

&lt;p&gt;The goal of this product was to scrape this case information from files uploaded by authorized attorneys in an automated process, and have it available to explore and filter to other lawyers and legal researchers, so they could be better informed on the big-picture statistics of what cases had been approved, denied, or appealed. I requested and fulfilled the role of a back-end developer on this project, as I had less experience in that role on the projects I’d worked on previously and wanted to broaden my experience. Other members of the team consisted of 12 other interns, in front-end, back-end, data science, UX, or project management roles, as well as several supporting mentors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-initial-goals"&gt;
  &lt;/a&gt;
  Our Initial Goals
&lt;/h2&gt;

&lt;p&gt;I addressed two major issues during my time on the project, one planned, and one discovered in process: first, my team had been asked to create a third role with designated permissions within the application. There were already pre-existing ‘user’ and ‘admin’ roles that had been implemented by the previous team, but our clients wanted a third ‘moderator’ role, which could perform every function a user could, as well as approve or deny case uploads like an admin, but could not manage users themselves or site functionality and changes. While implementing the necessary back-end changes to add this feature, I discovered a major security vulnerability in how the application verified a user’s role and subsequent permissions, discussed the possibilities for how to fix it, and implemented the plan we agreed was best.&lt;/p&gt;

&lt;p&gt;At first, when approaching the task of adding a new role to the ones already within the app, I discussed the database schema with the rest of my team. As we inherited it, the database stored role information as a column within the table for user profiles, as a string. This was not ideal because it could allow for typos to be entered, and user permissions to break as a result, so we decided to update the database to include a roles column, with a primary key integer and a role name, and have each profile contain a column that pointed to a role id as a foreign key. I began working on this directly with another back-end developer and a project manager over a video call, and it turned out to be much more difficult than we expected.&lt;/p&gt;

&lt;p&gt;At first, we attempted my idea of simply adding an additional migration using &lt;a href="https://knexjs.org/"&gt;Knex.js&lt;/a&gt;, a library which allowed us to build and query our &lt;a href="https://www.postgresql.org/"&gt;Postgres&lt;/a&gt; database inside a &lt;a href="https://nodejs.org/"&gt;Node&lt;/a&gt; framework. This required saving the existing role information from the database, deleting that column, creating a new table and column, and repopulating it with foreign keys from the new table. Unfortunately, we kept running into different errors with deleting or adding columns to the existing profiles table, and at one point had to delete the local database altogether, starting over with the preexisting Knex migration and seed files. After being unable to find a solution to these errors, one of my teammates tried a different approach, starting over on our goal. Eventually we gave up on modifying the database with additional files, and decided to rewrite the original migrations and seeds, adding in one for the roles table as well, and running functions to remove and rebuild the database entirely before seeding it with new sample data. We had chosen not to try this approach at first because it is risky in a production environment, where important data already exists in the database that could easily be lost in the process, but we decided there was no risk with only sample data that could be repopulated with a single npm command. This approach worked, much to all of our relief! We then quickly built new models and API endpoints for the new roles table in &lt;a href="https://expressjs.com/"&gt;Express.js&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-vulnerability-and-redirecting-focus"&gt;
  &lt;/a&gt;
  Security Vulnerability and Redirecting Focus
&lt;/h2&gt;

&lt;p&gt;While digging through the repositories to find out how user permissions were implemented, I realized it seemed like they weren’t referred to at all in the back-end codebase, and it also didn’t seem like our identity management provider, &lt;a href="https://www.okta.com/"&gt;Okta&lt;/a&gt;, was even storing role information. Confused, I started looking through the browser development tools as I navigated through the local live instance of the app. I found that there were three things being saved to the browser local storage, two &lt;a href="https://jwt.io/"&gt;JWTs&lt;/a&gt; related to Okta authentication, and one ‘role’ variable. Curious, I logged in as one of our test accounts designated with user permissions. By editing the string stored under ‘role’ from ‘user’ to ‘admin’, and continuing to navigate through the application, I was able to unlock special pages that should have only been accessible to admins, and to add, delete, and change data without any sort of verification. &lt;/p&gt;

&lt;p&gt;Immediately on realizing this, and verifying that the wrongfully edited data was in fact getting saved into the database, I notified the rest of my team that it seemed like a huge issue for the security of the application, and that it should be a high priority issue to be fixed. While it seemed unlikely that any authenticated users would be malicious enough to try vandalizing the data, all it could take was one compromised account by one motivated attacker to completely wipe out the entire app’s information. In our team discussion, we decided it would be excessively complicated to change how the front-end was handling role information, that it had the potential for breaking parts of the app that already worked, and that our best course of action was to patch the back-end, verifying on each endpoint request that a user had the permissions required to access it. I volunteered to write middleware to implement this solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#two-issues-one-solution"&gt;
  &lt;/a&gt;
  Two Issues, One Solution
&lt;/h2&gt;

&lt;p&gt;The actual middleware function ended up being very simple, once I realized a call to the database was already being made by another middleware function attached to every endpoint, which simply verified that any user was logged in and authenticated with Okta at all. This function queried the database for the profile of the authenticated user, and attached that information to the request headers before continuing the request. My function ended up taking an array of role ids which designated the roles who were allowed access to the endpoint, checking each of those ids against the role of the authenticated user, and allowing or forbidding access as a result. After testing the function, I had to add in some special cases to allow access for users to read or update their own information or their own uploaded cases. I chose to write the function to handle an array of roles, rather than a specific role id, in order to simultaneously implement the new moderator role in the backend. The function could still take an array with only one role id, as for the endpoints that only admins should access, but it could also take two or more ids, as for endpoints that should be accessible to admins and moderators. This flexibility in how the function worked would also allow easy changes in the future if more roles were added to the application.&lt;/p&gt;

&lt;p&gt;After the middleware function was added to all the appropriate endpoints, I tested the vulnerability to see if it was patched. While I could still change my role in local storage and gain access to pages for admin-only tools, none of the data would load within them, and no new data could be changed or added! Even sending a direct request to the endpoint was denied without a valid token from a user with the required roles, and I considered this a success. In addition, all of the back-end setup for the moderator role was complete, and only a bit of work needed to be done on the front-end to conditionally display these tools in a manner that already existed for admins. Moving forward, the next team might have issues if they decided to strengthen the patch on the front-end as well, if they decided to prevent the admin tool pages from displaying at all to unauthorized users. As far as I can tell, that would require a separate JWT to be created upon login on the back-end, and sent to the front-end local storage, which would allow a user’s role information to be stored and queried on the front-end in a more secure and less editable fashion. This might be complicated and increase the overhead of the app’s runtime, especially on login, and would require cross-collaboration between segments of the new team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-takeaways"&gt;
  &lt;/a&gt;
  My Takeaways
&lt;/h2&gt;

&lt;p&gt;I grew a lot more as a developer and professional than I expected to throughout this experience. While I had worked on teams before, it had always been more ad-hoc, without explicitly declared roles on the team, for periods of only about a week, and never on an established project. I’d also never experienced meeting with clients who were investing in actually using the product, and in having it ship as soon as possible. These weekly meetings, as well as the level of communication I needed to have with my team over Zoom and Slack, helped me realize the importance of communication on a team, why things can take so long to get done in a larger production environment, and how easy it was for one or more people on the team to get lost without reconnecting over our shared goals and priorities. The feedback I got from my team, praising my technical skills and my attention to detail, helped me feel more confident in my abilities and contributions, both on this project and future ones I plan to work on. The last month has made me realize how much I care about working on something that matters which will help people, how much more motivating it is and how I would like to look for these kinds of projects in my future career. Working in a back-end role, which I had little experience with in previous projects, and collaborating with data scientists and front-end developers has broadened my skills and given me a better understanding of how different parts of a team need to work together to accomplish shared goals. I hope that the development in my technical and professional skills will help me achieve my future goals, and that I can continue to learn and grow in these areas throughout the years to come.&lt;/p&gt;

</description>
      <category>node</category>
      <category>react</category>
      <category>postgres</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Azure DevOps: Limit User Visibility and Collaboration to Specific Projects</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Thu, 29 Jul 2021 23:24:05 +0000</pubDate>
      <link>https://dev.to/n3wt0n/azure-devops-limit-user-visibility-and-collaboration-to-specific-projects-2mgg</link>
      <guid>https://dev.to/n3wt0n/azure-devops-limit-user-visibility-and-collaboration-to-specific-projects-2mgg</guid>
      <description>&lt;p&gt;Ever had the need to restrict some users to just specific projects in Azure DevOps? Today I'm gonna show you how to do that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;Today we talk about a new feature that has been released recently in Azure DevOps and that allows you to limit the user visibility and collaboration to specific projects. I'm talking about the &lt;em&gt;Limit user visibility and collaboration to specific projects&lt;/em&gt; Preview Feature&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yftHyHW32fM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/yftHyHW32fM"&gt;Link to the video: https://youtu.be/yftHyHW32fM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h3&gt;

&lt;p&gt;By default, users added to an organization &lt;strong&gt;can view all organization metadata and settings&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IoUDLm78--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcr9xpetxtinq23bdxcd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IoUDLm78--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcr9xpetxtinq23bdxcd.png" alt="Org Settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This includes viewing the list of users in the organization, list of projects, &lt;strong&gt;billing details&lt;/strong&gt;, usage data, and anything that's accessible through the organization settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OH-6bsS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ep2oko4gjf66i1o6vzuf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OH-6bsS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ep2oko4gjf66i1o6vzuf.png" alt="Users Selection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This includes viewing the list of users in the organization, list of projects, billing details, usage data, and anything that's accessible through the organization settings.&lt;/p&gt;

&lt;p&gt;This is because people pickers provide support for searching &lt;strong&gt;all users and groups added to Azure AD&lt;/strong&gt;, not just those users and groups added to your project&lt;/p&gt;

&lt;p&gt;And until now there was no effective way to change this behavior. As I said, &lt;strong&gt;&lt;em&gt;until now&lt;/em&gt;&lt;/strong&gt; :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h3&gt;

&lt;p&gt;To restrict users from this information, you can enable the "&lt;strong&gt;&lt;em&gt;Limit user visibility and collaboration to specific projects&lt;/em&gt;&lt;/strong&gt;" preview feature for your organization. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8e84faez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95vkcb5jlsbvzjuhkfhe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8e84faez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95vkcb5jlsbvzjuhkfhe.png" alt="Feature Enabled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once enabled, the &lt;em&gt;Project-Scoped Users&lt;/em&gt; group, which is an organization-level security group, will be added to your Azure DevOps organization. It can be found by navigating to the Organization &lt;code&gt;Settings -&amp;gt; Permissions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When you add Users and groups to this new group, they will see a banner stating that the administrator has limited their visibility.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5z4B6WKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxmh5kg8gr8tw8pps9to.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5z4B6WKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxmh5kg8gr8tw8pps9to.png" alt="Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, they will have two limitations. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dNTpy4q3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5oeq01rj10x5kuc976ao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dNTpy4q3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5oeq01rj10x5kuc976ao.png" alt="Limited Org Settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When accessing the Organization Settings, most of the items will be hidden. &lt;/p&gt;

&lt;p&gt;And about the people selection, the people-picker search will be limited to only the AAD Users that have been added to the project the user is scoped to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-aRPHWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w18dcw01ffali918cr33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-aRPHWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w18dcw01ffali918cr33.png" alt="Limited User Selection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this applies also to the tagging of users in Work Items and Comments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Comment down below&lt;/strong&gt; and let me know if this new feature solves any issue you had in the past with user management.&lt;/p&gt;

&lt;p&gt;Also, checkout &lt;a href="https://youtu.be/nrYSu_046cw"&gt;this video&lt;/a&gt;, where I talk about how to properly secure and Azure DevOps Organization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yftHyHW32fM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>azuredevops</category>
      <category>security</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
