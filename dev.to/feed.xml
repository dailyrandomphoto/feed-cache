<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What's new in React 18?</title>
      <author>Akash Shyam</author>
      <pubDate>Wed, 16 Jun 2021 01:37:02 +0000</pubDate>
      <link>https://dev.to/akashshyam/what-s-new-in-react-18-10mk</link>
      <guid>https://dev.to/akashshyam/what-s-new-in-react-18-10mk</guid>
      <description>&lt;p&gt;React 18 has a lot of new features but they are all possible thanks to "concurrent rendering". It lets React prepare multiple versions of the UI at the same time. This change is mostly behind-the-scenes, but it introduces so many cool features to improve our apps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suspense"&gt;
  &lt;/a&gt;
  Suspense
&lt;/h3&gt;

&lt;p&gt;Suspense is the feature that pretty much everyone has been waiting for. We have been hearing about Suspense since a long time and it is now finally coming to React 18. Before we get into the code around Suspense we first need to talk about what Suspense does.&lt;/p&gt;

&lt;p&gt;Imagine you have a website like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Nav&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*  50ms */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Sidebar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* 150ms */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Blog&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* 100ms */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Comments&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* 200ms */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have 4 components with their respective loading times. This time includes the time to fetch items from an API, render the JSX etc.&lt;/p&gt;

&lt;p&gt;Now, when a person opens a blog article, he/she does not care about the comments, the sidebar etc, the blog is important. So, the other components can load later in the background while only the most important component i.e. the &lt;code&gt;Blog&lt;/code&gt; is loaded.&lt;/p&gt;

&lt;p&gt;Before Suspense there was no way to delay the loading of these components when doing server side rendering since all the HTML must be sent at once which means all the data must be loaded. With Suspense, though, you can tell React to only load the data for the important components and delay the loading of less important or slow components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Loader&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Sidebar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Suspense&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BlogArticle&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Loader&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Comments&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Suspense&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The server will send all the HTML/data for components that are not wrapped in a Suspense component. The client will then start hydrating those components as soon as it gets the HTML so that the page is usable as soon as possible. While that is happening the data inside the Suspense components will be sent down to the client in the background as soon as it is ready. The components will then begin the hydration process before finally being ready to use. &lt;/p&gt;

&lt;p&gt;React will also prioritize hydrating components that the user is actively trying to interact with which makes your app feel even quicker for users since the parts they care about the most will load the quickest.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatic-render-batching"&gt;
  &lt;/a&gt;
  Automatic Render Batching
&lt;/h3&gt;

&lt;p&gt;Most new React developers are confused when you have multiple setState calls one after another. This is a bit of a complicated question to answer since in React 17 it depended on where the state was set. Sometimes it would batch the updates together and do only one rerender, but other times it would re render the entire component once for each setState call. In React 18 this has been greatly simplified since now all changes to state are batched together if they are near each other.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transition"&gt;
  &lt;/a&gt;
  Transition
&lt;/h3&gt;

&lt;p&gt;It is very common in React to do lots of complex calculations when state changes. React 18 adds in the idea of urgent updates and transition updates. An urgent update is just like the normal React update you are used to. It is an update that happens immediately and blocks the application. Something like a button click, or selecting items from a dropdown are great use cases for urgent updates.&lt;/p&gt;

&lt;p&gt;A transition update on the other hand is an update that is not urgent and is something a user does not expect to happen instantly. A good example of this is filtering a list of items. Most state updates you do that aren’t directly tied to interacting with an input are most likely transition updates. With React 17, though, everything is considered an urgent update since transition updates don't exist. In React 18 all updates are by default urgent unless you specifically mark them as transition updates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;startTransition&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Urgent&lt;/span&gt;
&lt;span class="nx"&gt;setInputValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="c1"&gt;// Transition&lt;/span&gt;
&lt;span class="nx"&gt;startTransition&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setSearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-react-18"&gt;
  &lt;/a&gt;
  Using React 18
&lt;/h3&gt;

&lt;p&gt;React 18 is currently in alpha and can be downloaded like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react@alpha react-dom@alpha
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of rendering our component like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to render it like this to use some of the latest features:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;I am really excited to see what the full release of React 18 looks like and can't wait for the production ready version!&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>On-prem vs cloud: Why you have more options than you think</title>
      <author>kevbosaurus</author>
      <pubDate>Wed, 16 Jun 2021 01:10:26 +0000</pubDate>
      <link>https://dev.to/kevbosaurus/on-prem-vs-cloud-why-you-have-more-options-than-you-think-2egn</link>
      <guid>https://dev.to/kevbosaurus/on-prem-vs-cloud-why-you-have-more-options-than-you-think-2egn</guid>
      <description>&lt;p&gt;The debate between on-premise vs cloud is nothing new. Every company has different needs, and developers have spent endless cycles debating the pros and cons of on-prem and cloud software to solve for their particular needs.Rather than try to end the debate, we wanted to provide a deeper context and frameworks for evaluating your options. That includes looking into the rise of self-hosted software, which has the potential to, if not end the debate, at least push it in a new direction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onprem-vs-cloud-the-debate-in-a-nutshell"&gt;
  &lt;/a&gt;
  On-prem vs. cloud: The debate in a nutshell
&lt;/h2&gt;

&lt;p&gt;A couple of decades ago, the debate between on-prem and cloud didn’t exist—simply because cloud computing wasn’t a thing yet. As cloud computing emerged and gained popularity in the mid to late 2000s, so did the debate about moving workloads from on-prem servers to cloud servers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#equipment-ownership"&gt;
  &lt;/a&gt;
  Equipment ownership
&lt;/h3&gt;

&lt;p&gt;The primary difference between on-prem infrastructure and cloud infrastructure is that you own on-prem while you rent the cloud.On-prem infrastructure exists—you guessed it—on-premises in server rooms that a company builds and maintains. Cloud computing allows companies to host workloads on third-party servers. These servers aren’t really “in the cloud”—the biggest AWS data center in America, for instance, is in &lt;a href="https://datacenterfrontier.com/top-10-cloud-campuses/"&gt;Virginia&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z18Q6oWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/038x6lk6bpev51akf642.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z18Q6oWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/038x6lk6bpev51akf642.png" alt="data-center"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Essentially, when working with the cloud, you pay for infrastructure as though it were a bundle of different services—storage and compute among them. One of the advantages of this model is that you can pay for additional services (AWS offers a &lt;a href="https://aws.amazon.com/products/"&gt;whole bunch&lt;/a&gt;, such as analytics, containers, databases, and more. The public cloud is always at the ready, waiting for you to pay up and get more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maintenance"&gt;
  &lt;/a&gt;
  Maintenance
&lt;/h3&gt;

&lt;p&gt;The second major difference between on-prem and cloud is maintenance—particularly, the costs of that maintenance. On-prem infrastructure, by definition, is local and physical, meaning you need IT staff to buy, rack, and connect the servers that you need. And that’s just the setup. Then, you need them to manage the servers, which includes the management of hardware, software, security, and performance. If you want to expand, that’s another order and another busy IT person.&lt;/p&gt;

&lt;p&gt;On-prem software requires licensing and installation, and when that software needs updating (which it always does), then you again need IT to download and deploy updates. According to &lt;a href="https://www.zdnet.com/article/toolkit-calculate-datacenter-server-power-usage/"&gt;ZDnet&lt;/a&gt;, it costs $731.94 per machine per year just to power a server. That base price plus all the setup and maintenance costs can add up––and then you need to cool it all, which, according to &lt;a href="https://dataspan.com/blog/data-center-cooling-costs/"&gt;DataSpan&lt;/a&gt;, will be almost half your investment.&lt;/p&gt;

&lt;p&gt;Cloud infrastructure outsources all that setup and maintenance to a data center that handles setup and maintenance (and they can do so at scale if you pay up). By running workloads in the public cloud, companies can pay for storage and compute on an as-needed basis, meaning they can scale up or down depending on usage and company growth.&lt;/p&gt;

&lt;p&gt;With public cloud providers offering servers all over the globe, that scale also means global coverage at the click of a button. Plus, due to that global coverage, if a data center in one region goes down, a data center in another region can pick up the slack.&lt;/p&gt;

&lt;p&gt;And whereas on-prem infrastructure requires ordering, racking, and installing a server, public cloud servers provide near-instant provisioning, meaning scale-up happens about as fast as you can request it (i.e., pay for it). To sweeten the deal, public cloud providers also offer an array of cloud services that you either can’t get on-prem or would have difficulties getting on-prem, such as machine learning or quantum computing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#control"&gt;
  &lt;/a&gt;
  Control
&lt;/h3&gt;

&lt;p&gt;Control is the most complex, gray-zone difference between on-prem and cloud. Theoretically, since you (the company) own and operate your on-prem servers, you have more control than you would if you handed over your servers to a third party.&lt;br&gt;
The costs of cloud computing make that clear. Entire businesses, such as &lt;a href="https://www.duckbillgroup.com/"&gt;The Duckbill Group&lt;/a&gt; (led by the inimitable, sarcastic &lt;a href="https://twitter.com/QuinnyPig"&gt;Corey Quinn&lt;/a&gt;), have sprung up to help businesses control cloud spend.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cRUN7_qS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gr2n5db36mwx2gtidg7l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cRUN7_qS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gr2n5db36mwx2gtidg7l.png" alt="duckbill spend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS is notorious for runaway cloud spend. A recurring controversy, for instance, involves students spinning up AWS instances and unknowingly accumulating a bill worth thousands of dollars.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Hey friends,&lt;br&gt;&lt;br&gt;I have a panicked student in my DMs who’s accidentally racked up an $8k AWS bill. &lt;br&gt;&lt;br&gt;My suggestion of “talk to Support” is no good—apparently they won’t issue a billing adjustment. Anybody got better ideas, or know someone at AWS who can help them out?&lt;br&gt;&lt;br&gt;RT for reach?&lt;/p&gt;— Alex Chan (@alexwlchan) &lt;a href="https://twitter.com/alexwlchan/status/1399095011178958851?ref_src=twsrc%5Etfw"&gt;May 30, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;Cloud costs are just the beginning. Every other part of your cloud infrastructure falls prey to the same pattern—a pattern that’s in part inevitable due to the infrastructure not being yours.&lt;/p&gt;

&lt;p&gt;Ultimately, AWS (or Google Cloud or Microsoft Azure) can do whatever it wants with its servers and services, and you’re beholden to their whims. That lack of control makes many businesses uncomfortable.&lt;/p&gt;

&lt;p&gt;For some businesses, not owning their own infrastructure isn’t just uncomfortable—it’s illegal. Organizations that handle highly sensitive data (like medical or financial transactions) may be required by regulations such as HIPAA and FERPA to keep their business off the public cloud.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#startups-and-enterprises-face-different-debates"&gt;
  &lt;/a&gt;
  Startups and enterprises face different debates
&lt;/h2&gt;

&lt;p&gt;Startups and enterprises are coming into the on-prem vs. cloud debate with different priorities.&lt;/p&gt;

&lt;p&gt;Startups are starting from scratch and must consider agility, speed, and upfront cost; enterprises are starting with technical debt and must consider prior infrastructure investments. You can’t understand the debate, nor your place in it, until you understand the business context.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-startup-perspective-start-small-and-scale-as-necessary"&gt;
  &lt;/a&gt;
  The startup perspective: Start small and scale as necessary
&lt;/h3&gt;

&lt;p&gt;Before public clouds (and AWS especially), startups had to raise entire funding rounds just to afford the server infrastructure that could support a minimum viable product (MVP). But the rise of the public cloud meant that even the scrappiest startup could test out a half-baked idea without too much expenditure.&lt;/p&gt;

&lt;p&gt;With public clouds, startups can start small and scale their cloud expenditure as they grow, meaning they only pay for what they use. This cost model makes the public cloud appealing to startups. As startups grow, however, they may experience vendor lock-in. If you started on AWS, it’s always going to be easier, logistically, to stay on AWS.&lt;/p&gt;

&lt;p&gt;Even if the costs rise—even if the costs rise a lot—you’d still have to compare those costs to the costs of switching, which includes any potential downtime as well as the opportunity costs of reallocating engineers to migration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Counter-example:&lt;/strong&gt; The startup perspective described above isn’t universal. Dropbox, for instance, a 14-year-old company, eventually moved off AWS and built its own data centers. Dropbox ended up saving almost &lt;a href="https://www.geekwire.com/2018/dropbox-saved-almost-75-million-two-years-building-tech-infrastructure/"&gt;$75 million&lt;/a&gt; over two years.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mhua0GUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ew50gwo4xmgfs5omp71l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mhua0GUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ew50gwo4xmgfs5omp71l.png" alt="data center counter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-enterprise-perspective-if-it-aint-broke-dont-fix-it"&gt;
  &lt;/a&gt;
  The enterprise perspective: “If it ain’t broke, don’t fix it”
&lt;/h3&gt;

&lt;p&gt;Enterprises (large companies that may have been around since before the Internet, much less cloud computing) invested in on-prem infrastructure before the public cloud was an option. As such, by necessity, most enterprises will have some measure of on-prem infrastructure to deal with.&lt;/p&gt;

&lt;p&gt;Migration to the public cloud is notoriously costly and difficult. The vendor lock-in that startups experience, mentioned above, is worse for enterprises attached to on-prem infrastructure they can’t easily replace. And, of course, this on-prem infrastructure isn’t sitting there. It’s operating and maintaining essential workloads. Replacing it all risks downtime and necessitates time.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://www.ciodive.com/spons/why-do-cloud-migrations-fail/600946/"&gt;Cloud Security Alliance research&lt;/a&gt;, 90% of CIOs have gone through failed or disrupted migration projects. Plus, only 25% met their deadlines for migrations. To complicate things further, a &lt;a href="https://www.fortinet.com/content/dam/fortinet/assets/analyst-reports/ar-2019-ihsm-fortinet-wp-q2.pdf"&gt;Fortinet study&lt;/a&gt; found that 74% of companies have actually moved applications back to on-prem from the cloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Counter-example:&lt;/strong&gt; Despite the reasons above, many enterprises are still shifting to the public cloud. HSBC, for instance, a bank founded in 1865 that employs over 200,000 people, &lt;a href="https://aws.amazon.com/solutions/case-studies/hsbc/"&gt;migrated to AWS&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#capex-vs-opex"&gt;
  &lt;/a&gt;
  CAPEX vs. OPEX
&lt;/h3&gt;

&lt;p&gt;So far, we’ve covered the debate in primarily technological terms, but there’s also a financial lens through which to view these arguments.&lt;/p&gt;

&lt;p&gt;You can slice through the startup vs. enterprise framing and translate the debate into purely financial terms: capital expenditures (CAPEX) vs. operational expenditures (OPEX).&lt;/p&gt;

&lt;p&gt;On-prem requires an up-front investment in server hardware (a CAPEX cost), whereas the public cloud scales up and down as you use it (an OPEX cost). Depending on your funding and how you want to account for infrastructure costs, either on-prem or cloud might be more appealing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-rise-of-selfhosting-and-an-end-to-the-debate"&gt;
  &lt;/a&gt;
  The rise of self-hosting (and an end to the debate?)
&lt;/h2&gt;

&lt;p&gt;For years, the on-prem vs. public cloud debate has assumed that the two approaches are contradictory and opposite. In recent years, however, a new infrastructure option has emerged: the private cloud. With the private cloud, you may be able to end the debate—and have your cake and eat it too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-selfhosted-software"&gt;
  &lt;/a&gt;
  What is self-hosted software?
&lt;/h3&gt;

&lt;p&gt;Self-hosted software is software that you run on your own cloud infrastructure. In the case of a company that purchased a new email tool, you’d run the email software in your private cloud instead of using the SaaS version that is hosted on the public cloud.&lt;/p&gt;

&lt;p&gt;In a sense, you can get the best of both worlds. With a private cloud, you get the scalability of the public cloud but the control of on-prem. That means you can scale like a startup but remain in control like an enterprise.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-multicloud-future"&gt;
  &lt;/a&gt;
  The multi-cloud future
&lt;/h3&gt;

&lt;p&gt;The great on-prem vs cloud debate may end in a whimper instead of a bang. Nowadays, many companies use both private and public cloud infrastructure (a setup referred to as “multi-cloud”).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.flexera.com/blog/cloud/cloud-computing-trends-2021-state-of-the-cloud-report/"&gt;Flexera research&lt;/a&gt; found, for instance, that 92% of enterprises and 61% of SMBs (which includes startups) have a multi-cloud strategy.&lt;/p&gt;

&lt;p&gt;The future might not be any single option but an amalgamation of many options that evolve as companies grow and their needs change. Or once the next AWS-type revolution comes and upends everything again.&lt;/p&gt;

&lt;p&gt;Companies are increasingly offering self-hosted options. We here at Retool, for instance, now offer the ability to &lt;a href="https://retool.com/self-hosted/"&gt;self-host a Retool instance&lt;/a&gt;. The Retool self-hosted option is especially helpful if you have a lot of data that you can only access via a private network, a local network, or a virtual private network (VPN). Plus, you can use Docker, Kubernetes, Heroku, or Render for on-prem deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reevaluate-your-infrastructure-needs-from-firstprinciples"&gt;
  &lt;/a&gt;
  Re-evaluate your infrastructure needs from first-principles
&lt;/h2&gt;

&lt;p&gt;The cloud, especially for startups, has become something resembling a common-sense choice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Of course you deploy on AWS, the assumption goes, what else would you do?&lt;/strong&gt; Though the revolution AWS started can’t be understated, you also shouldn’t overstate its permanence. The changes the public cloud created are massive, and from its inception to the foreseeable future, deploying software in the public cloud (SaaS) will be a viable strategy for many companies.&lt;/p&gt;

&lt;p&gt;For an increasing number of companies, however, the private cloud is becoming an option worth thinking about. Much of technology, as in business and society, is cyclical—don’t assume the death of on-prem infrastructure until you evaluate your options from a first-principles perspective. &lt;/p&gt;

&lt;p&gt;The private cloud, especially, points toward the resurgence of on-prem. The future might be more local than you think.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>Understanding JavaScript Array Methods</title>
      <author>Victor Ikechukwu</author>
      <pubDate>Wed, 16 Jun 2021 00:49:33 +0000</pubDate>
      <link>https://dev.to/mr_victor/understanding-javascript-array-methods-44fj</link>
      <guid>https://dev.to/mr_victor/understanding-javascript-array-methods-44fj</guid>
      <description>&lt;h3&gt;
  &lt;a href="#if-youre-a-javascript-developer-then-you-should-be-familiar-with-the-most-commonly-used-es5-and-es6-array-methods"&gt;
  &lt;/a&gt;
  If you're a JavaScript developer, then you should be familiar with the most commonly used ES5 and ES6+ array methods.
&lt;/h3&gt;

&lt;p&gt;These methods make coding in JavaScript a lot easier and also make your code look clean and easy to understand to everyone.&lt;/p&gt;

&lt;p&gt;So in this article, we are going to explore some of the most important and widely used array methods used in JavaScript. So let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-arrayforeach-method"&gt;
  &lt;/a&gt;
  The Array.forEach Method
&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;Array.forEach&lt;/code&gt; method has the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callbackfn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;forEach&lt;/code&gt; method executes a provided callback function once for every element in the array.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;months&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;January&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;February&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;March&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;April&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;May&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;June&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;months&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="cm"&gt;/* output
January
February
March
April
May
June
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a  &lt;a href="https://codepen.io/Vickyfloxy/pen/LYbgWdY"&gt;Codepen Sample&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Here, inside the &lt;code&gt;forEach&lt;/code&gt; loop callback function, each element of the array is automatically passed as the first parameter of the function.  &lt;/p&gt;

&lt;p&gt;One important thing you need to keep in mind is that the forEach method does not return any value.&lt;/p&gt;

&lt;p&gt;Take a look at the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;workDays&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Monday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tuesday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wednesday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thursday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;returnedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;workDays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;returnedValue: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;returnedValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that &lt;code&gt;forEach&lt;/code&gt; is only used to loop through the array and perform some processing or logging. It does not return any value, even if you explicitly &lt;code&gt;return&lt;/code&gt; a value from the callback &lt;code&gt;function&lt;/code&gt; (this means that the returned value comes as &lt;code&gt;undefined&lt;/code&gt; in the above example).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-using-the-arrayforeach-method"&gt;
  &lt;/a&gt;
  Advantages of using the Array.forEach Method
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using a forEach loop makes your code shorter and easier to understand&lt;/li&gt;
&lt;li&gt;When using a forEach loop, we don't need to keep track of how many elements are available in the array. So it avoids the creation of an extra counter variable.&lt;/li&gt;
&lt;li&gt;Using a forEach loop makes code easy to debug because there are no extra variables for looping through the array&lt;/li&gt;
&lt;li&gt;The forEach loop automatically stops when all the elements of the array are finished iterating.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-arraymap-method"&gt;
  &lt;/a&gt;
  The Array.map Method
&lt;/h2&gt;

&lt;p&gt;The Array map method is the most useful and widely used array method among all other methods.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Array.map&lt;/code&gt; method has the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callbackfn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The map method executes a provided callback function once on every element in the array and it &lt;strong&gt;returns a new transformed array&lt;/strong&gt;. that contains the results.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;workDays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Monday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tuesday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wednesday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thursday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Friday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;upperDays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;workDays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;upperDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY','FRIDAY']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codepen.io/Vickyfloxy/pen/wvoYJOp"&gt;Code Sample&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In the above code, inside the callback function, we’re converting each element to uppercase and returning it.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;map&lt;/code&gt; method helps to avoid creating a separate converted array beforehand for storing the converted elements. So it saves memory space and also the code looks much cleaner using &lt;code&gt;Array.map&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the &lt;code&gt;map&lt;/code&gt; method returns a new array that is of the exact same length as the original array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The difference between the &lt;code&gt;forEach&lt;/code&gt; and map methods is that &lt;code&gt;forEach&lt;/code&gt; is only used for looping and does not return anything back. On the other hand, the &lt;code&gt;map&lt;/code&gt; method returns a new array that is of the exact same length as the original array.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Also, note that &lt;code&gt;map&lt;/code&gt; does not change the original array but returns a new array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The array &lt;code&gt;map&lt;/code&gt; method is also useful if you want to extract only specific data from the array like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sheridan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Carte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Paul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Victor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;workersAges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workersAges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//output: [30, 45, 25, 22]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codepen.io/Vickyfloxy/pen/zYoMYjE"&gt;Code Sample&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In the above code, we're extracting only the age of each worker and storing them in a new array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-using-the-map-method"&gt;
  &lt;/a&gt;
  Advantages of using the map method
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It helps quickly generate a new array without changing the original array&lt;/li&gt;
&lt;li&gt;It allows us to quickly extract any element of the array&lt;/li&gt;
&lt;li&gt;It generates an array with the exact same length as the original array&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-arrayfind-method"&gt;
  &lt;/a&gt;
  The Array.find Method
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Array.find&lt;/code&gt; method has the following syntax:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Array.find(predicate: (value: element, index: number, array: []))&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;find&lt;/code&gt; method returns the value of the first element in the array that satisfies the provided test condition. and undefined otherwise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;find&lt;/code&gt; method takes a callback function &lt;code&gt;(predicate)&lt;/code&gt; as the first argument and executes the callback function &lt;code&gt;(predicate)&lt;/code&gt;for every element of the array. Each array element value is passed as the first parameter to the callback function.&lt;/p&gt;

&lt;p&gt;Suppose, we have a list of employees like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;employees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;David Carlson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Copper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mike Sheridan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Carte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we want to get the record for the employee whose age is less than 30. In this case, we can use the find method as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;underAgeWorker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;employees&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;underAgeWorker&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;// outputs: {name: "John Copper", age: 25}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a  &lt;a href="https://codepen.io/Vickyfloxy/pen/jOVQEPB"&gt;Code Sample&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Even though there is &lt;code&gt;"Mike Sheridan"&lt;/code&gt; in the list whose age is also less than 30, the find method will stop when it finds the first match. So it will not return the first object with an age less than 30. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-using-the-find-method"&gt;
  &lt;/a&gt;
  Advantages of using the find method
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It allows us to quickly find any element without writing a lot of code&lt;/li&gt;
&lt;li&gt;It stops looping as soon as it finds a match so there is no need for an extra break statement&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-arrayfindindex-method"&gt;
  &lt;/a&gt;
  The Array.findIndex Method
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Array.findIndex&lt;/code&gt; method has the following syntax:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Array.findIndex(callbackfn: (value: element, index: number, array: []))&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;findIndex&lt;/code&gt; method returns the &lt;strong&gt;index&lt;/strong&gt; of the first element in the array &lt;strong&gt;that satisfies the provided test condition&lt;/strong&gt;. Otherwise, it returns -1, indicating that no element passed the test.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;employees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;David Carlson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Copper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mike Sheridan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Carte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;employees&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;// outputs:  1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we get the output as 1 which is the index of the first object with the name John. Note that the index of an array starts with zero.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-using-the-findindex-method"&gt;
  &lt;/a&gt;
  Advantages of using the findIndex method
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It allows us to quickly find the index of an element without writing a lot of code&lt;/li&gt;
&lt;li&gt;It stops looping as soon as it finds a match so there is no need for an extra break statement&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-arrayfilter-method"&gt;
  &lt;/a&gt;
  The Array.filter Method
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Array.filter&lt;/code&gt; method has the following syntax:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Array.filter(callbackfn: (value: element, index: number, array: []))&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; method takes a callback function as the first argument and executes the callback function for every element of the array and returns &lt;code&gt;a new array&lt;/code&gt; with all the elements that meet the condition specified in the callback function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So using the &lt;code&gt;filter&lt;/code&gt; method, it does not stop when it finds a particular match but keeps checking for other elements in the array that match the condition. Then it returns all the matching elements from the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;employees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;David Carlson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Cooper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mike Sheridan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Carte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;];&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;employees&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//output [ { name: "John Cooper", age: 24 }, { name: "Mike Sheridan", age: 25 } ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that the &lt;code&gt;filter&lt;/code&gt; method always returns an array. If no element passes the test condition, an empty array will be returned.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-using-the-filter-method"&gt;
  &lt;/a&gt;
  Advantages of using the filter method
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It allows us to quickly find all the matching elements from the array&lt;/li&gt;
&lt;li&gt;It always returns an array even if there is no match, so it avoids writing extra if conditions&lt;/li&gt;
&lt;li&gt;It avoids the need of creating an extra variable to store the filtered elements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-arrayevery-method"&gt;
  &lt;/a&gt;
  The Array.every Method
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Array.every&lt;/code&gt; method has the following syntax:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Array.every(callbackfn: (value: any, index: number, array: []))&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;every&lt;/code&gt; method tests whether all elements in the array pass the provided test conditions and returns a boolean &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Imagine you have a registration form, and you want to check if all of the required fields are entered or not before submitting the form. You can use the &lt;code&gt;every&lt;/code&gt; method to check for each field value easily.&lt;br&gt;
      Here's a &lt;a href="https://codepen.io/Vickyfloxy/pen/XWNypxe"&gt;Code Sample&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#advantage-of-using-the-every-method"&gt;
  &lt;/a&gt;
  Advantage of using the every method
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It lets us to quickly check if all the elements match certain criteria without writing a lot of code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#the-arrayreduce-method"&gt;
  &lt;/a&gt;
  The Array.reduce Method
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Array.reduce&lt;/code&gt; method has the following syntax:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Array.reduce(callbackfn: (accumulator: any, currentValue: any, Index: number, array: []), initialValue)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;reduce&lt;/code&gt; method executes a &lt;strong&gt;reducer&lt;/strong&gt; function (that you provide) on each element of the array, resulting in a single output value.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the output of the &lt;code&gt;reduce&lt;/code&gt; method is always a single value. It can be an object, a number, a string, an array, and so on. It depends on what you want the output of &lt;code&gt;reduce&lt;/code&gt; method to generate but it's always a single value.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;reduce&lt;/code&gt; method accepts a callback function that receives &lt;code&gt;accumulator&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;array&lt;/code&gt; as the values. In the above code, we’re using only &lt;code&gt;accumulator&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;accumulator&lt;/code&gt; will contain the &lt;code&gt;initialValue&lt;/code&gt; to be used for the &lt;code&gt;array&lt;/code&gt;. The &lt;code&gt;initialValue&lt;/code&gt; decides the return type of the data returned by the &lt;code&gt;reduce&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;number&lt;/code&gt; is the second parameter to the callback function that will contain the &lt;code&gt;array&lt;/code&gt; element&lt;br&gt;
during each iteration of the loop.&lt;/p&gt;

&lt;p&gt;In the above code, we have provided &lt;code&gt;0&lt;/code&gt; as the &lt;code&gt;initialValue&lt;/code&gt; for the &lt;code&gt;accumulator&lt;/code&gt;. So the first time the callback function executes, the &lt;code&gt;accumulator&lt;/code&gt; + &lt;code&gt;number&lt;/code&gt; will be &lt;code&gt;0 + 1 = 1&lt;/code&gt; and we're returning back the value &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next time the callback function runs, &lt;code&gt;accumulator&lt;/code&gt; + &lt;code&gt;number&lt;/code&gt; will be &lt;code&gt;1 + 2 = 3&lt;/code&gt; (&lt;code&gt;1&lt;/code&gt; here is&lt;br&gt;
the previous value returned in the last iteration and &lt;code&gt;2&lt;/code&gt; is the next element from the &lt;code&gt;array&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Then, the next time the callback function runs, &lt;code&gt;accumulator&lt;/code&gt; + &lt;code&gt;number&lt;/code&gt; will be&lt;code&gt;3 + 3 = 6&lt;/code&gt; (the first &lt;code&gt;3&lt;/code&gt; here is the previous value returned in the last iteration and the next &lt;code&gt;3&lt;/code&gt; is the next element from the &lt;code&gt;array&lt;/code&gt;) and it will continue this way until all the elements in the &lt;code&gt;number&lt;/code&gt;s &lt;code&gt;array&lt;/code&gt; are not iterated.&lt;/p&gt;

&lt;p&gt;So the &lt;code&gt;accumulator&lt;/code&gt; will retain the value of the last operation just like a static variable.&lt;/p&gt;

&lt;p&gt;In the above code, &lt;code&gt;initialValue&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt; is not required because all the elements of the &lt;code&gt;array&lt;/code&gt; are&lt;br&gt;
integers.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#advantages-of-using-the-reduce-method"&gt;
  &lt;/a&gt;
  Advantages of using the reduce method
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using reduce allows us to generate any type of simple or complex data based on the array&lt;/li&gt;
&lt;li&gt;It remembers the previously returns data from the loop so helps us avoid creating a global variable to store the previous value&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#thanks-so-much-for-reading"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Thanks so much for reading!&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ayZxA0j3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615377822628/WxinRNMgC.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayZxA0j3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615377822628/WxinRNMgC.gif" alt="thank-you.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;That's all from me guys. hoped you've learned a little bit about the awesome JavaScript Array and its methods *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you still have any questions, don't hesitate to reach out in the comments section below! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want to stay up to date with regular content regarding JavaScript, Python, And How to code in general? Follow me on  &lt;a href="https://twitter.com/VectorIkechukwu"&gt;Twitter&lt;/a&gt; .&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
**Enjoyed reading this as much as i enjoyed writing it for you? 😍** . support me with a coffee 😃
&lt;a href="https://www.buymeacoffee.com/molipa"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Brainstorm last-minute Father's Day gifts with Notion and SMS</title>
      <author>Lizzie Siegle</author>
      <pubDate>Tue, 15 Jun 2021 23:09:01 +0000</pubDate>
      <link>https://dev.to/twilio/brainstorm-last-minute-father-s-day-gifts-with-notion-and-sms-1e5o</link>
      <guid>https://dev.to/twilio/brainstorm-last-minute-father-s-day-gifts-with-notion-and-sms-1e5o</guid>
      <description>&lt;p&gt;Father’s Day is coming up, and my twin brother and I need to plan what to get for our dad. For multimedia notes and brainstorming, I like to use Notion, an app that bills itself as “an all-in-one workspace where you can write, plan, collaborate and get organized.” Notion has options for making notes, adding tasks, managing projects, and more. My brother doesn’t use Notion, but he does text a lot. To make it easy for us to collaborate, I made an SMS bot to which we both can text gift ideas. The ideas will be gathered into a single Notion page using &lt;a href="https://developers.notion.com/"&gt;Notion's recently-released API&lt;/a&gt;, Twilio SMS, the &lt;a href="https://www.twilio.com/docs/labs/serverless-toolkit/general-usage"&gt;Twilio Serverless Toolkit&lt;/a&gt;, and &lt;a href="https://www.twilio.com/docs/runtime/functions"&gt;Twilio Functions&lt;/a&gt;, making my gift-buying process a lot easier.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i9KdCKVA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/nKE43DY1urch3qFBnmGumcODjN3uFJNfz0Sc4swJu4eaGhHsQ1fsN4o2JjWBePUiOKgmkoBBUAnLSL" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9KdCKVA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/nKE43DY1urch3qFBnmGumcODjN3uFJNfz0Sc4swJu4eaGhHsQ1fsN4o2JjWBePUiOKgmkoBBUAnLSL" alt="gift sms to notion db"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;A Twilio account - &lt;a href="http://www.twilio.com/referral/iHsJ5D"&gt;sign up for a free one here and receive an extra $10 if you upgrade through this link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A Twilio phone number with SMS capabilities - &lt;a href="https://support.twilio.com/hc/en-us/articles/223135247-How-to-Search-for-and-Buy-a-Twilio-Phone-Number-from-Console"&gt;configure one here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Node.js installed - &lt;a href="https://nodejs.org/en/download/"&gt;download it here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Notion account - &lt;a href="https://www.notion.so/desktop"&gt;download the Mac or iOS app&lt;/a&gt; here and make an account (or you can just make an account at that link and use Notion in the browser).&lt;/li&gt;
&lt;li&gt;A personal phone number to test the project.
### Get Started with the Notion API
Go to the &lt;a href="https://developers.notion.com/"&gt;Notion API website&lt;/a&gt; and make sure you are logged into a Notion workspace as an Admin user. If you're not an Admin in your current workspace, &lt;a href="https://www.notion.so/Create-join-switch-workspaces-3b9be78982a940a7a27ce712ca6bdcf5#9332861c775543d0965f918924448a6d"&gt;make a new personal workspace for free here&lt;/a&gt;. From the Notion API site, click on &lt;em&gt;My integrations&lt;/em&gt; in the top right corner.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_xvxyHQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/_CMOUKAwcDfbTu0pJQmmX9hFh9CvZyGCaMBqiMpH3jaW6Q.width-800.png" alt="my integrations in top right corner"&gt;
Select &lt;em&gt;New integration&lt;/em&gt; and on the following page, give your integration a name like &lt;em&gt;fathers-day-collab-sms&lt;/em&gt;. For the purposes of this post, the integration type can be &lt;em&gt;internal&lt;/em&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--erLTQBky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/dTMlRvqNDmEMPBtqeiQo3uxVSh40zfHgv2JJO7wARozGT0.width-500.png" alt="basic info for integration"&gt;
After clicking &lt;em&gt;Submit&lt;/em&gt;, you will be taken to a page with your integration's Internal Integration Token. Copy it and keep it hidden for later.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJRPBOnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/08Cgw9bNKqQ4w2Z-QibVdhZmQwiRc20K0kok7aQU95c0-h.width-500.png" alt="internal integration token"&gt;
Make a new page in your Notion workspace either in your Notion app or at &lt;em&gt;notion.so&lt;/em&gt; by clicking the plus sign next to &lt;em&gt;Workspace&lt;/em&gt;. Your Notion might instead have an "Add a Page" button which you would click instead, like this.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nACA9CDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/geNoEO4LH69u7X7bbjGb-aq8gwnIKrsNKXWFAhXfMmYvU3.width-500.png" alt="add a page button"&gt;
Below are two of my workspaces: one called &lt;em&gt;Father's Day Collab SMS&lt;/em&gt;, and the other called &lt;em&gt;Twitch test&lt;/em&gt; which has some sub-spaces.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cGlLh0Ej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/WuJLns6z9jnkcK75iaDZGz5I624r3-7moDco99MwX5hd7a.width-500.png" alt="workspace organization"&gt;
In your &lt;em&gt;Father's Day Collab SMS workspace&lt;/em&gt;, type a "/" to see possible commands. We want to make a table, so type "/table" and select &lt;em&gt;Table-Full Page&lt;/em&gt;. This inserts a new database into our workspace. You can read more on the &lt;a href="https://www.notion.so/Intro-to-databases-fd8cd2d212f74c50954c11086d85997e#13b4ab72cb8948ebbf67e3799d7adb55"&gt;types of databases in Notion here&lt;/a&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SLvV6Cjw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/CpxGA5QjHaGrZQf4bhC2zsxONR-UckHEEFA_PXl8xBTFp_.width-500.png" alt="table command"&gt;
Integrations don't have access to any pages (or databases) in the workspace at first. A Notion user needs to share certain pages with an integration so those pages can be accessed using the API, helping keep information in Notion secure. To let the Notion API access our database, click &lt;em&gt;Share&lt;/em&gt; in the top right of your database (in the workspace) followed by the blue &lt;em&gt;Invite&lt;/em&gt; button. Under &lt;em&gt;Integrations&lt;/em&gt;, click &lt;em&gt;Father's Day Collab SMS&lt;/em&gt; workspace.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yi5-CMvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/tb4uLbznzJQQmcQx0BJN38jqarPHUOa_Rcdndzk2fdHM6C.width-500.png" alt="share to web, share with workspace, share with integration"&gt;
You can see more information on sharing a database with your integration &lt;a href="https://developers.notion.com/docs/getting-started"&gt;here on the Notion API website&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Give your database a title and some column names--this blog post's database is &lt;em&gt;Possible Gifts&lt;/em&gt; and the column names (what we want to keep track of) are &lt;em&gt;Name&lt;/em&gt;, &lt;em&gt;Where&lt;/em&gt;, and &lt;em&gt;Price&lt;/em&gt;. Set these in the Notion app like below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dH5dJYU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/ipNGpMhFi7V587_AJ_RPEsiAt8ZI7JJQ3abWfzcaVexvA4.width-500.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dH5dJYU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/ipNGpMhFi7V587_AJ_RPEsiAt8ZI7JJQ3abWfzcaVexvA4.width-500.png" alt="column names in Notion app/database"&gt;&lt;/a&gt;&lt;br&gt;
Lastly, take note of the ID of the database you just created. Open Notion in a browser and, viewing the database as a full page, the database ID is the part of the URL after &lt;em&gt;notion.so&lt;/em&gt; and the slash and before the question mark (this blog post database begins with &lt;em&gt;dcfc&lt;/em&gt; and ends with &lt;em&gt;e9e&lt;/em&gt;.) The ID is 32 characters long with numbers and letters. Copy the ID and save it somewhere you can easily find soon.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fzQJZtTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/Dk98UsIVNJG4E4hI-j1PJmJrRY9bciAiOlA5YKrQvocUk2.width-500.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fzQJZtTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/Dk98UsIVNJG4E4hI-j1PJmJrRY9bciAiOlA5YKrQvocUk2.width-500.png" alt="Notion database ID in URL"&gt;&lt;/a&gt;&lt;br&gt;
My teammate Kelley's database link sometimes contained her Notion username--that is something we don't want! You may have to make a new database under a different project if your database link does not look like the one in the image above.&lt;/p&gt;

&lt;p&gt;So far, we can add items to the database in Notion, but what if someone (like my brother) does not have Notion? Now we can add Twilio so non-Notion users can fill the database via SMS!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#get-your-app-up-and-running-quickly-with-the-twilio-serverless-toolkit"&gt;
  &lt;/a&gt;
  Get your App Up and Running Quickly with the Twilio Serverless Toolkit
&lt;/h3&gt;

&lt;p&gt;The Serverless Toolkit is CLI tooling that helps you develop locally and deploy to &lt;a href="https://www.twilio.com/docs/runtime"&gt;Twilio Runtime&lt;/a&gt;. The best way to work with the Serverless Toolkit is through the Twilio CLI. If you don't have the &lt;a href="https://www.twilio.com/docs/twilio-cli/quickstart"&gt;Twilio CLI&lt;/a&gt; installed yet, run the following commands on the command line to install it and the Serverless Toolkit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;twilio-cli &lt;span class="nt"&gt;-g&lt;/span&gt;
twilio login
twilio plugins:install @twilio-labs/plugin-serverless
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create your new project and install our lone requirement &lt;code&gt;superagent&lt;/code&gt;, an HTTP client library to make HTTP requests in Node.js, by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;twilio serverless:init notion-api-twilio-sms &lt;span class="nt"&gt;--template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;blank
&lt;span class="nb"&gt;cd &lt;/span&gt;notion-api-twilio-sms
npm &lt;span class="nb"&gt;install &lt;/span&gt;superagent
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit an &lt;em&gt;.env&lt;/em&gt; file and add an environment variable for your Notion API key. In this blog post, the API key is called &lt;em&gt;NOTION_API_KEY&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-a-twilio-function-with-javascript"&gt;
  &lt;/a&gt;
  Make a Twilio Function with JavaScript
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;/functions&lt;/code&gt; directory and make a new file called &lt;code&gt;write_to_db.js&lt;/code&gt; containing the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;superagent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;superagent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;twiml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Twilio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;twiml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MessagingResponse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;inbMsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;propObj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;firstCell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secondCell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;thirdCell&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inbMsg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/,/g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//# of commas means # columns sent&lt;/span&gt;
  &lt;span class="c1"&gt;//check count of commas in inbound message: this will affect the Notion database columns we write to&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
      &lt;span class="nx"&gt;firstCell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inbMsg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;propObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstCell&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;//1 comma = 2 columns&lt;/span&gt;
      &lt;span class="nx"&gt;firstCell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inbMsg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;secondCell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inbMsg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;propObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstCell&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Where&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;secondCell&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;//2 commas, 3 columns&lt;/span&gt;
      &lt;span class="nx"&gt;firstCell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inbMsg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;secondCell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inbMsg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;thirdCell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inbMsg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;propObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstCell&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Where&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;secondCell&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Price&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;thirdCell&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;superagent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.notion.com/v1/pages`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;database_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`{YOUR-DATABASE-ID}`&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;properties&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;propObj&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Authorization&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NOTION_API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Notion-Version&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-05-13&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;twiml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Wrote &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;inbMsg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to the Notion page!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;twiml&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;twiml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Error: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;twiml&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code imports &lt;code&gt;superagent&lt;/code&gt; so we can handle HTTP requests in Node.js, makes a &lt;a href="https://www.twilio.com/docs/sms/api/message-resource"&gt;Twilio Messaging Response object&lt;/a&gt;, retrieves the inbound text message, checks the number of commas to decide which Notion database columns to post to, parses the inbound message to separate the input based on commas, and makes an object to pass to the Notion API's &lt;code&gt;properties&lt;/code&gt; parameter which uses property names or IDs as keys. For more information on the Database object, check out &lt;a href="https://developers.notion.com/reference/database#database-property"&gt;this section of the Notion API documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;superagent&lt;/code&gt;, we hit the Notion API &lt;code&gt;pages&lt;/code&gt; endpoint passing it the database ID (so we can write to the database) and the content we want to write to the database. We set our Notion API key, the &lt;code&gt;content-type&lt;/code&gt;, and the Notion version, and then send a text message confirmation response back so the user knows what they texted was written to the shared database.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://github.com/elizabethsiegle/notion-fathersday-sms"&gt;view the complete app on GitHub here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-the-function-with-a-twilio-phone-number"&gt;
  &lt;/a&gt;
  Configure the Function with a Twilio Phone Number
&lt;/h3&gt;

&lt;p&gt;To open up our app to the web with a public-facing URL, go back to the &lt;em&gt;notion-api-twilio-sms&lt;/em&gt; root directory and run &lt;code&gt;twilio serverless:deploy&lt;/code&gt; to deploy the app. This will return some information including a few URLs as shown below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ep16ps48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/zFFKS72w9w5h6oJC6VaQ6dSVf_OYpLaBH4FPAdUm4xBtua.width-500.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ep16ps48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/zFFKS72w9w5h6oJC6VaQ6dSVf_OYpLaBH4FPAdUm4xBtua.width-500.png" alt="function URLs generated when the app is deployed"&gt;&lt;/a&gt;&lt;br&gt;
Grab the Function URL ending in '/write_to_db' and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;twilio phone-numbers:update &lt;span class="o"&gt;{&lt;/span&gt;YOUR-TWILIO-NUMBER&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;--sms-url&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;https://YOUR-URL-HERE.twil.io/write_to_db&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to connect a Twilio phone number to the deployed Function URL. If you view the phone number in your Phone Numbers Console, it will still show up there as a "Function" and not a "Webhook URL". You can now text your Twilio number gift ideas for Father's day with the name, price, and location separated by commas and have it written to your Notion database.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XVkCTFLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/xOFklJDVaPT72aabDxQ-fHrO7jpZw6HX9PEHh2PmwUo1998aIlQ8uRSZpzEY2TRSxDzg0Zgpml4Xix" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XVkCTFLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/xOFklJDVaPT72aabDxQ-fHrO7jpZw6HX9PEHh2PmwUo1998aIlQ8uRSZpzEY2TRSxDzg0Zgpml4Xix" alt="body of text saved to Notion database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next-for-twilio-serverless-and-the-notion-api"&gt;
  &lt;/a&gt;
  What's Next for Twilio Serverless and the Notion API?
&lt;/h3&gt;

&lt;p&gt;How are you celebrating Father's Day? Twilio's Serverless Toolkit makes it possible to deploy web apps quickly, and Twilio Runtime seamlessly handles servers for you. I don't actually use Notion much, but I'm trying to use it as a personal wiki as I know so many people who are huge fans. There is a Notion integration that uses SendGrid to send an email whenever the &lt;em&gt;Status&lt;/em&gt; property of a page in a database is updated, showing how Notion can cause an external action, and you can use the &lt;a href="https://developers.notion.com/"&gt;Notion API&lt;/a&gt; for so much more!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>notion</category>
    </item>
    <item>
      <title>Higher-Order Component en React</title>
      <author>Gonzalo Barrera</author>
      <pubDate>Tue, 15 Jun 2021 22:08:38 +0000</pubDate>
      <link>https://dev.to/gbarreradev/higher-order-component-en-react-3mfa</link>
      <guid>https://dev.to/gbarreradev/higher-order-component-en-react-3mfa</guid>
      <description>&lt;p&gt;Los Higher-Order Component son una técnica usada en React que nos permite hacer un re-uso de los componentes.&lt;/p&gt;

&lt;p&gt;Es decir, es una función que recibe un componente y devuelve un nuevo componente.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;SuperComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;HocComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;WrappedComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Veamos un ejemplo muy típico en proyectos, obtener datos desde un fecth y mostrarlos en pantalla&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/hoc-1-n6fg1"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Si en nuestra aplicación tenemos varios componentes que van a realizar la misma acción, sería muy ineficiente duplicar el código todas las veces, para esto nos pueden servir los HOC&lt;/p&gt;

&lt;p&gt;Como podemos ver en el siguiente ejemplo, creamos una función WithDataFetching.js el cual recibe como parámetro, el endpoint que vamos a usar y el componente que queremos mostrar, es acá donde encapsularemos nuestra lógica, y luego retornamos el componente que pasamos como parámetro, pero infectándole el nuevo state, para luego en nuestro App.js pasarle como parámetro el endpoint que necesitamos usar.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/hoc-2-f33bm"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Como ven, este tipo de patrón es una técnica que nos permitirá tener un control mucho mas claro de nuestro código y poder optimizar el re-uso de este.&lt;/p&gt;

</description>
      <category>espanol</category>
      <category>react</category>
      <category>hoc</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Building a Go Mod CLI to generate dependency trees</title>
      <author>Kapil Pau</author>
      <pubDate>Tue, 15 Jun 2021 21:49:22 +0000</pubDate>
      <link>https://dev.to/kapilpau/building-a-go-mod-cli-to-generate-dependency-trees-6cb</link>
      <guid>https://dev.to/kapilpau/building-a-go-mod-cli-to-generate-dependency-trees-6cb</guid>
      <description>&lt;p&gt;So, picture the scene, you have a Go project and then get a security alert saying a vulnerability has been detected. You look at your go.mod to see if you're using it and it's nowhere to be seen, but then you see it in your go.sum. How do you find where it is coming from?&lt;/p&gt;

&lt;p&gt;Sound familiar? Well that's the situation I found myself in last week. So obviously, I tried to find a tool that would do it but couldn't find one, so like any programmer would do, I decided to build one.&lt;/p&gt;

&lt;p&gt;The tool can be found &lt;a href="https://github.com/kapilpau/go-mod-dependency-tree"&gt;here&lt;/a&gt;, with amd64 binaries for Linux, Windows and Mac available in the releases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CZbzP3-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/markdium-image/b2297d6dfefa5b226a886b6d452c461f" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CZbzP3-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/markdium-image/b2297d6dfefa5b226a886b6d452c461f" alt="installation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To install, simply download the appropriate binary for your operating system from the latest release, at the time of writing this, it was &lt;a href="https://github.com/kapilpau/go-mod-dependency-tree/releases/tag/v1.2.0"&gt;v1.2.0&lt;/a&gt;. Once downloaded, make sure the binary is executable and moved to be in your PATH, with the name &lt;code&gt;go-tree&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lxH2ACSS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/markdium-image/c8ff1bb5a6b4dec23822bfa2970433d7" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lxH2ACSS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/markdium-image/c8ff1bb5a6b4dec23822bfa2970433d7" alt="usage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tool only works with go mod projects, and requires the environment variable &lt;code&gt;GOPATH&lt;/code&gt; to be set (by default, it will be &lt;code&gt;$HOME/go&lt;/code&gt;). You can either run it from within the root directory of your go project (where you go.mod is located), or you can use the &lt;code&gt;-modulePath&lt;/code&gt; flag to pass in a relative or absolute path to the project you want to scan.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go-tree -modulePath $GOPATH/src/path/to/module/to/scan
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use the &lt;code&gt;-maxDepth&lt;/code&gt; flag to set the maximum recursion level, i.e. how far down the tree to scan. The options are either -1 or an integer above 0, -1 is to indicate no limit and is the default value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go-tree -maxDepth -1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final flag you can use is the &lt;code&gt;-find&lt;/code&gt; flag, which is the whole reason this tool exists. If you specify this flag with the module you would like to find, it will print the full tree for all of the instances of that package in the dependency tree. Note that if you use &lt;code&gt;-find&lt;/code&gt;, the &lt;code&gt;-maxDepth&lt;/code&gt; will be ignored.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go-tree -find github.com/kapilpau/go-mod-dependency-tree
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;None of these flags are required.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rrHuZbve--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/markdium-image/b68ba130ff3b3f7f1dcd648532948105" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rrHuZbve--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/markdium-image/b68ba130ff3b3f7f1dcd648532948105" alt="working"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As this is a single function cli tool, the whole code is contained within a &lt;a href="https://github.com/kapilpau/go-mod-dependency-tree/blob/main/dependency-tree.go"&gt;single file&lt;/a&gt;. The code has two main pathways, both of which work in a similar way.&lt;/p&gt;

&lt;p&gt;The first is the straight tree dump, i.e. where you don't specify the &lt;code&gt;-find&lt;/code&gt; flag. This route recursively searches each dependency's go.mod to find all of the dependencies for that module and prints out the name and version of the dependency. For this, we read in the go.mod file for your project, find all of the modules in the &lt;code&gt;requires&lt;/code&gt; section and look for the module in the &lt;code&gt;src&lt;/code&gt; or &lt;code&gt;pkg&lt;/code&gt; folders, in your &lt;code&gt;GOPATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If they have exist and have a &lt;code&gt;go.mod&lt;/code&gt; file, we continue through the chains and look for their dependencies. If we can't find a dependency in either location, or it doesn't have a &lt;code&gt;go.mod&lt;/code&gt; file, we end that branch there and move on.&lt;/p&gt;

&lt;p&gt;The other pathway is for when a user is searching for a specific module in the chain. In this case, it is slightly more complicated as we need to decide what to print out later on. For this, we use a custom tree struct, named &lt;code&gt;dependencyChain&lt;/code&gt;. This struct has two fields, &lt;code&gt;module&lt;/code&gt; (the name of the module currently being scanned) and &lt;code&gt;children&lt;/code&gt; (the dependencies of the current module).&lt;/p&gt;

&lt;p&gt;We do a similar recursive search to the one detailed above, however, rather than just simply printing out the values as we find them, we have to perform head recursion, so we can look at the outputs of the later recurssions before deciding what to do. So, if we find the module we're looking for, we end the branch of the tree there, as it would be wasteful to carry on, and we populate the &lt;code&gt;dependencyChain&lt;/code&gt; object to pass back. Then, when we have the list of &lt;code&gt;dependencyChain&lt;/code&gt;s for each module, we check the size of the &lt;code&gt;children&lt;/code&gt; field and if it is not empty, we pass it upwards, otherwise we ignore it. The reason we do this check is because we only want to see the branches that end in the module we're looking for.&lt;/p&gt;

&lt;p&gt;Once we have completed this head recursive search, we perform a tail recursive print, to loop through the &lt;code&gt;children&lt;/code&gt; of each &lt;code&gt;dependencyChain&lt;/code&gt; and display it as a tree.&lt;/p&gt;

&lt;p&gt;If the module you are looking for does not exist in the chain, or it cannot be found (as it may be in a non-go mod enabled project), then a message is printed out at the end to say so.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons learned
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nehbGxv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/markdium-image/4e6b1cbf958653686ee4d1351510f53f" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nehbGxv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/markdium-image/4e6b1cbf958653686ee4d1351510f53f" alt="learned"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I learned a lot from this project, namely how easy it is to create and build cli binaries in Go, even being able to build for different operating systems and architectures, without having to natively use an instance of them. This is definitely just the first of many more to come.&lt;/p&gt;

&lt;p&gt;I got to apply the principles of recursion, that we spent so long learning at uni, to a real-life scenario.&lt;/p&gt;

&lt;p&gt;I gained a deeper understanding of how Go stores dependencies, and where to find them when I need them.&lt;/p&gt;

</description>
      <category>go</category>
    </item>
    <item>
      <title>Day 0 of #100DaysOfCode!</title>
      <author>Christian Falucho</author>
      <pubDate>Tue, 15 Jun 2021 21:39:26 +0000</pubDate>
      <link>https://dev.to/cfalucho/day-0-of-100daysofcode-51a6</link>
      <guid>https://dev.to/cfalucho/day-0-of-100daysofcode-51a6</guid>
      <description>&lt;p&gt;Here I begin my #100DaysofCode challenge. I am excited to document and journal my journey on becoming a better front-end developer. &lt;/p&gt;

&lt;p&gt;I first heard the phrase &lt;a href="https://www.100daysofcode.com/"&gt; 100 days of Code &lt;/a&gt; on &lt;a href="https://www.codenewbie.org/"&gt;CodeNewbie &lt;/a&gt; podcast. Thank you Saron Yitbarek! Once, I learned about it, I was amazed to find out the growing community of developers blogging about their coding journey and all of the success stories of how it made them become better developers and how they gained useful habits to learn new technology or keep their skills up to date. &lt;/p&gt;

&lt;p&gt;I figured if I wanted to become better at learning programming and gain some new habits. Then why not join in on the fun and blog my journey as well😁. &lt;/p&gt;

&lt;p&gt;For today's post I want to start off by creating goals of what I hope to gain from doing this challenge. This way, when I look back I will see what I have accomplished and need to continue working on. Overall, it will help me keep myself grounded and remind me why i'm doing this. &lt;/p&gt;

&lt;h1&gt; Goals &lt;/h1&gt; 

&lt;ul&gt;
&lt;li&gt;code for an hour a day&lt;/li&gt;
&lt;li&gt;document what you coded in 30 mins&lt;/li&gt;
&lt;li&gt;complete &lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures"&gt;freeCodeCamp
&lt;/a&gt;JavaScript&lt;/li&gt;
&lt;li&gt;understand JavaScript better&lt;/li&gt;
&lt;li&gt;be able to tackle basic JavaScript Data Structures &amp;amp; Algorithms&lt;/li&gt;
&lt;li&gt;read &lt;a href="https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/scope%20%26%20closures/ch1.md"&gt;You Don't Know JS&lt;/a&gt; for 30 mins a day.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am determined to complete my goals and even if I don't end up completing all my goals. I'll be happy to have developed good habits and learn as much as I can about JavaScript. So here's to new challenges and a new journey! &lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>challenge</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How i prevent SQL Injection in my PHP code</title>
      <author>anass boutaline</author>
      <pubDate>Tue, 15 Jun 2021 21:21:14 +0000</pubDate>
      <link>https://dev.to/mjprogramation/how-i-prevent-sql-injection-in-my-php-code-ijj</link>
      <guid>https://dev.to/mjprogramation/how-i-prevent-sql-injection-in-my-php-code-ijj</guid>
      <description>&lt;p&gt;SQL injection is a code injection technique used to attack data-driven applications, in which malicious SQL statements are inserted into an entry field for execution. This is what Wikipedia can say about SQL injection.&lt;/p&gt;

&lt;p&gt;My small definition to SQL injection is an old school technique for attackers to inject a query inside a query to perform unauthorized action against database usually SQL based ones.&lt;/p&gt;

&lt;p&gt;Today, I'm not going to give such examples of SQL injection, but one example could be enough to understand how can a developer protect his application from SQL injection.&lt;/p&gt;

&lt;p&gt;Normally this will not take too long, because there only one answer to do that,&lt;br&gt;
&lt;strong&gt;you should use prepared statements.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prepared statements are send to and parsed by database server separately from any parameters, This way it is impossible for an attacker to inject malicious SQL.&lt;/p&gt;

&lt;p&gt;Basically, SQL injection uses your parameters to in inject malicious SQL queries, as example, let's say you are working on a library website, and you have to get each book by it id to show later in your page, so, maybe you're having something like &lt;code&gt;http://localhost/library/book.php?id=1&lt;/code&gt;, and then you fetch your book as simple as that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nv"&gt;$id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM books WHERE id = "&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//in normal case your query became "SELECT * FROM books WHERE id = 1"&lt;/span&gt;
&lt;span class="c1"&gt;// execute your query and get data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, you parameter id leaves a security hole in your website, an attackers can easily add SQL query to your parameter id just like that:&lt;br&gt;
&lt;code&gt;localhost/book.php?id=1; UPDATE users SET password = 'anass' WHERE idUser = 1&lt;/code&gt;&lt;br&gt;
Then your code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nv"&gt;$id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM books WHERE id = "&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//this case your query became "SELECT * FROM books WHERE id = 1; UPDATE users SET password = 'anass' WHERE idUser = 1"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will execute two queries at time, result in changing your administrator password in your application, normally parameters are helping as to do so, the idea behind preventing SQL injection is to separate our query from parameters, so we can tell our database engine that we wanting to execute such query using these parameters.&lt;br&gt;
For sure your website is not ready for production, just leave it in &lt;code&gt;localhost&lt;/code&gt; and keep reading.&lt;/p&gt;

&lt;p&gt;How we can tell database engine, what is the query, and what are parameters,&lt;/p&gt;

&lt;p&gt;first,&lt;br&gt;
Let's connect to our MySQL database, &lt;br&gt;
For sure, commanded way is to use PDO, because if you want to switch to any database engine, we won't rewrite every thing,&lt;br&gt;
Then, should prepared statement, and pass the skeleton of our query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;//use our database details to connect&lt;/span&gt;
&lt;span class="nv"&gt;$pdo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PDO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mysql:dbname=db;host=localhost;charset=utf8'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'1234'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$dbConnection&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PDO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ATTR_EMULATE_PREPARES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$dbConnection&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PDO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ATTR_ERRMODE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;PDO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ERRMODE_EXCEPTION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line, is to connect to our MySQL database named &lt;code&gt;db&lt;/code&gt; and hosted in our locale environment &lt;code&gt;localhost&lt;/code&gt;, username is &lt;code&gt;root&lt;/code&gt; and password &lt;code&gt;1234&lt;/code&gt;.&lt;br&gt;
The second line is the most important, tells &lt;code&gt;PDO&lt;/code&gt; to use real prepared statements rather than emulated by PHP, if it set to true preparing will be done by PHP and this is not our choice.&lt;br&gt;
Finally,  the third line set error mode to exceptions, &lt;code&gt;PDO&lt;/code&gt; will throw &lt;code&gt;PDOException&lt;/code&gt; if there is an error. &lt;/p&gt;

&lt;p&gt;Now move on to create our first prepared query,&lt;br&gt;
from the previous example, we need to get a book by it id,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$pdo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT * FROM books WHERE id = ?"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple enough&lt;br&gt;
Alright &lt;/p&gt;

&lt;p&gt;We need now to pass the parameter, by using &lt;code&gt;bindParam&lt;/code&gt; method,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;bindParam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then use execute to execute our query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$resultes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope this clarify how prepared statements work, and encourage you to use it, &lt;br&gt;
If you have any suggestions let me know in comments, and next time i will show you how to make your own secure Query Builder class to use it in any of your projects.&lt;/p&gt;

</description>
      <category>php</category>
      <category>mysql</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>yq: Mastering YAML Processing in Command Line</title>
      <author>Martin Heinz</author>
      <pubDate>Tue, 15 Jun 2021 20:59:04 +0000</pubDate>
      <link>https://dev.to/martinheinz/yq-mastering-yaml-processing-in-command-line-o0g</link>
      <guid>https://dev.to/martinheinz/yq-mastering-yaml-processing-in-command-line-o0g</guid>
      <description>&lt;p&gt;Nowadays, YAML is used for configuring almost everything (for better or worse), so whether you're DevOps engineer working with Kubernetes or Ansible, or developer configuring logging in Python or CI/CD with GitHub Actions - you have to deal with YAML files at least from time-to-time. Therefore, being able to efficiently query and manipulate YAML is essential skill for all of us - engineers. The best way to learn that is by mastering YAML processing tool such as &lt;code&gt;yq&lt;/code&gt;, which can make you way more efficient at many of your daily tasks, from simple lookups to complex manipulations. So, let's go through and learn all that &lt;code&gt;yq&lt;/code&gt; has to offer - including traversing, selecting, sorting, reducing and much more!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up"&gt;
  &lt;/a&gt;
  Setting Up
&lt;/h2&gt;

&lt;p&gt;Before we begin using &lt;code&gt;yq&lt;/code&gt;, we first need to install it. When you google &lt;code&gt;yq&lt;/code&gt; though, you will find two projects/repositories. First of them, at &lt;a href="https://github.com/kislyuk/yq"&gt;https://github.com/kislyuk/yq&lt;/a&gt; is wrapper around &lt;code&gt;jq&lt;/code&gt; - the JSON processor. If you're already familiar with &lt;code&gt;jq&lt;/code&gt; you might want to grab this one and use the syntax you already know. In this article though, we will use the other - a bit more popular project - from &lt;a href="https://github.com/mikefarah/yq"&gt;https://github.com/mikefarah/yq&lt;/a&gt;. This version does not 100% match the &lt;code&gt;jq&lt;/code&gt; syntax, but its advantage is that it's dependency free (does not depend on &lt;code&gt;jq&lt;/code&gt;), for more context on the differences, see following &lt;a href="https://github.com/mikefarah/yq/issues/193"&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To install it, head over to &lt;a href="https://mikefarah.gitbook.io/yq/#install"&gt;docs&lt;/a&gt; and choose installation method suitable for your system, just make sure you install version 4, as that's what we will work with here. On top of that, you might want to setup shell completion, information about that is available at &lt;a href="https://mikefarah.gitbook.io/yq/commands/shell-completion"&gt;https://mikefarah.gitbook.io/yq/commands/shell-completion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have it installed, we also need some YAML file or document to test the commands we will be running. For that we will use the following files, which have all the common things you could find in YAML - attributes (plain and nested), arrays and various value types (string, integers and booleans):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# log.yaml&lt;/span&gt;
&lt;span class="na"&gt;timestamp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1620197250&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;fatal&lt;/span&gt;
  &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;Application exited with code 2&lt;/span&gt;
&lt;span class="s"&gt;---&lt;/span&gt;
&lt;span class="c1"&gt;# user.yaml&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;John&lt;/span&gt;
  &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Smith&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;male&lt;/span&gt;
  &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;addresses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Oxford&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Street"&lt;/span&gt;
      &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;London&lt;/span&gt;
      &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;England&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Ludwigstrasse"&lt;/span&gt;
      &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Munich&lt;/span&gt;
      &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Germany&lt;/span&gt;
  &lt;span class="na"&gt;orders&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="m"&gt;4356436&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="m"&gt;4345753&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2345234&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this out of the way, let's learn the basics!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  The Basics
&lt;/h2&gt;

&lt;p&gt;All the commands we will be running will start with the same base of &lt;code&gt;yq eval&lt;/code&gt;, followed by quoted expression and your YAML file. One exception to this would be pretty-printing of YAML files, in which case you would omit the expression - for example &lt;code&gt;yq eval some.yaml&lt;/code&gt; - in case you're familiar with &lt;code&gt;jq&lt;/code&gt;, then this is equivalent to &lt;code&gt;cat some.json | jq .&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Optionally we can also tack on some extra flags, some of the more useful ones would be &lt;code&gt;-C&lt;/code&gt; to force colored output, &lt;code&gt;-I n&lt;/code&gt; to set indentation of output to &lt;code&gt;n&lt;/code&gt; spaces, or &lt;code&gt;-P&lt;/code&gt; for pretty-printing.&lt;/p&gt;

&lt;p&gt;As for the basic expressions, there's a lot of things we can do, but the most common one is traversing YAMLs, or in other words - looking up some key in the YAML document. This is done using &lt;code&gt;.&lt;/code&gt; (dot) operator and in the most basic form, this would look like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# yq eval '.user.addresses' user.yaml&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Oxford&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Street"&lt;/span&gt;
  &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;London&lt;/span&gt;
  &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;England&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Ludwigstrasse"&lt;/span&gt;
  &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Munich&lt;/span&gt;
  &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Germany&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to the basic map navigation, you will often want to lookup specific index in an array (using &lt;code&gt;[N]&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# yq eval ".user.addresses[1]" user.yaml&lt;/span&gt;

&lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Ludwigstrasse"&lt;/span&gt;
&lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Munich&lt;/span&gt;
&lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Germany&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, you might also find &lt;em&gt;splat&lt;/em&gt; operator useful which flattens maps/arrays (notice the difference with the first example we looked at):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# yq eval ".user.addresses[]" user.yaml&lt;/span&gt;

&lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Oxford&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Street"&lt;/span&gt;
&lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;London&lt;/span&gt;
&lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;England&lt;/span&gt;
&lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Ludwigstrasse"&lt;/span&gt;
&lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Munich&lt;/span&gt;
&lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Germany&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apart from basic traversing you might also want to get familiar with &lt;em&gt;selecting&lt;/em&gt;, which allows you to filter by boolean expressions. For this we use &lt;code&gt;select(. == "some-pattern-here")&lt;/code&gt;. Here, simple example can be filtering based on leading digits:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.user.orders[] | select(. == "43*")'&lt;/span&gt; user.yaml

4356436
4345753
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example also shows usage of pipe (&lt;code&gt;|&lt;/code&gt;) - we use it to first navigate to the part of the document which we want to filter and then pass it on to &lt;code&gt;select(...)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the above example we used &lt;code&gt;==&lt;/code&gt; to find fields that are equal to the pattern, but you can also use &lt;code&gt;!=&lt;/code&gt; to match ones that are not equal. Additionally you can omit the &lt;code&gt;select&lt;/code&gt; function altogether and instead of values you will get only boolean results of the matching:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.user.orders[] | (. != "43*")'&lt;/span&gt; user.yaml

&lt;span class="nb"&gt;false
false
true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whether you're completely new to &lt;code&gt;yq&lt;/code&gt; or you've been using it for a while, you'll surely run into issues where you will have no idea why your query doesn't return what you want. In those situations you can use &lt;code&gt;-v&lt;/code&gt; flag to produce verbose output, which might give you info as to why the query behaves the way it does.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-querying"&gt;
  &lt;/a&gt;
  Advanced Querying
&lt;/h2&gt;

&lt;p&gt;The previously section showed the basics, which are often sufficient for quick lookups and filtering, but sometimes you might want to use more advanced functions and operators, for example when automating certain tasks that involves YAML input and/or output. So, let's explore a few more things that &lt;code&gt;yq&lt;/code&gt; has to offer.&lt;/p&gt;

&lt;p&gt;Sometimes it might be useful to sort keys in the document, for example if you're versioning your YAMLs in git or just for general readability. It's also very convenient if you need to diff 2 YAML files. To do this we can use &lt;code&gt;'sortKeys(...)'&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# yq eval 'sortKeys(.user)' user.yaml&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;addresses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Oxford&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Street"&lt;/span&gt;
      &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;London&lt;/span&gt;
      &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;England&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Ludwigstrasse"&lt;/span&gt;
      &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Munich&lt;/span&gt;
      &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Germany&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;male&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;John&lt;/span&gt;
  &lt;span class="na"&gt;orders&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="m"&gt;4356436&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="m"&gt;4345753&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2345234&lt;/span&gt;
  &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Smith&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the input YAML document is dynamic and you're not sure what keys will be present, it might make sense to first check for their presence with &lt;code&gt;has("key")&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.log | has("message")'&lt;/span&gt; log.yaml
&lt;span class="nb"&gt;true

&lt;/span&gt;yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.log | has("code")'&lt;/span&gt; log.yaml
&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to the case with &lt;code&gt;has("key")&lt;/code&gt;, you might need to first get the dynamic list of keys before making certain operations with the document, for that you can use &lt;code&gt;keys&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.log | keys'&lt;/span&gt; log.yaml
- level
- message
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checking length of a value might be necessary for input filtering/validation or to make sure the value doesn't overflow some predefined bounds. This is done using &lt;code&gt;length&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.log.message | length'&lt;/span&gt; log.yaml
31

yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.user.addresses[0].street | length'&lt;/span&gt; user.yaml
13
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For automation tasks that have parametrized inputs, you will surely need to pass environment variables into &lt;code&gt;yq&lt;/code&gt; queries. You can obviously use normal shell environment variables, but you will end up with very tricky and hard to read quote escaping. Therefore, it might be better to use &lt;code&gt;yq&lt;/code&gt;'s &lt;code&gt;env()&lt;/code&gt; function instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"warning"&lt;/span&gt; yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.log.level == env(level)'&lt;/span&gt; log.yaml
&lt;span class="nb"&gt;false

&lt;/span&gt;&lt;span class="nv"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"fatal"&lt;/span&gt; yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.log.level == env(level)'&lt;/span&gt; log.yaml
&lt;span class="nb"&gt;true

&lt;/span&gt;&lt;span class="nv"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"surname"&lt;/span&gt; yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.user.[env(field)]'&lt;/span&gt; user.yaml
Smith
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To simplify processing of some fields or arrays you can also use some string function such as &lt;code&gt;join&lt;/code&gt; or &lt;code&gt;split&lt;/code&gt; to concatenate or breakup text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.user.orders | join(", ")'&lt;/span&gt; user.yaml
4356436, 4345753, 2345234

yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.log.message | split(" ")'&lt;/span&gt; log.yaml
- Application
- exited
- with
- code
- 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last and probably most complex example for this section is transformation of data using &lt;code&gt;ireduce&lt;/code&gt;. To have a good reason to use this function you would need a quite complex YAML document which is not something I want to dump here. So, instead, to at least give you an idea of how the function works, let's use it to implement &lt;em&gt;"poor man's"&lt;/em&gt; version of &lt;code&gt;join&lt;/code&gt; from previous example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.user.orders[] as $item ireduce (""; (. + " ") + $item)'&lt;/span&gt; user.yaml
 4356436 4345753 2345234
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This one isn't as self explanatory as the previous ones, so let's break it down a bit. First half (&lt;code&gt;.user.orders[] as $item ireduce&lt;/code&gt;) of the query takes some iterable field (sequence) from YAML and assigns it to variable - in this case &lt;code&gt;$item&lt;/code&gt;. In the second part, we define initial value &lt;code&gt;"";&lt;/code&gt; (empty string) and an expression that will be evacuated for each &lt;code&gt;$item&lt;/code&gt; - here that would be the value that was there previously, joined with space (&lt;code&gt;(. + " ")&lt;/code&gt;) followed by the item we are currently iterating over (&lt;code&gt;+ $item&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manipulating-and-modifying"&gt;
  &lt;/a&gt;
  Manipulating and Modifying
&lt;/h2&gt;

&lt;p&gt;Most of the time you will need to only do searches, lookups and filtering of existing documents, but from time to time you might need to also manipulate YAMLs and create new ones from them. &lt;code&gt;yq&lt;/code&gt; provides a couple of operators to do these kinds of tasks, so let's go over them briefly and see a few examples.&lt;/p&gt;

&lt;p&gt;The simplest one is union operator, which is really just a &lt;code&gt;,&lt;/code&gt; (comma). It allows us to combine results of multiple queries. This can be useful if you need to extract multiple parts of YAML at the same time, but cannot do it with single query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.user, .log.level, .log.message'&lt;/span&gt; log.yaml
root
fatal
Application exited with code 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another fairly common use-case would be adding record to array or concatenating 2 arrays. This is done with &lt;code&gt;+&lt;/code&gt; (plus) operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# yq eval '.user.orders += 2845234' user.yaml&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
  &lt;span class="na"&gt;orders&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="m"&gt;4356436&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="m"&gt;4345753&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2345234&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2845234&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another handy one is update operator (&lt;code&gt;=&lt;/code&gt;), which (&lt;em&gt;surprise, surprise&lt;/em&gt;) updates some field. Very simple example of updating log level in our sample YAML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# yq eval '.log.level = "warning"' log.yaml&lt;/span&gt;

&lt;span class="na"&gt;timestamp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1620197250&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;warning&lt;/span&gt;
  &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;Application exited with code 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's important to point out here, that by default the result is sent to standard output and not to the original file. To make in-place update, you will need to use the &lt;code&gt;-i&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;There a few more operators available, but aren't particularly useful (most of the time), so I won't show you bunch of examples that probably would not help you, instead I will give you some links to docs in case you want to know dig a little deeper:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mikefarah.gitbook.io/yq/operators/subtract"&gt;Number subtraction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mikefarah.gitbook.io/yq/operators/multiply-merge"&gt;Multiplication (merging)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mikefarah.gitbook.io/yq/operators/delete"&gt;Deletion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#handy-examples"&gt;
  &lt;/a&gt;
  Handy Examples
&lt;/h2&gt;

&lt;p&gt;Now that we know the theory, let's look at some examples and handy commands that you can incorporate into your workflow right away.&lt;/p&gt;

&lt;p&gt;For obvious reasons, we start with Kubernetes as it's probably the most popular project that uses YAML for configuration. The simplest, yet very useful thing that &lt;code&gt;yq&lt;/code&gt; can help us with is pretty-printing Kubernetes resources or querying specific sections of a manifest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl get pods some-pod &lt;span class="nt"&gt;-o&lt;/span&gt; yaml | yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.spec'&lt;/span&gt; -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another thing we can do is list resource name and specific attribute. This can be handy for finding or extracting all listening ports of Services or for example to lookup pods image for every pod in namespace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl get pods &lt;span class="nt"&gt;-o&lt;/span&gt; yaml | yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'{ .items[].metadata.name: .items[].spec.containers[0].image }'&lt;/span&gt; -
first-pod: quay.io/repository/image:latest
second-pod: icr.io/repository/image:latest
third-pod: icr.io/repository/image:1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that above we had to use &lt;code&gt;.items[]&lt;/code&gt; because when you &lt;code&gt;get&lt;/code&gt; all instances of a resource, the returned &lt;em&gt;Kind&lt;/em&gt; is a &lt;em&gt;List&lt;/em&gt; of &lt;code&gt;items&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In case of resources such as Pods, Deployments or Services which often have many instances in each namespace, it might be undesirable to just dump all of them into console and sift through them manually. So, instead you could filter them on some attribute, for example list name and listening port of only the services that are exposed on particular port:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl get svc &lt;span class="nt"&gt;-o&lt;/span&gt; yaml | yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.items[] | select(.spec.ports[].port == 8443) | { .metadata.name: .spec.ports[].targetPort }'&lt;/span&gt; -
service-one: https
service-two: 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As all Kubernetes &lt;em&gt;"YAML Engineers"&lt;/em&gt; know, sometimes it can be difficult to remember all the fields in some particular resource, so why not just query all the keys for example for Deployment's &lt;code&gt;spec.template.spec&lt;/code&gt;?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl get deploy &lt;span class="nt"&gt;-o&lt;/span&gt; yaml | yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.items[0].spec.template.spec | keys'&lt;/span&gt; -
- containers
- dnsPolicy
- nodeSelector
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moving on from Kubernetes, how about some &lt;code&gt;docker-compose&lt;/code&gt;? Maybe you need to temporarily delete some section such as &lt;code&gt;volumes&lt;/code&gt; or &lt;code&gt;healthcheck&lt;/code&gt; - well here you go (this is destructive, so be careful):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s1"&gt;'del(.services.backend.healthcheck)'&lt;/span&gt; docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In similar manner, you could also remove task from Ansible Playbook. Speaking of which - how about changing &lt;code&gt;remote_user&lt;/code&gt; in all tasks in an Ansible Playbook - here, let's change it to &lt;code&gt;root&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yq &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'.[].remote_user = "root"'&lt;/span&gt; playbook.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;I hope this &lt;em&gt;"crash course"&lt;/em&gt; will help you get started with using &lt;code&gt;yq&lt;/code&gt;, but as with any tool, you will only learn to use it by practicing and actually doing real world tasks, so next time you need to lookup something in YAML file, don't just dump it into terminal, but rather write a &lt;code&gt;yq&lt;/code&gt; query to do the work for you. Also, if you're struggling to come up with query for your particular task and Google search doesn't turn up anything useful, try searching for solution that uses &lt;code&gt;jq&lt;/code&gt; instead - the query syntax is almost the same and you might have better luck searching for &lt;code&gt;jq&lt;/code&gt; solutions, considering that it's more popular/commonly used tool.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>yaml</category>
      <category>kubernetes</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Iniciando com Atlantis</title>
      <author>Bruno Padilha</author>
      <pubDate>Tue, 15 Jun 2021 20:48:38 +0000</pubDate>
      <link>https://dev.to/brunopadz/iniciando-com-atlantis-5dcd</link>
      <guid>https://dev.to/brunopadz/iniciando-com-atlantis-5dcd</guid>
      <description>&lt;p&gt;Esse é o primeiro post de uma série sobre o &lt;a href="https://www.runatlantis.io/"&gt;Atlantis&lt;/a&gt;, onde o intuito é dar um mega salto no fluxo de trabalho de quem já utiliza Terraform no dia dia. Se você já:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Utiliza Terraform para criar infraestrutura&lt;/li&gt;
&lt;li&gt;Ainda usa o Terraform local&lt;/li&gt;
&lt;li&gt;E sente falta de um ambiente mais colaborativo para desenvolver sua infraestrutura.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Essa série é para você! &lt;/p&gt;

&lt;p&gt;Vamos passar por alguns pontos básicos de como a ferramenta funciona e até explorar alguns modos de deployment. Tudo isso com um &lt;a href="https://github.com/brunopadz/atlantis-101"&gt;repo&lt;/a&gt; no Github para te ajudar com configuração e exemplos.&lt;/p&gt;

&lt;p&gt;Caso você não tenha experiência prévia com Terraform, super recomendo o conteúdo do &lt;a href="https://www.youtube.com/channel/UC3yoPZJdjwOjrHWy_iEP08A/videos"&gt;Igor Souza&lt;/a&gt; no Youtube. :)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-o-atlantis"&gt;
  &lt;/a&gt;
  O que é o Atlantis
&lt;/h2&gt;

&lt;p&gt;O Atlantis é uma aplicação que automatiza através de Pull Requests a forma como rodamos o Terraform. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Gosto muito da definição do &lt;a href="https://twitter.com/fidelissauro"&gt;Matheus Fidelis&lt;/a&gt;, que o Atlantis permite fazer GitOps para Terraform. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ele funciona ouvindo Webhooks de plataformas de Git como: Github, Gitlab ou do Bitbucket e retorna o output dos comandos &lt;code&gt;terraform plan&lt;/code&gt; e &lt;code&gt;terraform apply&lt;/code&gt; através de comentários. Ou seja, todo fluxo de trabalho que antes era feito via CLI, terminal, pipeline do Jenkins, agora é feito nos comentários de uma Pull Request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6HtlwyfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2afb9dxqo9xynyqypx6g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6HtlwyfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2afb9dxqo9xynyqypx6g.png"&gt;&lt;/a&gt;&lt;br&gt;Exemplo de fluxo no trabalho. 🙂
  &lt;/p&gt;

&lt;p&gt;De uma forma mais simples, o Atlantis atua como uma "ponte" entre o Terraform e a plataforma de Git tornando os plans e applies muito mais colaborativos. Mas por quê? Oras, infraestrutura como código é uma abordagem de automação de infraestrutura baseada em princípios de desenvolvimento de software, com reviews, testes, CI/CD e etc...&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#antes-de-iniciar"&gt;
  &lt;/a&gt;
  Antes de iniciar
&lt;/h2&gt;

&lt;p&gt;Como mencionei acima, o Atlantis é uma espécie de wrapper do Terraform, por isso, a partir do momento que o Atlantis é adotado, é ele quem define qual versão do Terraform está rodando e é ele quem conhece as secrets e keys dos provedores de cloud, serviços e etc...&lt;/p&gt;

&lt;p&gt;Por isso, a primeira dica é ficar de olho nas &lt;a href="https://github.com/runatlantis/atlantis/releases"&gt;releases&lt;/a&gt; do projeto para saber se a última versão do Terraform já é suportada pelo Atlantis. E não necessariamente utilizar a última versão do Atlantis requer que você atualize seus projetos, por exemplo, é possível utilizar a última versão do Atlantis e para cada repo/projeto utilizar uma versão diferente do Terraform. Veremos sobre isso mais pra frente.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#um-pouco-de-mundo-real"&gt;
  &lt;/a&gt;
  Um pouco de mundo real...
&lt;/h3&gt;

&lt;p&gt;Para os projetos do time de e-commerce da Leroy Merlin, nós rodamos o Atlantis como container no Kubernetes, utilizamos Terraform Cloud como backend e uma abordagem com monorepo e multirepo. Alguns projetos como IAM, configuração do Vault e coisas relacionadas a sec, ficam fora do monorepo por uma questão de segurança.&lt;/p&gt;

&lt;p&gt;Nos outros repositórios todo o time de engenharia possui acesso e cada módulo e projeto, possui documentação para auxiliar a criar novos recursos.&lt;/p&gt;

&lt;p&gt;Dependendo do repositório e do projeto é necessário que haja no mínimo "x" aprovações para rodar um &lt;code&gt;atlantis apply&lt;/code&gt;, em outros é necessário aprovação de &lt;code&gt;CODEOWNERS&lt;/code&gt;. O ponto é que não importa sua estrutura atual ou o que você está planejando, o Atlantis vai suportar.&lt;/p&gt;

&lt;p&gt;De uma forma gráfica, o Atlantis funciona assim no nosso time:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fj94YLmB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51fsr5zrsc97d0m04ttj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fj94YLmB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51fsr5zrsc97d0m04ttj.png"&gt;&lt;/a&gt;&lt;br&gt;Fluxo do Atlantis no time de e-commerce da Leroy Merlin.
  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#indo-mais-a-fundo"&gt;
  &lt;/a&gt;
  Indo mais a fundo
&lt;/h2&gt;

&lt;p&gt;Nessa série de posts, utilizarei Github, Kubernetes e AWS. E durante ela, você irá encontrar nesse &lt;a href="https://github.com/brunopadz/atlantis-101"&gt;repo&lt;/a&gt; mais informações e formas de deploy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requerimentos"&gt;
  &lt;/a&gt;
  Requerimentos
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;O Atlantis suporta as principais plataformas de Git como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Github&lt;/li&gt;
&lt;li&gt;Gitlab&lt;/li&gt;
&lt;li&gt;Bitbucket&lt;/li&gt;
&lt;li&gt;Azure DevOps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Backend&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O Atlantis suporta todos os tipos de backend, menos o local, já que o Atlantis não tem um banco de dados e não commita o state no git (o que é um mega anti-pattern).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Estrutura de diretório e repositórios&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Qualquer seja a estrutura utilizada, o Atlantis vai rodar sem problemas. É possível utilizar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monorepo com vários projetos&lt;/li&gt;
&lt;li&gt;Único repo com um único projeto&lt;/li&gt;
&lt;li&gt;Monorepo com vários projetos e + módulos&lt;/li&gt;
&lt;li&gt;Multirepo (basta ter um webhook para cada um deles)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;É possível também utilizar &lt;a href="https://www.terraform.io/docs/language/state/workspaces.html"&gt;Workspaces&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arquitetura"&gt;
  &lt;/a&gt;
  Arquitetura
&lt;/h3&gt;

&lt;p&gt;O Atlantis é uma aplicação desenvolvida em Go. Com um binário por volta de 40MB e com uma imagem docker por volta de 250MB é super simples de subi-lo no Kubernetes, ECS / Fargate ou instalá-lo em uma instância.&lt;/p&gt;

&lt;p&gt;A comunicação entre o Atlantis e o plataforma de Git é intrínseca. Por exemplo, o Atlantis precisa receber os Webhooks e fazer chamadas para as APIs da plataforma de Git utilizada. Em caso de serviços externos, o Atlantis precisa responder por uma URL válida, já em casos de serviços internos como Github Enterprise, Gitlab Enterprise e Bitbucket Server, isso já não é necessário.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Importante&lt;/strong&gt;&lt;br&gt;
O Atlantis não possui um banco de dados, todos os arquivos de &lt;code&gt;plan&lt;/code&gt;, binários dos providers e etc são salvos em disco.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#configura%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Configuração
&lt;/h3&gt;

&lt;p&gt;Existem alguns métodos de configurar o Atlantis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Utilizando flags no comando &lt;code&gt;atlantis server&lt;/code&gt;, onde também é possível utilizar arquivo de configuração e ENV VARs. Por exemplo:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Flags&lt;/span&gt;
atlantis server &lt;span class="nt"&gt;--gh-token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"token/123456/ABCDE"&lt;/span&gt;

&lt;span class="c"&gt;# ENV VAR&lt;/span&gt;
&lt;span class="nv"&gt;ATLANTIS_GH_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'token/123456/ABCDE'&lt;/span&gt; atlantis server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Arquivo de configuração para cada repo. Onde o arquivo de configuração &lt;code&gt;repos.yml&lt;/code&gt; fica junto do server.&lt;/li&gt;
&lt;li&gt;Arquivo de configuração em cada repositório. Onde cada repo possui o seu &lt;code&gt;atlantis.yml&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#utiliza%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Utilização
&lt;/h3&gt;

&lt;p&gt;Como deu pra notar, a principal diferença é que a partir de agora, o comando para rodar o Terraform mudou. O comando a ser chamado agora é o &lt;code&gt;atlantis&lt;/code&gt;. Existem três principais subcomandos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;atlantis plan&lt;/code&gt; que roda o &lt;code&gt;terraform plan&lt;/code&gt; na branch de uma determinada Pull Request. É possível configurar para rodar de forma automática a cada novo commit, evitando intervenções manuais.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;atlantis apply&lt;/code&gt; que roda o &lt;code&gt;terraform apply&lt;/code&gt; no plan executado anteriormente. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;atlantis help&lt;/code&gt; que mostra a ajuda do Atlantis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E claro, existem algumas flags em comum no &lt;code&gt;plan&lt;/code&gt; e no &lt;code&gt;apply&lt;/code&gt;, que no caso são as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-w&lt;/code&gt; que roda o plan ou apply contra um determinado workspace.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-d&lt;/code&gt; que roda o plan ou apply de um projeto dentro de um diretório. Ele é importante quando a uma criação, alteração ou deleção de vários recursos em vários projetos em um único Pull Request. Se não especificado, roda em todos diretórios novos.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Roda um plan para no diretório app1&lt;/span&gt;
atlantis plan &lt;span class="nt"&gt;-d&lt;/span&gt; app1

&lt;span class="c"&gt;# Roda um plan no diretório aws/iam&lt;/span&gt;
atlantis plan &lt;span class="nt"&gt;-d&lt;/span&gt; aws/iam
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;E existe o &lt;code&gt;-p&lt;/code&gt; que roda plan e apply para um projeto.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;É possível também utilizar flags do Terraform, como &lt;code&gt;-target&lt;/code&gt;, &lt;code&gt;-var&lt;/code&gt; e &lt;code&gt;-var-file&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ger%C3%AAncia-do-state"&gt;
  &lt;/a&gt;
  Gerência do state
&lt;/h3&gt;

&lt;p&gt;Assim como o Terraform, o Atlantis trabalha com state locking. Esse processo ocorre toda vez que um &lt;code&gt;atlantis plan&lt;/code&gt; é executado e o state só será liberado quando a Pull Request for mergeada, fechada ou o plan é deletado de forma manual.&lt;/p&gt;

&lt;p&gt;Vale a pena reforçar que esse state locking é do Atlantis e não do Terraform, onde o state do Atlantis é feito para prevenir várias Pull Requests trabalhando no mesmo projeto e o state do Terraform é feito para prevenir mudanças durante um &lt;code&gt;terraform apply&lt;/code&gt;. Mais infos &lt;a href="https://www.terraform.io/docs/language/state/locking.html"&gt;aqui&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#concluindo"&gt;
  &lt;/a&gt;
  Concluindo
&lt;/h2&gt;

&lt;p&gt;Nessa primeira parte, abordamos o básico do Atlantis, como ele funciona, qual problema ele resolve e os motivos de utilizá-lo.&lt;/p&gt;

&lt;p&gt;Nos próximos posts iremos nos aprofundar nos passos de instalação, configuração e como trabalhar de uma forma inteligente com Terraform.&lt;/p&gt;

&lt;p&gt;Até mais!&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>atlantis</category>
      <category>devops</category>
      <category>ptbr</category>
    </item>
    <item>
      <title>Day 3: Why is JavaScript so...savage ?</title>
      <author>oreoyona</author>
      <pubDate>Tue, 15 Jun 2021 20:47:04 +0000</pubDate>
      <link>https://dev.to/oreoyona/day-3-why-is-javascript-so-savage-3i1i</link>
      <guid>https://dev.to/oreoyona/day-3-why-is-javascript-so-savage-3i1i</guid>
      <description>&lt;p&gt;The day started extremely well, I began with Brian Tracy's best seller, *&lt;em&gt;The Power of Self Discipline *&lt;/em&gt; and following the advices of the book, I set my goals for my day:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Studying at least 5hours for my tomorrow exam&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn JavaScript with freecodecamp for 2hours&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build my own project using HTML, CSS and JavaScript&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The exam I am preparing is &lt;strong&gt;Psychiatry&lt;/strong&gt; and after 5 good and exhausting hours of deep work(thank Cal Newport) I finished and achieved my today's goal.&lt;/p&gt;

&lt;p&gt;I then after began to code with freecodecamp(RegEx) and I did pretty well at the start but the overall feeling was: &lt;em&gt;Why the heck is JavaScript so hard ? So savage ?&lt;/em&gt;&lt;br&gt;
Why are RegEx even existing ?(Rhetoric question of course)&lt;/p&gt;

&lt;p&gt;I needed to cry so bad but I refused to use another excuse of not coding so, I decided that I was gonna build my project.&lt;/p&gt;

&lt;p&gt;As you can figure, I am not building it, I am writing this blog instead. Why ? I feel extremely tired, exhausted. The 2 hours of coding I spent on freeCodecamp learning about  RegEx took all my energy and the apathy I'm feeling now is just...&lt;/p&gt;

&lt;p&gt;Why is JavaScript so hard?&lt;br&gt;
It's 22:40 in my country but I need to be loyal to myself so I am gonna build a login form and use some RegEx to add interactivity to it.&lt;/p&gt;

&lt;p&gt;I knew that the road would be tough, but I chose it and I am not gonna miss my target. &lt;/p&gt;

&lt;p&gt;I will master that language because I can!(right?)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>10 Things I Wish I Knew in the Start Of IT Career</title>
      <author>John Selawsky</author>
      <pubDate>Tue, 15 Jun 2021 19:50:52 +0000</pubDate>
      <link>https://dev.to/selawsky/10-things-i-wish-i-knew-in-the-start-of-it-career-58m1</link>
      <guid>https://dev.to/selawsky/10-things-i-wish-i-knew-in-the-start-of-it-career-58m1</guid>
      <description>&lt;p&gt;Pandemic has had drastic effects on the world economy leaving many people jobless, but the IT industry has stood the storm quite well. It has been one of the few most stable fields. The thrashing effects of COVID-19 do not seem to be even touching the IT industry as it is rapidly growing and is all set to hit close to &lt;a href="https://www.idc.com/promo/global-ict-spending/forecast"&gt;$6 trillion&lt;/a&gt; by 2023.&lt;/p&gt;

&lt;p&gt;The pace of IT market growth is quite impressive. It is presumed that the IT outsourcing market seems to be growing from a figure of $342.9 billion in 2020 to &lt;a href="https://www.businesswire.com/news/home/20200714005552/en/Global-IT-Outsourcing-Industry-2020-to-2027---Market-Trajectory-Analytics---ResearchAndMarkets.com"&gt;$410.2 billion by 2027&lt;/a&gt;, which is unimaginably high in such a condition of global economic crisis.&lt;/p&gt;

&lt;p&gt;This begs for the need for more IT experts in the field and it seems to grow from 24 million currently to over &lt;a href="https://www.statista.com/statistics/627312/worldwide-developer-population/"&gt;28.7 million IT experts&lt;/a&gt; and developers by 2024. If you’ve responded to this need and want to start a career in IT, here are some aspects of the job, and the learning curve leading up to it, you should be aware of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#essentials-you-should-know-before-starting-a-career-in-it"&gt;
  &lt;/a&gt;
  Essentials You Should Know Before Starting a Career in IT
&lt;/h2&gt;

&lt;p&gt;Being a beginner at anything can be frustrating. You might be unsure about every single step you take or lack help in choosing a career, programming language, or devising a learning plan.&lt;/p&gt;

&lt;p&gt;Following is an account of 10 things that might sound so simple to many IT experts but weren’t so obvious at the start of their IT career.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#focus-on-practicebased-learning"&gt;
  &lt;/a&gt;
  Focus on Practice-Based Learning
&lt;/h3&gt;

&lt;p&gt;Beginners often place too much emphasis on theory, while programming is a kind of practical skill. So, ensure you’re focusing on the practical part, coding itself. So when you are choosing programming learning sources, keep in mind code practicing availability. Here we have the top five online programming courses and platforms where you can find such courses:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codecademy"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codecademy.com/"&gt;Codecademy&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Codecademy is an effective online resource with professional guidance to start off with basics. But make sure to practice the concepts yourself, as their course lacks the practical part to some extent.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#stanford-online"&gt;
  &lt;/a&gt;
  &lt;a href="https://online.stanford.edu/"&gt;Stanford Online&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Stanford Online has an excellent number of introductory courses with many teaching assistants that help students understand the Basics of IT thoroughly.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#udacity"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udacity.com/"&gt;Udacity&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Udacity has many courses launched for individuals, for businesses and even government. It offers an extensive learning archive and the assistance of the mentors. Which is quite helpful to learn programming languages.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codegym"&gt;
  &lt;/a&gt;
  &lt;a href="https://codegym.cc/"&gt;Codegym&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Codegym Java course contains 1200+ practical tasks. It starts with the basics, Java Syntax, and logically moves to the complicated learning. The best part is that 80% of the learning process is based on practical assignments, which helps you grasp programming quite well.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#edx"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.edx.org/"&gt;EdX&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Tonnes of tutorials on edX help build the useful concepts that every programmer requires to start his career in IT, especially programming.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communicate"&gt;
  &lt;/a&gt;
  Communicate
&lt;/h3&gt;

&lt;p&gt;Newbies lack experience and don’t consider seeking guidance from experts. Make sure that you aren’t one of those beginners.&lt;/p&gt;

&lt;p&gt;Joining communities such as &lt;strong&gt;&lt;a href="https://stackoverflow.com/"&gt;Stackoverflow&lt;/a&gt;&lt;/strong&gt;, &lt;a href="https://www.reddit.com/"&gt;Reddit&lt;/a&gt;, &lt;a href="https://coderanch.com/"&gt;CodeRanch&lt;/a&gt; and others don’t only have you covered for expert advice and guidance, but also provide you a sense of moral support. Create your account on &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;, read and comment on &lt;a href="https://news.ycombinator.com/"&gt;HackerNews&lt;/a&gt; and &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt;… Look for different communities!&lt;/p&gt;

&lt;p&gt;You can interact with your fellows who’re facing the same situations, being able to relate to someone else’s progress helps a lot with releasing stress.&lt;/p&gt;

&lt;p&gt;The communities have thousands of IT experts with years of hands-on experience who can show you the actual picture of many situations and keep you from taking wrong turns as you head towards your goals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are a few resources you can browse for advice and support:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/"&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Javaranch.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reddit&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/AskProgramming/"&gt;r/AskProgramming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/learnprogramming/"&gt;r/LearnProgramming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.r-project.org/"&gt;r/Coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/CodingHelp/"&gt;r/CodingHelp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#develop-a-habit-of-good-research"&gt;
  &lt;/a&gt;
  Develop a Habit of Good Research
&lt;/h3&gt;

&lt;p&gt;Never try to save your time on research. Google is a whole world of information. Superficial skimming about a certain topic won’t help you at all. But do it in moderation, otherwise you risk burying yourself in a heap of informational waste. So, build a habit of diligent research.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stick-to-basics-at-the-start"&gt;
  &lt;/a&gt;
  Stick to Basics at the Start
&lt;/h3&gt;

&lt;p&gt;Practice is essential no doubt, but you won’t be able to practice without solid base knowledge, so go step-by-step and do not skip learning the fundamentals of programming first before moving on to the concepts of higher complexity. This way learning complicated levels would be easier. Skipping the basics is just like skipping the alphabet and directly heading towards writing a whole essay.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-several-programming-languages"&gt;
  &lt;/a&gt;
  Learn Several Programming Languages
&lt;/h3&gt;

&lt;p&gt;Many beginners stick to one programming language only and deem it sufficient, while others think that learning many of them at once is a good idea. But both of them are wrong.&lt;/p&gt;

&lt;p&gt;Taking the right decision regarding what languages to learn and how to order them is important. Do not try to stuff your brain with many languages at a time, though settling for just one programming language for the rest of your career isn’t good either.&lt;/p&gt;

&lt;p&gt;Take it in a sequential order, and start from Java, for example. It has a robust structure that helps you develop a very thorough understanding of how programming actually works. After that, grasping other languages won’t be that hectic for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-open-for-changes"&gt;
  &lt;/a&gt;
  Be Open for Changes
&lt;/h3&gt;

&lt;p&gt;Working with a “know-it-all” attitude doesn’t work well with an IT career. No matter how long you’ve been in the field or how well you have trained yourself at it, there’s always a lot to learn about programming as this field is one of the fastest-growing ones. Growth comes with several changes and innovations.&lt;/p&gt;

&lt;p&gt;As the programming field is growing daily, do not try to be stubborn about your concepts, never step out of the way of learning. Keep learning new things and stay up-to-date and well informed to the maximum possible level. Because obviously, you don’t want to be somebody with old-school technical knowledge. You need to keep up the pace if you wish to stay in the race!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#organize-yourself"&gt;
  &lt;/a&gt;
  Organize Yourself
&lt;/h3&gt;

&lt;p&gt;Being a mess can end you up with a mess! And here, mess refers to those unorganized working patterns. Being unorganized can generally be disastrous to not only your work but to your mental health as well. No doubt what you do is important but how you do it is equally important.&lt;/p&gt;

&lt;p&gt;Being a programmer and unorganized would only increase your pressure reducing your efficiency. Organize your projects, set reminders, make schedules for yourself accordingly and make sure to follow them. Without schedules all you do is waste your time, ending up all stressed out and frustrated.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#focus-on-fewer-things-at-a-time"&gt;
  &lt;/a&gt;
  Focus on Fewer Things at a Time
&lt;/h3&gt;

&lt;p&gt;Some people can’t help thinking about things they are not doing and need to do while doing other things. Similarly, other people tend to commit to more than one task at a time. They wonder if this might be a good way to increase efficiency levels.&lt;/p&gt;

&lt;p&gt;But unfortunately, the reality is the other way around. Trying to handle more than 1 task at a time will just end up messing up all the tasks you’re trying to accomplish. Try to focus on one of your goals, whether it’s a project or learning a programming language, everything takes a lot of individual focus and attention to be accomplished quite well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fight-the-obstacles"&gt;
  &lt;/a&gt;
  Fight the Obstacles
&lt;/h3&gt;

&lt;p&gt;The most heart-breaking part is to see talented people giving up as they see obstacles coming their way.&lt;/p&gt;

&lt;p&gt;Don’t give up no matter what, believe in yourself and your potential energy that can help you fight every single obstacle. No matter how hard things might get in your way, be ready to face it. And in no time you’ll gain confidence that will make you simply unstoppable in the field.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#relax-and-enjoy-your-work"&gt;
  &lt;/a&gt;
  Relax and Enjoy Your Work
&lt;/h3&gt;

&lt;p&gt;People say that if you love your work, you don’t work a single day in your life. You’re just having fun every day. And no professional can be good at their work unless they love it and are passionate about it. Similar is the case with IT professionals, no doubt this requires long hours of focus. But the day you fall in love with what you do, you definitely will not want to stop and programming would be your favorite piece of cake.&lt;/p&gt;

&lt;p&gt;So, just relax and do not stress yourself about things that get frustrating in the beginning. Just love your work and things will start getting a lot better in just no time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These 10 recommendations have been deduced by many experts to help newbies see a bigger picture at the start to understand things better and not take steps they might regret taking later on.&lt;/p&gt;

&lt;p&gt;Even if you’re not a beginner and regret some moves, it’s never too late to make a change. So stick to these 10 tips to make sure you never end up saying that “wish I knew this in the start!” at some point in your career. Good luck!&lt;/p&gt;

&lt;p&gt;First published at &lt;a href="https://medium.com/geekculture/10-things-i-wish-i-knew-in-the-start-of-it-career-ef211b061460"&gt;Get Culture&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
