<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Accelerate Your Career During Uncertain Times</title>
      <author>Krowser Web Services </author>
      <pubDate>Thu, 24 Jun 2021 22:50:16 +0000</pubDate>
      <link>https://dev.to/krowser/how-to-accelerate-your-career-during-uncertain-times-50dn</link>
      <guid>https://dev.to/krowser/how-to-accelerate-your-career-during-uncertain-times-50dn</guid>
      <description>&lt;p&gt;Does the current situation have you wondering whether your career has come grinding to a halt? According to experts, growing professionally during a pandemic can be challenging but not impossible. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;View career paths as fluid&lt;/strong&gt;&lt;br&gt;
The steady climb isn’t the only way to accelerate your career. Think also in terms of the sidestep, backstep, and all-important slingshot. Suppose you find your career plateauing. Consider moving sideways into a position of equal rank and pay, in an organization or division that promises more advancement opportunities. Or you could take a backstep, working for less pay or a less prestigious title, at a more innovative startup that offers new hands-on learning opportunities. A slingshot entails doing both a sidestep and a backstep at the same time—making fewer instantly-gratifying moves, and more choices that help you advance towards your career goals. When you apply the knowledge, experience and skills gained through these moves, you increase your chances of leaping far ahead of where you started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Focus on stretching yourself&lt;/strong&gt;&lt;br&gt;
Think you’re short on job security? Researchers at Boston University found that the most successful contract IT and filmmaking professionals—among those careers most lacking in stability—pursued "stretch work,” roles that emphasized learning new skills over increasing their income. Over time, they came out ahead of their peers. It pays not only to push yourself to learn new things but also to emphasize long-term personal growth over immediate financial returns. If a volunteer position helps you expand your work portfolio or make important contacts, don't be afraid to contribute. None of this time is wasted. You're building resilience and elastic skills that can be applied in any context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leverage your network&lt;/strong&gt;&lt;br&gt;
Successful people understand that if they want to overcome significant challenges and accelerate their careers, they need to surround themselves with a strong network of diverse individuals. And they are continually working to build those relationships. If you are one of the many people searching for a new job in the wake of Covid-19, don't be afraid to ask for help. The more you make others aware that you're looking for work, the better off you'll be. If you're shy about connecting with peers, find an excuse to be in their inbox, even if it's just to share an interesting article. You can also proactively network and make introductions between your connections, especially if they have similar interests or complementary skill sets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep pushing forward&lt;/strong&gt;&lt;br&gt;
Continuous change is the new norm. To thrive in these fast-changing times, change with them. To future-proof yourself, become more flexible. Today, winning isn't about having more resources, but rather being more resourceful. Getting ahead isn’t about being a genius, but more ingenious. To succeed in unpredictable environments, find the courage to take chances. In unexpected times, everyone wants to be risk-free. Instead, create a competitive advantage by being risk-averse. Recognize that change is coming and make calculated bets that can help you gain the insights or talents today that will be in-demand tomorrow. Whatever your goal, pick a portfolio of promising growth activities to try—attend night school or take online computer programming courses. Just don't sit still while trends and competitors are evolving. Staying ahead of the curve is easier than it sounds, as long as you're staying in constant motion.&lt;/p&gt;

&lt;p&gt;Self-isolation and social distancing can make professional advancement more difficult. Yet, despite these challenges, you can still accelerate your career. All it takes is a bit of creativity, initiative and the willingness to believe it’s possible. Focus on these strategies now, and you'll be ahead of the curve when things inevitably take a turn for the better.&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Absolute beginner's guide to Docker: What is a container?</title>
      <author>Erin Schaffer</author>
      <pubDate>Thu, 24 Jun 2021 21:29:46 +0000</pubDate>
      <link>https://dev.to/educative/absolute-beginner-s-guide-to-docker-what-is-a-container-lck</link>
      <guid>https://dev.to/educative/absolute-beginner-s-guide-to-docker-what-is-a-container-lck</guid>
      <description>&lt;p&gt;Docker is an open-source software platform that helps you simplify the process of creating, managing, running, and distributing your applications. With Docker, you can package your application along with all its dependencies into a container. Containers allow your applications to be deployed easily and uniformly.&lt;/p&gt;

&lt;p&gt;Today, we’ll dive deeper into Docker and discuss containers, modules, key terms, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We'll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#docker"&gt;What is Docker?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#kubernetes"&gt;Docker vs Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vocabulary"&gt;Docker vocabulary guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing"&gt;Installing Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#nextsteps"&gt;What to learn next&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-docker"&gt;
  &lt;/a&gt;
  What is Docker?
&lt;/h2&gt;

&lt;p&gt;Docker is an open-source software that runs on Linux and Windows. With Docker, you can &lt;strong&gt;package your application and its dependencies together into containers&lt;/strong&gt;. Docker allows you to separate your applications from your infrastructure. &lt;/p&gt;

&lt;p&gt;The company started as a platform as a service that was built on Linux containers. To help make and manage the containers, they built an in-house tool that they nicknamed “Docker,” which is how the technology was born. The first version was released in 2013.&lt;/p&gt;

&lt;p&gt;Today, Docker dominates the market. Many companies use Docker to &lt;strong&gt;simplify the process of building, running, and managing applications&lt;/strong&gt;. It has changed the way companies do their application development. Docker &lt;strong&gt;virtualizes the operating system of the computer&lt;/strong&gt; on which it’s installed, which gives it the functionality of being extremely portable.&lt;/p&gt;

&lt;p&gt;Docker is used in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DevOps&lt;/li&gt;
&lt;li&gt;Software&lt;/li&gt;
&lt;li&gt;IT services&lt;/li&gt;
&lt;li&gt;Staffing and recruiting&lt;/li&gt;
&lt;li&gt;Finance&lt;/li&gt;
&lt;li&gt;Healthcare&lt;/li&gt;
&lt;li&gt;Retail&lt;/li&gt;
&lt;li&gt;Etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we get into anything else, let’s talk about Docker containers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-containers"&gt;
  &lt;/a&gt;
  What are containers?
&lt;/h3&gt;

&lt;p&gt;For a long time, companies have been using container technologies to address the weak points of virtual machines. We can think of containers as &lt;strong&gt;more lightweight versions of VMs&lt;/strong&gt;. The important difference between containers and VMs is that containers don’t need their own operating system. &lt;strong&gt;All containers on a host share that host’s operating system&lt;/strong&gt;, which frees up a lot of system resources. &lt;/p&gt;

&lt;p&gt;What are now modern containers started as Linux containers (LXC). Many contributors, including Google, have helped bring container-related technologies to the Linux kernel. Without these contributions, we wouldn’t have the rich container ecosystem we have today. &lt;/p&gt;

&lt;p&gt;Containerization wasn’t very accessible until Docker came along. Docker containers create an abstraction at the application layer. Containers &lt;strong&gt;package your application and its container dependencies with everything it needs to run, including&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the operating system&lt;/li&gt;
&lt;li&gt;application code&lt;/li&gt;
&lt;li&gt;runtime&lt;/li&gt;
&lt;li&gt;system tools&lt;/li&gt;
&lt;li&gt;system libraries&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#docker-modules"&gt;
  &lt;/a&gt;
  Docker modules
&lt;/h3&gt;

&lt;p&gt;Docker &lt;strong&gt;offers many different modules and plugins&lt;/strong&gt;. Let’s take a look at some of the most popular ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker Compose&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker-compose&lt;/code&gt; allows you to &lt;strong&gt;define and run multi-container applications&lt;/strong&gt;. With Compose,  you use a &lt;code&gt;YAML&lt;/code&gt; file to configure your app’s services and orchestrate containers on a Docker daemon or on Docker Swarm. You can think of it as an automated multi-container workflow. Docker Compose is great for development, testing, CI workflows, and staging environments. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker Machine&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker-machine&lt;/code&gt; allows you to &lt;strong&gt;deploy your containerized applications to the cloud&lt;/strong&gt;. With Docker Machine, you can create a remote virtual machine and manage your containers. It’s a great tool for creating deployment environments and managing micro-services that run on your application. It can be used with popular cloud services such as AWS and Microsoft Azure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker stack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Docker stack allows you to &lt;strong&gt;manage a cluster of Docker containers&lt;/strong&gt; with Docker Swarm. Docker stack is embedded into the Docker command-line interface (CLI). With stack, you can describe multiple services in a single file. It eliminates the need to maintain bash scripts to define services.&lt;/p&gt;

&lt;p&gt;﻿&lt;strong&gt;Docker Swarm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Docker Swarm allows you to &lt;strong&gt;manage multiple containers across different host machines&lt;/strong&gt;. In other words, it’s a container orchestration tool. With Swarm, you can turn multiple Docker hosts into a single host.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#docker-vs-kubernetes"&gt;
  &lt;/a&gt;
  Docker vs Kubernetes
&lt;/h2&gt;

&lt;p&gt;It’s very common to confuse Docker with Kubernetes, so let’s take some time to look at the differences between the two technologies. These technologies complement one another very well, and they are frequently used together. &lt;br&gt;
We’ve already explored Docker in this article, but let’s highlight some key points.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Docker is a &lt;strong&gt;containerization platform&lt;/strong&gt;. We can use Docker to build and run containers. Docker Engine is a runtime environment that allows you to build and run containers on a development machine. Operating applications can be complex, especially when you have a lot of containers deployed across various servers. It can be difficult to determine the best way to coordinate and schedule multiple containers, to figure out how they communicate with one another, and to decide how to scale your containers. This is where Kubernetes comes in!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/blog/why-and-when-you-should-use-kubernetes"&gt;Kubernetes&lt;/a&gt; is an &lt;strong&gt;open-source orchestration software for containerization platforms like Docker&lt;/strong&gt;. It has an API that controls container operations. Kubernetes allows you to organize a cluster of VMs and schedule containers to run on those VMs. With Kubernetes, you &lt;strong&gt;can run Docker containers and manage your containerized applications&lt;/strong&gt;. Your containers are grouped into pods, and you can scale and manage these pods however you want.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Wait, what’s the difference between Kubernetes and Docker Swarm?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we discussed above, Docker Swarm allows you to manage multiple containers across different host machines. &lt;/p&gt;

&lt;p&gt;The difference between Docker Swarm and Kubernetes is that Kubernetes is much more comprehensive than Docker Swarm. It runs across a cluster while Docker runs on one node. Kubernetes pods are divided across nodes to ensure availability. &lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#docker-vocabulary-guide"&gt;
  &lt;/a&gt;
  Docker vocabulary guide
&lt;/h2&gt;

&lt;p&gt;Let’s take a look at some common Docker terms you’ll see when working with the platform.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cgroups&lt;/strong&gt;: Control groups allow you to allocate resources among processes running on a system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Container images&lt;/strong&gt;: Docker images are files that you use to execute code in a Docker container.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker build&lt;/strong&gt;: &lt;code&gt;docker build&lt;/code&gt; is a command that you use to build an image from a Dockerfile.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker Engine&lt;/strong&gt;: Docker Engine is the core product of Docker, which includes its daemon and CLI. It has an API for interacting with the Docker daemon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;: A Dockerfile is a text-based document that holds the instructions for building Docker images.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker Hub&lt;/strong&gt;: Docker Hub is a service that allows you to find and share containers with your organization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker Registry&lt;/strong&gt;: Docker Registry allows you to store and distribute named Docker images. Registries are organized into repositories, and they hold all of the versions of different images.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker run&lt;/strong&gt;: The run command allows you to create a container from a specified image and start that container using a given command.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Namespace&lt;/strong&gt;: Namespaces are created when you run a container. They provide a layer of isolation, as each element of a container runs in a different namespace.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pull&lt;/strong&gt;: &lt;code&gt;docker pull&lt;/code&gt; is a command that allows you to download a specific image or set of images.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Repository (repo)&lt;/strong&gt;: Docker repositories allow you to share container images with others. These images are stored as tags.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: Docker tags are like labels that you can assign to any completed build.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Union filesystem (AUFS)&lt;/strong&gt;: A union filesystem layers multiple directories on a single host and presents them as a single directory.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-docker"&gt;
  &lt;/a&gt;
  Installing Docker
&lt;/h2&gt;

&lt;p&gt;There many different ways and places to install Docker. We’ll walk through the installation of the Docker Desktop for Windows 10, Mac, and Linux. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker Desktop is an application that allows you to build and share containerized applications and micro-services&lt;/strong&gt;. According to the Docker documentation, it includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker Engine&lt;/li&gt;
&lt;li&gt;Docker CLI client&lt;/li&gt;
&lt;li&gt;Docker Compose&lt;/li&gt;
&lt;li&gt;Docker Content Trust&lt;/li&gt;
&lt;li&gt;Kubernetes&lt;/li&gt;
&lt;li&gt;Credential Helper&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#windows-10-installation"&gt;
  &lt;/a&gt;
  Windows 10 installation
&lt;/h3&gt;

&lt;p&gt;Before you can download Docker Desktop on Windows 10, you must have the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;64-bit version of Windows 10 Pro, Enterprise, or Education&lt;/li&gt;
&lt;li&gt;Hardware virtualization support must be enabled in your system’s BIOS&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Hyper-V&lt;/em&gt; and &lt;em&gt;Containers&lt;/em&gt; features must be enabled in Windows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start with a Google search for “install Docker Desktop.” This search will take you to the download page where you can download the installer and follow the instructions. &lt;/p&gt;

&lt;p&gt;Once it’s installed, you may have to manually start the Desktop from the Windows Start menu. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#mac-installation"&gt;
  &lt;/a&gt;
  Mac installation
&lt;/h3&gt;

&lt;p&gt;As with the Windows 10 installation, the easiest way to install Docker Desktop on your Mac is to Google “install Docker Desktop.” From there, you can follow the links on the download page. &lt;/p&gt;

&lt;p&gt;Once it’s installed, you may have to manually start the Desktop from the MacOS Launchpad.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: With Mac, the Docker Engine doesn’t run natively on the MacOS Darwin kernel. The Docker daemon runs inside a lightweight Linux VM that exposes the daemon and API to your Mac environment. This means that you can open a terminal on your Mac and use Docker commands.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#linux-installation"&gt;
  &lt;/a&gt;
  Linux installation
&lt;/h3&gt;

&lt;p&gt;There are many ways to install Docker on Linux. You can Google search for Docker installation guides on Linux. In this section, we’ll take a look at one of the ways you can install Ubuntu Linux 20.04 LTS. We’ll assume you already have Linux installed. We’ll install Docker in two steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Update the apt package index&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt-get update

Get:1 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu.com/ubuntu focal InRelease [265
kb]

...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Install Docker from the official repo&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt-get install docker.io

Reading package lists... Done

Building dependency tree

...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-learn-next"&gt;
  &lt;/a&gt;
  What to learn next
&lt;/h2&gt;

&lt;p&gt;Congrats on taking your first steps with Docker! Docker is a popular open-source containerization platform that’s used in many different industries to simplify the process of building, securing, and managing applications. With Docker in such high demand, it’s a great tool to add to your skillset. &lt;/p&gt;

&lt;p&gt;A great way to get practical experience with Docker is to build a project to add to your professional portfolio. Before you get started, there are still many more things to learn about Docker such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Container lifecycle&lt;/li&gt;
&lt;li&gt;Docker commands&lt;/li&gt;
&lt;li&gt;Creating a new container&lt;/li&gt;
&lt;li&gt;Running containers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started learning these concepts and much more, check out Educative’s curated course &lt;a href="https://www.educative.io/courses/beginners-guide-to-docker"&gt;&lt;strong&gt;The Beginners Guide to Docker&lt;/strong&gt;&lt;/a&gt;. In this hands-on course, we’ll guide you through the basics of Docker to help you gain proficiency in the platform. By the end of the course, you’ll be ready to build your own Docker project to add to your portfolio!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-learning-about-docker"&gt;
  &lt;/a&gt;
  Continue learning about Docker
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/docker-kubernetes-beginners-guide%EF%BB%BF"&gt;Getting started with Docker and Kubernetes: a beginners guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/microservices-architecture-tutorial-all-you-need-to-get-started"&gt;Microservices Architecture Tutorial: all you need to get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/docker-with-rails"&gt;Docker with Rails: Benefits and Top Use Cases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>docker</category>
      <category>programming</category>
      <category>kubernetes</category>
      <category>appdevelopment</category>
    </item>
    <item>
      <title>Regular Expression in JavaScript</title>
      <author>Bode</author>
      <pubDate>Thu, 24 Jun 2021 21:27:41 +0000</pubDate>
      <link>https://dev.to/thewebguyy/regular-expression-in-javascript-172k</link>
      <guid>https://dev.to/thewebguyy/regular-expression-in-javascript-172k</guid>
      <description>&lt;p&gt;A regular expression is an object that describes a pattern of characters. Regular expressions are often abbreviated &lt;em&gt;"regex"&lt;/em&gt; or &lt;em&gt;"regexp"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The JavaScript RegExp class represents regular expressions, and both strings and RegExp define methods that use regular expressions to perform powerful pattern matching and search-and-replace functions on the text.&lt;/p&gt;

&lt;p&gt;In simpler terms, a regular expression is a sequence of characters that forms a search pattern.&lt;/p&gt;

&lt;p&gt;When you search for data in a text, you can use this search pattern to describe what you are searching for.&lt;/p&gt;

&lt;p&gt;A regular expression can be a single character, or a more complicated pattern.&lt;/p&gt;

&lt;p&gt;A regular expression can be defined as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var pattern = new RegExp(pattern,attributes);
OR
var pattern = /pattern/attributes;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Using String Methods&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In JavaScript, regular expressions are often used with the two string methods: search() and replace().&lt;/p&gt;

&lt;p&gt;The search() method uses an expression to search for a match, and returns the position of the match.&lt;/p&gt;

&lt;p&gt;The replace() method returns a modified string where the pattern is replaced.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using String search() With a String.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The search() method searches a string for a specified value and returns the position of the match:&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;Use a string to do a search for "thewebguyy" in a string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let text = "Visit thewebguyy!";
let n = text.search("thewebguyy");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result in n will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Using String search() With a Regular Expression&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
Use a regular expression to do a case-insensitive search for "thewebguyy" in a string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let text = "Visit thewebguyy";
let n = text.search(/thewebguyy/i);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result in n will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Using String replace() With a String&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The replace() method replaces a specified value with another value in a string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let text = "Visit Hashnode!";
let result = text.replace("Hashnode", "thewebguyy");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Use String replace() With a Regular Expression&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;Use a case insensitive regular expression to replace Microsoft with W3Schools in a string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let text = "Visit Hashnode!";
let result = text.replace(/hashnode/i, "thewebguyy");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result in res will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Visit thewebguyy!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that: Regular expression arguments (instead of string arguments) can be used in the methods above.&lt;br&gt;
Regular expressions can make your search much more powerful (case insensitive for example).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regular Expressions Modifiers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Modifiers are used to perform case-insensitive more global searches:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hf6raewe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624568963749/6b0pQRVb8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hf6raewe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624568963749/6b0pQRVb8.jpeg" alt="regular expressions.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regular Expression Patterns&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Brackets are used to find a range of characters:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FYdpelTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624569313360/l7wg91Rck.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYdpelTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624569313360/l7wg91Rck.jpeg" alt="expression patterns.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Metacharacters are characters with a special meaning:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRs8zfru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624569421023/HB3Bw2_hQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRs8zfru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624569421023/HB3Bw2_hQ.jpeg" alt="metacharacter.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quantifiers define quantities:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MOpSdGpr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624569476943/4rxIfp_Nvu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MOpSdGpr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624569476943/4rxIfp_Nvu.jpeg" alt="quantifiers.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using the RegExp Object&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In JavaScript, the RegExp object is a regular expression object with predefined properties and methods.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using test()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The test() method is a RegExp expression method.&lt;/p&gt;

&lt;p&gt;It searches a string for a pattern, and returns true or false, depending on the result.&lt;/p&gt;

&lt;p&gt;The following example searches a string for the character "e":&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const pattern = /e/;
pattern.test("The best things in life are free!");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since there is an "e" in the string, the output of the code above will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You don't have to put the regular expression in a variable first. &lt;/p&gt;

&lt;p&gt;The two lines above can be shortened to one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/e/.test("The best things in life are free!");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Using exec()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The exec() method is a RegExp expression method.&lt;/p&gt;

&lt;p&gt;It searches a string for a specified pattern, and returns the found text as an object.&lt;/p&gt;

&lt;p&gt;If no match is found, it returns an empty (null) object.&lt;/p&gt;

&lt;p&gt;The following example searches a string for the character "e":&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/e/.exec("The best things in life are free!");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"&gt;You can read a complete reference here&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Use SOLID Principles To Become Better Automation Tester</title>
      <author>gusdmoreira</author>
      <pubDate>Thu, 24 Jun 2021 20:51:47 +0000</pubDate>
      <link>https://dev.to/gusdmoreira/use-solid-principles-to-become-better-automation-tester-3kg9</link>
      <guid>https://dev.to/gusdmoreira/use-solid-principles-to-become-better-automation-tester-3kg9</guid>
      <description>&lt;p&gt;&lt;strong&gt;Are you using most recommended and fundamental SOLID principles in your automation?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-need-to-use-solid-principles"&gt;
  &lt;/a&gt;
  Why You Need To Use SOLID Principles?
&lt;/h2&gt;

&lt;p&gt;Like any development work, automation also needs to be planned, designed, developed, maintained and extended over time. Your automation code or automation framework is an application which is testing your actual application. That’s why SOLID principles are highly recommend for your automation to make it easy to understand, use, maintain and extend over time. When SOLID principles are not applied, your automation might become fragile, hard to maintain and hard to extend very soon.&lt;/p&gt;

&lt;p&gt;Even if you are using different programming language like C#, Python or automation tool like HP UFT/QTP for automation, you should definitely consider applying SOLID principles to make your automation tester life easy. Please note that we will be discussing about applying SOLID principles to web automation using Selenium &amp;amp; Java. But, once you learn the concepts, you can easily apply them to any object-oriented development.&lt;/p&gt;

&lt;p&gt;In this post, we will be exploring what SOLID principles stands for. We will be having one post for each principle with real life examples from web automation using Selenium &amp;amp; Java.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-solid-principles"&gt;
  &lt;/a&gt;
  What Are The SOLID Principles?
&lt;/h2&gt;

&lt;p&gt;SOLID principles are the first five object-oriented design principles by Robert C. Martin, popularly known as Uncle Bob.&lt;/p&gt;

&lt;p&gt;SOLID is an acronym where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;S stands for Single Responsibility Principle (SRP)&lt;/li&gt;
&lt;li&gt;O stands for Open Closed Principle (OCP)&lt;/li&gt;
&lt;li&gt;L stands for Liskov Substitution Principle (LSP)&lt;/li&gt;
&lt;li&gt;I stands for Interface Segregation Principle (ISP)&lt;/li&gt;
&lt;li&gt;D stands for Dependency Inversion Principle (DIP)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s explore and understand each individual principle. Also, let’s find out how these SOLID principles make you better automation tester.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#single-responsibility-principle-srp-a-class-should-have-one-and-only-one-reason-to-change"&gt;
  &lt;/a&gt;
  Single Responsibility Principle (SRP): A class should have one, and only one, reason to change
&lt;/h2&gt;

&lt;p&gt;In other words to achieve this, a class should only have a single responsibility and it should do that very well. Every class in your automation should only have a single responsibility and that all of its methods should be aligned with that responsibility.&lt;/p&gt;

&lt;p&gt;Let’s try to understand this principle by looking at an example from our daily life. When you are driving a car/bike, you want to fully concentrate on the single responsibility – driving. You don’t want to do or concentrate on other tasks like talking on a phone, eating.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Automation Examples:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Page Object Framework implements SRP very well. We are going to have one class responsible for only one web page in the application. We shouldn’t have a very big class with many responsibilities like test methods, UI action methods, excel read/write methods.&lt;/li&gt;
&lt;li&gt;We can have very specific helper classes like ExcelHelper, DatabaseHelper to work with a excel file or database to implement Data Driven Framework.&lt;/li&gt;
&lt;li&gt;Selenium API has browser specific driver classes like FirefoxDriver, ChromeDriver, InternetExplorerDriver. FirefoxDriver has single responsibility to drive the Firefox browser and it drives the Firefox browser very well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We should also have methods in classes that are very specific like &lt;code&gt;loginAs(username, password)&lt;/code&gt; to login with given username and password, &lt;code&gt;testSuccessfulLogin(username,password)&lt;/code&gt; which tests only one thing that login should be successful with valid username/password.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-closed-principle-ocp-software-entities-classes-modules-functions-etc-should-be-open-for-extension-but-closed-for-modification"&gt;
  &lt;/a&gt;
  Open Closed Principle (OCP): Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification
&lt;/h2&gt;

&lt;p&gt;You should be able to easily add additional functionality for a class without changing its code. OCP says that a class should be open for extension and closed for modification. The “closed” part of the rule states that once a class has been developed and tested, the class code shouldn’t change except for any bug fixes. The “open” part of the rule states that you should be able to extend existing code in order to introduce new functionality. We are trying to add new functionality without modifying the existing code/functionality and by adding new classes/code as required. This is very important to minimise the impact of changes and errors from existing code.&lt;/p&gt;

&lt;p&gt;Let’s try to understand this principle by looking at an example from our daily life. Let’s say you live in a 2 bedroom house and you are looking for a 3 bedroom house due to reasons like growing children. If you have free/unused space available, it’s very easy to extend the house by building another bedroom. Also with this, you are minimise the impact of changes on the existing 2 bedroom house.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Automation Example:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s say that you are automating an online store application. You have Customer class to represent store customers and respective related customer actions. Now, your company has introduced VIP customer concept to reward loyal customers with discounts and free delivery. To implement VIP customer behaviour in your automation, OCP suggests that keep the Customer class same without modifying it and create a new VipCustomer class by inheriting from Customer class. Now in the VipCustomer class extend the behaviour as required.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#liskov-substitution-principle-lsp-subtypes-must-be-substitutable-for-their-base-types"&gt;
  &lt;/a&gt;
  Liskov Substitution Principle (LSP): Subtypes must be substitutable for their base types
&lt;/h2&gt;

&lt;p&gt;When you pass subtype for a base type argument or when you assign/instantiate base type with subtype, the program/code should work properly without changing its behaviour and shouldn’t break. This principle was introduced by and named after Barbara Liskov.&lt;/p&gt;

&lt;p&gt;Let’s try to understand this principle by looking at an example from our daily life. Let’s say that you have a wall clock at home or you have a wrist watch. They both need batteries to work. If you buy batteries as per the specifications from any brand like Panasonic, Sony, Duracell, you expect the wall clock or wrist watch to work properly without any issues when powered by those batteries.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Automation Example:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Considering the above example of automating an online store application with Customer and VIP Customer categories, let’s say there is a method &lt;code&gt;calculateDeliveryCharge(Customer customer, OrderInfo orderInfo)&lt;/code&gt; which calculates delivery charge when customer and order information is passed. When we pass &lt;code&gt;Customer&lt;/code&gt; object to &lt;code&gt;calculateDeliveryCharge()&lt;/code&gt; method with order information, it should return delivery charge. Note that we are providing free delivery to VIP Customers. So, when we pass &lt;code&gt;VipCustomer&lt;/code&gt; object for customer argument to &lt;code&gt;calculateDeliveryCharge()&lt;/code&gt; method with order information, the program/code should work properly without changing its behaviour and shouldn’t throw any exceptions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interface-segregation-principle-isp-make-fine-grained-interfaces-that-are-client-specific"&gt;
  &lt;/a&gt;
  Interface Segregation Principle (ISP): Make fine grained interfaces that are client specific
&lt;/h2&gt;

&lt;p&gt;It’s good to have small role specific interfaces rather than one big general interface. ISP states that clients should never be forced to implement interfaces that they don’t use or clients should never be forced to depend on methods that they don’t use. When a class depends upon another class, the number of members visible from the another class to the dependent class should be minimised. When you apply the ISP, classes implement multiple smaller role specific interfaces and dependent classes depend on required role specific interfaces for the given task.&lt;/p&gt;

&lt;p&gt;Let’s try to understand this principle by looking at an example from our daily life. When you are travelling in a train and when ticket inspector wants to check your ticket, you will be showing only your ticket and not all your luggage. Similarly, ticket inspector wants to check your ticket only and not any other belongings of you. We should reveal/expose only what’s required for the given task.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Automation Example:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s again take the example of automating an online store application. You have to test that an email is received by the customer after successful purchase. Let’s say that you have an EmailHelper class with a method &lt;code&gt;isEmailReceived()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your Customer class might have so many fields and methods like &lt;code&gt;firstName, lastName, emailAddress, phoneNumber, deliveryAddress, billingAddress, getPurchaseHisotry(), getOrdersInProgress()&lt;/code&gt;. But &lt;code&gt;isEmailReceived()&lt;/code&gt; method only needs to know &lt;code&gt;firstName, lastName, emailAddress&lt;/code&gt; fields and doesn’t need to now all the other fields/methods of Customer class.&lt;/p&gt;

&lt;p&gt;Consider implementation like &lt;code&gt;isEmailReceived(Customer customer, string subject, string body)&lt;/code&gt;: We are exposing whole Customer class in &lt;code&gt;isEmailReceived()&lt;/code&gt; method and then one can easily access/change details like &lt;code&gt;phoneNumber, deliveryAddress, billingAddress&lt;/code&gt; in &lt;code&gt;isEmailReceived()&lt;/code&gt; method. We want to minimize the risk to Customer object by passing only details that are required to the clients/methods. We can achieve this by below implementation by using an &lt;code&gt;Emailable&lt;/code&gt; interface which represents a contact that can be emailed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface Emailable {
    String getFirstName();
    String getLastName();
    String getEmailAddress();
}

class Customer implements Emailable {
    String firstName, lastName, emailAdddress;
    String phoneNumber, deliveryAddress, billingAddress;

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public String getEmailAddress() {
        return emailAdddress;
    }
}

class EmailHelper {
    public boolean isEmailReceived(Emailable recipient, String subject, String body) {
        // Logic to check whether recipient recieved email or not

        // You can use recipient.getFirstName(), recipient.getLastName(), recipient.getEmailAddress() to get recipient details

        // When you pass Customer object to this method, only Emailable interface methos are available here and no other details are exposed from Customer Object

        // Customer object is safe from any changes

        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can further reuse Emailable interface for other types like StoreManager, Supplier to whom your online store sends emails. With this approach, we can use &lt;code&gt;isEmailReceived()&lt;/code&gt; method with any implementation that implements Emailable interface and respective input object for recipient argument is safe from any changes/actions. I hope now you have understood the power of ISP.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Other Automation Example:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Selenium API has good examples of ISP. Selenium API has a number of very fine grained, role based client specific interfaces like WebDriver, WebElement, Alert. We should favour role based interfaces instead of generic interfaces.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependency-inversion-principle-dip-depend-on-abstractions-not-on-concretions"&gt;
  &lt;/a&gt;
  Dependency Inversion Principle (DIP): Depend on abstractions, not on concretions
&lt;/h2&gt;

&lt;p&gt;DIP states that Software entities (classes, modules, functions, etc.) should depend on abstractions (like interfaces) and not on concretions (like concrete class types). DIP promotes code to an interface approach. For example, in Selenium automation code, we code to a WebDriver interface variable “driver” whenever we want to work with web browser and the same code works for any browser type like FirefoxDriver, ChromeDriver, InternetExploerDriver which implements the WebDriver interface.&lt;/p&gt;

&lt;p&gt;DIP mainly suggests below 2 rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High level modules should not depend upon low level modules. Both should depend upon abstractions.&lt;/li&gt;
&lt;li&gt;Abstractions should not depend upon details. Details should depend upon abstractions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s try to understand this principle by looking at an example from our daily life. When you go to a cash machine/ATM, the cash machine/ATM expects a valid debit/credit card. The machine has a dependency on valid card abstraction and not on specific concrete type cards like only Visa, only Maestro or only issued by specific bank. The machine works for any valid card type implementation and we are providing the card to the machine from outside which provides so much flexibility and easiness to use the machine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Automation Example:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Look at below page object class for a Login Page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class LoginPage {
    private WebDriver driver;

    public LoginPage(WebDriver driver) {
        this.driver = driver;
    }

    public void loginAs(String username, String password) {
        driver.findElement(By.id("username")).sendKeys(username);
        driver.findElement(By.id("password")).sendKeys(password);
        driver.findElement(By.name("login")).click();
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can observe following with respect to DIP from above LoginPage class:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is depending on the abstraction and all the code is written against WebDriver interface so that the code can work with any implementation like FirefoxDriver, ChromeDriver, InternetExploerDriver&lt;/li&gt;
&lt;li&gt;The implementation for the WebDriver interface should be passed by the client through constructor LoginPage(WebDriver driver) when creating the LoginPage object.&lt;/li&gt;
&lt;li&gt;So the code works for any implementation and we can pass the implementation when creating the object. This gives us lot of flexibility and it will be easy to maintain.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#get-ready-to-useapply-solid-principles-in-your-automation"&gt;
  &lt;/a&gt;
  Get Ready To Use/Apply SOLID Principles In Your Automation…
&lt;/h2&gt;

&lt;p&gt;I hope you have got good understanding of SOLID principles by now. If it seems complicated, don’t worry and things will be very clear in the next posts. Let’s look at each principle individually in the next posts to find out how these principles makes us better automation testers and makes our automation easy to understand, use, maintain and extend.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>solid</category>
      <category>selenium</category>
    </item>
    <item>
      <title>Quick sort algorithm</title>
      <author>Aya Bouchiha</author>
      <pubDate>Thu, 24 Jun 2021 20:45:34 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/quick-sort-algorithm-1k72</link>
      <guid>https://dev.to/ayabouchiha/quick-sort-algorithm-1k72</guid>
      <description>&lt;h2&gt;
  &lt;a href="#definition-of-quicksort"&gt;
  &lt;/a&gt;
  Definition of quicksort
&lt;/h2&gt;

&lt;p&gt;Quicksort is a type of  Divide and Conquer algorithm like &lt;strong&gt;merge sort&lt;/strong&gt;, it works by choosing an element as a &lt;strong&gt;pivot&lt;/strong&gt; from the giving array, and appending the greater elements to the selected pivot, and shifting the smaller elements before it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-and-space-complexity"&gt;
  &lt;/a&gt;
  Time and Space complexity
&lt;/h2&gt;

&lt;p&gt;The space complexity of quicksort is O(log n)&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;best-case&lt;/th&gt;
&lt;th&gt;average case&lt;/th&gt;
&lt;th&gt;worst-case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;O(n log n)&lt;/td&gt;
&lt;td&gt;O(n log n)&lt;/td&gt;
&lt;td&gt;O(n^2) &lt;em&gt;when the list is already sorted, or the pivot is min or max value of the giving list&lt;/em&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#implementation-of-quick-sort-using-python"&gt;
  &lt;/a&gt;
  Implementation of quick sort using python
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;QuickSortAlgorithm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
        [ name ] =&amp;gt; Quick Sort
        [ type ] =&amp;gt; Sorting algorithms
        [ time complexity ] =&amp;gt; (
            1. best case:  O(n log n)
            2. average case: O(n log n)
            3. worst case: O(n^2) { when the pivot is the (min or max) value of the giving list, or the list is already sorted }
        )
        [ space complexity ] =&amp;gt; O(log n)
        [params] =&amp;gt; (
            arr {list} list to sort
        )
        [return] =&amp;gt; {list} sorted list 
    """&lt;/span&gt;
    &lt;span class="c1"&gt;# size of array
&lt;/span&gt;    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;
    &lt;span class="c1"&gt;# pivote = arr[mid] 
&lt;/span&gt;    &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;smallerThanPivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;greaterThanPivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="c1"&gt;# do not append pivot to (greaterThanPivot) =&amp;gt; continue
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="c1"&gt;# if the element is greater than or equal pivot
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# append the element that is greater than pivot to greaterThanPivot array
&lt;/span&gt;            &lt;span class="n"&gt;greaterThanPivot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# if the element is smaller than pivot append it to smallerThanPivot
&lt;/span&gt;            &lt;span class="n"&gt;smallerThanPivot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;QuickSortAlgorithm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallerThanPivot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;QuickSortAlgorithm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greaterThanPivot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8hly31xKli0&amp;amp;t=16878s"&gt;https://www.youtube.com/watch?v=8hly31xKli0&amp;amp;t=16878s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/when-does-the-worst-case-of-quicksort-occur/"&gt;https://www.geeksforgeeks.org/when-does-the-worst-case-of-quicksort-occur/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Quicksort"&gt;https://en.wikipedia.org/wiki/Quicksort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=PgBzjlCcFvc"&gt;https://www.youtube.com/watch?v=PgBzjlCcFvc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=7h1s2SojIRw"&gt;https://www.youtube.com/watch?v=7h1s2SojIRw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0SkOjNaO1XY"&gt;https://www.youtube.com/watch?v=0SkOjNaO1XY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#day_12&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>I built my app in React, React Native and NextJS. Lessons learned.</title>
      <author>Ash G</author>
      <pubDate>Thu, 24 Jun 2021 19:47:53 +0000</pubDate>
      <link>https://dev.to/ash_grover/i-built-my-app-in-react-react-native-and-nextjs-lessons-learned-3f38</link>
      <guid>https://dev.to/ash_grover/i-built-my-app-in-react-react-native-and-nextjs-lessons-learned-3f38</guid>
      <description>&lt;p&gt;I developed an offline-first personal Kanban app called &lt;a href="https://brisqi.com"&gt;Brisqi&lt;/a&gt; and launched it for 5 different platforms. I started this project with 2 purposes - to learn React and to build my own offline Kanban app as I always wanted one. I've been working on Brisqi since June last year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heres-the-tech-stack-i-used-in-case-youre-curious"&gt;
  &lt;/a&gt;
  Here's the tech stack I used in case you're curious:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ReactJS + BlueprintJS + custom styling for desktop app.&lt;/li&gt;
&lt;li&gt;React Native + React Native elements + custom styling for Android/iOS App.&lt;/li&gt;
&lt;li&gt;NextJS + BulmaCSS for the website.&lt;/li&gt;
&lt;li&gt;Firebase Auth for authentication + Firestore for the database.&lt;/li&gt;
&lt;li&gt;Google cloud functions - to handle backend operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Electron framework was the obvious choice to make it cross-platform as it has good eco-system around it so I went ahead with it as the underlying framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#following-are-the-things-i-learned-and-followed-specific-to-react-hope-its-helpful-to-you"&gt;
  &lt;/a&gt;
  Following are the things I learned and followed specific to React, hope its helpful to you:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Start with Context API for state management if your app is small, learn how it works. This will get you use-to the reducer pattern in React. &lt;strong&gt;Don't worry about the performance in the beginning&lt;/strong&gt;, React is smart enough and optimizes rendering for you. Optimize for performance or re-renders only if performance becomes an issue. And only move to Redux if you feel your app needs more than a simple state management.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Learn Immer and how it works. It's a great library  to &lt;strong&gt;modify state in an immutable way&lt;/strong&gt;. It makes life so much easier by modifying the "draft" of a state directly without the use of spread operators if the state is made of nested objects. It also comes in handy when implementing reducers with Context API. &lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you move to Redux, use &lt;strong&gt;Redux Toolkit&lt;/strong&gt;. It's a great toolkit made by the same people who made/maintain Redux.&lt;/p&gt;

&lt;p&gt;It states following on their &lt;a href="https://redux.js.org/redux-toolkit/overview"&gt;website&lt;/a&gt;:&lt;br&gt;
&lt;em&gt;"Redux Toolkit is our official, opinionated, batteries-included toolset for efficient Redux development. It is intended to be the standard way to write Redux logic, and we strongly recommend that you use it."&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;This one's subjective I feel. Learn how to use Functional Components and Hooks effectively. All my apps are written using Functional components and Hooks. I personally feel they are &lt;strong&gt;easier to read and understand&lt;/strong&gt;, it certainly helps in avoiding the need of HOC or render props which is a plus for me. If you're starting new projects, start using Functional components and Hooks.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Optimizing performance in React Native can be a tricky thing to do if you have lot of data to display. If you're using lists, use FlatList instead of iterating over values using map function or similar. Using Redux here can be beneficial to you here so you can avoid unnecessary re-renders. Remember, in Context API, &lt;strong&gt;using useContext within a component will re-render that component and child components everytime unless you use React.memo&lt;/strong&gt; on child components. Check out this Github &lt;a href="https://github.com/facebook/react/issues/15156"&gt;link&lt;/a&gt; to learn more. In Redux, accessing part of state using useSelector hook prevents re-rendering if that part hasn't changed. &lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Speaking of unnecessary re-renders, learn how to use &lt;strong&gt;React.memo(), useCallback() and useMemo()&lt;/strong&gt; effectively. Learn them, understand them and use them to avoid re-renders if performance becomes a problem. If you're using Redux, learn about &lt;strong&gt;Reselect&lt;/strong&gt; library to create memoized selector functions. All of this helped me a lot in improving performance of Brisqi mobile app. If you're developing on iOS first, you might not see performance issues immediately, test it on Android. In my personal experience, an app written in React Native performs better on iOS than Android. I go by this rule of thumb, if it's performant on Android, it probably performs equally well or better on iOS, but I still test thoroughly on both platforms.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Break components into smaller components if necessary&lt;/strong&gt;. Smaller components are re-usable, easier to work with when using React.memo(), easier to manage state in them and code is easier to read and maintain when you come back to it after a couple of months.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Use third-party utility libraries sparingly&lt;/strong&gt;. Use them if you think you cannot reproduce that functionality on your own "reliably". For example, I wrote my own Keyboard avoiding/aware view from scratch because - 1) I could simplify it, 2) tweak it according to my needs , 3) adapt it for both Android and iOS platforms and 4) I'd avoid external dependency. I'm not saying that other solutions are not good enough, they might be and some are, but less dependency = more stability because you know the functionality in and out. &lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;For styling/convention, &lt;strong&gt;be consistent&lt;/strong&gt; with whatever you pick. Airbnb style guide can be a good starting point, however I don't follow everything they say. For example - I disagree with them on the usage of single and double quotes. I use double quotes everywhere to be consistent where as they use both single quotes and double quotes.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Keep things simple&lt;/strong&gt;, don't over-complicate your architecture. Add things as you go along. Similarly, don't prematurely optimize for performance, do it when it becomes an issue.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;NextJS is for websites or multi-page apps and React is for single page apps. I personally don't try to adapt one into another. Makes things easier that way.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Keep refactoring&lt;/strong&gt; as you find out better approaches of doing things. It's part of the learning process.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Keep learning, don't stop and share your knowledge with others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow me on &lt;a href="https://twitter.com/ash_grover"&gt;Twitter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://brisqi.com"&gt;Brisqi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Getting started with React Cosmos</title>
      <author>Matt Angelosanto</author>
      <pubDate>Thu, 24 Jun 2021 19:18:32 +0000</pubDate>
      <link>https://dev.to/logrocket/getting-started-with-react-cosmos-50mn</link>
      <guid>https://dev.to/logrocket/getting-started-with-react-cosmos-50mn</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/elizabethamaechi/"&gt;Elizabeth Amaechi&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;One of the many selling points of React is that users can build components and reuse them repeatedly within a specific codebase. You can take this feature further with the help of the React Cosmos developer tool.&lt;/p&gt;

&lt;p&gt;React Cosmos is used for building isolated and scalable React components. It lets you create a sole component for your React application. You can consider different use cases as well as different design patterns when making use of React Cosmos, which will allow you to create very versatile, isolated components that fit many other conditions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-using-react-cosmos"&gt;
  &lt;/a&gt;
  Benefits of using React Cosmos
&lt;/h2&gt;

&lt;p&gt;React Cosmos works by making use of component features. The sum of these component features is what makes up your component library. This is then rendered on a UI for easy tracking. A major benefit of using &lt;a href="https://reactcosmos.org/"&gt;React Cosmos&lt;/a&gt; is that it can scan any of your React projects and let you render the components within each of them, with any combination of props or in any state.&lt;/p&gt;

&lt;p&gt;In this section, we’ll go over some of the many benefits of using React Cosmos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reusable-component-creation"&gt;
  &lt;/a&gt;
  Reusable component creation
&lt;/h3&gt;

&lt;p&gt;As stated earlier, React Cosmos takes the reusability benefits of &lt;a href="https://blog.logrocket.com/tag/react/"&gt;React&lt;/a&gt; to the next level, allowing for the creation of isolated and reusable components. This gives you more room to create a robust architecture while preventing you from having to rewrite an already defined UI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ui-sharing-across-different-projects"&gt;
  &lt;/a&gt;
  UI sharing across different projects
&lt;/h3&gt;

&lt;p&gt;In addition to reusing a UI within a given project, React Cosmos allows for the reusability of a component across various projects in your portfolio. This is really helpful in creating solid and uniform branding across your project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easy-debugging"&gt;
  &lt;/a&gt;
  Easy debugging
&lt;/h3&gt;

&lt;p&gt;It is much easier to identify and fix errors in your application when you use React Cosmos because it isolates components into individual units, rather than forces you to work with non-isolated components. This makes development much easier and faster because it’s much easier to figure out your error sources.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-and-publish-your-component-library"&gt;
  &lt;/a&gt;
  Build and publish your component library
&lt;/h3&gt;

&lt;p&gt;You can make any of your React Cosmos components publicly available for your coworkers or anyone on the internet. This can come in handy should you decide to build or launch your own component library for public use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#realtime-external-api-mocking"&gt;
  &lt;/a&gt;
  Real-time external API mocking
&lt;/h3&gt;

&lt;p&gt;Users can see the current state of their application in real-time by mocking external APIs. This makes development faster and can also come in handy during debugging.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-react-cosmos"&gt;
  &lt;/a&gt;
  Installing React Cosmos
&lt;/h2&gt;

&lt;p&gt;React Cosmos can be used on any React or React Native project, but for this article, we will focus on React. Make sure that you’ve &lt;a href="https://blog.logrocket.com/getting-started-with-create-react-app"&gt;installed your React project&lt;/a&gt; beforehand with the use of &lt;code&gt;npx create-react-app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, let’s install React Cosmos in our React project using either npm (Node Package Manager):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;--D&lt;/span&gt; react-cosmos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or Yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; react-cosmos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can confirm that installation is successful by checking the &lt;code&gt;package.json&lt;/code&gt; file in your React project.&lt;/p&gt;

&lt;p&gt;After installation, the next step is to create a &lt;code&gt;package.json&lt;/code&gt; script in your application. This will enable you to start your Cosmos project. Include the following code under the script section of your &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"cosmos"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cosmos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"cosmos:export"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cosmos-export"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your whole &lt;code&gt;package.json&lt;/code&gt; file should look as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"reactcosmos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@testing-library/jest-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.12.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@testing-library/react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^11.2.7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@testing-library/user-event"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^12.8.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"4.0.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"web-vitals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.1.2"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eject"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts eject"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cosmos"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cosmos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cosmos:export"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cosmos-export"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"eslintConfig"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"react-app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"react-app/jest"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"browserslist"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"production"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;0.2%"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"not dead"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"not op_mini all"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"development"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"last 1 chrome version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"last 1 firefox version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"last 1 safari version"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-cosmos"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.6.2"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s proceed to start our application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launching-our-react-app-with-react-cosmos"&gt;
  &lt;/a&gt;
  Launching our React app with React Cosmos
&lt;/h2&gt;

&lt;p&gt;Run the below command within your terminal:&lt;/p&gt;

&lt;p&gt;Using npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run cosmos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, using Yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn cosmos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should be prompted to visit &lt;code&gt;localhost:5000&lt;/code&gt; to view your component libraries. You won’t see any components there yet because we haven‘t built any.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oe9uCYiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/empty-component-library.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oe9uCYiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/empty-component-library.png" alt="Your empty component library"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you’re faced with an error message, you should do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Create a file called &lt;code&gt;babel.config.js&lt;/code&gt; and update its content with the code below:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="na"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@babel/preset-env&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}}],&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@babel/preset-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}}]&lt;/span&gt; &lt;span class="c1"&gt;// add this&lt;/span&gt;
       &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt; Create another file called &lt;code&gt;postcss.config.js&lt;/code&gt; and update its content as so:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should fix any Babel or PostCSS issues. If the error persists, then you can read through the message and try to troubleshoot or browse the error message on your favorite browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-our-first-react-component"&gt;
  &lt;/a&gt;
  Building our first React component
&lt;/h2&gt;

&lt;p&gt;To build our first component, we need to create a fixture. Fixture files usually contain only one default export — either a React component or a React node. To create one, we need to add &lt;code&gt;.fixture&lt;/code&gt; to the name of the file containing our component — we’ll use &lt;code&gt;main.fixture.js&lt;/code&gt;. This way, React Cosmos can easily track it.&lt;/p&gt;

&lt;p&gt;Proceed to create a file named &lt;code&gt;button.fixture.jsx&lt;/code&gt; within the &lt;code&gt;src&lt;/code&gt; folder of your React application. The next step is to update the file with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// button.fixture.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello, World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hurray! You just created your first isolated component using React Cosmos. To confirm this, proceed to &lt;code&gt;localhost:5000&lt;/code&gt; again, where you should see your first component listed under &lt;strong&gt;All Fixtures&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e0MicGLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/first-component-created.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e0MicGLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/first-component-created.png" alt="Your first component has been created"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updating-your-react-components"&gt;
  &lt;/a&gt;
  Updating your React components
&lt;/h2&gt;

&lt;p&gt;Now that we have successfully created our first component, we can proceed to update it. In this section, we’ll build a button component. Proceed to update the content of our &lt;code&gt;button.fixture.jsx&lt;/code&gt; file as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./button.fixture.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Hey, Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we did above is create a button tag and linked our yet-to-be-created CSS stylesheet. Now, create another file called &lt;code&gt;button.fixture.css&lt;/code&gt; for our button component styling. Update the content of the new file as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;teal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will style the newly-created button. You can once again proceed to &lt;code&gt;localhost:5000&lt;/code&gt; to see the changes we made to our component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOVm4FGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/new-button-changes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOVm4FGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/new-button-changes.png" alt="Your new button with changes in the component library"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have successfully created and updated our isolated button component! It can now be used for our different applications. As you create more components, they will show up within your pre-rendered dashboard for viewing.&lt;/p&gt;

&lt;p&gt;Note that fixture files must be located within the &lt;code&gt;src&lt;/code&gt; folder of your React application. You can create a fixture either by adding &lt;code&gt;.fixture&lt;/code&gt; to your filename or creating a &lt;code&gt;__fixtures__&lt;/code&gt; folder and placing all your fixture files within it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multifixture-files"&gt;
  &lt;/a&gt;
  Multi-fixture files
&lt;/h2&gt;

&lt;p&gt;It can be challenging to export more than one component from a single fixture file, especially when you allow for just one default export. You can walk around this issue by placing your components in the form of an &lt;code&gt;object&lt;/code&gt;, as shown below; this will enable you to export multiple components with one fixture file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PrimaryButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PrimaryButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="na"&gt;primaryDisabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PrimaryButton&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PrimaryButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="na"&gt;secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SecondaryButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SecondaryButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="na"&gt;secondaryDisabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SecondaryButton&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SecondaryButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;React Cosmos is an excellent way to create an isolated component for your current or future React application, particularly as it comes easy-to-use and with swift debugging, among other benefits. Try out React Cosmos for easy and faster development the next time you’re building components!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-visibility-into-production-react-apps"&gt;
  &lt;/a&gt;
  Full visibility into production React apps
&lt;/h2&gt;

&lt;p&gt;Debugging React applications can be difficult, especially when users experience issues that are difficult to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;try LogRocket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="The LogRocket Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your React app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your React apps — &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Using Hotwire and Rails to build a live commenting system</title>
      <author>David Colby</author>
      <pubDate>Thu, 24 Jun 2021 19:17:34 +0000</pubDate>
      <link>https://dev.to/davidcolbyatx/using-hotwire-and-rails-to-build-a-live-commenting-system-aj9</link>
      <guid>https://dev.to/davidcolbyatx/using-hotwire-and-rails-to-build-a-live-commenting-system-aj9</guid>
      <description>&lt;p&gt;Today we're exploring &lt;a href="https://hotwire.dev/"&gt;Hotwire&lt;/a&gt;, a new-old way of building web applications by sending HTML instead of JSON over the wire.&lt;/p&gt;

&lt;p&gt;We'll learn how Hotwire works with Ruby on Rails by building a simple application that allows users to leave comments on a project and see those comments in real-time, without requiring full page turns. &lt;/p&gt;

&lt;p&gt;This guide presents an alternative approach to &lt;a href="https://www.colby.so/posts/building-a-simple-commenting-form-with-stimulus-js-and-rails-6"&gt;a guide&lt;/a&gt; I wrote last year which guides you through creating a similar experience using Stimulus. Either approach is valid and works well. The approach presented today presents a way of delivering the experience without writing any JavaScript code, and should feel very natural for any Ruby on Rails developer.&lt;/p&gt;

&lt;p&gt;Here is what it will look like when we are finished. It won't be pretty, but it will work and we won't write a single line of JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Da29t68i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92hbzfvc7woykf85ba4b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Da29t68i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92hbzfvc7woykf85ba4b.gif" alt="A screen recording of a user typing in a comment in a text input and the comment being added to a list of comments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To accomplish this, we will start with a new Rails 6.1 application, install Hotwire in the application, and then walk through the basics of adding Hotwire to our views and controllers.&lt;/p&gt;

&lt;p&gt;I'm writing this assuming that you are comfortable with the basics of Ruby on Rails development and that you've never used Hotwire before. &lt;/p&gt;

&lt;p&gt;You can find the complete source code for this tutorial &lt;a href="https://github.com/DavidColby/hotwire-comments-demo"&gt;on Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's dive in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-our-project"&gt;
  &lt;/a&gt;
  Set up our project
&lt;/h2&gt;

&lt;p&gt;To get started we will create a new Rails application and scaffold up a Project resource to build our commenting system against. While you can work from an existing application of your own, you will find this guide easier to follow if you start from scratch along with me.&lt;/p&gt;

&lt;p&gt;First, run these console comamnds to create and setup our Rails app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails new hotwire-comments &lt;span class="nt"&gt;-T&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;hotwire-comments
rails g scaffold Project name:string
rails g model Comment body:text project:references
rails db:migrate
rails s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your browser, head to &lt;a href="http://localhost:3000/projects"&gt;http://localhost:3000/projects&lt;/a&gt; and create a project. We'll use this project as we build the commenting system.&lt;/p&gt;

&lt;p&gt;Once that's done, open the application's code in your favorite editor and add &lt;code&gt;has_many :comments&lt;/code&gt; to &lt;code&gt;app/models/project.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, display comments on the project show page by updating &lt;code&gt;app/views/projects/show.html.erb&lt;/code&gt; with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- app/views/projects/show.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"notice"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;notice&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Name:&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'Edit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edit_project_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt; |
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'Back'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;projects_path&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add a few comments in the rail console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Project.first.comments &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="sh"&gt;.create(body: "Hotwire comments are coming soon!")
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wonderful. &lt;/p&gt;

&lt;p&gt;If you've followed along successfully so far, when you visit &lt;a href="http://localhost:3000/projects/1"&gt;http://localhost:3000/projects/1&lt;/a&gt; you should see something that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FKIpo4cy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6od0rpez04o0zp6ckit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKIpo4cy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6od0rpez04o0zp6ckit.png" alt="A screenshot of a page that shows the name of a project and a comment entered by a user"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we're ready to install Hotwire and start learning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-hotwire"&gt;
  &lt;/a&gt;
  Installing Hotwire
&lt;/h2&gt;

&lt;p&gt;To install Hotwire, first add the hotwire-rails gem to your Gemfile by running this commend in your console or by manually updating your Gemfile and running &lt;code&gt;bundle install&lt;/code&gt; in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bundle add hotwire-rails
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the gem is added, run the installer from your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails hotwire:install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the installer runs, restart your rails server or you may encounter some undefined method errors later in this guide.&lt;/p&gt;

&lt;p&gt;Now that we have Hotwire installed, let's start with getting comments to render in real time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-comments-stream"&gt;
  &lt;/a&gt;
  Adding a comments stream
&lt;/h2&gt;

&lt;p&gt;Hotwire as we're using it relies on frameworks designed and maintained by the Basecamp team. One of those frameworks is &lt;a href="https://turbo.hotwire.dev/"&gt;Turbo&lt;/a&gt;. Turbo is a set of "complimentary techniques for speeding up page changes and form submissions". &lt;/p&gt;

&lt;p&gt;For our purposes, we'll be interested in two key components of the Turbo package, &lt;a href="https://turbo.hotwire.dev/reference/frames"&gt;Turbo Frames&lt;/a&gt; and &lt;a href="https://turbo.hotwire.dev/reference/streams"&gt;Turbo Streams&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A Turbo Stream delivers page changes to the browser over Websocket. By adding the Hotwire Rails project to our application, we gain access to a set of helper methods that make working with Turbo Streams simple. &lt;/p&gt;

&lt;p&gt;Let's see how this works by updating our project show page as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- app/views/projects/show.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"notice"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;notice&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Name:&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_stream_from&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:comments&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_comments"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;created_at: :desc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'Edit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edit_project_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt; |
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'Back'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;projects_path&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's walk through the changes here one-by-one. &lt;/p&gt;

&lt;p&gt;First, we add a turbostream that listens for broadcasts on the comments channel for our Project. This stream is how we subscribe to comment updates for our project. Note that because we’re working with a nested resource here (comments belong to a project), our stream subscribes to comments for just the current project.&lt;/p&gt;

&lt;p&gt;We also add an id to the parent div of our comments list. This id is used to identify where to add broadcasted comments to the DOM. If this id is not present or does not match the id in the broadcast, no DOM updates will occur when comment changes are broadcast.&lt;/p&gt;

&lt;p&gt;Finally, we’re using a _comment partial to render each comment. That partial doesn’t exist yet, let’s add it now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;app/views/comments
&lt;span class="nb"&gt;touch &lt;/span&gt;app/views/comments/_comment.html.erb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then fill in the comment partial with the below content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- app/views/comments/_comment.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that here, we're ensuring each comment has a unique id in the DOM, which ensures that new comments are properly inserted into the DOM.&lt;/p&gt;

&lt;p&gt;Our last step towards getting our stream setup and comments prepending in real time is to add a callback to the comment model. &lt;/p&gt;

&lt;p&gt;When this callback runs, the newly created comment will be broadcast on the project_comments stream that our project#show page is now subscribed to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# app/models/comment.rb&lt;/span&gt;
&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ActionView&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;RecordIdentifier&lt;/span&gt;

&lt;span class="n"&gt;after_create_commit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;broadcast_prepend_to&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:comments&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;target: &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_comments"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using the &lt;code&gt;broadcast_prepend_to&lt;/code&gt; method provided by turbo-rails. There are a variety of methods that can be used to add, remove, and replace DOM content through callbacks triggered by model changes. The best place to find these methods is by reading the &lt;a href="https://github.com/hotwired/turbo-rails/blob/main/app/models/concerns/turbo/broadcastable.rb"&gt;turbo-rails code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that the &lt;code&gt;target&lt;/code&gt; value passed to &lt;code&gt;broadcast_prepend_to&lt;/code&gt; must exactly match the id set in the DOM earlier. &lt;/p&gt;

&lt;p&gt;The dom_id method used to set the broadcast channel target is not normally available in models so we include the relevant ActionView helper class in the model. This simplifies our method of broadcasting to the appropriate channel. H/T to Chris Oliver at &lt;a href="https://gorails.com/"&gt;GoRails&lt;/a&gt; for this helpful trick.&lt;/p&gt;

&lt;p&gt;With these changes in place, let's test out our stream and see how it works.&lt;/p&gt;

&lt;p&gt;Make sure you've got your project open in a web browser, and then open your Rails console and create a comment. If you've followed along successfully, immediately after you create the comment in the console, you should see the comment added to the project page open in your browser, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDjOWDb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sgce1ezu0lpludll4o1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDjOWDb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sgce1ezu0lpludll4o1.gif" alt="A screen recording of a user typing in a command in their terminal to add a comment. Next to the terminal, the user's web browser is open and the comment is added to the browser window after the command is run in the terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-comments-with-a-form"&gt;
  &lt;/a&gt;
  Adding comments with a form
&lt;/h2&gt;

&lt;p&gt;While our subscription is working great, users aren't going to add content through the Rails console. Let's finish up this tutorial by adding a form to add comments in the UI without requiring a page turn.&lt;/p&gt;

&lt;p&gt;First, let's create a partial to render our form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;app/views/comments/_form.html.erb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the below to the form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- app/views/comments/_form.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="s2"&gt;"comment_form"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form_with&lt;/span&gt; &lt;span class="ss"&gt;model: &lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;url: &lt;/span&gt;&lt;span class="n"&gt;project_comments_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;any?&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"error_explanation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;pluralize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt; prohibited this comment from being saved:&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
          &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;full_message&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text_field&lt;/span&gt; &lt;span class="ss"&gt;:body&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;submit&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is pretty close to a standard Rails form partial, with the added turbo_frame_tag that wraps the entire &lt;/p&gt; element. 

&lt;p&gt;This frame_tag allows us to selectively replace the content of the form partial on form submission without writing any special Javascript. &lt;/p&gt;

&lt;p&gt;Now we’ll need a controller to handle submissions from this form.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g controller Comments
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Fill in the controller with the below content:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/comments_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CommentsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:project_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="vi"&gt;@comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;turbo_stream&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;turbo_stream: &lt;/span&gt;&lt;span class="n"&gt;turbo_stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s1"&gt;'comment_form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'comments/form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;comment: &lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'comments/form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;comment: &lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;turbo_stream&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;turbo_stream: &lt;/span&gt;&lt;span class="n"&gt;turbo_stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s1"&gt;'comment_form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'comments/form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;comment: &lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'comments/form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;comment: &lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;comment_params&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:comment&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;permit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Our comments controller create method is a fairly standard Rails controller with one twist: the create method responds to turbo_stream requests. &lt;/p&gt;

&lt;p&gt;When a turbo_stream request is sent to this endpoint, the controller responds with a turbo_stream response to replace the comment_form DOM element with the comments/form partial, both on a successful request and a failed request. Note that, as before, the "comment_form" id in our turbo_frame needs to match the target passed to the turbo_stream.replace method. &lt;/p&gt;

&lt;p&gt;The only difference between the failure and success responses is using the existing @comment on failed responses so that errors can be rendered. On success, we set the comment local variable for the form partial to a new comment to clear out the body field on the form.&lt;/p&gt;

&lt;p&gt;To test out the error path, you can update your Comment model to validate the presence of the body field.&lt;/p&gt;

&lt;p&gt;Next, before we can create comments, we need to add the appropriate route to the routes.rb file:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;

&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:projects&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:comments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[create]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Finally, let's display the comment form on the project show page:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- app/views/projects/show.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"notice"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;notice&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Name:&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s2"&gt;"comments/form"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;comment: &lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_stream_from&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:comments&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_comments"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;created_at: :desc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'Edit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edit_project_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt; |
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'Back'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;projects_path&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Refresh your project page after you update the view.&lt;/p&gt;

&lt;p&gt;If everything is set up correctly, you should see new comments added without a page turn. If you submit with the comment body left blank, you should see error messages added to the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Da29t68i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92hbzfvc7woykf85ba4b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Da29t68i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92hbzfvc7woykf85ba4b.gif" alt="A screen recording of a user typing in a comment in a text input and the comment being added to a list of comments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Combining Hotwire and Rails, with a sprinkling of Stimulus for client-side interactivity is a powerful way to build performant, scalable, developer-and-user friendly web applications.&lt;/p&gt;

&lt;p&gt;While single page applications and independent frontends built with the latest JavaScript framework have their place, if you’re a small team building standard SaaS applications, I encourage you to spend time learning about Hotwire-powered applications to keep your team productive and focused on solving problems for your users, not fighting with your tech stack.&lt;/p&gt;

&lt;p&gt;Helpful Hotwire resources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://hotwire.dev/"&gt;Hotwire intro video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://turbo.hotwire.dev/handbook/introduction"&gt;Turbo handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stimulus.hotwire.dev/handbook/introduction"&gt;Stimulus handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gorails.com/episodes/hotwire-rails"&gt;GoRails Hotwire introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hotwired/turbo-rails"&gt;turbo-rails source&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for reading! As always, get in touch if you have any questions or if I can be of any help.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>hotwire</category>
      <category>turbo</category>
    </item>
    <item>
      <title>AzureFunBytes Episode 48 - @Azure Arc Enabled Data Services with @sqldbawithbeard</title>
      <author>Jay Gordon</author>
      <pubDate>Thu, 24 Jun 2021 19:00:42 +0000</pubDate>
      <link>https://dev.to/azure/azurefunbytes-episode-48-azure-arc-enabled-data-services-with-sqldbawithbeard-3g28</link>
      <guid>https://dev.to/azure/azurefunbytes-episode-48-azure-arc-enabled-data-services-with-sqldbawithbeard-3g28</guid>
      <description>&lt;p&gt;AzureFunBytes is a weekly opportunity to learn more about the fundamentals and foundations that make up Azure. It's a chance for me to understand more about what people across the Azure organization do and how they do it. Every week we get together at 11 AM Pacific on &lt;a href="https://cda.ms/226"&gt;Microsoft LearnTV&lt;/a&gt; and learn more about Azure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJzmXQeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z7BxBMz1--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2xzw2g664tj31jij13t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJzmXQeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z7BxBMz1--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2xzw2g664tj31jij13t.gif" alt="AzureFunBytes animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We've discussed &lt;a href="https://cda.ms/2cd"&gt;Azure Arc&lt;/a&gt; before with people like &lt;a href="https://cda.ms/2cf"&gt;Thomas Maurer&lt;/a&gt;, but this time we'll focus on &lt;a href="https://cda.ms/2ch"&gt;Azure Arc-Enabled Data Services&lt;/a&gt;.  Azure Arc gives you a single platform to manage all of your data services no matter where they are.  You can manage your &lt;a href="https://cda.ms/2cj"&gt;Azure Arc enabled PostgreSQL Hyperscale&lt;/a&gt; and your &lt;a href="https://cda.ms/2ck"&gt;Azure Arc enabled SQL Managed Instance&lt;/a&gt; with &lt;a href="https://cda.ms/2cm"&gt;the Arc Data Controller&lt;/a&gt;.  With Azure Arc makes it possible to run your Azure data services in your datacenter, at the edge, and in public clouds using Kubernetes and the infrastructure of your choice. You're not just limited to Azure, you can enable your data from any public cloud you may feel like using.  If you need a place to get started learning, there's tons of great documentation and even some zero to hero training with &lt;a href="https://azurearcjumpstart.io/overview/"&gt;Azure Arc Jumpstart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This time we dip into the Microsoft MVP community and get the assistance of Data Platform, Cloud, and Datacenter MVP, &lt;a href="https://twitter.com/sqldbawithbeard"&gt;Rob Sewell&lt;/a&gt;.  Rob has done a number of presentations on how &lt;a href="https://cda.ms/2cr"&gt;Azure Arc can simplify connecting your data anywhere&lt;/a&gt; you can find online.  &lt;/p&gt;

&lt;p&gt;From Rob's bio on his blog, SQLDBAWithABeard:&lt;/p&gt;

&lt;p&gt;Rob &lt;strong&gt;was&lt;/strong&gt; a SQL Server DBA. Now he just helps people with Powershell, Azure, Automation, and Data.  He is a Cloud and Data Center MVP and a Data Platform MVP, co-leader of Data South West UK user group and PSConfEU organiser. &lt;a href="https://datasaturdays.com"&gt;One of the Admins for Data Saturdays&lt;/a&gt;. He is a proud supporter of the Data and Powershell communities. He has a fabulous beard!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Cw319V1qRRY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Our agenda includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Azure Arc-Enabled Data Services enables a single pane for your data services no matter where your data services are. &lt;/li&gt;
&lt;li&gt; Dashboards, metrics, logs built in both in Azure and wherever your cluster is&lt;/li&gt;
&lt;li&gt; Self provisioning and scaling using the tooling that you choose, Portal, ARM, Bicep, Az Cli, Azure Data Studio&lt;/li&gt;
&lt;li&gt; Its all Kubernetes so application and state (data) are taken care of for you. Data people find this part scary so it might be good for you to say that.&lt;/li&gt;
&lt;li&gt; Connected and disconnected options and use cases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So don't miss out on this session!  No need to fear the beard, let's hear what Rob has to teach us about connecting all of our data, anywhere!&lt;/p&gt;




&lt;p&gt;Learn about Azure fundamentals with me!&lt;/p&gt;

&lt;p&gt;Live stream is normally found on Twitch, YouTube, and LearnTV at 11 AM PT / 2 PM ET Thursday. You can also find the recordings here as well:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitch.tv/azurefunbytes"&gt;AzureFunBytes on Twitch&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aka.ms/jaygordononyoutube"&gt;AzureFunBytes on YouTube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UC-ikyViYMM69joIAv7dlMsA"&gt;Azure DevOps YouTube Channel&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/azurefunbytes"&gt;Follow AzureFunBytes on Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Useful Docs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cda.ms/219"&gt;Get $200 in free Azure Credit&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/243"&gt;Microsoft Learn: Introduction to Azure fundamentals&lt;/a&gt; &lt;br&gt;
&lt;a href="https://cda.ms/2cq"&gt;Microsoft Learn: Manage hybrid infrastructure with Azure Arc&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2cg"&gt;Azure Arc Overview&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2cf"&gt;AzureFunBytes Episode 42 with Thomas Maurer&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2ch"&gt;What are Azure Arc enabled data services (preview)?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2cj"&gt;What is Azure Arc enabled PostgreSQL Hyperscale?&lt;/a&gt; &lt;br&gt;
&lt;a href="https://cda.ms/2ck"&gt;Azure Arc enabled SQL Managed Instance Overview&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2cm"&gt;Create the Azure Arc data controller&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2cn"&gt;Azure Arc enabled data services&lt;/a&gt; &lt;br&gt;
&lt;a href="https://azurearcjumpstart.io/overview/"&gt;Azure Arc Jumpstart&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2cp"&gt;Azure Arc–enabled data services PREVIEW&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.apress.com/de/book/9781484267042"&gt;Azure Arc-Enabled Data Services Revealed&lt;/a&gt;&lt;/p&gt;

</description>
      <category>azure</category>
      <category>hybrid</category>
      <category>database</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Pushing and running Docker images</title>
      <author>Ujjwal Goyal</author>
      <pubDate>Thu, 24 Jun 2021 18:54:47 +0000</pubDate>
      <link>https://dev.to/importhuman/pushing-and-running-docker-images-3hmp</link>
      <guid>https://dev.to/importhuman/pushing-and-running-docker-images-3hmp</guid>
      <description>&lt;p&gt;&lt;em&gt;(This post assumes you have a DockerHub account.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the previous post, we built a Docker image. Now, we're going to "push", or upload it to DockerHub, and also see how to run it in a container!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dockerhub"&gt;
  &lt;/a&gt;
  DockerHub
&lt;/h2&gt;

&lt;p&gt;DockerHub is a library for container images. By pushing our image (with an appropriate tag), we can make our image available to others (or keep it private if we so require), or use the same image on different systems.&lt;/p&gt;

&lt;p&gt;Before we can push our image, we need to give a proper name to it. This name will include our DockerHub username, the image name, and a version tag. &lt;br&gt;
Consider a local image named "python-helloworld". We run the following command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker tag python-helloworld importhuman/python-helloworld:v1.0.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's break this down. With the &lt;code&gt;docker tag&lt;/code&gt; command, we take our local image, &lt;code&gt;python-helloworld&lt;/code&gt;, and give it the name &lt;code&gt;importhuman/python-helloworld:v1.0.0&lt;/code&gt;. Here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;importhuman&lt;/code&gt; is the name of my DockerHub account. This is needed to decide which account the image is pushed to. &lt;strong&gt;Replace this with your account name.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;python-helloworld&lt;/code&gt; is the image I want to push. This is also the name that will be given to the DockerHub repository. Replace this with the name you gave your image (see &lt;a href="https://dev.to/importhuman/writing-dockerfiles-for-python-application-ln6"&gt;previous post in this series&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;v1.0.0&lt;/code&gt; is the tag name. Tags are used to version images.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, if we run &lt;code&gt;docker images&lt;/code&gt;, we should see both our local image and the newly tagged image.&lt;/p&gt;

&lt;p&gt;(If you haven't logged in to DockerHub in the terminal, run &lt;code&gt;docker login&lt;/code&gt;, and input your username and password.)&lt;/p&gt;

&lt;p&gt;To push the image, we simply run&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker push importhuman/python-helloworld:v1.0.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and we should have a new repository on DockerHub with our newly tagged image!&lt;/p&gt;

&lt;p&gt;To pull this image to our system, we would simply run&lt;br&gt;
&lt;code&gt;docker pull importhuman/python-helloworld:v1.0.0&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-image"&gt;
  &lt;/a&gt;
  Running the image
&lt;/h2&gt;

&lt;p&gt;Let's see the command to run our image in a container, and then we'll break it down.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -d -p 8080:5000 importhuman/python-helloworld:v1.0.0&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-d&lt;/code&gt; runs the container in "detached mode". This essentially starts the container while leaving you free to run other commands in the terminal window. Without this flag (foreground mode), the terminal attaches to the process’s standard input, output, and standard error. (Source: &lt;a href="https://docs.docker.com/engine/reference/run/"&gt;Docker&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-p 8080:5000&lt;/code&gt; specifies that host port 8080 is connected to container port 5000. The container port here is 5000 as it is the default port exposed by Flask. Thus, if we open "localhost:8080" in a browser, we'll see the expected "Hello World!" output.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;importhuman/python-helloworld:v1.0.0&lt;/code&gt; is the image we want to run in a container (a local image can be used rather than the tagged version as well).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(For more information on the above explanation, or on running images in Docker containers, please &lt;a href="https://docs.docker.com/engine/reference/run/"&gt;see here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;To see more information about currently running containers, run&lt;br&gt;
&lt;code&gt;docker ps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To stop a running container, run the command&lt;br&gt;
&lt;code&gt;docker stop &amp;lt;container-id&amp;gt;&lt;/code&gt; &lt;br&gt;
OR&lt;br&gt;
&lt;code&gt;docker stop &amp;lt;container-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You now know how to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tag Docker images&lt;/li&gt;
&lt;li&gt;push and pull Docker images from DockerHub&lt;/li&gt;
&lt;li&gt;run Docker images in containers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please feel free to ask any questions you have in the comments or on &lt;a href="https://twitter.com/ImportHuman"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>tutorial</category>
      <category>python</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Pagination using Gorm scopes</title>
      <author>Rafael Firmino</author>
      <pubDate>Thu, 24 Jun 2021 18:53:29 +0000</pubDate>
      <link>https://dev.to/rafaelgfirmino/pagination-using-gorm-scopes-3k5f</link>
      <guid>https://dev.to/rafaelgfirmino/pagination-using-gorm-scopes-3k5f</guid>
      <description>&lt;p&gt;Gorm is a fantastic ORM writen in Go for gophers.&lt;br&gt;&lt;br&gt;
​ &lt;br&gt;
Today I will show you how to create pagination using Gorm Scopes.&lt;br&gt;&lt;br&gt;
​ &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scopes allow you to re-use commonly used logic, the shared logic needs to be defined as type&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first step is create a Pagination struct.&lt;br&gt;&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;//pkg.pagination    &lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;pkg&lt;/span&gt; 
&lt;span class="err"&gt;​&lt;/span&gt; 
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Pagination&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="n"&gt;Limit&lt;/span&gt;        &lt;span class="kt"&gt;int&lt;/span&gt;         &lt;span class="s"&gt;`json:"limit,omitempty;query:limit"`&lt;/span&gt;   
    &lt;span class="n"&gt;Page&lt;/span&gt;         &lt;span class="kt"&gt;int&lt;/span&gt;         &lt;span class="s"&gt;`json:"page,omitempty;query:page"`&lt;/span&gt; 
    &lt;span class="n"&gt;Sort&lt;/span&gt;         &lt;span class="kt"&gt;string&lt;/span&gt;      &lt;span class="s"&gt;`json:"sort,omitempty;query:sort"`&lt;/span&gt; 
    &lt;span class="n"&gt;TotalRows&lt;/span&gt;    &lt;span class="kt"&gt;int64&lt;/span&gt;       &lt;span class="s"&gt;`json:"total_rows"`&lt;/span&gt;    
    &lt;span class="n"&gt;TotalPages&lt;/span&gt;   &lt;span class="kt"&gt;int&lt;/span&gt;         &lt;span class="s"&gt;`json:"total_pages"`&lt;/span&gt;   
    &lt;span class="n"&gt;Rows&lt;/span&gt;         &lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="s"&gt;`json:"rows"`&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;   
&lt;span class="err"&gt;​&lt;/span&gt; 
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Pagination&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;GetOffset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetLimit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;   
&lt;span class="err"&gt;​&lt;/span&gt; 
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Pagination&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;GetLimit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Limit&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;    
    &lt;span class="p"&gt;}&lt;/span&gt;   
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Limit&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;   
&lt;span class="err"&gt;​&lt;/span&gt; 
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Pagination&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;GetPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;   
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;   
&lt;span class="err"&gt;​&lt;/span&gt; 
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Pagination&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;GetSort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sort&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Id desc"&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;   
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sort&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;​ &lt;br&gt;
Second step is create a Gorm Scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;paginate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;pagination&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pagination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;totalRows&lt;/span&gt; &lt;span class="kt"&gt;int64&lt;/span&gt; 
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;totalRows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
&lt;span class="err"&gt;​&lt;/span&gt; 
    &lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TotalRows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;totalRows&lt;/span&gt;    
    &lt;span class="n"&gt;totalPages&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totalRows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Limit&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;    
    &lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TotalPages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;totalPages&lt;/span&gt;  
&lt;span class="err"&gt;​&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetOffset&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetLimit&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetSort&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;   
    &lt;span class="p"&gt;}&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;​ &lt;br&gt;
The third step is use Gorm scope in your repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;CategoryGorm&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;   
&lt;span class="err"&gt;​&lt;/span&gt; 
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;CategoryGorm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pagination&lt;/span&gt; &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pagination&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pagination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;  
&lt;span class="err"&gt;​&lt;/span&gt; 
    &lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scopes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paginate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt;    

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;​ &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rest-example"&gt;
  &lt;/a&gt;
  Rest Example
&lt;/h1&gt;

&lt;p&gt;I won't talk about how you could implement your handles or access the repository, maybe another time.&lt;br&gt;&lt;br&gt;
​ &lt;br&gt;
The most important thing you need is to return the pkg.pagination for you client.&lt;br&gt;&lt;br&gt;
​ &lt;br&gt;
In a rest application, if I send&lt;br&gt;&lt;br&gt;
&lt;a href="http://localhost:3000/categories?limit=10&amp;amp;page=5"&gt;http://localhost:3000/categories?limit=10&amp;amp;page=5&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Then the output would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   
  &lt;/span&gt;&lt;span class="nl"&gt;"limit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  
  &lt;/span&gt;&lt;span class="nl"&gt;"page"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;    
  &lt;/span&gt;&lt;span class="nl"&gt;"sort"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Id desc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;    
  &lt;/span&gt;&lt;span class="nl"&gt;"total_rows"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="nl"&gt;"total_pages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="nl"&gt;"rows"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0acd5600-51b9-42e9-9fd0-ff422a6de1d1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
      &lt;/span&gt;&lt;span class="nl"&gt;"category"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"example41"&lt;/span&gt;&lt;span class="w"&gt;   
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>go</category>
      <category>gorm</category>
      <category>orm</category>
    </item>
    <item>
      <title>Docker deploy</title>
      <author>Matija Krajnik</author>
      <pubDate>Thu, 24 Jun 2021 18:44:54 +0000</pubDate>
      <link>https://dev.to/matijakrajnik/docker-deploy-1aa7</link>
      <guid>https://dev.to/matijakrajnik/docker-deploy-1aa7</guid>
      <description>&lt;p&gt;Our server is finished and almost ready for deploy, which will be done using Docker. Notice that i said it's &lt;em&gt;almost&lt;/em&gt; ready, so let's see what is missing. This whole time we used React development server which is listening on port 3000 and redirecting all requests to our backend on port 8080. That makes sense for development since it makes it easier to develop frontend and backend at the same time, as well as debugging frontend React app. But in production we don't need that and it makes much more sense to have only our backend server running and to serve static frontend files to client. So instead of starting React development server using &lt;code&gt;npm start&lt;/code&gt; command, we will build optimized frontend files for production, using command &lt;code&gt;npm run build&lt;/code&gt; inside of &lt;code&gt;assets/&lt;/code&gt; directory. This will create new directory &lt;code&gt;assets/build/&lt;/code&gt; along with all files needed for production. Now we also have to instruct our backend where to find these files to be able to serve them. That is simply done using command &lt;code&gt;router.Use(static.Serve("/", static.LocalFile("./assets/build", true)))&lt;/code&gt;. Of course, we want to do that only if server is started in &lt;code&gt;prod&lt;/code&gt; environment, so we need to slightly update few files.&lt;/p&gt;

&lt;p&gt;First, we will update &lt;code&gt;Parse()&lt;/code&gt; function in &lt;code&gt;internal/cli/cli.go&lt;/code&gt; to return environment value as a string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Usage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;usage&lt;/span&gt;
  &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;`Sets run environment. Possible values are "dev" and "prod"`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigureLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"prod"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetGinLogToFile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we will update &lt;code&gt;Config&lt;/code&gt; struct &lt;code&gt;NewConfig()&lt;/code&gt; function to be able to receive and set environment value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Host&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt;
  &lt;span class="n"&gt;Port&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt;
  &lt;span class="n"&gt;DbHost&lt;/span&gt;     &lt;span class="kt"&gt;string&lt;/span&gt;
  &lt;span class="n"&gt;DbPort&lt;/span&gt;     &lt;span class="kt"&gt;string&lt;/span&gt;
  &lt;span class="n"&gt;DbName&lt;/span&gt;     &lt;span class="kt"&gt;string&lt;/span&gt;
  &lt;span class="n"&gt;DbUser&lt;/span&gt;     &lt;span class="kt"&gt;string&lt;/span&gt;
  &lt;span class="n"&gt;DbPassword&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
  &lt;span class="n"&gt;JwtSecret&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt;
  &lt;span class="n"&gt;Env&lt;/span&gt;        &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;DbHost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;dbHost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;DbPort&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;dbPort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;DbName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;dbName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;DbUser&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;dbUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;DbPassword&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dbPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;JwtSecret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;jwtSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Env&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can update &lt;code&gt;internal/cli/main.go&lt;/code&gt; to receive env value form CLI, and send it to new configuration creation which will be used for starting server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next thing we have to do is update router to be able to receive configuration argument, and set it to serve static files if started in production mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;"net/http"&lt;/span&gt;
  &lt;span class="s"&gt;"rgb/internal/conf"&lt;/span&gt;
  &lt;span class="s"&gt;"rgb/internal/store"&lt;/span&gt;

  &lt;span class="s"&gt;"github.com/gin-contrib/static"&lt;/span&gt;
  &lt;span class="s"&gt;"github.com/gin-gonic/gin"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;setRouter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Engine&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;// Creates default gin router with Logger and Recovery middleware already attached&lt;/span&gt;
  &lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c"&gt;// Enables automatic redirection if the current route can't be matched but a&lt;/span&gt;
  &lt;span class="c"&gt;// handler for the path with (without) the trailing slash exists.&lt;/span&gt;
  &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RedirectTrailingSlash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

  &lt;span class="c"&gt;// Serve static files to frontend if server is started in production environment&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Env&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"prod"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./assets/build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c"&gt;// Create API route group&lt;/span&gt;
  &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customErrors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/signup"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{}),&lt;/span&gt; &lt;span class="n"&gt;signUp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/signin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{}),&lt;/span&gt; &lt;span class="n"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;authorized&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;authorized&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;authorized&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/posts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indexPosts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;authorized&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/posts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;{}),&lt;/span&gt; &lt;span class="n"&gt;createPost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;authorized&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PUT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/posts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;{}),&lt;/span&gt; &lt;span class="n"&gt;updatePost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;authorized&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DELETE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/posts/:id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deletePost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusNotFound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;router&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last line needing update is in &lt;code&gt;migrations/main.go&lt;/code&gt; file. Just change&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetDBConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewDBOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewConfig&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetDBConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewDBOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Actually, that's not last thing. You will also have to update all tests that use configuration and router setup, but that's entirely up to you and it's dependent on what tests you have implemented.&lt;/p&gt;

&lt;p&gt;Now everything is ready for Docker deploy. Docker is not in the scope of this guide, so i will not go into details about &lt;code&gt;Dockerfile, .dockerignore and docker-compose.yml&lt;/code&gt; contents.&lt;/p&gt;

&lt;p&gt;First we will create &lt;code&gt;.dockerignore&lt;/code&gt; file in project root directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# This file&lt;/span&gt;
.dockerignore

&lt;span class="c"&gt;# Git files&lt;/span&gt;
.git/
.gitignore

&lt;span class="c"&gt;# VS Code config dir&lt;/span&gt;
.vscode/

&lt;span class="c"&gt;# Docker configuration files&lt;/span&gt;
docker/

&lt;span class="c"&gt;# Assets dependencies and built files&lt;/span&gt;
assets/build/
assets/node_modules/

&lt;span class="c"&gt;# Log files&lt;/span&gt;
logs/

&lt;span class="c"&gt;# Built binary&lt;/span&gt;
cmd/rgb/rgb

&lt;span class="c"&gt;# ENV file&lt;/span&gt;
.env

&lt;span class="c"&gt;# Readme file&lt;/span&gt;
README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create new directory &lt;code&gt;docker/&lt;/code&gt; with two files, &lt;code&gt;Dockerfile and docker-compose.yml&lt;/code&gt;. Content of &lt;code&gt;Dockerfile&lt;/code&gt; will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:16 AS frontendBuilder&lt;/span&gt;

&lt;span class="c"&gt;# set app work dir&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /rgb&lt;/span&gt;

&lt;span class="c"&gt;# copy assets files to the container&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; assets/ .&lt;/span&gt;

&lt;span class="c"&gt;# set assets/ as work dir to build frontend static files&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /rgb/assets&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm run build

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; golang:1.16.3 AS backendBuilder&lt;/span&gt;

&lt;span class="c"&gt;# set app work dir&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /go/src/rgb&lt;/span&gt;

&lt;span class="c"&gt;# copy all files to the container&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="c"&gt;# build app executable&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nv"&gt;CGO_ENABLED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0 &lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;linux go build &lt;span class="nt"&gt;-o&lt;/span&gt; cmd/rgb/rgb cmd/rgb/main.go

&lt;span class="c"&gt;# build migrations executable&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nv"&gt;CGO_ENABLED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0 &lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;linux go build &lt;span class="nt"&gt;-o&lt;/span&gt; migrations/migrations migrations/&lt;span class="k"&gt;*&lt;/span&gt;.go

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; alpine:3.14&lt;/span&gt;

&lt;span class="c"&gt;# Create a group and user deploy&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;addgroup &lt;span class="nt"&gt;-S&lt;/span&gt; deploy &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser &lt;span class="nt"&gt;-S&lt;/span&gt; deploy &lt;span class="nt"&gt;-G&lt;/span&gt; deploy

&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="s"&gt; ROOT_DIR=/home/deploy/rgb&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; ${ROOT_DIR}&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;chown &lt;/span&gt;deploy:deploy &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ROOT_DIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# copy static assets file from frontend build&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=frontendBuilder --chown=deploy:deploy /rgb/build ./assets/build&lt;/span&gt;

&lt;span class="c"&gt;# copy app and migrations executables from backend builder&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=backendBuilder --chown=deploy:deploy /go/src/rgb/migrations/migrations ./migrations/&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=backendBuilder --chown=deploy:deploy /go/src/rgb/cmd/rgb/rgb .&lt;/span&gt;

&lt;span class="c"&gt;# set user deploy as current user&lt;/span&gt;
&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; deploy&lt;/span&gt;

&lt;span class="c"&gt;# start app&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "./rgb", "-env", "prod" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And content of &lt;code&gt;docker-compose.yml&lt;/code&gt; is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rgb&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kramat/rgb&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;../.env&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;RGB_DB_HOST&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;db&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;db&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;${RGB_PORT}:${RGB_PORT}&lt;/span&gt;
  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;POSTGRES_USER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${RGB_DB_USER}&lt;/span&gt;
      &lt;span class="na"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${RGB_DB_PASSWORD}&lt;/span&gt;
      &lt;span class="na"&gt;POSTGRES_DB&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${RGB_DB_NAME}&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;${RGB_DB_PORT}:${RGB_DB_PORT}&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;postgresql:/var/lib/postgresql/rgb&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;postgresql_data:/var/lib/postgresql/rgb/data&lt;/span&gt;
&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;postgresql&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
  &lt;span class="na"&gt;postgresql_data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All files required for Docker deploy are now ready, so let's see how to build Docker image and deploy it. First we will pull &lt;code&gt;postgres&lt;/code&gt; image from official Docker containers repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker pull postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next step is to build &lt;code&gt;rgb&lt;/code&gt; image. Inside of project root directory run (change &lt;code&gt;DOCKER_ID&lt;/code&gt; with your own docker ID):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;DOCKER_ID&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Dockerfile&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create &lt;code&gt;rgb&lt;/code&gt; and &lt;code&gt;db&lt;/code&gt; containers with resources, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;docker/
docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will start both containers, and you can check their status by running &lt;code&gt;docker ps&lt;/code&gt;. Finally, we need to run migrations. Open shell in &lt;code&gt;rgb&lt;/code&gt; container by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose run &lt;span class="nt"&gt;--rm&lt;/span&gt; rgb sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside of container we are able to run migrations same as before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;migrations/
./migrations init
./migrations up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we are finished. You can open &lt;code&gt;localhost:8080&lt;/code&gt; in your browser to check that everything is working as it should, which means you should be able to create account and add new post:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NvzTMfHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/al4dpxh2v8zpu2iyfwrx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NvzTMfHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/al4dpxh2v8zpu2iyfwrx.png" alt="Docker deploy finished"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was quite long for a simple web app, but we have completed this guide. Hopefully it was useful to some of you. If you have any questions, remarks, or you have found any issues, feel free to contact me in comments. Good luck to everyone and happy coding :)&lt;/p&gt;

</description>
      <category>go</category>
      <category>docker</category>
    </item>
  </channel>
</rss>
