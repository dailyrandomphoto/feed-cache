<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Code Smell 96 - My Objects</title>
      <author>Maxi Contieri</author>
      <pubDate>Mon, 25 Oct 2021 22:12:37 +0000</pubDate>
      <link>https://dev.to/mcsee/code-smell-96-my-objects-5cij</link>
      <guid>https://dev.to/mcsee/code-smell-96-my-objects-5cij</guid>
      <description>&lt;p&gt;&lt;em&gt;You don't own objects.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR: don't use &lt;em&gt;my&lt;/em&gt; as a name prefix.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#problems"&gt;
  &lt;/a&gt;
  Problems
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Lack of context&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bijection Fault&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#solutions"&gt;
  &lt;/a&gt;
  Solutions
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Remove &lt;em&gt;my&lt;/em&gt; prefix. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change to a role suggesting name.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h1&gt;

&lt;p&gt;Several old tutorials use the word 'my' as a lazy name. &lt;br&gt;
This is vague and lead to context mistakes.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#sample-code"&gt;
  &lt;/a&gt;
  Sample Code
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#wrong"&gt;
  &lt;/a&gt;
  Wrong
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;MainWindow&lt;/span&gt; &lt;span class="n"&gt;myWindow&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainWindow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;MainWindow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#right"&gt;
  &lt;/a&gt;
  Right
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;MainWindow&lt;/span&gt; &lt;span class="n"&gt;salesWindow&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainWindow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;MainWindow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*

Since window is instanciated, we are currently working
with a specialized window playing a special role

*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#detection"&gt;
  &lt;/a&gt;
  Detection
&lt;/h1&gt;

&lt;p&gt;[x] Automatic&lt;/p&gt;

&lt;p&gt;We can tell our linters and static checkers to search for this prefix and warn us.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#tags"&gt;
  &lt;/a&gt;
  Tags
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Naming&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Avoid using &lt;em&gt;my&lt;/em&gt;. Objects change according to the usage context.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#more-info"&gt;
  &lt;/a&gt;
  More Info
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/what-exactly-is-a-name-part-ii-rehab-20gd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What exactly is a name - Part II Rehab&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª May 23 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h1&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@bozu"&gt;Micha≈Ç Bo≈ºek&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/kid-toy"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Thinking about my experience of modifying code, I see that I spend much more time reading the existing code than I do writing new code. If I want to make my code cheap, therefore, I should make it easy to read.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Kent Beck&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/software-engineering-great-quotes-26ci" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Software Engineering Great Quotes&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª Dec 28 '20 „Éª 13 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#quotes&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#software&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;This article is part of the CodeSmell Series.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/how-to-find-the-stinky-parts-of-your-code-1dbc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Find the Stinky parts of your Code&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª May 21 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>oop</category>
      <category>programming</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>‚ö°Ô∏èCombining Serverless Framework &amp; AWS CDK</title>
      <author>Sebastian Bille</author>
      <pubDate>Mon, 25 Oct 2021 21:51:11 +0000</pubDate>
      <link>https://dev.to/aws-builders/combining-serverless-framework-aws-cdk-1dg0</link>
      <guid>https://dev.to/aws-builders/combining-serverless-framework-aws-cdk-1dg0</guid>
      <description>&lt;p&gt;Serverless Framework is a fantastic tool for defining and managing your Lambda functions. But let's face it; it's not very good at handling other types of resources and infrastructure. CDK is though. This post will take a look at how we can combine the two!&lt;/p&gt;




&lt;p&gt;Serverless has excellent utility for describing and managing Lambda functions, but as soon as you need basically any other type of infrastructure, you'll have to resort to raw CloudFormation. Using the CDK with its declarative and straightforward constructs to define infrastructure is more expressive and easy to understand once the infrastructure stack grows. What if we could use them together and utilize each of them for its respective strengths, and what it does best? Unfortunately, there's no native way to use the two tools together, like &lt;a href="https://aws.amazon.com/blogs/compute/better-together-aws-sam-and-aws-cdk/"&gt;there is for SAM&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Let's look at how we can work around that and whether or not it makes sense!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR - give me the &lt;a href="https://github.com/TastefulElk/sls-cdk-combined"&gt;code&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8F%97-setting-up-the-project"&gt;
  &lt;/a&gt;
  üèó Setting up the project
&lt;/h2&gt;

&lt;p&gt;Let's start by initializing a Typescript Serverless app. To keep things simple, we'll use a Yeoman generator to get us started with a project. Install it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; yo generator-sls-node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then, in an empty folder, run the generator with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yo sls-node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we'll be using CDK to manage our infrastructure, we'll want to manage CDK, its dependencies, and transpiling the infrastructure code separately from our actual application. Therefore, let's create a folder called &lt;code&gt;infrastructure&lt;/code&gt; in the root of our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;infrastructure
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, navigate to the created folder and initialize a CDK project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;infrastructure
npx cdk init &lt;span class="nt"&gt;--language&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now have a project with the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- infrastructure # Our CDK infrastructure
    ‚Ü≥ bin     # CDK executable
    ‚Ü≥ lib     # infrastructure stack definition
    ‚Ü≥ test    # infrastructure tests
- src                    # application code
- tests                  # application tests
- serverless.yml # Serverless config

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-our-app"&gt;
  &lt;/a&gt;
  üî® Building our app
&lt;/h2&gt;

&lt;p&gt;The app we're building will contain a Lambda function, exposed in a HTTP API, which will put an item on an SQS queue for another Lambda to finally process the item.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---dtJvVhb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uqdp7q58o0ikvgzw18z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---dtJvVhb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uqdp7q58o0ikvgzw18z.png" alt="architecture diagram"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let's start by adding an SQS queue to our CDK stack. To do that, we need to first add the &lt;code&gt;@aws-cdk/aws-sqs&lt;/code&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @aws-cdk/aws-sqs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I prefer Yarn over NPM, which is the default of the CDK init boilerplate. If you prefer to use Yarn too, remove the &lt;code&gt;package-lock.json&lt;/code&gt; so you don't get conflicting lock files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then add a queue to &lt;code&gt;infrastructure/lib/infrastructure-stack.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// infrastructure/lib/infrastructure-stack.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Queue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-sqs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;InfrastructureStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SQS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;queueName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sls-cdk-demo-queue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As discussed earlier, we want to use Serverless and CDK for what they do best respectively. That means our API and Lambda functions will be defined in our &lt;code&gt;serverless.yml&lt;/code&gt;, seeing as Serverless handles those very capably and brings lots of functionality to interact with them once deployed. They're also the resources most likely to change often, meaning they don't really belong in our more long-living infrastructure stack. &lt;/p&gt;

&lt;p&gt;For this simple demo use case, all we need to do to set up our API Gateway, Lambda function and to map the function to the &lt;code&gt;/todo&lt;/code&gt; path, is to add the following to our &lt;code&gt;serverless.yml&lt;/code&gt;, using the &lt;code&gt;events&lt;/code&gt; mapping:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# serverless.yml&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;createTodo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/createTodo.handler&lt;/span&gt;
    &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/todos&lt;/span&gt;
          &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;post&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the &lt;code&gt;createTodo&lt;/code&gt; function to send anything to our SQS buffer, it's going to need the URL of the queue. It's also going to need the queue's ARN to set up the necessary  &lt;code&gt;sqs:SendMessage&lt;/code&gt; IAM permission. However, since the SQS queue is not defined in the same CloudFormation stack as our Lambda function, we'll need to export those two properties from our CDK stack so that we can reference them in our Serverless stack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cross-stack-references"&gt;
  &lt;/a&gt;
  Cross Stack References
&lt;/h3&gt;

&lt;p&gt;CloudFormation stacks can export a set of properties, as "Outputs" which can then be referenced in other CloudFormation stacks. Conveniently, Serverless has built-in support to reference Outputs of other stacks, which means we can use this to easily transfer information from our CDK stack to our Serverless stack.&lt;/p&gt;

&lt;p&gt;In the CDK stack, we start by creating our output variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// infrastructure/lib/infrastructure-stack.ts&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CfnOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;queueUrl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueUrl&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CfnOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;queueArn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueArn&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, back in our &lt;code&gt;serverless.yml&lt;/code&gt;, we can reference those two variables with the &lt;code&gt;${cf:stackName.variableName}&lt;/code&gt; syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# serverless.yml&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws&lt;/span&gt;
  &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;eu-north-1&lt;/span&gt;
  &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;
  &lt;span class="na"&gt;iam&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Set up IAM permission for sending messages to the queue&lt;/span&gt;
    &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;statements&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
          &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sqs:SendMessage&lt;/span&gt;
          &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${cf:InfrastructureStack.queueArn}&lt;/span&gt;

&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;createTodo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/createTodo.handler&lt;/span&gt;
    &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/todos&lt;/span&gt;
          &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;post&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Set environment variable with the queue URL&lt;/span&gt;
      &lt;span class="na"&gt;QUEUE_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${cf:InfrastructureStack.queueUrl}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and while we're at it, lets also add the definition for our second Lambda, the queue processor, again by using the cross stack reference to the queue ARN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# serverless.yml&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;createTodo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;queueProcessor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/queueProcessor.handler&lt;/span&gt;
        &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;sqs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;arn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${cf:InfrastructureStack.queueArn}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should be all we need for the infrastructure, all that's left is writing the actual Lambda code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lambda-code"&gt;
  &lt;/a&gt;
  Lambda Code
&lt;/h3&gt;

&lt;p&gt;Our Lambda code is going to be very simple. The &lt;code&gt;createTodo&lt;/code&gt; handler, the one exposed in the API, will take the &lt;code&gt;body&lt;/code&gt; of the request and put it directly on the SQS queue. The &lt;code&gt;queueProcessor&lt;/code&gt; will then automatically consume the queue. Starting with the &lt;code&gt;createTodo&lt;/code&gt; function, add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/createTodo.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SQS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-sdk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SQS&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;QueueUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;QUEUE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;MessageBody&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then let's just pretend to do some processing of the item in the &lt;code&gt;queueProcessor.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/queueProcessor.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doing some heavy processing right now. I promise! Don&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;t come in!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, now all we need is to be able to deploy our app along with the infrastructure!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying"&gt;
  &lt;/a&gt;
  üöÄ Deploying
&lt;/h2&gt;

&lt;p&gt;Since our application will live in two separate CloudFormation stacks, we need to do two separate deployments. The Serverless stack will depend on our infrastructure stack, but never the other way around - meaning we should always deploy the infrastructure stack first.&lt;/p&gt;

&lt;p&gt;To be able to deploy our app in one step, rather than manually first having to navigate to the infrastructure folder, deploy it,  navigate back to the project root and then deploy our Serverless app, we can add a script to our root &lt;code&gt;package.json&lt;/code&gt; that does us for us in one swift motion:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"deploy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cd infrastructure &amp;amp;&amp;amp; yarn cdk deploy &amp;amp;&amp;amp; cd .. &amp;amp;&amp;amp; yarn sls deploy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also add a CDK wrapper script that lets us easily run any CDK command without having to navigate to the infrastructure folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cdk"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cd infrastructure &amp;amp;&amp;amp; yarn cdk"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;cdk&lt;/code&gt; script utilizes the fact that Yarn forwards arguments, and thus we can run, for example, &lt;code&gt;yarn cdk diff&lt;/code&gt; from the root of our app, even though CDK isn't actually in the root. Neat! üëµ&lt;/p&gt;

&lt;p&gt;What's even neater, though, is that we can now just run &lt;code&gt;yarn deploy&lt;/code&gt;. Since it's the first time we're deploying the app, it'll take a little longer than on subsequent deploys but after about half the time it takes refill your coffee, the app will be up and running! We can verify that it works by sending a &lt;code&gt;POST&lt;/code&gt; request to the API Gateway endpoint printed in the output, and by then looking at the logs of the final &lt;code&gt;queueProcessor&lt;/code&gt; lambda:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'Content-type: application/json'&lt;/span&gt; &lt;span class="nt"&gt;--data&lt;/span&gt; &lt;span class="s1"&gt;'{"text":"Hello, World!"}'&lt;/span&gt; https://abcdefghij.execute-api.eu-north-1.amazonaws.com/dev/todos

yarn serverless logs &lt;span class="nt"&gt;--function&lt;/span&gt; queueProcessor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;CDK is excellent at defining and making sense of complex infrastructure and resources. However it does come with quite a bit of overhead. The CDK project itself has dependencies that you'll need to manage, and, most importantly; the infrastructure code is, well, code, which you'll need to maintain, lint and test. On the other hand, being able to test it, is definitely also one of the strengths. It's also generally a good idea to &lt;a href="https://twitter.com/JefClaes/status/1450795830542229504"&gt;separate your more long-living infrastructure into a separate CloudFormation stack&lt;/a&gt;. It minimizes the risk of accidentally modifying, or even deleting, important stateful resources such as a DynamoDB table.&lt;/p&gt;

&lt;p&gt;There are ongoing projects that tries to bring CDK constructs natively right into Serverless via plugins, one example being &lt;a href="https://github.com/getlift/lift"&gt;Lift&lt;/a&gt;, and other frameworks that are built on top of the CDK, such as &lt;a href="https://serverless-stack.com/"&gt;Serverless Stack&lt;/a&gt;. Lift looks promising, but it doesn't yet support using custom constructs, and many organizations and projects have invested a lot into Serverless Framework and aren't ready to jump ship to an alternative like Serverless Stack.&lt;/p&gt;

&lt;p&gt;For smaller projects, or projects where the infrastructure and/or the interaction between the infrastructure isn't complex, using CDK and Serverless together is unlikely to be worth the overhead. For larger, more complex apps, though, where you might want to unit test your resources or just be able to describe them better than with CloudFormation, which quickly gets very messy - it might be worth considering!&lt;/p&gt;




&lt;p&gt;If you enjoyed this post and want to see more, follow me on Twitter at &lt;a href="https://twitter.com/TastefulElk"&gt;@TastefulElk&lt;/a&gt; where I frequently write about serverless tech, AWS, and developer productivity!&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>cloud</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Azure SQL Awesome List</title>
      <author>Davide Mauri</author>
      <pubDate>Mon, 25 Oct 2021 21:33:29 +0000</pubDate>
      <link>https://dev.to/azure/azure-sql-awesome-list-4pd5</link>
      <guid>https://dev.to/azure/azure-sql-awesome-list-4pd5</guid>
      <description>&lt;p&gt;It's been a while now I've been collecting links to resources I found useful for a developer working with Azure SQL, and today I realized that the list I've created become quite big and nice over the last months.&lt;/p&gt;

&lt;p&gt;I so decided to turn it into an official Awesome List, which, by GitHub definition is &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An awesome list is a list of awesome things curated by the community. There are awesome lists about everything from CLI applications to fantasy books. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here you go:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/yorek"&gt;
        yorek
      &lt;/a&gt; / &lt;a href="https://github.com/yorek/awesome-azure-sql"&gt;
        awesome-azure-sql
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An awesome list of Azure SQL samples for Developers of any Language and Platform
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;as of now it contains a list of more than 50 curated links. I'll keep the list updated, and I really count on community's help here. If you have something you think it is worth and valuable to add to the list, please just submit a PR.&lt;/p&gt;

&lt;p&gt;The list is focused on Azure SQL and developers, and contains links to resources for every language, platform, tool and needs.&lt;/p&gt;

&lt;p&gt;Hope this is helpful to you as it has been to me!&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://www.pexels.com/@belart84?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Artem Beliaikin&lt;/a&gt; from &lt;a href="https://www.pexels.com/photo/come-in-we-re-awesome-sign-1051747/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Pexels&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>cloud</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to Ace Data Science Interview by Working on Portfolio Projects</title>
      <author>Abid</author>
      <pubDate>Mon, 25 Oct 2021 20:52:47 +0000</pubDate>
      <link>https://dev.to/kingabzpro/how-to-ace-data-science-interview-by-working-on-portfolio-projects-4cd</link>
      <guid>https://dev.to/kingabzpro/how-to-ace-data-science-interview-by-working-on-portfolio-projects-4cd</guid>
      <description>&lt;p&gt;Recruiters of Data Science professionals around the world focus on portfolio projects rather than resumes and LinkedIn profiles. So, learning early how to contribute and share your work on GitHub, Deepnote, and Kaggle can help you perform your best during data science interviews.&lt;br&gt;
&lt;a href="https://www.kdnuggets.com/2021/10/ace-data-science-interview-portfolio-projects.html"&gt;How to Ace Data Science Interview by Working on Portfolio Projects&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>datascience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 5 smart contract programming languages for blockchain</title>
      <author>Matt Angelosanto</author>
      <pubDate>Mon, 25 Oct 2021 20:52:21 +0000</pubDate>
      <link>https://dev.to/logrocket/top-5-smart-contract-programming-languages-for-blockchain-4li6</link>
      <guid>https://dev.to/logrocket/top-5-smart-contract-programming-languages-for-blockchain-4li6</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/ezesunday/"&gt;Eze Sunday&lt;/a&gt;&lt;/strong&gt; ‚úèÔ∏è&lt;/p&gt;

&lt;p&gt;Everyone is talking about smart contracts, blockchain, decentralized finance, and cryptocurrencies. However, without developers, none of these would exist, so the demand for blockchain developers continues to surge.&lt;/p&gt;

&lt;p&gt;Many programming languages allow you to write smart contracts. In this article, we‚Äôll explore the top smart contract programming languages to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-smart-contracts"&gt;
  &lt;/a&gt;
  What are smart contracts?
&lt;/h2&gt;

&lt;p&gt;A smart contract is a computer program that automatically executes actions according to the terms of the contract without intermediaries. For example, if you want to purchase a piece of land using a smart contract mechanism, your land ownership documents will be sent to you immediately after your payment is completed. You don‚Äôt need to trust a third-party site to transfer the ownership after making payments.&lt;/p&gt;

&lt;p&gt;Also, you can see smart contracts in action in decentralized exchanges (DEX), like &lt;a href="https://pancakeswap.finance/"&gt;PancakeSwap&lt;/a&gt;, which allows you to exchange your tokens for another token. If you have BNB, you can easily exchange it for Ethereum without having to talk to customer support.&lt;/p&gt;

&lt;p&gt;Smart contract programming languages allow you to write programs that implement smart contracts on the blockchain.&lt;/p&gt;

&lt;p&gt;So, what are the top smart contract languages, you asked? Let‚Äôs get into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-solidity"&gt;
  &lt;/a&gt;
  1. Solidity
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/ethereum/solidity"&gt;Solidity&lt;/a&gt; is an object-oriented and statically-typed programming language that was designed to allow developers to create smart contracts.&lt;/p&gt;

&lt;p&gt;Solidity is designed based on existing programming languages like &lt;a href="https://en.m.wikipedia.org/wiki/C%2B%2B"&gt;C++&lt;/a&gt;, &lt;a href="https://en.m.wikipedia.org/wiki/Python_(programming_language)"&gt;Python&lt;/a&gt;, and JavaScript, so it uses similar language structures found in these languages, most likely to make it easy for developer adoption.&lt;/p&gt;

&lt;p&gt;Here is an example of a smart contract with Solidity:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;MyContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"My value"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are a JavaScript or C++ developer, this will look familiar to you.&lt;/p&gt;

&lt;p&gt;Solidity, being the first smart contract programming language, has wide market adoption and is being used to build many decentralized applications. It was developed to write smart contracts on Ethereum, and, just like Java and &lt;a href="https://docs.oracle.com/en/java/javase/17/vm/java-virtual-machine-technology-overview.html"&gt;Java Virtual Machine (JVM)&lt;/a&gt;, Solidity runs on the &lt;a href="https://ethereum.org/en/developers/docs/evm/"&gt;Ethereum Virtual Machine (EVM)&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-programming-smart-contracts-with-solidity"&gt;
  &lt;/a&gt;
  Advantages of programming smart contracts with Solidity
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Solidity has a large, accessible community. Because Solidity was the first smart contract programming language and was developed solely for smart contract programming on the Ethereum network, it has gained wide community support, making it easy for new developers to get help when there are stuck&lt;/li&gt;
&lt;li&gt;  Solidity is Turing-complete, so it‚Äôs not limited to running just a handful of algorithms ‚Äî it can be used to compute all computable functions&lt;/li&gt;
&lt;li&gt;  Solidity offers concepts that are available in most modern programming languages. It has functions, string manipulation, classes, variables, arithmetic operations, etc. In addition, Solidity supports mapping data structures, which act as hash tables and consist of key types and key value pairs&lt;/li&gt;
&lt;li&gt;  Solidity doesn‚Äôt have a steep learning curve if you already know how to program with popular programming languages like Python, C++, and JavaScript, as most of its syntax was borrowed from these languages&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-of-programming-smart-contracts-with-solidity"&gt;
  &lt;/a&gt;
  Disadvantages of programming smart contracts with solidity
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Solidity is a newer language, and even though the community has been helping with library development and its tools, there‚Äôs still so much to be done in the language that you‚Äôll have to completely implement yourself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples of blockchains using Solidity include &lt;a href="https://tendermint.com/"&gt;Tendermint&lt;/a&gt;, &lt;a href="https://docs.binance.org/smart-chain/wallet.html"&gt;Binance Smart Chain&lt;/a&gt;, &lt;a href="http://ethereumclassic.org/"&gt;Ethereum Classic&lt;/a&gt;, &lt;a href="http://tron.network/"&gt;Tron&lt;/a&gt;, &lt;a href="https://www.avax.network/"&gt;Avalanche&lt;/a&gt;, &lt;a href="http://www.counterparty.io/"&gt;CounterParty&lt;/a&gt;, and &lt;a href="https://hedera.com/"&gt;Hedera&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-rust"&gt;
  &lt;/a&gt;
  2. Rust
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://insights.stackoverflow.com/survey/2020#most-loved-dreaded-and-wanted"&gt;Stack Overflow surveys&lt;/a&gt;, &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is one of the most beloved programming languages for five years in a row.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sCfdNvPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/stack-overflow-survey.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sCfdNvPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/stack-overflow-survey.png" alt="Stack Overflow Developer Survey"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rust is a low-level statically-typed programming language that is fast and memory-efficient ‚Äî in an industry where scalability is not negotiable, Rust, as a language, finds a home. Rust is a relatively new programming language with enormous power while retaining simplicity, memory efficiency, reliability, and complexity combined.&lt;/p&gt;

&lt;p&gt;By default, Rust assumes best design and development practices and also gives you a chance to alter them if you choose to. Rust has no garbage collector, which means there would be no surprise incident (caused by the language) during the runtime.&lt;/p&gt;

&lt;p&gt;All of these factors make Rust a great choice for programming blockchain. It‚Äôs not surprising that one of the fastest blockchains, Solana, is built with Rust at its core.&lt;/p&gt;

&lt;p&gt;Rust's compiler has a color-coded output and an even more detailed error output to help with debugging.&lt;/p&gt;

&lt;p&gt;In many cases, Rust shows the cause of an error and where to find it by highlighting relevant code, accompanied by an explanation. Also, in some cases, it provides a fix for the error.&lt;/p&gt;

&lt;p&gt;Here is an example smart contract using Rust:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;borsh&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;BorshDeserialize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BorshSerialize&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;near_sdk&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;near_bindgen&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;near_sdk&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;UnorderedMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[global_allocator]&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;ALLOC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;wee_alloc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;WeeAlloc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;wee_alloc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;WeeAlloc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;INIT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;StatusMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UnorderedMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nd"&gt;#[near_bindgen]&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;StatusMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;set_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;account_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;env&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;signer_account_id&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.records&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;account_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;account_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.records&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;account_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rust contains some object-oriented features; you can create structs and data. But unlike other object-oriented languages, it does not exhibit inheritance.&lt;/p&gt;

&lt;p&gt;Smart contracts blockchain using Rust include &lt;a href="https://coinsem.com/solana-all-you-need-to-know/?amp=1"&gt;Solana&lt;/a&gt;, &lt;a href="https://polkadot.network/"&gt;Polkadot&lt;/a&gt;, and &lt;a href="https://near.org/"&gt;Near Blockchain&lt;/a&gt;. You can find many blockchain projects built with Rust in &lt;a href="https://github.com/rust-in-blockchain/awesome-blockchain-rust"&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-programming-smart-contracts-with-rust"&gt;
  &lt;/a&gt;
  Advantages of programming smart contracts with Rust
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Because Rust is a low-level programming language and is designed for efficiency, you can build decentralized applications with high throughput&lt;/li&gt;
&lt;li&gt;  Rust immutability allows you to write predictable programs, which is what is needed for the type of applications built on the blockchain&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-of-programming-smart-contracts-with-rust"&gt;
  &lt;/a&gt;
  Disadvantages of programming smart contracts with Rust
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Rust is a new programming language with some new concepts. It might take some time to get used to working with it, especially if you are new to programming&lt;/li&gt;
&lt;li&gt;  There are limited libraries for almost everything compared to other languages like Python and JavaScript&lt;/li&gt;
&lt;li&gt;  It‚Äôs verbose. With Rust, you‚Äôll have to state every program construct explicitly, meaning you‚Äôll write more code than you would in languages like JavaScript and Python&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-javascript"&gt;
  &lt;/a&gt;
  3. JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript is a general-purpose programming language, and it‚Äôs found a place in the blockchain space. Because JavaScript is an entry-level language, most blockchains tend to create a JavaScript wrapper or library to allow developers to easily jump into the ecosystem and start building amazing products as soon as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hyperledger/fabric-chaincode-node"&gt;Hyperledger Fabric&lt;/a&gt; is a blockchain that allows you to build a smart contract with a few programming languages, including JavaScript (Node.js).&lt;/p&gt;

&lt;p&gt;Here is an &lt;a href="https://hyperledger.github.io/fabric-chaincode-node/main/api/"&gt;example of what a smart contract&lt;/a&gt; looks like in HyperLedger Fabric:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Contract&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fabric-contract-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;util&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * A program to support updating values in a smart contract
 */&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UpdateSmartContractValue&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Contract&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UpdateSmartContractValue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;transactionA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;transactionB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//  .....&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;UpdateSmartContractValue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The community built &lt;a href="https://web3js.readthedocs.io/en/v1.5.2/"&gt;web3.js&lt;/a&gt;, a collection of libraries that allows you to interact with Ethereum smart contracts using HTTP, WebSocket, or IPC.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://coinsem.com/solana-all-you-need-to-know/"&gt;Solana Foundation&lt;/a&gt;¬†also built JavaScript wrappers around Solana Rust programs that allow JavaScript developers to start building Dapps on the blockchain as soon as possible.&lt;/p&gt;

&lt;p&gt;Several tools have been built with JavaScript to help with blockchain development, but not for the core of the blockchain, due to its &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"&gt;weak type checking&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-programming-smart-contracts-with-javascript"&gt;
  &lt;/a&gt;
  Advantages of programming smart contracts with JavaScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  It‚Äôs a popular and mature programming language with plenty of community support&lt;/li&gt;
&lt;li&gt;  You‚Äôll enjoy a faster development time compared to other languages, especially newer ones&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-of-programming-smart-contracts-with-javascript"&gt;
  &lt;/a&gt;
  Disadvantages of programming smart contracts with JavaScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Dynamic typing: for mission-critical applications like smart contracts, type safety is an important feature. JavaScript implements dynamic type safety when most developers prefer to use a statically typed language for applications that are built on the blockchain&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-vyper"&gt;
  &lt;/a&gt;
  4. Vyper
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://vyper.readthedocs.io/en/v0.1.0-beta.12/testing-contracts.html"&gt;Vyper&lt;/a&gt; is a contract-oriented Python-like programming language that targets the &lt;a href="https://ethereum.org/en/developers/docs/evm/"&gt;Ethereum Virtual Machine (EVM)&lt;/a&gt;. It has contract-specific features, such as event notifiers for listeners, custom global variables, and global constants.&lt;/p&gt;

&lt;p&gt;Vyper was built to address the security issues present in Solidity. It was developed to complement Solidity, not replace it.&lt;/p&gt;

&lt;p&gt;Vyper deliberately has fewer features than Solidity to make contracts more secure and easier to audit, and, as a result, it does not support modifiers, inheritance, inline assembly, function and operator overloading, recursive calling, infinite-length loops, and binary fixed points.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Building secure smart contracts is possible and natural with Vyper, as they are less prone to attacks&lt;/li&gt;
&lt;li&gt;  Vyper code is human-readable. For Vyper, simplicity for the reader is more important than simplicity for the writer&lt;/li&gt;
&lt;li&gt;  A striking feature of Vyper is the ability to compute a precise upper limit for gas consumption related to a specific Vyper function call&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Vyper has limited support for pure functions, hence anything marked &lt;code&gt;constant&lt;/code&gt; is not allowed to change state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have seen or worked with Python code, then you‚Äôll almost be able to write &lt;a href="https://vyper.readthedocs.io/en/v0.1.0-beta.12/testing-contracts.html"&gt;Vyper code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example from the &lt;a href="https://vyper.readthedocs.io/en/stable/"&gt;docs&lt;/a&gt;, just to give you a feel of it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class VyperContract:
    """
    An alternative Contract Factory which invokes all methods as `call()`,
    unless you add a keyword argument. The keyword argument assigns the prep method.
    This call
    &amp;gt; contract.withdraw(amount, transact={'from': eth.accounts[1], 'gas': 100000, ...})
    is equivalent to this call in the classic contract:
    &amp;gt; contract.functions.withdraw(amount).transact({'from': eth.accounts[1], 'gas': 100000, ...})
    """

    def __init__(self, classic_contract, method_class=VyperMethod):
        classic_contract._return_data_normalizers += CONCISE_NORMALIZERS
        self._classic_contract = classic_contract
        self.address = self._classic_contract.address
        protected_fn_names = [fn for fn in dir(self) if not fn.endswith('__')]
        for fn_name in self._classic_contract.functions:
            # Override namespace collisions
            if fn_name in protected_fn_names:
                _concise_method = mk_collision_prop(fn_name)
            else:
                _classic_method = getattr(
                    self._classic_contract.functions,
                    fn_name)
                _concise_method = method_class(
                    _classic_method,
                    self._classic_contract._return_data_normalizers
                )
            setattr(self, fn_name, _concise_method)

    @classmethod
    def factory(cls, *args, **kwargs):
        return compose(cls, Contract.factory(*args, **kwargs))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-yul"&gt;
  &lt;/a&gt;
  5. Yul
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.soliditylang.org/en/v0.5.3/yul.html"&gt;Yul&lt;/a&gt; is an intermediate programming language that is compiled to bytecode for addressing the needs of different backends. The Solidity compiler has an experimental implementation that uses Yul as an intermediate language. Yul is used in stand-alone mode and for inline assembly inside Solidity.&lt;/p&gt;

&lt;p&gt;Yul bears planned support for EVM and &lt;a href="https://github.com/ewasm"&gt;ewasm&lt;/a&gt; (Ethereum flavored WebAssembly). It is designed to be a usable common denominator of both platforms.&lt;/p&gt;

&lt;p&gt;Yul is a great target for high-level optimization stages that can benefit both EVM and ewasm platforms equally.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-to-using-yul"&gt;
  &lt;/a&gt;
  Advantages to using Yul
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Readability: programs written in Yul are readable even if the code is generated by a compiler from Solidity. Yul offers high-level constructs such as loops, function calls, and if and switch statements&lt;/li&gt;
&lt;li&gt;  Yul is simple to use, thanks to the translation of code from Yul code to bytecode&lt;/li&gt;
&lt;li&gt;  Yul uses a simple and flexible language to create contracts and is beginner-friendly&lt;/li&gt;
&lt;li&gt;  Yul is statically typed to avoid confusion on concepts like values and references. It has a default type that can always be omitted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example of what Yul code looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;object "SmartContract" {
  code {
    // Smart contract constructor
    datacopy(0, dataoffset("Runtime"), datasize("Runtime"))
    return(0, datasize("Runtime"))
  }
  object "Runtime" {
    code {
       // Runtime code
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most Ethereum-based projects most likely already use Yul.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-of-using-yul"&gt;
  &lt;/a&gt;
  Disadvantages of using Yul
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Because Yul needs to be compiled to bytecode, it requires additional time to complete the entire compilation process, thus making it time-consuming during development&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Which programming language from the above list you should use is dependent on the blockchain you want to work on. For Ethereum blockchain, for example, Solidity is the top choice for most developers.&lt;/p&gt;

&lt;p&gt;Of course, we expect more conventional language support and more blockchain languages to come up, as it‚Äôs still an emerging space.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-full-visibility-into-your-web-apps"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt;: Full visibility into your web apps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and &lt;a class="mentioned-user" href="https://dev.to/ngrx"&gt;@ngrx&lt;/a&gt;
/store.&lt;/p&gt;

&lt;p&gt;In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;Try it for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>discuss</category>
      <category>performance</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Java Notes #1</title>
      <author>DH Kim</author>
      <pubDate>Mon, 25 Oct 2021 20:51:51 +0000</pubDate>
      <link>https://dev.to/icncsx/java-271p</link>
      <guid>https://dev.to/icncsx/java-271p</guid>
      <description>&lt;p&gt;I learned Java almost 6 years ago when I was in university, and since then I have used it sparingly at work. Today I am starting a series where I chronicle my journey re-learning Java, taking extensive notes and summarizing them to share with you all.&lt;/p&gt;

&lt;p&gt;Here is my first note that will start the series:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Java is platform independent, meaning that you can write a program once, and as long as your host machine has JVM, it will just run - barring rare edge cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every class (in Java everything is inside a class) is compiled into a separate Java bytecode file that has the same name as the class but ends with the &lt;code&gt;.class&lt;/code&gt; extension instead of the &lt;code&gt;.java&lt;/code&gt; extension.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every Java program is a set of class definitions. To run a Java program, it must have a &lt;code&gt;main method&lt;/code&gt;, which represents the entry point where the program starts when it is executed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To compile a Java source-code file, you can use the &lt;code&gt;javac&lt;/code&gt; command. And to run a Java class, you use the &lt;code&gt;java&lt;/code&gt; command. More typically though, you will use some kind of IDE which has shortcuts and buttons to do this for you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There can only be one public top-level class per &lt;code&gt;.java&lt;/code&gt; file, and public top-level classes must have the same name as the source file.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Build Strong Data Science Portfolio as a Beginner</title>
      <author>Abid</author>
      <pubDate>Mon, 25 Oct 2021 20:49:27 +0000</pubDate>
      <link>https://dev.to/kingabzpro/how-to-build-strong-data-science-portfolio-as-a-beginner-5aec</link>
      <guid>https://dev.to/kingabzpro/how-to-build-strong-data-science-portfolio-as-a-beginner-5aec</guid>
      <description>&lt;p&gt;After learning the basics of data science, you can start to work on real-world problems. But how do you showcase your work? In this article, we are going to learn a unique way to create a data science portfolio.&lt;br&gt;
&lt;a href="https://www.kdnuggets.com/2021/10/strong-data-science-portfolio-as-beginner.html#.YXcXINQEoG8.link"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DUEx5HG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.kdnuggets.com/wp-content/uploads/strong-data-science-portfolio-as-beginner.jpg" alt="blog"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>career</category>
      <category>github</category>
    </item>
    <item>
      <title>O que √© React JS e como come√ßar a utilizar?</title>
      <author>Vin√≠cius Neto</author>
      <pubDate>Mon, 25 Oct 2021 20:10:32 +0000</pubDate>
      <link>https://dev.to/viunow/o-que-e-react-js-e-como-comecar-a-utilizar-23hb</link>
      <guid>https://dev.to/viunow/o-que-e-react-js-e-como-comecar-a-utilizar-23hb</guid>
      <description>&lt;p&gt;Se voc√™ j√° acessou ou for acessar agora a p√°gina oficial do React, a descri√ß√£o dele √©: Uma biblioteca JavaScript para criar interfaces de usu√°rio!&lt;/p&gt;

&lt;p&gt;O React foi desenvolvido pelo Facebook e lan√ßado no ano de 2013,  atualmente ele √© mantido pelo pr√≥prio Facebook, Instagram, demais empresas e pela comunidade de desenvolvedores individuais. O React √© amplamente utilizado para construir as solu√ß√µes de grandes empresas como Netflix, Airbnb, entre outras.&lt;/p&gt;

&lt;p&gt;O surgimento do React dentro do Facebook se deu pelo objetivo de otimizar a atualiza√ß√£o das atividades simult√¢neas no feed da rede, seja o chat, status, posts, entre outros.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#como-funciona-o-react"&gt;
  &lt;/a&gt;
  Como funciona o React?
&lt;/h1&gt;

&lt;p&gt;O React, sendo uma biblioteca front-end, tem como objetivo facilitar a conex√£o das partes, ou elementos de uma p√°gina, seu funcionamento se d√° pelo que √© chamado de &lt;strong&gt;componentes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mas o que s√£o esses componentes?&lt;/strong&gt;&lt;br&gt;
Imaginemos uma p√°gina web muito simples, como um formul√°rio com cinco inputs para o o usu√°rio digitar e no final um bot√£o para enviar os dados preenchidos.&lt;/p&gt;

&lt;p&gt;Note que nessa p√°gina, existem os cinco inputs para digita√ß√£o e um bot√£o, no HTML convencional o desenvolvedor criaria esses cinco inputs e o bot√£o, totalizando 6 elementos na nossa p√°gina.&lt;/p&gt;

&lt;p&gt;Se por algum motivo, precisar ser adicionado mais cinco inputs e um novo bot√£o, o desenvolvedor teria de criar esses elementos adicionais na p√°gina e assim totalizando 10 inputs e mais o bot√£o, ficando com 12 elementos.&lt;/p&gt;

&lt;p&gt;Agora no React, essa mesma abordagem seria um pouco mais simples, como tratamos os elementos como componentes, j√° podemos presumir que um input pode ser um componente, assim como um bot√£o, ent√£o podemos fazer a cria√ß√£o de somente um input e um bot√£o como componentes e utilizar quantas vezes quisermos, se for preciso adicionar centenas de bot√µes (por exemplo) s√≥ √© necess√°rio um componente bot√£o e na nossa p√°gina fazer o uso desse componente no HTML.&lt;/p&gt;

&lt;p&gt;Aqui uma imagem para ilustrar essa ideia de componente:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TCKZksnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrkguh20x21ljmcgk17v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TCKZksnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrkguh20x21ljmcgk17v.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note que temos somente 4 componentes, mas no desenho ao lado, foi poss√≠vel adicionar eles quantas vezes forem necess√°rias. E isso d√° ao desenvolvimento uma organiza√ß√£o muito maior do layout. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#como-utilizar-o-react"&gt;
  &lt;/a&gt;
  Como utilizar o React?
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;[Passo 1 - Node.js]&lt;/strong&gt;&lt;br&gt;
Presumo que voc√™ tenha algum conhecimento de React nesse momento. Primeiro de tudo, voc√™ deve instalar o Node.js, voc√™ pode baixar a vers√£o para o seu sistema operacional atrav√©s desse link: &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ap√≥s fazer o download e instala√ß√£o do Node.js, voc√™ pode conferir se o mesmo foi instalado corretamente abrindo um terminal ou cmd e digitar o seguinte comando: &lt;code&gt;node --version&lt;/code&gt;. na linha abaixo deve aparecer qual a vers√£o do node foi instalado, caso n√£o apare√ßa a vers√£o, voc√™ deve ter instalado incorretamente e sugiro que repita este passo. Se voc√™ visualizou a vers√£o, vamos para o pr√≥ximo passo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Passo 2 - Editor de texto]&lt;/strong&gt;&lt;br&gt;
Voc√™ pode utilizar o editor que preferir, eu particularmente utilizo o VSCode, caso n√£o tenha e queira utilizar, voc√™ pode baixar atrav√©s desse link: &lt;a href="https://code.visualstudio.com/download"&gt;vscode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ap√≥s a instala√ß√£o, abra o seu vscode. Voc√™ deve criar uma pasta para a aplica√ß√£o que vamos desenvolver, ent√£o fa√ßa onde voc√™ preferir. Depois de criar a pasta voc√™ deve abrir ela no vscode, note que ap√≥s abrir, n√£o h√° nada dentro, mas vamos criar no pr√≥ximo passo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Passo 3 - Criando um React App]&lt;/strong&gt;&lt;br&gt;
Com a pasta do projeto aberta no vscode, abra o terminal do vscode. Mas antes vou explicar a diferen√ßa entre os dois comandos que podemos utilizar para criar um projeto em React.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npx create-react-app meu-app&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Com este comando acima, dentro da pasta que voc√™ criou para o projeto, vai ser criada mais uma pasta chamada &lt;code&gt;meu-app&lt;/code&gt;, pois este √∫ltimo comando √© para criar uma pasta com esse nome, ent√£o se voc√™ est√° na pasta 'projeto-react' e usa esse comando acima, dentro da sua pasta 'projeto-react' vai ser criada a pasta 'meu-app', ficando dessa maneira: desktop/react/projeto-react/meu-app&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npx create-react-app .&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;J√° com esse comando, note que ao inv√©s de ter o nome da nossa pasta do projeto, tem um ponto '.', isso quer dizer que ao rodar o comando, todos os arquivos React ser√£o inseridos dentro da pasta que voc√™ est√°, ent√£o ficaria a seguinte estrutura: desktop/react/projeto-react (e dentro dessa pasta ficar√° o seus arquivos do projeto).&lt;/p&gt;

&lt;p&gt;Voc√™ pode escolher qualquer um deles, eu particularmente crio uma pasta para o projeto, abro essa pasta no vscode e utilizo o segundo comando, &lt;code&gt;npx create-react-app .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Agora depois dessas explica√ß√µes, crie o seu projeto React.&lt;/p&gt;

&lt;p&gt;Quando terminar de baixar todos os arquivos, ir√° aparecer uma mensagem no terminal informando que o processo foi conclu√≠do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Passo 4 - Executando o seu projeto React]&lt;/strong&gt;&lt;br&gt;
Para executar o projeto, √© bem f√°cil, no seu terminal, digite o comando &lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Uma janela ser√° aberta automaticamente no seu navegador com o projeto React sendo executado! Parab√©ns, voc√™ criou o seu primeiro projeto em React!&lt;/p&gt;

&lt;p&gt;Nos pr√≥ximos artigos, iremos continuar a cria√ß√£o do nosso projeto iniciado aqui! &lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The 4 October Frontend tips about a11y and UX</title>
      <author>Stas Melnikov</author>
      <pubDate>Mon, 25 Oct 2021 20:06:51 +0000</pubDate>
      <link>https://dev.to/melnik909/the-4-october-frontend-tips-about-a11y-and-ux-3763</link>
      <guid>https://dev.to/melnik909/the-4-october-frontend-tips-about-a11y-and-ux-3763</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-button-role-isnt-enough-for-an-accessible-interface"&gt;
  &lt;/a&gt;
  The button role isn't enough for an accessible interface
&lt;/h2&gt;

&lt;p&gt;There is a practice of overriding the button's default role. It's a bad practice already because authors of the ARIA in HTML standard prohibit overriding of default roles in section 2.1.&lt;/p&gt;

&lt;p&gt;But in addition, people think if they define role="button" this element becomes accessible. Yes, it's true for screen readers. But that's only one case!&lt;/p&gt;

&lt;p&gt;This "button" isn't accessible for a keyboard. Users can't focus on this element using the tab key. Also, this "button" isn't accessible for interaction using the enter or space keys.&lt;/p&gt;

&lt;p&gt;So if you want to define role="button" don't do that. Just use the button element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Go&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- or --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Go&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use it instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Go&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-bigger-clickable-area-the-better-userfriendly-interactive-elements"&gt;
  &lt;/a&gt;
  The bigger clickable area the better user-friendly interactive elements
&lt;/h2&gt;

&lt;p&gt;When we design interactive elements we have to think about how users will interact with them, in particular, a clickable area. &lt;/p&gt;

&lt;p&gt;That is important because users use different kinds of interactions. I often see designers and developers make a clickable area that is equal sizes of the element. &lt;/p&gt;

&lt;p&gt;It's nice for users who use a mouse. But that's a big problem for other users. If users have  a motor disability click on such an element is a nearly impossible task,&lt;/p&gt;

&lt;p&gt;Sometimes I can't hit on such elements when I tap on them using a finger. Also outline around elements has not enough contrast, if I focused on them using a keyboard,&lt;/p&gt;

&lt;p&gt;But we can solve these problems easily. Just we should design more largest clickable area that will not conflict with other elements around.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7rDml1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/56937666/67caae32ca1a41859f94e25be24d8579/1.jpg%3Ftoken-time%3D1635292800%26token-hash%3DpVEa_BCCuXgCfixBPmjEiBrn72YcJP6BxUvZQ2j2Hg0%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7rDml1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/56937666/67caae32ca1a41859f94e25be24d8579/1.jpg%3Ftoken-time%3D1635292800%26token-hash%3DpVEa_BCCuXgCfixBPmjEiBrn72YcJP6BxUvZQ2j2Hg0%253D" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-arialabelledby-simplify-navigation-for-users-of-screen-readers"&gt;
  &lt;/a&gt;
  The aria-labelledby simplify navigation for users of screen readers
&lt;/h2&gt;

&lt;p&gt;Any web interface has a lot of sections that help users without vision disabilities orient at the page. We just see headings and understand that is a section and also its sense.&lt;/p&gt;

&lt;p&gt;But some users can't see. They use the special quick navigation mode known as "Regions list" in screen readers. In this mode screen readers display all regions on the page. So users can go to any by some taps.&lt;/p&gt;

&lt;p&gt;Unfortunately, there is a problem that is section elements aren't displayed in this mode until we associate section heading with a section using the aria-labelledby attribute.&lt;/p&gt;

&lt;p&gt;So we have to add the id to the heading and add this as a value to the aria-labelledby attribute that is defined for the section element.  As a result, this section will be added to the regions list and users will know about it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;About me&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum, dolor sit amet consectetur...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use it instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"about-me"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"about-me"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About me&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum, dolor sit amet consectetur...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#where-are-the-buttons-here"&gt;
  &lt;/a&gt;
  Where are the buttons here?
&lt;/h2&gt;

&lt;p&gt;Unfortunately, designers and developers don't know the importance of using the button element for any elements for which users can click. So why is that important?&lt;/p&gt;

&lt;p&gt;Yes, by default click applies on any elements. But not all users use a mouse for interaction with UI. For example, some users want to use tab, enter and space keys for interaction with UI. &lt;/p&gt;

&lt;p&gt;If we think about users of screen readers they can't interact with UI if button elements aren't on the page. &lt;/p&gt;

&lt;p&gt;So if you want to create an element by which users will click, please, make it is a button. &lt;/p&gt;

&lt;p&gt;For inspiration, I collected a few examples where the button element will be helpful. As a result, users will get a more user-friendly web interface.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cFP-1RfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/57394376/e15dcab999b0459cb6341f370c73c32a/1.jpg%3Ftoken-time%3D1635811200%26token-hash%3DafeXIOr2WFoLscg-HWErfvhNb44hMyoBY5jDfhu0aFI%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cFP-1RfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/57394376/e15dcab999b0459cb6341f370c73c32a/1.jpg%3Ftoken-time%3D1635811200%26token-hash%3DafeXIOr2WFoLscg-HWErfvhNb44hMyoBY5jDfhu0aFI%253D" alt="All dates inside a calendar are buttons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G52erXTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/57394376/81e352bb434747368259abb64bb60192/1.jpg%3Ftoken-time%3D1635811200%26token-hash%3DwKox3i0AZcg9AidPHEBlfco88LVTX5B37b3rP9w_FvQ%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G52erXTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/57394376/81e352bb434747368259abb64bb60192/1.jpg%3Ftoken-time%3D1635811200%26token-hash%3DwKox3i0AZcg9AidPHEBlfco88LVTX5B37b3rP9w_FvQ%253D" alt="The button for clearing selected dates inside a calendar is a button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XE7VsoCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/57394376/975142f987d249fea31cf6bfaecf112f/1.jpg%3Ftoken-time%3D1635811200%26token-hash%3DJtTF9f4zus9ce3HiMel5vXGXukm-1OdiLCYN1yVjVP0%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XE7VsoCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/57394376/975142f987d249fea31cf6bfaecf112f/1.jpg%3Ftoken-time%3D1635811200%26token-hash%3DJtTF9f4zus9ce3HiMel5vXGXukm-1OdiLCYN1yVjVP0%253D" alt="The toggle on a previous month inside a calendar is a button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aznxhJmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/57394376/ce0d494c321d4415b8cfad42d350e339/1.jpg%3Ftoken-time%3D1635811200%26token-hash%3DLsiNIl0tnfUBiDViu10y8TqvnSSSiQZPVts1rNy1XvY%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aznxhJmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/57394376/ce0d494c321d4415b8cfad42d350e339/1.jpg%3Ftoken-time%3D1635811200%26token-hash%3DLsiNIl0tnfUBiDViu10y8TqvnSSSiQZPVts1rNy1XvY%253D" alt="The toggle on a next month inside a calendar is a button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SBRPEhZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/57394376/e6ac857309b94b6297d8f8ffa52c4438/1.jpg%3Ftoken-time%3D1635811200%26token-hash%3DNI9XILGhD9eLhUzvGCbezoZPP6TOG_f-mzZ-1qgGXKA%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SBRPEhZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJxIjoxMDAsIndlYnAiOjB9/patreon-media/p/post/57394376/e6ac857309b94b6297d8f8ffa52c4438/1.jpg%3Ftoken-time%3D1635811200%26token-hash%3DNI9XILGhD9eLhUzvGCbezoZPP6TOG_f-mzZ-1qgGXKA%253D" alt="All points that mark apartaments on a map are buttons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
Folks, I love to share my tips with you. I do that with the help of donations from my sponsors since content creating is my full-time job.&lt;/p&gt;

&lt;p&gt;For this reason I ask you to join my sponsors if you like what I do &lt;br&gt;
&lt;a href="https://www.patreon.com/melnik909"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S0zkeHmS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3IjoxOTIwLCJ3ZSI6MX0%253D/patreon-media/p/campaign/2871133/09751df69a6d4a3990d4f6a2fb77340f/19.jpg%3Ftoken-time%3D1633305600%26token-hash%3DF2s9h-8VI8cZLJiiUalO1rewbCh6FPD_Qyepp1C7Aiw%253D" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/melnik909"&gt;Go to Patreon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ù§ Thank you so much, my sponsors: Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten, Spiridon Konofaos.&lt;/p&gt;

&lt;p&gt;üëÄ Also I tell stories from my career on Substack. Join &lt;a href="https://stasmelnikov.substack.com"&gt;my free newsletter&lt;/a&gt;, if you're interested in my background&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>css</category>
      <category>ux</category>
      <category>html</category>
    </item>
    <item>
      <title>What is pnpm and why should you use it?</title>
      <author>Kada Guetouache</author>
      <pubDate>Mon, 25 Oct 2021 19:52:32 +0000</pubDate>
      <link>https://dev.to/kada/what-is-pnpm-and-why-should-you-use-it-nna</link>
      <guid>https://dev.to/kada/what-is-pnpm-and-why-should-you-use-it-nna</guid>
      <description>&lt;p&gt;Have you ever seen the memes on Reddit thread of Twitter&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vBh78MHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pics.me.me/node-modules-69777663.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vBh78MHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pics.me.me/node-modules-69777663.png" alt="web project and node_modules folder"&gt;&lt;/a&gt;&lt;br&gt;
or this!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dASwxlne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pics.me.me/a-modern-small-web-app-with-node-modules-installed-addtext-com-41803670.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dASwxlne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pics.me.me/a-modern-small-web-app-with-node-modules-installed-addtext-com-41803670.png" alt="modern web app with npm install"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you can find more on this &lt;a href="https://me.me/t/node-modules"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;npm is package manager tool for JavaScript in almost every web development project especially front-end projects. &lt;/p&gt;

&lt;p&gt;But this tools comes with different problems I'm sure your facing now which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the install process is kind of slow&lt;/li&gt;
&lt;li&gt;not very friend log message.&lt;/li&gt;
&lt;li&gt;large node_modules folder in every single project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Facebook came up with an alternative tool yarn, it bit faster and have more friendly code log but have the same storage issue. I used to solve this issue by creating a main node_modules folder in my hard disk and use symlinks to all my folders, but it's kind of frustrating so I drop this solution not very long after.&lt;/p&gt;

&lt;p&gt;recently I have read about a new tool that solves the three issues that we discussed above that tool is called pnpm. pnpm is tools that is very similar to npm, if familiar with how npm commands pnpm is just the same. when using npm or yarn if have 1000 project that means you will have 1000 dependencies folder in each project in your hard drive, pnpm will install all the dependencies in one universal folder that is linked to all of your 1000 project using sumlinks that is managed for you under the hood.&lt;/p&gt;

&lt;p&gt;this approach solve all the issues that we discussed earlier if you have already installed a dependency it will use that one instead of downloading in from the start. this means less storage used and faster installing process how cool is that, it even have a very minimalist log message. &lt;/p&gt;

&lt;p&gt;the first day I used pnpm I felt over the top because it solves an issue I hated so mush and after couple of days using it I've had no issues using it so I felt that I need to share this tool with everyone that didn't hear about.&lt;/p&gt;

&lt;p&gt;conclusion:&lt;br&gt;
pnpm is yet another package manager tool that is responsible for installing Javascript dependencies it's just more faster and more convenient and has a minimalist friendly log message.&lt;/p&gt;

&lt;p&gt;if you know any other tools that I didn't hear about I'd love you to share your knowledge with me.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>node</category>
      <category>javascript</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Merge Sort and Quick Sort!</title>
      <author>Suchitra</author>
      <pubDate>Mon, 25 Oct 2021 19:51:09 +0000</pubDate>
      <link>https://dev.to/suchitra_13/merge-sort-and-quick-sort-icn</link>
      <guid>https://dev.to/suchitra_13/merge-sort-and-quick-sort-icn</guid>
      <description>&lt;p&gt;In this article I am going to explain two sorting algorithms, &lt;em&gt;Merge Sort&lt;/em&gt; and &lt;em&gt;Quick Sort&lt;/em&gt; with detailed analysis, application and space and time complexity.&lt;/p&gt;

&lt;p&gt;Before starting the topic, let's know about basic and other sorting algorithms.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/3o6Zt5jXXzAzdikVmE/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6Zt5jXXzAzdikVmE/giphy.gif" alt="Gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#some-sorting-algorithms-are"&gt;
  &lt;/a&gt;
  Some Sorting Algorithms are
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bubble Sort&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Easy to implement and easy to understand. But not efficient sort, it takes O(N^2) time complexity and O(1) space. Means it is an in place sorting algorithm.(In each iteration, the biggest element goes into its correct position and in single iteration we have to do more number of swaps).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Selection Sort&lt;/strong&gt;&lt;br&gt;
Less number of swaps as compared to Bubble Sort. But still not efficient.&lt;br&gt;
It is an in place and unable sorting algorithm with O(N^2) time complexity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Insertion Sort&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also takes O(N^2) time complexity, but the interesting part of this sorting algorithm is that it takes just O(N) when the elements are partially sorted.&lt;br&gt;
In place and stable sorting, algorithm.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Heap Sort&lt;/strong&gt;&lt;br&gt;
It is an unstable sorting with O(NlogN) time and O(1) space complexity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Count Sort&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is a stable sorting algorithm with time complexity O(N + K) where n is the number of elements in the array and k is the range of the elements. Counting sort is most efficient if the range of input values is not greater than the number of values to be sorted. Space O(N + K).&lt;br&gt;
arr = [3, 2, 4, 1, 2] here N = 5, k = 4 - 1 = 3&lt;br&gt;
range of input(N) &amp;lt; number of elements(K) &lt;br&gt;
If range is lager, then it will be not efficient to use.&lt;/p&gt;

&lt;p&gt;Now it's time to explain about Merge and Quick sort...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#merge-sort"&gt;
  &lt;/a&gt;
  Merge Sort
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/D0WOL0ogZIoG4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/D0WOL0ogZIoG4/giphy.gif" alt="Merge"&gt;&lt;/a&gt;&lt;br&gt;
It is based on Divide and Conquer technique with worst-case time complexity O(NlogN), it is one of most respective algorithms.&lt;/p&gt;

&lt;p&gt;Merge Sort first divides the array into equal halves and then merging them in a sorted manner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Algorithm&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Step&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;If&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nc"&gt;Step&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Divide&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;recursively&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;halves&lt;/span&gt; &lt;span class="n"&gt;until&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;divided&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nc"&gt;Step&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Merge&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;smaller&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sorted&lt;/span&gt; &lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;comparing&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;halves&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;choose&lt;/span&gt; &lt;span class="n"&gt;smaller&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;between&lt;/span&gt; &lt;span class="n"&gt;them&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;another&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;merge_sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;left_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;merge_sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copyOfRange&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;right_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;merge_sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copyOfRange&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_list&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_list&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;left_list&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;right_list&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left_cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ret_cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_cursor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;left_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;right_cursor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;right_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left_cursor&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;right_list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right_cursor&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ret_cursor&lt;/span&gt;&lt;span class="o"&gt;++]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left_list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left_cursor&lt;/span&gt;&lt;span class="o"&gt;++];&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ret_cursor&lt;/span&gt;&lt;span class="o"&gt;++]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right_list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right_cursor&lt;/span&gt;&lt;span class="o"&gt;++];&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// append what is remain the above lists&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_cursor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;left_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ret_cursor&lt;/span&gt;&lt;span class="o"&gt;++]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left_list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left_cursor&lt;/span&gt;&lt;span class="o"&gt;++];&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right_cursor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;right_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ret_cursor&lt;/span&gt;&lt;span class="o"&gt;++]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right_list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right_cursor&lt;/span&gt;&lt;span class="o"&gt;++];&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MergeSort&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextInt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextInt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// call merge sort function&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;merge_sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pros-and-cons"&gt;
  &lt;/a&gt;
  Pros and Cons
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Large size list merged by this sort.&lt;/li&gt;
&lt;li&gt;Also used in linked list.&lt;/li&gt;
&lt;li&gt;External sorting&lt;/li&gt;
&lt;li&gt;Stable&lt;/li&gt;
&lt;li&gt;Time efficient O(NlogN)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It takes extra space 
Need space in the stack(Recursive) logN and extra space N.
O(N + logN)
= O(N)&lt;/li&gt;
&lt;li&gt;Not much efficient for small problem&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#quick-sort"&gt;
  &lt;/a&gt;
  Quick Sort
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/jS2Wv3E0xSiquMLPcA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/jS2Wv3E0xSiquMLPcA/giphy.gif" alt="Quick"&gt;&lt;/a&gt;&lt;br&gt;
Quick sort uses the partition algorithm for finding pivot element and divide the array recursively into two halves.&lt;/p&gt;

&lt;p&gt;The idea behind this algorithm is that it is a similar kind of merge sort, but it does not take extra space. Here, the pivot element plays a major role.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is a pivot element?&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;choose pivot as 1st element&lt;/li&gt;
&lt;li&gt;choose pivot as 2nd element&lt;/li&gt;
&lt;li&gt;choose pivot as middle element (Best way)&lt;/li&gt;
&lt;li&gt;choose pivot as random element (Best way)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#logic"&gt;
  &lt;/a&gt;
  Logic:
&lt;/h3&gt;

&lt;p&gt;Suppose arr = [5, 3, 1, 2, 4]&lt;br&gt;
Step 1: Choose pivot element (took pivot as random so, pivot = 3)&lt;br&gt;
Step 2: In one pass we find pivot is in its proper position, means all the elements which are smaller than pivot are placed in left side and all the elements which are greater than pivot placed right side.(some logic are applied to do so)&lt;br&gt;
Now the array is : &lt;a href="https://dev.toIt's%20not%20recommended%20that%20left%20or%20right%20side%20will%20sorted%20it%20might%20be%20possible%20but%20not%20necessary"&gt;2, 1, 3, 5, 4&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-link"&gt;
  &lt;/a&gt;
  Useful link
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/SUCHITRAGIRI/DailyCodeWithJava/tree/main/Sorting"&gt;Sorting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hope-it-helps-please-share-your-thoughts-in-the-comments"&gt;
  &lt;/a&gt;
  Hope it helps, please share your thoughts in the comments‚ò∫Ô∏è
&lt;/h2&gt;

</description>
      <category>algorithms</category>
      <category>java</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>ThreatMapper - Open source runtime Threat Scanner</title>
      <author>Deepfence</author>
      <pubDate>Mon, 25 Oct 2021 19:20:47 +0000</pubDate>
      <link>https://dev.to/deepfence/threatmapper-open-source-runtime-exploitability-scanner-34ii</link>
      <guid>https://dev.to/deepfence/threatmapper-open-source-runtime-exploitability-scanner-34ii</guid>
      <description>&lt;p&gt;We‚Äôre excited to announce today that ThreatMapper is now 100% open source under the Apache 2.0 license! If you‚Äôre not familiar with ThreatMapper, it‚Äôs a rapidly evolving cloud native security observability platform that scans, maps, and ranks vulnerabilities from development through production across serverless, Kubernetes, container, and multi-cloud environments. &lt;/p&gt;

&lt;p&gt;Because modern applications and services rely heavily on shared, open source components, securing them is best done as a collaborative, community effort. By open sourcing ThreatMapper, we aim to help developers, DevOps, DevSecOps, and security teams identify and prioritize threats quickly and easily, and focus their efforts on the vulnerabilities that need to be fixed first.&lt;/p&gt;

&lt;p&gt;When we initially launched ThreatMapper, we first made it available as a freemium edition and worked closely with dozens of early adopters to evolve it into the robust cloud native security platform that it is today. By working alongside security professionals securing modern application environments, not only were we able to build out a rich set of features and capabilities that solve real-world challenges, but we were also able to see ThreatMapper make a tangible impact on security teams.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits of Using ThreatMapper&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here are just some of the benefits you get by using ThreatMapper to secure your applications and infrastructure:&lt;/p&gt;

&lt;p&gt;See the topology of your applications and infrastructure: ThreatMapper auto-discovers your production infrastructure ‚Äì including cloud instances, Kubernetes nodes, serverless resources, and containers ‚Äì and maps the topology of your applications in real time.&lt;/p&gt;

&lt;p&gt;Discover vulnerabilities, including fresh vulnerabilities in production that were not known at build or deploy time: ThreatMapper scans hosts, containers, and applications for known vulnerable dependencies, taking threat feeds from more than 50 different sources. ThreatMapper augments any ‚Äúshift left‚Äù vulnerability scanning you may do in your development pipeline, and scans third-party components such as monitoring and load-balancing tools.&lt;br&gt;
Rank vulnerabilities by attack surface: ThreatMapper ranks the discovered vulnerabilities based on CVSS and other severity signals, as well as their exploit method and proximity to your external attack surface. With ThreatMapper, you know what vulnerabilities pose the greatest threats, and what you must fix first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ThreatMapper is a fully open source platform that makes it easy to scan for vulnerabilities and build a map of threats across multiple clouds and application types. ThreatStryker (our commercial offering) extends ThreatMapper with compliance scanning, runtime sensors, and a correlation and protection engine.&lt;/p&gt;

&lt;p&gt;Our intent is to migrate all security and observability capabilities, including compliance scanning and runtime sensors, into the open source ThreatMapper platform. ThreatMapper will make all threat and runtime data available through public APIs, for dashboards, SIEM and other external applications to consume.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary &amp;amp; What‚Äôs Next?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thank you to everyone who helped us on our journey so far to make ThreatMapper the robust open source security tool that we‚Äôre announcing today. We‚Äôre so grateful for the many design partners, customers, security professionals, advisors, and members of the Deepfence team (the Deepforce!) who helped us achieve this amazing milestone.&lt;/p&gt;

&lt;p&gt;While open sourcing ThreatMapper was always on our roadmap ‚Äî today is only the beginning! We‚Äôll continue to build and release new features on our mission to protect the cloud native continuum.&lt;/p&gt;

&lt;p&gt;Download, try, and contribute to open source &lt;a href="https://github.com/deepfence/ThreatMapper"&gt;ThreatMapper&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>security</category>
      <category>kubernetes</category>
      <category>devops</category>
      <category>aws</category>
    </item>
  </channel>
</rss>
