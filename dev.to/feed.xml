<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>üöÄ NextJS Landing Page Template Free with Tailwind CSS and TypeScript [Open source] ‚ö°Ô∏è</title>
      <author>Rem W.</author>
      <pubDate>Wed, 31 Mar 2021 21:09:57 +0000</pubDate>
      <link>https://dev.to/ixartz/nextjs-landing-page-template-free-with-tailwind-css-and-typescript-open-source-3a9l</link>
      <guid>https://dev.to/ixartz/nextjs-landing-page-template-free-with-tailwind-css-and-typescript-open-source-3a9l</guid>
      <description>&lt;p&gt;A simple landing page template built on top of NextJS 10, React, Tailwind CSS 2.0 and TypeScript. A open source and free project hosted on GitHub. It also includes ESLint and Prettier configuration for better developer experience.&lt;/p&gt;

&lt;p&gt;You can deploy a NextJS landing page in seconds, saving you development and design time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A picture is worth a thousand words&lt;/em&gt;, here is the screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://creativedesignsguru.com/demo/nextjs-landing-page/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qievzIIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ixartz/Next-JS-Landing-Page-Starter-Template/master/public/assets/images/nextjs-landing-page-screenshot.png" alt="Nextjs Landing Page Template Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also check the source code on GitHub: &lt;a href="https://github.com/ixartz/Next-JS-Landing-Page-Starter-Template"&gt;NextJS Landing Page Template&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ixartz"&gt;
        ixartz
      &lt;/a&gt; / &lt;a href="https://github.com/ixartz/Next-JS-Landing-Page-Starter-Template"&gt;
        Next-JS-Landing-Page-Starter-Template
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üöÄ Landing Page Template written in Next.js 10+, Tailwind CSS 2.0 and TypeScript ‚ö°Ô∏è Made with developer experience first: Next.js, TypeScript, ESLint, Prettier, PostCSS, Tailwind CSS.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Landing Page Template built with Next JS 10+, Tailwind CSS 2.0 and TypeScript&lt;/h1&gt;
&lt;p&gt;
  &lt;a href="https://creativedesignsguru.com/demo/nextjs-landing-page/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qZYjQwY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ixartz/Next-JS-Landing-Page-Starter-Template/master/public/assets/images/nextjs-landing-page-banner.png%3Fraw%3Dtrue" alt="Next js starter banner"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;üöÄ Landing Page theme written in Next.js, Tailwind CSS and TypeScript ‚ö°Ô∏è Made with developer experience first: &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt;, &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt;, &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;, &lt;a href="https://postcss.org" rel="nofollow"&gt;PostCSS&lt;/a&gt;, &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Clone this project and use it to create your own &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; project. You can check a &lt;a href="https://creativedesignsguru.com/demo/nextjs-landing-page/" rel="nofollow"&gt;Next js templates demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
DEMO&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://creativedesignsguru.com/demo/nextjs-landing-page/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G7DT1a-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ixartz/Next-JS-Landing-Page-Starter-Template/master/public/assets/images/nextjs-landing-page-screenshot.png%3Fraw%3Dtrue" alt="Nextjs Landing Page Template Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href="https://creativedesignsguru.com/demo/nextjs-landing-page/" rel="nofollow"&gt;live demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
Features&lt;/h3&gt;

&lt;p&gt;Developer experience first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
üî• &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; for Static Site Generator&lt;/li&gt;
&lt;li&gt;
üé® Integrate with &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
üíÖ &lt;a href="https://postcss.org" rel="nofollow"&gt;PostCSS&lt;/a&gt; for processing &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
üéâ Type checking &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
‚úèÔ∏è Linter with &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
üõ† Code Formatter with &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
ü¶ä SEO metadata, &lt;a href="https://developers.google.com/search/docs/guides/intro-structured-data" rel="nofollow"&gt;JSON-LD&lt;/a&gt; and &lt;a href="https://ogp.me/" rel="nofollow"&gt;Open Graph&lt;/a&gt; tags with &lt;a href="https://github.com/garmeeh/next-seo"&gt;Next SEO&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
‚öôÔ∏è &lt;a href="https://www.npmjs.com/package/@next/bundle-analyzer" rel="nofollow"&gt;Bundler Analyzer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
üåà Include a FREE theme&lt;/li&gt;
&lt;li&gt;
üíØ Maximize lighthouse score&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Built-in feature from Next.js:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
‚òï Minify HTML &amp;amp; CSS&lt;/li&gt;
&lt;li&gt;
üí® Live reload&lt;/li&gt;
&lt;li&gt;
‚úÖ Cache busting&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
Included Components&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Navbar&lt;/li&gt;
&lt;li&gt;Hero&lt;/li&gt;
&lt;li&gt;Features&lt;/li&gt;
&lt;li&gt;CTA banner&lt;/li&gt;
&lt;li&gt;‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ixartz/Next-JS-Landing-Page-Starter-Template"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;By default this landing page includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigation component&lt;/li&gt;
&lt;li&gt;Hero component&lt;/li&gt;
&lt;li&gt;Feature component&lt;/li&gt;
&lt;li&gt;Banner component&lt;/li&gt;
&lt;li&gt;Footer component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to find more components you can checkout our &lt;a href="https://creativedesignsguru.com/category/nextjs/"&gt;premium NextJS themes&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#built-on-nextjs-boilerplate" class="anchor"&gt;
  &lt;/a&gt;
  Built on NextJS Boilerplate
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Nextjs landing Page Template&lt;/strong&gt; is built on top of &lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;NextJS Boilerplate&lt;/a&gt;. Almost reaching 100+ ‚≠ê stars on GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#built-with-latest-technologies" class="anchor"&gt;
  &lt;/a&gt;
  Built with latest technologies
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;NextJS 10&lt;/li&gt;
&lt;li&gt;Tailwind CSS 2.0 with the &lt;a href="https://github.com/tailwindlabs/tailwindcss-jit"&gt;Just-in-time version&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;TypeScript 4&lt;/li&gt;
&lt;li&gt;ESLint&lt;/li&gt;
&lt;li&gt;Prettier&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-next-js-templates-and-themes" class="anchor"&gt;
  &lt;/a&gt;
  Other Next JS Templates and Themes
&lt;/h2&gt;

&lt;p&gt;Built in modern ways with components and UI blocks. You can also check my portfolio at:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-green-modern-nextjs-theme/"&gt;Green Nextjs Landing Page Template&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-indigo-modern-react-theme/"&gt;Indigo Nextjs Tailwind Theme&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-green-modern-nextjs-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4CbDAFVd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-green-modern-nextjs-theme-xs.png" alt="Green Nextjs Landing Page Template"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-indigo-modern-react-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FvlCiWRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-indigo-modern-nextjs-theme-xs.png" alt="Indigo Nextjs Tailwind Theme"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-purple-modern-react-theme/"&gt;Purple Saas Nextjs Theme&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-blue-modern-react-theme/"&gt;Blue Landing Page Nextjs Theme&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-purple-modern-react-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fsLIO5h8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-purple-modern-nextjs-theme-xs.png" alt="Purple Saas Nextjs Theme"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-blue-modern-react-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--az4i2Gg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-blue-modern-nextjs-theme-xs.png" alt="Blue Landing Page Nextjs Theme"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;You can easily customize the themes based on your needs by saving you development and design time.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>üìà Working with RabbitMQ in Golang by examples</title>
      <author>Vic Sh√≥stak</author>
      <pubDate>Wed, 31 Mar 2021 20:59:59 +0000</pubDate>
      <link>https://dev.to/koddr/working-with-rabbitmq-in-golang-by-examples-2dcn</link>
      <guid>https://dev.to/koddr/working-with-rabbitmq-in-golang-by-examples-2dcn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey, DEV people! üòâ Today, I'll cover the topic of working with a Message broker called RabbitMQ in your Go projects. There will be both a theoretical part and practice.&lt;/p&gt;

&lt;p&gt;Of course, the article is more aimed at those who &lt;em&gt;just want&lt;/em&gt; to understand this topic. But I call on more &lt;strong&gt;experienced&lt;/strong&gt; people to help cover this topic even better in the comments on this article. Together we can do a lot!&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  üìù Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-a-message-broker"&gt;What is a message broker?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-problems-will-be-able-to-solve"&gt;What problems will be able to solve?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#full-project-code"&gt;Full project code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-rabbitmq"&gt;Setting up RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-fiber-as-a-sender"&gt;Setting up Fiber as a sender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-a-message-consumer"&gt;Setting up a message consumer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-the-project"&gt;Running the project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-message-broker" class="anchor"&gt;
  &lt;/a&gt;
  What is a message broker?
&lt;/h2&gt;

&lt;p&gt;This is an architectural pattern in distributed systems, where a message broker is an application that converts a single protocol message from the source application to a protocol message from the destination application, thereby acting as an intermediary between them.&lt;/p&gt;

&lt;p&gt;Also, the tasks of the message broker include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checking the message for errors;&lt;/li&gt;
&lt;li&gt;Routing to specific receiver(s);&lt;/li&gt;
&lt;li&gt;Splitting the message into several smaller ones, and then aggregating the receivers' responses and sending the result to the source;&lt;/li&gt;
&lt;li&gt;Saving the messages to a database;&lt;/li&gt;
&lt;li&gt;Calling web services;&lt;/li&gt;
&lt;li&gt;Distributing messages to subscribers;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;ü§î But what is it anyway? Well, let's translate it into our language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you simplify this huge description, you can portray the message broker as a post office in real life (&lt;em&gt;which you have encountered many times&lt;/em&gt;):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A sender (&lt;em&gt;user of your product&lt;/em&gt;) brings a parcel (&lt;em&gt;any data&lt;/em&gt;) to the post office and specifies the addressee for receipt (&lt;em&gt;another service&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;A post office employee accepts the parcel and places it in the storage area (&lt;em&gt;puts it in the queue to be sent&lt;/em&gt;) and issues a receipt that the parcel has been successfully accepted from the sender.&lt;/li&gt;
&lt;li&gt;After some time, the parcel is delivered to the addressee (&lt;em&gt;another service&lt;/em&gt;), and he doesn't have to be at home to accept the parcel. In this case, his parcel will wait in a mailbox until he receives it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MF9wyXxI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmumd57vnbnq7h1z25xw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MF9wyXxI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmumd57vnbnq7h1z25xw.jpg" alt="message broker schema"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-problems-will-be-able-to-solve" class="anchor"&gt;
  &lt;/a&gt;
  What problems will be able to solve?
&lt;/h2&gt;

&lt;p&gt;One of the most important problems that can be solved by using this architectural pattern is to parallelize tasks with a guaranteed result, even if the receiving service is unavailable at the time of sending the data.&lt;/p&gt;

&lt;p&gt;With the total dominance of microservice architecture in most modern projects, this approach can maximize the performance and resilience of the entire system.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üëå It sounds a bit confusing... but let's use the post office analogy again! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once the sender gives his parcel to the post office employee, he no longer cares how his parcel will be delivered, but he does know that it will be delivered anyway!&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-project-code" class="anchor"&gt;
  &lt;/a&gt;
  Full project code
&lt;/h2&gt;

&lt;p&gt;For those who want to see the project in action:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/koddr"&gt;
        koddr
      &lt;/a&gt; / &lt;a href="https://github.com/koddr/tutorial-go-fiber-rabbitmq"&gt;
        tutorial-go-fiber-rabbitmq
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üìñ Tutorial: Working with RabbitMQ in Golang by examples
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-rabbitmq" class="anchor"&gt;
  &lt;/a&gt;
  Setting up RabbitMQ
&lt;/h2&gt;

&lt;p&gt;As usual, let's create a new Docker Compose file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./docker-compose.yml&lt;/span&gt;

&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.9"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="c1"&gt;# Create service with RabbitMQ.&lt;/span&gt;
  &lt;span class="na"&gt;message-broker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rabbitmq:3-management-alpine&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;message-broker&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5672:5672&lt;/span&gt;   &lt;span class="c1"&gt;# for sender and consumer connections&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;15672:15672&lt;/span&gt; &lt;span class="c1"&gt;# for serve RabbitMQ GUI&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;${HOME}/dev-rabbitmq/data/:/var/lib/rabbitmq&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;${HOME}/dev-rabbitmq/log/:/var/log/rabbitmq&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dev-network&lt;/span&gt;

&lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Create a new Docker network.&lt;/span&gt;
  &lt;span class="na"&gt;dev-network&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bridge&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è Please note! For the initial introduction to RabbitMQ we will not create a cluster and use a load balancer. If you want to know about it, write a comment below.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-fiber-as-a-sender" class="anchor"&gt;
  &lt;/a&gt;
  Setting up Fiber as a sender
&lt;/h2&gt;

&lt;p&gt;To connect to the message broker, we will use the &lt;a href="https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol"&gt;Advanced Message Queuing Protocol&lt;/a&gt; or &lt;code&gt;AMQP&lt;/code&gt; for short. The standard port for RabbitMQ is &lt;code&gt;5672&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Okay, let's write a simple data sender using &lt;a href="https://github.com/gofiber/fiber"&gt;Fiber&lt;/a&gt; web framework:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./sender/main.go&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/gofiber/fiber/v2/middleware/logger"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/streadway/amqp"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Define RabbitMQ server URL.&lt;/span&gt;
    &lt;span class="n"&gt;amqpServerURL&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"AMQP_SERVER_URL"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Create a new RabbitMQ connection.&lt;/span&gt;
    &lt;span class="n"&gt;connectRabbitMQ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;amqp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amqpServerURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;connectRabbitMQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Let's start by opening a channel to our RabbitMQ&lt;/span&gt;
    &lt;span class="c"&gt;// instance over the connection we have already&lt;/span&gt;
    &lt;span class="c"&gt;// established.&lt;/span&gt;
    &lt;span class="n"&gt;channelRabbitMQ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connectRabbitMQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;channelRabbitMQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// With the instance and declare Queues that we can&lt;/span&gt;
    &lt;span class="c"&gt;// publish and subscribe to.&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;channelRabbitMQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueueDeclare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"QueueService1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// queue name&lt;/span&gt;
        &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="c"&gt;// durable&lt;/span&gt;
        &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="c"&gt;// auto delete&lt;/span&gt;
        &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="c"&gt;// exclusive&lt;/span&gt;
        &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="c"&gt;// no wait&lt;/span&gt;
        &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;             &lt;span class="c"&gt;// arguments&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Create a new Fiber instance.&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Add middleware.&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c"&gt;// add simple logger&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Add route.&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/send"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Create a message to publish.&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;amqp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Publishing&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"text/plain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// Attempt to publish a message to the queue.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;channelRabbitMQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;              &lt;span class="c"&gt;// exchange&lt;/span&gt;
            &lt;span class="s"&gt;"QueueService1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// queue name&lt;/span&gt;
            &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="c"&gt;// mandatory&lt;/span&gt;
            &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="c"&gt;// immediate&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="c"&gt;// message to publish&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c"&gt;// Start Fiber API server.&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":3000"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, at the beginning we create a new connection to RabbitMQ and a channel to send data to the queue, called &lt;code&gt;QueueService1&lt;/code&gt;. With a GET request to &lt;a href="http://localhost:3000/send"&gt;localhost:3000/send&lt;/a&gt;, we can pass a needed text in a &lt;code&gt;msg&lt;/code&gt; query parameter, which will be sent to the queue and next to the consumer.&lt;/p&gt;

&lt;p&gt;Now create a new Dockerfile called &lt;code&gt;Dockerfile-sender&lt;/code&gt; in the root of the project in which we describe the process of creating the container for sender:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# ./Dockerfile-sender&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; golang:1.16-alpine AS builder&lt;/span&gt;

&lt;span class="c"&gt;# Move to working directory (/build).&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /build&lt;/span&gt;

&lt;span class="c"&gt;# Copy and download dependency using go mod.&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; go.mod go.sum ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;go mod download

&lt;span class="c"&gt;# Copy the code into the container.&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./sender/main.go .&lt;/span&gt;

&lt;span class="c"&gt;# Set necessary environment variables needed &lt;/span&gt;
&lt;span class="c"&gt;# for our image and build the sender.&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; CGO_ENABLED=0 GOOS=linux GOARCH=amd64&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;go build &lt;span class="nt"&gt;-ldflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-s -w"&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; sender .

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; scratch&lt;/span&gt;

&lt;span class="c"&gt;# Copy binary and config files from /build &lt;/span&gt;
&lt;span class="c"&gt;# to root folder of scratch container.&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=builder ["/build/sender", "/"]&lt;/span&gt;

&lt;span class="c"&gt;# Command to run when starting the container.&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["/sender"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All that remains is to update the Docker Compose file so that it takes this Dockerfile into account when creating a container with RabbitMQ:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./docker-compose.yml&lt;/span&gt;

&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.9"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="c1"&gt;# ...&lt;/span&gt;

  &lt;span class="c1"&gt;# Create service with Fiber sender.&lt;/span&gt;
  &lt;span class="na"&gt;sender&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sender&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;3000:3000&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dockerfile-sender&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;AMQP_SERVER_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;amqp://guest:guest@message-broker:5672/&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dev-network&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;message-broker&lt;/span&gt;

  &lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-message-consumer" class="anchor"&gt;
  &lt;/a&gt;
  Setting up a message consumer
&lt;/h2&gt;

&lt;p&gt;The message consumer should be able to accept messages from the broker's queue and output in the logs the message sent from the sender.&lt;/p&gt;

&lt;p&gt;Let's implement such a consumer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./consumer/main.go&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/streadway/amqp"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Define RabbitMQ server URL.&lt;/span&gt;
    &lt;span class="n"&gt;amqpServerURL&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"AMQP_SERVER_URL"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Create a new RabbitMQ connection.&lt;/span&gt;
    &lt;span class="n"&gt;connectRabbitMQ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;amqp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amqpServerURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;connectRabbitMQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Opening a channel to our RabbitMQ instance over&lt;/span&gt;
    &lt;span class="c"&gt;// the connection we have already established.&lt;/span&gt;
    &lt;span class="n"&gt;channelRabbitMQ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connectRabbitMQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;channelRabbitMQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Subscribing to QueueService1 for getting messages.&lt;/span&gt;
    &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;channelRabbitMQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"QueueService1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// queue name&lt;/span&gt;
        &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;              &lt;span class="c"&gt;// consumer&lt;/span&gt;
        &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="c"&gt;// auto-ack&lt;/span&gt;
        &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="c"&gt;// exclusive&lt;/span&gt;
        &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="c"&gt;// no local&lt;/span&gt;
        &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="c"&gt;// no wait&lt;/span&gt;
        &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;             &lt;span class="c"&gt;// arguments&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Build a welcome message.&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Successfully connected to RabbitMQ"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Waiting for messages"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Make a channel to receive messages into infinite loop.&lt;/span&gt;
    &lt;span class="n"&gt;forever&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// For example, show received message in a console.&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" &amp;gt; Received message: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;forever&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, in the same way with sender, let's create a new Dockerfile called &lt;code&gt;Dockerfile-consumer&lt;/code&gt; to describe the process of creating a container for the message consumer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# ./Dockerfile-consumer&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; golang:1.16-alpine AS builder&lt;/span&gt;

&lt;span class="c"&gt;# Move to working directory (/build).&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /build&lt;/span&gt;

&lt;span class="c"&gt;# Copy and download dependency using go mod.&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; go.mod go.sum ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;go mod download

&lt;span class="c"&gt;# Copy the code into the container.&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./consumer/main.go .&lt;/span&gt;

&lt;span class="c"&gt;# Set necessary environment variables needed &lt;/span&gt;
&lt;span class="c"&gt;# for our image and build the consumer.&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; CGO_ENABLED=0 GOOS=linux GOARCH=amd64&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;go build &lt;span class="nt"&gt;-ldflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-s -w"&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; consumer .

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; scratch&lt;/span&gt;

&lt;span class="c"&gt;# Copy binary and config files from /build &lt;/span&gt;
&lt;span class="c"&gt;# to root folder of scratch container.&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=builder ["/build/consumer", "/"]&lt;/span&gt;

&lt;span class="c"&gt;# Command to run when starting the container.&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["/consumer"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, you guessed it! üòÖ Once again, we will have to put a description in the Docker Compose file to create the container for the consumer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./docker-compose.yml&lt;/span&gt;

&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.9"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="c1"&gt;# ...&lt;/span&gt;

  &lt;span class="c1"&gt;# ...&lt;/span&gt;

  &lt;span class="c1"&gt;# Create service with message consumer.&lt;/span&gt;
  &lt;span class="na"&gt;consumer&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;consumer&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dockerfile-consumer&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;AMQP_SERVER_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;amqp://guest:guest@message-broker:5672/&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dev-network&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sender&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;message-broker&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Finally, we're ready to put everything together and run the project.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--syi8OjTn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5lta4yywl1szpwdhkmgs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--syi8OjTn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5lta4yywl1szpwdhkmgs.jpg" alt="running the project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-project" class="anchor"&gt;
  &lt;/a&gt;
  Running the project
&lt;/h2&gt;

&lt;p&gt;Just run this Docker Compose command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait about 1-2 minutes and make a few HTTP request to the API endpoint with different text in &lt;code&gt;msg&lt;/code&gt; query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--request&lt;/span&gt; GET &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--url&lt;/span&gt; &lt;span class="s1"&gt;'http://localhost:3000/send?msg=test'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, go to this address: &lt;code&gt;http://localhost:15672&lt;/code&gt;. Enter &lt;code&gt;guest&lt;/code&gt; both as login and password. You should see the RabbitMQ user interface, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNMb8LJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjutaiugkbb7a1yh1ds6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNMb8LJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjutaiugkbb7a1yh1ds6.png" alt="rabbitmq gui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To simply view the logs and metrics inside the Docker containers, I recommend to use a command line utility, called &lt;a href="https://github.com/bcicen/ctop"&gt;ctop&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_JfX6sLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxgimwizcomzaqpldno7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_JfX6sLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxgimwizcomzaqpldno7.png" alt="ctop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you turn off the consumer container, but continue to make HTTP requests, you will see that the queue starts to accumulate messages. But as soon as the consumer is started up again, the queue will clear out because the consumer will get all the messages sent.&lt;/p&gt;

&lt;p&gt;üéä Congratulations, you have fully configured the message broker, sender, consumer and wrapped it all in isolated Docker containers!&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by" class="anchor"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Vic Sh√≥stak &lt;a href="https://shostak.dev"&gt;https://shostak.dev&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Fatos Bytyqi &lt;a href="https://unsplash.com/photos/Agx5_TLsIf4"&gt;https://unsplash.com/photos/Agx5_TLsIf4&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps" class="anchor"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more ‚Üí write a comment below &amp;amp; follow me. Thanks! üòò&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>rabbitmq</category>
    </item>
    <item>
      <title>Vilicus ‚Äî A overseer for security scanning of container images
</title>
      <author>Ederson Brilhante</author>
      <pubDate>Wed, 31 Mar 2021 20:19:18 +0000</pubDate>
      <link>https://dev.to/edersonbrilhante/vilicus-a-overseer-for-security-scanning-of-container-images-eji</link>
      <guid>https://dev.to/edersonbrilhante/vilicus-a-overseer-for-security-scanning-of-container-images-eji</guid>
      <description>&lt;p&gt;Vilicus is an open-source tool that orchestrates security scans of container images(Docker/OCI) and centralizes all results into a database for further analysis and metrics.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-scan-for-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  Why scan for vulnerabilities?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A recent &lt;a href="https://blog.prevasio.com/2020/12/operation-red-kangaroo-industrys-first.html"&gt;analysis&lt;/a&gt; of around 4 million Docker Hub images by cyber security firm Prevasio found that 51% of the images had exploitable vulnerabilities. A large number of these were cryptocurrency miners, both open and hidden, and 6,432 of the images had malware.&lt;br&gt;
&lt;a href="https://www.infoq.com/news/2020/12/dockerhub-image-vulnerabilities/"&gt;https://www.infoq.com/news/2020/12/dockerhub-image-vulnerabilities/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59GfRT-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/971e3mglk3o8dkls3h03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59GfRT-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/971e3mglk3o8dkls3h03.png" alt="Image from https://prevasio.com/static/web/viewer.html?file=/static/Red_Kangaroo.pdf"&gt;&lt;/a&gt;Image from &lt;a href="https://prevasio.com/static/web/viewer.html?file=/static/Red_Kangaroo.pdf"&gt;https://prevasio.com/static/web/viewer.html?file=/static/Red_Kangaroo.pdf&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Docker image security scanning is a process for finding security vulnerabilities within your Docker image files.&lt;br&gt;
Typically, image scanning works by parsing through the packages or other dependencies that are defined in a container image file, then checking to see whether there are any known vulnerabilities in those packages or dependencies.&lt;br&gt;
&lt;a href="https://resources.whitesourcesoftware.com/blog-whitesource/docker-image-security-scanning"&gt;https://resources.whitesourcesoftware.com/blog-whitesource/docker-image-security-scanning&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#how-does-it-work" class="anchor"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;There are many tools to scan container images for vulnerabilities such as &lt;a href="https://github.com/anchore/anchore-engine"&gt;Anchore&lt;/a&gt;, &lt;a href="https://github.com/quay/clair"&gt;Clair&lt;/a&gt;, and &lt;a href="https://github.com/aquasecurity/trivy"&gt;Trivy&lt;/a&gt;. But sometimes the results from the same image can be different. And this project comes to help the developers to improve the quality of their container images by finding vulnerabilities and thus addressing them with agnostic sight from vendors.&lt;/p&gt;

&lt;p&gt;Some articles comparing the scanning tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://boxboat.com/2020/04/24/image-scanning-tech-compared/"&gt;Open Source CVE Scanner Round-Up: Clair vs Anchore vs Trivy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://opensource.com/article/18/8/tools-container-security"&gt;5 open source tools for container security&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.a10o.net/devsecops/docker-image-security-static-analysis-tool-comparison-anchore-engine-vs-clair-vs-trivy/"&gt;Docker Image Security: Static Analysis Tool Comparison ‚Äî Anchore Engine vs Clair vs Trivy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#architecture" class="anchor"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JgW0mSNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obow7zp9z7oirw5r6l2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgW0mSNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obow7zp9z7oirw5r6l2n.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cached-database" class="anchor"&gt;
  &lt;/a&gt;
  Cached Database
&lt;/h2&gt;

&lt;p&gt;Vilicus updates daily the vendor databases with the latest changes in the vulns DBs.&lt;/p&gt;

&lt;p&gt;Using a strategy to storage the database data in layers of docker images, the whole platform is ready to use in minutes instead of hours. Starting the sync feed with vulns from scratch can take at least 6 hours.&lt;/p&gt;

&lt;p&gt;Check the strategy used in &lt;a href="https://github.com/edersonbrilhante/vilicus/blob/main/scripts/build-anchore-image.sh"&gt;Anchore&lt;/a&gt;, &lt;a href="https://github.com/edersonbrilhante/vilicus/blob/main/scripts/build-clair-image.sh"&gt;Clair&lt;/a&gt; and &lt;a href="https://github.com/edersonbrilhante/vilicus/blob/main/scripts/build-trivy-image.sh"&gt;Trivy&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#local-registry" class="anchor"&gt;
  &lt;/a&gt;
  Local Registry
&lt;/h2&gt;

&lt;p&gt;Vilicus provides a local registry, so you can build a local image and scanning it without pushing it to a remote repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t localhost:5000/local-image:my-tag .

curl -o docker-compose.yml https://raw.githubusercontent.com/edersonbrilhante/vilicus/main/deployments/docker-compose.yml

docker-compose up -d

IMAGE=localregistry.vilicus.svc:5000/local-image:my-tag

docker run -v ${PWD}/artifacts:/artifacts \
  --network container:vilicus \
  vilicus/vilicus:latest \
  sh -c "dockerize -wait http://vilicus:8080/healthz -wait-retry-interval 60s -timeout 2000s vilicus-client -p /opt/vilicus/configs/conf.yaml -i ${IMAGE}  -t /opt/vilicus/contrib/sarif.tpl -o /artifacts/results.sarif"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#github-action" class="anchor"&gt;
  &lt;/a&gt;
  GitHub Action
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub Actions makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and deploy your code right from GitHub. Make code reviews, branch management, and issue triaging work the way you want.&lt;br&gt;
&lt;a href="https://github.com/features/actions"&gt;https://github.com/features/actions&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vilicus provides a &lt;a href="https://github.com/marketplace/actions/vilicus-scan"&gt;GitHub action&lt;/a&gt; to help you scanning container images in your CI/CD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Container scanning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A scan can be done using a remote image and a local image. Using a remote repository such as docker.io the image will be &lt;strong&gt;&lt;em&gt;&lt;code&gt;docker.io/your-organization/image:tag&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  - name: Scan image
    uses: edersonbrilhante/vilicus-github-action@main
    with:
      image: "docker.io/myorganization/myimage:tag"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to use a local image its need to tag as &lt;strong&gt;&lt;em&gt;&lt;code&gt;localhost:5000/image:tag&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  - name: Scan image
    uses: edersonbrilhante/vilicus-github-action@main
    with:
      image: "localhost:5000/myimage:tag"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Full example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Complete example with steps for cleaning space, building local image, Vilicus scanning, and uploading results to GitHub Security&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Container Image CI
on: [push]
jobs:
  build
    runs-on: ubuntu-latest
    steps:
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
      - name: Checkout branch
        uses: actions/checkout@v2
      - name: Build the Container image
        run: docker build -t localhost:5000/local-image:${GITHUB_SHA} .
      - name: Vilicus Scan
        uses: edersonbrilhante/vilicus-github-action@main
        with:
          image: localhost:5000/local-image:${{ github.sha }}
      - name: Upload results to github security
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: artifacts/results.sarif
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#results-in-github-security" class="anchor"&gt;
  &lt;/a&gt;
  Results in GitHub Security
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/edersonbrilhante/vilicus-scan-examples"&gt;Check an example&lt;/a&gt; using Vilicus GitHub Action&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J1R1GdOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtmicxlyd96ikk9a0xqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J1R1GdOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtmicxlyd96ikk9a0xqu.png" alt="Pipeline example"&gt;&lt;/a&gt;Pipeline example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RqzzGbm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcq9ox1c1zifdusp9k6a.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RqzzGbm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcq9ox1c1zifdusp9k6a.jpeg" alt="List with all vulns found"&gt;&lt;/a&gt;List with all vulns found&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BB_QWs7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx8g581t9k2gqexyusms.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BB_QWs7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx8g581t9k2gqexyusms.jpeg" alt="Vuln details"&gt;&lt;/a&gt;Vuln details&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#source-code" class="anchor"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/edersonbrilhante/vilicus-github-action"&gt;VIlicus GitHub Action&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/edersonbrilhante/vilicus"&gt;Vilicus&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-it" class="anchor"&gt;
  &lt;/a&gt;
  That‚Äôs it!
&lt;/h2&gt;

&lt;p&gt;In case you have any questions, please leave a comment here or ping me on &lt;a href="https://www.linkedin.com/in/edersonbrilhante"&gt;üîó LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>security</category>
      <category>docker</category>
      <category>devops</category>
      <category>tooling</category>
    </item>
    <item>
      <title>How to Get Better at Coding Without Really Trying</title>
      <author>Kaemon Lovendahl</author>
      <pubDate>Wed, 31 Mar 2021 19:54:17 +0000</pubDate>
      <link>https://dev.to/thelogicwarlock/how-to-get-better-at-coding-without-really-trying-34ed</link>
      <guid>https://dev.to/thelogicwarlock/how-to-get-better-at-coding-without-really-trying-34ed</guid>
      <description>&lt;h1&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro
&lt;/h1&gt;

&lt;p&gt;This article was made to help those, like myself, that have trouble finding the time, or the patience to practice skills related to WebDev. Time spent on anything is precious and I despise needing to go back to re-learn something over and over again.&lt;/p&gt;

&lt;p&gt;I want to state that this tutorial isn't about committing EVERYTHING to memory. It's not worth anyone's time to try and memorize every JavaScript Array method, or some specific Data Structure that you'll never use. This is about learning how to code and how to learn new skills.&lt;/p&gt;

&lt;p&gt;Also, if you don't want to spend the time reading through this article you can find a TLDR at the end&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repetition" class="anchor"&gt;
  &lt;/a&gt;
  Repetition
&lt;/h2&gt;

&lt;p&gt;Repetition is probably one of the best methods I've used to solidify knowledge. This is done by initially practicing a problem over the course of a week. For example, if you started on a Monday you would practice again on Wednesday, Friday, and Sunday. Practicing every other day helps to train your brain to recall the information better and better each time.&lt;/p&gt;

&lt;p&gt;After the first week, you should come back to it over increasingly extended amounts of time. Something like a full week, to a few weeks, to a full month. That is assuming you aren't using the new concept in any of your projects or work.&lt;/p&gt;

&lt;p&gt;Coming back can really help you to see if you've actually solidified the knowledge. You might even find something that was overlooked in previous practices. Just be sure you come back to it before it's fully forgotten!&lt;/p&gt;

&lt;p&gt;I've used these methods to practice concepts like Recursion, Async/Await, Redux, and State Machines. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#know-how-you-learn" class="anchor"&gt;
  &lt;/a&gt;
  Know How You Learn
&lt;/h2&gt;

&lt;p&gt;Everyone has a preferred/best method to learn new things. This includes methods like reading, watching videos, or actively practicing, or a combination of these. At this point, you should know the best methods that help you to solidify knowledge.&lt;/p&gt;

&lt;p&gt;Personally, I prefer the hands-on approach where I'll try to implement a new concept on my own, then when I get stuck, or if I succeed I'll go over an article/tutorial on the topic. I find that this gives me a better perspective on why/how a thing is done the way it is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-challenges" class="anchor"&gt;
  &lt;/a&gt;
  Coding Challenges
&lt;/h2&gt;

&lt;p&gt;There are many, many, many websites dedicated to providing coding challenges for a wide assortment of languages! These sites are perfect for practicing/perfecting your knowledge of a language. There is, however, a right way and a wrong way to do these challenges.&lt;/p&gt;

&lt;p&gt;These challenges should only be used to practice your knowledge of a language and nothing more. Not only that but you should only focus on problems that test concepts you are either uncomfortable with or if you want to try solving a problem in a unique, not straight-forward way. You won't get better if you only solve challenges you already know how to solve.&lt;/p&gt;

&lt;p&gt;If you're just starting out with a new language I recommend just doing the basics as your main objective. You should be comfortable with concepts like string manipulation, arrays, classes, hashes(objects), if statements, and loops.&lt;/p&gt;

&lt;p&gt;Once you are comfortable with the basics you should spend time using language-specific concepts, or try solving problems with a unique solution than you would have used. For example, try using recursion instead of if-statements, or try using a Hash instead of an Array to hold data, etc.&lt;/p&gt;

&lt;p&gt;I do need to state using unique solutions to challenges can be great practice but you shouldn't use complex solutions unless it makes sense. You can solve a problem in a unique way but will you understand that one-liner a year from now? Documentation can really help explain your thought patterns.&lt;/p&gt;

&lt;p&gt;Locating a site for coding challenges shouldn't be too difficult, and there are so many out there that you should be able to find one you like. I used to use &lt;a href="https://www.codewars.com/dashboard"&gt;codeWars&lt;/a&gt; and &lt;a href="https://www.hackerrank.com/dashboard"&gt;hackerRank&lt;/a&gt; for a while. I will say that I was able to find a challenge site that I fell in love with, &lt;a href="https://www.codingame.com/"&gt;codingame&lt;/a&gt;. Its challenges are all themed around videogames. They've even gamified challenges by having a match-made game where you try to solve problems alongside others. It can be pretty fun!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#projects" class="anchor"&gt;
  &lt;/a&gt;
  Projects
&lt;/h2&gt;

&lt;p&gt;While Coding Challenges are a great way to get better at a language, projects are how you get better at development. Projects challenge you to not only build something but to build something documented, tested, maintainable, etc. Manipulating an Object can only get you so far when you need to build a website or an API.&lt;/p&gt;

&lt;p&gt;In my opinion, most of your time practicing should be spent building projects. This is where you can really put all of your knowledge together and develop marketable skills for your career. Topics that you should be familiar with in any project would be testing, state management, file structure, documentation, and architecture.&lt;/p&gt;

&lt;p&gt;Having trouble figuring out what you want to build? Try rebuilding your version of an App, or website that you use frequently. Wish something existed that doesn't currently, build it yourself! My largest pet project is a collection manager for my constantly growing Magic: The Gathering collection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-uncomfortable" class="anchor"&gt;
  &lt;/a&gt;
  Be Uncomfortable
&lt;/h2&gt;

&lt;p&gt;This is probably the largest point I want to make. If you are frequently building projects or solving problems the same way you always have then you aren't learning anything new. Have you used Redux for state management? Why not try State Machines, or Context if your using React.&lt;/p&gt;

&lt;p&gt;It doesn't take long to realize there is no single solution for every problem you come across. Every tool/framework has advantages and disadvantages. Knowing multiple ways to solve a problem can really make your life easier when you're using a tool the right way. &lt;/p&gt;

&lt;p&gt;For example, it'd be overkill to use Rails to build an API for basic CRUD functionality with few customizations. Choosing something like Node + Express would be better?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Don't just maintain knowledge, actively work to better it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You don't have to be perfect. (But that doesn't mean you can write crappy code either.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Work on something you are unfamiliar with.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Solve a problem with an unfamiliar solution. (Using a loop? Why not recursion?)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Would you understand this code if you just had a memory wipe? (Comment Everything)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>8 Ultimate ressources for learning Web Dev in 2021 #1</title>
      <author>CodeOzz</author>
      <pubDate>Wed, 31 Mar 2021 19:08:18 +0000</pubDate>
      <link>https://dev.to/codeozz/8-ultimate-ressources-for-learning-web-dev-in-2021-1-487e</link>
      <guid>https://dev.to/codeozz/8-ultimate-ressources-for-learning-web-dev-in-2021-1-487e</guid>
      <description>&lt;p&gt;Hey friends ! I'm sharing with you a lot of ressources about web developper that will help you to improve your skills and save your time !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git" class="anchor"&gt;
  &lt;/a&gt;
  Git üîß
&lt;/h2&gt;

&lt;p&gt;As you know as web developper Git is an essential tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://learngitbranching.js.org/"&gt;https://learngitbranching.js.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's the best tool about learning Git ! If you have any issue about learning git, go into this ! You will not regret I promise you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css" class="anchor"&gt;
  &lt;/a&gt;
  CSS üé®
&lt;/h2&gt;

&lt;p&gt;Three important things about CSS is :&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#css-selector" class="anchor"&gt;
  &lt;/a&gt;
  CSS Selector
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://flukeout.github.io/"&gt;https://flukeout.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn how CSS Selector works with animation !&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#grid" class="anchor"&gt;
  &lt;/a&gt;
  Grid
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://cssgridgarden.com/"&gt;https://cssgridgarden.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn Grid CSS as gardener !&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#flexbox" class="anchor"&gt;
  &lt;/a&gt;
  Flexbox
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://flexboxfroggy.com/"&gt;https://flexboxfroggy.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn Flexbox in CSS as a Frog !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vim" class="anchor"&gt;
  &lt;/a&gt;
  VIM üìù
&lt;/h2&gt;

&lt;p&gt;Learn about this famous text editor across a game ! Yes in fact it's possible !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vim-adventures.com/"&gt;https://vim-adventures.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#regex" class="anchor"&gt;
  &lt;/a&gt;
  Regex üî£
&lt;/h2&gt;

&lt;p&gt;Who loves and know 100 % about Regex ? Yes it's a pain to learn this and apply them.&lt;/p&gt;

&lt;p&gt;Across these both ressources you will :&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#learn-regex" class="anchor"&gt;
  &lt;/a&gt;
  Learn Regex
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://regexone.com/"&gt;https://regexone.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cheatlist-about-regex-pattern-email-password-phone-number-ect" class="anchor"&gt;
  &lt;/a&gt;
  CheatList about Regex Pattern (email, password, phone number, ect..)
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://ihateregex.io/"&gt;https://ihateregex.io/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript" class="anchor"&gt;
  &lt;/a&gt;
  Javascript üñ•Ô∏è
&lt;/h2&gt;

&lt;p&gt;Just one ressource about Javascript, I will share with you the BEST ressource about learning javascript &lt;code&gt;Properly&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.info/"&gt;https://javascript.info/&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>git</category>
      <category>css</category>
    </item>
    <item>
      <title>Soft Skills Can Be Hard ‚Äî with Liana Felt and Kristen Palana</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 31 Mar 2021 18:49:31 +0000</pubDate>
      <link>https://dev.to/devteam/soft-skills-can-be-hard-with-liana-felt-and-kristen-palana-429k</link>
      <guid>https://dev.to/devteam/soft-skills-can-be-hard-with-liana-felt-and-kristen-palana-429k</guid>
      <description>&lt;p&gt;I can't believe that the season 4 finale of DevDiscuss is already here!&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s4-e8-we-role-play-what-good-soft-skills-look-like"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S4:E8 - We Role Play What Good Soft Skills Look Like&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss ¬†

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s4-e8-we-role-play-what-good-soft-skills-look-like" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s4-e8-we-role-play-what-good-soft-skills-look-like" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s4-e8-we-role-play-what-good-soft-skills-look-like" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s4-e8-we-role-play-what-good-soft-skills-look-like" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s4-e8-we-role-play-what-good-soft-skills-look-like"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s4-e8-we-role-play-what-good-soft-skills-look-like"&gt;
      &lt;img id="episode-profile-image" alt="S4:E8 - We Role Play What Good Soft Skills Look Like" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;√ó&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;In this week's show (a crossover with our sister podcast, the &lt;a href="//dev.to/codenewbie"&gt;CodeNewbie Podcast&lt;/a&gt; ) I joined forces with &lt;a class="comment-mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
, Founder of CodeNewbie and Disco, to tackle a topic that frequently doesn't get enough attention in the realm of software development: soft skills. We role-play scenarios that involve a lot of sensitivity, empathy, and clear communication ‚Äî all qualities that are invaluable in any field, including this one.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-s4e8-we-were-joined-by-two-awesome-guests" class="anchor"&gt;
  &lt;/a&gt;
  In S4E8, we were joined by two awesome guests...
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="//dev.to/liana"&gt;Liana Felt&lt;/a&gt;, People Operations Manager here at Forem (and my wife!)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://community.codenewbie.org/kristenpalana"&gt;Kristen Palana&lt;/a&gt;, United Nations Population Fund (UNFPA) Malawi - Animation and Digital Media Specialist&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#after-you-listen-to-the-episode-be-sure-to-head-to-this-thread-on-codenewbie-community-forem-to-ask-kristen-anything-about-their-career-experience-handling-situations-with-tact-and-soft-skills-in-general" class="anchor"&gt;
  &lt;/a&gt;
  After you listen to the episode, be sure to head to &lt;a href="https://community.codenewbie.org/kristenpalana/i-m-kristen-palana-teacher-author-and-artist-ask-me-anything-p53"&gt;this thread&lt;/a&gt; on CodeNewbie Community Forem to ask Kristen anything about their career, experience handling situations with tact, and soft skills in general.
&lt;/h3&gt;

&lt;p&gt;Thanks for listening to this past season of DevDiscuss. We're already cooking up some awesome stuff for season five. I can't wait to share it with you.   &lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; ‚Äî or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links" class="anchor"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/devdiscuss/id1513053883"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/show/4Jae2mPUqx0XnGychucsE4"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzMz?sa=X&amp;amp;ved=2ahUKEwjIgezIl9vvAhUtA50JHYz1BnIQkfYCegQIARAE"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss/s4e8-we-role-play-what-good-Xx_-DoUHrCy/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=161949673"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pca.st/vvo2unz9"&gt;Pocket Casts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devdiscuss/episodes/156"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season four sponsors: DataStax, New Relic, Educative, and Ambassador Labs!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#" class="anchor"&gt;
  &lt;/a&gt;
  üó£Ô∏èüó£Ô∏èüó£Ô∏è
&lt;/h1&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
      <category>career</category>
      <category>softskills</category>
    </item>
    <item>
      <title>Why all Developers should Blog - No Excuses!</title>
      <author>Fahad Imran üë®‚Äçüíª</author>
      <pubDate>Wed, 31 Mar 2021 18:22:21 +0000</pubDate>
      <link>https://dev.to/iamfahadimran/why-all-developers-should-blog-no-excuses-1fg0</link>
      <guid>https://dev.to/iamfahadimran/why-all-developers-should-blog-no-excuses-1fg0</guid>
      <description>&lt;p&gt;üëâ Cover Image by &lt;a href="https://unsplash.com/@glenncarstenspeters?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Glenn Carstens-Peters&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/typing?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-most-people-are-afraid-of-blogging" class="anchor"&gt;
  &lt;/a&gt;
  üò® Why most people are afraid of blogging?
&lt;/h2&gt;

&lt;p&gt;Blogging can be an &lt;strong&gt;intimidating task&lt;/strong&gt;. Especially when you're new in the field of development and programming.&lt;/p&gt;

&lt;p&gt;Let's talk about the common reason new developers choose to &lt;strong&gt;NOT&lt;/strong&gt; start blogging:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I don't know enough to write about it.&lt;/li&gt;
&lt;li&gt;If I make a mistake people will criticize me.&lt;/li&gt;
&lt;li&gt;My writing skills are poor.&lt;/li&gt;
&lt;li&gt;Who will read my blogs?&lt;/li&gt;
&lt;li&gt;What do I blog about?&lt;/li&gt;
&lt;li&gt;What benefits will I get by blogging?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's &lt;strong&gt;address&lt;/strong&gt; these concerns one by one. By the end of this blog post hopefully, some of your fears and doubts about blogging will be cleared and you'll be motivated to start writing! üí™&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-dont-know-enough-to-write-about-it" class="anchor"&gt;
  &lt;/a&gt;
  üß† I don't know enough to write about it...
&lt;/h2&gt;

&lt;p&gt;It's fine. You'll never know it all! No one does. &lt;/p&gt;

&lt;p&gt;But when you'll start writing about a topic, it will &lt;strong&gt;improve&lt;/strong&gt; your understanding immensely. When you explain a topic in your own words you'll grasp it more deeply and it is, in my opinion, the best form of learning. You'll realize what parts you didn't understand and where you went wrong. &lt;/p&gt;

&lt;p&gt;This will result in a very effective and thorough understanding of the topic. And the best part is, during the writing process you'll research more about the topic, read articles, watch videos to broaden your knowledge about the technology or framework. &lt;/p&gt;

&lt;p&gt;Thus, once you've written about a topic you'll be &lt;strong&gt;confident&lt;/strong&gt; in your understanding and skills!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-i-make-a-mistake-people-will-criticize-me" class="anchor"&gt;
  &lt;/a&gt;
  üò• If I make a mistake people will criticize me...
&lt;/h2&gt;

&lt;p&gt;Totally not a big deal. No one is &lt;strong&gt;perfect&lt;/strong&gt;. And you shouldn't fear the judgment of people. If people criticize you then there will be even more that support you and admire your work. &lt;/p&gt;

&lt;p&gt;Plus, there are great communities like Dev and Hashnode those welcome new developers with open arms. You can start off here and you'll be amazed by the response! Just start!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-writing-skills-are-poor" class="anchor"&gt;
  &lt;/a&gt;
  üìú My writing skills are poor...
&lt;/h2&gt;

&lt;p&gt;Not to worry. English is my &lt;strong&gt;second language&lt;/strong&gt;. And I see many developers that blog consistently and English is not their primary language. &lt;/p&gt;

&lt;p&gt;The only way to &lt;strong&gt;improve&lt;/strong&gt; your writing skills is to &lt;strong&gt;write more&lt;/strong&gt;. Once you start writing, your expression will improve and you'll be able to write elegantly and with fewer mistakes. &lt;/p&gt;

&lt;p&gt;I would recommend using tools like Grammarly to avoid grammatical and spelling mistakes when starting out.&lt;/p&gt;

&lt;p&gt;The simple fact of the matter is that if your blogs provide value to others, people don't care too much about your English or sentence structure. So, don't freak out about language and start writing! It's the &lt;strong&gt;fastest&lt;/strong&gt; way to improve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-will-read-my-blogs" class="anchor"&gt;
  &lt;/a&gt;
  üöÄ Who will read my blogs?
&lt;/h2&gt;

&lt;p&gt;You'll be &lt;strong&gt;amazed&lt;/strong&gt; at how many people will like your work. &lt;/p&gt;

&lt;p&gt;What you must understand is that whatever level you are in the field of programming or development, many people are going through the process that you went through.&lt;/p&gt;

&lt;p&gt;Suppose you know about HTML or CSS, but are afraid that you don't know any frameworks so you have nothing to contribute. Wrong!&lt;/p&gt;

&lt;p&gt;Write about what you know! Many developers are just starting and they don't know HTML or CSS yet. Your blogs will &lt;strong&gt;appeal&lt;/strong&gt; to them and they'll read and benefit from them. &lt;/p&gt;

&lt;p&gt;And as you grow as a developer and gain more experience, you can write about new things you learn and thus &lt;strong&gt;diversify&lt;/strong&gt; your target audience. &lt;/p&gt;

&lt;p&gt;So, don't worry about who'll read your blogs because many people would!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#okbut-what-do-i-blog-about" class="anchor"&gt;
  &lt;/a&gt;
  üíª OK...But what do I blog about?
&lt;/h2&gt;

&lt;p&gt;Anything and Everything!&lt;/p&gt;

&lt;p&gt;Whatever you are learning currently or have learned in the past. Blog about the technologies are familiar with and enjoy using. &lt;/p&gt;

&lt;p&gt;Maybe you encountered a &lt;strong&gt;bug&lt;/strong&gt; and &lt;strong&gt;solved it&lt;/strong&gt;. Blog about it!&lt;/p&gt;

&lt;p&gt;Maybe you go to &lt;strong&gt;college&lt;/strong&gt; and are majoring in &lt;strong&gt;Computer Science&lt;/strong&gt;, you can share insights about your journey, what you're learning, your experiences!&lt;/p&gt;

&lt;p&gt;Maybe you are &lt;strong&gt;looking for a job&lt;/strong&gt; and interviewing in different companies. You can blog about the &lt;strong&gt;interview process&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Maybe you know &lt;strong&gt;front-end development&lt;/strong&gt; or you are good at &lt;strong&gt;DevOps&lt;/strong&gt;. Blog!&lt;/p&gt;

&lt;p&gt;Maybe you have bookmarked &lt;strong&gt;cool resources&lt;/strong&gt; that can help people who are new to development. Share away!&lt;/p&gt;

&lt;p&gt;Think of blogging as a way to &lt;strong&gt;document&lt;/strong&gt; your journey. Everyone is unique and there is never a shortage of topics to write about. Imagine your blog as a way to solve problems and help other developers.&lt;/p&gt;

&lt;p&gt;I blog about web development because it's what I &lt;strong&gt;love&lt;/strong&gt; and am familiar with. Similarly, you can also write about your favorite topics and improve as a developer while helping others too!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits-of-blogging" class="anchor"&gt;
  &lt;/a&gt;
  ü§∑‚Äç‚ôÇÔ∏è What are the benefits of blogging?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Opportunities, Opportunities, Opportunities!&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;By blogging and having some sort of online presence opportunities will come your way. Having your work online will help you during &lt;strong&gt;job interviews&lt;/strong&gt;, getting &lt;strong&gt;freelance projects&lt;/strong&gt;, and even as a &lt;strong&gt;full-time career&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Many developers have narrated their experience of going into technical interviews and not being asked even &lt;strong&gt;a single question&lt;/strong&gt; because the interviewer had read their blog and knew they were the right fit for the job.&lt;/p&gt;

&lt;p&gt;Having a blog online shows that you are &lt;strong&gt;dedicated&lt;/strong&gt; and &lt;strong&gt;passionate&lt;/strong&gt; about your work. It helps you make connections, interact with amazing people, and show off on your portfolio as well.&lt;/p&gt;

&lt;p&gt;Thus, there are literally so many reasons why you should have a blog of some sort and it will help you in so many places!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inspiring-stories-to-get-you-motivated" class="anchor"&gt;
  &lt;/a&gt;
  ‚ö° Inspiring stories to get you motivated!
&lt;/h2&gt;

&lt;p&gt;These are the articles that really &lt;strong&gt;motivated&lt;/strong&gt; me to start blogging myself. They are written by ordinary people like you and me. What matters is the first step and a bit of self-discipline, the rest is easy. If they can do it, so can you. Give these stories a read and I bet you'll also feel inclined to start writing about your own experiences!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://h.daily-dev-tips.com/i-blogged-every-single-day-for-a-year"&gt;I blogged every single day for a year&lt;/a&gt; by Chris Bongers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/lampewebdev/one-year-of-writing-a-blog-post-every-week-this-is-what-happened-3dne"&gt;One year of writing a blog post every week this is what happened&lt;/a&gt; by Michael "lampe" Lazarski &lt;a class="comment-mentioned-user" href="https://dev.to/lampewebdev"&gt;@lampewebdev&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/vtrpldn/i-got-the-16-week-streak-badge-here-s-everything-i-learned-about-consistency-2nna"&gt;I Got the 16 Week Streak Badge. Here‚Äôs Everything I Learned About Consistency&lt;/a&gt; by Vitor Paladini &lt;a class="comment-mentioned-user" href="https://dev.to/vtrpldn"&gt;@vtrpldn&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thats-all-folks" class="anchor"&gt;
  &lt;/a&gt;
  üôè That's all folks!
&lt;/h2&gt;

&lt;p&gt;In short, blogging will not only improve your understanding but will also help you get more opportunities and allow you to help other developers as well!&lt;/p&gt;

&lt;p&gt;So, don't be afraid of blogging, and start writing today! Pick a user-friendly community (my advice is DEV) and publish your first blog today. Trust me, it will be worth it! &lt;/p&gt;

&lt;p&gt;If you liked reading this article, you can more of my stuff over &lt;a class="comment-mentioned-user" href="https://dev.to/iamfahadimran"&gt;@iamfahadimran&lt;/a&gt;
 on DEV. Thanks for reading and happy coding! üòÄ&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-enjoyed-this-blog-please-give-it-a-or" class="anchor"&gt;
  &lt;/a&gt;
  If you enjoyed this blog, please give it a ‚ù§Ô∏è, ü¶Ñ, or üîñ
&lt;/h4&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>I Built a Workout Tracking App using Next.js and Firebase!üí™</title>
      <author>Pranav Birajdar</author>
      <pubDate>Wed, 31 Mar 2021 18:20:52 +0000</pubDate>
      <link>https://dev.to/prnvbirajdar/i-built-a-workout-tracking-app-using-next-js-and-firebase-360d</link>
      <guid>https://dev.to/prnvbirajdar/i-built-a-workout-tracking-app-using-next-js-and-firebase-360d</guid>
      <description>&lt;p&gt;I recently finished building and deploying a strength training-focused &lt;a href="https://lift-next.vercel.app/"&gt;workout app&lt;/a&gt;. I wanted to share it here and see what you guys think about it. Love it, hate it, have suggestions to improve it further or features you would like to see added? I'm all ears!&lt;/p&gt;

&lt;p&gt;The tech-stack used for the project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next.js as my React framework of choice&lt;/li&gt;
&lt;li&gt;Firebase Authentication for logging in (Google and Facebook providers)&lt;/li&gt;
&lt;li&gt;Firebase's Firestore database to store all the workout data&lt;/li&gt;
&lt;li&gt;Tailwind and &lt;a href="https://windmillui.com/"&gt;Windmill UI&lt;/a&gt; for all my styling needs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are features I have added to the app so far:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#sign-in-with-google-or-facebook-to-create-a-profile" class="anchor"&gt;
  &lt;/a&gt;
  Sign in with Google or Facebook to create a profile:
&lt;/h4&gt;

&lt;p&gt;After signing in, Firebase creates a special &lt;code&gt;user UID&lt;/code&gt; for each email, thus allowing that person to access their account and track their workouts.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZG9BrRA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdykkikpwn1tl9zqufm8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZG9BrRA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdykkikpwn1tl9zqufm8.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#allows-users-to-select-body-part-specific-exercises" class="anchor"&gt;
  &lt;/a&gt;
  Allows users to select body part specific exercises:
&lt;/h4&gt;

&lt;p&gt;Each body part consists of various exercises including compound and isolation exercises.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jtu2pGQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2murfrhrjfhc8il0ihh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jtu2pGQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2murfrhrjfhc8il0ihh.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#add-sets-repetitions-and-weight-for-every-exercise" class="anchor"&gt;
  &lt;/a&gt;
  Add sets, repetitions, and weight for every exercise:
&lt;/h4&gt;

&lt;p&gt;Add, remove, update or delete sets and exercises as you please!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urbcPSwz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkry687avba88qvezrji.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urbcPSwz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkry687avba88qvezrji.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#add-update-and-track-your-physical-stats" class="anchor"&gt;
  &lt;/a&gt;
  Add, update, and track your physical stats:
&lt;/h4&gt;

&lt;p&gt;The app also allows users to track several physical stats such as weight, height, daily calories, and body fat percentage.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IS81IuPo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jj2b9lqk6ud6gfl86m83.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IS81IuPo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jj2b9lqk6ud6gfl86m83.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#go-back-and-view-add-update-or-delete-past-workouts" class="anchor"&gt;
  &lt;/a&gt;
  Go back and view, add, update or delete past workouts:
&lt;/h4&gt;

&lt;p&gt;The calendar helps users to go back and add, update or delete previous workouts.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rQaHY6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev6vfbe2sc30g2ce3xiy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rQaHY6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev6vfbe2sc30g2ce3xiy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#copy-previous-workouts-and-paste-them-to-your-current-session" class="anchor"&gt;
  &lt;/a&gt;
  Copy previous workouts and paste them to your current session:
&lt;/h4&gt;

&lt;p&gt;If you are repeating a workout session on multiple occasions, you can now copy and paste it wherever needed and add/edit/delete those specific workouts.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d3pBRqKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24g9cavsx4vvzrxr1v72.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d3pBRqKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24g9cavsx4vvzrxr1v72.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#features-i-am-planning-to-add-in-the-future" class="anchor"&gt;
  &lt;/a&gt;
  Features I am planning to add in the future:
&lt;/h3&gt;

&lt;p&gt;I am currently using this app for almost a month now and adding more features as I see they fit. Some of these include,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kgs to lbs and vice-versa conversion&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Copy a particular previous workout and paste it to your current session&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;A dashboard to track your body weight, and daily calories&lt;/li&gt;
&lt;li&gt;A dashboard to track strength gains for specific exercises&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please feel free to tinker around and let me know if you like it! üòä &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The incredible weight of being a trans woman in tech</title>
      <author>Penelope Phippen</author>
      <pubDate>Wed, 31 Mar 2021 18:12:20 +0000</pubDate>
      <link>https://dev.to/penelope_zone/the-incredible-weight-of-being-a-trans-woman-in-tech-45n0</link>
      <guid>https://dev.to/penelope_zone/the-incredible-weight-of-being-a-trans-woman-in-tech-45n0</guid>
      <description>&lt;p&gt;Content warnings for bullying, abuse, trans-misogyny, the general state of horibbleness in tech. If any of these things are squicky for you, I absolutely won't blame you if you want to skip this one.&lt;/p&gt;

&lt;p&gt;I missed writing a #shecoded this year, but it's trans day of visibility, and I have a tradition of posting posts about the intersection of being transgender and my life in technology here on dev.to. So, let's get into it.&lt;/p&gt;

&lt;p&gt;First, a tiny amount of personal news. I've switched from identifying strictly as a trans woman, to identifying as demifemme. I use she or they pronouns now. Hearing a mix is nice, but if it's hard for you, 'she' is fine. It's also mostly correct to still think of me as a woman. To dig into it just a smidge, to me, demifemme means that I mostly identify as feminine, but gender is more complicated than that, and I find woman just a little bit reductive. With that, let's dive in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#being-socialised-as-male-left-me-with-a-deep-hurt" class="anchor"&gt;
  &lt;/a&gt;
  Being socialised as male left me with a deep hurt
&lt;/h2&gt;

&lt;p&gt;I am a survivor of my upbringing. I don't blame my parents, or my teachers, or those around me when I grew up, as such. This is a wider societal problem. I remember, so clearly, kids in my secondary school bullying me for being "girly". As if the worst possible thing that a young boy could be is effeminate. Obviously, young kids being actively and repeatedly horrible to another kid isn't acceptable, but looking back, I find it so fascinating that the direction from which this abuse came was, in at least part, gendered. I see it now as if society itself was rejecting me.&lt;/p&gt;

&lt;p&gt;So, something happened within me that I can only describe as my brain protecting itself. A persona who was a man/male came forward. It was as if the person I actually am was buried, behind this full shield of a completely different person. That person grew throughout my adolescence and was the me many of you will have known throughout the majority of my life. He wasn't, however, a full person. It was more like a half person, as a shield, burying and protecting the little girl within. She couldn't take any more of the hurt, and so he came to the defense. This hurt, &lt;strong&gt;so much&lt;/strong&gt;. Imagine fully burying who you actually are in order to make life bearable. That's what I did from around the time I was an adolescent, until I was 28. Society made it so hard to not conform in this way that I literally psychologically buried myself as a person, in order to be able to survive.&lt;/p&gt;

&lt;p&gt;Eventually though, it became clear, that I couldn't take any more of this. That continuing to live as this shell of a person was hurting me too much. It took a long time for me to realise what was going on. For the little girl within to break through and claim that this was my body, and that I wanted to be who I am. To understand that all the pain and suffering so far had been a form of protection that I actually did not want. That it was time for him to rest, and for me to take over. When I finally realised that it was time to say goodbye to the man who had been protecting me for all these years, I cried a great deal. It was like letting go of an old friend. There is a sense in which I still miss him to this day.&lt;/p&gt;

&lt;p&gt;Folks who don't understand trans issues talk about being socialized as male as a 'bad thing'. As if it's the fault of the trans person. In fact, I think of it as an abuse I bore and grew up with, that I survived, and am working to undo within myself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-thats-super-touching-what-does-this-have-to-do-with-tech" class="anchor"&gt;
  &lt;/a&gt;
  Ok, that's super touching, what does this have to do with tech?
&lt;/h2&gt;

&lt;p&gt;Our industry looks a certain way. If you're in any sense underrepresented, you will have been in &lt;strong&gt;that&lt;/strong&gt; important meeting where it's 3-11 cis white men, and then, just you. &lt;/p&gt;

&lt;p&gt;I've been on the other side of this. Before I transitioned, I was in that group. The large amorphous blob of dudes that makes up our industry. And boy, did I act like it. Before I transitioned, I was most definitely bathing in the toxic masculinity that makes up the tech industry. See, for me, that was all I really knew what to do, emulate. Not actually being a man meant that when I thought I was one, all I could really do is copy what other cis men do, but not having the best basis for it, it was a warped copy. I was loud, I was brash, I would definitely cut in when others were talking if I thought they were wrong, and here's the thing: it was effective.&lt;/p&gt;

&lt;p&gt;There's something present today in the culture of tech that is indescribable, a code of how we act and how we discuss that is implicit in who's in the room. The set of things that we say and do to affect change, build alignment, and discuss technical decisions. This code, this way of interacting, it's borne from the fact that much of the time, it's just cis men talking to cis men, with no diverse voices in the room to change the pattern of conversation. De facto, when working with folks from this set, it feels so much like you have to engage with them in the way they speak, or you won't be heard.&lt;/p&gt;

&lt;p&gt;When I speak to cis women about this, they also detect that it's there. They know that there's a way the dudes are talking that they can't quite replicate. They tell me that when they try, they're often given the kind of gendered feedback that so many of us are used to receiving "She's aggressive", "She's loud", "She needs to be less assertive". It's like as much as they're doing it, it's not quite perceived as native, and some force pushes back against them. But there's something inherently twisted in this, which is that women feel the need to replicate this in the first place. &lt;/p&gt;

&lt;p&gt;This brings me back to myself, and my lived experience. One thing that's different between me, and a cis woman, is that I &lt;strong&gt;can&lt;/strong&gt; replicate dudespeak natively. I did so for a decade before I transitioned, because it was all I knew how to do. I do so in a way where it's clear to me that they perceive it as native. I feel a deep need to do this in order to be effective at my job. However, every time I do this it hurts me so deeply. It puts me back in the place of abuse, of literally subsuming my personality to protect myself, of pretending to be a man to get the job done. I don't really make a conscious choice about this. The behaviour is so deeply ingrained it happens almost automatically. I try not to use dudespeak to get the job done, but it drags me back in every. single. time. This is a byproduct of the environment. It's like there's an implicit statement widely in tech (this doesn't just happen at work, this happens in almost every tech environment I'm in) that because it's predominantly cis men, you have to emulate them to be successful.&lt;/p&gt;

&lt;p&gt;And so, this brings me back to the weight of being a trans woman in tech. &lt;strong&gt;I have a choice between either being less effective at my job or inducing gender dysphoria at almost every large complex decision point&lt;/strong&gt;. Because I'm senior, and because there aren't so many trans ladies in tech, I feel a need to well represent the group, and so I am repeatedly taking the tradeoff that hurts me, but makes me effective. Until such time as tech looks less monocultural, I'll have to continue to do this. I'll have to continue to hurt myself. Nobody can see this happening because it's an internal decision I am making, so on this trans day of visibility, I'd just like you to pause and think about how you can make the industry more comfortable for trans women and other trans and non-binary folks, by making the spaces around you more diverse and inclusive.&lt;/p&gt;

</description>
      <category>inclusion</category>
      <category>shecoded</category>
    </item>
    <item>
      <title>Scoped recomposition in Jetpack Compose ‚Äî what happens when state changes?</title>
      <author>Zach Klippenstein</author>
      <pubDate>Wed, 31 Mar 2021 18:06:35 +0000</pubDate>
      <link>https://dev.to/zachklipp/scoped-recomposition-jetpack-compose-what-happens-when-state-changes-l78</link>
      <guid>https://dev.to/zachklipp/scoped-recomposition-jetpack-compose-what-happens-when-state-changes-l78</guid>
      <description>&lt;p&gt;Yesterday I posted a &lt;a href="https://twitter.com/zachklipp/status/1376941142202220545"&gt;code snippet&lt;/a&gt; on Twitter with &lt;a href="https://twitter.com/zachklipp/status/1376941143770898436"&gt;a poll&lt;/a&gt; asking how Compose would choose to re-execute it when the state changes. Given this code, which functions will be called on the next composition?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Composable&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;text&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;remember&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"$text\n$text"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Button&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Button&lt;/code&gt;'s content lambda&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I had initially meant to reply as a short thread on Twitter directly, but short turned into long and I found out there's actually a limit on the number of tweets you can post in a single thread, so I took it as a sign I should write a proper blog post instead.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#show-me-the-answer" class="anchor"&gt;
  &lt;/a&gt;
  Show me the answer!
&lt;/h1&gt;

&lt;p&gt;So, there are a actually few answers depending how you interpret the options in the poll - my bad for writing so ambiguously.&lt;/p&gt;

&lt;p&gt;The most important answer was immediately tweeted by Sean McQuillan (&lt;a href="https://twitter.com/objcode/status/1376944869046771712"&gt;@objcode&lt;/a&gt;), and parrots what other members of the Compose team at Google have said many times:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_lpE6nYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/913524063175286784/nhyO1wkU_normal.jpg" alt="Sean McQuillan profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Sean McQuillan
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @objcode
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The best part of this quiz is all of the answers lead to correct behavior.&lt;br&gt;&lt;br&gt;There is a right answer, but getting it wrong won't make your app break.&lt;br&gt;&lt;br&gt;Just don't rely on side effects from recomposition and compose will do the right thing üéâ &lt;a href="https://t.co/CgJkq7aREh"&gt;twitter.com/zachklipp/stat‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:10 PM - 30 Mar 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Office of Zachary Klippenstein
          &lt;/span&gt;
          &lt;a class="comment-mentioned-user" href="https://dev.to/zachklipp"&gt;@zachklipp&lt;/a&gt;

        &lt;/div&gt;
        ‚Ä¶when the button is clicked, which functions will be called on the next composition (recomposed)? 

(see thread above for code)
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1376944869046771712" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1376944869046771712" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1376944869046771712" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;In other words, it doesn't matter. If you've followed the Compose best practices, your code will Just Work, regardless of what fancy optimizations Compose decides to do under the hood.&lt;/p&gt;

&lt;p&gt;That will be great in a few &lt;del&gt;years&lt;/del&gt; months, when you and your team have internalized everything and barely remember what a &lt;code&gt;LayoutParam&lt;/code&gt; is. It's great to be able to ignore the details and just read/write code. But when learning something new, it's usually helpful to peek behind the curtain and understand why things work the way they do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highlevel-analysis" class="anchor"&gt;
  &lt;/a&gt;
  High-level analysis
&lt;/h2&gt;

&lt;p&gt;If you‚Äôre writing this code and trying to reason about what &lt;em&gt;your&lt;/em&gt; code is doing (and not, for example, how &lt;code&gt;Button&lt;/code&gt; works internally), the answer you probably care about the most is the third one: "&lt;code&gt;Button&lt;/code&gt;'s content lambda".&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When you click the button, the text &lt;code&gt;MutableState&lt;/code&gt;'s value is changed.&lt;/li&gt;
&lt;li&gt;The only function that reads that state object is the button‚Äôs content lambda, and so the content lambda gets invalidated.&lt;/li&gt;
&lt;li&gt;The content lambda eventually gets re-executed, which reads the new text value, and passes it to &lt;code&gt;Text&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;(really 3 ¬Ω) Because the text is different, &lt;code&gt;Text&lt;/code&gt; will then be ran as well.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A lot of people expected something else, so I'll run through why the other answers are &lt;del&gt;wrong&lt;/del&gt; "less right" in the order they were voted.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#some-fundamentals" class="anchor"&gt;
  &lt;/a&gt;
  Some fundamentals
&lt;/h1&gt;

&lt;p&gt;Before diving into this particular code snippet, let's go over some basics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recompose-scopes" class="anchor"&gt;
  &lt;/a&gt;
  Recompose scopes
&lt;/h2&gt;

&lt;p&gt;Recompose scopes are an important piece of the Compose puzzle. They do some bookkeeping and help reduce the amount of work Compose has to do to prepare a frame.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They are the smallest unit of a composition that can be re-executed (recomposed) to update the underlying tree.&lt;/li&gt;
&lt;li&gt;They keep track of what snapshot-based &lt;code&gt;State&lt;/code&gt; objects are read inside of them, and get invalidated when those states change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For every non-inline composable function that returns &lt;code&gt;Unit&lt;/code&gt;, the Compose compiler generates code that wraps the function‚Äôs body in a recompose scope. When a recompose scope is invalidated, the compose runtime will ensure the (entire) function body gets recomposed (reexecuted) before the next frame. Functions are a natural delimiter for re-executable chunks of code, because they already have well-defined entry and exit points.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Foo&lt;/code&gt;‚Äôs body, &lt;code&gt;Button&lt;/code&gt;‚Äôs body, the content lambda we pass to &lt;code&gt;Button&lt;/code&gt;, &lt;code&gt;Text&lt;/code&gt;‚Äôs body, all get their own recompose scopes.&lt;/p&gt;

&lt;p&gt;
  What about inline functions and functions that return a value?
  &lt;p&gt;Inline functions are inline - their bodies are effectively copied into their caller, so they share their caller‚Äôs recompose scope.&lt;/p&gt;

&lt;p&gt;Functions that have a non-unit return value don‚Äôt get their own scopes because they can‚Äôt be re-executed without also re-executing their caller, so their caller can ‚Äúsee‚Äù the new return value computed by the function.&lt;/p&gt;



&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#expressions-and-function-calls" class="anchor"&gt;
  &lt;/a&gt;
  Expressions and function calls
&lt;/h2&gt;

&lt;p&gt;Before getting into any details about Compose itself, let's refresh a fundamental concept about how regular old function calls work. In Java/Kotlin, when you pass an expression to a function, that expression is evaluated in the calling function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is basically equivalent to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;arg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The values of all the arguments to a function call have to be evaluated before the JVM/ART can call the function, so that it can pass the results of those expressions to the function. You can also see this by doing &lt;code&gt;println(TODO())&lt;/code&gt; - &lt;code&gt;println&lt;/code&gt; will be highlighted as unreachable code, because the &lt;code&gt;TODO()&lt;/code&gt; never returns, so the &lt;code&gt;println&lt;/code&gt; call will never be hit. &lt;/p&gt;

&lt;p&gt;In the original code snippet, this means that the compiler generates the code to read the &lt;code&gt;text&lt;/code&gt; state inside the content lambda, and then passes the result of the read to &lt;code&gt;Text&lt;/code&gt;. The Compose compiler doesn‚Äôt know that the value of the read is only used in the one spot. At least right now - it could, potentially, figure this out via data flow analysis, but it is not that fancy at the moment. All it knows is that the content lambda reads &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#show-your-work" class="anchor"&gt;
  &lt;/a&gt;
  Show your work
&lt;/h1&gt;

&lt;p&gt;Let's look at our code snippet again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Composable&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;text&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;remember&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"$text\n$text"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-isnt-just-raw-text-endraw-recomposed" class="anchor"&gt;
  &lt;/a&gt;
  Why isn‚Äôt just &lt;code&gt;Text&lt;/code&gt; recomposed?
&lt;/h2&gt;

&lt;p&gt;If we think of the &lt;code&gt;text&lt;/code&gt; read as happening on its own line just above the &lt;code&gt;Text&lt;/code&gt; call, then look for the nearest recompose scope enclosing that - it‚Äôs the button content lambda. That‚Äôs the recompose scope that gets invalidated when the text state value is changed. &lt;/p&gt;

&lt;p&gt;So when text is changed, and the lambda‚Äôs recompose scope is invalidated, the entire lambda body gets recomposed for the next frame.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-isnt-all-of-raw-foo-endraw-recomposed" class="anchor"&gt;
  &lt;/a&gt;
  Why isn't all of &lt;code&gt;Foo&lt;/code&gt; recomposed?
&lt;/h2&gt;

&lt;p&gt;Now that we know how recompose scopes are delimited and invalidated, we can see that nothing directly in &lt;code&gt;Foo&lt;/code&gt; reads any &lt;code&gt;State&lt;/code&gt;, so it will never actually recompose.&lt;/p&gt;

&lt;p&gt;This might be more apparent if we get rid of the delegate syntax for &lt;code&gt;text&lt;/code&gt;, which doesn't change behavior but hides what's actually going on a bit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Composable&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;MutableState&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;remember&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"${text.value}\n${text.value}"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's a lot more clear now that all &lt;code&gt;Foo&lt;/code&gt; does with &lt;code&gt;text&lt;/code&gt; is create the &lt;code&gt;MutableState&lt;/code&gt; value holder. The actual object referenced by &lt;code&gt;text&lt;/code&gt; doesn't change, it always points to the same &lt;code&gt;MutableState&lt;/code&gt; instance. When we talk about state "reads", we mean reads of the &lt;code&gt;State&lt;/code&gt;'s &lt;code&gt;value&lt;/code&gt; property ‚Äì e.g. &lt;code&gt;text.value&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-isnt-raw-button-endraw-recomposed" class="anchor"&gt;
  &lt;/a&gt;
  Why isn't &lt;code&gt;Button&lt;/code&gt; recomposed?
&lt;/h2&gt;

&lt;p&gt;Because &lt;code&gt;Foo&lt;/code&gt; isn't recomposed, nothing calls the &lt;code&gt;Button&lt;/code&gt; function itself on recomposition.&lt;/p&gt;

&lt;p&gt;However, this is a bit of a trick question: There may or may not be functions deep inside &lt;code&gt;Button&lt;/code&gt;'s implementation that recompose in certain cases, but that doesn't affect our code, so we can ignore those. &lt;code&gt;Button&lt;/code&gt; does maintain some private state, so it can show its pressed status and the ripple, but they might not actually require recomposition, instead they can just request re-draws.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-the-raw-onclick-endraw-lambda" class="anchor"&gt;
  &lt;/a&gt;
  What about the &lt;code&gt;onClick&lt;/code&gt; lambda?
&lt;/h3&gt;

&lt;p&gt;Recompose scopes are only created around &lt;em&gt;composable&lt;/em&gt; functions. Event handlers, like &lt;code&gt;Button&lt;/code&gt;'s &lt;code&gt;onClick&lt;/code&gt;, are &lt;em&gt;not&lt;/em&gt; composable, they're just regular functions. When the click handler is invoked by the framework, it is done so outside of any recompose scope. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h1&gt;

&lt;p&gt;You might be surprised to find out (and I often forget) that common layouts like &lt;code&gt;Column&lt;/code&gt;, &lt;code&gt;Row&lt;/code&gt;, and &lt;code&gt;Box&lt;/code&gt; are all inline functions. Even the core &lt;code&gt;Layout&lt;/code&gt; composable itself is inline. If you wrap the &lt;code&gt;Text&lt;/code&gt; in the original code snippet in a &lt;code&gt;Column&lt;/code&gt; and add trace statements, you‚Äôll see that the invalidated scope is still the entire button content lambda, not just the &lt;code&gt;Column&lt;/code&gt; content lambda.  &lt;/p&gt;

&lt;p&gt;This means in a regular program, you might end up recomposing a lot more than you‚Äôd expect just from looking at the code. And in general, it‚Äôs impossible to determine what will be recomposed by just looking at a particular code snippet without knowing if functions are inline. &lt;/p&gt;

&lt;p&gt;It‚Äôs also important to remember that a lot of these rules might change in the future. The compose team might change the rules at any time. Luckily, as Sean said, it shouldn‚Äôt affect correctness. All this function skipping is just an optimization. This is (one of the reasons) why it‚Äôs so important to not do stuff like perform side effects directly in composables. Use &lt;code&gt;LaunchedEffect&lt;/code&gt;, &lt;code&gt;DisposableEffect&lt;/code&gt;, and &lt;code&gt;SideEffect&lt;/code&gt;. Use tools like &lt;code&gt;remember {}&lt;/code&gt; or &lt;code&gt;derivedStateOf {}&lt;/code&gt; for expensive computations.&lt;/p&gt;

&lt;p&gt;Follow the &lt;a href="https://developer.android.com/jetpack/compose/state"&gt;documented best practices&lt;/a&gt; and you won‚Äôt need to worry about exactly what gets recomposed when - now or in the future.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks to &lt;a href="https://twitter.com/objcode"&gt;Sean&lt;/a&gt; for reviewing this post!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>kotlin</category>
    </item>
    <item>
      <title>Learning to Appreciate React Server Components</title>
      <author>Ryan Carniato</author>
      <pubDate>Wed, 31 Mar 2021 17:46:07 +0000</pubDate>
      <link>https://dev.to/this-is-learning/learning-to-appreciate-react-server-components-49ka</link>
      <guid>https://dev.to/this-is-learning/learning-to-appreciate-react-server-components-49ka</guid>
      <description>&lt;p&gt;This is my personal journey, so if you are here hoping for the general "How To" guide you won't find it here. Instead, if you are interested in how I, a JavaScript Framework author, struggled to see obvious things right in front of me, you're in the right place. I literally had both pieces in front of me and was just not connecting the dots.&lt;/p&gt;

&lt;p&gt;It isn't lost on me I'm talking about a yet-to-be-released feature like it is some long journey, but for me it is. If you aren't familiar with &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;React Server Components&lt;/a&gt; this article will make no sense. You see we are on the cusp of a very exciting time in JavaScript frameworks that have been in the making for years and we are so close you can almost taste it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-the-beginning-there-was-marko" class="anchor"&gt;
  &lt;/a&gt;
  In the beginning there was Marko
&lt;/h1&gt;

&lt;p&gt;Now you're probably thinking isn't this an article about React Server components. Shhh... patience. We're getting there.&lt;/p&gt;

&lt;p&gt;You see I work 12 hours a day. 8 hours of that is my professional job where I am a developer on the &lt;a href="https://markojs.com/"&gt;Marko&lt;/a&gt; core team at eBay. Then after some much-needed time with my family, my second job starts where I am core maintainer of the under-the-radar hot new reactive framework &lt;a href="https://github.com/ryansolid/solid"&gt;Solid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Marko is arguably the best on-demand JavaScript server rendering framework solution to date from a technical perspective. I'd argue not even close but maybe that's a bit biased. But the benchmarks so declare and the technology is something that every library envies(yes even React, but we will get to that).&lt;/p&gt;

&lt;p&gt;If you aren't familiar with Marko it's a compiled JavaScript framework like Svelte that started development in 2012 and reached 1.0 in 2014. And what a 1.0 that was, considering it shipped with progressive(streaming) server rendering and only shipping JavaScript to the client needed for interactivity(evolved into Partial Hydration). Two of the most coveted features for a JavaScript framework in 2021.&lt;/p&gt;

&lt;p&gt;But it makes sense. Marko was made as a real solution for eBay at scale from the start. It was aggressively pursued and within a couple of years had taken over the majority of the website. It replaced the Java that was there as a full-stack solution from the start. React's path to adoption at Facebook was much more incremental.&lt;/p&gt;

&lt;p&gt;Now Marko had come up with quite an interesting system for Progressive Rendering in 2014. While really just an example of using the platform, it was oddly missing from modern frameworks. As Patrick, the author of Marko describes in &lt;a href="https://tech.ebayinc.com/engineering/async-fragments-rediscovering-progressive-html-rendering-with-marko/"&gt;Async Fragments: Rediscovering Progressive HTML Rendering with Marko&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Instead of waiting for an async fragment to finish, a placeholder HTML element with an assigned id is written to the output stream. Out-of-order async fragments are rendered before the ending &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag in the order that they complete. Each out-of-order async fragment is rendered into a hidden &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element. Immediately after the out-of-order fragment, a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; block is rendered to replace the placeholder DOM node with the DOM nodes of the corresponding out-of-order fragment. When all of the out-of-order async fragments complete, the remaining HTML (e.g. &lt;code&gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/code&gt;) will be flushed and the response ended.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Automatic placeholders and insertions all part of the streamed markup (outside of the library code) is super powerful. When combined with Marko's Partial Hydration it meant in some cases there was no additional hydration after this point as the only dynamic part of the page was the data loading. This all delivered in a high-performance non-blocking way.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#renderasyoufetch" class="anchor"&gt;
  &lt;/a&gt;
  Render-as-you-Fetch
&lt;/h1&gt;

&lt;p&gt;I had never heard of it referred to this before reading React's &lt;a href="https://reactjs.org/docs/concurrent-mode-suspense.html#approach-3-render-as-you-fetch-using-suspense"&gt;Suspense for Data Fetching&lt;/a&gt; docs but you better believe I'd hit this scenario before.&lt;/p&gt;

&lt;p&gt;You don't need Suspense to do this. You just have the fetch set the state and render what you can which is usually some loading state. Generally, the parent would own the data-loading and the loading state and coordinate the view of the page.&lt;/p&gt;

&lt;p&gt;GraphQL took things further with the ability to co-locate fragments with your components. In a sense, you are still giving control of data fetching higher up the tree to allow for orchestration, but the components and pages could still set the data requirements. However, we have a problem here still when code-splitting enters the picture. You end up waiting for the code to fetch before making data requests when navigating.&lt;/p&gt;

&lt;p&gt;Facebook had solved this with &lt;a href="https://relay.dev/"&gt;Relay&lt;/a&gt; which with strict structure and tooling could properly parallelize the code and data fetching. But you can't expect everyone to use that solution.&lt;/p&gt;

&lt;p&gt;The problem is by simple JavaScript means you can't split a module. You can treeshake unused code. You can lazy import a whole module. But you can't only include the code you want at different times. Some bundlers are looking into the possibility of doing this automatically, but this isn't something we have today. (Although it is possible to use virtual modules and some bundler sorcery to achieve this)&lt;/p&gt;

&lt;p&gt;So the simple solution was to do the split yourself. The easiest answer is not lazy load the routes but to make a HOC wrapper for each. Assuming there is a Suspense boundary about the router you might do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;lazy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HomePage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./homepage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HomePageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="cm"&gt;/* ... load the data and set the state */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I used this approach relentlessly in my Solid demos to have the quickest loading times. At some point last summer I decided that this was mostly boilerplate. If I was going to make a file-based routing system for our new starter similar to Next.js I wanted this solved. The solution was to build a data component route into the router.&lt;/p&gt;

&lt;p&gt;One simply writes their components in pairs. &lt;code&gt;homepage.js&lt;/code&gt; and &lt;code&gt;homepage.data.js&lt;/code&gt; and if the second is present the library will automatically wire this up and handle all the code splitting and parallel fetching for you even on nested routes. Instead of wrapping the child, the data component would return the data.&lt;/p&gt;

&lt;p&gt;From server vs client perspective the library providing a constant &lt;code&gt;isServer&lt;/code&gt; variable would allow any bundler to dead code eliminate the server only code from the client. I could make data components use SQL queries on the server, and API calls for the client seamlessly.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#react-server-components" class="anchor"&gt;
  &lt;/a&gt;
  React Server Components
&lt;/h1&gt;

&lt;p&gt;On December 21st 2020, &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;React Server Components&lt;/a&gt; were previewed. And I just didn't see them coming. I was blindsided in that the main things they were trying to solve already had a solution. Suspense on the server was completely doable and so was parallelized data fetching around code splitting.&lt;/p&gt;

&lt;p&gt;Being able to identify which components didn't need to be in the client bundle was nice but manual. It was something Marko had been able to auto-detect with its compiler for years, and if we are talking interactive SPA I just wasn't seeing it. Especially if it increased React's code size by more than 2 Preacts(standard unit of JS framework size measurement). Anything being done here could easily be done with an API. And if you were going to be designing a modern system that supports web and mobile why wouldn't you have an API?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#something-unexpected" class="anchor"&gt;
  &lt;/a&gt;
  Something Unexpected
&lt;/h1&gt;

&lt;p&gt;Adam Rackis was lamenting React's handling of communication around Concurrent Mode and it spawned a discussion around seeing React's vision.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--P41J92Ve--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1183169082243375104/FwXKVe5H_normal.jpg" alt="Adam Rackis profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Adam Rackis
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @adamrackis
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/VdeVentura"&gt;@VdeVentura&lt;/a&gt; &lt;a href="https://twitter.com/dan_abramov"&gt;@dan_abramov&lt;/a&gt; Sorry but I‚Äôm extremely frustrated with how the React team has treated their community over the last few years. They of course don‚Äôt owe anything to anyone outside of Facebook, but I can choose to be disappointed nonetheless.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:21 PM - 26 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1375558675675418630" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1375558675675418630" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1375558675675418630" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Eventually, Dan Abramov, the gentleman he is, decided to respond (on the weekend no less) in a less volatile forum in a &lt;a href="https://github.com/facebook/react/issues/13206#issuecomment-808902135"&gt;Github issue&lt;/a&gt; addressing where things are at.&lt;/p&gt;

&lt;p&gt;This stood out to me:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For example, we didn't plan Suspense at all in the beginning. Suspense came out of a streaming server renderer exploration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Suspense was the first of the modern features announced back in early 2018, as the technique for lazy loading components. What?! This wasn't even its original intention. &lt;/p&gt;

&lt;p&gt;Suspense for Streaming SSR makes a ton of sense if you think about it. Server-side Suspense sounds a whole lot like Patrick's take on Out-of-Order progressive rendering in Marko.&lt;/p&gt;

&lt;p&gt;As consumers of a product we tend to take in each new piece of information in the context of the order we receive it. But have we been deceived? Has React actually been working on the features backwards?&lt;/p&gt;

&lt;p&gt;I can tell you as a framework author establishing stateful primitives seems like it should be the first step, but Hooks didn't show up until late 2018. It seems Hooks were not the starting point but the result of starting at the goal and walking back to the possible solution. &lt;/p&gt;

&lt;p&gt;It is pretty clear when you put this all in the context of the Facebook rewrite, the team had decided that the future was hybrid and that something like Server Components was the end game way back as far 2017 or possibly earlier.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#new-eyes" class="anchor"&gt;
  &lt;/a&gt;
  New Eyes
&lt;/h1&gt;

&lt;p&gt;Understanding that all the other pieces started falling into place. What I had seen as a progression was actually like watching segments of a movie playing in reverse. &lt;/p&gt;

&lt;p&gt;Admittedly I had suspected as much but it suggested that they had worked through a lot of these render-as-you-fetch on the server scenarios much earlier. One has to assume they had gotten to a similar place to my data components at some point.&lt;/p&gt;

&lt;p&gt;I also happened to be playing with Svelte Kit this week and noticed their &lt;a href="https://kit.svelte.dev/docs#routing-endpoints"&gt;Endpoints&lt;/a&gt; feature. These give an easy single file way to create APIs that mirror the file path by making &lt;code&gt;.js&lt;/code&gt; files. I looked at them and realized the basic example with &lt;code&gt;get&lt;/code&gt; was basically the same as my &lt;code&gt;.data.js&lt;/code&gt; components.&lt;/p&gt;

&lt;p&gt;So what does it take for the file-system-based routing to notice &lt;code&gt;.server.js&lt;/code&gt; files and preserve them as data components on the server as well as convert them into API endpoints, and auto-generate a call to that API endpoint as the data component for the client? With &lt;a href="https://vitejs.dev/guide/features.html#glob-import"&gt;Vite&lt;/a&gt; less than you might think.&lt;/p&gt;

&lt;p&gt;The result: you have code that always executing on the server. Even after the initial render. Yet is just part of your component hierarchy. A virtual return of "the monolith" in a single isomorphic experience.&lt;/p&gt;

&lt;p&gt;It really doesn't take much more to put together what would happen if the data was encoded JSX(or HTML) instead of JSON data. The client receiving this data is already wrapped in a Suspense boundary. If you could stream the view into those Suspense boundaries the same way as on the initial render it would close the loop.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#closing-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h1&gt;

&lt;p&gt;So the evolution of the idea is actually a pretty natural one. The fact that many platforms are API-based and don't need "the monolith" is beside the point. Server Components are really the extension of the ideas around parallelized data loading and code splitting we've already seen in Facebook's Relay.&lt;/p&gt;

&lt;p&gt;Am going out now looking at how to implement them everywhere? Probably not. Marko has shown there are other paths to Partial Hydration and aggressive code elimination. I'm going to continue to explore data components before looking at the rendering aspect. But at least I feel I better understand how we got here.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript Internals - Garbage Collection</title>
      <author>Amit Khonde</author>
      <pubDate>Wed, 31 Mar 2021 17:19:32 +0000</pubDate>
      <link>https://dev.to/amitkhonde/javascript-internals-garbage-collection-27lh</link>
      <guid>https://dev.to/amitkhonde/javascript-internals-garbage-collection-27lh</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-this-series-about" class="anchor"&gt;
  &lt;/a&gt;
  What is this series about
&lt;/h1&gt;

&lt;p&gt;Understanding the things or tools that you use in your daily work is a very crucial part of doing things effectively. As a frontend engineer JavaScript is the tool that we use on an almost daily basis. So it is non-trivial that we understand some internals of JavaScript to do our tasks more effectively.&lt;/p&gt;

&lt;p&gt;With this in mind, I am excited to create JavaScript Internals as a series of posts where I will be writing about the internal workings of the V8 engine and how we can write code that is compiler friendly and in turn performant.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#post-2-garbage-collection" class="anchor"&gt;
  &lt;/a&gt;
  Post 2: Garbage Collection
&lt;/h1&gt;

&lt;p&gt;Imagine you arrive at a restaurant. There are a hundred tables at the restaurant. Out of 100, 95 tables are still occupied and at the remaining 5 tables, people have just left and their plates are still on the tables. Now for you to sit, restaurant staff will clear out one of those five tables or all of them and you would sit and enjoy your meal.&lt;/p&gt;

&lt;p&gt;Did you see what happened here? If we are to make analogies to the JavaScript environment, you are a new object, 100 tables are the available memory, 95 occupied tables are 95 active objects and 5 empty tables with dirty dishes are the dead objects that your application does not need anymore. Now, the restaurant staff is the JavaScript engine, who will clear those 5 dead objects and make the space for the new objects. THAT‚ÄôS IT. This process is known as garbage collection. Now there are various algorithms to perform garbage collection optimally, one of which we will learn further in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-learning-about-garbage-collection-is-important" class="anchor"&gt;
  &lt;/a&gt;
  Why Learning about Garbage Collection Is Important?
&lt;/h2&gt;

&lt;p&gt;Well, there is this cliche answer again: To improve your application‚Äôs performance. I know you all knew this answer coming. So let me give you one small example. Suppose you accidentally assign one global object which is very large in size. Now you are not going to use that object ever again in the application life cycle. But it will hold space in the memory as it is a global object and V8 will assume that you are going to need it. So my point is, after learning the internals, you will be armed with the knowledge of how you can write JavaScript which will leave a lesser memory footprint.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-basics" class="anchor"&gt;
  &lt;/a&gt;
  The Basics
&lt;/h2&gt;

&lt;p&gt;Cool. So now that we are determined and not bored by the above examples, let us get some basics out of the way. First things first: V8 manages garbage collection. Not the JavaScript. What this implies is that there is no specification to follow on how to implement this piece. So every JavaScript engine implements its own version which developers think is the best approach.&lt;br&gt;
Another thing about V8 is that it uses the generational algorithm for garbage collection. This means it divides data into Younger Generation and Older Generation. We will talk about these generations in detail in further sections. &lt;/p&gt;

&lt;p&gt;You might ask why V8 uses a generational algorithm? Well, the V8 team believes in something known as the generational hypothesis. Which states: All objects die shortly after creation. They have found this hypothesis by observing multiple applications and their memory footprints. This is the reason they use the generational algorithm and run garbage collection cycles mostly on younger generation memory. Now let us talk about the younger and older generation and see how garbage is collected in both of them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#young-generation-and-old-generation" class="anchor"&gt;
  &lt;/a&gt;
  Young Generation and Old Generation
&lt;/h2&gt;

&lt;p&gt;Now, we will understand the whole process step by step and with help of some images.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a46ELubA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34y5yazx69f286njwkjf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a46ELubA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34y5yazx69f286njwkjf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
So as we can see, the whole memory in V8 is divided into 2 parts. Young generation and Old generation. The young generation in turn is divided into two parts. Don‚Äôt worry about that right now. We will see why it is being done in further steps.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pOf60iPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lquy8fwdeyaflky3xhq8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pOf60iPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lquy8fwdeyaflky3xhq8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Now when we start declaring objects and start using them, V8 will keep filling up the first part of the young generation.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nA5zoa3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjshiw1gg5gne2d6xm2j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nA5zoa3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjshiw1gg5gne2d6xm2j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
When the first part of the young generation is completely filled, V8 will mark the objects dead or alive and the alive objects will be moved to the second part of the young generation. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4cxWvnh5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5xl0givt5clm8qpf1vk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4cxWvnh5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5xl0givt5clm8qpf1vk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Now all the new objects will be placed in the second part of the young generation until that is filled.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5HxeGm_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ox3gawp4hh8vfqiord71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5HxeGm_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ox3gawp4hh8vfqiord71.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Now comes the interesting part. Once the second part of the young generation is also completely filled, V8 will again mark the objects dead or alive and the alive objects will now be moved to Old Generation because if the object is still surviving, it is like to stay alive for a long time. After this, the second part is cleared and the same process from step 1 to step 5 is followed for new objects. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mark-and-sweep-in-old-generation" class="anchor"&gt;
  &lt;/a&gt;
  Mark And Sweep in Old Generation
&lt;/h2&gt;

&lt;p&gt;Now while V8 is doing this process, at some point in time, there will be no enough space for a new object in the old generation, a full mark, and sweep garbage collection algorithm will come into the picture. &lt;br&gt;
Mark and sweep is a two-step process. The first part mark is where V8 will try to reach out to every accessible object from the call stack and global scope. All reachable objects are marked as alive and rest are marked as dead. &lt;/p&gt;

&lt;p&gt;Now we have to understand that Old generation is quite large and the object sizes in it are also very large. That is why V8 can just remove dead objects as it does in the young generation because it will be a very heavy computation. Due to this limitation, the sweep process is done in various cycles where V8 will create some parallel threads and keep on sweeping memory in parts. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Sigh!! That was quite a ride. Now there is a lot of other detailing and tricks on how V8 manages garbage collection which we can not cover in a single post. I would suggest you go through the references section of this article and definitely check out the links if those excite you. Till then, Happy Coding!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>performance</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
