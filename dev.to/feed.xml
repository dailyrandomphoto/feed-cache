<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Stop mutating in map, reduce and forEach</title>
      <author>Stephan Meijer</author>
      <pubDate>Mon, 14 Dec 2020 11:49:41 +0000</pubDate>
      <link>https://dev.to/smeijer/stop-mutating-in-map-reduce-and-foreach-58bf</link>
      <guid>https://dev.to/smeijer/stop-mutating-in-map-reduce-and-foreach-58bf</guid>
      <description>&lt;p&gt;There are plenty of articles that will try to convince you that you should use the &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt; methods. Less of them mention &lt;code&gt;forEach&lt;/code&gt;, and not many of them mention the more traditional for loops as serious alternative. Or when to use &lt;code&gt;map&lt;/code&gt; over &lt;code&gt;reduce&lt;/code&gt; or especially &lt;code&gt;forEach&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Programming is mostly about opinions and (maybe a bit too much) about something that we like to call "common sense". In this article, I'm sharing my opinion, and write about the functions and the problem of side effects (mutating). Triggered by &lt;a href="https://twitter.com/erikras/status/1338415676709605376?s=20"&gt;this tweet of Erik Rasmussen&lt;/a&gt; today, and experience from the past. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ykWfu637--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EpMA69KXcAAWXqT.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--owyvu4UC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1239587498344566784/1BxVOYSi_normal.jpg" alt="Erik Rasmussen 👨🏻‍💻🇺🇸🇪🇸 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Erik Rasmussen 👨🏻‍💻🇺🇸🇪🇸
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/erikras"&gt;@erikras&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      'sup Opinionated Dev Twitter!&lt;br&gt;&lt;br&gt;I'm doing a code review and came across this structure. Mutating the items in a map() call feels very wrong. It feels like it should be a reduce(), but then you're creating another array. forEach() would require additional lines.&lt;br&gt;&lt;br&gt;What say you? 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      09:28 AM - 14 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1338415676709605376" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1338415676709605376" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      3
      &lt;a href="https://twitter.com/intent/like?tweet_id=1338415676709605376" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      10
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I still remember this change I requested during a code review. It grew among the team, and was even discussed during the next retrospective. PR #1069, July 18, 2019, author &lt;em&gt;unimportant&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;checkID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// eslint-disable-line no-unused-expressions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;My request was to change it to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;checkID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A little background, &lt;code&gt;path&lt;/code&gt; is a &lt;code&gt;string[]&lt;/code&gt;, and &lt;code&gt;checkID&lt;/code&gt; does some validations on that string to see if it's a id-like value. If not, it will throw an error.&lt;/p&gt;

&lt;p&gt;Why my change request, and why mention it in the retro? There is no law against calling methods in the map function, or throwing from within it. It was just that it doesn't match with my expectations. And I still believe I'm in my rights there.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#map" class="anchor"&gt;
  &lt;/a&gt;
  Map
&lt;/h1&gt;

&lt;p&gt;My expectations for &lt;code&gt;map&lt;/code&gt; is that it "maps" one value to another. Like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There is an input value (&lt;code&gt;[1, 2, 3]&lt;/code&gt;), map does something with it, and returns an entirely new value. &lt;code&gt;input !== output&lt;/code&gt; and my expectation is that whenever an array value changed, it doesn't match the previous value either. In other words I expect that at least for one element &lt;code&gt;input[n] !== output[n]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We're also able to extract the callback function so that we end up with a pure, testable function. My expectation from a &lt;code&gt;map&lt;/code&gt; call, is always that it is side effect free. No exceptions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#expectations" class="anchor"&gt;
  &lt;/a&gt;
  Expectations
&lt;/h2&gt;

&lt;p&gt;Now let's take that example from Erik&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And build some code around this, so it get's a bit easier to work with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addUserId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addUserId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;How do you now feel about mutating the item objects inside that &lt;code&gt;map&lt;/code&gt;? When you look at the small snippet from Erik, you might be ok with it. But after extracting that callback function, I hope it starts to feel wrong. If you don't see the problem I'm trying to highlight, try answer the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what does &lt;code&gt;items[0]&lt;/code&gt; look like?&lt;/li&gt;
&lt;li&gt;what does &lt;code&gt;newItems[0]&lt;/code&gt; look like?&lt;/li&gt;
&lt;li&gt;what does &lt;code&gt;items === newItems&lt;/code&gt; return?&lt;/li&gt;
&lt;li&gt;what does &lt;code&gt;items[0] === newItems[0]&lt;/code&gt; return?&lt;/li&gt;
&lt;li&gt;do these answers match your expectations?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#foreach" class="anchor"&gt;
  &lt;/a&gt;
  forEach
&lt;/h1&gt;

&lt;p&gt;Not let's simply change that map call to a &lt;code&gt;forEach&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addUserId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What does this do with your expectations? Did it change anything?&lt;/p&gt;

&lt;p&gt;Whenever I see a &lt;code&gt;forEach&lt;/code&gt;, I expect side effects. Something is being done for (or to) each value in the array. The fact that forEach doesn't have a return value, strengthens this feeling.&lt;/p&gt;

&lt;p&gt;And this is entirely personal, but I stopped using the functional forEach calls to mutate the objects as well. I'm still okay with a &lt;code&gt;forEach(sideEffect)&lt;/code&gt; but I won't use it to mutate values. I'm using the &lt;code&gt;for of&lt;/code&gt; loops for that, as I find it easier to recognize them as causing mutations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Please compare that to the original, and feel free to share your thoughts in the comments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newItems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#reduce" class="anchor"&gt;
  &lt;/a&gt;
  Reduce
&lt;/h1&gt;

&lt;p&gt;Some would say that &lt;code&gt;reduce&lt;/code&gt; is meant for mutating values. In my opinion, they're wrong. Reduce is meant for when the shape of the container changes. Think conversions between objects and arrays, or even collections to strings and numbers. Or a change of length of the array. Reduce is more about changing the shape of the entire collection, then it's about changing the shape of individual entries. For that, we have &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One clear purpose I see for reduce, is when you feel the need to use both &lt;code&gt;filter&lt;/code&gt; as well as &lt;code&gt;map&lt;/code&gt;. Reduce is able to combine those two, and spare you that extra iteration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The difference here is that &lt;code&gt;reduce&lt;/code&gt; only walks the array a single time, whereas the &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; combo walks the array two times. For 5 entries, this isn't a big deal. For larger lists, &lt;del&gt;it might&lt;/del&gt; it's no big deal either. &lt;em&gt;(I thought it was, but &lt;a href="https://dev.to/aprillion/comment/196j9"&gt;I was wrong&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That being said, for this specific example, I do feel that the &lt;code&gt;filter().map()&lt;/code&gt; is easier to read. And with that, we are back to the "common sense" issue. Programming isn't all black and white. We can't document, spec, or lint every single rule or choice that we have to make. Use what feels best and take your time to consider the alternatives.&lt;/p&gt;

</description>
      <category>es6</category>
      <category>javascript</category>
      <category>development</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Quick Guide To this Keyword In JavaScript: What this Is And When</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 14 Dec 2020 07:10:01 +0000</pubDate>
      <link>https://dev.to/alexdevero/a-quick-guide-to-this-keyword-in-javascript-what-this-is-and-when-7i5</link>
      <guid>https://dev.to/alexdevero/a-quick-guide-to-this-keyword-in-javascript-what-this-is-and-when-7i5</guid>
      <description>&lt;p&gt;Many JavaScript developers try to avoid using the &lt;code&gt;this&lt;/code&gt; keyword. One reason is that what &lt;code&gt;this&lt;/code&gt; refers to changes. This guide will help you with it. You will learn what &lt;code&gt;this&lt;/code&gt; keyword refers to in specific contexts. This will make it easier for you to work with it and help you predict what to expect when you use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-introduction" class="anchor"&gt;
  &lt;/a&gt;
  Quick introduction
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; is a special keyword in JavaScript. There is one problem JavaScript developers struggle with when they learn about &lt;code&gt;this&lt;/code&gt;. It can have different values. It can refer to different things. What determines what &lt;code&gt;this&lt;/code&gt; refers to is context, the context at which you use it. Let's take a look at these contexts and what to expect from &lt;code&gt;this&lt;/code&gt; keyword in each of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strict-and-sloppy-mode" class="anchor"&gt;
  &lt;/a&gt;
  Strict and sloppy mode
&lt;/h2&gt;

&lt;p&gt;In JavaScript, there are two modes or variants of JavaScript you can work with. The first one is &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/strict_mode"&gt;strict mode&lt;/a&gt;. The second one is &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Sloppy_mode"&gt;sloppy mode&lt;/a&gt;. By default, you write your JavaScript code in a sloppy mode. This mode is more ... sloppy. It allows you to do things that would be &lt;a href="http://speakingjs.com/es5/ch07.html#strict_mode"&gt;forbidden&lt;/a&gt; in a strict mode. These things would not work.&lt;/p&gt;

&lt;p&gt;JavaScript offers you an option to switch from sloppy mode to strict mode. You can do this by using &lt;code&gt;'use strict'&lt;/code&gt; statement at the beginning of your code. Any code that follows after this statement will automatically follow the rules and restrictions of strict mode. This also includes the &lt;code&gt;this&lt;/code&gt; keyword.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#global-scope" class="anchor"&gt;
  &lt;/a&gt;
  Global scope
&lt;/h2&gt;

&lt;p&gt;When you are in a global scope, the &lt;code&gt;this&lt;/code&gt; keyword will refer to the global object &lt;code&gt;window&lt;/code&gt;. This is the case at least if you are in the browser. If you are in a Node.js environment, the &lt;code&gt;this&lt;/code&gt; will refer to global object called &lt;code&gt;global&lt;/code&gt;. In a global scope, it doesn't matter if you are in a sloppy mode or a strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Global context example no.1: sloppy mode&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;

&lt;span class="c1"&gt;// In Node.js:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;ref *1&amp;gt; Object [global] {&lt;/span&gt;
&lt;span class="c1"&gt;//   global: [Circular *1],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearInterval: [Function: clearInterval],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearTimeout: [Function: clearTimeout],&lt;/span&gt;
&lt;span class="c1"&gt;//   setInterval: [Function: setInterval],&lt;/span&gt;
&lt;span class="c1"&gt;//   setTimeout: [Function: setTimeout] {&lt;/span&gt;
&lt;span class="c1"&gt;//     [Symbol(nodejs.util.promisify.custom)]: [Getter]&lt;/span&gt;
&lt;span class="c1"&gt;//   },&lt;/span&gt;
&lt;span class="c1"&gt;//   queueMicrotask: [Function: queueMicrotask],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearImmediate: [Function: clearImmediate],&lt;/span&gt;
&lt;span class="c1"&gt;//   setImmediate: [Function: setImmediate] {&lt;/span&gt;
&lt;span class="c1"&gt;//     [Symbol(nodejs.util.promisify.custom)]: [Getter]&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Global context example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;

&lt;span class="c1"&gt;// In Node.js:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;ref *1&amp;gt; Object [global] {&lt;/span&gt;
&lt;span class="c1"&gt;//   global: [Circular *1],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearInterval: [Function: clearInterval],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearTimeout: [Function: clearTimeout],&lt;/span&gt;
&lt;span class="c1"&gt;//   setInterval: [Function: setInterval],&lt;/span&gt;
&lt;span class="c1"&gt;//   setTimeout: [Function: setTimeout] {&lt;/span&gt;
&lt;span class="c1"&gt;//     [Symbol(nodejs.util.promisify.custom)]: [Getter]&lt;/span&gt;
&lt;span class="c1"&gt;//   },&lt;/span&gt;
&lt;span class="c1"&gt;//   queueMicrotask: [Function: queueMicrotask],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearImmediate: [Function: clearImmediate],&lt;/span&gt;
&lt;span class="c1"&gt;//   setImmediate: [Function: setImmediate] {&lt;/span&gt;
&lt;span class="c1"&gt;//     [Symbol(nodejs.util.promisify.custom)]: [Getter]&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functions" class="anchor"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;p&gt;When it comes to [functions], the mode at which you are makes a difference for the &lt;code&gt;this&lt;/code&gt; keyword. When you are in sloppy mode, &lt;code&gt;this&lt;/code&gt; will refer to the global object &lt;code&gt;window&lt;/code&gt;. Global object &lt;code&gt;global&lt;/code&gt; in Node.js. This is true even for functions declared inside another functions, in a local scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function example no.1: function in a global scope&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log the value of this&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() function.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Function example no.2: function in a local scope&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the value of this&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#strict-mode" class="anchor"&gt;
  &lt;/a&gt;
  Strict mode
&lt;/h3&gt;

&lt;p&gt;This will change if you switch your JavaScript code to strict mode. In a strict mode, the default value of &lt;code&gt;this&lt;/code&gt; in a function is set to &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Strict mode example no.1: function in a global scope&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log the value of this&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() function.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;


&lt;span class="c1"&gt;// Strict mode example no.2: function in a local scope&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the value of this&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#immediately-invoked-function-expression-iife" class="anchor"&gt;
  &lt;/a&gt;
  Immediately Invoked Function Expression (IIFE)
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword works in IIFEs like in regular functions. In a sloppy mode, &lt;code&gt;this&lt;/code&gt; will refer to the global object &lt;code&gt;window&lt;/code&gt;. If you switch to a strict the value of &lt;code&gt;this&lt;/code&gt; will become &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// IIFE example no.1: sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare IIFE.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// IIFE example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Declare IIFE.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#function-constructors" class="anchor"&gt;
  &lt;/a&gt;
  Function constructors
&lt;/h3&gt;

&lt;p&gt;When you want to create new functions with similar behavior you can use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function"&gt;function constructor&lt;/a&gt;. This allows you to create a blueprint you can then use for your functions. If you use function constructor remember one thing. The &lt;code&gt;this&lt;/code&gt; keyword inside a constructor will refer to the instance of that constructor, not the constructor itself. This applies to both, sloppy and strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function constructors example no.1: sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Create function constructor Person.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create joe instance.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Create natalie instance.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;natalie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Natalie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke readPerson() method on joe instance.&lt;/span&gt;
&lt;span class="nx"&gt;joe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Joe',&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 31,&lt;/span&gt;
&lt;span class="c1"&gt;//   readPerson: ƒ (),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: Person { constructor: ƒ Person() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke readPerson() method on natalie instance.&lt;/span&gt;
&lt;span class="nx"&gt;natalie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Natalie',&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 28,&lt;/span&gt;
&lt;span class="c1"&gt;//   readPerson: ƒ (),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: Person { constructor: ƒ Person() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Function constructors example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create function constructor Person.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create joe instance.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Create natalie instance.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;natalie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Natalie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke readPerson() method on joe instance.&lt;/span&gt;
&lt;span class="nx"&gt;joe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Joe',&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 31,&lt;/span&gt;
&lt;span class="c1"&gt;//   readPerson: ƒ (),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: Person { constructor: ƒ Person() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke readPerson() method on natalie instance.&lt;/span&gt;
&lt;span class="nx"&gt;natalie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Natalie',&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 28,&lt;/span&gt;
&lt;span class="c1"&gt;//   readPerson: ƒ (),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: Person { constructor: ƒ Person() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#objects-and-methods" class="anchor"&gt;
  &lt;/a&gt;
  Objects and methods
&lt;/h2&gt;

&lt;p&gt;When you use &lt;code&gt;this&lt;/code&gt; keyword in an object method, the result can vary. What matters is if the method is a regular function or an arrow function. You will learn about &lt;code&gt;this&lt;/code&gt; and arrow functions later. For now, let's focus on regular functions.&lt;/p&gt;

&lt;p&gt;When you use &lt;code&gt;this&lt;/code&gt; in an object method, it will refer to the object itself. This is for both, sloppy as well as strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Object example no.1: sloppy mode&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;readObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the readObj() method on myObj.&lt;/span&gt;
&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// { name: 'Jack', age: 30, readObj: ƒ readObj() }&lt;/span&gt;


&lt;span class="c1"&gt;// Object example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;readObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the readObj() method on myObj.&lt;/span&gt;
&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// { name: 'Jack', age: 30, readObj: ƒ readObj() }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#classes" class="anchor"&gt;
  &lt;/a&gt;
  Classes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blog.alexdevero.com/javascript-classes-pt1/"&gt;JavaScript classes&lt;/a&gt; are a newer addition to JavaScript. They are definitely one of those more discussed features. Some developers like to use them and some not. If you like using them, or want to start using them, you will like what follows. When it comes to classes, the &lt;code&gt;this&lt;/code&gt; keyword is very consistent and predictable.&lt;/p&gt;

&lt;p&gt;It doesn't matter if you are in a sloppy mode or a strict mode. If you use &lt;code&gt;this&lt;/code&gt; in a class it will refer to the class itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Classes example no.1: with instantiation in sloppy mode (regular function, no binding)&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a class with public property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Instantiate the Person class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joshua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joshua&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() on "joshua" instance.&lt;/span&gt;
&lt;span class="nx"&gt;joshua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {name: "Joshua"}&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.2: with instantiation in sloppy mode (arrow function)&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a class with public property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Instantiate the Person class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joshua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joshua&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() on "joshua" instance.&lt;/span&gt;
&lt;span class="nx"&gt;joshua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {name: "Joshua", sayHi: ƒ}&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.3: with instantiation in strict mode (regular function, no binding)&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a class with public property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Instantiate the Person class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joshua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joshua&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() on "joshua" instance.&lt;/span&gt;
&lt;span class="nx"&gt;joshua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {name: "Joshua"}&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.4: with instantiation in strict mode (arrow function)&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a class with public property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Instantiate the Person class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joshua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joshua&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() on "joshua" instance.&lt;/span&gt;
&lt;span class="nx"&gt;joshua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   sayHi: ƒ (),&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Joshua',&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: Person { constructor: ƒ Person() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.5: without instantiation in sloppy mode (regular function, no binding)&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() method.&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// class Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   static name = 'Luke'&lt;/span&gt;
&lt;span class="c1"&gt;//   static sayHi() {&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this)&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this === Person)&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.6: without instantiation in sloppy mode (arrow function)&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() method.&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// class Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   static name = 'Luke'&lt;/span&gt;
&lt;span class="c1"&gt;//   static sayHi = () =&amp;gt; {&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this)&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this === Person)&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.7: without instantiation in strict mode (regular function, no binding)&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() method.&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// class Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   static name = 'Luke'&lt;/span&gt;
&lt;span class="c1"&gt;//   static sayHi() {&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this)&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this === Person)&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.8: without instantiation in strict mode (arrow function)&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() method.&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// class Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   static name = 'Luke'&lt;/span&gt;
&lt;span class="c1"&gt;//   static sayHi = () =&amp;gt; {&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this)&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this === Person)&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#event-listeners" class="anchor"&gt;
  &lt;/a&gt;
  Event listeners
&lt;/h2&gt;

&lt;p&gt;When you use the &lt;code&gt;this&lt;/code&gt; keyword with event listeners, it will refer to the HTML element to which you attach the event listener. If you attach event listener to a button, &lt;code&gt;this&lt;/code&gt; will refer to that button element. That button will become value of &lt;code&gt;this&lt;/code&gt;. If you attach event listener to global &lt;code&gt;window&lt;/code&gt; object, &lt;code&gt;this&lt;/code&gt; will refer to the global &lt;code&gt;window&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Event listener example no.1: sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Find button in the DOM.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;button&amp;gt;Click me&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Find button in the DOM.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;button&amp;gt;Click me&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.3: event listener on window&lt;/span&gt;
&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h2&gt;

&lt;p&gt;With &lt;a href="https://blog.alexdevero.com/javascript-arrow-functions/"&gt;arrow functions&lt;/a&gt;, &lt;code&gt;this&lt;/code&gt; keyword works differently than with regular functions. Arrow functions don't have their own &lt;code&gt;this&lt;/code&gt;. When you use &lt;code&gt;this&lt;/code&gt; in an arrow function it will inherit its value from its context. Context here is the context at which you defined that arrow function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global-and-local-scope-this-and-arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  Global and local scope, this and arrow functions
&lt;/h3&gt;

&lt;p&gt;If your arrow function is in a global scope, &lt;code&gt;this&lt;/code&gt; will refer to the global object &lt;code&gt;window&lt;/code&gt;. This is true for sloppy and strict mode. It is also true if the arrow function is inside a regular function, in a sloppy mode. If you are in a strict mode, and arrow function is inside a regular function, the value of &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Arrow function example no.1: global function in a sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare an arrow function.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log the value of this.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.2: global function in a strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a function.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log the value of this.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.3: local function in a sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a regular function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Return an arrow function.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the value of this.&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.4: local function in a strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a regular function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Return an arrow function.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the value of this.&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrow-iifes" class="anchor"&gt;
  &lt;/a&gt;
  Arrow IIFEs
&lt;/h3&gt;

&lt;p&gt;When you use arrow function to create Immediately Invoked Function Expression (IIFE) &lt;code&gt;this&lt;/code&gt; will refer to global &lt;code&gt;window&lt;/code&gt; object. This applies to both, sloppy as well as strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Arrow IIFE example no.1: sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare arrow IIFE.&lt;/span&gt;
&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow IIFE example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Declare arrow IIFE.&lt;/span&gt;
&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#objects-classes-this-and-arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  Objects, classes, this and arrow functions
&lt;/h3&gt;

&lt;p&gt;If you declared your arrow function in an object, &lt;code&gt;this&lt;/code&gt; will refer to global object &lt;code&gt;window&lt;/code&gt;. In case of a class, it will refer to the class itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Arrow function example no.5: object in sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare an object.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.6: object in strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.7: class in sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Luke()&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.8: class in strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Luke()&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#event-listeners-this-and-arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  Event listeners, this and arrow functions
&lt;/h3&gt;

&lt;p&gt;If you use arrow function as a callback for event listener, &lt;code&gt;this&lt;/code&gt; will refer to global object &lt;code&gt;window&lt;/code&gt;. This will happen in both, sloppy and also strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Arrow function example no.9: event listener in sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Find button in the DOM.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.10: event listener in strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Find button in the DOM.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.11: event listener on window&lt;/span&gt;
&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-a-quick-guide-to-this-keyword-in-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion: A quick guide to this keyword in JavaScript
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword can be sometimes confusing and unpredictable. It is no wonder some JavaScript developers don't like to use it, and even discourage it.  I hope that this tutorial helped you understand what &lt;code&gt;this&lt;/code&gt; keyword refers to in specific contexts.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a Stopwatch in JavaScript</title>
      <author>GSPTeck</author>
      <pubDate>Mon, 14 Dec 2020 07:02:36 +0000</pubDate>
      <link>https://dev.to/gspteck/create-a-stopwatch-in-javascript-2mak</link>
      <guid>https://dev.to/gspteck/create-a-stopwatch-in-javascript-2mak</guid>
      <description>&lt;p&gt;Creating a timer is a very simple task. We will only be using variables, functions and THAT'S IT!&lt;/p&gt;

&lt;p&gt;HTML code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;JavaScript&amp;lt;/title&amp;gt;

        &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div id="stopwatch"&amp;gt;
            00:00:00
        &amp;lt;/div&amp;gt;

        &amp;lt;ul id="buttons"&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;button onclick="startTimer()"&amp;gt;Start&amp;lt;/button&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;button onclick="stopTimer()"&amp;gt;Stop&amp;lt;/button&amp;gt;&amp;lt;/li&amp;gt;

            &amp;lt;li&amp;gt;&amp;lt;button onclick="resetTimer()"&amp;gt;Reset&amp;lt;/button&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;

        &amp;lt;script src="main.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;CSS code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
    background: #202020;
    color: white;
}
button {
    width: 100px;
    height: 30px;
    border: 3px soldi white;
    border-radius: 50px;
    background: #202020;
    color: white;
    cursor: pointer;
    outline: none;
}

#stopwatch {
    font-size: 100px;
    position: absolute;
    top: 45%;
    left: 50%;
    transform: translate(-50%, -55%);
}
#buttons {
    position: absolute;
    top: 55%;
    left: 48.4%;
    transform: translate(-51.6%, -45%);
}
#buttons li {
    display: inline;
    padding-left: 10px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;JavaScript code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const timer = document.getElementById('stopwatch');

var hr = 0;
var min = 0;
var sec = 0;
var stoptime = true;

function startTimer() {
  if (stoptime == true) {
        stoptime = false;
        timerCycle();
    }
}
function stopTimer() {
  if (stoptime == false) {
    stoptime = true;
  }
}

function timerCycle() {
    if (stoptime == false) {
    sec = parseInt(sec);
    min = parseInt(min);
    hr = parseInt(hr);

    sec = sec + 1;

    if (sec == 60) {
      min = min + 1;
      sec = 0;
    }
    if (min == 60) {
      hr = hr + 1;
      min = 0;
      sec = 0;
    }

    if (sec &amp;lt; 10 || sec == 0) {
      sec = '0' + sec;
    }
    if (min &amp;lt; 10 || min == 0) {
      min = '0' + min;
    }
    if (hr &amp;lt; 10 || hr == 0) {
      hr = '0' + hr;
    }

    timer.innerHTML = hr + ':' + min + ':' + sec;

    setTimeout("timerCycle()", 1000);
  }
}

function resetTimer() {
    timer.innerHTML = '00:00:00';
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Final Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8W9yVtc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ghxigfl5hoxttuvo4aw8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8W9yVtc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ghxigfl5hoxttuvo4aw8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
(Naturally it works. Tested it myself 😉)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explanation" class="anchor"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#disclaimer-in-the-code-you-may-notice-its-called-a-timer-and-not-stopwatch-thats-because-timer-is-shorter-than-stopwatch-and-i-dont-feel-like-having-to-type-that-all-the-time-" class="anchor"&gt;
  &lt;/a&gt;
  Disclaimer! In the code you may notice it's called a 'timer' and not 'stopwatch', that's because 'timer' is shorter than 'stopwatch' and I don't feel like having to type that all the time 😂.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;const timer = document.getElementById('stopwatch');&lt;/code&gt; imports the timer 'div' as a variable, using it's id, so we can modify it as we wish.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;var hr = 0; var min = 0; var sec = 0;&lt;/code&gt; we are creating the hour, minute and second variables and we are declaring that their initial value is 0.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;var stoptime = true;&lt;/code&gt; we create a variable so we can then verify if the stopwatch is running or not.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if (stoptime == true) { stoptime = false; timerCycle(); }&lt;/code&gt; if the stopwatch is not running, turn it on and go to the &lt;code&gt;timerCycle()&lt;/code&gt; function. (This only runs if we click the 'Start' button)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if (stoptime == false) { stoptime = true; }&lt;/code&gt; if  the stopwatch is running, turn it off. (This only runs if we click the 'Stop' button)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if (stoptime == false) {&lt;/code&gt; verify that the stopwatch is on.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sec = parseInt(sec); min = parseInt(min); hr = parseInt(hr);&lt;/code&gt; these are used to parse a string into an integer. (if we have 1045 as a string and we want to use it as an integer, we parse it)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sec = sec + 1;&lt;/code&gt; add 1 to seconds.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if (sec == 60) {&lt;/code&gt; if seconds are equal to 60, minutes = 1 and seconds becomes 0 again.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if (min == 60) {&lt;/code&gt; if minutes are equal to 60, hours = 1 and seconds + minutes becomes 0 again.&lt;/li&gt;
&lt;li&gt;Fun part:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (sec &amp;lt; 10 || sec == 0) {
   sec = '0' + sec;
}
if (min &amp;lt; 10 || min == 0) {
   min = '0' + min;
}
if (hr &amp;lt; 10 || hr == 0) {
   hr = '0' + hr;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If seconds, minutes and/or hours are lower than 10, add a 0 in front. This is why we need to parse everything in the beginning: doing this operation they become strings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;timer.innerHTML = hr + ':' + min + ':' + sec;&lt;/code&gt; add these values to the 'timer' div.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;setTimeout("timerCycle()", 1000);&lt;/code&gt; this will make sure there is a timeout of 1000 ms (1s) before repeating the 'timerCycle()'.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;timer.innerHTML = '00:00:00';&lt;/code&gt; used to reset the timer to 00:00:00&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#and-were-done" class="anchor"&gt;
  &lt;/a&gt;
  AND WE'RE DONE!
&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Authentication and JWT in Node.js</title>
      <author>EidorianAvi</author>
      <pubDate>Mon, 14 Dec 2020 02:49:56 +0000</pubDate>
      <link>https://dev.to/eidorianavi/authentication-and-jwt-in-node-js-4i13</link>
      <guid>https://dev.to/eidorianavi/authentication-and-jwt-in-node-js-4i13</guid>
      <description>&lt;p&gt;Alright so this week I'm going to continue working with node. This one should be pretty short and sweet but I'd like to cover how to build out a login request and how to produce a token for verification in the front end. Let's get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-required" class="anchor"&gt;
  &lt;/a&gt;
  What's required
&lt;/h3&gt;

&lt;p&gt;So for our form of authentication I'm going to be using Bcrypt and a JWT. What are those you ask? I'm glad you asked.&lt;/p&gt;

&lt;p&gt;Bcrypt: A function that uses an algorithm to hash passwords. This is important for user security because if someone were to gain access to your database and the passwords are not hashed the users credentials are compromised.&lt;/p&gt;

&lt;p&gt;JWT: JWT stands for JSON Web Token. It is a standard for authentication in applications. Upon a successful login the server sends a JWT to the client as proof of verification. Think of this as the ticket for a user to gain access to gated content or personal content. &lt;/p&gt;

&lt;p&gt;Now that we know what the pieces of the puzzle we will be using are lets go ahead and install them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install bcrypt jsonwebtoken
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once they're installed go ahead and require them in whatever file you will be applying authentication to. I will be doing it in my users route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We're good to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-it-out" class="anchor"&gt;
  &lt;/a&gt;
  Build it out
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-hashed-password" class="anchor"&gt;
  &lt;/a&gt;
  Creating a Hashed Password
&lt;/h3&gt;

&lt;p&gt;So the first thing I'd like to handle is making sure when a user signs up we don't store their password in our database as is, that's just not cool. We have to hash it first. That's where bcrypt comes in. It will not only hash a password for us but it will also help verify hashed passwords.&lt;/p&gt;

&lt;p&gt;Here is what my creating a user function will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/add-user', async (req, res) =&amp;gt; {
    try {
        const hashedPassword = await bcrypt.hash(req.body.password, 10);

        const user = new User({
            username: req.body.username,
            password: hashedPassword,
        });
        const savedUser = await user.save();
        res.json(savedUser);
    } catch(e) {
        res.json({ message: "Error"});
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So let's break that down. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We created an async post request to our users route for adding a new user.&lt;/li&gt;
&lt;li&gt;Since it is an async function we handle it within a try/catch block.&lt;/li&gt;
&lt;li&gt;In the try block we create a hashedPassword constant and let bcrypt create a hashed password. It takes in the password from the request as well as the amount of saltRounds, we set that to 10 which I believe is the default. This is asynchronous so use an await.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sidenote: Salt is used in cryptography. It is random data to mix in with the core data to ensure improbability of replication&lt;/strong&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once we have used bcrypt to create a hashed password we continue like a general post request. Create a user instance with the username and the newly created hashed password instead of the request password.&lt;/li&gt;
&lt;li&gt;Save this new user instance with the hashed password.&lt;/li&gt;
&lt;li&gt;In the catch block I have it set so if there is an error it will send a response with the error in JSON format. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Awesome. Now if you make a post and create a new user and go check out the database you will see in the password parameter it is a random string. Try and decode a password from that. You can't.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logging-a-user-in" class="anchor"&gt;
  &lt;/a&gt;
  Logging a User In
&lt;/h3&gt;

&lt;p&gt;Alright so now that we know how create users with hashed passwords in our database let's check out how to login a user.&lt;/p&gt;

&lt;p&gt;For this portion we need Bcrypt to handle the hashed password and JWT to provide proof of successful verification. Again I do this in my users route.&lt;/p&gt;

&lt;p&gt;First thing let's create a token secret in our .env file for later. This should be a random string that's totally unpredictable you can use the web to generate one. Store it in something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TOKEN_SECRET=b91028378997c0b3581821456edefd0ec7958f953f8c1a6dd856e2de27f0d7e0fb1a01cda20d1a6890267e629f0ff5dc7ee46bce382aba62d13989614417606a
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's check out the function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/login', async (req, res) =&amp;gt; {
    const user = await User.findOne({ username: req.body.username });

    try{
        const match = await bcrypt.compare(req.body.password, user.password);
        const accessToken = jwt.sign(JSON.stringify(user), process.env.TOKEN_SECRET)
        if(match){
            res.json({ accessToken: accessToken });
        } else {
            res.json({ message: "Invalid Credentials" });
        }
    } catch(e) {
        console.log(e)
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What's going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is again an async post request to our users route.&lt;/li&gt;
&lt;li&gt;First thing we can do is find a user based on their username which ideally will be unique. This is done through using findOne on our User model via mongoose as we have in a previous blog post. &lt;/li&gt;
&lt;li&gt;We create our try/catch block since again this is an async function.&lt;/li&gt;
&lt;li&gt;First in our try black we will asynchronously compare the password we received in the request to the hashed one stored in the database using bcryt.compare and passing in first the request password and then the hashed password associated with the user we stored in a constant earlier. Bcrypt will compare and handle the hashing and provide a true or false value.&lt;/li&gt;
&lt;li&gt;We will also be creating a token using JWT. We use jwt.sign() and pass in first the user data and that token secret we hid in our .env file.&lt;/li&gt;
&lt;li&gt;Set up an if block and if the match is true it will return that token in a JSON formatted response.&lt;/li&gt;
&lt;li&gt;If it is not a match it will respond with a message saying that the credentials are invalid.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should at this point be able to test out a login POST request with a previously created user. If the password and username are correct the response should provide a JWT token as proof of verification. If not you should hit the error message.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrap-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h3&gt;

&lt;p&gt;On the back-end you should now have an idea how to safely store users credentials as well as how to verify them and providing proof of verification via a JWT. Now locking content behind authentication and providing authorization is a front-end matter and something we won't be getting into today. &lt;/p&gt;

&lt;p&gt;I hope you learned something today and if you have any questions/comments please feel free to reach out. &lt;br&gt;
As always happy coding!&lt;/p&gt;

</description>
      <category>auth</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Robust NodeJS Deployment Architecture</title>
      <author>Mark Smith</author>
      <pubDate>Mon, 14 Dec 2020 01:52:03 +0000</pubDate>
      <link>https://dev.to/mjgs/robust-nodejs-deployment-architecture-5go6</link>
      <guid>https://dev.to/mjgs/robust-nodejs-deployment-architecture-5go6</guid>
      <description>&lt;p&gt;The aim of this post is to succinctly describe an effective and robust architecture for self hosting your NodeJS web applications. I’m going to stay relatively high level, describing the technologies, and components, by the end of it you will have a good idea of what such a system looks like. There is a focus on standard well tested pieces rather than the latest shiny cloud / containerisation offerings. It is well suited for running small to medium size applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_DqjL65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.markjgsmith.com/assets/images/nodejs-web-development-technologies.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_DqjL65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.markjgsmith.com/assets/images/nodejs-web-development-technologies.png" alt="Node.js web development technologies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-the-architecture" class="anchor"&gt;
  &lt;/a&gt;
  Features of the architecture
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Runs on standard VPS hosts &lt;/li&gt;
&lt;li&gt;Possibility to scale&lt;/li&gt;
&lt;li&gt;Secure&lt;/li&gt;
&lt;li&gt;Easy to maintain&lt;/li&gt;
&lt;li&gt;Fault tolerant&lt;/li&gt;
&lt;li&gt;Low cost&lt;/li&gt;
&lt;li&gt;Backed up and easy to restore&lt;/li&gt;
&lt;li&gt;Easy machine provisioning&lt;/li&gt;
&lt;li&gt;Easy to deploy code&lt;/li&gt;
&lt;li&gt;Support multiple databases&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-main-components" class="anchor"&gt;
  &lt;/a&gt;
  3 main components
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Load balancer&lt;/li&gt;
&lt;li&gt;Web and API application servers&lt;/li&gt;
&lt;li&gt;Datastore&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During it’s life cycle, a client web request travels over the internet and eventually arrives at the load balancer where any SSL/TLS connections are terminated, then re-encrypted using self-signed certs and sent to an available application server. That application server performs the tasks it needs to do, persisting information on a shared datastore. Responses are sent directly from the application servers to the client.&lt;/p&gt;

&lt;p&gt;The SSL/TLS termination happens on the load balancer because it makes managing the certificates much easier, with only a single place to renew, create, update and backup certificates.&lt;/p&gt;

&lt;p&gt;Having a load balancer ensures that you can have several application servers running in parallel, which means you can scale by just adding more application servers, but it also means you can reboot servers without impacting site uptime.&lt;/p&gt;

&lt;p&gt;As for the application servers, you can separate out web servers from API servers, but for ease of maintenance you can also just run both on the same machine on different ports, with a reverse proxy on the machine directing the requests to the right application. In this way you have one discrete unit which makes it much easier to add capacity. In the vaste majority of cases this setup is good enough, though could be optimised later.&lt;/p&gt;

&lt;p&gt;Having a shared datastore is key to being able to run the application servers in parallel. This is a single machine that has a large storage volume mounted. It runs all the databases which write their data to the storage volume. The datastore can also run on a clustered set of machines for high availability, though this adds quite a lot of complexity, so initially it’s probably best to run one machine with good backups, so if anything goes wrong you can be restored and running with a minimum of downtime.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technologies" class="anchor"&gt;
  &lt;/a&gt;
  Technologies
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.nginx.com"&gt;Nginx&lt;/a&gt; - Load balancer and reverse proxy&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://redis.io"&gt;Redis&lt;/a&gt; - Key/value very fast database often used for storing sessions and caching&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.mongodb.com"&gt;Mongodb&lt;/a&gt; - NoSQL database&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.postgresql.org"&gt;Postgres&lt;/a&gt; - SQL database&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://letsencrypt.org/getting-started/"&gt;Letsencrypt&lt;/a&gt; certbot - for generating and maintaining certificates&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ubuntu.com"&gt;Linux Ubuntu&lt;/a&gt; - Operating system for all 3 components&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pm2.keymetrics.io"&gt;Pm2&lt;/a&gt; - NodeJS process manager, runs the applications, handles logging and a variety of other runtime activities&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.rabbitmq.com"&gt;RabbitMQ&lt;/a&gt; - Message queue software very important for fault tolerant backend systems&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chilts/mongodb-queue"&gt;Mongodb-queue&lt;/a&gt; - Message queue implemented via a NodeJS library backed by MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#provisioning-infrastructure" class="anchor"&gt;
  &lt;/a&gt;
  Provisioning infrastructure
&lt;/h2&gt;

&lt;p&gt;You can keep things quite simple in this regard, using a &lt;a href="https://en.m.wikipedia.org/wiki/Bash_(Unix_shell)"&gt;Bash&lt;/a&gt; script for each of the 3 main components. The script would need to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install latest OS updates&lt;/li&gt;
&lt;li&gt;Install necessary software&lt;/li&gt;
&lt;li&gt;Configure users and groups&lt;/li&gt;
&lt;li&gt;Write/update software configuration files&lt;/li&gt;
&lt;li&gt;Start and stop various services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are some of the important Linux items you would need to know about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://en.m.wikipedia.org/wiki/OpenSSH"&gt;sshd&lt;/a&gt; - server for ssh connections&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.stunnel.org"&gt;stunnel&lt;/a&gt; - creates secure connections, used on datastore for applications without built in SSL - e.g. Redis&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://en.m.wikipedia.org/wiki/Uncomplicated_Firewall"&gt;ufw&lt;/a&gt; / &lt;a href="https://en.m.wikipedia.org/wiki/Iptables"&gt;iptables&lt;/a&gt; - firewalls&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://smallstep.com/blog/everything-pki.html"&gt;PKI&lt;/a&gt; and creating self-signed certificates&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.tecmint.com/install-logrotate-to-manage-log-rotation-in-linux/"&gt;logrotate&lt;/a&gt; - manage rotating and backing up application log files&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://en.m.wikipedia.org/wiki/Cron"&gt;cron&lt;/a&gt; - schedule the running of maintenance scripts like backups&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://certbot.eff.org/docs/"&gt;certbot&lt;/a&gt; - generate and renew certs&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://en.m.wikipedia.org/wiki/Rsync"&gt;rsync&lt;/a&gt; - securely synchronize files between machines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s likely that your &lt;a href="https://en.m.wikipedia.org/wiki/Virtual_private_server"&gt;VPS&lt;/a&gt; hosting provider has an API and / or command line tools, making it possible to create a provisioning script that creates a VPS server, rsyncs the bash install script to the machine and runs it. So with a minimum of fuss you can provision fresh servers by running a script, so it’s completely repeatable.&lt;/p&gt;

&lt;p&gt;It’s worth noting that there are modern tools that use containerisation like &lt;a href="https://en.m.wikipedia.org/wiki/Kubernetes"&gt;Kubernetes&lt;/a&gt;, which are very powerful but can get quite complex.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-code" class="anchor"&gt;
  &lt;/a&gt;
  Deploying code
&lt;/h2&gt;

&lt;p&gt;This is another place where a simple bash script can be very effective. &lt;/p&gt;

&lt;p&gt;It would need to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build your application to a deploy directory&lt;/li&gt;
&lt;li&gt;Backup currently running app&lt;/li&gt;
&lt;li&gt;Rsync the files to the application servers&lt;/li&gt;
&lt;li&gt;Restart the application server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a lot of variety in this area. Many modern workflows that use &lt;a href="https://en.m.wikipedia.org/wiki/CI/CD"&gt;CI/CD systems&lt;/a&gt; use git to clone your entire application &lt;br&gt;
repository to the server, rather than rsyncing just the built files. Requirements vary a lot from project to project.&lt;/p&gt;

&lt;p&gt;The bash script route is great for simplicity, but there are often more manual steps involved, especially if your application has complex configuration. In the early days of a project it’s often good enough.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backups" class="anchor"&gt;
  &lt;/a&gt;
  Backups
&lt;/h2&gt;

&lt;p&gt;Backups are super important. You need to have all the important files backed up and ideally scripts to restore the backups in the event that a component fails and needs to be restored.&lt;/p&gt;

&lt;p&gt;Consider backing up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each deployed application version, along with configuration&lt;/li&gt;
&lt;li&gt;Log files for databases, firewalls&lt;/li&gt;
&lt;li&gt;Certificates&lt;/li&gt;
&lt;li&gt;Contents of all databases&lt;/li&gt;
&lt;li&gt;Configurations for every 3rd party application you are using&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s a good idea to use storage from big cloud providers, they are low cost and have good scripting tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security" class="anchor"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;p&gt;It’s important to configure your machines securely, set firewalls (local and cloud) appropriately. Always use TLS/SSL for inter machine communication. Follow the security advice from the various pieces of software you install, for example creating different users for specific purposes e.g. application access vs access for backups. Only give the minimum of access rights necessary to perform a given task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#staging-and-production-environments" class="anchor"&gt;
  &lt;/a&gt;
  Staging and production environments
&lt;/h2&gt;

&lt;p&gt;Once the application is running in production, you will benefit a lot from having a staging environment. It’s a replica of the production environment where you can try out new code without being worried to break the live system. Never deploy directly to production, always test it out in staging first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;The infrastructure side of running applications can get quite complex, but there are a lot of advantages to knowing how to construct these setups yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep costs at a minimum&lt;/li&gt;
&lt;li&gt;Be in full control of the infrastructure&lt;/li&gt;
&lt;li&gt;Be able to deploy anywhere&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s also worth experimenting with integrating &lt;a href="https://serverless.css-tricks.com/about"&gt;serverless&lt;/a&gt; technologies for aspects that are very high load, the low cost and high performance might be worth the portability trade-off, but be aware that a move might require rewriting parts of your application should you need to change providers.&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/markjgsmith"&gt;@markjgsmith&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://blog.markjgsmith.com/about"&gt;I’m currently available for hire&lt;/a&gt;&lt;/em&gt; - Consider hiring me!&lt;/p&gt;

&lt;p&gt;If you liked this article you might like adding my &lt;a href="https://blog.markjgsmith.com/feed.xml"&gt;blog feed&lt;/a&gt; to your RSS reader, reading my &lt;a href="https://links.markjgsmith.com"&gt;daily linkblog&lt;/a&gt; or signing up for my &lt;a href="https://markjgsmith.substack.com"&gt;weekly newsletter&lt;/a&gt;. :)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally posted on &lt;a href="https://blog.markjgsmith.com/2020/11/13/robust-nodejs-deployment-architecture.html"&gt;blog.markjgsmith.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>node</category>
      <category>javascript</category>
      <category>architecture</category>
    </item>
    <item>
      <title>The ultimate migration guide to angular-eslint, ESLint and Nx 11</title>
      <author>Lars Gyrup Brink Nielsen</author>
      <pubDate>Sun, 13 Dec 2020 23:30:20 +0000</pubDate>
      <link>https://dev.to/this-is-angular/the-ultimate-migration-guide-to-angular-eslint-eslint-and-nx-11-1eh2</link>
      <guid>https://dev.to/this-is-angular/the-ultimate-migration-guide-to-angular-eslint-eslint-and-nx-11-1eh2</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/photos/CTivHyiTbFw"&gt;Anastasia Taioglou&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Updated to Nx version 11.0.2.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Nx version 11 has built-in support for Angular version 11 and ESLint using Nx and &lt;a href="https://github.com/angular-eslint/angular-eslint"&gt;angular-eslint&lt;/a&gt; plugins which add Angular-specific lint rules and component template processing.&lt;/p&gt;

&lt;p&gt;Let's explore different workspace configurations and discuss a few caveats. This guide includes options to use NPM or Yarn, Jest or Karma, as well as Cypress or Protractor. It includes guides both for setting up new Nx workspaces but also for migrating existing Nx workspaces that are either using ESLint or TSLint.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that as of Nx 11, generation schematics are known as &lt;em&gt;generators&lt;/em&gt;, builders are known as &lt;em&gt;executors&lt;/em&gt;, and architect targets are known as &lt;em&gt;targets&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#setting-up-a-new-nx-angular-workspace-with-angulareslint"&gt;Setting up a new Nx Angular workspace with angular-eslint&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#option-1-use-the-empty-workspace-preset"&gt;Option 1: Use the empty workspace preset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#option-2-use-the-angular-workspace-preset"&gt;Option 2: Use the angular workspace preset&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrating-an-existing-nx-10-angular-workspace-using-eslint"&gt;Migrating an existing Nx 10 Angular workspace using ESLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrating-an-existing-nx-10-angular-workspace-using-tslint"&gt;Migrating an existing Nx 10 Angular workspace using TSLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;It's recommended to use Node.js 12 for Nx 11.&lt;/li&gt;
&lt;li&gt;This guide assumes that Nx CLI version 11.x is installed globally.&lt;/li&gt;
&lt;li&gt;Install Angular CLI version 11.x globally just in case.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-a-new-nx-angular-workspace-with-angulareslint" class="anchor"&gt;
  &lt;/a&gt;
  Setting up a new Nx Angular workspace with angular-eslint
&lt;/h1&gt;

&lt;p&gt;In this use case, we create a new Nx workspace. We can either use the &lt;code&gt;empty&lt;/code&gt; workspace preset or the &lt;code&gt;angular&lt;/code&gt; workspace preset.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#option-1-use-the-empty-workspace-preset" class="anchor"&gt;
  &lt;/a&gt;
  Option 1: Use the empty workspace preset
&lt;/h2&gt;

&lt;p&gt;Using the &lt;code&gt;empty&lt;/code&gt; workspace preset, we use &lt;code&gt;workspace.json&lt;/code&gt; version 2 which is compatible with Nx plugins targeting Nx 11 or later.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generate an Nx workspace.&lt;br&gt;
First, let's create a minimal Nx workspace.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init nx-workspace nrwl-airlines --npm-scope=nrwl-airlines --preset=empty --no-nx-cloud --package-manager=npm
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create nx-workspace nrwl-airlines --npm-scope=nrwl-airlines --preset=empty --no-nx-cloud --package-manager=yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set base branch for &lt;code&gt;affected&lt;/code&gt; commands.&lt;br&gt;
If you've been keeping up in 2020, the default branch of your Git repository is &lt;code&gt;main&lt;/code&gt;. However, as of Nx version 11.0.2, the base branch for comparison is still set to &lt;code&gt;master&lt;/code&gt;, regardless of your default Git settings.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;main&lt;/code&gt; default branch:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f nx.json -e "this.affected.defaultBase = 'main';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure workspace package manager.&lt;br&gt;
When Nx installs packages, it can use different package managers, but we have to tell it to do so.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.cli.packageManager = 'npm';"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.cli.packageManager = 'yarn';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete TSLint.&lt;br&gt;
Nx includes TSlint by default. Now that it's fully end-of-life, it's time to move on. Delete the &lt;code&gt;tslint&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm uninstall tslint
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn remove tslint
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the &lt;code&gt;@nrwl/angular&lt;/code&gt; package as a development dependency.&lt;br&gt;
To be able to generate Angular projects, configurations, and classes, we need to install the &lt;code&gt;@nrwl/angular&lt;/code&gt; package. For most packages, we should default to using &lt;code&gt;nx add &amp;lt;package-name&amp;gt;&lt;/code&gt;, but for &lt;code&gt;@nrwl/angular&lt;/code&gt; in an Nx workspace using the &lt;code&gt;empty&lt;/code&gt; preset, this doesn't work. Instead, we'll install it manually.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev @nrwl/angular
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add --dev @nrwl/angular
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create generators configuration.&lt;br&gt;
Assign empty objects to the sub-properties of the &lt;code&gt;generators&lt;/code&gt; property in &lt;code&gt;workspace.json&lt;/code&gt; matching generator names. This will hold default values for the generators which we will configure in the following steps.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.generators = { '@nrwl/angular': { application: {}, library: {} } };"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable Angular strict mode.&lt;br&gt;
We prefer strict configurations for TypeScript and Angular. We enable strict mode for Angular application and library projects.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].application.strict = true;"
npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].library.strict = true;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use ESLint as linter.&lt;br&gt;
We configure ESLint as the default linter for all Angular application and library projects. This includes the &lt;code&gt;angular-eslint&lt;/code&gt; plugins.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].application.linter = 'eslint';"
npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].library.linter = 'eslint';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure unit test runner.&lt;br&gt;
Nx has built-in support for the Jest and Karma testing frameworks for Angular application and library projects.&lt;/p&gt;

&lt;p&gt;Use Jest:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].application.unitTestRunner = 'jest';"
npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].library.unitTestRunner = 'jest';"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Use Karma:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].application.unitTestRunner = 'karma';"
npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].library.unitTestRunner = 'karma';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure end-to-end test runner.&lt;br&gt;
Nx has built-in support for the Cypress and Protractor end-to-end testing frameworks for Angular application projects.&lt;/p&gt;

&lt;p&gt;Use Cypress:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].application.e2eTestRunner = 'cypress';"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Use Protractor:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].application.e2eTestRunner = 'protractor';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate an Angular application project.&lt;br&gt;
Because of our generators configuration, Angular application and library projects will be generated using ESLint and &lt;code&gt;angular-eslint&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate @nrwl/angular:application --name=booking-app --prefix=booking --tags="type:app,scope:booking" --no-interactive
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We should also add project tags to the generated end-to-end testing project.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f nx.json -e "this.projects['booking-app-e2e'].tags = ['type:e2e','scope:booking'];"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use strict Angular build budgets.&lt;br&gt;
As of Nx version 11.0.2, the Angular build budgets do not adjust according to Angular strict mode. Let's use the same limits as Angular CLI 11 strict mode.&lt;/p&gt;

&lt;p&gt;The main bundle is set to warn at 500 KB and fail at 1 MB. Component styles are set to warn at 2 KB and fail at 4 KB.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.projects['booking-app'].targets.build.configurations.production.budgets = [{ type: 'initial', maximumWarning: '500kb', maximumError: '1mb' }, { type: 'anyComponentStyle', maximumWarning: '2kb', maximumError: '4kb' }];"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete Codelyzer.&lt;br&gt;
Angular CLI version 11 includes Codelyzer by default when generating a workspace or an Angular application project. Now that TSlint is fully end-of-life, it's time to move on. Delete the &lt;code&gt;codelyzer&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm uninstall codelyzer
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn remove codelyzer
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate an Angular workspace library.&lt;br&gt;
To make sure that our configurations also work for Angular libraries, we create a workspace library.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate @nrwl/angular:library --name=feature-flight-search --directory=booking --prefix=booking --tags="type:feature,scope:booking" --buildable --no-interactive
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify that linting works.&lt;br&gt;
Run the &lt;code&gt;lint&lt;/code&gt; target on all projects to verify that ESLint with &lt;code&gt;angular-eslint&lt;/code&gt; works.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx run-many --target=lint --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have now created an Nx workspace with an Angular application project and an Angular library workspace project. By using the &lt;code&gt;empty&lt;/code&gt; workspace preset, we use version 2 of the Nx workspace configuration which uses the terms &lt;em&gt;executors&lt;/em&gt;, &lt;em&gt;generators&lt;/em&gt;, and &lt;em&gt;targets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;workspace.json&lt;/code&gt; we can verify that the &lt;code&gt;lint&lt;/code&gt; targets use the &lt;code&gt;@nrwl/linter:eslint&lt;/code&gt; executor.&lt;/p&gt;

&lt;p&gt;The base &lt;code&gt;.eslintrc.json&lt;/code&gt; configuration should mention the &lt;code&gt;@nrwl/nx/typescript&lt;/code&gt; ESLint plugin. Open the &lt;code&gt;.eslintrc.json&lt;/code&gt; files in the Angular application and library projects to verify that the &lt;code&gt;@nrwl/nx/angular&lt;/code&gt;, &lt;code&gt;@nrwl/nx/angular-template&lt;/code&gt;, and &lt;code&gt;@angular-eslint/template/process-inline-templates&lt;/code&gt; ESLint plugins are enabled.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#option-2-use-the-angular-workspace-preset" class="anchor"&gt;
  &lt;/a&gt;
  Option 2: Use the angular workspace preset
&lt;/h2&gt;

&lt;p&gt;As of Nx version 11.0.2, the &lt;code&gt;angular&lt;/code&gt; workspace preset generates the initial Angular application project without &lt;code&gt;angular-eslint&lt;/code&gt; and generates the initial application and end-to-end testing projects without taking these parameters into account:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;create-application&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e2e-test-runner&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;linter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no-interactive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unit-test-runner&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nx will prompt us for a linter, but it will be ignored and fall back on the default linter which is ESLint. Unfortunately without &lt;code&gt;angular-eslint&lt;/code&gt;. See &lt;a href="https://github.com/nrwl/nx/issues/4272"&gt;Nx issue #4272&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because of this, we have to delete the initial projects, configure schematics and regenerate the Angular application and end-to-end testing projects.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generate an Nx Angular workspace.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init nx-workspace nrwl-airlines --npm-scope=nrwl-airlines --preset=angular --app-name=booking-app --linter=eslint --no-nx-cloud --style=css --package-manager=npm
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create nx-workspace nrwl-airlines --npm-scope=nrwl-airlines --preset=angular --app-name=booking-app --linter=eslint --no-nx-cloud --style=css --package-manager=yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set base branch for &lt;code&gt;affected&lt;/code&gt; commands.&lt;br&gt;
If you've been keeping up in 2020, the default branch of your Git repository is &lt;code&gt;main&lt;/code&gt;. However, as of Nx version 11.0.2, the base branch for comparison is still set to &lt;code&gt;master&lt;/code&gt;, regardless of your default Git settings.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;main&lt;/code&gt; default branch:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f nx.json -e "this.affected.defaultBase = 'main';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure workspace package manager.&lt;br&gt;
When Nx installs packages, it can use different package managers, but we have to tell it to do so.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.cli.packageManager = 'npm';"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.cli.packageManager = 'yarn';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete Codelyzer and TSlint.&lt;br&gt;
Nx version 11 includes Codelyzer by default when using the &lt;code&gt;angular&lt;/code&gt; workspace preset. Now that TSlint is fully end-of-life, it's time to move on. Delete the &lt;code&gt;codelyzer&lt;/code&gt; and &lt;code&gt;tslint&lt;/code&gt; packages.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm uninstall codelyzer tslint
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn remove codelyzer tslint
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable Angular strict mode.&lt;br&gt;
We prefer strict configurations for TypeScript and Angular. We enable strict mode for Angular application and library projects.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.schematics['@nrwl/angular:application'].strict = true;"
npx json -I -f angular.json -e "this.schematics['@nrwl/angular:library'].strict = true;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure unit test runner.&lt;br&gt;
Nx has built-in support for the Jest and Karma testing frameworks for Angular application and library projects.&lt;/p&gt;

&lt;p&gt;Use Jest:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.schematics['@nrwl/angular'].application.unitTestRunner = 'jest';"
npx json -I -f angular.json -e "this.schematics['@nrwl/angular'].library.unitTestRunner = 'jest';"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Use Karma:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.schematics['@nrwl/angular'].application.unitTestRunner = 'karma';"
npx json -I -f angular.json -e "this.schematics['@nrwl/angular'].library.unitTestRunner = 'karma';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure end-to-end test runner.&lt;br&gt;
Nx has built-in support for the Cypress and Protractor end-to-end testing frameworks for Angular application projects.&lt;/p&gt;

&lt;p&gt;Use Cypress:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.schematics['@nrwl/angular'].application.e2eTestRunner = 'cypress';"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Use Protractor:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.schematics['@nrwl/angular'].application.e2eTestRunner = 'protractor';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete application and end-to-end testing projects.&lt;br&gt;
As mentioned in the introduction, the &lt;code&gt;angular&lt;/code&gt; workspace preset generates the initial projects without taking our preferences into acocunt, so we have to delete them&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate remove booking-app-e2e
nx generate remove booking-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate an Angular application project.&lt;br&gt;
Because of our generators configuration, Angular application and library projects will be generated using ESLint and &lt;code&gt;angular-eslint&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate @nrwl/angular:application --name=booking-app --prefix=booking --tags="type:app,scope:booking" --no-interactive
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We should also add project tags to the generated end-to-end testing project.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f nx.json -e "this.projects['booking-app-e2e'].tags = ['type:e2e','scope:booking'];"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use strict Angular build budgets.&lt;br&gt;
As of Nx version 11.0.2, the Angular build budgets do not adjust according to Angular strict mode. Let's use the same limits as Angular CLI 11 strict mode.&lt;/p&gt;

&lt;p&gt;The main bundle is set to warn at 500 KB and fail at 1 MB. Component styles are set to warn at 2 KB and fail at 4 KB.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.projects['booking-app'].architect.build.configurations.production.budgets = [{ type: 'initial', maximumWarning: '500kb', maximumError: '1mb' }, { type: 'anyComponentStyle', maximumWarning: '2kb', maximumError: '4kb' }];"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate an Angular workspace library.&lt;br&gt;
To make sure that our configurations also work for Angular libraries, we create a workspace library.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate @nrwl/angular:library --name=feature-flight-search --directory=booking --prefix=booking --tags="type:feature,scope:booking" --buildable --no-interactive
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete Codelyzer.&lt;br&gt;
Angular CLI version 11 includes Codelyzer by default when generating a workspace or an Angular application project, so we have to delete it again.&lt;br&gt;
Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm uninstall codelyzer
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn remove codelyzer
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify that linting works.&lt;br&gt;
Run the &lt;code&gt;lint&lt;/code&gt; target on all projects to verify that ESLint with &lt;code&gt;angular-eslint&lt;/code&gt; works.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx run-many --target=lint --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have now created an Nx workspace with an Angular application project and an Angular library workspace project. By using the &lt;code&gt;angular&lt;/code&gt; workspace preset, we use version 1 of the Nx workspace configuration which is exactly the same as what Angular CLI uses. It still uses the terms &lt;em&gt;builders&lt;/em&gt;, &lt;em&gt;schematics&lt;/em&gt;, and &lt;em&gt;architect targets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;angular.json&lt;/code&gt; we can verify that the &lt;code&gt;lint&lt;/code&gt; targets use the &lt;code&gt;@nrwl/linter:eslint&lt;/code&gt; executor.&lt;/p&gt;

&lt;p&gt;The base &lt;code&gt;.eslintrc.json&lt;/code&gt; configuration should mention the &lt;code&gt;@nrwl/nx/typescript&lt;/code&gt; ESLint plugin. Open the &lt;code&gt;.eslintrc.json&lt;/code&gt; files in the Angular application and library projects to verify that the &lt;code&gt;@nrwl/nx/angular&lt;/code&gt;, &lt;code&gt;@nrwl/nx/angular-template&lt;/code&gt;, and &lt;code&gt;@angular-eslint/template/process-inline-templates&lt;/code&gt; ESLint plugins are enabled.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#migrating-an-existing-nx-10-angular-workspace-using-eslint" class="anchor"&gt;
  &lt;/a&gt;
  Migrating an existing Nx 10 Angular workspace using ESLint
&lt;/h1&gt;

&lt;p&gt;If we have an existing Nx workspace, we are able to generate &lt;em&gt;new&lt;/em&gt; Angular application and library projects using ESLint with &lt;code&gt;angular-eslint&lt;/code&gt;. However, a migration from TSLint to ESLint with &lt;code&gt;angular-eslint&lt;/code&gt; in an Nx workspace is not available yet.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create Nx 10 workspace with &lt;code&gt;angular&lt;/code&gt; preset.&lt;br&gt;
For demonstration purposes, we generate a new Nx Angular workspace with a single application.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init nx-workspace@10 nrwl-airlines --npm-scope=nrwl-airlines --preset=angular --app-name=booking-app --strict --no-nx-cloud --style=css --package-manager=npm --linter=eslint
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn global add create-nx-workspace@10
create-nx-workspace nrwl-airlines --npm-scope=nrwl-airlines --preset=angular --app-name=booking-app --strict --no-nx-cloud --style=css --package-manager=yarn --linter=eslint
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate an Angular workspace library.&lt;br&gt;
To have a slightly more realistic example, we also generate an Angular workspace library project.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate @nrwl/angular:library --name=feature-flight-search --directory=booking --prefix=booking --tags="type:feature,scope:booking" --buildable --no-interactive
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Migrate to Nx 11.&lt;br&gt;
When updating to Nx 11, workspaces using ESLint will be migrated to also use &lt;code&gt;angular-eslint&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx migrate @nrwl/workspace
npm install
nx migrate --run-migrations=migrations.json
npm install
rm migrations.json
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx migrate @nrwl/workspace
yarn install
nx migrate --run-migrations=migrations.json
yarn install
rm migrations.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify that linting works.&lt;br&gt;
Run the &lt;code&gt;lint&lt;/code&gt; target on all projects to verify that ESLint with &lt;code&gt;angular-eslint&lt;/code&gt; works.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx run-many --target=lint --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#migrating-an-existing-nx-10-angular-workspace-using-tslint" class="anchor"&gt;
  &lt;/a&gt;
  Migrating an existing Nx 10 Angular workspace using TSLint
&lt;/h1&gt;

&lt;p&gt;As of Nx version 11.0.2, Nx hasn't got schematics for Nx Angular workspaces using TSLint to migrate to ESLint with angular-eslint.&lt;/p&gt;

&lt;p&gt;Instead, we will use &lt;code&gt;angular-eslint&lt;/code&gt;'s TSLint to ESLint migration schematics and perform some manual configurations to match that of a fully migrated Nx Angular workspace using ESLint with &lt;code&gt;angular-eslint&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For this example, we will use Nx' default test runners for the &lt;code&gt;angular&lt;/code&gt; workspace preset. Currently, this means Cypress and Jest. For Protractor and Karma, only the configuration for the end-to-end test project will differ. Consider generating a new Nx workspace with Karma, Protractor, and ESLint as described elsehwere in this article to compare ESLint configurations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the &lt;code&gt;angular&lt;/code&gt; preset used in this guide uses &lt;code&gt;angular.json&lt;/code&gt;. The angular-eslint migrations do not work for Nx workspaces using &lt;code&gt;workspace.json&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create Nx 10 workspace using the &lt;code&gt;angular&lt;/code&gt; preset.&lt;br&gt;
First we create a new Nx 10 workspace as an example. If you already have an existing workspace, adjust the following migration steps to your own workspace.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init nx-workspace@10 nrwl-airlines --npm-scope=nrwl-airlines --preset=angular --app-name=booking-app --strict --no-nx-cloud --style=css --package-manager=npm --linter=tslint
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn global add create-nx-workspace@10
create-nx-workspace nrwl-airlines --npm-scope=nrwl-airlines --preset=angular --app-name=booking-app --strict --no-nx-cloud --style=css --package-manager=yarn --linter=tslint
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate an Angular workspace library.&lt;br&gt;
This libary project is also for demonstration purposes. This step is not needed if you have an existing Nx workspace.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate @nrwl/angular:library --name=feature-flight-search --directory=booking --prefix=booking --tags="type:feature,scope:booking" --buildable --no-interactive
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Migrate to Nx 11.&lt;br&gt;
This is actually an optional step. All of the following steps work exactly the same for Nx 10.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx migrate @nrwl/workspace
npm install
nx migrate --run-migrations=migrations.json
npm install
rm migrations.json
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx migrate @nrwl/workspace
yarn install
nx migrate --run-migrations=migrations.json
yarn install
rm migrations.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Migrate to &lt;code&gt;angular-eslint&lt;/code&gt;.&lt;br&gt;
First, we temporarily rename &lt;code&gt;tsconfig.base.json&lt;/code&gt; to &lt;code&gt;tsconfig.json&lt;/code&gt; because the &lt;code&gt;angular-eslint&lt;/code&gt; migrations aren't configured for solution-style TypeScript configurations which Nx uses since version 10.0.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mv tsconfig.base.json tsconfig.json
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now we run &lt;code&gt;angular-eslint&lt;/code&gt; schematics to install necessary development dependencies such as &lt;code&gt;eslint-plugin-*&lt;/code&gt;, &lt;code&gt;@angular-eslint/*&lt;/code&gt;, and &lt;code&gt;@typescript-eslint/*&lt;/code&gt; packages.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx add @angular-eslint/schematics
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This might downgrade the version of &lt;code&gt;eslint&lt;/code&gt; already installed by Nx. If this happens, make sure to keep the version installed by Nx. For example the following&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev eslint@7.10.0
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add eslint@7.10.0
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Next, we run the &lt;code&gt;angular-eslint&lt;/code&gt; TSLint to ESLint migration for each Angular application and library project in our workspace.&lt;/p&gt;

&lt;p&gt;In this step, you might see warnings like the following, depending on your TSLint rules:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WARNING: Within "tslint.json", the following 1 rule(s) did not have known converters in https://github.com/typescript-eslint/tslint-to-eslint-config

  - nx-enforce-module-boundaries

You will need to decide on how to handle the above manually, but everything else has been handled for you automatically.
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;In the case of the &lt;code&gt;nx-enforce-module-boundaries&lt;/code&gt; rule which is the only rule giving us warnings when using the example workspace generated by these steps, don't worry about them as we will keep our root TSLint configuration file until the very last step. This is the lint rules used by the &lt;code&gt;nx workspace-lint&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;For ESLint, this rule is called &lt;code&gt;@nrwl/nx/enforce-module-boundaries&lt;/code&gt; and we will add it to our root ESLint configuration in one of the following steps.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate @angular-eslint/schematics:convert-tslint-to-eslint booking-app
nx generate @angular-eslint/schematics:convert-tslint-to-eslint booking-app-e2e
nx generate @angular-eslint/schematics:convert-tslint-to-eslint booking-feature-flight-search
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Finally, we revert the temporary renaming of &lt;code&gt;tsconfig.base.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mv tsconfig.json tsconfig.base.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure angular-eslint to Nx workspace.&lt;/p&gt;

&lt;p&gt;First, we remove unnecessary development dependencies.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn remove @angular-eslint/builder @angular-eslint/schematics
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we add required development dependencies.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add --dev @nrwl/eslint-plugin-nx eslint-config-prettier eslint-plugin-cypress
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Next, we configure the root ESLint configuration.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Ignore all files not matched in overrides
npx json -I -f .eslintrc.json -e "this.ignorePatterns = ['**/*'];"
# Support ESLint plugins from `@nrwl/eslint-plugin-nx`
npx json -I -f .eslintrc.json -e "this.plugins = ['@nrwl/nx'];"
# Include tsx files
# Can be left out from an Angular-only workspace
npx json -I -f .eslintrc.json -e "this.overrides[0].files = ['*.ts', '*.tsx'];"
# Match all TypeScript project configuration files
npx json -I -f .eslintrc.json -e "this.overrides[0].parserOptions.project = './tsconfig.*?.json';"
# This setting is not used by the Nrwl Linter
npx json -I -f .eslintrc.json -e "delete this.overrides[0].parserOptions.createDefaultProgram;"
# Replace `angular-eslint` plugins with the Nx TypeScript ESLint plugin as it uses them internally
npx json -I -f .eslintrc.json -e "this.overrides[0].extends = ['plugin:@nrwl/nx/typescript'];"
# Remove component template rule as this is defined in project-specific ESLint configurations
npx json -I -f .eslintrc.json -e "this.overrides = this.overrides.slice(0, 1);"
# Use Nx JavaScript ESLint plugin for js and jsx files
# Can be left out from an Angular-only workspace
npx json -I -f .eslintrc.json -e "this.overrides = [...this.overrides, { files: ['*.js', '*.jsx'], extends: ['plugin:@nrwl/nx/javascript'], rules: {} }];"
# Remove angular-eslint rules that are added to project-specific ESLint configurations
npx json -I -f .eslintrc.json -e "delete this.overrides[0].rules['@angular-eslint/component-selector'];"
npx json -I -f .eslintrc.json -e "delete this.overrides[0].rules['@angular-eslint/directive-selector'];"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The final change for the root ESLint configuration is to apply our workspace lint rules (and any other rules angular-eslint warned you about).&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# This is where we configure the workspace lint rules
# Refer to the root TSLint configuration
npx json -I -f .eslintrc.json -e "this.overrides = [{ files: ['*.ts', '*.tsx', '*.js', '*.jsx'], rules: { '@nrwl/nx/enforce-module-boundaries': ['error', { enforceBuildableLibDependency: true, allow: [], depConstraints: [{ sourceTag: '*', onlyDependOnLibsWithTags: ['*'] }] }] } }, ...this.overrides];"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now it's time to configure the per-project ESLint configurations. Let's start with the &lt;code&gt;booking-app&lt;/code&gt; project.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Add Nx Angular ESLint plugin and the ESLint inline component template processor
npx json -I -f apps/booking-app/.eslintrc.json -e "this.overrides[0].extends = ['plugin:@nrwl/nx/angular', 'plugin:@angular-eslint/template/process-inline-templates'];"
# Match all TypeScript project configuration files
npx json -I -f apps/booking-app/.eslintrc.json -e "this.overrides[0].parserOptions.project = [this.overrides[0].parserOptions.project[0].replace('/tsconfig.app.json', '/tsconfig.*?.json')];"
# This setting is not used by the Nrwl Linter
npx json -I -f apps/booking-app/.eslintrc.json -e "delete this.overrides[0].parserOptions.createDefaultProgram;"
# Use the ESLint component template processor and recommended component template rules from angular-eslint
npx json -I -f apps/booking-app/.eslintrc.json -e "this.overrides[1].extends = ['plugin:@nrwl/nx/angular-template', 'plugin:@angular-eslint/template/recommended'];"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Next, we configure ESLint and &lt;code&gt;angular-eslint&lt;/code&gt; for the &lt;code&gt;booking-feature-flight-search&lt;/code&gt; project. We make the same changes as we did for the &lt;code&gt;booking-app&lt;/code&gt; project, except we start by correcting the path to the root ESLint configuration because the project-specific configuration is three folders deep in the workspace.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Correct path to root ESLint configuration
npx json -I -f libs/booking/feature-flight-search/.eslintrc.json -e "this.extends = '../' + this.extends;"
# Add Nx Angular ESLint plugin and the ESLint inline component template processor
npx json -I -f libs/booking/feature-flight-search/.eslintrc.json -e "this.overrides[0].extends = ['plugin:@nrwl/nx/angular', 'plugin:@angular-eslint/template/process-inline-templates'];"
# Match all TypeScript project configuration files
npx json -I -f libs/booking/feature-flight-search/.eslintrc.json -e "this.overrides[0].parserOptions.project = [this.overrides[0].parserOptions.project[0].replace('/tsconfig.lib.json', '/tsconfig.*?.json')];"
# This setting is not used by the Nrwl Linter
npx json -I -f libs/booking/feature-flight-search/.eslintrc.json -e "delete this.overrides[0].parserOptions.createDefaultProgram;"
# Use the ESLint component template processor and recommended component template rules from angular-eslint
npx json -I -f libs/booking/feature-flight-search/.eslintrc.json -e "this.overrides[1].extends = ['plugin:@nrwl/nx/angular-template', 'plugin:@angular-eslint/template/recommended'];"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Finally, we configure ESLint for the &lt;code&gt;booking-app-e2e&lt;/code&gt; project.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Use rules recommended by Cypress
npx json -I -f apps/booking-app-e2e/.eslintrc.json -e "this.extends = ['plugin:cypress/recommended', this.extends];"
# Delete rule for component templates
npx json -I -f apps/booking-app-e2e/.eslintrc.json -e "this.overrides = this.overrides.slice(0, 1);"
# Add rules specifically for the Cypress plugin loader
npx json -I -f apps/booking-app-e2e/.eslintrc.json -e "this.overrides = [{ files: ['src/plugins/index.js'], rules: { '@typescript-eslint/no-var-requires': 'off', 'no-undef': 'off' } }, ...this.overrides];"
# Match all TypeScript project configuration files
npx json -I -f apps/booking-app-e2e/.eslintrc.json -e "this.overrides[1].parserOptions.project = [this.overrides[1].parserOptions.project[0].replace('/tsconfig.app.json', '/tsconfig.*?.json')];"
# This setting is not used by the Nrwl Linter
npx json -I -f apps/booking-app-e2e/.eslintrc.json -e "delete this.overrides[1].parserOptions.createDefaultProgram;"
# Remove Angular declarable rules
npx json -I -f apps/booking-app-e2e/.eslintrc.json -e "delete this.overrides[1].rules['@angular-eslint/component-selector'];"
npx json -I -f apps/booking-app-e2e/.eslintrc.json -e "delete this.overrides[1].rules['@angular-eslint/directive-selector'];"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Open &lt;code&gt;apps/booking-app-e2e/src/support/commands.ts&lt;/code&gt; and put the following comment before the line which says &lt;code&gt;declare namespace Cypress {&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// eslint-disable-next-line @typescript-eslint/no-namespace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;In the same file, add this coment before the line which says &lt;code&gt;interface Chainabile&amp;lt;Subject&amp;gt; {&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// eslint-disable-next-line @typescript-eslint/no-unused-vars&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Nrwl Linter builder.&lt;br&gt;
The final step is to replace &lt;code&gt;@angular-eslint/builder:lint&lt;/code&gt; with &lt;code&gt;@nrwl/linter:eslint&lt;/code&gt; in our workspace configuration.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Use Nrwl Linter
npx json -I -f angular.json -e "this.projects['booking-app'].architect.lint.builder = '@nrwl/linter:eslint';"
npx json -I -f angular.json -e "this.projects['booking-feature-flight-search'].architect.lint.builder = '@nrwl/linter:eslint';"
npx json -I -f angular.json -e "this.projects['booking-app-e2e'].architect.lint.builder = '@nrwl/linter:eslint';"
# Only lint js and ts files in the end-to-end test project
npx json -I -f angular.json -e "this.projects['booking-app-e2e'].architect.lint.options.lintFilePatterns = [this.projects['booking-app-e2e'].architect.lint.options.lintFilePatterns[0].replace('*.ts', '*.{js,ts}')];"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove Codelyzer and TSLint.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm uninstall codelyzer tslint
rm tslint.json
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn remove codelyzer tslint
rm tslint.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify that linting works.&lt;br&gt;
Run the &lt;code&gt;lint&lt;/code&gt; target on all projects to verify that ESLint with &lt;code&gt;angular-eslint&lt;/code&gt; works.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx run-many --target=lint --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;empty&lt;/code&gt; preset for an Nx workspace is great, because it uses the new &lt;code&gt;workspace.json&lt;/code&gt; version 2 schema with executors, generators, and targets. We can configure it however we want and it supports &lt;code&gt;angular-eslint&lt;/code&gt; well.&lt;/p&gt;

&lt;p&gt;A new Nx workspace can be created using the &lt;code&gt;angular&lt;/code&gt; preset to keep using the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration. It supports &lt;code&gt;angular-eslint&lt;/code&gt;, but the initial projects are set up incorrectly as of Nx version 11.0.2.&lt;/p&gt;

&lt;p&gt;An existing Nx 10 workspace using ESLint can migrate to &lt;code&gt;angular-eslint&lt;/code&gt; without any issues. As part of migrating to Nx 11, &lt;code&gt;angular-eslint&lt;/code&gt; will be installed and configured for existing projects using ESLint.&lt;/p&gt;

&lt;p&gt;If we have an existing Nx 10 workspace using TSLint, we can migrate to Nx 11 without any issues, but there's not automatic migration from using TSLint to &lt;code&gt;angular-eslint&lt;/code&gt; yet as of Nx version 11.0.2.&lt;/p&gt;

&lt;p&gt;However, there are migrations for Angular CLI workspaces. We can use these as a starting point to install &lt;code&gt;angular-eslint&lt;/code&gt; and create necessary ESLint configuration files and plugins.&lt;/p&gt;

&lt;p&gt;To configure &lt;code&gt;angular-eslint&lt;/code&gt; manually for an Nx workspace, we carefully adjust our ESLint configurations in the same way as a new Nx workspace would. Additionally, we switch to the Nrwl Linter instead of the &lt;code&gt;angular-eslint&lt;/code&gt; builder.&lt;/p&gt;

&lt;p&gt;No matter which combination of technologies we're using, it's possible to get rid of Codelyzer and TSLint today and start using &lt;code&gt;angular-eslint&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;Some Angular-specific TSLint rules from Codelyzer do not have corresponding &lt;code&gt;angular-eslint&lt;/code&gt; rules implemented yet. At the time of writing, the missing rules are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;angular-whitespace&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contextual-decorator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import-destructuring-spacing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no-unused-css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefer-inline-decorator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template-accessibility-alt-text&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template-accessibility-label-for&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template-accessibility-table-scope&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template-click-events-have-key-events&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template-conditional-complexity&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template-no-any&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why should we migrate away from TSLint as fast as possible? On December 1st 2020, TSLint went fully end-of-life. No PRs or issues are accepted ever again. This means that any release of Angular, TypeScript, Node.js, or any of TSLint's dependencies can potentially break TSLint version 6.1.3, the last version to ever be published. TSLint was deprecated 2 years ago.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>nx</category>
      <category>eslint</category>
    </item>
    <item>
      <title>How I used Reddit &amp; Twitter to Make Your README More Effective</title>
      <author>Michael Bagley</author>
      <pubDate>Sun, 13 Dec 2020 21:20:57 +0000</pubDate>
      <link>https://dev.to/mbagley1020/how-i-used-reddit-twitter-to-make-your-readme-more-effective-36bi</link>
      <guid>https://dev.to/mbagley1020/how-i-used-reddit-twitter-to-make-your-readme-more-effective-36bi</guid>
      <description>&lt;p&gt;Many lessons from my time at university have stuck with me throughout the years. One of the most important was in regards to technical writing (&lt;em&gt;thank you to my CS 787 professor&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;The lesson being that the process of technical writing is focused on being &lt;strong&gt;clear&lt;/strong&gt; and &lt;strong&gt;concise&lt;/strong&gt;. Every aspect of this technical work, whether it be visual or text, should be without redundancy or unrelated content.&lt;/p&gt;

&lt;p&gt;This does not mean that your writing shouldn't be sophisticated or tedious, it just means you should be conveying relevant information. In other words, &lt;strong&gt;get to the point&lt;/strong&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#my-story" class="anchor"&gt;
  &lt;/a&gt;
  My Story
&lt;/h1&gt;

&lt;p&gt;So that brings me to the README I've been working on. I have a repo that I wanted to be more alluring to potential users. This is a common situation that many open-source developers find themselves in. I didn't have too much experience writing high-quality READMEs.&lt;/p&gt;

&lt;p&gt;Over years of using GitHub, I've seen some awesome READMEs with unique styles and crazy visuals/animations, but now I don't necessarily think that is always the most effective way to improve your README.&lt;/p&gt;

&lt;p&gt;Last week I posted on various programming-related subreddits something along the lines of 'Looking for tips/criticism on my Github README?', about five in total. Furthermore, I DMed a couple of experienced open-source developers.&lt;/p&gt;

&lt;p&gt;Over the following 48 hours, I received staggered feedback that I'm excited to share with you today. I've compiled the three most important points featured in the responses.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#1-informative-visuals" class="anchor"&gt;
  &lt;/a&gt;
  1. Informative Visuals
&lt;/h1&gt;

&lt;p&gt;A picture is worth a thousand words. By that logic, too many pictures mean too many words. Take a look at &lt;a href="https://github.com/CCOSTAN/Home-AssistantConfig#readme"&gt;this repo&lt;/a&gt; for example. There's a lot of images that clutter up the repo aesthetically. Are all of these images necessary? Too much large imagery damages the navigability of the page.&lt;/p&gt;

&lt;p&gt;Imagery is very important as long it's purposeful. No-one likes reading a boring wall of text, but one or two branding/business images is enough. Your README should come off as a tool for potential developers to understand the purpose of your project, not as a sales pitch.&lt;/p&gt;

&lt;p&gt;Furthermore, over-stimulating imagery can be a turn off to potential users as opposed to a mature, organized aesthetic.&lt;/p&gt;

&lt;p&gt;This feedback led me to change the position and size of some of my more massive imagery. &lt;strong&gt;Stick to less than two branding images&lt;/strong&gt;. Any other pictures/animations should be essential to either learning how to get up and running or understanding your project's purpose.&lt;/p&gt;

&lt;p&gt;By the way, &lt;a href="https://github.com/easybase/easybase-react"&gt;here's a link to my work-in-progress README&lt;/a&gt;. A star on the GitHub repo would be greatly appreciated if you liked this article. Thanks!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-navigability" class="anchor"&gt;
  &lt;/a&gt;
  2. Navigability
&lt;/h1&gt;

&lt;p&gt;For something like a GitHub page, organization and navigability go hand-in-hand. Users will likely reference your README multiple times. It's a one-stop shop for developers to find more information on specific topics (installation, dependencies, etc).&lt;/p&gt;

&lt;p&gt;In my opinion, the most effective way to fulfill this navigability requirement is through the use of a Table of Contents. Many small to &lt;a href="https://github.com/cvxgrp/cvxpy"&gt;medium sized quality projects&lt;/a&gt; have some sort of ToC even if it's rudimentary.&lt;/p&gt;

&lt;p&gt;This serves two purposes. First, it's a place for potential users to instantly navigate to their desired section. Second, it gives your README a structure to follow. Readers get a preview of what is to come as they continue forward. This structure results in a README that is &lt;strong&gt;organized&lt;/strong&gt; and &lt;strong&gt;engaging&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ecotrust-canada.github.io/markdown-toc/"&gt;Here's a tool&lt;/a&gt; that will automatically create a table of contents for an existing markdown document.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-expandable-content" class="anchor"&gt;
  &lt;/a&gt;
  3. Expandable Content!
&lt;/h1&gt;

&lt;p&gt;Now this one isn't as much feedback as much as it is my suggestion based on feedback. I didn't even consider using this markdown functionality until someone specifically suggested it to me. Turns out you can create expandable sections in your README with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;details&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;Section Header!&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;

Some information...

&lt;span class="sb"&gt;`# Here's some code`&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/details&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After trying this formatting method in my README, I can say that I'll probably be using it in the future. It made the layout much more concise and aesthetically pleasing.&lt;/p&gt;

&lt;p&gt;As I said previously, no-one likes reading a wall of text. This dramatically improved the readability of my repo. What's great about this markdown feature is that it dramatically reduces README clutter without losing content.&lt;/p&gt;

&lt;p&gt;Users don't have to leave the page if they want more detail on a specific subject, they just have to click the dropdown arrow. &lt;a href="https://github.com/easybase/easybase-react#usage"&gt;Here's my specific implementation for reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a more robust discussion on drop-downs in markdown, take a look at &lt;a href="https://gist.github.com/citrusui/07978f14b11adada364ff901e27c7f61"&gt;this gist&lt;/a&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Thanks for reading! These three tips can certainly boost the effectiveness of your READMEs. Remember, the core goal of your README is to be &lt;strong&gt;clear&lt;/strong&gt; and &lt;strong&gt;concise&lt;/strong&gt; at every step.&lt;/p&gt;

&lt;p&gt;The three suggestions above were chosen by me, based on feedback from multiple sources. Be sure to consider informative visuals, navigability, and collapsable content in your future projects.&lt;/p&gt;

&lt;p&gt;Feel free to leave a response regarding any questions or concerns. I'll be sure to get back to you!&lt;/p&gt;

</description>
      <category>github</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>react</category>
    </item>
    <item>
      <title>How consistently does your organization update dependencies?</title>
      <author>Ben Halpern</author>
      <pubDate>Sun, 13 Dec 2020 20:13:10 +0000</pubDate>
      <link>https://dev.to/ben/how-consistently-does-your-organization-update-dependencies-23kn</link>
      <guid>https://dev.to/ben/how-consistently-does-your-organization-update-dependencies-23kn</guid>
      <description>&lt;p&gt;When the software you use releases a new version, how does your organization going about upgrading— Whether it's your core framework or smaller dependencies?&lt;/p&gt;

&lt;p&gt;How long do you typically go before you get on the latest versions?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Understanding the test pyramid</title>
      <author>Harris Geo 👨🏻‍💻</author>
      <pubDate>Sun, 13 Dec 2020 19:36:15 +0000</pubDate>
      <link>https://dev.to/harrisgeo88/understanding-the-test-pyramid-h31</link>
      <guid>https://dev.to/harrisgeo88/understanding-the-test-pyramid-h31</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally posted on my blog &lt;a href="https://www.harrisgeo.me/blogs/understanding-the-test-pyramid"&gt;harrisgeo.me&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b8kYShIc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://harrisgeo.xyz/images/pyramid-sunset.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b8kYShIc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://harrisgeo.xyz/images/pyramid-sunset.jpg" alt="https://harrisgeo.xyz/images/pyramid-sunset.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@stephenleo1982?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Stephen Leonardi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Testing is a really important part of coding that is very often ignored by developers. How many times have we all experienced that pushing code to production (or not even reaching that far) had broken part our service / website?&lt;/p&gt;

&lt;p&gt;It especially sucks when a part of the system that is totally unrelated to our code ends up having a problem due to our changes. That phenomenon is usually referred to as a &lt;code&gt;side effect&lt;/code&gt;. Putting together several chunks of code that were written by multiple developers is a recipe for disaster as a result of side effects.&lt;/p&gt;

&lt;p&gt;Conflicts may arise in files that were modified by more than one person. These conflicts often end up causing bugs and other unpleasant system behaviour. So what do we do to put ourselves in a better place?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-testing-pyramid" class="anchor"&gt;
  &lt;/a&gt;
  The testing pyramid
&lt;/h2&gt;

&lt;p&gt;You might have heard this term by quality engineers (brrr who even talks to them? 😆) when they want to describe how testing can be abstracted in multiple levels. In a world where releasing doesn’t result in us being in a cold sweat, we need to make use of the testing pyramid (along with a “few” other concepts).  That way, we will feel more confident that our new code is not going to break the system that easily.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KkqgDyea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://harrisgeo.xyz/images/testing-pyramid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KkqgDyea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://harrisgeo.xyz/images/testing-pyramid.png" alt="https://harrisgeo.xyz/images/testing-pyramid.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Image by &lt;a href="https://www.oreilly.com/library/view/hands-on-microservices-with/9781788471459/assets/01267588-6cc9-4efc-8ab9-440779228bcb.png"&gt;oreilly.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown in the image above, the testing pyramid includes 3 stages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unit tests (small tests)&lt;/li&gt;
&lt;li&gt;integration tests (medium tests)&lt;/li&gt;
&lt;li&gt;end to end tests or e2e tests (large tests)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While at Google they like to refer to each one of them based on the impact it has on the system (thus the size), I think the rest of the world prefers the technical term when referring to each one of them.&lt;/p&gt;

&lt;p&gt;If you notice in the image above, the unit section is quite bigger than the integration section and the second one itself is bigger than the one for e2e. That is a good way to quickly visualise the amount of tests that are supposed to be written to ensure good testing balance. We will analyse each stage further down in this post.&lt;/p&gt;

&lt;p&gt;To help us understand each test's purpose, let’s use as an example the construction for a multi floor building.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unit-tests" class="anchor"&gt;
  &lt;/a&gt;
  Unit tests
&lt;/h2&gt;

&lt;p&gt;Let’s think of unit tests as the idea of making sure that each tile, brick or cable behind the wall works fine.&lt;/p&gt;

&lt;p&gt;Unit tests should be testing small pieces of code that run on a single process. Examples of such pieces can be helper functions, independent React components and other I/O operations. We want to test code that has a single purpose and mainly makes our development work smoother. For that reason the majority of the tests our system is going to have will be unit tests.&lt;/p&gt;

&lt;p&gt;Another important requirement for unit tests is that they should not be accessing the disk or network. For cases where they rely on libraries or external sources, the use of &lt;code&gt;test doubles&lt;/code&gt; is what will help us solve that problem without breaking the rule of no network / disk access. There are cases where unit tests can access public APIs and other external sources but in this article let's keep it simple.&lt;/p&gt;

&lt;p&gt;Test doubles are common in all kinds of tests and they include a few different types that can be quite useful for us. These are &lt;code&gt;stubs&lt;/code&gt;, &lt;code&gt;test fakes&lt;/code&gt; and  &lt;code&gt;interaction testing&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stubs" class="anchor"&gt;
  &lt;/a&gt;
  Stubs
&lt;/h3&gt;

&lt;p&gt;Stubs (often referred to as mocks) are the most commonly used test doubles in unit tests. Stubs work in a way where we return a hardcoded result we have already predefined before executing the test. That is really useful when our code uses external libraries and dependencies that are supposed to make asynchronous requests to our network or other distributed sources. That technique keeps us on track and we can continue testing without relying on communication with code we have no control over.&lt;/p&gt;

&lt;p&gt;Unit tests are usually really fast both to execute and to write. For that reason they should always be included when pushing changes to our code. Most teams I have worked with would reject your PR if it didn’t include any unit tests. Again, with unit tests, the more the merrier.&lt;/p&gt;

&lt;p&gt;However, it is really important to mention that only focusing on adding unit tests DOES NOT mean that our system is going to be bug free. That is why I think that concepts like 100% test coverage are b*^%#$€t. But again, that’s my personal opinion. If we want to ensure quality then maybe we should start worrying about the rest of the stages in the test pyramid as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integration-tests" class="anchor"&gt;
  &lt;/a&gt;
  Integration tests
&lt;/h2&gt;

&lt;p&gt;Now let’s think of the whole room for the office. Maybe the walls, the floor or even the whole kitchen. They all contain lots of smaller units that when put together as a group do something bigger. Stuff like turning on the lights or making sure the coffee maker will have enough and continuous electricity to work when we want to make some coffee.&lt;/p&gt;

&lt;p&gt;Integration tests are used for testing groups of smaller units where we want to see how they behave as a whole. In the frontend world integration tests are often referred to as &lt;code&gt;UI tests&lt;/code&gt;. A good example of a library that helps us with that in the React world, is &lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;react-testing-library&lt;/a&gt;. In the backend world they are often referred to as &lt;code&gt;contract tests&lt;/code&gt; or &lt;code&gt;api tests&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When it comes to speed, integration tests sit right between unit and e2e tests. The idea is that we want our code to only reach &lt;a href="http://localhost"&gt;localhost&lt;/a&gt; in order to read or write any data. In other words, even though they are allowed to talk to other services, these services are only allowed to be on the &lt;strong&gt;same machine&lt;/strong&gt;. To achieve that we need to once again make use of test doubles. This is where we can make good use of &lt;code&gt;test fakes&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-fakes" class="anchor"&gt;
  &lt;/a&gt;
  Test fakes
&lt;/h3&gt;

&lt;p&gt;Test fakes as the name suggests are fake representations of the original service our code is supposed to be talking to. Setting up test fakes can be a bit painful as we need to mock the service and or database we are supposed to be talking to but once this part is done, the value it returns is spectacular. Libraries like &lt;a href="https://github.com/nock/nock"&gt;nock&lt;/a&gt; or &lt;a href="https://github.com/mswjs/msw"&gt;mock-service-worker&lt;/a&gt; are some really good tools that can help us achieve test fakes.&lt;/p&gt;

&lt;p&gt;For Node.js services we can spin up a temporary Database and seed it with some controlled data. Doing that, our API will work as intended but it will instead use our fake Database and test data.&lt;/p&gt;

&lt;p&gt;For the temporary Database we can spin up a Docker container that will contain an instance of that Database we are using (like MySQL, PostgresQL, etc). We can then execute all the available migration scripts and then have an exact copy of our required tables.&lt;/p&gt;

&lt;p&gt;We can then use  &lt;code&gt;fixtures&lt;/code&gt; to send controlled data into that instance. That way, calling an API for e.g. all the available food recipes a user has, will return us the actual controlled data that we instructed our code to insert into the Database.&lt;/p&gt;

&lt;p&gt;If you think about it, test fakes are basically setting up a quick Database to temporarily write to and once the test is finished, that Database can be destroyed. I have to admit it took me a while to get comfortable with that concept but now it sounds that simple. Maybe the fact that it touches multiple areas all together is something that makes it look a bit more terrifying. However, like everything in programming, at the beginning it may look scary but after doing that a few times, we get used to it and see the real value it provides.&lt;/p&gt;

&lt;p&gt;Making integration tests easy to deal with, really depends on the setup of our system. If it is that painful to set them up, that usually is a sign that we need to refactor and / or simplify certain parts of our system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interaction-tests" class="anchor"&gt;
  &lt;/a&gt;
  Interaction tests
&lt;/h3&gt;

&lt;p&gt;Interaction tests can be part of either unit or integration tests. They are mainly designed to test how a function is called without calling its implementation or relying on its result. Some common examples you might have already seen with jest is properties like &lt;code&gt;toHaveBeenCalled&lt;/code&gt; or &lt;code&gt;toHavebeenCalledWith(x, y)&lt;/code&gt;. Such tests can be quite useful if we want to test concepts like &lt;em&gt;if a user resets their password, the function for sending an email with the new password setup link is called with user's email&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Unlike unit tests, for integration tests it makes sense to set them up to be testing multiple things in each one of them. I know that some developers may disagree with multi scoped tests but I think that it saves a lot of time and lines of code as the majority of the times the testing scenarios are the same but we just change the target of the test.&lt;/p&gt;

&lt;p&gt;What I really like about integration tests is that when releasing, amongst other tests, they give us the highest amount of confidence that if something is about to break, that should appear here. That is because they touch a decent amount of code, are not that slow and with that combination, they can help us spot most of the bugs that can occur.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#end-to-end-tests" class="anchor"&gt;
  &lt;/a&gt;
  End to end tests
&lt;/h2&gt;

&lt;p&gt;We thought of the bricks and tiles of the room, we thought of the different rooms and other groups of units but we haven't thought of how we are going to make sure that they all glue together properly. Now it's time to worry about the entirety of the building. What rooms does each floor have? How do we move between floors? Is it a good idea to add a gym on floor 4 where directly underneath it there is a library?&lt;/p&gt;

&lt;p&gt;Systems usually have several microservices, 3rd party apps and more that talk to each other in order to achieve a certain goal. Imagine how many different layers the code visits every time we want to register to a service, login or complete any other full journey. This is what the e2e tests are designed for.&lt;/p&gt;

&lt;p&gt;At the end of the day every line of code that we write has one and only one purpose, which is to solve end users problems. Testing these entire journeys users take in order to perform an action is what e2e tests are all about. However unlike unit and integration tests, e2e tests can be really slow in comparison as they are supposed to be talking to the real services and not mock that much. They need to talk to the real database, go through the entirety of our microservices so that we feel confident that everything works well. However e2e tests are prone to network connection issues that may occur that will cause the test to fail.&lt;/p&gt;

&lt;p&gt;For these reasons e2e are usually not running that often comparing to unit test and integration tests. We want the development flow to be as fast as possible and sadly e2e tests sometimes may be a blocker. That is why e2e tests are common to run pre deploying to an environment to even furtherly ensure we are not going to break.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moral-of-the-story" class="anchor"&gt;
  &lt;/a&gt;
  Moral of the story
&lt;/h2&gt;

&lt;p&gt;We can all agree that releasing "bug free" code is a bit of mission impossible but that does not mean that we are just going to give up like that. Sooner or later, all developers will realise that the most important part of our jobs is to focus on solving problems. Adding quality to our code is a really decent way of proving that we know what we're doing. Then, having the confidence to say that code that we release is not going to introduce new problems to our system is the way going forward. &lt;/p&gt;

&lt;p&gt;Understanding the test pyramid and making use of it is not just another trendy topic that we need to learn because it is asked in interviews. It is a fundamental concept that will help us better debug problems when dealing with the entire stack of our system. Most importantly it is one of the things that knowing how to deal with is great to level up our skills as developers.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Feel free to contact me with any questions! Share this post with your friends and colleagues&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Follow me on &lt;a href="https://twitter.com/harrisgeo88"&gt;Twitter&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Add me on &lt;a href="https://www.linkedin.com/in/charilaos-georgakakis/"&gt;LinkedIn&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
      <category>fullstack</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Make Arrays your best friend with these methods!</title>
      <author>Soumya Dey</author>
      <pubDate>Sun, 13 Dec 2020 18:45:23 +0000</pubDate>
      <link>https://dev.to/soumyadey/make-arrays-your-best-friend-with-these-methods-59ld</link>
      <guid>https://dev.to/soumyadey/make-arrays-your-best-friend-with-these-methods-59ld</guid>
      <description>&lt;p&gt;I know many people have already written a lot about arrays, but most of them only contain the most used and basic methods.&lt;/p&gt;

&lt;p&gt;But there are lots of not so popular methods that you can use to manipulate, iterate, and do many things with your arrays. So we are going to talk about those methods in this post using JavaScript.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#arrays" class="anchor"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h2&gt;

&lt;p&gt;JavaScript array is a non-primitive data type that can store multiple values in it which can be of the same data type or different data type. Also, the length of a JavaScript array is not fixed.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#array-methods" class="anchor"&gt;
  &lt;/a&gt;
  Array methods
&lt;/h2&gt;

&lt;p&gt;We all know about &lt;code&gt;push()&lt;/code&gt;, &lt;code&gt;pop()&lt;/code&gt;, &lt;code&gt;indexOf()&lt;/code&gt; methods.&lt;br&gt;
&lt;code&gt;arr.push('x')&lt;/code&gt; adds &lt;code&gt;x&lt;/code&gt; at the end of the array &lt;code&gt;arr&lt;/code&gt; and &lt;code&gt;arr.pop()&lt;/code&gt; removes the last item from &lt;code&gt;arr&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;arr.indexOf('x')&lt;/code&gt; finds the index of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;arr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So let's talk about the unpopular but equally important guys here.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#manipulate-arrays" class="anchor"&gt;
  &lt;/a&gt;
  Manipulate arrays
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;unshift()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;unshift()&lt;/code&gt; method &lt;em&gt;adds the new element at the beginning of the array&lt;/em&gt; and returns the new length of the array.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["hello", "world"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;shift()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;shift()&lt;/code&gt; method &lt;em&gt;removes the first element from the array and returns the removed element&lt;/em&gt;. It also changes the length of the array.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// "hello"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["world"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;slice()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;slice()&lt;/code&gt; method returns a &lt;em&gt;shallow copy of a portion of an array into a new array object selected from start to end&lt;/em&gt;, excluding the item at the end index. The original array is not modified&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;py&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;java&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c++&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [ 'c++', 'c#' ]&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [ 'js', 'py' ]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["js", "py", "java", "c++", "c#"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;splice()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;splice()&lt;/code&gt; method changes the contents of an array by &lt;em&gt;removing or replacing existing elements and/or adding new elements in place&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;py&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;java&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c++&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// delets 2 items starting from index 0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["java", "c++", "c#"]&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kotlin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// delets 1 item starting from index 0,&lt;/span&gt;
&lt;span class="c1"&gt;// and puts 'kotlin' in that place&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["kotlin", "c++", "c#"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;join()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;join()&lt;/code&gt; method &lt;em&gt;creates and returns a new string by concatenating all of the elements in an array&lt;/em&gt; separated by commas or a specified separator string.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// "1,2,3"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;love&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;programming&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;array2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "I-love-programming"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;concat()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;concat()&lt;/code&gt; method is used to &lt;em&gt;merge two or more arrays&lt;/em&gt;. This method does not change the existing arrays but instead returns a new array.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;f&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["a", "b", "c", "d", "e", "f"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#iterate-over-arrays" class="anchor"&gt;
  &lt;/a&gt;
  Iterate over arrays
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;every()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;every()&lt;/code&gt; method &lt;em&gt;tests whether all elements in the array pass the test implemented by the provided function&lt;/em&gt;. It returns a Boolean value.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;some()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;some()&lt;/code&gt; method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// checks whether an element is even&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;map()&lt;/code&gt; method creates a new array populated with the results of calling a provided function on every element in the calling array.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubleOfArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doubleOfArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [2, 4, 6, 8, 10]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;filter()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; method creates a new array with all elements that pass the test implemented by the provided function.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// only the element that are even&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;evenArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evenArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [2, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reduction-methods" class="anchor"&gt;
  &lt;/a&gt;
  Reduction methods
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reduce()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;reduce()&lt;/code&gt; method &lt;em&gt;executes a reducer function defined by you on each element of the array&lt;/em&gt;, resulting in a single output value.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// ((((1-2)-3)-4)-5) = -13&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// -13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reduceRight()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;reduceRight()&lt;/code&gt; method &lt;em&gt;applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// ((((5-4)-3)-2)-1) = -5&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduceRight&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// -5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sorting-arrays" class="anchor"&gt;
  &lt;/a&gt;
  Sorting arrays
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sort()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;sort()&lt;/code&gt; method &lt;em&gt;sorts the elements of an array in place&lt;/em&gt; and returns the sorted array. The default sort order is ascending.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;months&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;March&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Feb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dec&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;months&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;months&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["Dec", "Feb", "Jan", "March"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2, 3, 4, 5, 6, 7]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reverse()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;reverse()&lt;/code&gt; method &lt;em&gt;reverses an array in place&lt;/em&gt; and returns the sorted array. Don't confuse it with sorting in descending order.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [3, 7, 1, 5, 2, 6, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;That's it. You have made a new best friend now.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;br&gt;
If you want to get a deeper knowledge of Arrays in JavaScript then make sure to read the MDN docs of Array here 👉 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;Array - JavaScript | MDN&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comment-here-if-you-have-any-questions-about-these-awesome-array-methods" class="anchor"&gt;
  &lt;/a&gt;
  Comment here if you have any questions about these awesome array methods.
&lt;/h3&gt;

&lt;p&gt;If you like my blogs &lt;a href="https://dev.to/soumyadey"&gt;Follow me here on Dev.to&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Soumya-Dey"&gt;My Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build responsive websites without a framework</title>
      <author>Blossom Babs</author>
      <pubDate>Sun, 13 Dec 2020 17:59:47 +0000</pubDate>
      <link>https://dev.to/blossom/build-responsive-websites-without-a-framework-47e6</link>
      <guid>https://dev.to/blossom/build-responsive-websites-without-a-framework-47e6</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Summary&lt;/strong&gt;: Responsiveness is fundamental in web development. With multiple devices and screen resolutions, you want to build a website that works on ALL these screens. In this article, I would be taking you through five things you &lt;strong&gt;must&lt;/strong&gt; consider when building a responsive website without a framework.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-responsive-web-development" class="anchor"&gt;
  &lt;/a&gt;
  What is Responsive Web development?
&lt;/h1&gt;

&lt;p&gt;Responsive web development is an approach to web design that makes web pages render well on a variety of devices and screen sizes. Web development has advanced past simply designing static pages for the computer. Now, your web pages and applications have to support multiple devices viewport; there are lots of them.&lt;/p&gt;

&lt;p&gt;Every frontend developer has heard or read the above multiple times. Responsive web development was one of the first things that I heard over and over again. However, I was introduced to bootstrap for responsiveness.&lt;/p&gt;

&lt;p&gt;There are lots of CSS frameworks, However Bootstrap was one of my favourite frameworks to use. I used bootstrap in all my projects including react based projects for responsiveness till I realised I was overly dependent on it. Also, Bootstrap can have a lot of dependencies in instances of small-scale projects.&lt;/p&gt;

&lt;p&gt;In my journey to build fully responsive without frameworks and with just HTML and CSS, I found out 5 crucial things to do to make sites responsive and developments less cluttered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-always-design-mobilefirst" class="anchor"&gt;
  &lt;/a&gt;
  1. Always design mobile-first
&lt;/h2&gt;

&lt;p&gt;Contrary to popular opinion, this is not gate-keeping. Designing mobile-first ensures that you are able to get as much information as you can on a smaller screen. When it is scaled up, the components would scale up too. However, if you design for desktop first, most components will go out of place when shrinked down for  a smaller sized screen.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a challenge; you should replicate a simple landing page. Build mobile first then desktop first, see which was easier to scale.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-define-a-fluid-layout" class="anchor"&gt;
  &lt;/a&gt;
  2. Define a fluid layout
&lt;/h2&gt;

&lt;p&gt;My go-to keywords for defining the overall layout of the webpage are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;width: 90%;
margin: 0 auto;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The width ensures that everything on the web page is a set width from the border of the screen size. Margin sets the content of the webpage to the center of the screen width.&lt;/p&gt;

&lt;p&gt;You can play around with the width depending on what you need.&lt;/p&gt;

&lt;p&gt;Make sure you use percentage to define the width, this is because percentages are fluid and will adjust to the size of the device viewport.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a challenge; you should add width and margin to the landing page you created above. It would make the scaling up or down much more fluid.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-know-when-to-use-rems-and-ems" class="anchor"&gt;
  &lt;/a&gt;
  3. Know when to use Rems and Ems
&lt;/h2&gt;

&lt;p&gt;Rems and Ems are size units just like pixels and percentages. Rems and Ems are relative units and are much more preferred when defining font size, border, padding etc.&lt;/p&gt;

&lt;p&gt;They are very different though.&lt;/p&gt;

&lt;p&gt;Em is relative to the size of its direct or nearest parent, while Rem is only relative to the html (root) font-size.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.body{
font-size: 14px;
}

.container{
width:50%;
background-color:red;
font-size: 1.5em;

h1{
font-size: 3em;
}

}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;h1{font-size:3rem;}&lt;/code&gt;&lt;br&gt;
&lt;code&gt;h1{font-size:3em;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a challenge, run both codes or variations of it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Both h1 sizes would differ. The em unit will be relative to its parents element(the container); the h1 will be three times the size of the container.&lt;br&gt;
While the rem unit will be relative to the body, not the parent.&lt;/p&gt;

&lt;p&gt;When using units, you want to know when to use which so as to avoid cascading effect.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-use-css-layouts" class="anchor"&gt;
  &lt;/a&gt;
  4. Use CSS layouts
&lt;/h2&gt;

&lt;p&gt;Grid and Flex are powerful tools for structuring the layout of the web. Use them!&lt;/p&gt;

&lt;p&gt;Once I found out how similar the bootstrap grid was to css native grid and flex, there simply was no going back for me. Infact I find the css grid much simpler, customizable and with no dependencies.&lt;/p&gt;

&lt;p&gt;If for some reason, I have to use the Bootstrap framework, it would definitely not for the layouts.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-use-media-queries" class="anchor"&gt;
  &lt;/a&gt;
  5. Use media queries
&lt;/h2&gt;

&lt;p&gt;When I started writing responsive designs without frameworks, I used media queries everywhere.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media and screen(max-width: 500px){
//
}

@media and screen(max-width: 320px){
//
}

@media and screen(max-width: 480px){
//
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It was a mess and this is why I have saved this for last.&lt;/p&gt;

&lt;p&gt;It is impossible not to use media queries when talking about responsiveness. But, if you take note of the points above, you wouldn't need media queries for every breakpoint. Instead, they would be used sparingly and specifically. E.g, the point where the screen goes from being a phone to tablet and tablet to laptop and laptop to the television. Not for every brand of iPhone viewport.&lt;/p&gt;

&lt;p&gt;Familiarize yourself with the use of width and max-width. The width can be used to set the width for a screen, then max-width for lager screens all in the same block of code. Neither affecting the other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus point&lt;/strong&gt;: Avoid setting a fixed width and height for your image. Either set width or height, it would scale up nicely and responsively. Setting a width and height distorts it and makes it unresponsive.&lt;br&gt;
Pro-tip: Use a percentage to define the widths.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Introduction to Custom [HTML] Elements (CSS ART)</title>
      <author>Michael Salaverry</author>
      <pubDate>Sun, 13 Dec 2020 17:56:58 +0000</pubDate>
      <link>https://dev.to/barakplasma/introduction-to-custom-html-elements-136c</link>
      <guid>https://dev.to/barakplasma/introduction-to-custom-html-elements-136c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-are-custom-html-elements" class="anchor"&gt;
  &lt;/a&gt;
  What are Custom [HTML] Elements?
&lt;/h1&gt;

&lt;p&gt;Custom Elements are reusable html elements which can encapsulate implementation details into components. Custom Elements are part of the Web Component spec, which is supported by all the major browsers. Custom Elements can be used to bring the component model of React/Angular/Vue to the native web platform without any added dependencies costing valuable network capacity.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-do-custom-elements-look-like" class="anchor"&gt;
  &lt;/a&gt;
  What do Custom Elements look like?
&lt;/h1&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/barakplasma/embed/JjREOvx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;For this example, and in honor of the current Jewish Holiday of Hanukkah, I decided to create a Custom Element for Menorah lights. A menorah has 9 spaces for lights (candles or oil lamps) in total. Each night of Hanukkah, we ignite one more light using the helper light, the shamash. The shamash is always a bit taller than the rest. &lt;/p&gt;

&lt;p&gt;Let's take a look at the HTML to see what makes this special:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/barakplasma/embed/JjREOvx?height=600&amp;amp;default-tab=html&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Rather than rewrite the same HTML 9 times (span&amp;gt;img.candle), I created one reusable custom element for a candle. A "candle-el" can be (lit or unlit) and (normal or shamash). We can create custom attributes on custom elements which can modify that element's styling, behavior, or contents. In this case, each candle listens for the "lit" and the "shamash" attributes to see if it needs to have different styling. I want this to work like the "checked" attribute on HTMLInputElements.&lt;/p&gt;

&lt;p&gt;(Homework idea: Click "edit on codepen" and try adding and removing "lit" from the various candle elements in the codepen to see how it changes the styling.)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-do-i-get-started-with-custom-elements" class="anchor"&gt;
  &lt;/a&gt;
  How do I get started with Custom Elements?
&lt;/h1&gt;

&lt;p&gt;Custom Elements are probably built into your browser, and require no transpilation/bundling/etc, so all you'll need is your browser and a text editor. Codepen is great for this.&lt;/p&gt;

&lt;p&gt;Since the appeal of Custom Elements is no dependencies, let's try getting started without any frameworks. While Custom Elements are a useful tool even in a React/Angular/Vue project, we don't need those to get started.&lt;/p&gt;

&lt;p&gt;To begin with, we'll need some experience with Javascript. Web Components are built by defining Custom Elements in Javascript. Let's take a look at the Javascript from the example.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/barakplasma/embed/JjREOvx?height=600&amp;amp;default-tab=js&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
The line at the bottom of the Javascript file defines the Custom Element for use in our HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="cm"&gt;/*custom element name=*/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;candle-el&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="cm"&gt;/*Javascript class for the custom element=*/&lt;/span&gt;&lt;span class="nx"&gt;Candle&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The Javascript class must extend an HTMLElement. Within the constructor, we need to call super() and create a shadow DOM root. Later on in the constructor, we need to append the elements within the Custom Element to that shadow DOM root. The shadow DOM root is how we encapsulate the HTML and CSS for the custom element. That shadow root isolates the component from its siblings and parents. You can see this if you inspect element on any candle.&lt;/p&gt;

&lt;p&gt;Custom Elements are mostly created with Javascript within the constructor. As you can see, I used &lt;code&gt;document.createElement&lt;/code&gt; &lt;code&gt;Element.appendChild&lt;/code&gt; and &lt;code&gt;Element.[has/set/get]Attribute&lt;/code&gt; through out the constructor to create the elements. This is vanilla Javascript, available without Custom Elements as well. As an aside, React also uses &lt;code&gt;document.createElement&lt;/code&gt; to create elements for rendering into the DOM.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Web Components are a standardized and future proof tool for Frontend Web Developers to build consistent experiences. With just a bit of vanilla (ordinary) Javascript, HTML, and CSS, we can create well encapsulated, reusable, and fast loading Custom Elements which can be used across projects and frameworks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-resources" class="anchor"&gt;
  &lt;/a&gt;
  More resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components"&gt;MDN: Web Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"&gt;MDN: Using Custom Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/web-components/customelements"&gt;Google: Custom Elements tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Just in case CodePen doesn't work for you, here's the same thing as a &lt;a href="https://gist.github.com/barakplasma/b78bc7c9dc1d6a7182a3a52d3d17315a"&gt;Github Gist&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>codepen</category>
      <category>css</category>
    </item>
  </channel>
</rss>
