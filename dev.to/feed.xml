<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Cypress Assertions</title>
      <author>Automation Bro</author>
      <pubDate>Wed, 05 May 2021 12:13:51 +0000</pubDate>
      <link>https://dev.to/automationbro/cypress-assertions-3iac</link>
      <guid>https://dev.to/automationbro/cypress-assertions-3iac</guid>
      <description>&lt;p&gt;In this tutorial, we will cover different types of Cypress Assertions such as the default, implicit and explicit assertions and talk about the difference between the should and the expect assertions.&lt;/p&gt;

&lt;p&gt;Cypress uses the Chai assertion library as well as the extensions of Sinon &amp;amp; jQuery to provide you with dozens of powerful assertions for free.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#default-assertions"&gt;
  &lt;/a&gt;
  Default Assertions
&lt;/h3&gt;

&lt;p&gt;Cypress comes with many default assertions that can be used without having to explicitly define assertions, such as ‚Äì&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;cy.visit():&lt;/strong&gt; every-time you visit a page, Cypress expects the page to return with a 200 status code&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;cy.get():&lt;/strong&gt; the get command expects the element to exist in the DOM first before trying to access it&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#implicit-assertions"&gt;
  &lt;/a&gt;
  Implicit Assertions
&lt;/h3&gt;

&lt;p&gt;The implicit assertions used the &lt;code&gt;should()&lt;/code&gt; or the &lt;code&gt;and()&lt;/code&gt; commands when making assertions. This is the preferable way of making assertions in Cypress.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92qF1des--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpubgtovgebjau12s4lm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92qF1des--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpubgtovgebjau12s4lm.png" alt="implicit1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can even chain multiple assertions together ‚Äì&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D0oeaqUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prx9fdg9170of87kf87q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0oeaqUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prx9fdg9170of87kf87q.png" alt="implicit2"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#explicit-assertions"&gt;
  &lt;/a&gt;
  Explicit Assertions
&lt;/h3&gt;

&lt;p&gt;You should use Explicit assertions when you would like to make multiple assertions for the same subject or when you would like to manipulate your subject before making your assertion. For explicit assertions, you will use the &lt;code&gt;expect&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j7tS2ygA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0li96lq70o3xxbmbuqc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j7tS2ygA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0li96lq70o3xxbmbuqc.png" alt="explicit"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#check-out-the-video-below-to-see-learn-more-about-cypress-assertions-"&gt;
  &lt;/a&gt;
  Check out the video below to see learn more about Cypress Assertions ‚Äì
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/naTXinVm58Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;üìß Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this &lt;/p&gt;

&lt;p&gt;üëç Follow &lt;a href="https://twitter.com/automationbro"&gt;automationbro&lt;/a&gt; on Twitter for the latest updates&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;I love coffees! And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and buying me a cup of coffee -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>testing</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Build your Responsive website without media query</title>
      <author>Temani Afif</author>
      <pubDate>Wed, 05 May 2021 12:04:48 +0000</pubDate>
      <link>https://dev.to/afif/build-your-responsive-website-without-media-query-omj</link>
      <guid>https://dev.to/afif/build-your-responsive-website-without-media-query-omj</guid>
      <description>&lt;p&gt;We cannot talk about web development without talking about Reponsive Design. The latter is now a must and everyone will use Media Queries to build a responsive website.&lt;/p&gt;

&lt;p&gt;Since the introduction of media queries (before 2000), CSS has evolved and now (in 2021) there are a lot of tricks that can help you drastically reduce the usage of media queries and create an optimized code. I will even show you how to replace multiple media queries with only one CSS declaration. &lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;strong&gt;PS:&lt;/strong&gt; you have to run all the examples outside DEV to better see the results since the embeded version is very small&lt;/sup&gt;&lt;/p&gt;




&lt;p&gt;I will start with the trivial examples that are widely used but still limited:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-flex-endraw-amp-raw-flexwrap-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;flex&lt;/code&gt; &amp;amp; &lt;code&gt;flex-wrap&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/zYNggoq"&gt;https://codepen.io/t_afif/pen/zYNggoq&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex: 400px&lt;/code&gt; will set a base width equal to &lt;code&gt;400px&lt;/code&gt;. The items will then wrap if there isn't enough space for the &lt;code&gt;400px&lt;/code&gt;. They will grow to fill the empty spaces and will shrink if the container width is bigger than &lt;code&gt;400px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Easy to use, only 2 lines of code are required&lt;br&gt;
‚ùå We cannot control when the items will wrap&lt;br&gt;
‚ùå We cannot control the number of items per row&lt;br&gt;
‚ùå The items of the last row will have a different width&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#-raw-autofit-endraw-amp-raw-minmax-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;auto-fit&lt;/code&gt; &amp;amp; &lt;code&gt;minmax&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/wvgVVPN"&gt;https://codepen.io/t_afif/pen/wvgVVPN&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Similar to the previous example, the &lt;code&gt;repeat(auto-fit,minmax(400px,1fr))&lt;/code&gt; will define the base width and we will have a similar wrapping behavior.&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Easy to use, only 1 line of code is required&lt;br&gt;
‚úîÔ∏è The items of the last row will keep the same width&lt;br&gt;
‚ùå We cannot control when the items will wrap&lt;br&gt;
‚ùå We cannot control the number of items per row&lt;br&gt;
‚ùå We don't have the shrink effect of the flexbox so we may face overflow&lt;/p&gt;



&lt;p&gt;We will try to optimize the above examples with some CSS tricks in order to overcome the drawbacks.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#controling-the-number-of-items"&gt;
  &lt;/a&gt;
  Controling the number of items
&lt;/h3&gt;

&lt;p&gt;In our first example, let's change &lt;code&gt;flex: 400px&lt;/code&gt; to &lt;code&gt;flex: max(400px, 100%/3 - 20px)&lt;/code&gt;. Resize the screen and you will notice that each row will not have more than 3 items (even for a large screen width). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/abpeeeV"&gt;https://codepen.io/t_afif/pen/abpeeeV&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The logic is easy. When the screen width increase, &lt;code&gt;100%/3&lt;/code&gt; will be bigger than &lt;code&gt;400px&lt;/code&gt; so it's the max value that will get used. We cannot have more than 3 items per row if all them have a width equal to &lt;code&gt;100%/3&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-the-hell-is-the-raw-20px-endraw-"&gt;
  &lt;/a&gt;
  What the hell is the &lt;code&gt;20px&lt;/code&gt;??
&lt;/h4&gt;

&lt;p&gt;It's twice the gap we defined. For 3 items we will have 2 gaps so for N items we should use &lt;code&gt;max(400px, 100%/N - (N - 1)*gap)&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;We can still optimize the formula to remove the gap and use &lt;code&gt;max(400px, 100%/(N + 1) + 0.1%)&lt;/code&gt;. We tell the browser that each item will be equal to &lt;code&gt;100%/(N + 1)&lt;/code&gt; so &lt;code&gt;N + 1&lt;/code&gt; items per row but we add a tiny percentage (the &lt;code&gt;0.1%&lt;/code&gt;) thus one of the items will wrap and we end with only &lt;code&gt;N&lt;/code&gt; items per row! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/wvJwzbL"&gt;https://codepen.io/t_afif/pen/wvJwzbL&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Now we can control the maximum number of items per row.&lt;/p&gt;

&lt;p&gt;The same can also be applied to the CSS grid example as well: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/BaWBLge"&gt;https://codepen.io/t_afif/pen/BaWBLge&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I have added CSS variables to easily control the different values.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#controling-the-shrink-effect"&gt;
  &lt;/a&gt;
  Controling the shrink effect
&lt;/h3&gt;

&lt;p&gt;Using CSS grid we may have overflow if the base width is bigger than the container width unlike with flexbox where we have the &lt;code&gt;flex-shrink&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To overcome this we change &lt;code&gt;max(400px, 100%/(N + 1) + 0.1%)&lt;/code&gt; to &lt;code&gt;clamp(100%/(N + 1) + 0.1%, 400px, 100%)&lt;/code&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For a large screen width, the &lt;code&gt;100%/(N + 1) + 0.1%&lt;/code&gt; will be bigger than &lt;code&gt;400px&lt;/code&gt; and we will get our maximum number of items. &lt;/li&gt;
&lt;li&gt;For a small screen width, the &lt;code&gt;100%&lt;/code&gt; will be smaller than &lt;code&gt;400px&lt;/code&gt; and our items will not exceed the container width.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/ZEezBGL"&gt;https://codepen.io/t_afif/pen/ZEezBGL&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;‚úîÔ∏è We have our shrink effect and no more overflow&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#controling-the-wrap"&gt;
  &lt;/a&gt;
  Controling the wrap
&lt;/h3&gt;

&lt;p&gt;In all the previous examples, we have no control over the wrap. We don't really know when it will happen. It depends on the base width, the gap, the container width, etc &lt;/p&gt;

&lt;p&gt;To control this we will change our base width (the &lt;code&gt;400px&lt;/code&gt;) with &lt;code&gt;(400px - 100vw)*1000&lt;/code&gt; to get the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clamp(100%/(N + 1) + 0.1%, (400px - 100vw)*1000, 100%)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks a bit strange but easy to understand. The &lt;code&gt;100vw&lt;/code&gt; is our screen width and logically this value will change on screen resize while the &lt;code&gt;400px&lt;/code&gt; will remain fixed. This will lead us to the following logic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When &lt;code&gt;screen width (100vw) &amp;gt; 400px&lt;/code&gt; the difference will be &lt;strong&gt;negative&lt;/strong&gt; so it will get clamped to the &lt;code&gt;100%/(N + 1) + 0.1%&lt;/code&gt; which is a positive value: We have N items per row&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;code&gt;screen width (100vw) &amp;lt; 400px&lt;/code&gt; the difference will be &lt;strong&gt;positive&lt;/strong&gt;, we multiply with a big value (the &lt;code&gt;1000&lt;/code&gt;) so it will get clamped to the &lt;code&gt;100%&lt;/code&gt;: We have 1 item per row&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/BaWBQqK"&gt;https://codepen.io/t_afif/pen/BaWBQqK&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We did our first media query!&lt;/p&gt;

&lt;p&gt;We were able to move &lt;strong&gt;from N columns to 1 column&lt;/strong&gt; without using &lt;code&gt;@media&lt;/code&gt; and with only one CSS declaration. Our base width has become a breakpoint.&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è We can control when the items will wrap&lt;br&gt;
‚úîÔ∏è We can control the number of items per row&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#what-about-moving-from-n-columns-to-m-columns"&gt;
  &lt;/a&gt;
  What about moving from N columns to M columns?
&lt;/h3&gt;

&lt;p&gt;We simply update our &lt;code&gt;clamp()&lt;/code&gt; function like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clamp(100%/(N + 1) + 0.1%, (400px - 100vw)*1000, 100%/(M + 1) + 0.1%)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think everyone got the trick now. When the screen width is bigger than &lt;code&gt;400px&lt;/code&gt; we fall into the first rule (N items per row). When the screen width is samller than &lt;code&gt;400px&lt;/code&gt; we fall into the second one (M items per row).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/ZEezBgo"&gt;https://codepen.io/t_afif/pen/ZEezBgo&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We can easily control the number of items per row and we can decide when to change that number. All this using only one CSS declaration!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-about-moving-from-n-columns-to-m-columns-to-1-column-"&gt;
  &lt;/a&gt;
  What about moving from N columns to M columns to 1 column ?
&lt;/h3&gt;

&lt;p&gt;We can do this by nesting &lt;code&gt;clamp()&lt;/code&gt; functions like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clamp(clamp(100%/(N + 1) + 0.1%, (W1 - 100vw)*1000,100%/(M + 1) + 0.1%), (W2 - 100vw)*1000, 100%)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have two breakpoints so we will logically need two width (&lt;code&gt;W1&lt;/code&gt; and &lt;code&gt;W2&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;We can see our function like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clamp(clamp( .. ), (W2 - 100vw)*1000, 100%)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;When the screen width is smaller than &lt;code&gt;W2&lt;/code&gt; we fall into &lt;code&gt;100%&lt;/code&gt;: one item per row&lt;/li&gt;
&lt;li&gt;When the screen width is bigger than &lt;code&gt;W2&lt;/code&gt; we fall into the first &lt;code&gt;clamp()&lt;/code&gt;: We do the logic there

&lt;ul&gt;
&lt;li&gt;when the screen width is smaller than &lt;code&gt;W1&lt;/code&gt; we fall into &lt;code&gt;100%/(M + 1) + 0.1%)&lt;/code&gt;: M items per row&lt;/li&gt;
&lt;li&gt;when the screen width is bigger than &lt;code&gt;W1&lt;/code&gt; we fall into &lt;code&gt;100%/(N + 1) + 0.1%)&lt;/code&gt;: N items per row&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see this in play:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/xxqKgZe"&gt;https://codepen.io/t_afif/pen/xxqKgZe&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We did 2 media queries using only one CSS declaration! Not only this, but we can easily adjust that declaration using CSS variables which means that we can update the logic for different containers easily&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/mdWbRRE"&gt;https://codepen.io/t_afif/pen/mdWbRRE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How many media queries until now? well, I stopped the count ...&lt;/p&gt;

&lt;p&gt;You want more breakpoints? You simply nest another &lt;code&gt;clamp()&lt;/code&gt; function and you have&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#from-n-columns-to-m-columns-to-p-columns-to-1-column"&gt;
  &lt;/a&gt;
  From N columns to M columns to P columns to 1 column
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/bGqbgYY"&gt;https://codepen.io/t_afif/pen/bGqbgYY&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We have our responsive design without any single media queries&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Only one line of code&lt;br&gt;
‚úîÔ∏è Easy to update using CSS variables&lt;br&gt;
‚úîÔ∏è We can control the number of items per row&lt;br&gt;
‚úîÔ∏è We can control when the items will wrap&lt;br&gt;
‚úîÔ∏è We don't have overflow on small screens&lt;br&gt;
‚úîÔ∏è All the items have the same width&lt;br&gt;
‚úîÔ∏è Each container can have its own breakpoints&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#container-queries"&gt;
  &lt;/a&gt;
  Container Queries
&lt;/h3&gt;

&lt;p&gt;Everyone is excited to use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries"&gt;this new feature&lt;/a&gt; that consider the width of element instead of the screen to create media queries but no need to wait for it. &lt;/p&gt;

&lt;p&gt;The trick I made already cover this feature. We simply change &lt;code&gt;100vw&lt;/code&gt; with &lt;code&gt;100%&lt;/code&gt; and all the logic we made previously will now consider the container width instead of the screen width.&lt;/p&gt;

&lt;p&gt;Resize the below containers and see the magic in play&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/gOmYmgz"&gt;https://codepen.io/t_afif/pen/gOmYmgz&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h3&gt;

&lt;p&gt;I will end this post with a last trick that allow you to change the coloration of your items without using media queries as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;purple&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--w3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--w2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;green&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--w1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We consider 3 gradient layers plus a &lt;code&gt;background-color&lt;/code&gt;. The size of each gradient is defined using one of the breakpoints. If &lt;code&gt;calc()&lt;/code&gt; is negative then the gradient will not show. If &lt;code&gt;calc()&lt;/code&gt; is positive then the size will also be positive and thanks to the repeat feature, it will cover all the area.&lt;/p&gt;

&lt;p&gt;The order is very important. Below a table to better understand:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[0 W3[&lt;/th&gt;
&lt;th&gt;[W3 W2[&lt;/th&gt;
&lt;th&gt;[W2 W1[&lt;/th&gt;
&lt;th&gt;[W1 infinity[&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;‚úîÔ∏èpurple&lt;/td&gt;
&lt;td&gt;‚ùåpurple&lt;/td&gt;
&lt;td&gt;‚ùåpurple&lt;/td&gt;
&lt;td&gt;‚ùåpurple&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‚úîÔ∏èblue&lt;/td&gt;
&lt;td&gt;‚úîÔ∏èblue&lt;/td&gt;
&lt;td&gt;‚ùåblue&lt;/td&gt;
&lt;td&gt;‚ùåblue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‚úîÔ∏ègreen&lt;/td&gt;
&lt;td&gt;‚úîÔ∏ègreen&lt;/td&gt;
&lt;td&gt;‚úîÔ∏ègreen&lt;/td&gt;
&lt;td&gt;‚ùågreen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‚úîÔ∏èred&lt;/td&gt;
&lt;td&gt;‚úîÔ∏èred&lt;/td&gt;
&lt;td&gt;‚úîÔ∏èred&lt;/td&gt;
&lt;td&gt;‚úîÔ∏èred&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The red color is always shown and at each breakpoint one of the gradient is displayed covering the bottom layer.&lt;/p&gt;

&lt;p&gt;Here is a demo with all the features together. Run at full screen and resize:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/wvJwdRW"&gt;https://codepen.io/t_afif/pen/wvJwdRW&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To make the coloration work based on the container width, we update the code slightly and we use pseudo element that we position relatively to the container and we clip the overflow&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/zYZOwQJ"&gt;https://codepen.io/t_afif/pen/zYZOwQJ&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;A related Stack Overflow question where I am using such trick: &lt;a href="https://stackoverflow.com/q/56669587/8620333"&gt;How to change the color of &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; Element depending on its height or width?&lt;/a&gt;. I am also changing the text coloration and the borders based on the width or the height.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;Now you have a good trick that allow you to control your responsive layout without using media queries and with only few lines of code. Of course, this is not a replacement to media queries. It's an optimization that can help you reduce the amount of code.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>UI Dev Newsletter #55</title>
      <author>Silvestar Bistroviƒá</author>
      <pubDate>Wed, 05 May 2021 11:23:29 +0000</pubDate>
      <link>https://dev.to/starbist/ui-dev-newsletter-55-7mb</link>
      <guid>https://dev.to/starbist/ui-dev-newsletter-55-7mb</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3tceHl0"&gt;The Humble img Element And Core Web Vitals&lt;/a&gt;&lt;br&gt;
Addy Osmani describes how images impact Core Web Vitals and how to improve them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3xHzdh9"&gt;Advanced Core Web Vitals: A Technical SEO Guide&lt;/a&gt;&lt;br&gt;
Jamie Indigo writes an in-depth guide on Core Web Vitals from SEO perspective.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3e8vGAp"&gt;CSS Flexbox Tutorial with Flexbox Properties Cheat Sheet&lt;/a&gt;&lt;br&gt;
Joy Shaheb explains how CSS Flexbox works and describes the CSS Flexbox basics for responsive sites. Cute animal graphics included.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3e9TyDM"&gt;Windows 10 grid hover effect using HTML, CSS, and vanilla JS&lt;/a&gt;&lt;br&gt;
Jash Gopani explains the process of recreating the Windows 10 grid hover effect with CSS and JS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3h0lWKJ"&gt;Identify and Extract Pseudo-Element Selectors from built-in HTML Elements using DevTools&lt;/a&gt;&lt;br&gt;
Bramus Van Damme shows how to use DevTools to dissect and peek inside HTML elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3uhdKcQ"&gt;How to disable scaling for stroke width&lt;/a&gt;&lt;br&gt;
Stefan Judis shows how to use a vector-effect attribute to control how transformations affect stroke width.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/333wG2y"&gt;Exploring color-contrast() for the First Time&lt;/a&gt;&lt;br&gt;
Chris Coyier shares impressions on a color-contrast() function and shares a video for easier understanding.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3gQGZ29"&gt;165+ Developer Resources I Discovered in 2020-2021&lt;/a&gt;&lt;br&gt;
Gedalya Krycer shares a comprehensive, well-organized list of helpful web dev resources‚Äîfrom HTML, CSS, and JavaScript to WordPress, Git, and design.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/34155z3"&gt;Subscribe to the newsletter here!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top WordPress Plugins to Pass the Google Core Web Vitals Test‚Äì 2021</title>
      <author>Christa Elrod</author>
      <pubDate>Wed, 05 May 2021 11:06:38 +0000</pubDate>
      <link>https://dev.to/christaelrod/top-wordpress-plugins-to-pass-the-google-core-web-vitals-test-2021-4jpg</link>
      <guid>https://dev.to/christaelrod/top-wordpress-plugins-to-pass-the-google-core-web-vitals-test-2021-4jpg</guid>
      <description>&lt;p&gt;This article discusses about Google Core Web Vitals and helps readers to understand how their websites can pass the Core Web Vitals test and get optimized for better performance. Core Web Vitals influences a website‚Äôs search engine ranking and so if your website fails to pass this test, it won‚Äôt get a higher  rank in search engine results.&lt;/p&gt;

&lt;p&gt;Most websites fail to abide by the standards set by the Core Web Vitals and the prime reasons for this are CSS issues, hosting problems, large-sized images, JavaScripts, and web fonts.&lt;/p&gt;

&lt;p&gt;This article explains how you can pass Core Web Vitals test using popular WordPress Plugins. These plugins are available for free and they will help you boost your website‚Äôs rank in the search engine results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-google-core-web-vitals"&gt;
  &lt;/a&gt;
  Understanding Google Core Web Vitals
&lt;/h2&gt;

&lt;p&gt;Google defines Core Web Vitals as a division of Web Vitals that remains relevant for all website pages and it should be taken into consideration by website owners. Every element of the Core Web Vitals stands for a separate user-experience aspect and it symbolizes realistic experience of a user-oriented outcome.&lt;/p&gt;

&lt;p&gt;In simple terms, Core Web Vitals refers to an evaluation system that emphasizes on user experience, site performance, and on page loading time. If your website has a low speed, the performance will be undesirable and the site will lack user-friendliness. Visitors want to view the content as fast as they can and any delay might make your visitors to leave your website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-improve-core-web-vitals"&gt;
  &lt;/a&gt;
  How to Improve Core Web Vitals
&lt;/h2&gt;

&lt;p&gt;The Google makes use of 3 chief metrics to assign Core Web Vitals score:&lt;/p&gt;

&lt;p&gt;‚Ä¢ &lt;em&gt;Largest Contentful Paint (LCP)&lt;/em&gt;: This provides a measure of loading performance. To deliver an excellent user experience, LCP must appear within 2.5 seconds of the initial page loading time. &lt;br&gt;
‚Ä¢ &lt;em&gt;First Input Delay (FID)&lt;/em&gt;: This is a measure of interactivity. Web pages should ideally have less than 100 milliseconds of FID for delivering desired user experience. &lt;br&gt;
‚Ä¢ &lt;em&gt;Cumulative Layout Shift (CLS)&lt;/em&gt;: This is a measure of visual stability. To generate a positive user experience, the CLS for pages needs to be less than 0.1.&lt;/p&gt;

&lt;p&gt;Tools that would help you evaluate compliance with Core Web Vitals would consider a web page to be qualifying if it fulfills 75 percent of the targets for the three abovementioned parameters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-core-web-vitals"&gt;
  &lt;/a&gt;
  Testing Core Web Vitals
&lt;/h2&gt;

&lt;p&gt;So if you need to check if your website can pass the Google PageSpeed Insights test, you should test if your website adheres to the standards for Google speed Core Web Vitals and optimization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-pagespeed-insights"&gt;
  &lt;/a&gt;
  Google PageSpeed Insights
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xT6_TJZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc6b4lwyhaprgml47k8l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xT6_TJZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc6b4lwyhaprgml47k8l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
You need not be concerned if you fail to get your website optimized or if you fail to qualify for the &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;Google Pagespeed&lt;/a&gt; test. It is quite surprising to note that only a handful of websites are qualified to pass Google‚Äôs mobile and desktop Speed Test.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#boosting-the-performance-of-your-wordpress-sites-core-web-vitals-with-plugins"&gt;
  &lt;/a&gt;
  Boosting the performance of Your WordPress Site‚Äôs Core Web Vitals with Plugins
&lt;/h2&gt;

&lt;p&gt;In case your website fails at the &lt;a href="https://web.dev/vitals/"&gt;Google Core Web Vitals&lt;/a&gt; PageSpeed test, we have listed some really awesome WordPress plugins that would promote better website optimization. With Core Web Vitals being a critical SEO ranking factor, these plugins would help your website to rank high on search engine results.&lt;/p&gt;

&lt;p&gt;Before discussing about optimization plugins for WordPress, one of the critical factors in qualifying for the Core Web Vitals is a dependable WordPress hosting provider. Reputed hosting service providers would ensure that your website optimized and managed to deliver the highest standard of performance.&lt;/p&gt;

&lt;p&gt;Free WordPress plugins For Adhering to the Requirements of Google Core Web Vitals&lt;/p&gt;

&lt;p&gt;We have listed some of the most efficient WordPress plugins that would help you to adhere to the requirements of the Core Web Vitals. You may consider installing this plugins to &lt;a href="https://www.proglobalbusinesssolutions.com/wordpress-website-speed-optimization/"&gt;boost the speed of your WordPress site&lt;/a&gt; and to decrease the load time to just 2 seconds.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Autoptimize&lt;br&gt;
With Autoptimize, you can optimize your WordPress site very easily. This tool can cache styles and scripts, puts in CSS at the head of the page, put off the aggregated CSS, minimizes HTML and moves the scripts to the footer. Images can be optimized using this tool and lazy-loading is possible too. It is compatible with AVIF and WebP formats and supports optimization of Google fonts. You can make use of the API to customize this tool to serve the specific needs of websites.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jetpack Boost&lt;br&gt;
This plugin facilitates single-click optimization that would boost your website‚Äôs performance while increasing the web vitals scores for better page ranking.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hummingbird &lt;br&gt;
You can optimize website speed, activate cache, and lessen CSS. By installing this plugin in your Wordpress site, you can increase page speed and get your website‚Äôs performance optimized. It provides ground-breaking caching abilities, promotes lazy load integration, and performs excellent file compression function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Smush &lt;br&gt;
This plugin allows for image optimization, resizing, and compression, which, in turn, boosts page speed. Developed by WPMU DEV, this tool is completely free to use and it can compress images without compromising on the image quality.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WP-Optimize &lt;br&gt;
This is a cutting-edge plugin that boosts the performance of WordPress sites. You can use this tool for database-cleaning, image compression, and caching. The cache capability is based on the capabilities of the fastest cache engine of the world. This is a simple and easy-to-use tool that can make your website load fast and run optimally.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LiteSpeed Cache&lt;br&gt;
The LiteSpeed Cache is an acceleration tool that comprises of a special server-specific cache and a host of optimization capabilities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ShortPixel Image Optimizer&lt;br&gt;
ShortPixel is a very efficient image optimization tool that can compress old images and PDF documents with just a one-click approach. It can be used easily and it is a lightweight tool that can boost a website‚Äôs search engine ranking, website traffic, and consequently sales. This plugin allows new photos to be resized and optimized automatically when they are being uploaded on the website. This plugin works well with various sliders, galleries, and Ecommerce plugins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AMP&lt;br&gt;
The AMP plugin is a very effective tool which leads to the creation of secure, fast, accessible, and engaging websites. It would help your website to load fast and improve visitor engagement. Previously, AMP, which is the short-form of Accelerated Mobile Pages, was useful only for mobile websites. Today, AMP has evolved as a useful, responsive plugin for mobile as well as desktop systems. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WP-Rocket&lt;br&gt;
WP Rocket is recognized as a very powerful caching plugin in the present-day market. It would boost your WordPress site‚Äôs speed while creating a positive impact on Google rankings and sales conversions. You do not need coding in order to be able to use it. This plugin operates on the basis of best practices on web performance. You do not require high level of technical knowledge in order to be able to use it optimally.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Google Core Web Vital is a crucial factor influencing SEO ranking to a great extent. You should ensure that your website is optimized to deliver excellent user experience and that it gets loaded fast on desktop as well as mobile devices. The free WordPress plugins that we discussed about would promote perfect optimization of your website, allowing your website to load and run faster. In case you still find your website to be slow, consider switching to a reliable hosting service provider that delivers cache optimization service as well.&lt;/p&gt;

&lt;p&gt;Need support? PGBS is a reputed web design company that delivers world-class &lt;a href="https://dev.toweb%20design%20services"&gt;https://www.proglobalbusinesssolutions.com/web-design-services/&lt;/a&gt; and Wordpress site optimization support, allowing websites to rank high in search engine results. Call us now for a free quote. &lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>pagespeed</category>
      <category>corewebvitals</category>
    </item>
    <item>
      <title>Shell Script Basics</title>
      <author>Siddharth Chandra</author>
      <pubDate>Wed, 05 May 2021 10:54:06 +0000</pubDate>
      <link>https://dev.to/siddharth2016/shell-script-basics-1jnk</link>
      <guid>https://dev.to/siddharth2016/shell-script-basics-1jnk</guid>
      <description>&lt;p&gt;The best thing about GNU/Linux is that it‚Äôs packed with utilities that improve productivity immensely. One such utility is a shell that can help accomplish complex tasks with just a few sequences of commands. Most of the time, users operate shell in an interactive way. &lt;/p&gt;

&lt;p&gt;However, it becomes really productive when we leverage the scripting capabilities of the shell.&lt;/p&gt;

&lt;p&gt;In this article, we are going to explore the basics of shell scripting, how simple &lt;code&gt;echo&lt;/code&gt; command can be used in a shell script file, how to write comments, working with variables and conditionals.&lt;/p&gt;

&lt;p&gt;Keeping it short and simple, let's get started!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#shell-script-printing"&gt;
  &lt;/a&gt;
  Shell Script Printing
&lt;/h3&gt;

&lt;p&gt;When we are working with shell scripts printing on the output screen is called echoing which can be done using &lt;code&gt;echo&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello Shell"&lt;/span&gt;
Hello Shell
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's do this inside a shell script file. Follow the below steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a file, name it whatever you want with the &lt;code&gt;.sh&lt;/code&gt; extension. Let's say &lt;code&gt;echo_script.sh&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add following inside the file - &lt;code&gt;echo "Hello Shell"&lt;/code&gt;, hit &lt;code&gt;Save&lt;/code&gt; and open a terminal on the file location.&lt;/li&gt;
&lt;li&gt;On the terminal, write - &lt;code&gt;$ bash echo_script.sh&lt;/code&gt; and hit enter, you should be able to see - &lt;code&gt;Hello Shell&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#shell-script-comments"&gt;
  &lt;/a&gt;
  Shell Script Comments
&lt;/h3&gt;

&lt;p&gt;Comments are used to improve the readability of the script. Shell uses the pound &lt;code&gt;#&lt;/code&gt; symbol for comments. A line beginning with the pound &lt;code&gt;#&lt;/code&gt; symbol is ignored by the shell interpreter during execution. &lt;/p&gt;

&lt;p&gt;The script given below shows the usage of the comment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Display Hello Shell using echo command of shell, filename.sh&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello Shell"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go to terminal and type - &lt;code&gt;$ bash filename.sh&lt;/code&gt; (replace &lt;code&gt;filename&lt;/code&gt; with whatever name you have given) and hit enter. You should be able to see - &lt;code&gt;Hello Shell&lt;/code&gt; without printing anything given after the &lt;code&gt;#&lt;/code&gt; symbol.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shell-script-variables"&gt;
  &lt;/a&gt;
  Shell Script Variables
&lt;/h3&gt;

&lt;p&gt;We can define variables to store information, which can be accessed within the shell script. There are certain rules we need to follow while defining variables:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The variable name can contain any combination of letters from A-Z or a-z, digits from 0-9 or an underscore (_) character.&lt;/li&gt;
&lt;li&gt;The variable name should start with a letter or an underscore character.&lt;/li&gt;
&lt;li&gt;Variables are case sensitive.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By convention, shell variables are defined in the upper case. Given below is a simple script, which shows the usage of a variable within it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;hello.sh
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"CodeKaro"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello &lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;cat&lt;/code&gt; command is used to display the content of a file given after that. Try your hands on it.&lt;/p&gt;

&lt;p&gt;So, we have a file &lt;code&gt;hello.sh&lt;/code&gt; which contains a variable &lt;code&gt;NAME&lt;/code&gt; which we used in the &lt;code&gt;echo&lt;/code&gt; statement as &lt;code&gt;$NAME&lt;/code&gt; that is after the &lt;code&gt;$&lt;/code&gt; symbol. Here we saw variable declaration and how inside double quotes a variable can be used.&lt;/p&gt;

&lt;p&gt;If you hit - &lt;code&gt;$ bash hello.sh&lt;/code&gt; and hit enter, you should be able to see - &lt;code&gt;Hello CodeKaro&lt;/code&gt; on the terminal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shell-script-conditionals"&gt;
  &lt;/a&gt;
  Shell Script Conditionals
&lt;/h3&gt;

&lt;p&gt;Like other programming languages, shell supports conditional expressions like ‚Äì &lt;em&gt;if&lt;/em&gt;, &lt;em&gt;if-else&lt;/em&gt; and &lt;em&gt;case&lt;/em&gt;. Let us understand this with simple examples:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;if&lt;/code&gt; expression: In case we want to verify whether a file exists or not, we can use the if expression, as follows:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;file.txt &lt;span class="c"&gt;#this creates a file&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;file_existance.sh
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; file.txt &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; ‚Äúfile.txt file exists‚Äù
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The script given above generates the following output when it is executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bash file_existance.sh
file.txt file exists
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;if-else&lt;/code&gt; expression: Let us modify the above script to generate output when the file does not exist:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;rm &lt;/span&gt;file.txt
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;file_existance.sh
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; file.txt &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; ‚Äúfile.txt file exists‚Äù
&lt;span class="k"&gt;else
&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; ‚Äúfile.txt file does not exists‚Äù
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type following and hit enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bash file_existance.sh
file.txt file does not exists
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;case&lt;/code&gt; statement: Shell provides a switch statement-like functionality using the case statement. Let us understand this with the example given below:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;case_statement.sh
&lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; ‚ÄúEnter the day: ‚Äú DAY

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$DAY&lt;/span&gt; &lt;span class="k"&gt;in
&lt;/span&gt;Mon&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; ‚ÄúToday is Monday‚Äù
&lt;span class="p"&gt;;;&lt;/span&gt;

Tue&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; ‚ÄúToday is Tuesday‚Äù
&lt;span class="p"&gt;;;&lt;/span&gt;

Wed&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; ‚ÄúToday is Wednesday‚Äù
&lt;span class="p"&gt;;;&lt;/span&gt;

&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; ‚ÄúUnknown day‚Äù
&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The script given above generates the following output when it is executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bash case_statement.sh
Enter the day: Mon
Today is Monday
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bash case_statement.sh
Enter the day: Tue
Today is Tuesday
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bash case_statement.sh
Enter the day: Invalid
Unknown day
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;case&lt;/code&gt; statement, an asterisk (*) denotes a default case.&lt;/p&gt;

&lt;p&gt;Well, that's it from me. &lt;/p&gt;

&lt;p&gt;We covered printing, variables, comments and conditionals, not too much, right? &lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste üôè&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Image Credits - &lt;a href="https://www.freepik.com/vectors/book"&gt;pch.vector&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>shell</category>
      <category>scripting</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Twinkle, twinkle Web Component star</title>
      <author>Danny Engelman</author>
      <pubDate>Wed, 05 May 2021 10:05:51 +0000</pubDate>
      <link>https://dev.to/dannyengelman/twinkle-twinkle-web-component-star-23d7</link>
      <guid>https://dev.to/dannyengelman/twinkle-twinkle-web-component-star-23d7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#twinkle-twinkle-web-component-star"&gt;
  &lt;/a&gt;
  &lt;em&gt;Twinkle, twinkle, Web Component star&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#how-i-wonder-what-you-are"&gt;
  &lt;/a&gt;
  &lt;em&gt;How I wonder what you are&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#often-you-keep-me-so-dry"&gt;
  &lt;/a&gt;
  &lt;em&gt;often you keep me so DRY&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#or-you-chart-an-easy-pie"&gt;
  &lt;/a&gt;
  &lt;em&gt;or you chart an easy pie*&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#twinkle-twinkle-web-component-star"&gt;
  &lt;/a&gt;
  &lt;em&gt;Twinkle, twinkle, Web Component star&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#i-am-learning-what-you-are"&gt;
  &lt;/a&gt;
  &lt;em&gt;I am learning what you are&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#to-react-i-say-bye-bye"&gt;
  &lt;/a&gt;
  &lt;em&gt;To React I say bye, bye&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#i-will-be-a-happy-frontend-guy"&gt;
  &lt;/a&gt;
  &lt;em&gt;I will be a happy Front-End guy&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#twinkle-twinkle-web-component-star"&gt;
  &lt;/a&gt;
  &lt;em&gt;Twinkle, twinkle Web Component star&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#now-i-know-how-great-you-are"&gt;
  &lt;/a&gt;
  &lt;em&gt;Now I know how great you are&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;(*) See Dev.to post: &lt;a href="https://fiddle.jshell.net/dannyengelman/what-web-technologies-are-required-to-draw-a-pie-chart-in-2021-spoiler-alert-a-standard-web-component-will-do-1j56"&gt;What web technologies are required to draw a pie-chart in 2021&lt;/a&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#learning-web-components"&gt;
  &lt;/a&gt;
  Learning Web Components
&lt;/h1&gt;

&lt;p&gt;I learned Web Components by &lt;em&gt;&lt;strong&gt;asking&lt;/strong&gt;&lt;/em&gt; loads of questions on StackOverflow.&lt;/p&gt;

&lt;p&gt;Now I learn more and more about Web Components, &lt;br&gt;
by &lt;em&gt;&lt;strong&gt;answering&lt;/strong&gt;&lt;/em&gt; questions on Stack Overflow.&lt;/p&gt;

&lt;p&gt;Last year, in the SVG topic, someone asked how to do a &lt;strong&gt;half-star&lt;/strong&gt; Rating&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BOoyE1l---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3ZBQ2gd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BOoyE1l---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3ZBQ2gd.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like many I started by drawing &lt;strong&gt;half&lt;/strong&gt; star icons.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;then realised it is easier to draw &lt;strong&gt;all 5 stars&lt;/strong&gt; &lt;br&gt;
by &lt;em&gt;cutting them &lt;strong&gt;out&lt;/strong&gt;&lt;/em&gt; the green &lt;em&gt;&lt;strong&gt;foreground&lt;/strong&gt;&lt;/em&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A gold rectangle &lt;em&gt;&lt;strong&gt;behind&lt;/strong&gt;&lt;/em&gt; the green foreground then indicates the value.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#dry-dont-repeat-yourself"&gt;
  &lt;/a&gt;
  DRY (Don't Repeat Yourself)
&lt;/h3&gt;

&lt;p&gt;For full explanation on how the SVG and Web Component work see: &lt;br&gt;
&lt;a href="https://stackoverflow.com/questions/65366162/is-it-possible-to-only-show-half-of-a-svg-icon"&gt;https://stackoverflow.com/questions/65366162/is-it-possible-to-only-show-half-of-a-svg-icon&lt;/a&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#a-ltstarratinggt-web-component"&gt;
  &lt;/a&gt;
  A &amp;lt;star-rating&amp;gt; Web Component
&lt;/h1&gt;

&lt;p&gt;All the Web Component then has to do is draw &lt;strong&gt;&lt;em&gt;double&lt;/em&gt; the amount of &lt;em&gt;invisible&lt;/em&gt; rectangles&lt;/strong&gt; to capture the mouse position &lt;strong&gt;over&lt;/strong&gt; the "half-stars".&lt;/p&gt;

&lt;p&gt;A fully configurable &amp;lt;star-rating&amp;gt; Web Component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;star-rating&lt;/span&gt; &lt;span class="na"&gt;stars=&lt;/span&gt;&lt;span class="s"&gt;5&lt;/span&gt; &lt;span class="na"&gt;rating=&lt;/span&gt;&lt;span class="s"&gt;"3.5"&lt;/span&gt;
             &lt;span class="na"&gt;bgcolor=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt; &lt;span class="na"&gt;nocolor=&lt;/span&gt;&lt;span class="s"&gt;"grey"&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"gold"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/star-rating&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BOoyE1l---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3ZBQ2gd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BOoyE1l---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3ZBQ2gd.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;star-rating&lt;/span&gt; &lt;span class="na"&gt;stars=&lt;/span&gt;&lt;span class="s"&gt;7&lt;/span&gt; &lt;span class="na"&gt;rating=&lt;/span&gt;&lt;span class="s"&gt;"50%"&lt;/span&gt;
             &lt;span class="na"&gt;bgcolor=&lt;/span&gt;&lt;span class="s"&gt;"rebeccapurple"&lt;/span&gt; &lt;span class="na"&gt;nocolor=&lt;/span&gt;&lt;span class="s"&gt;"beige"&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"goldenrod"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/star-rating&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NHJ65-zQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/A4C5aox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NHJ65-zQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/A4C5aox.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can then be created with &lt;strong&gt;22 lines &lt;em&gt;vanilla&lt;/em&gt; JavaScript code&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Play with the code, tweak it, break it, mend it again, enhance it, learn!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/WebComponents/jv8feugr/embedded/js,result,html,js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;



&lt;br&gt;
&lt;br&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/WebComponents/62f1eLay/embedded/result,html,js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webcomponents</category>
      <category>webdev</category>
      <category>svg</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Performance Testing with k6 - 02 - Multiple Tasks</title>
      <author>Hari Bhandari</author>
      <pubDate>Wed, 05 May 2021 09:35:22 +0000</pubDate>
      <link>https://dev.to/jankaritech/performance-testing-with-k6-02-multiple-tasks-2im1</link>
      <guid>https://dev.to/jankaritech/performance-testing-with-k6-02-multiple-tasks-2im1</guid>
      <description>&lt;p&gt;In the first part of this series we learnt about creating a very basic k6 test. In this tutorial we will create some more realistic and interesting tests.&lt;br&gt;
 For that we better have a real App to test. For simplicity and because I'm familiar with it I've chosen &lt;a href="https://owncloud.com/"&gt;ownCloud&lt;/a&gt;, a file hosting and sharing &lt;br&gt;
 solution similar to Dropbox.&lt;/p&gt;

&lt;p&gt;The easiest way to get a test ownCloud instance up and running is to use docker.&lt;/p&gt;

&lt;p&gt;Just run: &lt;code&gt;docker run -p 8080:8080 --name owncloud owncloud/server&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This magic &lt;code&gt;docker run&lt;/code&gt; command should give you a fresh ownCloud installation that can be reached at &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is one user pre-setup called &lt;code&gt;admin&lt;/code&gt; with the super-secure password &lt;code&gt;admin&lt;/code&gt;. You can login into the UI and upload files, create new users, share files and folders, etc.&lt;br&gt;
After having played a bit with ownCloud itself, let's get back to k6.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#test-creating-file"&gt;
  &lt;/a&gt;
  Test Creating file
&lt;/h3&gt;

&lt;p&gt;Create a file (&lt;code&gt;script.js&lt;/code&gt;) and add the following contents&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import http from 'k6/http'
import encoding from 'k6/encoding'
import { check } from 'k6'
import { uuidv4 } from 'https://jslib.k6.io/k6-utils/1.0.0/index.js'

export let options = {
  iterations: 100,
  vus: 10
}

export default function() {
  const fileName = `${uuidv4()}.txt`
  const url = `http://localhost:8080/remote.php/webdav/${fileName}`
  const body = 'some content'
  const headers = {
    'Authorization': 'Basic ' + encoding.b64encode('admin:admin'),
    'Content-Type': 'application/x-www-form-urlencoded'
  }

  const response = http.request('PUT', url, body, { headers: headers })
  check(response, {
    'status is 201': (r) =&amp;gt; r.status === 201 || 204
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Here, in the &lt;code&gt;options&lt;/code&gt; object we are providing &lt;code&gt;iterations: 100&lt;/code&gt; and &lt;code&gt;vus: 10&lt;/code&gt; i.e. 100 test runs will be divided among 10 vus. To specify how &lt;code&gt;iterations&lt;/code&gt; is divided among &lt;code&gt;vus&lt;/code&gt; we can provide &lt;code&gt;executor&lt;/code&gt; options. For more details about executors check &lt;a href="https://k6.io/docs/using-k6/scenarios/executors/"&gt;https://k6.io/docs/using-k6/scenarios/executors/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are sending a &lt;code&gt;PUT&lt;/code&gt; request to the owncloud endpoint to create a file. For authorization header we are using user &lt;code&gt;admin&lt;/code&gt; with password &lt;code&gt;admin&lt;/code&gt; that we created. So, basically the &lt;code&gt;10 vus&lt;/code&gt; in options will be using &lt;code&gt;admin&lt;/code&gt; user authorization&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since it's not possible to create multiple files with the same name in owncloud, we are using &lt;a href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;uuid&lt;/a&gt; in &lt;code&gt;fileName&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#test-deleting-file"&gt;
  &lt;/a&gt;
  Test deleting file
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import http from 'k6/http'
import encoding from 'k6/encoding'
import { check } from 'k6'
import { uuidv4 } from 'https://jslib.k6.io/k6-utils/1.0.0/index.js'

export let options = {
  iterations: 100,
  vus: 10
}

const createFile = url =&amp;gt; {
  const body = 'some content'
  const headers = {
    'Authorization': 'Basic ' + encoding.b64encode('admin:admin'),
    'Content-Type': 'application/x-www-form-urlencoded'
  }

  const response = http.request('PUT', url, body, { headers: headers })
  check(response, {
    'status is 201': (r) =&amp;gt; r.status === 201 || 204
  })
}

const deleteFile = (url) =&amp;gt; {
  const headers = {
    'Authorization': 'Basic ' + encoding.b64encode('admin:admin')
  }
  const response = http.request('DELETE', url, undefined, { headers: headers })
  check(response, {
    'status is 204': (r) =&amp;gt; r.status === 204
  })
}

export default function() {
  const fileName = `${uuidv4()}.txt`
  const url = `http://localhost:8080/remote.php/webdav/${fileName}`
  createFile(url)
  deleteFile(url)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are adding code to delete a file. Also, I have separated the logic for file creation and deletion into two separate functions &lt;code&gt;createFile&lt;/code&gt; and &lt;code&gt;deleteFile&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#settings-stages"&gt;
  &lt;/a&gt;
  Settings Stages
&lt;/h3&gt;

&lt;p&gt;We can ramp up/down the VU level during the test using &lt;code&gt;stages&lt;/code&gt;  The &lt;code&gt;options.stages&lt;/code&gt; property allows you to configure ramping behaviour.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
export let options = {
  stages: [
    { duration: '30s', target: 20 },
    { duration: '1m30s', target: 10 },
    { duration: '20s', target: 0 }
  ]
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;First Stage(30s duration): Initially at the start will have 1 VU and then k6 will linearly ramp up from 1VU to 20VUs during the span of 30 seconds.&lt;/li&gt;
&lt;li&gt;Second Stage(1m30s duration): At the start of this stage we will have 20Vus from the first stage, but it will linearly ramp down to 10Vus at the end of the duration of this stage.&lt;/li&gt;
&lt;li&gt;Third Stage(20s duration): During this stage 10Vus from the second stage will linearly ramp down to zero at the end of 20 seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now if we run the test using &lt;code&gt;k6 run script.js&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jqAS3EV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/34328907/116341872-6baf0d00-a801-11eb-97a4-340fbeb165ee.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jqAS3EV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/34328907/116341872-6baf0d00-a801-11eb-97a4-340fbeb165ee.png" alt="Screenshot from 2021-04-28 09-08-56"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown in above screenshot our test runs for a total duration of &lt;code&gt;2m20s&lt;/code&gt;(30s + 1m30s + 20s), while &lt;code&gt;vus&lt;/code&gt; &lt;code&gt;max&lt;/code&gt; is &lt;code&gt;20&lt;/code&gt; (end of the first stage) and it's &lt;code&gt;min&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; which happens at the beginning of the first stage.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Multilingual Markdown Documentations and Posts in Seconds</title>
      <author>Denis Augsburger</author>
      <pubDate>Wed, 05 May 2021 09:30:56 +0000</pubDate>
      <link>https://dev.to/denisaugsburger/multilingual-markdown-documentations-and-posts-in-seconds-4d3e</link>
      <guid>https://dev.to/denisaugsburger/multilingual-markdown-documentations-and-posts-in-seconds-4d3e</guid>
      <description>&lt;p&gt;The translation of Markdown files is commonly needed in technical documentations and headless content management systems, where you want to reach a target audience that speaks different languages. I'm gonna show you how you can translate Markdown easy and fast without compromising on quality. If you'd like to get a head start and try out the Markdown Translator just &lt;a href="https://simpleen.io/signup"&gt;sign up&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#markdown-translation-tool"&gt;
  &lt;/a&gt;
  Markdown Translation Tool
&lt;/h2&gt;

&lt;p&gt;More and more tools use Markdown to structure their content. Some examples are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docusaurus, Gitbook for documentations&lt;/li&gt;
&lt;li&gt;Hugo, Jekyll, GatsbyJS as static site generators (SSG)&lt;/li&gt;
&lt;li&gt;Contentful, Strapi, SquareSpace as content management systems (CMS) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on the project, it is necessary to generate multilingual content and update it regularly. The traditional translation process can be time-consuming and waiting on (human) translations can block your release cycles. Therefore we were looking for a fast and reliable solution. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-challenges"&gt;
  &lt;/a&gt;
  Common Challenges
&lt;/h3&gt;

&lt;p&gt;We've tried out several translation tools and inserted Markdown but we were not satisfied with the translation results they provided.&lt;br&gt;
Common problems we encountered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Broken Markdown Syntax&lt;/li&gt;
&lt;li&gt;Translation of things that should not be translated, like Code Snippets, Emoji's&lt;/li&gt;
&lt;li&gt;Different styles in translation results&lt;/li&gt;
&lt;li&gt;Setup/Installion necessary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take a look at how a simple Markdown file is translated from English to German if you use it directly in DeepL or Google Translate and compare it to the Simpleen Markdown Translator &lt;/p&gt;

&lt;p&gt;The file contains a list, some emoji's and headers. Dev.to doesn't support fenced code within their blog posts, therefore the tripple ticks are substituted by html code tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;## Setup&lt;/span&gt;

Install the CLI to &lt;span class="gs"&gt;**translate**&lt;/span&gt; files from source to target path.

&lt;span class="nt"&gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;language=&lt;/span&gt;&lt;span class="s"&gt;"shell"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
yarn add simpleen
yarn run simpleen init
&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;

You can search for files in &lt;span class="sb"&gt;`./blog/posts/en/*.md`&lt;/span&gt; and translate them to &lt;span class="sb"&gt;`./blog/posts/$locale/$FILE.md`&lt;/span&gt;.

&lt;span class="gu"&gt;## Additional support :smile:&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; PO-Files
&lt;span class="p"&gt;-&lt;/span&gt; JSON
&lt;span class="p"&gt;-&lt;/span&gt; YAML

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deepl-markdown-example"&gt;
  &lt;/a&gt;
  DeepL Markdown Example
&lt;/h3&gt;

&lt;p&gt;With DeepL the result looks like the following.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;## Einrichtung&lt;/span&gt;

Installieren Sie die CLI zum &lt;span class="gs"&gt;**√úbersetzen**&lt;/span&gt; von Dateien vom Quell- in den Zielpfad.

&lt;span class="nt"&gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;language=&lt;/span&gt;&lt;span class="s"&gt;"Shell"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
yarn add simpleen
yarn run simpleen init
&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;

Sie k√∂nnen nach Dateien in &lt;span class="sb"&gt;`./blog/posts/de/*.md`&lt;/span&gt; suchen und sie in &lt;span class="sb"&gt;`./blog/posts/$locale/$FILE.md`&lt;/span&gt; √ºbersetzen.

&lt;span class="gu"&gt;## Zus√§tzliche Unterst√ºtzung :smile:&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; PO-Dateien
&lt;span class="p"&gt;-&lt;/span&gt; JSON
&lt;span class="p"&gt;-&lt;/span&gt; YAML

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;As you can see the code snippet is broken because the fenced code block now starts with two backticks instead of three. Also, the name of the language Shell is now upper-cased. The list, the emoji and the paths are handled correctly in this simple case. The bold text is also marked correctly. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google-translate-markdown-example"&gt;
  &lt;/a&gt;
  Google Translate Markdown Example
&lt;/h3&gt;

&lt;p&gt;Let's compare this with Google Translate:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;## Einrichten&lt;/span&gt;

Installieren Sie die CLI, um Dateien von der Quelle in den Zielpfad zu √ºbersetzen.

&lt;span class="nt"&gt;&amp;lt;brokencode&lt;/span&gt; &lt;span class="na"&gt;language=&lt;/span&gt;&lt;span class="s"&gt;"shell"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Garn hinzuf√ºgen einfach
Garn laufen einfach init
&lt;span class="nt"&gt;&amp;lt;/brokencode&amp;gt;&lt;/span&gt;

Sie k√∂nnen nach Dateien in "./blog/posts/en / &lt;span class="err"&gt;*&lt;/span&gt;. Md" suchen und diese in ". / Blog / posts / $ locale / $ FILE.md" √ºbersetzen.

&lt;span class="gu"&gt;## Zus√§tzliche Unterst√ºtzung: smile:&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; PO-Dateien
&lt;span class="p"&gt;-&lt;/span&gt; JSON
&lt;span class="p"&gt;-&lt;/span&gt; YAML

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The result with Google Translate is worse than DeepL. The code snippet is broken because the backticks of the code snippet are seperated with a space. Also, the content is translated with is not desirable. The paths are splitted and differently marked. The Emoji is also broken. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simpleen-markdown-translator"&gt;
  &lt;/a&gt;
  Simpleen Markdown Translator
&lt;/h3&gt;

&lt;p&gt;Let's see how Simpleen handles this Markdown example in comparison to DeepL and Google Translate (in this case with DeepL).&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;## Einrichtung&lt;/span&gt;

Installieren Sie die CLI, um Dateien vom Quell- in den Zielpfad &lt;span class="gs"&gt;**zu √ºbersetzen**&lt;/span&gt;.

&lt;span class="nt"&gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;language=&lt;/span&gt;&lt;span class="s"&gt;"shell"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
yarn add simpleen
yarn run simpleen init
&lt;span class="nt"&gt;&amp;lt;/code&lt;/span&gt; &lt;span class="err"&gt;language="shell"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

Sie k√∂nnen nach Dateien in &lt;span class="sb"&gt;`./blog/posts/de/*.md`&lt;/span&gt; suchen und sie in &lt;span class="sb"&gt;`./blog/posts/$locale/$FILE.md`&lt;/span&gt; √ºbersetzen.

&lt;span class="gu"&gt;## Zus√§tzliche Unterst√ºtzung :smile:&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; PO-Dateien
&lt;span class="p"&gt;-&lt;/span&gt; JSON
&lt;span class="p"&gt;-&lt;/span&gt; YAML

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Because we love Markdown we wanted to deliver better and more consistent results with an online translator that let's you translate Markdown into many languages. &lt;/p&gt;

&lt;p&gt;Simpleen provides better results because we handle Markdown differently than other services. Instead of just handling Markdown as Text or convert it to HTML, which is supported by most MT services, we go deeper to understand the whole document structure of your Markdown files. &lt;/p&gt;

&lt;p&gt;Furthermore, Simpleen understands the most common Markdown extensions and flavors and applies the provided styles from your file to the translation result. For example, if you use two spaces at the end of a line to break a line, we also use two spaces in the translated result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#supported-flavors-amp-extensions"&gt;
  &lt;/a&gt;
  Supported Flavors &amp;amp; Extensions
&lt;/h2&gt;

&lt;p&gt;Markdown comes in different flavors, and therefore supports different syntax to write your documentations, blog posts and more.&lt;br&gt;
The most common flavors that are used and supported for translations by Simpleen are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CommonMark&lt;/li&gt;
&lt;li&gt;GFM &lt;a href="https://github.github.com/gfm/"&gt;Github Flavor Markdown&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;with the following extensions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Emoji's (üòÑ or üëç)&lt;/li&gt;
&lt;li&gt;Footnotes (partial)&lt;/li&gt;
&lt;li&gt;Frontmatter&lt;/li&gt;
&lt;li&gt;Math&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://commonmark.org/"&gt;CommonMark&lt;/a&gt; is a Markdown flavor that many frameworks and libraries support or build upon, for example &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-transformer-remark/"&gt;GatsbyJS&lt;/a&gt; with their remark transformer. Also many headless content management system do support CommonMark.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#better-style-support"&gt;
  &lt;/a&gt;
  Better Style Support
&lt;/h3&gt;

&lt;p&gt;There are different valid ways to mark your headers, bold text, lists and more. Simpleen detects your style and reproduces the translated&lt;br&gt;
Markdown file in a consistent way. For example if you use a dash for your lists&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;My shopping list:
&lt;span class="p"&gt;
-&lt;/span&gt; Dictionary
&lt;span class="p"&gt;-&lt;/span&gt; Paper
&lt;span class="p"&gt;-&lt;/span&gt; Pencil
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then this Markdown example is translated to German like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;Meine Einkaufsliste:
&lt;span class="p"&gt;
-&lt;/span&gt; W√∂rterbuch
&lt;span class="p"&gt;-&lt;/span&gt; Papier
&lt;span class="p"&gt;-&lt;/span&gt; Bleistift
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or if you use a star for your list instead it's getting translated to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;Meine Einkaufsliste:
&lt;span class="p"&gt;
*&lt;/span&gt; W√∂rterbuch
&lt;span class="p"&gt;*&lt;/span&gt; Papier
&lt;span class="p"&gt;*&lt;/span&gt; Bleistift
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both results are valid in most Markdown flavors, but we want to consistently apply the styles from the provided Markdown file.&lt;br&gt;
As a result you can use the translated Markdown file directly in your Markdown documentation tool. Furthermore, the editor or human translator is not getting confused by different styles in case of post-editing. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#translate-mdmdx-files"&gt;
  &lt;/a&gt;
  Translate .md/.mdx Files
&lt;/h2&gt;

&lt;p&gt;A Markdown file contains multiple parts that need to be localized. Other parts - like code segments and frontmatter fragments (meta data) - need to be excluded from translation.&lt;/p&gt;

&lt;p&gt;Not translated:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code Fences &lt;/li&gt;
&lt;li&gt;Emoji's&lt;/li&gt;
&lt;li&gt;Frontmatter&lt;/li&gt;
&lt;li&gt;Math Expressions&lt;/li&gt;
&lt;li&gt;MDX (not yet supported, drop us a line if you like to use it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Translated:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Headers (atx, setext)&lt;/li&gt;
&lt;li&gt;Paragraphs with bold, italic styles, links, images&lt;/li&gt;
&lt;li&gt;List Items&lt;/li&gt;
&lt;li&gt;Table Headers&lt;/li&gt;
&lt;li&gt;Table Entries&lt;/li&gt;
&lt;li&gt;ToDo List Entries&lt;/li&gt;
&lt;li&gt;Footnotes (partial, #fn-1 instead of ^1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have plans to improve the Markdown translation tool even more. Quick Roadmap: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We want to handle internal links correctly (adapt to translated result)&lt;/li&gt;
&lt;li&gt;Handle footnote links&lt;/li&gt;
&lt;li&gt;Adapt the Simpleen CLI to support Markdown files in your local project&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>markdown</category>
      <category>tooling</category>
      <category>localization</category>
      <category>internationalization</category>
    </item>
    <item>
      <title>List of tools for code review engineers</title>
      <author>Gustavo Silva</author>
      <pubDate>Wed, 05 May 2021 09:28:40 +0000</pubDate>
      <link>https://dev.to/codacy/list-of-tools-for-code-review-engineers-2jjo</link>
      <guid>https://dev.to/codacy/list-of-tools-for-code-review-engineers-2jjo</guid>
      <description>&lt;h1&gt;
  &lt;a href="#list-of-tools-for-code-review-engineers"&gt;
  &lt;/a&gt;
  List of tools for code review engineers
&lt;/h1&gt;

&lt;p&gt;If you perform code reviews at your company we hope that this list of tools adds value to your GitHub workflow.&lt;br&gt;
We created this &lt;a href="https://github.com/codacy/tools-for-code-review-engineers"&gt;list on GitHub&lt;/a&gt; recently and we'll periodically keep adding more tools.&lt;br&gt;
Feel free to contribute your suggestions.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://gitpod.io/"&gt;Gitpod&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Gitpod is an open-source Kubernetes application for automated and ready-to-code development environments that blends in your existing workflow. It enables you to describe your dev environment as code and start instant and fresh development environments for each new task directly from your browser.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href="https://pullreminders.com/"&gt;Pull Reminders&lt;/a&gt; (from Pull Panda)&lt;/td&gt;
&lt;td&gt;Review and merge pull requests faster with Slack reminders and notifications.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href="https://pullpanda.com/assigner"&gt;Pull Assigner&lt;/a&gt; (from Pull Panda)&lt;/td&gt;
&lt;td&gt;Pull Assigner assigns code reviews to make your process more balanced and efficient: 1) Organize reviewers into groups using GitHub Teams 2) Assign pull requests to teams or automate it with CODEOWNERS 3) Pull Assigner auto-assigns one or more members of the team as reviewers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.gitify.io/"&gt;Gitify&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Gitify is all about making your life easier. Sitting on your menu bar, it informs you of any GitHub notifications without being annoying and of course without adverts. It just gets the job done. Works with GitHub and GitHub Enterprise. You can even connect multiple accounts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://steamclock.com/quests/"&gt;Quests&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Quests is similar to Gitify but with one important difference: Quest also supports GitLab.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://devhubapp.com/"&gt;DevHub&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Create columns for the repositories and people that matter to you; Receive Desktop Push Notifications; Manage Notifications, Issues, Pull Requests &amp;amp; Activities; Bookmark things for later.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.whitesourcesoftware.com/free-developer-tools/bolt"&gt;Bolt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Designed to close the gap between code development and security,¬†Bolt¬†helps GitHub developers create more secure products. It detects and alerts you of vulnerable open source components in your repository.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://imgbot.net/"&gt;Imgbot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Imgbot is a friendly robot that optimizes your images and saves you time by leveraging the power of pull requests.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>github</category>
      <category>tooling</category>
      <category>codereview</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Beginner Python Project (9) - Insta Spam Bot </title>
      <author>lary mak</author>
      <pubDate>Wed, 05 May 2021 09:28:02 +0000</pubDate>
      <link>https://dev.to/larymak/beginner-python-project-9-insta-spam-bot-2aj7</link>
      <guid>https://dev.to/larymak/beginner-python-project-9-insta-spam-bot-2aj7</guid>
      <description>&lt;p&gt;Am pretty sure that all of us at some point have wanted in one way or the other to get back our friends for something they did to us, right? &lt;br&gt;
Now if that is the case how would it be to send that person lots of messages to his account, that sounds great. In this part 9 of the &lt;a href="https://dev.to/larymak/series/12034"&gt;Python Projects for Beginners&lt;/a&gt; we will be creating a spam bot for that purpose.&lt;br&gt;&lt;br&gt;
We are going to use python and pyautogui to write the code, by the way, it's only going to take 5 lines of code.&lt;br&gt;&lt;br&gt;
You can also watch the video to code along:&lt;br&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=yb2icRAvzBE"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--shkD_rKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt-embed.herokuapp.com/embed%3Fv%3Dyb2icRAvzBE" alt=""&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;You can also check the Source code &lt;a href="https://github.com/larymak/Python-project-Scripts/tree/main/InstaSpamBot"&gt;HERE&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Like my work: &lt;br&gt;
&lt;a href="https://ko-fi.com/V7R03ZL69"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKanlt08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi"&gt;&lt;/a&gt;&lt;br&gt;
Also check out my other Python Beginner Projects: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/larymak/beginner-python-project-4-youtube-video-downloader-4gpj"&gt;Youtube Video Downloader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/larymak/beginner-python-projects-part-1-5h1d"&gt;WhatsApp SpamBot&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Connect With me at &lt;a href="https://twitter.com/larymak1"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.instagram.com/nextgencoders/"&gt;Insta&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCrT1ARRZfLOuf6nc_97eXEg"&gt;YouTube&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/hillary-nyakundi-3a64b11ab/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/larymak"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Distributed tracing made simple</title>
      <author>Andr√© Eriksson</author>
      <pubDate>Wed, 05 May 2021 09:23:03 +0000</pubDate>
      <link>https://dev.to/encore/distributed-tracing-made-simple-1k1f</link>
      <guid>https://dev.to/encore/distributed-tracing-made-simple-1k1f</guid>
      <description>&lt;p&gt;&lt;strong&gt;Everything's on fire. That much is clear. But what's the root cause? Nobody's got a clue.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we build distributed systems we're used to fumbling in the dark, desperately searching for the problem. Sometimes it's due to not having enough data. But paradoxically it's often due to having too much data.&lt;/p&gt;

&lt;p&gt;The real challenge lies in &lt;em&gt;making sense of it all&lt;/em&gt;. Unfortunately, general-purpose observability tools often have no idea how your application works. The end result is that distributed tracing, an incredibly powerful idea, largely under-delivers and is mostly useful for tracking down performance issues. That's good, but it could be &lt;em&gt;so much better&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-tracing-normally-works"&gt;
  &lt;/a&gt;
  How tracing (normally) works
&lt;/h2&gt;

&lt;p&gt;Tracing builds on a few pretty simple concepts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spans&lt;/strong&gt; are the operations we track, with a start and an end, and references between them. They're things like a running request, or a database query. Spans can reference each other, for example to communicate that one request made an API call which results in another request. In this way we can build up a tree (or in practice a directed acyclic graph, a "DAG") of all spans.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ba66Cp7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-data-model.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ba66Cp7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-data-model.png" alt="Tracing data model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each span contains &lt;strong&gt;tags&lt;/strong&gt;, which are key-value pairs, and &lt;strong&gt;events&lt;/strong&gt; which are timestamped things that happened within the span, such as emitting log messages.&lt;/p&gt;

&lt;p&gt;Not too bad so far, right? The devil's in the details. Because this data model is so generic, it's difficult to make sense of exactly what a span represents. Is it an API call? Is it a database query? They don't know, so in practice they render everything as one long list of spans. Not too helpful.&lt;/p&gt;

&lt;p&gt;The other challenge is in the instrumentation itself. In order to build up this DAG of spans, we need to pass along IDs to tie everything together. This data must be carefully threaded through our whole application. How to do that in practice differs from language to language, but setting it all up is quite a nuisance and if you miss some place you'll silently get lower quality data.&lt;/p&gt;

&lt;p&gt;In practice it ends up being lots of error-prone, boilerplate-y code. And the end result is less useful than we would like. So we figured, since Encore is all about deeply understanding how your application works using static analysis, let's try to build a better distributed tracing solution that leverages that understanding. We wanted to offer much better insights, and do it in a way that works out of the box without having to do a thing. A tall order, but we believe we've succeeded.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-tracing-works-with-encore"&gt;
  &lt;/a&gt;
  How tracing works with Encore
&lt;/h2&gt;

&lt;p&gt;The way you write &lt;a href="https://github.com/encoredev/encore"&gt;Encore applications&lt;/a&gt; has been carefully designed to facilitate static analysis. When you do, Encore can easily understand, among other things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The services and APIs you have defined, and their precise request/response schemas&lt;/li&gt;
&lt;li&gt;Precisely when and where you make an API call to another service, output structured log messages, execute database queries, and more&lt;/li&gt;
&lt;li&gt;What infrastructure each service requires to run&lt;/li&gt;
&lt;li&gt;Your database(s) schemas&lt;/li&gt;
&lt;li&gt;And lots more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using nothing but static code analysis we build up a detailed graph of your application as a distributed system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bwx6Rwin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/app-graph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bwx6Rwin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/app-graph.png" alt="Distributed Tracing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now, when Encore compiles your application, it queries this graph to automatically add instrumentation in the right places. Instead of having to manually propagate trace IDs, Encore comes with a slightly modified Go runtime that automatically propagates trace information for you. And since it understands exactly what every operation &lt;em&gt;is&lt;/em&gt;, and not just a generic "span", Encore can add incredibly rich information that is unique to each type of event. Among other things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Database queries, transactions, commits/rollbacks&lt;/li&gt;
&lt;li&gt;API calls, complete with input/output data&lt;/li&gt;
&lt;li&gt;Outgoing HTTP requests, along with precise timings for things like DNS resolution, TLS handshakes, and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also break things down further. Encore captures goroutine timings, allowing you to see at a glance when an API call runs multiple things in parallel. Including exactly what each goroutine did: database queries, API calls, log messages, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1MkkxUrd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-goroutines.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1MkkxUrd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-goroutines.png" alt="Tracing goroutines"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stack-traces"&gt;
  &lt;/a&gt;
  Stack traces
&lt;/h2&gt;

&lt;p&gt;Finally, Encore now captures &lt;em&gt;complete stack traces&lt;/em&gt; for everything. But wait, I hear you say, won't that be incredibly slow? Nope.&lt;/p&gt;

&lt;p&gt;Encore only collects the program counter for each stack frame, and then uses delta encoding and varint encoding. Then when it comes to viewing a trace, we map the program counters back to the files, lines, and function names using the program's symbol table stored in the binary, that we conveniently kept around from when we did our original static analysis pass.&lt;/p&gt;

&lt;p&gt;The end result is collecting a stack trace in as little as 300ns, and each stack frame often takes 1-2 bytes to encode. This remarkable result is only possible by the tight integration between Encore and the Go runtime. It's fast enough that we can capture stack traces for pretty much &lt;em&gt;everything&lt;/em&gt;. Database queries, API calls, log messages, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNBN6enU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-stacks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNBN6enU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-stacks.png" alt="Stack traces"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-sense-of-it-all"&gt;
  &lt;/a&gt;
  Making sense of it all
&lt;/h2&gt;

&lt;p&gt;Encore is all about enabling simplicity through understanding your application, and we wanted the tracing experience to reflect that. So instead of doing all this instrumentation by hand, and presenting a trace as a long list of spans, we wanted it to "just work" with no additional effort on your part, and with a UI that reflects the structure of your app.&lt;/p&gt;

&lt;p&gt;Stack traces are great and all, but when you're building a distributed system they're often insufficient to get a complete picture of what's going on. That's what's so beautiful about our approach: the stack traces are themselves embedded in the distributed trace data.&lt;/p&gt;

&lt;p&gt;In the end, the traces are much richer in information and at the same time faster to collect. And by understanding exactly what each span represents, we can visualize traces in a much more understandable way. And the stack traces we capture? We can correlate them across the whole system, so you can understand the exact code path across all your services that led to a particular event.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---VqxzLfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---VqxzLfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-ui.png" alt="Stack traces"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tracing-everywhere"&gt;
  &lt;/a&gt;
  Tracing Everywhere
&lt;/h2&gt;

&lt;p&gt;The final piece of the puzzle was the realization that such a powerful experience is useful for many more things than just performance analysis. That's why we made it available &lt;em&gt;everywhere&lt;/em&gt;, and perhaps most critically, for local development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gH3nI8O_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-list.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gH3nI8O_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-list.png" alt="Local tracing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That way, the next time you're building a new feature, and you find a bug, you can immediately open up the trace view and see exactly where the problem is. Same goes for production, your test environment, and for all your Preview Environments that Encore automatically spins up for each Pull Request you open. And that time when everything was on fire and you couldn't figure out why? It sure would be nice to immediately pinpoint where the problem was.&lt;/p&gt;

&lt;p&gt;Why, you ask? Because it's about time we developers got better tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-play-around-this-stuffs-all-open-source"&gt;
  &lt;/a&gt;
  Want to play around? This stuff's all open source.
&lt;/h2&gt;

&lt;p&gt;You'll go from zero to a running backend in the cloud in less than 5 minutes. With the world's most advanced tracing integration, fully open source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://encore.dev/docs/intro/speedrun"&gt;Try it now&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>tracing</category>
      <category>backend</category>
      <category>api</category>
    </item>
    <item>
      <title>Web Browser Anatomy</title>
      <author>Valerii Udodov</author>
      <pubDate>Wed, 05 May 2021 09:00:35 +0000</pubDate>
      <link>https://dev.to/vudodov/web-browser-anatomy-5eik</link>
      <guid>https://dev.to/vudodov/web-browser-anatomy-5eik</guid>
      <description>&lt;p&gt;Web Browser is a big and sophisticated application, built from multiple components. It obligated to satisfy different boring standards, to facilitate developers with stable contracts. You might know these contracts as HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;Any valid code or markup will be recognized and processed by one of the browser modules. The browser glues together all its modules with the Browser Object Model (BOM) API, aka¬†&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API"&gt;Web API&lt;/a&gt;. This is something that empowers JavaScript to operate on HTML and CSS. We will get back to it in more detail later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uK0MaKjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7j929vsc42e4dlb2rjn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uK0MaKjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7j929vsc42e4dlb2rjn.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A good example of Web API is¬†&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;Fetch API&lt;/a&gt;¬†or its predecessor the¬†&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"&gt;XMLHttpRequest&lt;/a&gt;, both are used to communicate with a remote server over HTTP. Yet another useful tool from Web API toolbox is the¬†&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API"&gt;File System API&lt;/a&gt;, allowing communication with the underlying file system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-browser-engine"&gt;
  &lt;/a&gt;
  The Browser Engine
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#rendering"&gt;
  &lt;/a&gt;
  Rendering
&lt;/h3&gt;

&lt;p&gt;Let's slightly touch the browser rendering process to get ourselves familiar with the main actors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LFBmG9No--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mklwiueebfgism82g0m8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LFBmG9No--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mklwiueebfgism82g0m8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the browser receives HTTP Response with HTML file, it'll try to break it down into a &lt;em&gt;Document Object Model&lt;/em&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model"&gt;DOM&lt;/a&gt;) Tree, download if necessary CSS and break it into &lt;em&gt;CSS Object Model&lt;/em&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model"&gt;CSSOM&lt;/a&gt;) Tree.&lt;/p&gt;

&lt;p&gt;After receiving following index.html&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"Val likes potatoes"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/css/example.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;I like &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;potatoes&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And download referenced example.css&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;brown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As an intermediate step browser will produce these two trees üå≥üå≥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aeFe0MBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8kpzzso9c1ryfhw41v3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aeFe0MBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8kpzzso9c1ryfhw41v3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After it is done, it'll try to merge those trees and finalize results in another tree, known as a &lt;em&gt;Render-Tree&lt;/em&gt;. This tree represents all nodes needed to be rendered, basically everything that have to be shown on the screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5t7Xm3Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k013wf956hrk2n51vp8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5t7Xm3Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k013wf956hrk2n51vp8f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last two steps in the rendering process are &lt;em&gt;Layout&lt;/em&gt; and &lt;em&gt;Paint&lt;/em&gt;. &lt;em&gt;Layout&lt;/em&gt; computes the exact position and size of each object, calculates the geometry based on the &lt;em&gt;Render-Tree&lt;/em&gt;. Ultimately &lt;em&gt;Paint&lt;/em&gt; step receives the &lt;em&gt;Final Render-Tree&lt;/em&gt; and renders the pixels to the screen.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Web API&lt;/em&gt;, we spoke about before, provide a mechanism for &lt;em&gt;DOM&lt;/em&gt; and &lt;em&gt;CSSOM&lt;/em&gt; manipulation. Which reflects on a render-tree. Hence what you see on the screen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Browser Engine&lt;/em&gt; provides an API for interaction and state-mutation.&lt;br&gt;&lt;br&gt;
It is important to note, that these APIs controlled and implemented by the browser. They might be accessed and consumed through the JavaScript code. However, nor JavaScript neither JavaScript Engine has any direct relation to it.&lt;/p&gt;

&lt;p&gt;There's no generic browser platform, each browser comes with its own Browser Engine, e.g. Trident¬†for IE, &lt;a href="https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/"&gt;Blink&lt;/a&gt; for Chrome, &lt;a href="https://github.com/mozilla/gecko-dev"&gt;Gecko&lt;/a&gt; for Firefox, etc.&lt;br&gt;&lt;br&gt;
So next time you find a dodgy styling behavior in IE, you know whom to blame üòà.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-javascript-engine"&gt;
  &lt;/a&gt;
  The JavaScript Engine
&lt;/h2&gt;

&lt;p&gt;The JavaScript code you've written, have never ever been executed in its original shape... üôÄ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-processing"&gt;
  &lt;/a&gt;
  Code processing
&lt;/h3&gt;

&lt;p&gt;As we know, the first thing that hits the browser is HTML file which presumably contains a JavaScript script reference. The Browser engine starts producing the forest of trees and at the same time &lt;a href="https://html.spec.whatwg.org/multipage/scripting.html#the-script-element"&gt;&lt;em&gt;HTML Parser&lt;/em&gt; finds the&lt;/a&gt; &lt;code&gt;&amp;lt;script ...&amp;gt;&lt;/code&gt; tag. Eventually, code is downloaded (alternatively pulled from the cache or service worker) and passed to the JavaScript Engine as a UTF-16 byte stream. The entrance point to the JavaScript Engine is a &lt;em&gt;Byte-Stream Decoder&lt;/em&gt;.&lt;br&gt;&lt;br&gt;
&lt;code&gt;0076 0061 0072 0020 0078 0020 003d 0020 0033 003b&lt;/code&gt; stream got decoded and became something like &lt;code&gt;var x = 3;&lt;/code&gt;. Next decoder searches for familiar pieces, pre-defined tokens. &lt;code&gt;var&lt;/code&gt; is &lt;a href="https://www-archive.mozilla.org/js/language/js20-1999-02-18/tokens"&gt;one of the tokens&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now is a time for another tree üå≥. &lt;em&gt;Parser&lt;/em&gt; and &lt;em&gt;Pre-Parser&lt;/em&gt; take all the tokens from the &lt;em&gt;Byte-Stream Decoder&lt;/em&gt;, analyze them and produces &lt;em&gt;Abstract Syntax Tree&lt;/em&gt; (AST). &lt;em&gt;The Parser&lt;/em&gt; has a higher priority, it determines and processes the hot path, which is needed immediately to make the page work, &lt;em&gt;Pre-Parser&lt;/em&gt; is processing rest, including behavior that will be triggered by user interactions or with some other events.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JkbcnzYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptmz3a1d5omqioaf0zwz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JkbcnzYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptmz3a1d5omqioaf0zwz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So far we have a tree representation of our code (AST), which we need to compile into machine code. The process of compilation and optimization takes place in &lt;em&gt;the compiler pipeline&lt;/em&gt;. The pipeline highly depends on the JavaScript engine, thus absolutely different for all browsers.&lt;br&gt;&lt;br&gt;
The most straight-forward approach to produce machine code is to produce an intermediate byte-code first with a help of the interpreter, this code can be observed and analyzed during execution, optimized and re-compiled several times into the machine code. Machine code is processor-specific, therefore optimization is done with respect to processor type and architecture.&lt;/p&gt;

&lt;p&gt;Machine code is kina final product and ends processing cycle, however, through page lifetime, the optimization process can force re-compilation to produce a more efficient version of it.&lt;/p&gt;

&lt;p&gt;Whenever JavaScript standard, aka ECMA Script, comes up with a new version or things like WebAssembly, asm.js appear, the browser engine compiling pipeline is the place where the most of work is have to be done.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#v8-compilation-pipeline"&gt;
  &lt;/a&gt;
  V8 Compilation Pipeline
&lt;/h3&gt;

&lt;p&gt;V8 is Google's JavaScript engine, it is fast and powerful. V8 usage is not limited to the Chrome browser. NodeJS is using it as a part of its runtime. And recently released Microsoft Edge replaced its own implementation in favor of Google V8. And it is not only replacement Microsoft Edge did, but it also found a place for Google's Browser Engine Blink.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--unBR2IAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n86b1b2j6sh6l8q1z4lo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unBR2IAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n86b1b2j6sh6l8q1z4lo.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's zoom in into the compilation pipeline and identify main components.&lt;/p&gt;

&lt;p&gt;The compilation pipeline consists of two main pieces working side by side together and constantly interfering with each other. The interpreter called &lt;a href="https://docs.google.com/document/d/11T2CRex9hXxoJwbYqVQ32yIPMh0uouUZLdyrtmMoL44/edit?usp=sharing"&gt;Ignition&lt;/a&gt; and &lt;a href="https://docs.google.com/document/d/1l-oZOW3uU4kSAHccaMuUMl_RCwuQC526s0hcNVeAM1E/edit"&gt;TurboFan&lt;/a&gt; JIT compiler.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The&lt;/em&gt; &lt;em&gt;TurboFan&lt;/em&gt; is optimizing compiler built on top of the &lt;a href="https://darksi.de/d.sea-of-nodes/"&gt;"Sea of nodes" graph concept&lt;/a&gt;. It came as a replacement for long-living &lt;em&gt;Crankshaft&lt;/em&gt;. &lt;em&gt;The Crankshaft&lt;/em&gt; was good, but didn't scale well to fully support modern JavaScript (&lt;code&gt;try-catch&lt;/code&gt;, &lt;code&gt;for-of&lt;/code&gt;, &lt;code&gt;async/await,&lt;/code&gt; etc). It was defaulting to de-optimization (performance cliffs, de-optimization loops). And it was tightly coupled to &lt;em&gt;the Full-Codegen&lt;/em&gt;. Check out diagrams below üëá. &lt;em&gt;The Full-Codegen&lt;/em&gt; was also a compiler (yup, two compilers working together), comparatively fast and simple. It kicked in first and produced machine code directly, so the browser had something to execute while &lt;em&gt;Crankshaft&lt;/em&gt; was doing its job.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The&lt;/em&gt; &lt;em&gt;Ignition&lt;/em&gt; interpreter that eventually squeezed out the &lt;em&gt;Full-Codegen&lt;/em&gt; compiler and reduced memory usage, parsing overhead and provided the ability to significantly reduce pipeline complexity. &lt;em&gt;Ignition&lt;/em&gt; is  compiling to a concise byte-code, rather than machine code, since it is more concise it allows more eager compilation and it makes byte-code a source of truth for optimization and de-optimization&lt;/p&gt;

&lt;p&gt;Today V8 Compilation Pipeline looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U95oJxnt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ow0ld6j3042wkfxj6yq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U95oJxnt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ow0ld6j3042wkfxj6yq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the final product we have as of 2017. Through the years JavaScript was quickly evolving, becoming more complicated and feature-rich language, and so did V8.&lt;/p&gt;

&lt;p&gt;In its first iteration back in 2008 it looked like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T6yuiDoM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3h7o0n42qbvf2pmv62m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T6yuiDoM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3h7o0n42qbvf2pmv62m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After major re-factoring in 2010, with the introduction of mentioned previously &lt;em&gt;Crankshaft&lt;/em&gt; and &lt;em&gt;Full-Codegen&lt;/em&gt;, the compile pipeline looked as following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6M5LdJxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqbq93uepnr5ojpsaszl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6M5LdJxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqbq93uepnr5ojpsaszl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Time was passing, JavaScript became more complicated and demanding, so did the compiler pipeline. Throwback to 2014.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xf1F_k9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0oj2ez1mcjophzaalx60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xf1F_k9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0oj2ez1mcjophzaalx60.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, in 2016 V8 Code Compilation Pipeline became this...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RjtWulcq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0aks78zvnii289txvc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RjtWulcq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0aks78zvnii289txvc2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tccej5np--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8osqtlvxzvdksv4y8vp3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tccej5np--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8osqtlvxzvdksv4y8vp3.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In 2017 V8 team threw away the Baseline layer and Crankshaft. And sculpt the pipeline how we know it today (2020).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xTW3J8JM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak7gg51x0zaurj47rt5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xTW3J8JM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak7gg51x0zaurj47rt5g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#runtime"&gt;
  &lt;/a&gt;
  Runtime
&lt;/h3&gt;

&lt;p&gt;Now let's focus on the code execution runtime concept. This concept is shared across all browsers with JavaScript support and any other JavaScript Runtime environment, such as NodeJS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rRtfxGht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kx6h76vzd5a3eqkz21m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rRtfxGht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kx6h76vzd5a3eqkz21m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The execution of code in JavaScript is limited to a single thread. The execution sequence and memory allocation is controlled by the JavaScript Engine. Objects are allocated in large memory regions called &lt;em&gt;Heap&lt;/em&gt;, execution sequence controlled by &lt;em&gt;Stack of Frames&lt;/em&gt; or just &lt;em&gt;Stack&lt;/em&gt;. &lt;em&gt;The Stack&lt;/em&gt; is directly correlated with the single-threaded nature of JavaScript (one stack === one thread). By the way, whatever you see in the exception stack trace, comes directly from the Stack of Frames. Stack has a limit and you can easily exploit touch it with infinite recursion, just saying üôÉ.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SJr2RA_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0e0w25dbci4whj29z3nl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SJr2RA_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0e0w25dbci4whj29z3nl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thread means blocking behavior, for that reason JavaScript has a concurrency model built-in, callbacks, promises, asynchronous operations, etc.&lt;br&gt;&lt;br&gt;
The implementation is quite different from Java, C++ or C#. It is built on top of the infinite message loop, &lt;em&gt;the Event Loop&lt;/em&gt;. Each message consists of the event and the callback function. &lt;em&gt;The Event Loop&lt;/em&gt; polls oldest messages from &lt;em&gt;the Queue&lt;/em&gt;. Message becomes a Frame and Frame transitioned to &lt;em&gt;the Stack&lt;/em&gt;. This process occurs only when &lt;em&gt;Stack&lt;/em&gt; is empty. &lt;em&gt;The Event Loop&lt;/em&gt; constantly monitors &lt;em&gt;the&lt;/em&gt; &lt;em&gt;Stack&lt;/em&gt; for that reason.&lt;br&gt;&lt;br&gt;
Whenever an event happens and there is an event handler associated with the event, the message is added to &lt;em&gt;the Queue&lt;/em&gt;. The association is stored in the &lt;em&gt;Event Table&lt;/em&gt;, which also pushes messages into &lt;em&gt;the&lt;/em&gt; &lt;em&gt;Queue&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Do you remember WebAPI? WebAPI exposes a large set of pre-defined hooks for callback function registration, such as &lt;code&gt;onClick&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt;. DOM interactions, Fetch API, Geo-location API and many more, all these APIs provide event-to-handler mappings compatible with &lt;em&gt;Event Table&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;"Don't try this at home" section againüòà. With the help of the Queue and WebAPI, we can make infinite recursion work on the level above avoiding stack overflow exploit. All we need is to re-route functions to the Queue, instead of Stack. Wrap your recursive function call with &lt;code&gt;setInterval(..., 0);&lt;/code&gt; and there you have it. The message goes to the Queue, instead of Stack. And it will be executed until the browser will terminate the process&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XnBr-z47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5pkmbqcn4allm9w38zo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XnBr-z47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5pkmbqcn4allm9w38zo.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h2&gt;

&lt;p&gt;All modern web browsers are different, they might or might not have different Browser and JavaScript engines. They have different internals and provide a slightly different experience. In order to stay compatible, they have to provide consistent behavior and implement all required standards.&lt;/p&gt;

&lt;p&gt;A web browser is an extremely sophisticated evolving orchestra of modules, each and every module functioning independently. They have different responsibilities and peruse unrelated aims. However, as an experienced conductor, the web browser makes all the parts work together.&lt;/p&gt;

&lt;p&gt;Knowing environment internals is useful, having a good understanding will help to improve and boost performance in the critical parts of the front-end application and overall rendering process. More optimized code or markup ‚û°Ô∏èless work for browser ‚û°Ô∏èfaster and more responsive web site.&lt;/p&gt;

</description>
      <category>browser</category>
      <category>browserengine</category>
      <category>javascript</category>
      <category>javascriptengine</category>
    </item>
  </channel>
</rss>
