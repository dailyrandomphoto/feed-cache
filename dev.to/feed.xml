<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Digital Clock using Vue 3 Composition API</title>
      <author>Snehal </author>
      <pubDate>Sat, 08 Jan 2022 17:20:52 +0000</pubDate>
      <link>https://dev.to/snehalk/digital-clock-using-vue-3-composition-api-5cmc</link>
      <guid>https://dev.to/snehalk/digital-clock-using-vue-3-composition-api-5cmc</guid>
      <description>&lt;p&gt;Hello Readers,&lt;/p&gt;

&lt;p&gt;In this blog post we will see how can we create a digital clock using Vue 3 composition API. Composition API is a new feature added in Vue through which we can reuse the code in multiple vue component.&lt;/p&gt;

&lt;p&gt;For more details about how to use composition API you can refer my previous blog. I providing a link - go through it for basic information about it.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/snehalk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SVnsI9sy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--iIApoEHT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/672647/bc92b576-94f5-4960-b01b-a3e9f62eec6b.png" alt="snehalk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/snehalk/what-is-composition-api-in-vue-3-157k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is Composition API in Vue 3&lt;/h2&gt;
      &lt;h3&gt;Snehal  ・ Dec 23 '21 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;So let's start with main topic.&lt;/p&gt;

&lt;p&gt;First we need to create a component named as &lt;code&gt;DigitalClock.vue&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex h-screen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w-full lg:w-1/4 m-auto p-7 shadow-lg shadow-pink-400 border-4 border-t-purple-600 border-r-pink-600 border-b-pink-600 border-l-indigo-600  bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-bold text-white text-lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt; --&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-bold text-white pt-3 text-6xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-bold text-white text-sm mb-1 flex justify-end mr-3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCurrentTime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../composables/useCurrentTime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CurrentTimeExample&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;currentTime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCurrentTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;currentTime&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code we are calling &lt;code&gt;useCurrentTime&lt;/code&gt; method from the &lt;code&gt;useCurrentTime.js&lt;/code&gt; file where we are going to write our main logic using composition api and from that we will call a currentTime and return its value to the component. &lt;/p&gt;

&lt;p&gt;To create a composition api's we will create a folder named as &lt;code&gt;composables&lt;/code&gt; where we keep/create all composition api's. &lt;/p&gt;

&lt;p&gt;As stated above create a folder named as &lt;code&gt;composables&lt;/code&gt; in &lt;code&gt;src&lt;/code&gt; folder and create js file as &lt;code&gt;useCurrentTime.js&lt;/code&gt;. (&lt;code&gt;src/composables/useCurrentTime.js&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onBeforeUnmount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useCurrentTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateCurrentTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateTimeInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateCurrentTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;onBeforeUnmount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateTimeInterval&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above code we have created a const variable as currentTime which holds current Date and Time, and a method &lt;code&gt;updateCurrentTime&lt;/code&gt; to update the current time. There is an another method called as &lt;code&gt;updateTimeInterval&lt;/code&gt; which will update the time after given set of interval. &lt;br&gt;
You can see a hook called as &lt;code&gt;onBeforeUnmount()&lt;/code&gt; which will clear the currentTime when component is unmounted.&lt;br&gt;
And the last thing is we are returning the current time, so wherever we have used/called this useCurrenttTime.js we will have the value. &lt;/p&gt;

&lt;p&gt;In this way wherever we require the date n time we can reuse this code by simply importing it to the component.&lt;/p&gt;

&lt;p&gt;You can also refer live demo in sandbox.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/digital-clock-forked-m3mgm"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Happy Reading.. 🦄 🦁&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>vue</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Laravel Custom Login Validation with Ajax</title>
      <author>Adeyemi Adeshina </author>
      <pubDate>Sat, 08 Jan 2022 16:17:29 +0000</pubDate>
      <link>https://dev.to/iamadeyemiadex/laravel-custom-login-validation-with-ajax-3155</link>
      <guid>https://dev.to/iamadeyemiadex/laravel-custom-login-validation-with-ajax-3155</guid>
      <description>&lt;p&gt;Laravel is arguably the most used and popular PHP Framework for Web Artisans. &lt;/p&gt;

&lt;p&gt;Laravel has its own in-built functionality for Auth (User Registration and Login). If you think you feel satisfied with the in-built functionality, you can make use of it and your application will work well. But, if you want to go further to have your own custom Auth function, this article is for you. Let's get started!&lt;/p&gt;

&lt;p&gt;In this article, I will be showing you how you can write custom login form validation and authentication without reloading the browser. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 1: Create Users&lt;/strong&gt;&lt;br&gt;
I want to assume you already have users created in your users database table.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 2: Create Login Page&lt;/strong&gt;&lt;br&gt;
This our our short code for our login page view&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body&amp;gt;
&amp;lt;div class="col-lg-4 col-md-4"&amp;gt;
   &amp;lt;form action="{{ route('login') }}" method="POST"  id="login_form" 
   class="request-form "&amp;gt;
    @csrf
   &amp;lt;h2&amp;gt;Login&amp;lt;/h2&amp;gt;
   &amp;lt;div id="show_error" style="color: red"&amp;gt; &amp;lt;/div&amp;gt;

   &amp;lt;div class="form-group mr-2"&amp;gt;
      &amp;lt;label for="" class="label"&amp;gt;Email&amp;lt;/label&amp;gt;
      &amp;lt;input type="email" name="email" class="form-control" &amp;gt;
      &amp;lt;span class="text-danger error-text email_error" 
       style="color: red"&amp;gt;&amp;lt;/span&amp;gt;
   &amp;lt;/div&amp;gt;

   &amp;lt;div class="form-group mr-2"&amp;gt;
      &amp;lt;label for="" class="label"&amp;gt;Password&amp;lt;/label&amp;gt;
      &amp;lt;input type="password" name="password" class="form-control" 
      &amp;gt;
      &amp;lt;span class="text-danger error-text password_error" 
      style="color: red"&amp;gt;&amp;lt;/span&amp;gt;
   &amp;lt;/div&amp;gt;

   &amp;lt;div class="form-group"&amp;gt;
   &amp;lt;input type="submit" value="Login" class="btn  py-3 px-4" 
   style="background-color: #5f76e8; color:#ffffff"&amp;gt;
   &amp;lt;/div&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;
//add javascript with ajax here
&amp;lt;script src="[place you jquery source here...]"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
        $("#login_form").submit(function(e){
         e.preventDefault();

        var all = $(this).serialize();

        $.ajax({
            url:  $(this).attr('action'),
            type: "POST",
            data: all,
            beforeSend:function(){
                $(document).find('span.error-text').text('');
            },
            //validate form with ajax. This will be communicating 
              with your LoginController
            success: function(data){
                if (data.status==0) {
                    $.each(data.error, function(prefix, val){
                        $('span.'+prefix+'_error').text(val[0]);
                    });
                }
               // redirect the user to [another page] if the 
                   login cred are correct. Remember this is 
                   communicating with the LoginController which we 
                   are yet to create
                if(data == 1){
                    window.location.replace(
                     '{{route("dashboard.index")}}'
                    );
                }else if(data == 2){
                 // Show the user authentication error if the 
                   login cred are invalid. Remember this is 
                   communicating with the LoginController which we 
                   are yet to create
                    $("#show_error").hide().html("Invalid login 
                       details");
                }

            }
            })

        });


    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Login View Sample : login.blade.php&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KTAccxXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhchi1ir12j46htftibf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTAccxXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhchi1ir12j46htftibf.PNG" alt="Laravel Custom Login Page Validation with Ajax " width="533" height="299"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;NOTE:&lt;/strong&gt; You can customize this to your desire&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 3: Create LoginController&lt;/strong&gt;&lt;br&gt;
     &lt;em&gt;Open your command prompt  interface, cd to your project &lt;br&gt;
     directory and paste the below command there&lt;/em&gt;&lt;br&gt;
     &lt;code&gt;php artisan make:controller LoginController&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; namespace App\Http\Controllers;
 use Illuminate\Support\Facades\Auth;
 use Illuminate\Http\Request;
 use Illuminate\Support\Facades\Session;
 use Illuminate\Support\Facades\Validator;
   class LoginController extends Controller{
      public function login(Request $request){
        $validator = Validator::make($request-&amp;gt;all(), [
        'email' =&amp;gt;    'required',
        'password' =&amp;gt; 'required',
      ]);
       // validate all requests and it sends output to your 
          login.blade.php

       if(!$validator-&amp;gt;passes()){
          return response()-&amp;gt;json([
             'status'=&amp;gt;0, 
             'error'=&amp;gt;$validator-&amp;gt;errors()-&amp;gt;toArray()
          ]);
        }

       $user_cred = $request-&amp;gt;only('email', 'password');
        if (Auth::attempt($user_cred)) {

             //if user is logged in and the role is user
            if(Auth()-&amp;gt;user()-&amp;gt;role=='user'){  
               return response()-&amp;gt;json([ [1] ]);
            }  

        }else{
             //if user isn't logged in
                return response()-&amp;gt;json([ [2] ]);
        }
        return redirect("/");
     }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;STEP 4: Modify your route:web.php&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;add your controller to your web.php; as the case maybe&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Route::post('/login'[App\Http\Controllers\LoginController::class, 'login'])-&amp;gt;name('/login');&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Hello friends, in this article we successfully created a login form with Laravel and AJAX without reloading the browser. I hope you enjoy it. &lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to design your Laravel models fast in 2022 with Fluidbm</title>
      <author>Franz Nkemaka</author>
      <pubDate>Sat, 08 Jan 2022 16:09:08 +0000</pubDate>
      <link>https://dev.to/franznkemaka/how-to-design-your-laravel-models-fast-in-2022-with-fluidbm-55ip</link>
      <guid>https://dev.to/franznkemaka/how-to-design-your-laravel-models-fast-in-2022-with-fluidbm-55ip</guid>
      <description>&lt;p&gt;In this tutorial, I will show you how to design your Laravel Models fast using Fluidbm.&lt;/p&gt;

&lt;p&gt;👨‍💻 ⚡ Fluidbm is a free Laravel schema designer that syncs your online model designs to your project using a cli. No download and copy-pasting files anymore. Just run "fluidbm pull" and the job is done.&lt;/p&gt;

&lt;p&gt;😊 Let's get started: &lt;br&gt;
This tutorial is splitted in two main parts: Designing the models and importing them to your Laravel project. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#design-models-with-fluidbm"&gt;
  &lt;/a&gt;
  🎨 Design models with Fluidbm
&lt;/h2&gt;

&lt;p&gt;Foremost, you need to signup or login on Fluidbm: &lt;a href="https://fluidbm.com"&gt;https://fluidbm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Press on &lt;strong&gt;Create new schema&lt;/strong&gt; to start a new project&lt;/p&gt;

&lt;p&gt;Using the editor, you can rename your Schema. In this case I will name mine "DemoBlog"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qH-TI3HV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei6jp5eorm5ghhl7mygi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qH-TI3HV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei6jp5eorm5ghhl7mygi.png" alt="New project on Fluidbm" width="880" height="210"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;✍️ Creating models&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Press on &lt;strong&gt;Add Model&lt;/strong&gt; to create add a new model&lt;/p&gt;

&lt;p&gt;You can add as many models as you wish, as well as columns.&lt;/p&gt;

&lt;p&gt;To add columns to add Model, simply double-click the model.&lt;/p&gt;

&lt;p&gt;It should like this after: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ua3XeFX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4y5yv46n1iyfalyeg0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ua3XeFX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4y5yv46n1iyfalyeg0t.png" alt="Model showcase in Fluidbm" width="880" height="598"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the Model Editor sidebar, one can add Laravel Database Factories, data dummies to fill up your models so you can use for testing.&lt;/p&gt;

&lt;p&gt;For our &lt;strong&gt;DemoBlog&lt;/strong&gt;, I will add another Model called &lt;strong&gt;Post&lt;/strong&gt;, with some additional factories, It looks as follows: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lA_lDUG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df5x30modx3q8yxts2l0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lA_lDUG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df5x30modx3q8yxts2l0.png" alt="Showcase models in Fluidbm" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;🔗 Adding relationships&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To link &lt;strong&gt;Users ** with **Posts&lt;/strong&gt;, click on the User model then drag the relation pin and drop on the model you want to connect. &lt;br&gt;
In our case &lt;strong&gt;User -&amp;gt; Post&lt;/strong&gt;. &lt;br&gt;
Then click on the connection line to define the type of Relationship. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vDqNHIq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8k7no4zkb4ubut1dkl66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vDqNHIq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8k7no4zkb4ubut1dkl66.png" alt="Showcase Relationship in Fluidbm" width="880" height="367"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;😊 A code preview is also generated to give you some sense of the output later. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#importing-to-laravel-in-milliseconds"&gt;
  &lt;/a&gt;
  ⛏️ Importing to Laravel (in milliseconds)
&lt;/h2&gt;

&lt;p&gt;First create a new Laravel project, or open an existing one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer create-project laravel/laravel my-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;👨‍💻 ⚡ Fluidbm CLI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It interacts with the Fluidbm API to generate your Laravel schema schemas, factories and database seeder.&lt;/p&gt;

&lt;p&gt;The source code can be found here: &lt;a href="https://github.com/franznkemaka/fluidbm-cli"&gt;https://github.com/franznkemaka/fluidbm-cli&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use it directly with &lt;strong&gt;npx&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx fluidbm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or Install it via &lt;strong&gt;npm or yarn&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g fluidbm-cli

or 

yarn global add fluidbm-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this tutorial, we will use &lt;strong&gt;npx&lt;/strong&gt; as it requires no previous installation.&lt;/p&gt;

&lt;p&gt;🏗️ Authenticate with Fluidbm&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx fluidbm auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To link your Fluidbm project to your Laravel project, you have to clone it. Copy the url or the schema id only &lt;strong&gt;61d97a9185de6a5b30ab72e3&lt;/strong&gt; and paste it this way&lt;br&gt;
!make sure 61d97a9185de6a5b30ab72e3 to replace it with your own&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx fluidbm clone https://fluidbm.com/schema/61d97a9185de6a5b30ab72e3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's time to import all our code to Laravel with a single command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx fluidbm pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eFM4zuUl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/822lhbndc1l6l8a9sz0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eFM4zuUl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/822lhbndc1l6l8a9sz0u.png" alt="After 140 milliseconds it is done" width="473" height="312"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All models and factories were successfully generated. A default seeder was also automatically implemented.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WzWHEcxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp74bg6mr1o2dfw9nmmd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WzWHEcxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp74bg6mr1o2dfw9nmmd.png" alt="Fludibm magic" width="880" height="510"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎉After just 0.14s it is done ✅&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go back to Fluidbm and perform changes, to resync, just hit &lt;code&gt;npx fluidbm pull&lt;/code&gt; and it is done 👍&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now let's migrate our DB and see the changes in a real DB&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generate mock data using the automatically generated seeder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan db:seed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2gZ0GjiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjpg489232rzx2fz1zbh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2gZ0GjiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjpg489232rzx2fz1zbh.png" alt="Generated Data in MySQL" width="880" height="287"&gt;&lt;/a&gt;&lt;br&gt;
✨ Boom! I think the result speaks for itself. &lt;/p&gt;

&lt;p&gt;To view DemoBlog on Fluidbm use this link, but you can't delete it instead you can &lt;strong&gt;Fork&lt;/strong&gt; it and create your own mutable copy: &lt;a href="https://fluidbm.com/s/zfy1opbnJdIW"&gt;https://fluidbm.com/s/zfy1opbnJdIW&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Give Fluidbm a try!

It’s free and available on https://fluidbm.com
Feedback is highly appreciated fluidbm@rigle.co
Cheers 🥂!
Franz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>laravel</category>
      <category>database</category>
      <category>schema</category>
      <category>cli</category>
    </item>
    <item>
      <title>My first SDE internship interview experience</title>
      <author>vedant-jain03</author>
      <pubDate>Sat, 08 Jan 2022 16:00:57 +0000</pubDate>
      <link>https://dev.to/vedantjain03/my-first-sde-internship-interview-experience-1k8e</link>
      <guid>https://dev.to/vedantjain03/my-first-sde-internship-interview-experience-1k8e</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Company: Lido Learning&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I applied at Lido Learning via linkedin. I don't remember the exact date when I applied. But my overall experience was awesome though got rejected due to rolling criteria.&lt;/p&gt;

&lt;p&gt;The process contain 3 round:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-round-telephonic-round"&gt;
  &lt;/a&gt;
  First Round (Telephonic Round)
&lt;/h3&gt;

&lt;p&gt;HR called me and told me that my resume is shortlisted for this role and they want to interview me. I was glad as this was my first time I am going to give interview for SDE role with good stipend and they were also providing me PPO (Pre Placement Offer).&lt;br&gt;
HR told me that my first technical interview will be after 5 days and I can expect easy-medium DSA questions and some questions related to Javascript, OOPS.&lt;/p&gt;

&lt;p&gt;I revise my concept, I do leetcode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#second-round-technical-round"&gt;
  &lt;/a&gt;
  Second Round (Technical Round)
&lt;/h3&gt;

&lt;p&gt;Interviewer was SDE-2 at Lido. He first asked me to introduce myself. Then he ask me question related to javascript. I was able to give answer but I was not confident about it. He asked me the difference between '==' and '==='. I told him that both are conditional operator and '===' is advancement of '==', it was not fully correct. Then he asked me what is reduce function, I told him it is used in array scope. He was satisfied but not fully. He started asking me about OOPS, he asked me difference between private, protected, public. &lt;br&gt;
Then he request me to share the screen and ask me 2 DSA question.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Next Greater Element&lt;br&gt;
I started with brute force and show it to him. He asked me to optimize it, I did it using stack data structure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Based on hash map.&lt;br&gt;
I started with brute force and he asked me to optimize it, I did it and he was satisfied.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;After 2 days I got call that I am selected for next round.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#third-interviewtechnical-round"&gt;
  &lt;/a&gt;
  Third Interview(Technical Round)
&lt;/h3&gt;

&lt;p&gt;Interviewer was VPE at Lido. He started with my introduction, I prepared for DP, graphs and other higher concepts but he deep dive into hashmap, he not ask my to code, he just give me different conditions for mapping. It was pretty tough.&lt;/p&gt;

&lt;p&gt;As it was my first experience, I learned so many things and gain knowledge. Unfortunately, I was not selected as per rolling basis. But it was nice experience and I hope it helps you as well.&lt;/p&gt;

&lt;p&gt;All the Best!!!&lt;/p&gt;

</description>
      <category>dsa</category>
      <category>cpp</category>
      <category>programming</category>
      <category>problemsolving</category>
    </item>
    <item>
      <title>ASMR Coding Drawing App | No Talking </title>
      <author>Bek Brace</author>
      <pubDate>Sat, 08 Jan 2022 15:55:48 +0000</pubDate>
      <link>https://dev.to/bekbrace/asmr-coding-drawing-app-no-talking-4hhc</link>
      <guid>https://dev.to/bekbrace/asmr-coding-drawing-app-no-talking-4hhc</guid>
      <description>&lt;p&gt;I did not realize how coding tutorials on YouTube are sometimes annoying - including my own (no exception 😄), don't get me wrong, I mean it's great to be taught and all but often it's just annoying, you want to watch someone coding in silence and code with them, especially if you're familiar with the language/framework/tech they're using in the video.&lt;/p&gt;

&lt;p&gt;This is an HTML/CSS/JavaScript application, coded from scratch in silence in a rainy night here in Poland, and I did not want to talk just code in silence and if you're a beginner - intermediate, you can code along with me or you can leave it turned on while doing your own stuff.&lt;/p&gt;

&lt;p&gt;The idea was inspired from one famous YouTuber called Takuya and his channel is called "devaslife", he's a Japanese from Osaka who speaks perfect English. The man types in a very smooth way on the terminal - he uses Fish terminal - and never touches the mouse in all of his videos; productive and efficient. I was only inspired by him, and started creating my own videos with my own style, just occasionally not being the main style on the channel.&lt;/p&gt;

&lt;p&gt;The application is very simple, you create it to draw !&lt;br&gt;
Using JavaScript for the logic, this application is ideal for JS beginners and those who started to grasp JS concepts.&lt;/p&gt;

&lt;p&gt;Here's the video&lt;br&gt;
Hope you enjoy it - if you like that type of videos&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WxMt3YfmgwY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Dockerize Angular App</title>
      <author>Abhishek S. Sharma</author>
      <pubDate>Sat, 08 Jan 2022 15:27:11 +0000</pubDate>
      <link>https://dev.to/imabtiwari/dockerize-angular-app-l3i</link>
      <guid>https://dev.to/imabtiwari/dockerize-angular-app-l3i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#agenda"&gt;
  &lt;/a&gt;
  Agenda
&lt;/h2&gt;

&lt;p&gt;Dockerize an &lt;a href="https://angular.io/"&gt;Angular app&lt;/a&gt;, built with the &lt;a href="https://angular.io/cli"&gt;Angular CLI&lt;/a&gt;, using &lt;a href="https://docs.docker.com/engine/"&gt;Docker&lt;/a&gt;, In this blog we will have a walkthrough of angular 7 and dockerize it over node image(base). &lt;/p&gt;

&lt;p&gt;Here, we specifically focus on:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an angular app using CLI and test it locally&lt;/li&gt;
&lt;li&gt;Create an image for dev environment with code Hot-reloading&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h2&gt;

&lt;p&gt;Install the &lt;a href="https://github.com/angular/angular-cli"&gt;Angular CLI&lt;/a&gt; globally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g @angular/cli@7.3.10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generate a new app aka “angular-microservice” using CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng new angular-microservice 
cd angular-microservice
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(optional)To generate in present dir use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng new angular-microservice –directory ./
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#docker-setup"&gt;
  &lt;/a&gt;
  Docker Setup
&lt;/h2&gt;

&lt;p&gt;Add a Dockerfile to the project root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# base image
FROM node:12.2.0

# set working directory
WORKDIR /app
# install and cache app dependencies
COPY package.json /app/package.json
RUN npm install
RUN npm install -g @angular/cli@7.3.10

# add app
COPY . /app

# start app
CMD ng serve --host 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Building Docker image&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t angular-microservice:dev .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Run Docker Image&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Run the container after the build is done:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d -v ${PWD}:/app -v /app/node_modules -p 4201:4200 --rm angular-microservice:dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the -d flag to run the container in the background:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d -v ${PWD}:/app -v /app/node_modules -p 4201:4200 --name foo --rm angular-microservice:dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please react if you found this blog helpful and informational.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>docker</category>
      <category>tutorial</category>
      <category>bash</category>
    </item>
    <item>
      <title>Create simple HelloWorld spring application</title>
      <author>Suvasish Das</author>
      <pubDate>Sat, 08 Jan 2022 15:02:59 +0000</pubDate>
      <link>https://dev.to/suvasish114/create-simple-helloworld-spring-application-4bi9</link>
      <guid>https://dev.to/suvasish114/create-simple-helloworld-spring-application-4bi9</guid>
      <description>&lt;p&gt;In this tutorial I'm going to cover step by step, how to create simple annotation based "HelloWorld" spring application. To create spring application, first of all you need to configure or create a spring project in your IDE (for this tutorial I'm going to use Eclipse IDE). If you having some trable with project creation, I strongly recommend to &lt;a href="https://suvasish114.medium.com/how-to-create-a-simple-spring-project-in-eclipse-using-maven-f52c264163c4"&gt;click here&lt;/a&gt; and get start with your spring journey.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XCz4WMyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ulwjw8qass6yuenp0mug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XCz4WMyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ulwjw8qass6yuenp0mug.png" alt="Image description" width="606" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step1"&gt;
  &lt;/a&gt;
  Step1
&lt;/h3&gt;

&lt;p&gt;Let's create a simple POJO class named &lt;code&gt;HelloWorld&lt;/code&gt;, inside your project classpath (in my case com.example.SpringAnnotation is my project classpath). &lt;code&gt;HelloWorld.java&lt;/code&gt; POJO class containing one string variable named &lt;code&gt;greeting&lt;/code&gt; and one &lt;code&gt;setGreeting(String greeting)&lt;/code&gt; and &lt;code&gt;getGreeting()&lt;/code&gt; function. Those function are called getter and setter methods.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setGreeting(String greeting)&lt;/code&gt; function simply set the local variable named &lt;code&gt;greeting&lt;/code&gt; and &lt;code&gt;getGreeting()&lt;/code&gt; function simply fetch the data of the local variable &lt;code&gt;greeting&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another public function &lt;code&gt;sayHello()&lt;/code&gt; simply print the message in the console using &lt;code&gt;println()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.example.SpringAnnotation&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getGreeting&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setGreeting&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sayHello&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Message is: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step2"&gt;
  &lt;/a&gt;
  Step2
&lt;/h3&gt;

&lt;p&gt;After creating your POJO class, now it's time to define a configuration class. Let's create a &lt;code&gt;HelloWorldConfig&lt;/code&gt; class.&lt;br&gt;
Annotate the class with &lt;code&gt;@Configuration&lt;/code&gt; annotaion. By defining the class with &lt;code&gt;@Configuration&lt;/code&gt; we telling spring that this class is going to contain bean definations.&lt;/p&gt;

&lt;p&gt;Now inside the class we are going to create bean defination. Every bean definations must annotated with &lt;code&gt;@Bean&lt;/code&gt; annotation. One configaretion class can have multiple bean definations. In this case I'm going to create one bean named &lt;code&gt;helloWorld()&lt;/code&gt; (started with small 'h').&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.example.SpringAnnotation&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@Configuration&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorldConfig&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Bean name = helloWorld&lt;/span&gt;
    &lt;span class="nd"&gt;@Bean&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt; &lt;span class="nf"&gt;helloWorld&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;HelloWorld&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setGreeting&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello Spring"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step3"&gt;
  &lt;/a&gt;
  Step3
&lt;/h3&gt;

&lt;p&gt;Now, bean defination is complete. Now create a xml file in your application classpath. I'm going to create &lt;code&gt;Config.xml&lt;/code&gt; in my root class path so that no need to specify the xml files with fully specified path name. Now copy the following code and paste in your xml file. This step is important beacause it define the beans prototype.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;beans&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.springframework.org/schema/beans"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2001/XMLSchema-instance"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:context=&lt;/span&gt;&lt;span class="s"&gt;"http://www.springframework.org/schema/context"&lt;/span&gt;
    &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add the following tag inside &lt;code&gt;&amp;lt;beans&amp;gt;&amp;lt;/beans&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;context:component-scan&lt;/span&gt; &lt;span class="na"&gt;base-package=&lt;/span&gt;&lt;span class="s"&gt;"com.example.SpringAnnotation"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;context:component-scan&lt;/code&gt; tag allow your code to scan for a specific bean. The &lt;code&gt;base-package="&amp;lt;your_component_classpath&amp;gt;"&lt;/code&gt; locate for your defined components class path, so that it can scan for the secified beans in those location.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step4"&gt;
  &lt;/a&gt;
  Step4
&lt;/h3&gt;

&lt;p&gt;Now, we are ready to write our final pice of code or the driving code. Now create a java class containing the main method(if you create your project using maven or gradle project template, you are provided a java class containing main mathod, just use this file).&lt;/p&gt;

&lt;p&gt;Inside those class declare a &lt;code&gt;ApplicationContext&lt;/code&gt; variable and &lt;br&gt;
define with &lt;code&gt;ClassPathXmlApplicationContext()&lt;/code&gt; with parameter the string representation of your bean xml file name with fully specified path (in my case, my xml file is placed at the root location, so I no need to enter the fully specified class name). Make sure that this variable is declared as static, so that we can access it from main method.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ApplicationContext&lt;/code&gt; interface is responsible to create the spring IOC container(if you are not familiar with IOC, &lt;a href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html"&gt;click here&lt;/a&gt; and go through the documentation). &lt;code&gt;ClassPathXmlApplicationContext&lt;/code&gt; class is a subclass which implemented &lt;code&gt;ApplicationContext&lt;/code&gt; interface. There are many other subclass available to create IOC container.&lt;/p&gt;

&lt;p&gt;Now, inside the main method of our code, create a variable of type &lt;code&gt;HelloWorld&lt;/code&gt; and instantiated it with a defined bean. In this case &lt;code&gt;context.getBean("helloWorld", HelloWorld.class)&lt;/code&gt; return a variable of type &lt;code&gt;HelloWorld&lt;/code&gt;. The first argument of getBean refers to the bean name as string and the second argument refers to the actual class.&lt;/p&gt;

&lt;p&gt;Now, we are all set. Simply call the &lt;code&gt;sayHello()&lt;/code&gt; method and your code works successfully.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.example.SpringAnnotation&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.context.ApplicationContext&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.context.support.ClassPathXmlApplicationContext&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;ApplicationContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ClassPathXmlApplicationContext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Config.xml"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="nc"&gt;HelloWorld&lt;/span&gt; &lt;span class="n"&gt;helloWorld&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBean&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"helloWorld"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;helloWorld&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sayHello&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;

&lt;p&gt;Plox!!! our code runs successfully. Here is the output-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RcLFh7Ho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ch2cm047yay4e230hweh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RcLFh7Ho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ch2cm047yay4e230hweh.png" alt="Image description" width="880" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>java</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Python for Everybody the most popular book to learn python-3 </title>
      <author>Mahmoud EL-kariouny</author>
      <pubDate>Sat, 08 Jan 2022 14:55:39 +0000</pubDate>
      <link>https://dev.to/mahmoudessam/python-for-everybody-the-most-popular-book-to-learn-python-3-9d1</link>
      <guid>https://dev.to/mahmoudessam/python-for-everybody-the-most-popular-book-to-learn-python-3-9d1</guid>
      <description>&lt;h4&gt;
  &lt;a href="#python-for-everybody-the-most-popular-book-to-learn-python3"&gt;
  &lt;/a&gt;
  Python for Everybody the most popular book to learn python-3
&lt;/h4&gt;

&lt;p&gt;From Dr.Charles R.Severance University of Michigan&lt;/p&gt;

&lt;p&gt;Download book: &lt;a href="https://bit.ly/3F1z6zi"&gt;https://bit.ly/3F1z6zi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the best to you.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Some Awesome APIs for your next project
</title>
      <author>Snehal Adbol</author>
      <pubDate>Sat, 08 Jan 2022 14:44:49 +0000</pubDate>
      <link>https://dev.to/snehal_02/some-awesome-apis-for-your-next-project-kel</link>
      <guid>https://dev.to/snehal_02/some-awesome-apis-for-your-next-project-kel</guid>
      <description>&lt;h2&gt;
  &lt;a href="#some-awesome-apis-for-your-next-project"&gt;
  &lt;/a&gt;
  Some Awesome APIs for your next project
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Several free web APIs are available to connect to your mobile app, web app, or website to add compelling functionality.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A web API is an application programming interface that may be accessed through the internet using web-specific protocols.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here are nine APIs to create some fantastic projects:&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;1. The CheapShark API&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;CheapShark is a service that monitors the pricing of PC games on sites such as Amazon, Steam, and GamersGate and displays the best discounts to customers. Users may check for top bargains, search for the lowest price on a specific game, sign up for notifications, or browse what’s available on the site. Developers may use the CheapShark API to incorporate the site’s pricing data into their websites or apps.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;link&lt;/em&gt; - &lt;a href="https://apidocs.cheapshark.com/"&gt;&lt;em&gt;CheapShark API&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;2. The Wit.AI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Turn text or speech into recognizable actions that your app/website can use.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wit.ai is an interface for natural language processing (NLP) that converts natural language (voice or text communications) into structured data. Wit is used by developers because it streamlines creating apps and gadgets with which users can speak. Developers would have to master natural language processing methods without it. That would take too much time if you only wanted to create a simple application.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;link&lt;/em&gt; - &lt;a href="https://wit.ai/"&gt;&lt;em&gt;Wit.ai API&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;3. GrammarBot API&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;The GrammarBot API offers spelling and grammatical checks to your application. Submit the text, and you’ll get a JSON response with potential issues and suggested fixes.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;link&lt;/em&gt; - &lt;a href="https://www.grammarbot.io/"&gt;&lt;em&gt;GrammarBot API&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;4. Rapid API&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Based only on APIs, this is a handy tool. It’s more than simply an API directory; it’s also an API marketplace. If you’ve created an API and want to charge others to use it, you can publish it on RapidAPI.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you only want to utilize APIs, RapidAPI provides an API playground to test an API in several languages! It is pretty beneficial.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;link&lt;/em&gt; - &lt;a href="https://rapidapi.com/hub"&gt;&lt;em&gt;Rapid API&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope it motivates you to build more amazing projects, acquire confidence, and grow as a developer!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Follow me on &lt;a href="https://github.com/Snehal0308"&gt;Github&lt;/a&gt; and &lt;a href="https://mobile.twitter.com/SnehalAdbol"&gt;Twitter&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>code</category>
      <category>api</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 50: COBOL</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Sat, 08 Jan 2022 14:37:57 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-50-cobol-2e7b</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-50-cobol-2e7b</guid>
      <description>&lt;p&gt;COBOL - Common Business Oriented Language - is one of the oldest programming languages. It was universally considered to be shit for pretty much its entire existence, because it was shit.&lt;/p&gt;

&lt;p&gt;It's essentially dead. There are frequent claims in the media of "um, actually Cobol is super popular", but they're all bullshit journalists love to repeat after each other without any evidence - which is pretty much in line with the quality of tech journalism. You can easily see from stack overflow, any jobs website, or such, that the only thing people still Cobol for is keeping zombie system from passing away completely.&lt;/p&gt;

&lt;p&gt;Just like Fortran, the language changed many times while keeping the name. I'll try to stick to classic Cobol from the punched card era, with its fixed column layout, even though many of less archaic dialects of Cobol allow a bit more flexibility.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      *    HELLO WORLD IN COBOL
       IDENTIFICATION DIVISION.
       PROGRAM-ID. HELLO.

       PROCEDURE DIVISION.
           DISPLAY 'HELLO WORLD'.
           STOP RUN.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cobc -xg hello.cob
$ ./hello
HELLO WORLD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's some 2D picture.&lt;/p&gt;

&lt;p&gt;Let's take it line by line:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;IDENTIFICATION DIVISION.&lt;/code&gt; - some metadata about the procedure&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PROGRAM-ID. Hello.&lt;/code&gt; - the name of the procedure&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DATA DIVISION.&lt;/code&gt; - there's also one there usually, defines data&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PROCEDURE DIVISION.&lt;/code&gt; - code of the procedure&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DISPLAY 'HELLO WORLD.&lt;/code&gt; - displays a string and newline&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;STOP RUN.&lt;/code&gt; - exits the program&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everything in caps to keep with the spirit of Cobol.&lt;/p&gt;

&lt;p&gt;And column by column:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first 6 columns are for statement numbers&lt;/li&gt;
&lt;li&gt;column 7 is comment indicator - there are a few possible characters for it, we'll be using &lt;code&gt;*&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;names, divisions etc. should start from column 8&lt;/li&gt;
&lt;li&gt;everything else should start from column 12&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#loop"&gt;
  &lt;/a&gt;
  Loop
&lt;/h3&gt;

&lt;p&gt;Let's create a loop that prints a number from 1 to 20:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;       IDENTIFICATION DIVISION.
       PROGRAM-ID. LOOP.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
           01 N PIC 9(2).

       PROCEDURE DIVISION.
           PERFORM VARYING N FROM 1 BY 1 UNTIL N &amp;gt; 20
             DISPLAY N
           END-PERFORM.
           STOP RUN.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cobc -xg loop.cob
$ ./loop
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
16
17
18
19
20
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Line by line:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;inside &lt;code&gt;DATA DIVISION.&lt;/code&gt;, there's &lt;code&gt;WORKING-STORAGE SECTION.&lt;/code&gt; which defines all local variables&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;01 N PIC 9(2).&lt;/code&gt; defines &lt;code&gt;N&lt;/code&gt; as two digit decimal number&lt;/li&gt;
&lt;li&gt;that &lt;code&gt;01&lt;/code&gt; is about nested data definitions (so a 6 character date variable can contain inside it three 2 character variables for year, month, and day etc.), &lt;code&gt;01&lt;/code&gt; means regular variable&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PERFORM VARYING N FROM 1 BY 1 UNTIL N &amp;gt; 20&lt;/code&gt; to &lt;code&gt;END-PERFORM&lt;/code&gt; loops &lt;code&gt;N&lt;/code&gt; from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;20&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DISPLAY N&lt;/code&gt; prints &lt;code&gt;N&lt;/code&gt;, with leading zeroes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Y2K panic was largely about such &lt;code&gt;PIC 9(2)&lt;/code&gt;s used by old COBOL code from the 1960s and 1970s to define year fields, and similar poor practices in other systems. People pretty much forgot about Y2K panic by now, but it was a huge cultural phenomenon back then. Like most such panics, it was over pretty much nothing. After their predictions of doom all turned false, people tried to rewrite history and claim there weren't many bugs thanks to some heroic effort to preemptively fix them (&lt;a href="https://en.wikipedia.org/wiki/Year_2000_problem"&gt;Wikipedia still contains such lies&lt;/a&gt;). In reality, there wasn't much there to begin with, and it was just panic fueled by the media, and Big Tech of the day trying to sell Y2K preparedness services.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FIZZBUZZ
&lt;/h3&gt;

&lt;p&gt;Let's write the FIZZBUZZ! As we're doing COBOL, it will be all caps and with leading zeroes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;       IDENTIFICATION DIVISION.
       PROGRAM-ID. FIZZBUZZ.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
           01 N PIC 9(3).
           01 M PIC 9(3).
           01 3REM PIC 9(1).
           01 5REM PIC 9(1).

       PROCEDURE DIVISION.
           PERFORM VARYING N FROM 1 BY 1 UNTIL N &amp;gt; 100
             DIVIDE N BY 3 GIVING M REMAINDER 3REM
             DIVIDE N BY 5 GIVING M REMAINDER 5REM
             EVALUATE 3REM ALSO 5REM
               WHEN ZERO ALSO ZERO
                 DISPLAY 'FIZZBUZZ'
               WHEN ANY ALSO ZERO
                 DISPLAY 'BUZZ'
               WHEN ZERO ALSO ANY
                 DISPLAY 'FIZZ'
               WHEN OTHER
                 DISPLAY N
             END-EVALUATE
           END-PERFORM.
           STOP RUN.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cobc -xg fizzbuzz.cob
$ ./fizzbuzz
001
002
FIZZ
004
BUZZ
FIZZ
007
008
FIZZ
BUZZ
011
FIZZ
013
014
FIZZBUZZ
016
017
FIZZ
019
BUZZ
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's going on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;all variables defined to fit exact number of digits they need&lt;/li&gt;
&lt;li&gt;variable names can start with numbers, something that's not really a thing in any language these days&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;EVALUATE 3REM ALSO 5REM&lt;/code&gt; is a case statement over two variables - interestingly a lot of languages don't really allow that. Apparently it was only added in COBOL 85 and not available earlier.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;WHEN ZERO ALSO ANY&lt;/code&gt; etc. - are various matches, including wildcard matches&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fibonacci"&gt;
  &lt;/a&gt;
  Fibonacci
&lt;/h3&gt;

&lt;p&gt;This was surprisingly difficult to get working. I think a lot of functions like &lt;code&gt;COMPUTE&lt;/code&gt; use newfangled COBOL features from the 1970s+. When I tried to do more "classic" COBOL, GnuCOBOL was not too happy about it. Then again, the original COBOL didn't even have recursion, so it's hard to pick up the right year to target.&lt;/p&gt;

&lt;p&gt;Interesting COBOL feature is &lt;code&gt;M PIC Z(8)9&lt;/code&gt; - we're defining &lt;code&gt;M&lt;/code&gt; as having 8 digits which should not be printed if zero (&lt;code&gt;Z(8)&lt;/code&gt;), and one regular digit (&lt;code&gt;9&lt;/code&gt;). Data storage and formatting are intertwined like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      *    MAIN PROGRAM
       IDENTIFICATION DIVISION.
       PROGRAM-ID. FIBLOOP.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       REPOSITORY.
           FUNCTION FIB.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
           01 N PIC 9(3).
           01 M PIC Z(8)9.

       PROCEDURE DIVISION.
           PERFORM VARYING N FROM 1 BY 1 UNTIL N &amp;gt; 20
             COMPUTE M = FIB(N)
             DISPLAY 'FIB(' WITH NO ADVANCING
             DISPLAY N WITH NO ADVANCING
             DISPLAY ')=' WITH NO ADVANCING
             DISPLAY M
           END-PERFORM.
           STOP RUN.

       END PROGRAM FIBLOOP.

      *    FUNCTION FIB(N)
       IDENTIFICATION DIVISION.
       FUNCTION-ID. FIB.

       DATA DIVISION.
       LOCAL-STORAGE SECTION.
       01 A PIC 9(9).
       01 B PIC 9(9).
       01 N1 PIC 9(3).
       01 N2 PIC 9(3).

       LINKAGE SECTION.
       01 N PIC 9(3).
       01 RESULT PIC 9(9) COMP BASED.

       PROCEDURE DIVISION USING N RETURNING RESULT.
           IF N IS LESS OR EQUAL TO 2 THEN
               MOVE 1 TO RESULT
           ELSE
              SUBTRACT 1 FROM N GIVING N1
              SUBTRACT 2 FROM N GIVING N2
              COMPUTE A = FIB(N1)
              COMPUTE B = FIB(N2)
              ADD A TO B GIVING RESULT
           END-IF.
           GOBACK.

       END FUNCTION FIB.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cobc -xg fib.cob
$ ./fib
FIB(001)=        1
FIB(002)=        1
FIB(003)=        2
FIB(004)=        3
FIB(005)=        5
FIB(006)=        8
FIB(007)=       13
FIB(008)=       21
FIB(009)=       34
FIB(010)=       55
FIB(011)=       89
FIB(012)=      144
FIB(013)=      233
FIB(014)=      377
FIB(015)=      610
FIB(016)=      987
FIB(017)=     1597
FIB(018)=     2584
FIB(019)=     4181
FIB(020)=     6765
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a lot of weird stuff going on here. There's &lt;code&gt;ENVIRONMENT DIVISION&lt;/code&gt; listing which functions we're using. There's &lt;code&gt;LINKAGE SECTION&lt;/code&gt; for function's inputs and outputs.&lt;/p&gt;

&lt;p&gt;Basically 90% of this trivial program is ridiculous boilerplate which you need to get just right. I wanted to check a bunch of examples of COBOL code, and every example used different boilerplate, and none would work on GnuCOBOL without serious tweaking - even ones tagged as being specifically for GnuCOBOL. The whole language is far more of a dumpster fire than I expected. Fortran was not amazing, but at least you could see imagine actual humans coding Fortran. I have no idea what kind of subterranean reptilian creatures from the Hollow Earth COBOL was designed for, because it sure as hell wasn't designed for any kind of human beings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-cobol"&gt;
  &lt;/a&gt;
  Should you use COBOL?
&lt;/h3&gt;

&lt;p&gt;People knew COBOL was shit before Joe Biden was even born, so obviously no.&lt;/p&gt;

&lt;p&gt;It might very well be the absolute worst language reviewed so far. Even Befunge and Thue were more enjoyable to code in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-50-cobol"&gt;Code for the COBOL episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>cobol</category>
    </item>
    <item>
      <title>Built-In Angular Pipes -Part 4</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Sat, 08 Jan 2022 14:37:05 +0000</pubDate>
      <link>https://dev.to/this-is-angular/built-in-angular-pipes-part-4-3cg3</link>
      <guid>https://dev.to/this-is-angular/built-in-angular-pipes-part-4-3cg3</guid>
      <description>&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt;oday we will continue to learn the built in Angular pipes.&lt;br&gt;
Pipes covered in this post -&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JsonPipe&lt;/code&gt;&lt;br&gt;
&lt;code&gt;KeyValuePipe&lt;/code&gt;&lt;/p&gt;



&lt;p&gt;&lt;code&gt;JsonPipe&lt;/code&gt;&lt;br&gt;
This pipe is used to format a data into JSON-format representation.&lt;br&gt;
Mostly I use for debugging purpose.&lt;/p&gt;

&lt;p&gt;It is &lt;strong&gt;Exported from&lt;/strong&gt; the &lt;code&gt;CommonModule&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;{{ value_expression | json }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Its a simple pipe.&lt;br&gt;
Lets see the example. Our project folder -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dSzfnk_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odjgrmvusqitx5w3gxxa.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSzfnk_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odjgrmvusqitx5w3gxxa.PNG" alt="Image description" width="509" height="284"&gt;&lt;/a&gt;&lt;br&gt;
In the component.ts file lets write the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  jsonPipeData = {
    studentName: "John Doe",
    studentMarks: 423
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&amp;amp; in the html lets paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h2&amp;gt;JSON Pipe&amp;lt;/h2&amp;gt;
&amp;lt;h4&amp;gt;Without the pipe&amp;lt;/h4&amp;gt;
&amp;lt;p&amp;gt;{{jsonPipeData}}&amp;lt;/p&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;h4&amp;gt;With the pipe&amp;lt;/h4&amp;gt;
&amp;lt;p&amp;gt;{{jsonPipeData | json}}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, lets see the output -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFgreaoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uaqkxk7cunb0eodqcpdf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFgreaoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uaqkxk7cunb0eodqcpdf.PNG" alt="Image description" width="417" height="313"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can see without the pipe the output is &lt;code&gt;[object Object]&lt;/code&gt;&lt;br&gt;
It is not able to process the code. But after using the pipe we can view the correct data. &lt;br&gt;
So, you can use this pipe to verify the data coming in the component by displaying directly in the template.&lt;/p&gt;



&lt;p&gt;&lt;code&gt;KeyValuePipe&lt;/code&gt;&lt;br&gt;
This pipe is used to convert an Object or Map into an array of key value pair.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;{{ input_expression | keyvalue [ : compareFn ] }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is &lt;strong&gt;Exported from&lt;/strong&gt; &lt;code&gt;CommonModule&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parameters&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;compareFn&lt;/code&gt;&lt;br&gt;
If you want to provide a custom sorting function.&lt;br&gt;
It is Optional&lt;br&gt;
Default is the &lt;code&gt;defaultComparator&lt;/code&gt; which Angular provides to sort.&lt;/p&gt;

&lt;p&gt;Now lets see an example -&lt;br&gt;
So in the component.ts file lets add the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  obj = {
    'chair': '23',
    'banana': '3',
    'apple': '4',
  };


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note that we have put the first key as &lt;code&gt;chair&lt;/code&gt; and &lt;code&gt;apple&lt;/code&gt; at the end.&lt;/p&gt;

&lt;p&gt;Now lets paste the below code in the template file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;hr&amp;gt;

&amp;lt;h2&amp;gt;KeyValue Pipe&amp;lt;/h2&amp;gt;
{{ obj | keyvalue | json }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You would see the below output -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dnrp0ejk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iso7q2ojgp3zolpq1395.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dnrp0ejk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iso7q2ojgp3zolpq1395.PNG" alt="Image description" width="697" height="135"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here few important points to observe - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We have added one more pipe the &lt;code&gt;json pipe&lt;/code&gt; along with the &lt;code&gt;keyvalue&lt;/code&gt;. So we can chain multiple pipe at the same time. Output of the first pipe acts as the input to the second.&lt;/li&gt;
&lt;li&gt;In the output you can see the key &lt;code&gt;apple&lt;/code&gt; came at the beginning (it got sorted) while &lt;code&gt;chair&lt;/code&gt; at the end although the value provided was opposite.&lt;/li&gt;
&lt;li&gt;We received an array of key-value objects.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
We already saw a glimpse of sorting. The keyValue pipe use the &lt;code&gt;defaultComparator&lt;/code&gt; to sort the output values.&lt;br&gt;
Following ae the key points to note-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If the key is a number then it will sort in Ascending Order.&lt;/li&gt;
&lt;li&gt;If key is string then it will sort in alphabetic order.&lt;/li&gt;
&lt;li&gt;If key is of different type then it will get converted to string &lt;/li&gt;
&lt;li&gt;If key is null or undefined then it will be put at the very end.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Custom Sorting&lt;/strong&gt; Values using &lt;code&gt;compareFn&lt;/code&gt;&lt;br&gt;
Now lets write a custom function which will sort the list on its values. So paste in the below code in the component.ts file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; orderbyValueAsc = (a: KeyValue&amp;lt;string, string&amp;gt;, b:
 KeyValue&amp;lt;string, string&amp;gt;): number =&amp;gt; {
    return Number(a.value) &amp;lt; Number(b.value) ? -1 : 
(Number(a.value) &amp;gt; Number(b.value)) ? 0 : 1
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&amp;amp; in the template file we need to pass the compare function also -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{{ obj | keyvalue: orderbyValueAsc | json }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we write &lt;code&gt;: orderbyValueAsc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The output in the browser you will see -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--US3dVN6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5g5xhl0lt5fmn52x1t6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--US3dVN6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5g5xhl0lt5fmn52x1t6.PNG" alt="Image description" width="674" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There can be a scenario where you want to keep the original value. In that case we can write the below function in the component ts file -&lt;br&gt;
&lt;code&gt;keepOriginal(a: any, b: any) {&lt;br&gt;
    return a;&lt;br&gt;
  }&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That's all for now. I will be discussing on the remaining pipes in the coming posts. So stay tuned.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the post.&lt;br&gt;
If yes do like share and comment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;u&gt;Happy Coding&lt;/u&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Daily JavaScript Tips #1</title>
      <author>SnowBit</author>
      <pubDate>Sat, 08 Jan 2022 14:12:07 +0000</pubDate>
      <link>https://dev.to/codewithsnowbit/daily-javascript-tips-1-3a9l</link>
      <guid>https://dev.to/codewithsnowbit/daily-javascript-tips-1-3a9l</guid>
      <description>&lt;p&gt;&lt;strong&gt;Pass arguments as an object.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The code becomes much more clear and easily understandable as the name of the properties is clearly visible to you as well any code reviewer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-do-this"&gt;
  &lt;/a&gt;
  Don't do this ❌
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;proUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Logic goes here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SnowBit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xyz@someemail.zyx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#do-this"&gt;
  &lt;/a&gt;
  Do this ✅
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;proUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isAdmin&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Logic goes here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SnowBit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xyz@someemail.zyx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;proUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isAdmin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Thank you for reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow me on Twitter - &lt;a href="https://twitter.com/codewithsnowbit"&gt;@codewithsnowbit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Subscribe me on YouTube - &lt;a href="https://www.youtube.com/channel/UCNTKqF1vhFYX_v0ERnUa1RQ?view_as=subscriber&amp;amp;sub_confirmation=1"&gt;Code With SnowBit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
