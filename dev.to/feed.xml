<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Stop fixing Numbers - RTL in a web platform (6/6)</title>
      <author>Pedro Figueiredo</author>
      <pubDate>Tue, 31 Aug 2021 21:39:40 +0000</pubDate>
      <link>https://dev.to/pffigueiredo/stop-fixing-numbers-rtl-in-a-web-platform-6-6-29ne</link>
      <guid>https://dev.to/pffigueiredo/stop-fixing-numbers-rtl-in-a-web-platform-6-6-29ne</guid>
      <description>&lt;p&gt;&lt;em&gt;This post is the 6th and final part of a 6 part series, on how to build a RTL compatible web platform, take a look at the previous one &lt;a href="https://dev.to/pffigueiredo/accesible-carousel-rtl-in-a-web-platform-5-6-1jk9"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#numbers-are-already-fine"&gt;
  &lt;/a&gt;
  Numbers are already fine
&lt;/h2&gt;

&lt;p&gt;As you might know, the numbers we use in today's world, are &lt;strong&gt;original from Arabic languages&lt;/strong&gt; and commonly called &lt;em&gt;Arabic numerals&lt;/em&gt;. And as the name suggest, these are the same numbers used by the Arabic language and as consequence, by most of the other RTL languages.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-are-they-read-in-the-same-way"&gt;
  &lt;/a&gt;
  But are they read in the same way?
&lt;/h3&gt;

&lt;p&gt;This was my first question, when I switched the document's direction to RTL and started to see phone numbers like &lt;code&gt;965 2221 6656&lt;/code&gt; becoming &lt;code&gt;6656 2221 965&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1SIQ15Rf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4x5swa4lvaajgtz624yr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SIQ15Rf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4x5swa4lvaajgtz624yr.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This didn't look right, and after some digging, I found out that numbers are different from words in RTL languages, and these &lt;strong&gt;are actually read from a LTR manner&lt;/strong&gt; (as we do in english). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fixing-numbers"&gt;
  &lt;/a&gt;
  Fixing numbers
&lt;/h3&gt;

&lt;p&gt;After knowing that numbers are actually read the same way in in both RTL and LTR, one needs to take the following actions:&lt;/p&gt;

&lt;p&gt;1- Keep track of all the numbers within your platform;&lt;br&gt;
2- Isolate these numbers into separate components/html tags;&lt;br&gt;
3- Add &lt;code&gt;direction: ltr&lt;/code&gt; to those isolated numbers;&lt;/p&gt;

&lt;p&gt;After completing the tasks above, it doesn't really matter what's the document's defined direction, as it will be overridden and make numbers always look the same.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ftkpEfyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br8ddodfzwkhux81z12q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftkpEfyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br8ddodfzwkhux81z12q.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#text-inputs"&gt;
  &lt;/a&gt;
  Text Inputs
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;I'm referring to &lt;strong&gt;text inputs&lt;/strong&gt; as all the inputs with the type of &lt;code&gt;text&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Text inputs usually serve to one thing only: taking text input from the users. But due to higher UX standards brought by the later years of the web ecosystem, that's not always true.&lt;/p&gt;

&lt;p&gt;I'm talking about text inputs that take numbers for the most part, but have a few &lt;code&gt;symbols&lt;/code&gt; or  &lt;code&gt;spaces&lt;/code&gt; in-between to give the users hints on how to fill in the field.&lt;/p&gt;

&lt;p&gt;Some obvious examples are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Credit card number inputs =&amp;gt; xxxx xxxx xxxx xxxx;&lt;/li&gt;
&lt;li&gt;Date inputs =&amp;gt; MM/YY&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#the-problem-with-text-inputs"&gt;
  &lt;/a&gt;
  The problem with text inputs
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ktt9thws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AadNlbuUMVAOzhgezkC-0_Q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ktt9thws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AadNlbuUMVAOzhgezkC-0_Q.gif" alt="Gif of text input with numbers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the gif above, we can check that something &lt;strong&gt;seems awfully wrong&lt;/strong&gt; with the credit card number input. As I was actually trying to type "4111 2341 2312 3123", the numbers were being left behind. And that's simply because as we stated above, numbers should be kept always in the LTR direction. &lt;/p&gt;

&lt;p&gt;Unfortunately &lt;strong&gt;changing the direction here is a mistake&lt;/strong&gt; and will not solve our problems, as it would make the numbers to be written from the left side of the input, and we don't want that.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lefttoright-mark-to-the-rescue"&gt;
  &lt;/a&gt;
  Left-to-Right mark to the rescue
&lt;/h3&gt;

&lt;p&gt;Luckily there is one &lt;strong&gt;invisible unicode&lt;/strong&gt; called &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H34.html"&gt;left-to-right mark&lt;/a&gt; that will turn any piece of text into Left-to-Right, doesn't really matter what's the defined direction. &lt;/p&gt;

&lt;p&gt;This mark was literally created to &lt;strong&gt;force the the LTR direction&lt;/strong&gt; of any given text, as stated in docs bellow.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The objective of this technique is to use Unicode left-to-right mark to override the HTML bidirectional algorithm when it produces undesirable results.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;In more practical terms, to fix text inputs, all you need is to append this left-to-right mark to the start of the text input value.&lt;/p&gt;

&lt;p&gt;Something like this code sample, should do the trick 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// marks the input with LTR &lt;/span&gt;
&lt;span class="c1"&gt;// despite the specified direction&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LEFT_TO_RIGHT_MARK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;‎&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;u200e&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;InputLTR&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;cardNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCardNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onInputChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newCardNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LEFT_TO_RIGHT_MARK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setCardNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newCardNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cardNumber&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;LEFT_TO_RIGHT_MARK&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;cardNumber&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onInputChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;1- &lt;strong&gt;Look for any numbers&lt;/strong&gt; that you are showing in your web platform, and check if they are being presented in the correct way for both RTL and LTR.&lt;/p&gt;

&lt;p&gt;2- If you have any inputs of type &lt;code&gt;text&lt;/code&gt; or &lt;code&gt;tel&lt;/code&gt; that will exclusively accept numbers, make sure to append the left-to-right mark to their value.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Make sure to follow me on &lt;a href="https://twitter.com/P_FFigueiredo"&gt;twitter&lt;/a&gt;, as I will keep posting good content on how to keep an accessible web platform !&lt;/em&gt; 🙏&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>a11y</category>
      <category>react</category>
    </item>
    <item>
      <title>How I keep up with the latest Front-End Development news, without scrolling my life away</title>
      <author>Rach Smith</author>
      <pubDate>Tue, 31 Aug 2021 20:52:00 +0000</pubDate>
      <link>https://dev.to/rachsmith/how-i-keep-up-with-the-latest-front-end-development-news-without-scrolling-my-life-away-58a6</link>
      <guid>https://dev.to/rachsmith/how-i-keep-up-with-the-latest-front-end-development-news-without-scrolling-my-life-away-58a6</guid>
      <description>&lt;p&gt;There are very few things I missed when I quit spending time on Twitter, but one of them was keeping up with the latest news and links from the JavaScript/Front-End world.&lt;/p&gt;

&lt;p&gt;Thankfully, I found the answer to staying up to date on the latest &lt;em&gt;without&lt;/em&gt; having to scroll my life away: email newsletters.&lt;/p&gt;

&lt;p&gt;There are multiple really great newsletters that round up all the posts and library news for the week and create a convenient list for you.&lt;/p&gt;

&lt;p&gt;Here's my workflow: I open the email, scan the list, save the links that look interesting to me in my &lt;a href="https://instapaper.com"&gt;Instapaper&lt;/a&gt;, and delete the email. Later, when I have time to read, I go ahead and read the saved articles in Instapaper.&lt;/p&gt;

&lt;p&gt;I find this the most efficient way to stay on top of what's happening in the community without having to expose myself to threads of dev thinkbois fighting about who's opinion is more problematic.&lt;/p&gt;

&lt;p&gt;Here is a list of the newsletters I am subscribed to at the moment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://javascriptweekly.com/"&gt;JavaScript Weekly&lt;/a&gt; - latest news and interesting blog posts about JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://frontendfoc.us/"&gt;Frontend Focus&lt;/a&gt; - articles and links to tools for anything Front-End.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://react.statuscode.com/"&gt;React Status&lt;/a&gt; - React news and links.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://a11yweekly.com/"&gt;A11y Weekly&lt;/a&gt; - News, articles and resources on Web Accessibility.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.getrevue.co/profile/codewithveni/"&gt;Diversify Tech: Spotlight&lt;/a&gt; - Resources and articles across tech.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://heydesigner.com/newsletter/"&gt;HeyDesigner Weekly Digest&lt;/a&gt; - Design and Front-End tools, resources and opinions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>resources</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Hosting Python Packages in Azure DevOps</title>
      <author>Vivek0712</author>
      <pubDate>Tue, 31 Aug 2021 20:31:31 +0000</pubDate>
      <link>https://dev.to/vivek0712/hosting-python-packages-in-azure-devops-1foo</link>
      <guid>https://dev.to/vivek0712/hosting-python-packages-in-azure-devops-1foo</guid>
      <description>&lt;p&gt;The blog is about how to build some custom python libraries and store them as private artifacts in the Azure DevOps using Pipelines. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;Working as a Data Scientist and Cloud Solutions Architect in my startup &lt;a href="https://nexstem.ai"&gt;CortexBCI&lt;/a&gt;, I had the responsibility to host and publish our Wisdom PythonSDK for Brain Controlled Interface application development. This was the first motivation for me to write the blog to simplify the process of hosting python packages in Azure DevOps for other developers. I read through several documentations and blogs for the same but the one which helped me a lot was the blog written by &lt;a href="https://www.linkedin.com/in/heraldgjura/"&gt;Herald Gjura&lt;/a&gt;, App Dev Manager, Microsoft. The blog I have written is heavily inspired from him. I have adopted VSCode as my primary IDE for coding and also new changes in Azure DevOps version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-azure-devops"&gt;
  &lt;/a&gt;
  Introduction to Azure DevOps
&lt;/h2&gt;

&lt;p&gt;Azure DevOps provides developer services for support teams to plan work, collaborate on code development, and build and deploy applications. Azure DevOps supports a culture and set of processes that bring developers and project managers and contributors together to complete software development. It allows organizations to create and improve products at a faster pace than they can with traditional software development approaches.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#services-in-azure-devops"&gt;
  &lt;/a&gt;
  Services in Azure DevOps
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TLenacpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xt82prx97y2994wtu7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TLenacpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xt82prx97y2994wtu7h.png" alt="DevOps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-azure-devops"&gt;
  &lt;/a&gt;
  Setting up Azure DevOps
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create a project in Azure DevOps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kqtYmbIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6riuwgs1esbw14gn3ph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kqtYmbIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6riuwgs1esbw14gn3ph.png" alt="project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a repo for Python Package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use any version control and code-hosting services like GitHub or simply create a repo in Azure Repos in DevOps Project we had created. In my case, I am going to create a repo in GitHub&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WAGBUdk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1au3wyyycyy8ptmxdkl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WAGBUdk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1au3wyyycyy8ptmxdkl.png" alt="Repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-python-local-environment"&gt;
  &lt;/a&gt;
  Setting up Python (local) environment
&lt;/h2&gt;

&lt;p&gt;Open your favourite IDE (I prefer VSCode)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a local directory for python package&lt;/li&gt;
&lt;li&gt;Create a Python Virtual Environment
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; devopsenv &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt;  ./devopsvenv/bin/activate

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Clone your repo
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone &amp;lt;your git repo.git&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install required python packages

&lt;ul&gt;
&lt;li&gt;pytest&lt;/li&gt;
&lt;li&gt;wheel&lt;/li&gt;
&lt;li&gt;twine&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#coding-and-testing-your-python-packages"&gt;
  &lt;/a&gt;
  Coding and Testing your Python Packages
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#coding-python-packages"&gt;
  &lt;/a&gt;
  Coding Python Packages
&lt;/h3&gt;

&lt;p&gt;Packages in Python are any set of folders, and subfolders, that have an &lt;strong&gt;init&lt;/strong&gt;.py file in it (each folder or subfolder needs to have an &lt;strong&gt;init&lt;/strong&gt;.py file, even an empty one).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Select a name for your top python package&lt;br&gt;
Chose a meaningful, but short (best a one-word). I am to create a python package called "animalsounds"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now we can create subpackages. I am going to create different animals as its subpackages (for example dog, cat etc). Its functionality can be retrieved as animalsounds.dog.. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create &lt;strong&gt;init&lt;/strong&gt;.py file for each subpackage. You can write you functions directly in the &lt;strong&gt;init&lt;/strong&gt;.py file. However, I prefer to write them in separate files and group them by functionality. So create functions.py under each subpackage and write the methods under it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e2K2Aw6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlth0k80arkw6nd60jy0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e2K2Aw6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlth0k80arkw6nd60jy0.png" alt="dir"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside each __init__.py, write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.functions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Under dog/functions.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makesound&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Woof! Woof!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Under cat/functions.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makesound&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Meow! Meow!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing-python-packages"&gt;
  &lt;/a&gt;
  Testing Python Packages
&lt;/h3&gt;

&lt;p&gt;At the package level &lt;em&gt;animalsounds&lt;/em&gt;, add a new folder called tests. In that folder add an empty &lt;strong&gt;init&lt;/strong&gt;.py file.&lt;/p&gt;

&lt;p&gt;In the tests folder, add a python file called, test_ functions.py. Note: it is very important to prefix all your test files with “test_”, it will be used by the CI framework to identify the unit test files it needs to run.&lt;/p&gt;

&lt;p&gt;Inside the test_functions.py file add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;animalsounds.dog&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;animalsounds.cat&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_doghi&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;dogres&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makesound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dogres&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_cathi&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;catres&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makesound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;catres&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the unit tests, use the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; pytest &amp;lt;Path to &lt;span class="nb"&gt;test &lt;/span&gt;folder&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-ready-to-deploy-the-python-package"&gt;
  &lt;/a&gt;
  Getting ready to deploy the Python package
&lt;/h2&gt;

&lt;p&gt;There are a few additional files we will need to add. At the root (application level) add the following files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LICENSE.txt – You can create while creating the repo in GitHub&lt;/li&gt;
&lt;li&gt;README.md – To describe the package&lt;/li&gt;
&lt;li&gt;MANIFEST.in – This is a file used by the packager to include or exclude files. Now create the file, and add the following to it:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;include README.md LICENSE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;setup.cfg – Another file used by the packager. Create the file and add the following as text:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[metadata]
license_files = LICENSE

[bdist_wheel]
universal=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;.pypirc – This is an important file. Leave this file empty for now. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;requirements.txt – In this file we will add all the packages that needs to be installed prior to our package, or that our package is dependent on. Add the following:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip
pytest
wheel
twine
setuptools
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;setup.py – This is the file where the setup for the package creation goes here. Refer &lt;a href="https://packaging.python.org/guides/making-a-pypi-friendly-readme/"&gt;this&lt;/a&gt; for more details
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'README.md'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'animalsounds'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="c1"&gt;# How you named your package folder (TSIClient)
&lt;/span&gt;  &lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'animalsounds'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;   &lt;span class="c1"&gt;# Chose the same as "name"
&lt;/span&gt;  &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'1.0.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="c1"&gt;# Start with a small number and increase it with every change you make
&lt;/span&gt;  &lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'MIT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c1"&gt;# Chose a license from here: https://help.github.com/articles/licensing-a-repository
&lt;/span&gt;  &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;long_description_content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'text/markdown'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# This is important!
&lt;/span&gt;  &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Vivek Raja P S'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                   &lt;span class="c1"&gt;# Type in your name
&lt;/span&gt;  &lt;span class="n"&gt;author_email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'vivekraja98@gmail.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="c1"&gt;# Type in your E-Mail
&lt;/span&gt;  &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://github.com/Vivek0712/azure-devops-pypackage'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;# Provide either the link to your github or to your website
&lt;/span&gt;  &lt;span class="c1"&gt;#download_url = 'https://github.com/RaaLabs/TSIClient/archive/v_0.7.tar.gz',    # If you create releases through Github, then this is important
&lt;/span&gt;  &lt;span class="n"&gt;keywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Azure'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'DevOps'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Python'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;   &lt;span class="c1"&gt;# Keywords that define your package best
&lt;/span&gt;  &lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="n"&gt;classifiers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'Development Status :: 3 - Alpha'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="c1"&gt;# Chose either "3 - Alpha", "4 - Beta" or "5 - Production/Stable" as the current state of your package
&lt;/span&gt;    &lt;span class="s"&gt;'Intended Audience :: Developers'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="c1"&gt;# Define that your audience are developers
&lt;/span&gt;    &lt;span class="s"&gt;'Topic :: Software Development :: Build Tools'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'License :: OSI Approved :: MIT License'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;# Again, pick a license
&lt;/span&gt;    &lt;span class="s"&gt;'Programming Language :: Python :: 3.5'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Programming Language :: Python :: 3.6'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Programming Language :: Python :: 3.9'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final project structure should look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sLp6_e8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ropnbyxphopla6boiyq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sLp6_e8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ropnbyxphopla6boiyq5.png" alt="structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finalizing-azure-devops-pipeline-and-feed"&gt;
  &lt;/a&gt;
  Finalizing Azure DevOps pipeline and feed
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-new-artifact-feed"&gt;
  &lt;/a&gt;
  Creating a new Artifact Feed
&lt;/h3&gt;

&lt;p&gt;Let's start with creating a new feed for our pipeline. Go to Azure DevOps &amp;gt; Artifacts &amp;gt; Create New feed. Give a suitable name and keep a note of the same as we gonna need it later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gUwyl9yT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp2pke49g4tiq1n9ow3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gUwyl9yT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp2pke49g4tiq1n9ow3h.png" alt="feed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-pipeline-for-artifact-creation"&gt;
  &lt;/a&gt;
  Creating Pipeline for Artifact creation
&lt;/h3&gt;

&lt;p&gt;Under Pipelines -&amp;gt; Create a new pipeline. We need to set up for configuration of pipeline which is a 4 step process.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Connect - Connect to your code repository hosting service&lt;/li&gt;
&lt;li&gt;Select - Select the Package repo&lt;/li&gt;
&lt;li&gt;Configure - Create the yml file&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Review - Review if all the configurations are made properly.&lt;br&gt;
And finally Run the pipeline.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connect&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The python package which I am planning to host is in my GitHub. So I am going to connect my GitHub with Azure DevOps and authorise the same.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ueBIfVNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obs67rq4qohoqptony4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ueBIfVNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obs67rq4qohoqptony4r.png" alt="connect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The required repository is selected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---h8rNbhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2juj2zayy181fg9jtydi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---h8rNbhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2juj2zayy181fg9jtydi.png" alt="repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Configure&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Under Configure tab, select Starter pipeline and then In the Azure Pipelines, use the yml script given &lt;a href="https://github.com/Vivek0712/azure-devops-pypackage/blob/main/azure-pipelines.yml"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Review&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Review and Run the pipeline. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wc7WY017--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4fm6xft9iphyqjxiput.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wc7WY017--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4fm6xft9iphyqjxiput.png" alt="Pipeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--thftfQkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mogqzs37b7cfi4lf6za.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thftfQkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mogqzs37b7cfi4lf6za.png" alt="run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-release-pipeline"&gt;
  &lt;/a&gt;
  Setting up release Pipeline
&lt;/h2&gt;

&lt;p&gt;Once the pipeline is run, it creates a Dist folder in the code repo which has the artifact. &lt;/p&gt;

&lt;p&gt;To set up a release pipeline to release the artifact we had just created, go to Azure DevOps &amp;gt; Pipelines &amp;gt; Release Pipelines &amp;gt; Create New Release Pipeline.&lt;/p&gt;

&lt;p&gt;Start with an empty template. &lt;/p&gt;

&lt;p&gt;A release pipeline takes an artifact and runs through several stages to publish the artifact as per the pipeline configuration.&lt;/p&gt;

&lt;p&gt;To publish the python package, we are going to select the Build Pipeline artifact and create a stage with one jobs with three tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#selecting-the-artifact-source"&gt;
  &lt;/a&gt;
  Selecting the Artifact source
&lt;/h3&gt;

&lt;p&gt;Select the pipeline which we had created before as the source of artifact. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xprOfFw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prtw6hxlgo6l6v7qch36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xprOfFw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prtw6hxlgo6l6v7qch36.png" alt="artifact"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pipeline-stage"&gt;
  &lt;/a&gt;
  Pipeline Stage
&lt;/h3&gt;

&lt;p&gt;Click on the stage and give a suitable name for the same. Click on Jobs and then we are going to create three tasks here. Add Agent Job.&lt;/p&gt;

&lt;p&gt;Task 1: Twine Authenticate &lt;/p&gt;

&lt;p&gt;Search for Twine Authenticate on the right side and add the same.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W0p_UPat--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drwp24ydyzw2gu9r6wie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W0p_UPat--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drwp24ydyzw2gu9r6wie.png" alt="twine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Task 2: Install Twine&lt;/p&gt;

&lt;p&gt;Search for Command line and add it. Name the command script as &lt;em&gt;Install Twine&lt;/em&gt; and add the following to the script&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;twine
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bN8-_vxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxfhycvdirntnxqdv3ag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bN8-_vxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxfhycvdirntnxqdv3ag.png" alt="job2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Task 3: &lt;/p&gt;

&lt;p&gt;Search for Command line and add it. Name the command script as &lt;em&gt;Publish Artifact&lt;/em&gt; and add the following to the script. Replace &lt;em&gt;&lt;/em&gt; with the name of the artifact feed which we had created first and &lt;em&gt;&lt;/em&gt; with the pipeline name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;twine upload &lt;span class="nt"&gt;-r&lt;/span&gt; &amp;lt;Artifact Feed Name&amp;gt; &lt;span class="nt"&gt;--config-file&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;PYPIRC_PATH&lt;span class="si"&gt;)&lt;/span&gt; d:&lt;span class="se"&gt;\a\r&lt;/span&gt;1&lt;span class="se"&gt;\a\&amp;lt;&lt;/span&gt;Build Pipeline Name&amp;gt;&lt;span class="se"&gt;\d&lt;/span&gt;ist&lt;span class="se"&gt;\d&lt;/span&gt;ist&lt;span class="se"&gt;\*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L9RwvJAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onrih7xi58uhdoekqsz5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9RwvJAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onrih7xi58uhdoekqsz5.png" alt="job3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once your release pipeline is ready, save it and Run the release pipeline. It may take a couple of minutes to run. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MDcaFxQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucg34v4ds0hnutn5em7p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MDcaFxQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucg34v4ds0hnutn5em7p.png" alt="release"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the release pipeline is successfully run, we can see the published artifact in the Artifact.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--csa7CjxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6wv7vg19xgwv97p98so.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--csa7CjxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6wv7vg19xgwv97p98so.png" alt="published"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-python-package"&gt;
  &lt;/a&gt;
  Using the Python Package
&lt;/h2&gt;

&lt;p&gt;Now that our python package is published, we will see how to use it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-personal-token"&gt;
  &lt;/a&gt;
  Create a personal token
&lt;/h3&gt;

&lt;p&gt;On the right top corner, click your account and create a personal token. This token is assured that the package is only accessed by authorised personals since it is private to the organisation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-to-feed"&gt;
  &lt;/a&gt;
  Connect to Feed
&lt;/h3&gt;

&lt;p&gt;Once the personal token is generated, go to the Artifact and click on the our python package artifact. Click connect to feed and choose either Twine or PyPI as publisher for the same. Follow the steps given there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-the-python-package"&gt;
  &lt;/a&gt;
  Install the python package
&lt;/h3&gt;

&lt;p&gt;Once the steps are followed, with access token and the feed is connected, you will be able to install and access the python package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JJtQ59K---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l51m9ggn5ualkpg3nsze.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JJtQ59K---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l51m9ggn5ualkpg3nsze.png" alt="install"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations, you have hosted your custom Python package in Azure DevOps. If you reached at the end of the article, do follow, share the article. &lt;/p&gt;

&lt;p&gt;Also, do check out my session on "Hosting Python packages in Azure DevOps" at Microsoft Reactor&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kd9mAJ6z51w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>azure</category>
      <category>devops</category>
      <category>python</category>
      <category>microsoft</category>
    </item>
    <item>
      <title>Got a favorite DEV plugin or accompanying app?</title>
      <author>Michael Tharrington (he/him)</author>
      <pubDate>Tue, 31 Aug 2021 20:14:04 +0000</pubDate>
      <link>https://dev.to/michaeltharrington/got-a-favorite-dev-plugin-or-accompanying-app-2nfm</link>
      <guid>https://dev.to/michaeltharrington/got-a-favorite-dev-plugin-or-accompanying-app-2nfm</guid>
      <description>&lt;p&gt;I recently rediscovered the post "Generate Cover Image For Your Dev Posts Easily" by &lt;a class="mentioned-user" href="https://dev.to/pjijin"&gt;@pjijin&lt;/a&gt;
 : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pjijin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wnAWw_-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0fj5tmcf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/144556/84b70967-8e1e-4c6e-af8a-928a6f9e8c90.jpeg" alt="pjijin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pjijin/generate-cover-image-for-your-dev-posts-easily-27co" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Generate Cover Image For Your Dev Posts Easily&lt;/h2&gt;
      &lt;h3&gt;Jijin P  👨‍💻🦄 ・ Aug 14 '19 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;You can find the full app &lt;a href="https://github.com/PJijin/Cover-Image-Generator"&gt;here on GitHub&lt;/a&gt; or &lt;a href="https://blogcover.vercel.app/"&gt;use it right here&lt;/a&gt;... and it reminded that there are quite a few folks out there creating cool plugins and/or accompanying apps to DEV.&lt;/p&gt;

&lt;p&gt;Got any favorites?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>meta</category>
    </item>
    <item>
      <title>Do desenvolvimento à liderança - O que mudou?</title>
      <author>Monique Altero</author>
      <pubDate>Tue, 31 Aug 2021 20:07:07 +0000</pubDate>
      <link>https://dev.to/moniquealtero/do-desenvolvimento-a-lideranca-o-que-mudou-35k5</link>
      <guid>https://dev.to/moniquealtero/do-desenvolvimento-a-lideranca-o-que-mudou-35k5</guid>
      <description>&lt;p&gt;Há pouco mais de três meses eu fui promovida à líder técnica na empresa que eu trabalho e apesar de um novo cargo minha rotina não mudou completamente da água pro vinho visto que eu já acompanhava meu antigo líder, fazia &lt;em&gt;code review&lt;/em&gt; com afinco e ajudava os outros membros da equipe a resolverem impedimentos. Contudo, nessa transição que ainda estou vivendo existem muitos pontos a serem trabalhados e refletidos, afinal o que mudou?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-falsa-sensa%C3%A7%C3%A3o-da-perda-de-produtividade"&gt;
  &lt;/a&gt;
  A falsa sensação da perda de produtividade
&lt;/h2&gt;

&lt;p&gt;Usamos uma expressão aqui em casa que chamamos carinhosamente de “matar o &lt;em&gt;backlog&lt;/em&gt;”, que literalmente significa desenvolver as tarefas propostas em um curto intervalo de tempo, com certa voracidade. Bom, lá estava eu acostumada a "matar o &lt;em&gt;backlog&lt;/em&gt;" e de repente .. &lt;em&gt;pá&lt;/em&gt;! Fui totalmente golpeada. Eu me vi numa infinita agenda de reuniões, com muitas interrupções no meu dia e sem ter minhas amadas "entregas concretas", digamos assim… Confesso que aquilo me atingiu em cheio visto que eu tinha uma visão muito idealizada do que seria liderar uma equipe, acreditava que minha rotina seria reuniões de melhorias do produto, encontrar pontos de débito técnico e mentorar minha equipe, tudo isso com um cronograma impecável. Bom, não precisa me contar que a rotina não é bem assim pois tomei a pílula da realidade já.&lt;/p&gt;

&lt;p&gt;Logo no final do primeiro mês eu conversei com o gerente da área falando exatamente sobre essa sensação de não ser produtiva e eficiente como costumava ser e juro que ele riu e disse exatamente &lt;em&gt;"Bem vinda à gestão!"&lt;/em&gt;. Reconheço que este é um ponto bem difícil pra mim pois ter cronogramas estabelecidos e seguir planejamentos é uma das coisas que mais me deixa confortável. Pra minha alegria, no último mês tenho conseguido manter uma boa rotina e com certo nível de organização que me deixa feliz. E não podemos esquecer: gestão é comunicação,  como um gestor você precisa ter tempo para se comunicar e ouvir as pessoas independentemente do seu cronograma.&lt;/p&gt;

&lt;p&gt;Desde então tenho feito um trabalho interno de reflexão, tentando entender que produtividade na gestão não é vista imediatamente como eu costumava ver cumprindo minhas tarefas como desenvolvedora, o caminho agora é diferente, são &lt;em&gt;baby steps&lt;/em&gt; diariamente para ver no futuro como pude ajudar minha equipe a crescer e o produto que trabalhamos a melhorar.  É  também sobre conhecer um pouco mais sobre cada um a cada dia e entender a maneira como eles se desenvolvem. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aprender-a-delegar-%C3%A9-tudo"&gt;
  &lt;/a&gt;
  Aprender a delegar é tudo
&lt;/h2&gt;

&lt;p&gt;Sei que pode parecer um pouquinho arrogante da minha parte mas eu era uma excelente desenvolvedora, entregava as demandas antes do prazo, tinha um bom nível técnico e atuava como suporte ao meu líder junto a equipe com atividades de revisão e até mesmo entendimento de demandas. Ótimo, né? Bom, nem tanto, pois essas qualidades me levaram a cometer um dos meus primeiros erros, o qual eu queria ter responsabilidade sobre tudo, sobre as demandas da &lt;em&gt;sprint&lt;/em&gt;, sobre o desenvolvimento, sobre &lt;em&gt;deploy&lt;/em&gt;, sobre a gestão... não preciso dizer que estava fazendo tudo pela metade e me exaustando completamente, né? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Multitasking&lt;/em&gt; é péssimo e eu tinha que aprender a confiar e delegar.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sou realizada em dizer que aprendi essa lição valiosa e que hoje eu sou capaz de delegar tarefas aos meus membros de equipe. Eu os ajudo no que precisam mas sem monopolizar o desenvolvimento (o que é muito importante!) e o mais valioso é me permitir deixá-los errar e aprender no processo, pois sei que para torná-los mais experientes e independentes essas são etapas necessárias. Deixo claro que não abri mão de qualidade técnica e nem da entrega nesse processo, mas compreendi a jornada de trabalho que desenvolvedores menos experientes têm ao executar uma tarefa que pode parecer desafiadora para eles e todo esse esforço é levado em consideração ao delegar tarefas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#liderar-pelo-exemplo"&gt;
  &lt;/a&gt;
  Liderar pelo exemplo
&lt;/h2&gt;

&lt;p&gt;Sei que pode parecer que tenho autoridade para de certa forma "exigir" algumas coisas da minha equipe, mas esse é o último recurso que uso, como líder técnica, na qual habilidades técnicas ainda estão muito presentes no trabalho, tento ser ao máximo um exemplo de boas práticas, motivação e atitude profissional para minha equipe. É de meu conhecimento também que compartilhar meus conhecimentos e opiniões com a equipe, sejam eles técnicos, pessoais ou até mesmo regras sobre o projeto em que trabalhamos, eles irão mais longe a cada entrega e suas respectivas caminhadas serão um pouquinho mais fácil todos os dias. De longe essa tem sido a lição que mais me deixa feliz: compartilhar. Amo compartilhar com minha equipe minhas dores e anseios a fim de que eles compartilhem as deles comigo, seja compartilhar as coisas que mais gostam de fazer no dia-a-dia ou o que menos gostam mas fazem mesmo assim. É importante pra mim saber se eles tem algum problema pessoal ou se estão com alguma falta de recurso, técnica ou psíquica, assim consigo ser empática e ajudá-los da forma que me couber ou direcionar a um caminho mais feliz.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Mentorar, tomar decisões, guiar pessoas e escutá-las, sendo  uma pessoa paciente e empática que entende que pessoas estão acima de processos.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Liderar é isso e é bem trabalhoso, mas te juro que vale a pena.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>management</category>
      <category>growing</category>
      <category>lead</category>
      <category>team</category>
    </item>
    <item>
      <title>Taking Marko's Tags API for a Test Drive</title>
      <author>Ryan Carniato</author>
      <pubDate>Tue, 31 Aug 2021 19:27:23 +0000</pubDate>
      <link>https://dev.to/ryansolid/taking-marko-s-tags-api-for-a-test-drive-2n6i</link>
      <guid>https://dev.to/ryansolid/taking-marko-s-tags-api-for-a-test-drive-2n6i</guid>
      <description>&lt;p&gt;&lt;a href="https://www.markojs.com"&gt;Marko&lt;/a&gt; recently released a &lt;a href="https://dev.to/ryansolid/introducing-the-marko-tags-api-preview-37o4"&gt;preview for its upcoming Tags API&lt;/a&gt;. This is pretty exciting as it adds a minimal API layer over &lt;a href="https://www.markojs.com"&gt;Marko&lt;/a&gt;'s state management that allows us to express complicated ideas in a more terse way than ever before.&lt;/p&gt;

&lt;p&gt;So what's a good place to start. Well, I looked at Marko's TodoMVC example and decided it needed sprucing up. So this simple list managing example feels like the perfect place to get started and introduce this new approach.&lt;/p&gt;

&lt;p&gt;In this article, we will build a TodoMVC application using Marko's Tags API. So let's get started.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#setting-up-our-project"&gt;
  &lt;/a&gt;
  Setting up our project
&lt;/h1&gt;

&lt;p&gt;It's easy to get set up with a new Marko project using the Tags API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm init marko &lt;span class="nt"&gt;--template&lt;/span&gt; tags-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It prompts us to name the project and gives instructions to get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sjaD8-QW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gew8qebtpah1lskulai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sjaD8-QW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gew8qebtpah1lskulai.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, let's open our project in our code editor. I am using VSCode. And we see a simple folder structure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M8-aqZuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35u6kl5a0izy45greorl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M8-aqZuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35u6kl5a0izy45greorl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to keep this folder structure for our TodoMVC app but we will be replacing all the code. Before that, if you want to run &lt;code&gt;npm run dev&lt;/code&gt; to see this example open in your browser.&lt;/p&gt;

&lt;p&gt;Remove all the files under the &lt;code&gt;src/pages&lt;/code&gt; and &lt;code&gt;src/components&lt;/code&gt; folders and then we are good to get started with a clean slate.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#building-our-page"&gt;
  &lt;/a&gt;
  Building our Page
&lt;/h1&gt;

&lt;p&gt;Marko is a Multi-Page Framework but TodoMVC is a simple single-page example. We won't worry too much about that since our starter project here will take care of all the details. So we start the same as any application and our index page. Create a &lt;code&gt;index.marko&lt;/code&gt; file under your &lt;code&gt;src/pages&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Let's add some markup to it. &lt;code&gt;.marko&lt;/code&gt; files are basically HTML documents so to start we just add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype HTML&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Marko TodoMVC"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Marko - TodoMVC&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there we have a working app. Just run &lt;code&gt;npm run dev&lt;/code&gt; and you should see a blank page with a title. You could add as much markup you want to this page. But let's add our first components.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#creating-a-store"&gt;
  &lt;/a&gt;
  Creating a Store
&lt;/h1&gt;

&lt;p&gt;TodoMVC is driven off a central store very much in line with Model View Controller from which it gets its name. In our case, Marko isn't an MVC framework but it still makes it easiest to abstract our logic into a template that we will use as a data store.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;TodoStore.marko&lt;/code&gt; under components folder and copy in this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;let&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;nextId=&lt;/span&gt;&lt;span class="s"&gt;1/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;let&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;todos=&lt;/span&gt;&lt;span class="s"&gt;[]/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;let&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;filter=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;return&lt;/span&gt;&lt;span class="err"&gt;={&lt;/span&gt;
  &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;setFilter&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;f&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="na"&gt;filter = &lt;/span&gt;&lt;span class="s"&gt;f&lt;/span&gt; &lt;span class="err"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;updateTodo&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;todoId&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;newProps&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todos = &lt;/span&gt;&lt;span class="s"&gt;todos.map(function(todo)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;todo.id&lt;/span&gt; &lt;span class="err"&gt;!==&lt;/span&gt; &lt;span class="na"&gt;todoId&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
      &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="na"&gt;newProps&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;})&lt;/span&gt;
  &lt;span class="err"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;clearCompleted&lt;/span&gt;&lt;span class="err"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todos = &lt;/span&gt;&lt;span class="s"&gt;todos.filter(function(todo)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="na"&gt;todo.completed&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;});&lt;/span&gt;
  &lt;span class="err"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;removeTodo&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;todoId&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todos = &lt;/span&gt;&lt;span class="s"&gt;todos.filter(function(todo)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;todo.id&lt;/span&gt; &lt;span class="err"&gt;!==&lt;/span&gt; &lt;span class="na"&gt;todoId&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;});&lt;/span&gt;
  &lt;span class="err"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;toggleAllTodosCompleted&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todos = &lt;/span&gt;&lt;span class="s"&gt;todos.map(function(todo)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="na"&gt;(todo.completed =&lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt; &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
      &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;completed&lt;/span&gt; &lt;span class="err"&gt;};&lt;/span&gt;
    &lt;span class="err"&gt;});&lt;/span&gt;
  &lt;span class="err"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;addNewTodo&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;todoData&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todos = &lt;/span&gt;&lt;span class="s"&gt;[...todos,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title:&lt;/span&gt; &lt;span class="na"&gt;todoData.title&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;id:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;nextId&lt;/span&gt;&lt;span class="err"&gt;++),&lt;/span&gt;
      &lt;span class="na"&gt;completed:&lt;/span&gt; &lt;span class="na"&gt;false&lt;/span&gt;
    &lt;span class="err"&gt;}];&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a lot going on in this file but really we are just seeing 4 tags being used in the template. The first 3 define state in our Marko Templates using Marko's &lt;code&gt;&amp;lt;let&amp;gt;&lt;/code&gt; tag. The &lt;code&gt;&amp;lt;let&amp;gt;&lt;/code&gt; tag allows us to define variables in our template. In this case, an id counter, the list of todos, and a variable to hold are filter state.&lt;/p&gt;

&lt;p&gt;This leverages Marko's tag variable syntax where we can define a variable by putting it after a slash after the tag name, and Marko's default attribute syntax that lets us pass a value without an attribute name by assigning it to the tag directly. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; tag is how we expose tag variables to a parent template. We are assigning an object that contains our state and some methods to mutate that state.&lt;/p&gt;

&lt;p&gt;This template does not render any DOM elements itself but serves as a convenient way to encapsulate the behavior we'd like to use in other templates. We will be using this to drive the rest of our application.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#creating-the-app"&gt;
  &lt;/a&gt;
  Creating the App
&lt;/h1&gt;

&lt;p&gt;So let's start wiring this together. We're going to create a new &lt;code&gt;&amp;lt;TodoApp&amp;gt;&lt;/code&gt; tag because I want to keep my top-level page document clean but this is completely unnecessary. So create &lt;code&gt;TodoApp.marko&lt;/code&gt; under the components folder. Also, create a &lt;code&gt;TodoHeader.marko&lt;/code&gt; file under the components folder as well since we will need that in a minute.&lt;/p&gt;

&lt;p&gt;Let's start by dropping the following into &lt;code&gt;TodoApp.marko&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;TodoStore&lt;/span&gt;&lt;span class="err"&gt;/{&lt;/span&gt;
  &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;addNewTodo&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section.todoapp&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;TodoHeader&lt;/span&gt; &lt;span class="na"&gt;addNewTodo=&lt;/span&gt;&lt;span class="s"&gt;addNewTodo&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;if&lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="na"&gt;todos.length&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section.main&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul.todo-list&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;for&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="na"&gt;of=&lt;/span&gt;&lt;span class="s"&gt;todos&lt;/span&gt; &lt;span class="na"&gt;by=&lt;/span&gt;&lt;span class="s"&gt;(todo&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; todo.id)&amp;gt;
          ${todo.title}
        &lt;span class="nt"&gt;&amp;lt;/for&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("https://unpkg.com/todomvc-app-css@2.2.0/index.css")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be coming back to this file a few times in the course of this tutorial but this is the skeleton of our app. The first tag is our &lt;code&gt;&amp;lt;TodoStore&amp;gt;&lt;/code&gt; we created in the previous section. We can access the values returned as a tag variable we are destructuring. So far it is just the todos and &lt;code&gt;addNewTodo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is the bulk of our template. We are including the &lt;code&gt;&amp;lt;TodoHeader&amp;gt;&lt;/code&gt; component we are yet to implement. One of the great things about Marko is it can find tags in your local project automatically saving the need to import them.&lt;/p&gt;

&lt;p&gt;Next, we see a conditional &lt;code&gt;&amp;lt;if&amp;gt;&lt;/code&gt; tag that only displays the list if &lt;code&gt;todos.length&lt;/code&gt;. Marko uses tags for control flow. These use all the same syntax and capabilities you can use in your custom tags.&lt;/p&gt;

&lt;p&gt;Inside this block, there is also the &lt;code&gt;&amp;lt;for&amp;gt;&lt;/code&gt; tag that iterates over our todos. Each iteration of the loop receives its values via Tag Parameters which we denote with enclosing pipes &lt;code&gt;| |&lt;/code&gt;. This allows us to do scoped child templating similar to Render Props in React.&lt;/p&gt;

&lt;p&gt;Finally, there is a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag that imports the official TodoMVC CSS from their CDN. Marko automatically strips out the style tag out into its own &lt;code&gt;.css&lt;/code&gt; files on build.&lt;/p&gt;

&lt;p&gt;We can add our &lt;code&gt;&amp;lt;TodoApp&amp;gt;&lt;/code&gt; to the body of our &lt;code&gt;index.marko&lt;/code&gt; page and we should now see a grey background when we run it with &lt;code&gt;npm run dev&lt;/code&gt; (you can keep this running in the background and it will refresh as we add changes).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype HTML&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Marko TodoMVC"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Marko - TodoMVC&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TodoApp&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#adding-todos"&gt;
  &lt;/a&gt;
  Adding Todos
&lt;/h1&gt;

&lt;p&gt;Right now our app doesn't do very much so let's start working on the &lt;code&gt;&amp;lt;TodoHeader&amp;gt;&lt;/code&gt;. This is where we will enter our new Todos.&lt;/p&gt;

&lt;p&gt;Copy this into your &lt;code&gt;TodoHeader.marko&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;attrs&lt;/span&gt;&lt;span class="err"&gt;/{&lt;/span&gt; &lt;span class="na"&gt;addNewTodo&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;header.header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;todos&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;const&lt;/span&gt; &lt;span class="na"&gt;titleInput = &lt;/span&gt;&lt;span class="s"&gt;title();&lt;/span&gt;
    &lt;span class="na"&gt;addNewTodo&lt;/span&gt;&lt;span class="err"&gt;({&lt;/span&gt; &lt;span class="na"&gt;title:&lt;/span&gt; &lt;span class="na"&gt;titleInput.value&lt;/span&gt; &lt;span class="err"&gt;});&lt;/span&gt;
    &lt;span class="na"&gt;titleInput.value = &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;e.preventDefault&lt;/span&gt;&lt;span class="err"&gt;();&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;
      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"new-todo"&lt;/span&gt;
      &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"What needs to be done?"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;.header&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing you will notice is the &lt;code&gt;&amp;lt;attr&amp;gt;&lt;/code&gt; tag. This is how we define the input that comes into our template. We passed &lt;code&gt;addNewTodo&lt;/code&gt; in from the &lt;code&gt;&amp;lt;TodoApp&amp;gt;&lt;/code&gt; template and now we can use destructuring to get it here. &lt;/p&gt;

&lt;p&gt;You can see Marko's shorthand class syntax on &lt;code&gt;&amp;lt;header.header&amp;gt;&lt;/code&gt; which applies the &lt;code&gt;header&lt;/code&gt; class to the &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; element. From there we create a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; with an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The tag variable on the input element returns an Element Reference Getter. This is a function that when called retrieves the native DOM reference to that tag. We use it in our Submit handler.&lt;/p&gt;

&lt;p&gt;Marko supports a shorthand for functions that we are using here that is very similar to JavaScript object methods. This is the equivalent of assigning the function to an attribute of the same name. Our Submit handler calls the &lt;code&gt;addNewTodos&lt;/code&gt; method from our store.&lt;/p&gt;

&lt;p&gt;Try it in the browser. You should see a large input field, and you should be able to enter some text and click enter and see it added to our page. Right now they all just get appended in a long line of text but we will add more functionality to our Todos in the next section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fpgvpgCq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9ms9tatf3cxknkqg3fl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fpgvpgCq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9ms9tatf3cxknkqg3fl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#making-our-todos-functional"&gt;
  &lt;/a&gt;
  Making our Todos Functional
&lt;/h1&gt;

&lt;p&gt;Well, it works but it ain't pretty. Let's now add our &lt;code&gt;&amp;lt;TodoItem&amp;gt;&lt;/code&gt; component. So go ahead and add &lt;code&gt;TodoItem.marko&lt;/code&gt; under your components folder and copy in the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;attrs&lt;/span&gt;&lt;span class="err"&gt;/{&lt;/span&gt; &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;updateTodo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;removeTodo&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;let&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;isEditing=&lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;let&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;editingTitle=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;const&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;saveEdit&lt;/span&gt;&lt;span class="err"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;isEditing&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;const&lt;/span&gt; &lt;span class="na"&gt;el = &lt;/span&gt;&lt;span class="s"&gt;title();&lt;/span&gt;
    &lt;span class="na"&gt;updateTodo&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;todo.id&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title:&lt;/span&gt; &lt;span class="na"&gt;el.value&lt;/span&gt; &lt;span class="err"&gt;});&lt;/span&gt;
    &lt;span class="na"&gt;isEditing = &lt;/span&gt;&lt;span class="s"&gt;false;&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;{&lt;/span&gt; &lt;span class="na"&gt;completed:&lt;/span&gt; &lt;span class="na"&gt;todo.completed&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;editing:&lt;/span&gt; &lt;span class="na"&gt;isEditing&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div.view&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input.toggle&lt;/span&gt;
      &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;
      &lt;span class="na"&gt;checked=&lt;/span&gt;&lt;span class="s"&gt;todo.completed&lt;/span&gt;
      &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Toggle todo completed"&lt;/span&gt;
      &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;var&lt;/span&gt; &lt;span class="na"&gt;completed = &lt;/span&gt;&lt;span class="s"&gt;e.target.checked&lt;/span&gt; &lt;span class="err"&gt;===&lt;/span&gt; &lt;span class="na"&gt;true&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
        &lt;span class="na"&gt;updateTodo&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;todo.id&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="err"&gt;});&lt;/span&gt;
      &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;onDblClick&lt;/span&gt;&lt;span class="err"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;isEditing = &lt;/span&gt;&lt;span class="s"&gt;true;&lt;/span&gt;
      &lt;span class="na"&gt;editingTitle = &lt;/span&gt;&lt;span class="s"&gt;todo.title;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      ${todo.title}
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;button.destroy&lt;/span&gt;
      &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="err"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="na"&gt;removeTodo&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;todo.id&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Delete todo"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"edit"&lt;/span&gt;
    &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Enter the new todo title"&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
    &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;editingTitle&lt;/span&gt;
    &lt;span class="na"&gt;onBlur=&lt;/span&gt;&lt;span class="s"&gt;saveEdit&lt;/span&gt;
    &lt;span class="na"&gt;onChange=&lt;/span&gt;&lt;span class="s"&gt;saveEdit&lt;/span&gt;
    &lt;span class="na"&gt;onKeydown&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="na"&gt;(e.keyCode =&lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt; &lt;span class="err"&gt;13&lt;/span&gt; &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;*&lt;/span&gt; &lt;span class="na"&gt;ENTER&lt;/span&gt; &lt;span class="na"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;saveEdit&lt;/span&gt;&lt;span class="err"&gt;();&lt;/span&gt;
      &lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;else&lt;/span&gt; &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="na"&gt;(e.keyCode =&lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt; &lt;span class="err"&gt;27&lt;/span&gt; &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;*&lt;/span&gt; &lt;span class="na"&gt;ESC&lt;/span&gt; &lt;span class="na"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;isEditing = &lt;/span&gt;&lt;span class="s"&gt;false;&lt;/span&gt;
      &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our biggest code snippet by far and it's because the Todos do a lot of stuff. You can check them, uncheck them, and double click to edit.&lt;/p&gt;

&lt;p&gt;We are seeing the &lt;code&gt;&amp;lt;const&amp;gt;&lt;/code&gt; tag for the first time here. It is useful for defining things in our template that do not get reassigned. In this case a function we use in multiple places. We also see nice usage of Marko's support of object syntax for applying classes. &lt;/p&gt;

&lt;p&gt;If you add the necessary methods to the store and replace the contents of &lt;code&gt;&amp;lt;for&amp;gt;&lt;/code&gt; in &lt;code&gt;TodoApp.marko&lt;/code&gt; you should now have a basic working Todo application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;TodoStore&lt;/span&gt;&lt;span class="err"&gt;/{&lt;/span&gt;
  &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;addNewTodo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;updateTodo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;removeTodo&lt;/span&gt;
 &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section.todoapp&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;TodoHeader&lt;/span&gt; &lt;span class="na"&gt;addNewTodo=&lt;/span&gt;&lt;span class="s"&gt;addNewTodo&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;if&lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="na"&gt;todos.length&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section.main&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul.todo-list&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;for&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="na"&gt;of=&lt;/span&gt;&lt;span class="s"&gt;todos&lt;/span&gt; &lt;span class="na"&gt;by=&lt;/span&gt;&lt;span class="s"&gt;(todo&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; todo.id)&amp;gt;
          &lt;span class="nt"&gt;&amp;lt;TodoItem&lt;/span&gt; &lt;span class="na"&gt;todo=&lt;/span&gt;&lt;span class="s"&gt;todo&lt;/span&gt; &lt;span class="na"&gt;updateTodo=&lt;/span&gt;&lt;span class="s"&gt;updateTodo&lt;/span&gt; &lt;span class="na"&gt;removeTodo=&lt;/span&gt;&lt;span class="s"&gt;removeTodo&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/for&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w5MYFkMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmikggtgtimittz71chz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w5MYFkMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmikggtgtimittz71chz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#filtering-and-other-features"&gt;
  &lt;/a&gt;
  Filtering and Other Features
&lt;/h1&gt;

&lt;p&gt;We aren't quite done yet. The rest of our features are going to be focused on &lt;code&gt;TodoApp.marko&lt;/code&gt;. First, let's add a toggle all checkbox. We need to add &lt;code&gt;toggleAllTodosCompleted&lt;/code&gt; to our list of properties we are pulling out of &lt;code&gt;&amp;lt;TodoStore&amp;gt;&lt;/code&gt; and then we can replace the line &lt;code&gt;&amp;lt;section.main&amp;gt;&lt;/code&gt; tag with this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;const&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;remainingCount=&lt;/span&gt;&lt;span class="s"&gt;todos.length&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;todos.filter((todo) =&lt;/span&gt;&lt;span class="err"&gt;&amp;gt; &lt;/span&gt;&lt;span class="s"&gt;todo.completed).length&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section.main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;id&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;toggleId&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input.toggle-all&lt;/span&gt;
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;toggleId&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;
    &lt;span class="na"&gt;checked=&lt;/span&gt;&lt;span class="s"&gt;(!remainingCount)&lt;/span&gt;
    &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;toggleAllTodosCompleted&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e.target.checked&lt;/span&gt;&lt;span class="err"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;toggleId&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We introduce another new tag here &lt;code&gt;&amp;lt;id&amp;gt;&lt;/code&gt;. This one gives us a unique identifier that is stable across server and browser execution and a perfect way to create an id to link our input to its label. And now we can toggle on and off all our todos.&lt;/p&gt;

&lt;p&gt;The last feature we need to add is filtering the list by whether they are completed or not. Instead of trying to explain I'm going to just post the final &lt;code&gt;TodoApp.marko&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;TodoStore&lt;/span&gt;&lt;span class="err"&gt;/{&lt;/span&gt;
  &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;setFilter&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;addNewTodo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;updateTodo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;removeTodo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;toggleAllTodosCompleted&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;clearCompleted&lt;/span&gt;
 &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section.todoapp&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;TodoHeader&lt;/span&gt; &lt;span class="na"&gt;addNewTodo=&lt;/span&gt;&lt;span class="s"&gt;addNewTodo&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;if&lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="na"&gt;todos.length&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;const&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;remainingCount=&lt;/span&gt;&lt;span class="s"&gt;todos.length&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;todos.filter((todo) =&lt;/span&gt;&lt;span class="err"&gt;&amp;gt; &lt;/span&gt;&lt;span class="s"&gt;todo.completed).length&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;const&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;filteredTodos = &lt;/span&gt;&lt;span class="s"&gt;todos.filter(todo&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; {
      if (filter === "active") return !todo.completed;
      if (filter === "completed") return todo.completed;
      return true;
    })/&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;const&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;handleFilter=&lt;/span&gt;&lt;span class="s"&gt;((filter)&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; (e) =&amp;gt; {
      setFilter(filter);
      e.preventDefault();
    })/&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;section.main&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;id&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;toggleId&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input.toggle-all&lt;/span&gt;
        &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;toggleId&lt;/span&gt;
        &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;
        &lt;span class="na"&gt;checked=&lt;/span&gt;&lt;span class="s"&gt;(!remainingCount)&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;toggleAllTodosCompleted&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e.target.checked&lt;/span&gt;&lt;span class="err"&gt;);&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;toggleId&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul.todo-list&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;for&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="na"&gt;of=&lt;/span&gt;&lt;span class="s"&gt;filteredTodos&lt;/span&gt; &lt;span class="na"&gt;by=&lt;/span&gt;&lt;span class="s"&gt;(todo&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; todo.id)&amp;gt;
          &lt;span class="nt"&gt;&amp;lt;TodoItem&lt;/span&gt; &lt;span class="na"&gt;todo=&lt;/span&gt;&lt;span class="s"&gt;todo&lt;/span&gt; &lt;span class="na"&gt;updateTodo=&lt;/span&gt;&lt;span class="s"&gt;updateTodo&lt;/span&gt; &lt;span class="na"&gt;removeTodo=&lt;/span&gt;&lt;span class="s"&gt;removeTodo&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/for&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;footer.footer&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span.todo-count&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;${remainingCount}&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; ${remainingCount &amp;gt; 1 ? "items" : "item"} left
      &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul.filters&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
            &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#/"&lt;/span&gt;
            &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;{&lt;/span&gt; &lt;span class="na"&gt;selected:&lt;/span&gt; &lt;span class="na"&gt;filter =&lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;handleFilter("all")&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            All
          &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
            &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#/active"&lt;/span&gt;
            &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;{&lt;/span&gt; &lt;span class="na"&gt;selected:&lt;/span&gt; &lt;span class="na"&gt;filter =&lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;handleFilter("active")&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            Active
          &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
            &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#/completed"&lt;/span&gt;
            &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;{&lt;/span&gt; &lt;span class="na"&gt;selected:&lt;/span&gt; &lt;span class="na"&gt;filter =&lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;handleFilter("completed")&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            Completed
          &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;if&lt;/span&gt;&lt;span class="err"&gt;=(&lt;/span&gt;&lt;span class="na"&gt;remainingCount&lt;/span&gt; &lt;span class="err"&gt;!==&lt;/span&gt; &lt;span class="na"&gt;todos.length&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button.clear-completed&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;clearCompleted&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Clear completed
        &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("https://unpkg.com/todomvc-app-css@2.2.0/index.css")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No new functionality. Just builds on what we have been doing this whole time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rUpoJAXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmunsdccx5jsw41q04wo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUpoJAXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmunsdccx5jsw41q04wo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;And that is it. We have our TodoMVC app with Marko. There are a few more things we can do. Like add persistence to local storage or database but I will leave that as an exercise for the reader. You can see the repo with our project &lt;a href="https://github.com/ryansolid/marko-todomvc"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hopefully, through this tutorial, you gained an appreciation for how Marko and the new Tags API allows us to easily make stateful templates with some simple extensions over HTML to produce isomorphic apps.&lt;/p&gt;

&lt;p&gt;That's right. The app we just made is fully server-rendered and dynamic in the browser. It doesn't get much easier than that. &lt;/p&gt;

</description>
      <category>markojs</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Is C# really dying.? Future of C#.!</title>
      <author>mukulalpha</author>
      <pubDate>Tue, 31 Aug 2021 19:25:11 +0000</pubDate>
      <link>https://dev.to/mukulalpha/is-c-really-dying-future-of-c-1dn6</link>
      <guid>https://dev.to/mukulalpha/is-c-really-dying-future-of-c-1dn6</guid>
      <description>&lt;p&gt;C# is a general-purpose programming language. Technically speaking, you can use it for anything other than what has been developed. There are many coding styles suitable for the C# programming language (it can be used for both functional programming style and object-oriented programming style). It is compiled and strongly typed which means it is easier in doing development but if you are shipping your code into production , there’s little bit more to it.&lt;/p&gt;

&lt;p&gt;C# was developed by Microsoft in 2000 in response to JAVA. They have some similarities, such as strongly typed,compiled, Object-Oriented ,working on a virtual machine and many more. C# provides support for Modern days functionalities for all kind of software development such as front-end ,back-end, mobile ,etc.&lt;/p&gt;

&lt;p&gt;Lets talk about some pros and cons&lt;br&gt;
PROS&lt;br&gt;
Jobs- The question a person asks when choosing a programming language is “Can I use this to find a job?” No matter what career site you search , C# and .Net developers are most assault after programmers on the platform.There are a lot of jobs out there .&lt;/p&gt;

&lt;p&gt;Tools- Visual studio is one of the best and most popular IDE in the market.&lt;/p&gt;

&lt;p&gt;Frameworks- .NET Core is cross platform variant of .NET framework &amp;amp; Xamarin used for cross platform Mobile ddevelopment&lt;/p&gt;

&lt;p&gt;Cross Platform- It means it allows our C# programs to run on multiple platform instead of only windows machine.&lt;/p&gt;

&lt;p&gt;Speed- C# is fast compared to same Modern day interpreted programming languages such as Python and Javascript.&lt;/p&gt;

&lt;p&gt;CONS&lt;br&gt;
Learning Curve- Compared to some modern programming languages such as Python or Javscript .C# is quite had to learn.&lt;/p&gt;

&lt;p&gt;Is C# Dying..?Should you learn C# in 2021?&lt;br&gt;
My answer would be NO, C# is not dying and YES you should learn it in 2021 because of such new and upcoming features for every programming need.&lt;/p&gt;

&lt;p&gt;If you are building a web application, you will consider where it should be hosted, and .Net allows you to host it on a host of your choice. In the past, you had to host to Windows &amp;amp; it would be more expensive compared to a linux host. For an enterprise this can be very important, because you can now host on AWS, Heroku, Windows, Azure, and Linux (in short, you can choose to host).&lt;/p&gt;

&lt;p&gt;Let’s talk about some key points in C#&lt;br&gt;
Web Application Development- There is a framework called ASP.Net, under this framework it brings MVC and Web assembly world using Blazor. Many Enterprise solutions are made using C# because of built in scaffolding ,OEM using entity framework ,security called Identity which allows you to build very fast, secure and scalable application.&lt;/p&gt;

&lt;p&gt;Another approach to web development is Blazor, because Microsoft puts Blazor at the top of the MVC and Razor pages, because it is the future of web development. So, if u need to learn one thing it’ll be ASP.net but if you are already coding for a living and already doing things then take a look at Blazor because it has the best implementation so far in web Assembly till date &amp;amp; Another approach to web development is Blazor, because Microsoft puts Blazor at the top of the MVC and Razor pages, because it is the future of web development.&lt;/p&gt;

&lt;p&gt;Mobile Development- Writing a single code base that supports Android and IOS devices gives us cross-platform mobile development. There are basically three ways to do this: React Native, Google’s Dart / Flutter, and Microsoft’s Xamarin.&lt;/p&gt;

&lt;p&gt;Xamarin allows us to create a user interface that supports IOS and Android natively, and it also allows us to share business layer logic code between multiple platforms. Applications developed by Xamarin can run on Android devices, IOS, and Windows / Mac OS desktops. Since it is now open source, the community can jump in and build things that can extend Xamarin to infinity&lt;/p&gt;

&lt;p&gt;With C #, you can use ASP.net and the Web API to create microservices or service-based sites, allowing you to run these functions sometimes without using infrastructure in your traditional web hosting or service functions. You can create these microservice patterns and host them on Azure, AWS, or a host of your choice.&lt;/p&gt;

&lt;p&gt;Game Development- Build a game inside of C# in Unity that will allow you be break into Game Development.&lt;/p&gt;

&lt;p&gt;There’s Embeded, Machine Learning as well as Internet of things(IOT) which are being supported by C# &amp;amp; Microsoft.&lt;/p&gt;

&lt;p&gt;CLOUD- Microsoft provides you with one of the most powerful cloud platforms known on Azure. It provides you with cognitive services, enables you to perform speech recognition and text-to-speech services, and uses ML.Net for machine learning.&lt;/p&gt;

&lt;p&gt;The great thing about C # and .Net is that it is now open source and the tools are free earlier it was not.&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>programming</category>
      <category>webdev</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Take order confirmation to a new level with conversational AI</title>
      <author>Dasha</author>
      <pubDate>Tue, 31 Aug 2021 19:22:03 +0000</pubDate>
      <link>https://dev.to/dashaai/take-order-confirmation-to-a-new-level-with-conversational-ai-20a1</link>
      <guid>https://dev.to/dashaai/take-order-confirmation-to-a-new-level-with-conversational-ai-20a1</guid>
      <description>&lt;p&gt;Today we’ll be taking a look at how to create a conversational AI app that automates order confirmation. While this app will be targeted towards confirming a food delivery order, yet the logic of this app can apply to create virtually any order confirmation app. Let’s get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prep-steps-to-create-conversational-ai-apps-with-dasha"&gt;
  &lt;/a&gt;
  Prep steps to create conversational AI apps with Dasha
&lt;/h2&gt;

&lt;p&gt;In order to get access to the community of like-minded developers, have all your questions answered, and get help with app development the moment you need it, join &lt;a href="https://community.dasha.ai/"&gt;Dasha Developer Community&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once done, you’ll need to download the latest versions of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://nodejs.dev/"&gt;NodeJS&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://code.visualstudio.com/Download"&gt;VSCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.npmjs.com"&gt;NPM&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open VSCode, go to extensions and download the &lt;a href="https://marketplace.visualstudio.com/items?itemName=dasha-ai.dashastudio&amp;amp;ssr=false"&gt;Dasha Studio&lt;/a&gt; extension. You use the studio to create your conversational script, it gives you syntax analysis and highlights the code. There's also a visual graph editor and it has a GUI tool for debugging.&lt;/p&gt;

&lt;p&gt;All done with the downloads!&lt;/p&gt;

&lt;p&gt;Now you can go ahead and download &lt;strong&gt;&lt;a href="https://github.com/dasha-samples/blank-slate-app"&gt;Dasha Blank Slate app&lt;/a&gt;&lt;/strong&gt; source code and use it as a base to write your code. You can also refer to the &lt;strong&gt;source code&lt;/strong&gt; of this order confirmation conversational AI app* that you can download &lt;a href="https://github.com/dasha-samples/food-order-confirmation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You would want to install the latest version of Dasha CLI. Do that by opening the Terminal in VSCode and running this command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i -g "@dasha.ai/cli"&lt;/code&gt;&lt;br&gt;
&lt;code&gt;npm i&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You could also run a live chat at any moment of time with the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm start chat&lt;/code&gt; (text chat)&lt;br&gt;
&lt;code&gt;npm start your_phone_number&lt;/code&gt; (voice chat. Instead of “your_phone_number” type the number of your phone)&lt;/p&gt;

&lt;p&gt;With these commands, you’ll be able to converse with the AI in text form. This will not only help you test the conversational flow but also gauge whether there are any errors in the code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#get-to-know-the-files-youll-use-to-create-humanlike-conversational-ai-apps"&gt;
  &lt;/a&gt;
  Get to know the files you’ll use to create human-like conversational AI apps
&lt;/h2&gt;

&lt;p&gt;There are 3 main files you need to know about and use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;main.dsl&lt;/strong&gt; -- here you’ll write DashaScript Language code to create the workflow of your conversational AI app. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;data.json&lt;/strong&gt; -- you will set the &lt;a href="https://dasha.ai/en-us/blog/intent-classification"&gt;intents&lt;/a&gt; and &lt;a href="https://dasha.ai/en-us/blog/named-entity-recognition"&gt;entities&lt;/a&gt; (/NER/Named Entity Recognition) in this file. The neural network will use intents and entities you’ll create to learn.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt; -- a NodeJS file that launches the Dasha SDK. You’ll be adding any external functions you deem necessary once adapting the code to your company’s needs. External functions are needed to process data in JavaScript or to get or push data from external APIs. For example, you may need to process data, get access to databases or APIs or use it for any other purposes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#create-your-order-confirmation-conversational-ai-app"&gt;
  &lt;/a&gt;
  Create your order confirmation conversational AI app!
&lt;/h2&gt;

&lt;p&gt;Off to creating your 2-in-1 ai food delivery and order confirmation app!&lt;/p&gt;

&lt;p&gt;Start with importing the common library. It provides all the pre-programmed replies to common digressions such as “wait”, “are you a robot?”, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Import the commonReactions library so that you don't have to worry about coding the pre-programmed replies
import "commonReactions/all.dsl";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you want to establish the context. Here you’ll write the variables, both input (the ones available at the start of the conversation) and output (the variables AI will receive, store and use throughout the conversation).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;context
{
// Declare the input variable - phone. It's your hotel room phone number and it will be used at the start of the conversation.  
    input phone: string;
// Storage variables. You'll be referring to them across the code. 
    appetizers: string="";
    drinks: string="";
    new_burger: string="";
    street: string="";
    house_num: string="";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you’ve set the variables, write out the start node named root. In it, under the &lt;code&gt;do&lt;/code&gt; command, you’ll let the AI know that it needs to connect to the user’s phone, wait for 1 second, and then say some kind of a welcome message and wait for the reply (&lt;code&gt;wait *;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Once the user says something, the AI will go to the next node. Under &lt;code&gt;transitions&lt;/code&gt; you can either write directions to the specified nodes, or leave it blank in case you want the transitions to be not to any of the nodes, but to one of the digressions. In this case, we have &lt;code&gt;next: goto order_confirmation_start on true;&lt;/code&gt; -- this means that the transition will happen despite what the user says.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// A start node that always has to be written out. Here we declare actions to be performed in the node. 
start node root
{
    do
    {
        #connectSafe($phone); // Establishing a safe connection to the user's phone.
        #waitForSpeech(1000); // Waiting for 1 second to say the welcome message or to let the user say something
        #sayText("Hi, this is Dasha, I'm calling to verify some informaton regarding your order with ABC Burgers."); // Welcome message
        wait *; // Wating for the user to reply
    }
    transitions // Here you give directions to which nodes the conversation will go
    {
        next: goto order_confirmation_start on true;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we programmed the AI to go to node &lt;code&gt;order_confirmation_start&lt;/code&gt;, let’s write it out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node order_confirmation_start
{
    do 
    {   
        #sayText("Yeah, hi, so I see that you've ordered a cheeseburger to be delivered to 78 Washington Road. Do you want to change anything about your order?"); 
        wait*;
    }
    transitions
    {
        payment_method: goto payment_method on #messageHasIntent("no");
        edit_new_order: goto edit_new_order on #messageHasIntent("yes");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that after &lt;code&gt;#sayText&lt;/code&gt; we wrote a random order to a random address. However, you should create an external function (you’ll be doing that in index.js file as we’ve discussed above) and connect it to your internal ordering system, that will pull the information on the order and the delivery address of the user.&lt;/p&gt;

&lt;p&gt;Considering that the user knows the menu and wants to change the burger they are ordering, let’s write out the corresponding node and &lt;a href="https://dasha.ai/en-us/blog/using-digressions"&gt;digression&lt;/a&gt;. The reason we should write out both is that we’ll be referring to this node in another node’s transition, and the digression will be there to get triggered at any point of the conversation should there be a need for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;digression change_order_burger
{
    conditions {on #messageHasData("burger_kind");}
    do 
    {   
        set $new_burger = #messageGetData("burger_kind")[0]?.value??"";
        #sayText("Perfect. I've added " + $new_burger + " to your order. Would you like anything else?"); 
        wait *;
    }
    transitions
    {
        edit_new_order: goto edit_new_order on #messageHasIntent("yes") or #messageHasIntent("order_sth_else");
    }
}

node change_order_burger
{
    do 
    {   
        set $new_burger = #messageGetData("burger_kind")[0]?.value??"";
        #sayText("Perfect. I've added " + $new_burger + " to your order. Would you like anything else?"); 
        wait *;
    }
    transitions
    {
        edit_new_order: goto edit_new_order on #messageHasIntent("yes") or #messageHasIntent("order_sth_else");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, let’s write the node we mention in the transition (+ a corresponding digression):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;digression edit_new_order
{
    conditions {on #messageHasIntent("order_sth_else");}
    do
    {
        #sayText("What can I get for you?"); 
        wait *; 
    }
}

node edit_new_order
{
    do
    {
        #sayText("What can I get for you?"); 
        wait *; 
    }
    transitions
    {

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a simple, yet multifunctional node in a way since we’ll be transferring to it in multiple nodes.&lt;/p&gt;

&lt;p&gt;Another similar digression and node are the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node nvm
{
        do
    {
        #sayText("Is there anything else I can help you with?"); 
        wait *;
    }
    transitions
    {
        payment_method: goto payment_method on #messageHasIntent("no");
        edit_new_order: goto edit_new_order on #messageHasIntent("yes");
    }
}

digression nvm
{
    conditions {on #messageHasIntent("nvm");}
    do
    {
        #sayText("Okay! How may I help you?"); 
        wait *; 
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ll also have a chance to refer to them in other nodes.&lt;/p&gt;

&lt;p&gt;Let’s write a digression for a case when a person asks about the burger menu after deciding to change the order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;digression burgers_available
{
    conditions {on #messageHasIntent("burgers_available");}
    do 
    {
        #sayText("We've got cheeseburger, hawaiian burger, buffalo chicken burger, creamy mushroom burger, beef burger and barbeque burger. Which one would you like?"); 
        wait*;
    }
    transitions
    {
        change_order_burger: goto change_order_burger on #messageHasData("burger_kind");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty simple!&lt;/p&gt;

&lt;p&gt;Now, what if the user wants to change the delivery address? Let’s program the conversational AI app to be able to deal with this case scenario.&lt;/p&gt;

&lt;p&gt;There could be 4 different paths here. Either the user states they want to change the address without specifying it, or they name the new street, or the new building number, or the full address. We should write down a digression for each of these scenarios as they can pop up at any moment during the conversation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;digression different_address
{
    conditions {on #messageHasIntent("different_address");}
    do
    {
        #sayText("Sounds good, could you tell me the building number and the street name, please?"); 
        wait *; 
    }
}

digression change_street
{
    conditions {on #messageHasIntent("change_street");}
    do 
    {
        set $street = #messageGetData("street")[0]?.value??"";
        #sayText("Okay, I changed the street to " + $street + " . Is there anything else you'd like to change?"); 
        wait *;
    }
    transitions
    {
        edit_new_order: goto edit_new_order on #messageHasIntent("yes") or #messageHasIntent("order_sth_else");
        review_full_order: goto review_full_order on #messageHasIntent("no");
    }
}

digression change_house_num
{
    conditions {on #messageHasIntent("change_house_num");}
    do 
    {
        set $house_num = #messageGetData("house_num")[0]?.value??"";
        #sayText("Gotcha, I changed the building number to " + $house_num + " . Is there anything else you'd like to change?"); 
        wait *;
    }
    transitions
    {
        edit_new_order: goto edit_new_order on #messageHasIntent("yes") or #messageHasIntent("order_sth_else");
        review_full_order: goto review_full_order on #messageHasIntent("no");
    }
}

digression change_address
{
    conditions {on #messageHasData("house_num") and #messageHasData("street");}
    do 
    {
        set $street = #messageGetData("street")[0]?.value??"";
        set $house_num = #messageGetData("house_num")[0]?.value??"";
        #sayText("Okay, changed the delivery address to " + $house_num + " " + $street + ". Is there anything else you'd like to change?"); 
        wait *;
    }
    transitions
    {
        edit_new_order: goto edit_new_order on #messageHasIntent("yes") or #messageHasIntent("order_sth_else");
        review_full_order: goto review_full_order on #messageHasIntent("no");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take a look at the digression &lt;code&gt;change_street&lt;/code&gt; the line under the &lt;code&gt;do&lt;/code&gt; command: &lt;code&gt;set $street = #messageGetData("street")[0]?.value??"";&lt;/code&gt;. You might recognize &lt;code&gt;$street&lt;/code&gt; from the content that we’ve established right off the bat. This line lets the AI store the variable &lt;code&gt;$street&lt;/code&gt; and use it throughout the chat.&lt;/p&gt;

&lt;p&gt;Note that we can store multiple variables under the &lt;code&gt;do&lt;/code&gt; section as seen under &lt;code&gt;change_address&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We’ll use the stored variables right in the digressions to provide feedback to the user, letting them know we’ve understood them correctly and make some changes if we didn’t.&lt;/p&gt;

&lt;p&gt;Now, let’s consider the case when the user decides to edit their order by ordering something extra that’s on our menu. Appetizers, for instance. Remember that the user might know the menu and say exactly what they want to order, or they might ask what you have on the menu appetizers-wise:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;digression appetizers
{
    conditions {on #messageHasIntent("appetizers");}
    do 
    {
        #sayText("We've got fried calamari, french fries, spring salad, and a soup of the day. What of these would you like to order?");
        wait *;
    }
    transitions 
    {
       confirm_appetizers: goto confirm_appetizers on #messageHasData("appetizers");
    }
     onexit
    {
        confirm_appetizers: do {
        set $appetizers =  #messageGetData("appetizers", { value: true });
       }
    }
}
node confirm_appetizers
{
    do
    {
        var sentence = "Perfect. I've added ";
        set $appetizers = #messageGetData("appetizers");
        for (var item in $appetizers) {
            set sentence = sentence + (item.value ?? " and ");
        }
        set sentence = sentence + " to your order. Is there anything else you'd like?";
        #sayText(sentence); 
        wait *;
    }
     transitions 
    {
        edit_new_order: goto edit_new_order on #messageHasIntent("yes") or #messageHasIntent("drinks");
        confirm_drinks: goto confirm_drinks on #messageHasData("drinks");
        review_full_order: goto review_full_order on #messageHasIntent("no");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same thing goes for the drinks menu:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;digression drinks
{   
    conditions {on #messageHasIntent("drinks");}
    do 
    {
        #sayText("We have orange juice, Sprite, and vanilla milkshakes. What would you like to get?");
        wait *;
    }
    transitions 
    {
       confirm_drinks: goto confirm_drinks on #messageHasData("drinks");
    }
    onexit
    {
        confirm_drinks: do {
        set $drinks = #messageGetData("drinks", { value: true });
       }
    }
}

node confirm_drinks
{
    do
    {
        var sentence = "Noted, I added ";
        set $drinks = #messageGetData("drinks");
        for (var item in $drinks) {
            set sentence = sentence + (item.value ?? " and "); // In case the guest desides to order multiple items of food
        }
        set sentence = sentence + " to your order. Anything else you'd like to order?";
        #sayText(sentence); 
        wait *;
    }
     transitions 
    {
        edit_new_order: goto edit_new_order on #messageHasIntent("yes") or #messageHasIntent("appetizers");
        confirm_appetizers: goto confirm_appetizers on #messageHasData("appetizers");
        review_full_order: goto review_full_order on #messageHasIntent("no");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we’re done changing the order, we should provide the user with the final confirmation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node review_full_order
{
    do
    {
        var sentence = "To review your order, you want to get ";
        for (var item in $new_burger) {
            set sentence = sentence + (item.value ?? "") + (", ");
        }
        for (var item in $appetizers) {
            set sentence = sentence + (item.value ?? "") + (", and ");
        }
        for (var item in $drinks) {
            set sentence = sentence + (item.value ?? "");
        }
        set sentence = sentence + ". Would you like anything else?"; 
        #sayText(sentence); 
        wait *;
    }
     transitions 
    {
        payment_method: goto payment_method on #messageHasIntent("no");
        edit_new_order: goto edit_new_order on #messageHasIntent("yes");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we write out the &lt;strong&gt;for&lt;/strong&gt; statements to account for multiple food/drink items (for example, if the user says they want both calamari and fries). The &lt;code&gt;+ (", ");&lt;/code&gt; and &lt;code&gt;+ (", and ");&lt;/code&gt; so that the multiple variables are separated when the text is spoken (fries, Hawaiian burger, and Sprite vs friedHawaiian burgerSprite). &lt;/p&gt;

&lt;p&gt;Now, a couple of simple nodes will let the AI know it needs to ask about the payment method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node payment_method
{
    do
    {
        #sayText("Gotcha. Now, would you be paying with cash or by card?");
        wait *;
    }
     transitions 
    {
        with_cash: goto with_cash on #messageHasIntent("cash");
        by_card: goto by_card on #messageHasIntent("card");
    }
}

node with_cash
{
    do
    {
        #sayText("Sounds good, with cash it is. Your order will be ready in 15 minutes. Thank you for your order! Bye bye!");
        exit;
    }
}

node by_card
{
    do
    {
        #sayText("Sounds good, by card it is. Your order will be ready in 15 minutes. Thank you for your order! Bye bye!");
        exit;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It goes without saying that we need to account for the case scenario when the user wants to cancel the order altogether:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;digression cancel_order
{   
    conditions {on #messageHasIntent("cancel_order");}
    do 
    {
        #sayText("Okay, just cancelled your order. Is there anything else I can help you with?");
        wait *;
    }
    transitions 
    {
        edit_new_order: goto edit_new_order on #messageHasIntent("yes");
        bye: goto bye on #messageHasIntent("no");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the final touch is our &lt;code&gt;bye&lt;/code&gt; node and digression. We don’t ever want the user to not have an option to end the conversation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;digression bye 
{
    conditions { on #messageHasIntent("bye"); }
    do 
    {
        #sayText("Thanks for your time. Have a great day. Bye!");
        #disconnect();
        exit;
    }
}

node bye 
{
    do 
    {
        #sayText("Thanks for your time. Have a great day. Bye!");
        #disconnect();
        exit;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-your-own-conversational-ai-app-its-easy-"&gt;
  &lt;/a&gt;
  Create your own conversational AI app! It’s easy :)
&lt;/h2&gt;

&lt;p&gt;Try creating an order confirmation app that fits your business’ needs. Think of the questions your users could ask, plot them and write out corresponding nodes and digressions. Or improve the app and share the results in &lt;a href="https://community.dasha.ai/"&gt;Dasha Developer Community&lt;/a&gt; :) &lt;/p&gt;

</description>
      <category>vscode</category>
      <category>javascript</category>
      <category>ai</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Views and it's types in Android {Android Development} | Day 2🔥🚀</title>
      <author>Atharva Shirdhankar</author>
      <pubDate>Tue, 31 Aug 2021 19:06:11 +0000</pubDate>
      <link>https://dev.to/star_trooper/views-and-it-s-types-in-android-android-development-day-2-5hc2</link>
      <guid>https://dev.to/star_trooper/views-and-it-s-types-in-android-android-development-day-2-5hc2</guid>
      <description>&lt;p&gt;In last blog(&lt;a href="https://dev.to/star_trooper/introduction-to-android-development-part-1-day-1-4ki2"&gt;here&lt;/a&gt;)I talked about prerequisites ,tools and tech stack/Programming language we use for Android Development. And how XML help us in structuring and designing components and how Java/Kotlin/C++ is used for Logic&lt;br&gt;
for our Android app.&lt;/p&gt;

&lt;p&gt;In Android Development ,the first thing we need to learn is something called Views.&lt;br&gt;
View is a basic building block of UI (User Interface) in android. &lt;br&gt;
And using the series of views we build our Application UI&lt;br&gt;
At start we will have a look over 3 basic views 👇&lt;/p&gt;

&lt;p&gt;1.1  TextView 👇&lt;br&gt;
The first and commonly used view is "TextView".&lt;br&gt;
➡️ TextView is the most widely used view used to show pre-defined text on display screen.&lt;br&gt;
Snippet:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pXfT2JPh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h69mbxvl52s2rduliw1s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pXfT2JPh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h69mbxvl52s2rduliw1s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.2 Few TextView attributes👇&lt;br&gt;
i . android:text&lt;br&gt;
➡️ Text to display. &lt;br&gt;
ii . android:textColor&lt;br&gt;
➡️ Text color. &lt;br&gt;
iii . android:textStyle&lt;br&gt;
➡️ Style (normal, bold, italic, bold|italic) for the text. &lt;br&gt;
iv . android:fontFamily&lt;br&gt;
➡️ Font family for the text.&lt;/p&gt;

&lt;p&gt;Read more about 👉 &lt;a href="https://developer.android.com/reference/android/widget/TextView"&gt;TextView&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.1 ImageView 👇&lt;br&gt;
➡️ The second commonly used view is "ImageView".&lt;br&gt;
ImageView are used in Android application to place an image in the view.ImageView is used to show any picture on the user interface.&lt;/p&gt;

&lt;p&gt;Snippet:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7gnUP0E5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fk71mc9lkqws04q81rdp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7gnUP0E5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fk71mc9lkqws04q81rdp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.2 Few ImageView attributes&lt;br&gt;
i . android:src&lt;br&gt;
➡️ Sets a drawable as the content for this ImageView.&lt;br&gt;
ii. android:cropToPadding&lt;br&gt;
➡️ If true, the image will be cropped to fit within its padding.&lt;br&gt;
iii. android:tint&lt;br&gt;
➡️ The tinting color for the image.&lt;/p&gt;

&lt;p&gt;Note for ImageView 👇&lt;br&gt;
Any image that we want to display in the app should be placed under the drawable folder. This folder can be found under &lt;br&gt;
app → res → drawable. &lt;br&gt;
To insert an image, simply copy the image and then right click on drawable → Paste.&lt;/p&gt;

&lt;p&gt;Read more about 👉 &lt;a href="https://developer.android.com/reference/android/widget/ImageView"&gt;ImageView&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.1 Button&lt;br&gt;
A user interface element the user can tap or click to perform an action.&lt;br&gt;
Snippet:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iTLdEh2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5k8amvr0kmnn7qztotr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTLdEh2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5k8amvr0kmnn7qztotr.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;About the Button 👇&lt;br&gt;
We use Button to trigger the method we wrote in Java/Kotlin/C++ using "android:onClick" attribute of button view.&lt;/p&gt;

&lt;p&gt;Read more about 👉 &lt;a href="https://developer.android.com/reference/android/widget/Button"&gt;Button&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resources&lt;br&gt;
&lt;a href="https://labs.udacity.com/android-visualizer/#/android/"&gt;Online XML visualizer&lt;/a&gt; for practicing Purpose.&lt;/p&gt;

</description>
      <category>xml</category>
      <category>android</category>
      <category>development</category>
      <category>sharingknowledge</category>
    </item>
    <item>
      <title>Mom, I wrote the world's simplest HTTP server!</title>
      <author>Alexander</author>
      <pubDate>Tue, 31 Aug 2021 19:03:45 +0000</pubDate>
      <link>https://dev.to/xnbox/mom-i-wrote-the-world-s-simplest-http-server-ob8</link>
      <guid>https://dev.to/xnbox/mom-i-wrote-the-world-s-simplest-http-server-ob8</guid>
      <description>&lt;p&gt;Modern web servers include millions of lines of code, but today you will find that it only takes four lines to write the simplest HTTP server.&lt;/p&gt;

&lt;p&gt;No, it's not going to be something boring like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;WebServer&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's say we want Mom to see our greeting when she visits our server.&lt;br&gt;
Do you have the latest version of VS Code open? If so, close it, you won't need it! ✋&lt;br&gt;
Open your favorite text editor. Name your file: &lt;code&gt;Mom.txt&lt;/code&gt; Did you feel how good your soul felt?...&lt;br&gt;&lt;br&gt;
Ok, we won't complicate things, we'll take a text editor and write four magic lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET / HTTP/1.1

HTTP/1.1 200 OK
Content-Type: text/html

Hello, Mom!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Better than "Hello, world!", Isn't it? 😉&lt;/p&gt;

&lt;p&gt;Our server is ready! Double click on the file icon to start your server...&lt;br&gt;
File opened in a text editor?! 🤔&lt;/p&gt;

&lt;p&gt;Shit... It's not working! What to do?&lt;br&gt;
Ok, I'll whisper the name of the some tool to you, but first, &lt;strong&gt;promise not to tell anyone about this magic wand&lt;/strong&gt;. Not even your mother. You promise?&lt;/p&gt;

&lt;p&gt;Write it down, then: &lt;a href="https://github.com/xnbox/DeepfakeHTTP"&gt;DeepfakeHTTP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download it and start your world's simplest HTTP server from the command line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java -jar df.jar Mom.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use a browser to check whether the server is running: &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XrMe5mwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjxmo0bheraj7yttu8ly.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XrMe5mwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjxmo0bheraj7yttu8ly.png" alt="Hello, Mom!"&gt;&lt;/a&gt;&lt;br&gt;
Oh, I forgot to tell you! You must have Java version 15 or higher installed on your computer.&lt;/p&gt;

&lt;p&gt;Are you still here?! Hurry up and run and argue with someone about writing a 4-line HTTP server! 🎉🎉🎉&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to apply transparency in OO programming ?</title>
      <author>Dibyojyoti Sanyal</author>
      <pubDate>Tue, 31 Aug 2021 18:40:06 +0000</pubDate>
      <link>https://dev.to/dibyojyoti/how-to-apply-transparency-in-oo-programming-2ffo</link>
      <guid>https://dev.to/dibyojyoti/how-to-apply-transparency-in-oo-programming-2ffo</guid>
      <description>&lt;p&gt;Transparency is one of the Object Oriented Design Principles that helps developers keep the code readable and understandable.&lt;/p&gt;

&lt;p&gt;When you look at the class or methods it should be very obvious immediately what it does, within the next 1 minute it should be obvious how it does what it does. You as a programmer should be able to understand the piece of code that you have written after several months even years when you look at it. Moreover, others too, should take the same amount of time that you took after 6 years to understand the code that you have written.  For Example, when anyone looks at the name of a class and its member variables and methods they should understand what they do and how, without any effort. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The name of the class should explain what it does or what it stands for.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The name of the variable should say what it is used for.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The name of a method should explain the action that is performed when the method is called. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A method name should have a verb to make that happen. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The same goes for the name of the objects, they should say what they are used for and in which context. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Normally a class is named as a noun example Employee class. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example, an Employee class can have variables, to maintain the state of an employee object. When the task of the Employee class is to keep age, salary, name, department details of an employee then the variable names should be like  age, salary, name, department. We should use the easiest name that identifies what the variables are for.  &lt;/p&gt;

&lt;p&gt;Here is another example for the methods. When a method increments the salary of an employee then name it like incrementSalary(). You can increment salary by providing an increment percentage or an adding a float amount to the existing salary. Then name them differently like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;incrementSalaryByPercentage(double percentage)
incrementSalaryByAmount(long additionalAmount)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now assume a department consists of 5 employees. and one of them is an IT manager, another is an accountant, another human resource manager and two programmers. You will create 5 objects of the same Employee class in the Department class. but name the name of each Employee object should explain their role like ITManager etc.&lt;/p&gt;

&lt;p&gt;When you start creating classes, start from top to bottom. That means write the user interfaces first to provide transparency. Things like services, databases etc. should be at the bottom of the structure and written later. It should be done this way so that, even if there are changes in the technical layer like how to access the database it should not affect the upper layer.&lt;/p&gt;

&lt;p&gt;This way just by following a good naming convention we can make our code easy to understand and transparent.&lt;/p&gt;

&lt;p&gt;For the original post please refer to &lt;a href="https://www.cloudnativemaster.com/post/what-transparency-means-in-oo-design-pattern-how-to-apply-it-in-code"&gt;my blog&lt;/a&gt;&lt;br&gt;
You can see similar posts in Object Oriented Design &lt;a href="https://www.cloudnativemaster.com/object-oriented-design"&gt;here&lt;/a&gt;  &lt;/p&gt;

</description>
      <category>oop</category>
      <category>java</category>
      <category>design</category>
    </item>
    <item>
      <title>How to Level Up as a Software Engineer | AWS Community Builders Program</title>
      <author>Brian H. Hough</author>
      <pubDate>Tue, 31 Aug 2021 18:14:28 +0000</pubDate>
      <link>https://dev.to/brianhhough/how-to-level-up-as-a-software-engineer-aws-community-builders-program-55g4</link>
      <guid>https://dev.to/brianhhough/how-to-level-up-as-a-software-engineer-aws-community-builders-program-55g4</guid>
      <description>&lt;p&gt;Wondering what you can do to level up as a software engineer, developer or programmer this year? 👨‍💻💭 &lt;/p&gt;

&lt;p&gt;In this episode of the &lt;a href="https://youtu.be/hFvGrvCpEsg"&gt;Tech Stack Playbook&lt;/a&gt;, I'm diving into the program that has single-handedly helped me the most in my tech career thus far: the AWS Community Builders Program. Today's episode focuses on AWS, the community, the core benefits of the program, and how it has helped me level up as a software engineer and developer this year.&lt;/p&gt;

&lt;p&gt;📝 Quick plug: Applications close on August 30, 2021, so please reach out if you have any questions about the program and be sure to apply by the deadline here: &lt;a href="https://amazonmr.au1.qualtrics.com/jfe/form/SV_dajuY7uPsH3NSTk"&gt;https://amazonmr.au1.qualtrics.com/jfe/form/SV_dajuY7uPsH3NSTk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s a glance at what you’ll learn in this episode:&lt;/p&gt;

&lt;p&gt;Time stamps:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=0s"&gt;00:00&lt;/a&gt; How the AWS Community Builders Program has helped me level up&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=43s"&gt;00:43&lt;/a&gt; Benefit #1: Being a Part of a Vibrant Community&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=215s"&gt;03:35&lt;/a&gt; Benefit #2: Being Surrounded by Constant Education and Learning&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=306s"&gt;05:06&lt;/a&gt; Benefit #3: An Immense Amount of Resources and Tools&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=383s"&gt;06:23&lt;/a&gt; Benefit #4: Get Connected to Conferences, Events, and Workshops&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=420s"&gt;07:00&lt;/a&gt; Why constant learning is key &amp;amp; how community/mentors can help&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=575s"&gt;09:35&lt;/a&gt; Reflecting on the past year of growth and development in software engineering&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hFvGrvCpEsg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits-of-the-aws-community-builders-program-for-developers"&gt;
  &lt;/a&gt;
  👨‍💻 What are the Benefits of the AWS Community Builder's Program for Developers?
&lt;/h2&gt;

&lt;p&gt;The benefits of the AWS Community Builders program knows no bounds because it’s a truly priceless program. In the beginning, you will get a welcome kit which has some amazing AWS swag like hats, water bottles, desktop accessories, $500 of AWS credits, and way more goodies and benefits. But, there are several core aspects of the program that can be so instrumental to fellow programmers, developers, and people in tech. From exclusive webinars and events, to a global Slack channel of developers, programmers, software engineers, developer advocates, CTOs, executives, and everyone in between, there is so much value packed into this program for all involved.&lt;/p&gt;

&lt;p&gt;So what are the key highlights from this program? I'll walk through for key benefits of the program and explain why this program has been so valuable to me.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefit-1-being-a-part-of-a-vibrant-community"&gt;
  &lt;/a&gt;
  👨‍💻 BENEFIT #1: Being a Part of a Vibrant Community
&lt;/h2&gt;

&lt;p&gt;When you are starting out in your developer journey, whether at the executive or technical levels, whether you are a freelancer or employed by a software company, you always need to think about your community.&lt;/p&gt;

&lt;p&gt;Who are the people you surround yourself? Who do you turn to and talk to when you have questions or comments about tech, your job, your career etc.?&lt;/p&gt;

&lt;p&gt;During the COVID-19 pandemic and even beforehand, I was constantly thinking about how I can build my network of friends, colleagues, mentors, and guides in technology. As a self-taught programmer, I have done bootcamps and courses and programs, but I don’t have a degree in computer science, so I needed to surround myself with people who went down similar paths and different paths to learn what set them up for success.&lt;/p&gt;

&lt;p&gt;And joining a highly-engaged and inspiring community of software engineers and developers from around the world building on the same tools and frameworks is one of the best ways to accomplish this. It all goes back to joining a community. The AWS Community Builders program is full of some of the most selfless, smart, caring, and supportive people I have ever met. People who go out of their way to answer questions, help people when they have questions, and work on helping the rest of the community level up as well. AWS leaders, AWS Heroes, experts in tech, and senior leaders of the industry are all a part of this program along with early career and young software engineers like me. The community is so rich with so many different types of technology people, all sharing a passion for serverless frameworks, cloud-based software, and of course, AWS! &lt;/p&gt;

&lt;p&gt;If you are looking for a highly engaged and active family of developers and programmers who constantly will push you to be better, smarter, faster, and stronger than you were the day before, look no further than the AWS Community Builders Program, especially to be around people who inspire you to constantly level up.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefit-2-being-surrounded-by-constant-education-and-learning"&gt;
  &lt;/a&gt;
  👨‍💻 BENEFIT #2: Being Surrounded by Constant Education and Learning
&lt;/h2&gt;

&lt;p&gt;How are you constantly thinking about how you will level up as a developer or programmer? Are you learning new things or just doing the same-old-same-old.&lt;/p&gt;

&lt;p&gt;The AWS staff puts on incredible exclusive events, workshops, talks, and meetings on cutting-edge serverless tools like SageMaker and Hugging Face for artificial intelligence and machine learning (AI &amp;amp; ML), database best practices like DynamoDB or Neptune, messaging services like SNS and SES and PinPoint, as well as networking and compute services like EC2, VPC, etc. &lt;/p&gt;

&lt;p&gt;There is so much high level content that exists on the Internet, and it can leave you wondering…so how does this tech actually work? If I wanted to actually use these tools, what do I need to do? Well thanks to the these exclusive events and workshops, you get to have leading technology experts, AWS staff, and tech visionaries walk you through implementation, code, walkthroughs, and more. You get architecture diagrams, roadmaps, how-to-guides, and a plethora of resources.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefit-3-an-immense-amount-of-resources-and-tools"&gt;
  &lt;/a&gt;
  👨‍💻 BENEFIT #3:  An Immense Amount of Resources and Tools
&lt;/h2&gt;

&lt;p&gt;The third biggest benefit that I think makes the AWS Community Builders Program so valuable is the resources and tools Community Builders have at their disposal. I’ve benefited a lot from having a subscription to Cloud Academy and having access to classes and guides and lessons.&lt;/p&gt;

&lt;p&gt;By going through classes and education online, on-demand, and on the topics you are most curious on, this makes it so easy to get the skills you need for your job, for your passion project, and for your company. Online education is only going to increase in importance and value in the months and years to come, and especially during these remote months, being able to attend virtual classes and webinars right from your computer makes it that much easier to upskill and level up.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefit-4-get-connected-to-conferences-events-and-workshops"&gt;
  &lt;/a&gt;
  👨‍💻 BENEFIT #4:  Get Connected to Conferences, Events, and Workshops
&lt;/h2&gt;

&lt;p&gt;The fourth largest benefit has to be the connection to conferences, events, and workshops. Being able to jump into a conference session or be invited to a Brown Bag lunch workshop on a certain AWS or serverless tool….and also be invited to speak at events like this…has such an immense amount of value for anyone looking to get more presentation and conference experience under their belt.&lt;/p&gt;

&lt;p&gt;As a young professional, opportunities like this can be difficult to come by, so having people that can put you in touch with event organizers and leaders can make all the difference for sharing the insights you’re learning on the job, in your side projects, or generally sharing insights based on what you are working on.&lt;/p&gt;

&lt;p&gt;One of the opportunities I was able to earn was giving a 2 hour master class on the &lt;a href="https://datasaturdays.com/2021-09-04-datasaturday0014/"&gt;9 AWS Serverless Databases all Programmers and Software Engineers Should Know&lt;/a&gt;. Additionally, this upcoming Saturday, my talk on AWS Serverless Databases was accepted for &lt;a href="https://datasaturdays.com/2021-09-04-datasaturday0014/"&gt;Data Saturday Oslo&lt;/a&gt;, which I am super excited about. &lt;/p&gt;

&lt;p&gt;Not only do you get amazing experience by presenting technology to global audiences, but you also get to inspire and empower other developers to learn new tools, solutions, strategies, and methodologies. By bringing people into the fold of cutting-edge technology, you never know who you might empower in the “virtual stands.” Or in the audience, there might be someone who goes on to implement what you talked about or builds a solution that has a large impact on the world. The possibilities are truly limitless and you never know what your talk might do to impact people and get people started in their serverless, full-stack, and AWS journeys. &lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-become-an-aws-community-builder"&gt;
  &lt;/a&gt;
  👨‍💻 How to Become an AWS Community Builder?
&lt;/h2&gt;

&lt;p&gt;If this interests you and you want join this incredible program and community, I highly recommend that you apply! The deadline is August 30th, so make sure to apply via the application link here: &lt;a href="https://amazonmr.au1.qualtrics.com/jfe/form/SV_dajuY7uPsH3NSTk"&gt;https://amazonmr.au1.qualtrics.com/jfe/form/SV_dajuY7uPsH3NSTk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions about the application process, please reach out over social media or drop a comment below and I will respond!&lt;/p&gt;

&lt;p&gt;Check out the full recording below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hFvGrvCpEsg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let me know if you found this post helpful! And if you haven't yet, make sure to check out these free resources below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Follow my Instagram for more: &lt;a href="https://instagram.com/brianhhough"&gt;@BrianHHough&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Watch my latest &lt;a href="https://youtube.com/brianhhough"&gt;YouTube video for more&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Listen to my Podcast on &lt;a href="https://youtube.com/brianhhough"&gt;Apple Podcasts&lt;/a&gt; and &lt;a href="https://youtube.com/brianhhough"&gt;Spotify&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Join my FREE &lt;a href="https://facebook.com/groups/techstackplaybook"&gt;Tech Stack Playbook Facebook Group&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's digitize the world together! 🚀&lt;/p&gt;

&lt;p&gt;-- Brian&lt;/p&gt;

</description>
      <category>aws</category>
      <category>javascript</category>
      <category>react</category>
      <category>cloud</category>
    </item>
  </channel>
</rss>
