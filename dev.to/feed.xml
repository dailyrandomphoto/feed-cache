<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Climatetech looking for a CTO</title>
      <author>adrien_climate</author>
      <pubDate>Wed, 08 Dec 2021 17:46:45 +0000</pubDate>
      <link>https://dev.to/adrienavril/climatetech-looking-for-a-cto-3j0d</link>
      <guid>https://dev.to/adrienavril/climatetech-looking-for-a-cto-3j0d</guid>
      <description>&lt;p&gt;Hello everyone, I'm Adrien (blue shirt), I'm looking at a CTO for our ClimateTech.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I'm the cofounder of adapt, a tool that helps our thousand of users to reduce the GHG emission of their energy consumption by visualising the "electricity weather forecast". Our users in Europe consume electricity wisely : they reduce consumption when carbon intensity is higher ("peak demand"), and they post pone some electricity consumption when carbon intensity is lower (e.g. "smartcharging of electric vehicles"). Our beta tool works with manual actions of our users, and we're automatising the process for significant electric uses (e.g. HVAC &amp;amp; EV charging) and GHG emissions reduction calculation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Our beta is available here: &lt;a href="https://dev.tourl"&gt;www.adapt.sh&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I started adapt with a friend of mine, working as part-time full stack developer, and we now have a junior full stack developer and some freelances. We have thousands of users and are working on some really interesting pilot projects with energy organisations. We're a non-profit and we're looking at a CTO willing to dedicate its coding skills to fighting climate change! Please send me an email at adrien [at] adapt.sh&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Our current tech FYI: Languages: css (especially twitter bootstrap 4), javascript (very little...), php 7.x ; Framework: symfony 4.x ; Web hosting: docker (local), AWS elasticbeanstalk (production)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks in advance!&lt;/p&gt;

</description>
      <category>php</category>
      <category>career</category>
      <category>startup</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Looking for a remote job?</title>
      <author>Bryan</author>
      <pubDate>Wed, 08 Dec 2021 16:51:28 +0000</pubDate>
      <link>https://dev.to/bryanellis95/looking-for-a-remote-job-138c</link>
      <guid>https://dev.to/bryanellis95/looking-for-a-remote-job-138c</guid>
      <description>&lt;p&gt;Well we have some news for you! Today, we launched &lt;a href="https://www.remotestartup.io/"&gt;RemoteStartup&lt;/a&gt; a new platform to list your jobs, view jobs &amp;amp; apply and by far the coolest feature, our in-house chat system that notifies you anytime either side sends a message! That's right, apply for a job and instantly come in communication with the job poster! Of course, if you're listing a job you can just paste your link in there too and we will handle getting applicants to that link. The even better part is that listings are about 50% cheaper than other remote job sites and we give more features to our users. But wait! theres more, we are also contributing to stripe climate on every purchase made! &lt;/p&gt;

&lt;p&gt;Check us out and let me know if there are any questions!&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>career</category>
      <category>watercooler</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Artificial Intelligence Tutorial: What is AI? Basics for Beginners - Advance</title>
      <author>Coderzway</author>
      <pubDate>Wed, 08 Dec 2021 16:48:45 +0000</pubDate>
      <link>https://dev.to/huugg/artificial-intelligence-tutorial-what-is-ai-basics-for-beginners-advance-31la</link>
      <guid>https://dev.to/huugg/artificial-intelligence-tutorial-what-is-ai-basics-for-beginners-advance-31la</guid>
      <description>&lt;p&gt;This tutorial provides introductory knowledge on Artificial Intelligence. It would come to a great help if you are about to select Artificial Intelligence as a course subject. You can briefly know about the areas of AI in which research is prospering.&lt;/p&gt;

&lt;h1&gt;Audience&lt;/h1&gt;

&lt;p&gt;This tutorial is prepared for the students at beginner level who aspire to learn Artificial Intelligence.&lt;/p&gt;

&lt;h1&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;The basic knowledge of Computer Science is mandatory. The knowledge of Mathematics, Languages, Science, Mechanical or Electrical engineering is a plus. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.codelivly.com/what-is-ai-artificial-intelligence-tutorial-basics-for-beginners/" rel="noreferrer noopener"&gt;Artificial Intelligence Tutorial: What is AI? Basics for Beginners - Advance&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How i plan to maximise my learning to improve my skills</title>
      <author>ifrah</author>
      <pubDate>Wed, 08 Dec 2021 16:48:29 +0000</pubDate>
      <link>https://dev.to/ifrah/how-i-plan-to-maximise-my-learning-to-improve-my-skills-3gh4</link>
      <guid>https://dev.to/ifrah/how-i-plan-to-maximise-my-learning-to-improve-my-skills-3gh4</guid>
      <description>&lt;p&gt;I have recently completed my professional development plan and have come up with a few different ways to maximise my learning to reach my goals. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-practising-even-if-i-think-i-have-perfected-it"&gt;
  &lt;/a&gt;
  Keep practising even if I think I have perfected it!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jte7ZkGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zlyt3vpqgq2mgr281ns.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jte7ZkGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zlyt3vpqgq2mgr281ns.jpg" alt="Image description" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learning a topic or process may be easy, but it is just as easy to forget it in a couple of weeks if not put into practice.  I think the easiest way to keep on practising is to have a structure to follow instead of working out of my head from scratch. I have found a few challenges listed below which i am going to attempt to try at some point to keep practising my skills.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://100dayscss.com/"&gt;100 days of css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dailyui.co/"&gt;Daily UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/javascript-practical-coding-challenges-for-beginners-4bq3ugr"&gt;JavaScript Challenges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#teaching-someone-else-to-help-improve-my-understanding"&gt;
  &lt;/a&gt;
  Teaching someone else to help improve my understanding.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g6dTMc_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aglci21vx2ea50rkuw8f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g6dTMc_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aglci21vx2ea50rkuw8f.jpg" alt="Image description" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once I think I have an in-depth understanding of a topic. I think a great to cement it is to teach or collaborate with others. This will also help me to improve my communication and teamwork skills. This method is often referred to as the protégé effect. It has ben proven to  improves your learning process by increasing your metacognitive processing, increasing your use of effective learning strategies, increasing your motivation to learn the material, and increasing your feelings of competence and autonomy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#figure-out-what-time-management-system-works-best-for-me"&gt;
  &lt;/a&gt;
  Figure out what time management system works best for me
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VSzoSKO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjzqdrketwkv0bzqd1k4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VSzoSKO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjzqdrketwkv0bzqd1k4.jpg" alt="Image description" width="880" height="732"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many different learning methods out there and have yet to find the perfect one for me. I am going to try some of the few listed below to see what works best. Doing this will hopefully help me maximise my learning my using my time effectively. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.themuse.com/advice/take-it-from-someone-who-hates-productivity-hacksthe-pomodoro-technique-actually-works"&gt;Pomodoro Technique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.projectsmart.co.uk/pareto-principle/pareto-analysis-step-by-step.php"&gt;Pareto Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.eisenhower.me/eisenhower-matrix/"&gt;Eisenhower Matrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Git Cheat Sheet- 20 commands I Use Everyday</title>
      <author>Coderzway</author>
      <pubDate>Wed, 08 Dec 2021 16:43:18 +0000</pubDate>
      <link>https://dev.to/huugg/git-cheat-sheet-20-commands-i-use-everyday-afg</link>
      <guid>https://dev.to/huugg/git-cheat-sheet-20-commands-i-use-everyday-afg</guid>
      <description>&lt;p&gt;Hey Coders!&lt;br&gt;When I started coding, tracking changes in my codes was always painful and the fear of losing files was always there. But now we have Git to tackle these problems, it has everything you need to make your coding environment safe and easy. Git is so important for every programmer's daily life especially when you are working with a team. The software industry widely uses it but mastering all the commands can take time, so keep practising! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More&lt;/strong&gt;: &lt;strong&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/git-cheat-sheet-20-commands-i-use-everyday/" rel="noreferrer noopener"&gt;Git Cheat Sheet- 20 commands I Use Everyday&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>15 JavaScript Tips &amp; Tricks That No One Teaches 🚀</title>
      <author>Coderzway</author>
      <pubDate>Wed, 08 Dec 2021 16:42:07 +0000</pubDate>
      <link>https://dev.to/huugg/15-javascript-tips-tricks-that-no-one-teaches-aai</link>
      <guid>https://dev.to/huugg/15-javascript-tips-tricks-that-no-one-teaches-aai</guid>
      <description>&lt;p&gt;JavaScript is no doubt one of the coolest languages in the world and is gaining more and more popularity day by day. So the developer community has found some tricks and tips after using JS for quite a while now. Today I will share 8 Tips &amp;amp; Tricks With You!&lt;/p&gt;

&lt;p&gt;So let's get started &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More: &lt;span&gt;&lt;a href="https://www.codelivly.com/8-javascript-tips-tricks-that-no-one-teaches/" rel="noreferrer noopener nofollow"&gt;15 JavaScript Tips &amp;amp; Tricks That No One Teaches 🚀&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Build a Dynamic REST API with Custom Functions</title>
      <author>Terra Roush</author>
      <pubDate>Wed, 08 Dec 2021 16:21:44 +0000</pubDate>
      <link>https://dev.to/terra_roush/build-a-dynamic-rest-api-with-custom-functions-54k5</link>
      <guid>https://dev.to/terra_roush/build-a-dynamic-rest-api-with-custom-functions-54k5</guid>
      <description>&lt;p&gt;I’m a new software developer here at HarperDB. So like many of you visiting the blog, I’ve got fresh eyes on this product. Two weeks ago, my sights were set on HarperDB’s newest feature, Custom Functions. My task was to create a plug-and-play REST API template with our Custom Functions. As you read this I hope you’ll feel confident to follow along, and after some practice implement this into your next project!&lt;/p&gt;

&lt;p&gt;So what are Custom Functions?&lt;/p&gt;

&lt;p&gt;Simply put, Custom Functions (CF) are serverless, highly customizable API endpoints that interact with our HarperDB Core operations, such as “insert”, “search_by_hash”, “update”, and &lt;a href="https://api.harperdb.io/"&gt;&lt;strong&gt;more&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You could define a CF using SQL to return all dog data records where the owner’s name is “Geena Davis” and sort them by the dog’s name. You can create a CF that deletes a dog’s data record using a route parameter and NoSQL. You can also make a CF with validation that saves a dog’s record with required properties. Custom Functions are powered by Fastify and are extremely flexible. To see possibilities, check out their &lt;a href="https://www.fastify.io/docs/latest/Routes/#routes-options"&gt;&lt;strong&gt;docs&lt;/strong&gt;&lt;/a&gt; on routes.&lt;/p&gt;

&lt;p&gt;Here’s a simple CF that gets a data record from the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L0J4LvFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upz2f0diy5kvhtfdcmmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L0J4LvFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upz2f0diy5kvhtfdcmmm.png" alt="Image description" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YF3neVM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mswy349bg63202l638fh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YF3neVM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mswy349bg63202l638fh.png" alt="Image description" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gByUFL_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f53gx1tzht0p9qn9oi41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gByUFL_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f53gx1tzht0p9qn9oi41.png" alt="Image description" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And what about REST?&lt;/p&gt;

&lt;p&gt;You’re probably familiar with a REST API. This is an application programming interface that conforms to the constraints of REST architecture and allows for interaction with RESTful web services. They are flexible, scalable, and efficient. RESTful APIs utilize four common HTTP methods: POST, GET, PUT, and DELETE, which correspond with CRUD functionality: create, read, update, and delete.&lt;/p&gt;

&lt;p&gt;So why am I combining the two?&lt;/p&gt;

&lt;p&gt;A REST API and HarperDB’s Custom Functions combine to make development easy and performance fast. A large aim of HarperDB is to collapse the stack. Traditionally you would need a server running a REST application and a server that runs the database. In this case, you’re only running HarperDB, hence, collapsing the stack. &lt;/p&gt;

&lt;p&gt;To the task at hand: build a dynamic REST API with Custom Functions.&lt;/p&gt;

&lt;p&gt;I’ll describe what I’ve built first, and then I’ll show how you can use it for your own devices. Instead of going one by one through the routes, I’ll highlight the POST for its simplicity and the PUT for its complexity. All routes can be viewed in the &lt;a href="https://github.com/HarperDB/hdb-cf-rest"&gt;&lt;strong&gt;repo&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For this project, the routes have a URL, an HTTP method, and a handler. The handlers have access to hdbCore and I’m using its requestWithoutAuthentication method for simplicity’s sake. In defining routes, I specified a dynamic URL to satisfy a plug-and-play approach. As for HTTP methods, I wanted to make endpoints for standard CRUD so in routes/index.js I built two GET routes (get one and get all), a POST, a PUT, a PATCH, and a DELETE. I included a PUT and a PATCH as they both have their advantages. The PUT updates by replacing an entire record, and PATCH only updates any given values. With that said, the GET, POST, and DELETE aligned beautifully with HarperDB, and the PUT and PATCH required a bit of finessing. In general, the handlers connect the request to hdbCore using a specified HarperDB operation, they utilize route parameters to access the correct data, and they return a response. I’ve chosen to mostly use NoSQL operations, as they work lightning fast with HDB, although you may use SQL as well. &lt;/p&gt;

&lt;p&gt;Here’s what the dynamic POST Custom Function looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LWtWuZiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0f2g4w41rrpij4o5rdk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LWtWuZiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0f2g4w41rrpij4o5rdk.png" alt="Image description" width="880" height="262"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QCkJurR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7v0jja92t5mqodrd0se.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QCkJurR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7v0jja92t5mqodrd0se.png" alt="Image description" width="880" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ND4X9Zha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnbd7oh1u4j5g30fsy5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ND4X9Zha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnbd7oh1u4j5g30fsy5x.png" alt="Image description" width="880" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The POST is pretty simple. It uses the “insert” HDB Core operation, gets schema and table from the request route parameters, and the record sent along with is provided in the request body. An example of what that might look like is provided with the Postman screenshot. The GETs and the DELETE follow the same pattern of simplicity, although use different operations.&lt;/p&gt;

&lt;p&gt;And what about the routes that needed more finesse?&lt;/p&gt;

&lt;p&gt;In order for the PUT to perform as expected, any given attribute in the request body object will be updated, and any left out attribute will be null. Herein required getting all attributes on the table, done so with an HDB Core operation, “describe_table.” Once that was attained, each attribute of the table was iterated to assign a null value for any attribute that was left out of the request body object. HDB assigned attributes “&lt;strong&gt;createdtime&lt;/strong&gt;” and “&lt;strong&gt;updatedtime&lt;/strong&gt;” are skipped to maintain their values. And finally, a second HDB Core operation is performed within putHandler.js. This one is “update.” A variable, “put_query_body” has all needed attributes, either assigned through the request body, or made null, and it has the correct unique identifier, the hash_attribute from route params. This is provided to records to perform the update.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---2nQyChU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4pm9cd3i2hw0bioidiu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---2nQyChU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4pm9cd3i2hw0bioidiu.png" alt="Image description" width="880" height="229"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VILCrQ4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbyype9ger1r4d8zkjac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VILCrQ4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbyype9ger1r4d8zkjac.png" alt="Image description" width="880" height="951"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s what that means for your data:&lt;/p&gt;

&lt;p&gt;Let’s say the table in question is “dog”, and it has “dog_name”, “age”, “weight_lbs”, and “owner_name” attributes. Below is the record to be updated:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9v-GdRq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/al3olb9i2innam3lzjpj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9v-GdRq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/al3olb9i2innam3lzjpj.png" alt="Image description" width="486" height="278"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To update the record with PUT, you’d provide this in the request body:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Su-Zgwpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2axivd8ms0su5b34rwqj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Su-Zgwpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2axivd8ms0su5b34rwqj.png" alt="Image description" width="374" height="36"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your record will be completely replaced with the provided values and it will replace weight, and owner_name with null. This is the desired behavior of a PUT request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9v1MwLD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/feppow8uxlrh7tbvcxhf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9v1MwLD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/feppow8uxlrh7tbvcxhf.png" alt="Image description" width="466" height="274"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;A few words on the PATCH...The PATCH is very similar in terms of logic and code. The difference being that there’s no need to nullify any attributes. I still needed to get the attributes from the table with HDB Core to get the hash_attribute and then assign the route param. And finally to send a record object along with the update call to HDB Core. With the PATCH, all that needs updating is what’s provided in the request body. Using the example above, the same beginning record, and the same request body, the PATCH updated record would be:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUPeX9Cs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v1gp2nvq0kc0bepjysz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUPeX9Cs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v1gp2nvq0kc0bepjysz.png" alt="Image description" width="464" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How can you use this dynamic REST API Custom Functions template?&lt;/p&gt;

&lt;p&gt;To use this template, you'll need to be logged in, running HarperDB, have a local instance, and have some data to work with. If you don’t, please follow the steps below. I recommend following &lt;a href="https://www.youtube.com/watch?v=fAKZxK-XamM"&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; video (from the beginning until about 4:30) to get you through 1-3. I recommend &lt;a href="https://www.youtube.com/watch?v=rz6prItVJZU"&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; demo video if you’d like a visual aid for steps 4 and 5 (pick up around 13:00 until about 15:00).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Sign up/log in &lt;a href="https://studio.harperdb.io/sign-up"&gt;here&lt;/a&gt;&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Install and run HarperDB &lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Create a local instance (in Studio) &lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Build some demo data (in Studio) &lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Enable Custom Functions (in Studio) &lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Clone this Custom Functions template and party! (open in IDE) &lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, if you’ve been following along you will have gotten some familiarity with HarperDB Studio. It’s super easy to use and is a great tool for working with the core product. From here on, it’s great to open your Custom Functions project in your favorite IDE, like WebStorm. The “custom_functions” folder lives in the “hdb” folder. Any project you create in Custom Functions lives here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;      &lt;strong&gt;Test your endpoints with Postman &lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The repository includes a Postman collection, which will allow you to test the endpoints against your data. As the REST API template was dynamic, so are the URLs in the Postman collection. Here's a &lt;a href="https://identity.getpostman.com/login?continue=https%3A%2F%2Fgo.postman.co%2Fworkspace%2FMy-Workspace~58429cc6-621f-475d-8f01-b3cdfe0c9dd6%2Fenvironment%2F18074441-ed8f2c6b-63dd-4121-a71d-178ec5206cd0"&gt;&lt;strong&gt;link&lt;/strong&gt;&lt;/a&gt; to this project's environment variables. You will likely need to change some values to fit your project. You may also choose to hard-code the route for your needs, (ex: &lt;a href="http://localhost:9926/project/schema/table"&gt;http://localhost:9926/project/schema/table&lt;/a&gt; plus any necessary route parameter such as "id".)&lt;/p&gt;

&lt;p&gt;Reflection and/or TL;DR&lt;/p&gt;

&lt;p&gt;I made a dynamic REST API using HarperDB’s Custom Functions for developers to implement in their projects. The combination of a REST API and HarperDB reduces the number of servers needed, collapsing the stack, making your project just that much faster!&lt;/p&gt;

</description>
      <category>database</category>
      <category>javascript</category>
      <category>node</category>
      <category>serverless</category>
    </item>
    <item>
      <title>How to  fix the broken experience for Screenreader (Search field)</title>
      <author>Neha Sharma </author>
      <pubDate>Wed, 08 Dec 2021 16:20:53 +0000</pubDate>
      <link>https://dev.to/hellonehha/how-to-fix-the-broken-experience-for-screenreader-search-field-1d39</link>
      <guid>https://dev.to/hellonehha/how-to-fix-the-broken-experience-for-screenreader-search-field-1d39</guid>
      <description>&lt;p&gt;Hey Folks!!&lt;/p&gt;

&lt;p&gt;Do you know how screen readers perceive your code? How even a screenreader works? &lt;/p&gt;

&lt;p&gt;Today I will show you the experience of screenreader users. I will highlight the issues in the app and how to fix them. &lt;/p&gt;

&lt;p&gt;Let's consider an example: Header with brand logo, search input, and a button.&lt;/p&gt;

&lt;p&gt;You will learn:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;aria-label&lt;/li&gt;
&lt;li&gt;input type&lt;/li&gt;
&lt;li&gt;aria-live&lt;/li&gt;
&lt;li&gt;aria-role&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;All the demo is from Apple Mac and voiceover.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://youtu.be/wbjYUibJG_I"&gt;Watch the demo here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem:
&lt;/h2&gt;

&lt;p&gt;1) Screenreader is not able to recognize what field is it&lt;/p&gt;

&lt;p&gt;2) Screenreader is not able to notify when the error message comes on the screen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-dig-into-the-code"&gt;
  &lt;/a&gt;
  Let's dig into the code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Brand Logo&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"product name..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"search-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Search&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hide"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"search-errorMessage"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-fix-the-code"&gt;
  &lt;/a&gt;
  Lets fix the code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Brand Logo&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;submit=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Search"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Search items"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"search-button"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Search&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hide"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"region"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"search-errorMessage"&lt;/span&gt; &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"assertive"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1) We have added the &lt;code&gt;role=search&lt;/code&gt; with form&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;submit=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) We have added the &lt;code&gt;type=search&lt;/code&gt; and &lt;code&gt;aria-label="search"&lt;/code&gt; this will help the screen reader users. &lt;/p&gt;

&lt;p&gt;It is a must to have a label with every input tag. If the label is not there due to design then it is best to use &lt;code&gt;aria-label&lt;/code&gt; for screen readers.&lt;/p&gt;

&lt;p&gt;It is a must to add the correct attribute with the input tag. These attributes guide the screen reader's users on what the field is about.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Search"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Search items"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) We have added the &lt;code&gt;role&lt;/code&gt; and &lt;code&gt;aria-live&lt;/code&gt;. This will help screen reader users get notified as soon as the message change. (PS: I used JavaScript to add the dynamic content and change the visibility of the div)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;aria-live&lt;/code&gt; notify the screen reader users of any dynamic content change. Here I have to use the value &lt;code&gt;assertive&lt;/code&gt; which will announce all the notifications and pause other announcements (you can call it rude :) )&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hide"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"region"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"search-errorMessage"&lt;/span&gt; &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"assertive"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://youtu.be/x8bZQBHx_RA"&gt;Watch the video of demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Learning!!&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Let the games begin: My DevOps Journey starts today!</title>
      <author>Dominic Ross</author>
      <pubDate>Wed, 08 Dec 2021 16:20:28 +0000</pubDate>
      <link>https://dev.to/devops_dodo/let-the-games-begin-my-devops-journey-starts-today-234l</link>
      <guid>https://dev.to/devops_dodo/let-the-games-begin-my-devops-journey-starts-today-234l</guid>
      <description>&lt;p&gt;Today is the day!&lt;/p&gt;

&lt;p&gt;Today, I will go from knowing almost nothing about DevOps to... well, I hope &lt;em&gt;something&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I've been waiting for this day for nearly 2 months, and have slowly been getting nervous as the day has approached. I would be working a regular job at the moment, but my health has taken another turn, so I've been at home almost as long as I've been waiting for the course.&lt;/p&gt;

&lt;p&gt;2 months is a long time to be at home doing nothing. I've kept myself busy with little house chores I can physically do, but otherwise, my days have been very empty.&lt;/p&gt;

&lt;p&gt;Or at least they would have if I hadn't set myself a goal.&lt;/p&gt;

&lt;p&gt;In this post, I will share with you the lessons I've learnt from self-study and how I have adapted them to allow me to enter my virtual classroom today excited and ready to learn about DevOps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#potential-pitfalls-of-learning-from-home"&gt;
  &lt;/a&gt;
  Potential pitfalls of learning from home:
&lt;/h2&gt;

&lt;p&gt;This will not be the first time I try to learn an IT role and enter the field. This will actually be the fourth attempt at learning an IT skill. I have previously attempted to learn to become a Cisco Certified Network Associate (CCNA), become a web developer, and become an Android App developer from scratch. All three have failed for varying reasons, but the common reasons are &lt;strong&gt;Discipline&lt;/strong&gt;, &lt;strong&gt;Support&lt;/strong&gt; and &lt;strong&gt;set goals&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In all of my previous attempts, I have been very enthusiastic for the first couple of months of learning a new skill. My learning in the first few months has been excellent, as I've devoured the content to try and learn everything as quickly as possible.&lt;br&gt;
Eventually, the enthusiasm has worn off, and I've maybe sat down to learn once or twice a week. Eventually, it's been months since I looked at it, and can barely remember what I learned. There's just been no &lt;strong&gt;Discipline&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On those occasions, it's not unfair to say that my support has been minimal at best. Because I was learning alone, I had no one interested enough to bounce ideas off of, and no one to go and see to ask questions. Yes, I had access to resources online like StackOverflow and Reddit, but that's not the same as sitting down with someone who explains it to you till you 'get it'. There simply was no &lt;strong&gt;Support&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, as I said above, I had no discipline in my learning, it was all or nothing. This not only leads to burnout, but also to losing interest quite quickly. There were no &lt;strong&gt;Set Goals&lt;/strong&gt; that would help me see progress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keeping-the-mind-ticking-over"&gt;
  &lt;/a&gt;
  Keeping the mind ticking over:
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"If you wait to be offered an opportunity to learn, you will be&lt;br&gt;
waiting a long time."&lt;br&gt;
Peter Hutton | TEDxMelbourne&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I first heard about the possibility of doing a Skills Bootcamp (read about that in my &lt;a href="https://devops-dodo.hashnode.dev/devops-minus-1-day-what-is-a-skills-bootcamp"&gt;previous blog post in this series&lt;/a&gt;) I knew I was going to need to work hard and dedicate myself as much as I could to this program. Part of the requirements for getting on the course is that you agree to attend at least 90% of the sessions. This can be a big ask for someone trying to hold down a full-time job, or deal with a young family at the same time. Of course, exceptions can be made, all Purple Beard ask is that you keep your learning assistant advised.&lt;br&gt;
Still, I knew that going in without "warming up" wouldn't be best conducive to learning or retention. &lt;br&gt;
On many of the courses I looked at before choosing one, an ability to code was a strong recommendation (although not a requirement. Plenty of people have started these courses with very little knowledge and come out the other end fully capable). As I wasn't a stranger to coding (as mentioned above), I decided it was time to blow out the cobwebs and get my coding gears in workable shape before my course.&lt;/p&gt;

&lt;p&gt;I settled on learning Python, as it had often been recommended as a beginner-friendly language to learn. I started with apps like Mimo, SoloLearn and others, but found their "courses" rather skimpy on the details. I decided it was time to hit the books.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dummies-leads-the-way"&gt;
  &lt;/a&gt;
  "Dummies" Leads the way:
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"Tell me and I forget, teach me and I may remember, involve me and I learn.”&lt;br&gt;
― Benjamin Franklin.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have used the "For Dummies" series of books for many things in the past, from Buddhism and meditation to Coding and cooking. I have always found their writing style and structure to be engaging and educational, so when it came to choosing a book to learn Python, there was no hesitancy to head straight to their books.&lt;/p&gt;

&lt;p&gt;The first one I bought was useless, as it was 15 years out of date and was talking about the old version of Python. I managed to find a 7-in-1 book on Python from the "Dummies" series for the same price as the out of date one online, so promptly got it.&lt;/p&gt;

&lt;p&gt;The book that arrived teaches all the basics of Python in the first three mini-books and then allows you to expand and use that knowledge to learn a little about Artificial Intelligence (AI), Data Science, hardware interaction and finally robotics.&lt;/p&gt;

&lt;p&gt;I have so far finished the first three mini-books, and therefore learnt the basics of Python (more than enough for my DevOps course, my learning assistant tells me), but I would highly recommend this book to any new learners of Python. It's by no means perfect, I've found plenty of mistakes and typos as I read it, but will certainly give you a great understanding of Python and how it's used in various popular fields.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#book-and-language-chosen-how-did-i-learn-from-home"&gt;
  &lt;/a&gt;
  Book and language chosen, how did I learn from home?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---qvfAD_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638974715616/CWutnO5j6.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---qvfAD_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638974715616/CWutnO5j6.jpeg" alt="self-education-quotes-1.jpg" width="720" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I had my medium and subject chosen, I want to tell you what I did to prepare for my course.&lt;/p&gt;

&lt;p&gt;Being off work for so long and with no concrete date of when (or if) I would be going back, it would have been too easy to sit and watch Netflix all day or play on my Playstation till my manager let me go back to work (in fact, that's exactly what I'd done on previous occasions off sick from work). But with a goal in mind this time, I knew I couldn't 'slack off' for 6 weeks and then go in all guns blazing to 10-15 hours of study per week without feeling it.&lt;/p&gt;

&lt;p&gt;I, therefore, decided to use my Python learning as a warm-up for the course itself. I split each chapter into their sections and set myself a rota of doing a certain amount each day. I used the Pomodoro method (where you work for 25 minutes, rest for 5, work 25, rest 5, work 25, rest 5, work 25, rest 15) and during my work session, I would read my book and write the notes.&lt;/p&gt;


&lt;blockquote&gt; &lt;a href="https://www.instagram.com/p/CV_H69SD4gA/?utm_source=ig_embed&amp;amp;utm_campaign=loading"&gt;       View this post on Instagram            &lt;/a&gt;&lt;p&gt;&lt;a href="https://www.instagram.com/p/CV_H69SD4gA/?utm_source=ig_embed&amp;amp;utm_campaign=loading"&gt;A post shared by Dominic Ross (@youngdad33)&lt;/a&gt;&lt;/p&gt;


&lt;/blockquote&gt; 

&lt;h3&gt;
  &lt;a href="#tools-for-notes"&gt;
  &lt;/a&gt;
  Tools for notes:
&lt;/h3&gt;

&lt;p&gt;In my previous learning journey, I had used an app called &lt;a href="https://apps.apple.com/us/app/quiver-take-better-notes/id866773894?mt=12"&gt;Quiver&lt;/a&gt; on my MacBook, but seeing as I was now on a Chromebook, that was no longer a possibility. I did some research and found a suitable alternative in &lt;a href="//www.notion.so"&gt;Notion&lt;/a&gt;, and started writing my notes. Each chapter was a new page in my Notion workbook, and it slowly grew to have over a dozen pages split into separate topics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kArGZdWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638975824492/3dYXe3v1O.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kArGZdWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638975824492/3dYXe3v1O.png" alt="Screenshot of my Notion Python Notebook" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The benefit of using Notion (and other similar programmes) is that you can mix Markdown Text with Code snippets and images. I typically wrote my code in the code snippet feature, then paste a screenshot of the outcome from VS Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--USDRc_Kp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638976068225/GjBHiyVBiP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--USDRc_Kp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638976068225/GjBHiyVBiP.png" alt="Screenshot of one of my Python notes showing code, markdown and images" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-to-know-the-ide"&gt;
  &lt;/a&gt;
  Getting to know the IDE:
&lt;/h3&gt;

&lt;p&gt;Before I bought the Python All In One For Dummies book, I was using the text editor &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt;, created by the good people at Github. I had previously used and liked working with it (although I'm fairly sure I wasn't using it to its full potential).&lt;/p&gt;

&lt;p&gt;When I started reading the book, however, they encouraged you to use &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; (aka code) from Microsoft. I'll admit I was a little reluctant to do so, as I did like using Atom, but since both were available for Linux (the only way I could get it to run on our Chromebook), and I didn't have time to try and translate what they were doing in the book to what I needed to do on Atom, I opted to at least try VS Code.&lt;/p&gt;

&lt;p&gt;To my delight, I found that using Code was very much like using Atom and didn't appear to have anything missing. I was able to follow along with the instructions in the book (despite a few technical difficulties they didn't provide for as they wrote the book for windows and mac users) and got the same results they did. As it turns out, when we had our Onboarding session with Purple Beard, it turns out they teach using VS Code too, so that was a nice bonus.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good-working-environment"&gt;
  &lt;/a&gt;
  Good working environment:
&lt;/h3&gt;

&lt;p&gt;All of the above is great, but if you're exhausted and restless after one session, you won't be able to give your full attention to the rest of the course.&lt;br&gt;
Set yourself up for success with a good working environment all set up and ready to go for when your course starts.&lt;/p&gt;

&lt;p&gt;I've had nearly 2 months to prepare, and as well as the above steps, I've made sure that, when the time comes, I would be comfortable and ready to learn when my class started.&lt;/p&gt;

&lt;p&gt;Sitting on the sofa or bed with books dotted around you and your laptop balanced on your knee is not ideal. You need a dedicated space set up to learn from.&lt;/p&gt;

&lt;p&gt;I started out in a comfy chair with my legs up and a table to my side, and slowly added elements to help make the area more conducive to learning. I started with a book stand, to keep my book within view and readable without bending in all sorts of funny positions, I got a light to shine directly down on me to make sure I wasn't straining my eyes, and eventually went the whole 9 yards and got a desk and chair to stop me from getting a painful back and neck and to allow me to use a second screen.&lt;/p&gt;


&lt;blockquote&gt; &lt;a href="https://www.instagram.com/p/CWn9YNZD_Kt/?utm_source=ig_embed&amp;amp;utm_campaign=loading"&gt;       View this post on Instagram            &lt;/a&gt;&lt;p&gt;&lt;a href="https://www.instagram.com/p/CWn9YNZD_Kt/?utm_source=ig_embed&amp;amp;utm_campaign=loading"&gt;A post shared by Dominic Ross (@youngdad33)&lt;/a&gt;&lt;/p&gt;


&lt;/blockquote&gt; 

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;Learning from home can be tricky, and has the potential to leave you burnt out or disinterested altogether. With &lt;strong&gt;Discipline&lt;/strong&gt;, &lt;strong&gt;Support&lt;/strong&gt;, setting yourself easy to accomplish &lt;strong&gt;goals&lt;/strong&gt; and setting up a suitable working environment is crucial to successful studying and enjoying your topic.&lt;/p&gt;

&lt;p&gt;The same can be true of working on a Bootcamp, but going from nothing to BootCamp is difficult and could lead to burnout. If you're going to use a BootCamp to learn to code (or write or exercise or cook) be sure to build up those "muscles" so that you don't set yourself up to fail, but instead set yourself up for success.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>bootcamp</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to Build community centric Products in Tech</title>
      <author>Joshua Poddoku</author>
      <pubDate>Wed, 08 Dec 2021 16:19:49 +0000</pubDate>
      <link>https://dev.to/aviyel/how-to-build-community-centric-products-in-tech-28np</link>
      <guid>https://dev.to/aviyel/how-to-build-community-centric-products-in-tech-28np</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Community is the greatest asset for any product&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recently, I met Anirudh Warrier, a passionate community builder, ex-HackerEarthian on a community call. He is also a mental health ally, leading a Non-profit org, Citta India, as Head of Growth.&lt;/p&gt;

&lt;p&gt;From my observation, every community builder has some experience in diverse fields. Anirudh also has experience in Product Design, Mental Health, and Tech Evangelism. Understanding the Community becomes easier when you explore and learn people. Because in the end, you have to build a product for the people and not for yourself.&lt;/p&gt;

&lt;p&gt;He is currently working as Developer Marketing Manager at SAWO Labs, a Passwordless Authentication tool. His primary focus is to understand the Developers and improve the tool experience.&lt;/p&gt;

&lt;p&gt;Researching about UX, Design thinking helps build products that are compelling to use and habitual for users. Every community manager must learn to bridge the gap by analyzing what community needs and what should be avoided.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-community-a-funnel-for-acquisition"&gt;
  &lt;/a&gt;
  Is Community a funnel for acquisition?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZPpDMSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ia7zhn4gulrt9zqm0hm8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZPpDMSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ia7zhn4gulrt9zqm0hm8.png" alt="Image description" width="880" height="722"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-old-approach"&gt;
  &lt;/a&gt;
  The Old Approach
&lt;/h4&gt;

&lt;p&gt;Earlier, many communities and organizations acquired users for the product by funneling. It gives away the entire space and sets up the constraints for further processes by the organizations. This is a big mistake by many budding products and can also have higher chances of shifting from a community-centric approach.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Shows some good metrics&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Looks promising at the beginning&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Heads towards an inorganic audience&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Less scope of Engagement&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Diverts the entire product roadmap&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#community-is-a-loop"&gt;
  &lt;/a&gt;
  Community is a Loop
&lt;/h2&gt;

&lt;p&gt;To build a community-centric product, community has to be stronger more than anything! It plays a vital role in the entire journey of the product.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YmaaXfxY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecpyskwanmmhzu4c729p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YmaaXfxY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecpyskwanmmhzu4c729p.png" alt="Image description" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visitors/ Sign-ups might be high, but not many of them would be community members. Eventually, there wouldn't be any dynamic product evolution. But this can be quickly resolved when you make your community a loop and not a funnel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uOhTroEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5gb4exgtfchgls437yr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uOhTroEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5gb4exgtfchgls437yr.png" alt="Image description" width="500" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-community-is-a-recurring-loop"&gt;
  &lt;/a&gt;
  Why Community is a Recurring Loop?
&lt;/h3&gt;

&lt;p&gt;Let us take an example of 100 members, with 20 of them interested in a selected activity. If you take feedback from all of them, only one quality feedback may precisely match the company's vision. So, you can deprioritize the other feedback/ feature requests and proceed with the one you picked. All visitors are not community members in reality. There are three major activities in this loop: Acquisition, Engagement, and Revenue.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#acquisition"&gt;
  &lt;/a&gt;
  Acquisition
&lt;/h4&gt;

&lt;p&gt;This phase will also give you an idea of the user group to be acquired for your product. In the acquisition phase - you find your "actual" community members.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#engagement"&gt;
  &lt;/a&gt;
  Engagement
&lt;/h4&gt;

&lt;p&gt;Engaging the Community is the most crucial aspect of any product. In this phase, exclusive value-based content should be given to the acquired community members. This can be in the form of events, AMAs, Expert content, or anything that helps an individual member scale and stay with you.&lt;/p&gt;

&lt;p&gt;Remember to make the community "exclusive", not inclusive. Otherwise, This will cause delayed product updates in the future due to slower community growth.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#revenue"&gt;
  &lt;/a&gt;
  Revenue
&lt;/h4&gt;

&lt;p&gt;In this phase, we can see the outcome of the community-centric product.  &lt;strong&gt;Quality Acquisition&lt;/strong&gt; and &lt;strong&gt;Valuable Engagement&lt;/strong&gt; are the significant determinants. Here is where the Community starts to give back on its own. A Community can be either a USP for you or the direct consumer of the product. So these help in creating a revenue model which benefits the entire Community, and revenue increases organically.&lt;/p&gt;

&lt;p&gt;And it takes time, and you need to keep churning out more cycles of Acquisition and Revenue specifically.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-get-in-return-from-this-loop"&gt;
  &lt;/a&gt;
  What do you get in return from this loop?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;More matured Community.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dynamics of the product become faster and scalable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any individual does not set the constraints.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Values replace the constraints&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hit-the-sweet-spot"&gt;
  &lt;/a&gt;
  Hit the Sweet Spot
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SWfjQg3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s08p4fzgc29qkp2165je.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SWfjQg3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s08p4fzgc29qkp2165je.png" alt="Image description" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have ever used &lt;a href="https://www.dunzo.com/"&gt;Dunzo app&lt;/a&gt;, it has eye-catchy notifications - aka sweet spot; it helps deliver the message and value to the users. It is not traditional "marketing", &lt;strong&gt;but the conclusion is that the users should connect with the product very quickly&lt;/strong&gt;. Dunzo's creative approach increased their open rates by 40%, directly contributing to their revenue model. It can be something that differentiates your product.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Community also works similarly. Product is only one part of what you want to build.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#three-checkers-to-hit-the-sweet-spot"&gt;
  &lt;/a&gt;
  Three checkers to hit the sweet spot
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Will the Community care about my product? (product)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can the product add any kind of value for the Community? (value)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What am I trying to convey to my community at the moment? (messaging)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Make your messaging part - creative and connecting.&lt;/strong&gt;&lt;br&gt;
Make 2/10 people very special, and let them do the evangelism for you.&lt;br&gt;
The Messaging part should focus on a particular set of high-quality users and connect with their thought processes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-leverage-communities"&gt;
  &lt;/a&gt;
  How to leverage communities
&lt;/h2&gt;

&lt;p&gt;As an individual community member, you can leverage the power of communities by giving value. This section is exclusively for community enthusiasts to get started in this ecosystem. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-have-your-niche-double-down-on-it"&gt;
  &lt;/a&gt;
  1. Have your niche, double down on it
&lt;/h4&gt;

&lt;p&gt;Contribute to one great Community which connects you instead of joining so many communities and staying inactive. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-its-a-twoway-street"&gt;
  &lt;/a&gt;
  2. It's a two-way street
&lt;/h4&gt;

&lt;p&gt;If you're jumping into channels just for the resources, swags, or LoRs- then it will ultimately take you downwards.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-collaborate-within-the-community"&gt;
  &lt;/a&gt;
  3. Collaborate within the Community
&lt;/h4&gt;

&lt;p&gt;Connect with people, help each other by answering queries and respond by sharing thoughts.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-build-a-social-presence"&gt;
  &lt;/a&gt;
  4. Build a social presence
&lt;/h4&gt;

&lt;p&gt;Convert your activities into a meaningful social media post that helps you to boost your network.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started-to-enhance-the-community-experience"&gt;
  &lt;/a&gt;
  Get started to enhance the community experience.
&lt;/h2&gt;

&lt;p&gt;We have learnt that communities are the heart of the product. It is essential to keep an eye on effective engagement and acquisition of members. Giving actual value to the Community plays a massive role in improving the product experience. The Internet has enabled De-centralization, Remote communities, and digital sustainability.&lt;/p&gt;

&lt;p&gt;Aviyel is on a mission to scalable and monetizable avenues, and you can learn about opensource projects which can turn into potential products with the power of Community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aviyel.com/discussions#login"&gt;Get early access&lt;/a&gt; to our beta community and make your first step to building sustainable Opensource projects.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>watercooler</category>
      <category>product</category>
      <category>web3</category>
    </item>
    <item>
      <title>HTTPie for Web and Desktop</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Wed, 08 Dec 2021 16:16:06 +0000</pubDate>
      <link>https://dev.to/qainsights/httpie-for-web-and-desktop-1ioo</link>
      <guid>https://dev.to/qainsights/httpie-for-web-and-desktop-1ioo</guid>
      <description>&lt;p&gt;As a performance engineer, we use a variety of tools and utilities for performance testing, scripting, debugging, automation and more. In my last article, I mentioned &lt;a href="https://qainsights.com/httpie-for-performance-engineers/" rel="noreferrer noopener"&gt;HTTPie for Performance Engineers.&lt;/a&gt; Recently, HTTPie team released its web and desktop flavors of HTTPie. It is currently in beta. In this blog article, we are going to deep-dive into HTTPie for Web and Desktop.&lt;/p&gt;

&lt;h2&gt;What is HTTPie?&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;HTTPie (pronounced aitch-tee-tee-pie) is a command-line HTTP client. Its goal is to make CLI interaction with web services as human-friendly as possible. HTTPie is designed for testing, debugging, and generally interacting with APIs &amp;amp; HTTP servers.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Download HTTPie for Desktop&lt;/h2&gt;

&lt;p&gt;To download HTTPie for desktop, you need to sign up for beta access. You can sign up at https://httpie.io/product. Once you get the access, you can access HTTPie for Web and download HTTPie for the Desktop.&lt;/p&gt;

&lt;p&gt;HTTPie for desktop helps to test the APIs behind the corporate proxy. Here is how it looks when you launch the HTTPie for the desktop version.&lt;/p&gt;

&lt;p&gt;HTTPie for the desktop is built using the Electron - a framework to build cross-platform desktop apps using JavaScript, HTML, and CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-16.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mFZB32wd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-16.png" alt="HTTPie for Desktop - Dark theme (beta)" width="880" height="618"&gt;&lt;/a&gt;HTTPie for Desktop - Dark theme (beta)&lt;/p&gt;

&lt;h2&gt;Look and Feel of HTTPie for Desktop&lt;/h2&gt;

&lt;p&gt;The minimal design looks sleek and intuitive. You will get built-in dark and light themes at this moment: dark background with green and purple font colors. On full screen, it looks gorgeous. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-25.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bLg5Dckv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-25.png" alt="HTTPie in Light Theme" width="880" height="573"&gt;&lt;/a&gt;HTTPie in Light Theme&lt;/p&gt;

&lt;p&gt;By default, the HTTP method is GET. To change, click on GET to select the methods.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-17.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--poj6RmeG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-17.png" alt="HTTP Methods" width="362" height="305"&gt;&lt;/a&gt;HTTP Methods&lt;/p&gt;

&lt;p&gt;The user interface is self-explanatory. I have just pointed out where you can find the details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-18.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IvwldUMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-18.png" alt="HTTPie User Interface" width="880" height="574"&gt;&lt;/a&gt;HTTPie User Interface&lt;/p&gt;

&lt;p&gt;You can add the headers easily. Keep typing, it will auto-populate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-19.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zhv1ookS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-19.png" alt="Headers" width="342" height="336"&gt;&lt;/a&gt;Headers&lt;/p&gt;

&lt;p&gt;Only two authentication methods are now supported: Basic and Bearer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-20.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_vaKethZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-20.png" alt="Auth Methods" width="353" height="384"&gt;&lt;/a&gt;Auth Methods&lt;/p&gt;

&lt;p&gt;Payload supports text, file, and form.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-21.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5fsAg7o4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-21.png" alt="Payload" width="296" height="534"&gt;&lt;/a&gt;Payload&lt;/p&gt;

&lt;p&gt;The response pane displays the vitals such as response size, duration, and timestamp. It also supports various formats such as JSON, YAML, XML, HTML, and RAW.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-22.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CXa3LlmK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-22.png" alt="Response Pane" width="537" height="525"&gt;&lt;/a&gt;Response Pane&lt;/p&gt;

&lt;p&gt;To view the request preview, you can toggle the eye icon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-23.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JbFCF-3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-23.png" alt="Show Preview" width="492" height="181"&gt;&lt;/a&gt;Show Preview&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-24.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qb4nU5D1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-24-1024x213.png" alt="Preview" width="880" height="183"&gt;&lt;/a&gt;Preview&lt;/p&gt;

&lt;p&gt;For each send, the request will be saved automatically. If you close the HTTPie, the next time launch will restore your view. &lt;/p&gt;

&lt;p&gt;You don't get the developer tools even if you press &lt;code&gt;Ctrl + Shift + I&lt;/code&gt;. Also, there is no way to organize the requests at this moment. &lt;/p&gt;

&lt;p&gt;No proxy support either. Since this is a beta version, more features will be released eventually.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;HTTPie is a great utility for debugging, testing, and more for developers, automation engineers, security professionals, and performance engineers. With the cross-platform feature, it is now seamless to work in multiple environments. &lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>webperf</category>
      <category>performance</category>
      <category>testing</category>
    </item>
    <item>
      <title>Using CloudFormation to Automate Build, Test, and Deploy with CodePipeline</title>
      <author>Jenna Pederson</author>
      <pubDate>Wed, 08 Dec 2021 15:54:51 +0000</pubDate>
      <link>https://dev.to/aws/using-cloudformation-to-automate-build-test-and-deploy-with-codepipeline-l71</link>
      <guid>https://dev.to/aws/using-cloudformation-to-automate-build-test-and-deploy-with-codepipeline-l71</guid>
      <description>&lt;p&gt;In &lt;a href="https://jennapederson.com/blog/2021/6/21/provisioning-an-ec2-instance-with-cloudformation-part-1/"&gt;part 1&lt;/a&gt;, we automated the provisioning of an Amazon EC2 instance using AWS CloudFormation. In &lt;a href="https://jennapederson.com/blog/2021/6/28/provisioning-an-rds-database-with-cloudformation-part-2/"&gt;part 2&lt;/a&gt;, we added an Amazon RDS Postgresql database to the CloudFormation template from &lt;a href="https://jennapederson.com/blog/2021/6/21/provisioning-an-ec2-instance-with-cloudformation-part-1/"&gt;part 1&lt;/a&gt; so both the EC2 instance and the database can be provisioned together as a set of resources. Today in part 3, we will introduce a continuous integration/continuous deployment (CI/CD) pipeline to automate the build, test, and deploy phases of your release process. To do this, we’ll use AWS CodeDeploy and CodePipeline.&lt;/p&gt;

&lt;p&gt;As a reminder, here's what we've covered and where we're going:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;automate the provisioning of your EC2 instance using CloudFormation (&lt;a href="https://jennapederson.com/blog/2021/6/21/provisioning-an-ec2-instance-with-cloudformation-part-1/"&gt;part 1&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;add an RDS Postgresql database to your stack with CloudFormation (&lt;a href="https://jennapederson.com/blog/2021/6/28/provisioning-an-rds-database-with-cloudformation-part-2/"&gt;part 2&lt;/a&gt;), and&lt;/li&gt;
&lt;li&gt;create a CodePipeline with CloudFormation (this post, part 3).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To work through the examples in this post, you’ll need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an AWS account (you can create your account &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/"&gt;here&lt;/a&gt; if you don’t already have one),&lt;/li&gt;
&lt;li&gt;the AWS CLI installed (you can find instructions for installing the AWS CLI &lt;a href="https://aws.amazon.com/cli/"&gt;here&lt;/a&gt;), and&lt;/li&gt;
&lt;li&gt;a key-pair to use for SSH (you can create a key-pair following &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair"&gt;these instructions&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfamiliar with CloudFormation or feeling a little rusty? Check out &lt;a href="https://jennapederson.com/blog/2021/6/21/provisioning-an-ec2-instance-with-cloudformation-part-1/"&gt;part 1&lt;/a&gt; or my &lt;a href="https://jennapederson.com/blog/2021/5/10/introduction-to-aws-cloudformation/"&gt;Intro to CloudFormation post&lt;/a&gt; before getting started.&lt;/p&gt;

&lt;p&gt;Just want the code? Grab it &lt;a href="https://github.com/jennapederson/cloudformation-examples"&gt;here&lt;/a&gt; and then check out the buildspec, appspec, and scripts &lt;a href="https://github.com/jennapederson/hello-express"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prepare-ec2-instance"&gt;
  &lt;/a&gt;
  Prepare EC2 Instance
&lt;/h2&gt;

&lt;p&gt;First, we’ll need to prepare the EC2 instance so that we can deploy our app to it. We’ll create an EC2 instance role and a CodeDeploy trust role, install the CodeDeploy agent, and tag the instance or instance we want to deploy to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-ec2-instance-role"&gt;
  &lt;/a&gt;
  1. Create EC2 Instance Role
&lt;/h3&gt;

&lt;p&gt;In the CloudFormation template that creates your EC2 instance, create the following new resources, &lt;code&gt;InstanceRole&lt;/code&gt;, &lt;code&gt;InstanceRolePolicies&lt;/code&gt;, and &lt;code&gt;InstanceRoleInstanceProfile&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;InstanceRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::IAM::Role&lt;/span&gt;
  &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;AssumeRolePolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
          &lt;span class="na"&gt;Principal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ec2.amazonaws.com&lt;/span&gt;
          &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sts:AssumeRole&lt;/span&gt;
    &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;

&lt;span class="na"&gt;InstanceRolePolicies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::IAM::Policy&lt;/span&gt;
  &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;PolicyName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;InstanceRole&lt;/span&gt;
    &lt;span class="na"&gt;PolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
          &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;autoscaling:Describe*&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;cloudformation:Describe*&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;cloudformation:GetTemplate&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;s3:Get*&lt;/span&gt;
          &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;
    &lt;span class="na"&gt;Roles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;InstanceRole'&lt;/span&gt;

&lt;span class="na"&gt;InstanceRoleInstanceProfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::IAM::InstanceProfile&lt;/span&gt;
  &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;
    &lt;span class="na"&gt;Roles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;InstanceRole'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These resources create an instance profile to pass an IAM role to an EC2 instance. This allows the EC2 instance to do things like get the CodeDeploy agent from S3.&lt;/p&gt;

&lt;p&gt;Next, we’ll add the &lt;code&gt;IamInstanceProfile&lt;/code&gt; property to the EC2 instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;WebAppInstance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="s"&gt;IamInstanceProfile&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;InstanceRoleInstanceProfile'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-install-codedeploy-agent"&gt;
  &lt;/a&gt;
  2. Install CodeDeploy Agent
&lt;/h3&gt;

&lt;p&gt;The CodeDeploy agent will be installed on each EC2 instance you want to deploy your app to and helps CodeDeploy communicate with your EC2 instance for deployments. First, you’ll include metadata in the &lt;code&gt;AWS::CloudFormation::Init&lt;/code&gt; key, which will be used by the &lt;code&gt;cfn-init&lt;/code&gt; helper script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;WebAppInstance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;...&lt;/span&gt;
  &lt;span class="s"&gt;Metadata&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;AWS::CloudFormation::Init:&lt;/span&gt;
      &lt;span class="s"&gt;services&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;sysvint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;codedeploy-agent&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;true'&lt;/span&gt;
            &lt;span class="na"&gt;ensureRunning&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;true'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we’ll add the &lt;code&gt;UserData&lt;/code&gt; key, which allows us to pass user data to the EC2 instance to perform automated configuration tasks and run scripts after the instance starts up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;WebAppInstance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;...&lt;/span&gt;
        &lt;span class="s"&gt;UserData&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Base64&lt;/span&gt;
          &lt;span class="s"&gt;Fn::Join:&lt;/span&gt;
            &lt;span class="s"&gt;- ''&lt;/span&gt;
            &lt;span class="s"&gt;- - "#!/bin/bash -ex\n"&lt;/span&gt;
              &lt;span class="s"&gt;- "yum update -y aws-cfn-bootstrap\n"&lt;/span&gt;
              &lt;span class="s"&gt;- "yum install -y aws-cli\n"&lt;/span&gt;
              &lt;span class="s"&gt;- "yum install -y ruby\n"&lt;/span&gt;
              &lt;span class="s"&gt;- "iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 3000\n"&lt;/span&gt;
              &lt;span class="s"&gt;- "echo 'iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 3000' &amp;gt;&amp;gt; /etc/rc.local\n"&lt;/span&gt;
              &lt;span class="s"&gt;- "# Helper function.\n"&lt;/span&gt;
              &lt;span class="s"&gt;- "function error_exit\n"&lt;/span&gt;
              &lt;span class="s"&gt;- "{\n"&lt;/span&gt;
              &lt;span class="s"&gt;- '  /opt/aws/bin/cfn-signal -e 1 -r "$1" '''&lt;/span&gt;
              &lt;span class="s"&gt;- !Ref 'WaitHandle'&lt;/span&gt;
              &lt;span class="s"&gt;- "'\n"&lt;/span&gt;
              &lt;span class="s"&gt;- "  exit 1\n"&lt;/span&gt;
              &lt;span class="s"&gt;- "}\n"&lt;/span&gt;
              &lt;span class="s"&gt;- "# Install the AWS CodeDeploy Agent.\n"&lt;/span&gt;
              &lt;span class="s"&gt;- "cd /home/ec2-user/\n"&lt;/span&gt;
              &lt;span class="s"&gt;- "aws s3 cp 's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm'\&lt;/span&gt;
                &lt;span class="s"&gt;\ . || error_exit 'Failed to download AWS CodeDeploy Agent.'\n"&lt;/span&gt;
              &lt;span class="s"&gt;- "yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to\&lt;/span&gt;
                &lt;span class="s"&gt;\ install AWS CodeDeploy Agent.' \n"&lt;/span&gt;
              &lt;span class="s"&gt;- '/opt/aws/bin/cfn-init -s '&lt;/span&gt;
              &lt;span class="s"&gt;- !Ref 'AWS::StackId'&lt;/span&gt;
              &lt;span class="s"&gt;- ' -r WebAppInstance --region '&lt;/span&gt;
              &lt;span class="s"&gt;- !Ref 'AWS::Region'&lt;/span&gt;
              &lt;span class="s"&gt;- " || error_exit 'Failed to run cfn-init.'\n"&lt;/span&gt;
              &lt;span class="s"&gt;- "# All is well, so signal success.\n"&lt;/span&gt;
              &lt;span class="s"&gt;- /opt/aws/bin/cfn-signal -e 0 -r "AWS CodeDeploy Agent setup complete."&lt;/span&gt;
                &lt;span class="s"&gt;'&lt;/span&gt;
              &lt;span class="s"&gt;- !Ref 'WaitHandle'&lt;/span&gt;
              &lt;span class="s"&gt;- "'\n"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This installs a few helper packages like the &lt;code&gt;aws-cli&lt;/code&gt; and &lt;code&gt;aws-cfn-bootstrap&lt;/code&gt;, and then installs the CodeDeploy agent (by copying it from S3). The &lt;code&gt;cfn-init&lt;/code&gt; script grabs the metadata we added earlier and ensures those services are enabled and running. The &lt;code&gt;cfn-signal&lt;/code&gt; helper script signals to CloudFormation that the instance had been successfully created or updated.&lt;/p&gt;

&lt;p&gt;Finally, add the following two resources that are used in the &lt;code&gt;UserData&lt;/code&gt; we just added so that CloudFormation waits until the &lt;code&gt;UserData&lt;/code&gt; scripts are finished running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;WaitHandle&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::CloudFormation::WaitConditionHandle&lt;/span&gt;
&lt;span class="na"&gt;WaitCondition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::CloudFormation::WaitCondition&lt;/span&gt;
  &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Handle&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;WaitHandle'&lt;/span&gt;
    &lt;span class="na"&gt;Timeout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;900'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-tag-the-instances"&gt;
  &lt;/a&gt;
  3. Tag the Instances
&lt;/h3&gt;

&lt;p&gt;Next, we need to tag the EC2 instances. CodeDeploy will use these tags to identify which instances to deploy to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;WebAppInstance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="s"&gt;Tags&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CodeDeployTag'&lt;/span&gt;
        &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CodeDeployDemo'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-create-codedeploy-trust-role"&gt;
  &lt;/a&gt;
  4. Create CodeDeploy Trust Role
&lt;/h3&gt;

&lt;p&gt;We also need to add a CodeDeploy trust role so that CodeDeploy has access to work with the EC2 instance. Add the following two resources:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;CodeDeployTrustRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::IAM::Role&lt;/span&gt;
  &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;AssumeRolePolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Sid&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1'&lt;/span&gt;
          &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
          &lt;span class="na"&gt;Principal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;codedeploy.us-east-1.amazonaws.com&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;codedeploy.us-west-2.amazonaws.com&lt;/span&gt;
          &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sts:AssumeRole&lt;/span&gt;
    &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;
&lt;span class="na"&gt;CodeDeployRolePolicies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::IAM::Policy&lt;/span&gt;
  &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;PolicyName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CodeDeployPolicy&lt;/span&gt;
    &lt;span class="na"&gt;PolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
          &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;
          &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ec2:Describe*&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
          &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;
          &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;autoscaling:CompleteLifecycleAction&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;autoscaling:DeleteLifecycleHook&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;autoscaling:DescribeLifecycleHooks&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;autoscaling:DescribeAutoScalingGroups&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;autoscaling:PutLifecycleHook&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;autoscaling:RecordLifecycleActionHeartbeat&lt;/span&gt;
    &lt;span class="na"&gt;Roles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CodeDeployTrustRole'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This trust role will be used in the next section when we configure the CodePipeline. We’ll pass the ARN of this trust role to that CloudFormation template, so let’s add this as an &lt;code&gt;Output&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;...&lt;/span&gt;
  &lt;span class="s"&gt;CodeDeployTrustRoleARN&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CodeDeployTrustRole.Arn'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-create-the-stack"&gt;
  &lt;/a&gt;
  5. Create the stack
&lt;/h3&gt;

&lt;p&gt;And finally, we’ll need to create the stack:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws cloudformation create-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; CloudFormationEc2Example &lt;span class="nt"&gt;--template-body&lt;/span&gt; file://07_ec2_codedeploy.yaml &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--parameters&lt;/span&gt; &lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;AvailabilityZone,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;us-east-1a &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;EnvironmentType,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;dev &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;KeyPairName,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;jenna &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DBPassword,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;Abcd1234 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--capabilities&lt;/span&gt; CAPABILITY_IAM
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, if you’re updating the stack you created in &lt;a href="https://jennapederson.com/blog/2021/6/28/provisioning-an-rds-database-with-cloudformation-part-2/"&gt;part 2&lt;/a&gt;, you can use the &lt;code&gt;update-stack&lt;/code&gt; command instead.&lt;/p&gt;

&lt;p&gt;Once we’ve created the EC2 instance set up for CodeDeploy, we’ll be ready to create the CodePipeline pipeline.&lt;/p&gt;

&lt;p&gt;To view the full version of this template, check it out &lt;a href="https://github.com/jennapederson/cloudformation-examples/blob/main/07_ec2_codedeploy.yaml"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-codepipeline-pipeline"&gt;
  &lt;/a&gt;
  Create CodePipeline pipeline
&lt;/h2&gt;

&lt;p&gt;The pipeline we are building will have three stages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A Source stage to pull our code from the GitHub repository. The Source stage will use a CodeStarConnection and an S3 bucket.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A Build stage to build the source code into an artifact. The Build stage will use a CodeBuild Project and the same S3 bucket.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A Deploy stage to deploy the artifact to the EC2 instance. The Deploy stage will use a CodeDeploy Application and a CodeDeploy DeploymentGroup.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, we’ll need an app to deploy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-prepare-the-app-to-deploy"&gt;
  &lt;/a&gt;
  1. Prepare the App to Deploy
&lt;/h3&gt;

&lt;p&gt;You can fork the &lt;a href="https://github.com/jennapederson/hello-express"&gt;hello-express&lt;/a&gt; repo into your own github account. This is a simple Node/Express web app. For the purposes of this demo, the most interesting parts are the &lt;code&gt;buildspec.yml&lt;/code&gt; and &lt;code&gt;appspec.yml&lt;/code&gt; files, and scripts in the &lt;code&gt;bin&lt;/code&gt; directory:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://github.com/jennapederson/hello-express/blob/main/buildspec.yml"&gt;buildspec.yml&lt;/a&gt; file is a specification file that contains build commands and configuration that are used to build a CodeBuild project.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/jennapederson/hello-express/blob/main/appspec.yml"&gt;appspec.yml&lt;/a&gt; file is a specification file that defines a series of lifecycle hooks for a CodeDeploy deployment.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/jennapederson/hello-express/tree/main/bin"&gt;bin&lt;/a&gt; directory contains the &lt;code&gt;www&lt;/code&gt; start script for the app, and the scripts for each of the lifecycle hooks. You can read more about the lifecycle hooks &lt;a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-add-parameters"&gt;
  &lt;/a&gt;
  2. Add Parameters
&lt;/h3&gt;

&lt;p&gt;Then, we’ll need the following input Parameters for our template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;GitHubRepo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;

  &lt;span class="na"&gt;GitHubBranch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;

  &lt;span class="na"&gt;GitHubUser&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;

  &lt;span class="na"&gt;CodeDeployServiceRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;A service role ARN granting CodeDeploy permission to make calls to EC2 instances with CodeDeploy agent installed.&lt;/span&gt;

  &lt;span class="na"&gt;TagKey&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The EC2 tag key that identifies this as a target for deployments.&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CodeDeployTag&lt;/span&gt;
    &lt;span class="na"&gt;AllowedPattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;[\x20-\x7E]*'&lt;/span&gt;
    &lt;span class="na"&gt;ConstraintDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Can contain only ASCII characters.&lt;/span&gt;
  &lt;span class="na"&gt;TagValue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The EC2 tag value that identifies this as a target for deployments.&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CodeDeployDemo&lt;/span&gt;
    &lt;span class="na"&gt;AllowedPattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;[\x20-\x7E]*'&lt;/span&gt;
    &lt;span class="na"&gt;ConstraintDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Can contain only ASCII characters.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-create-service-roles"&gt;
  &lt;/a&gt;
  3. Create Service Roles
&lt;/h3&gt;

&lt;p&gt;In order for CodeBuild to access S3 to put the built artifact into the bucket, we'll need to create a service role, &lt;code&gt;CodeBuildServiceRole&lt;/code&gt;. We’ll need a second service role, &lt;code&gt;CodePipelineServiceRole&lt;/code&gt;, which allows CodePipeline to get the source code from the GitHub connection, to start builds, to get the artifact from the bucket, and to create and deploy the app. Add these two IAM resources:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;CodeBuildServiceRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::IAM::Role&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;
      &lt;span class="na"&gt;AssumeRolePolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2012-10-17&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
            &lt;span class="na"&gt;Principal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;Service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;codebuild.amazonaws.com&lt;/span&gt;
            &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sts:AssumeRole&lt;/span&gt;
      &lt;span class="na"&gt;Policies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;PolicyName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;logs"&lt;/span&gt;
          &lt;span class="na"&gt;PolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;2012-10-17"&lt;/span&gt;
            &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt;
                  &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Allow"&lt;/span&gt;
                  &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;logs:CreateLogGroup&lt;/span&gt;
                      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;logs:CreateLogStream&lt;/span&gt;
                      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;logs:PutLogEvents&lt;/span&gt;
                      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ecr:GetAuthorizationToken&lt;/span&gt;
                      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ssm:GetParameters&lt;/span&gt;
                  &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;PolicyName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;S3"&lt;/span&gt;
          &lt;span class="na"&gt;PolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;2012-10-17"&lt;/span&gt;
            &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt;
                  &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Allow"&lt;/span&gt;
                  &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;s3:GetObject&lt;/span&gt;
                      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;s3:PutObject&lt;/span&gt;
                      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;s3:GetObjectVersion&lt;/span&gt;
                  &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;arn:aws:s3:::${ArtifactBucket}/*&lt;/span&gt;

  &lt;span class="na"&gt;CodePipelineServiceRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::IAM::Role&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;
      &lt;span class="na"&gt;AssumeRolePolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2012-10-17&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
            &lt;span class="na"&gt;Principal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;Service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;codepipeline.amazonaws.com&lt;/span&gt;
            &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sts:AssumeRole&lt;/span&gt;
      &lt;span class="na"&gt;Policies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;PolicyName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;root&lt;/span&gt;
          &lt;span class="na"&gt;PolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2012-10-17&lt;/span&gt;
            &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;arn:aws:s3:::${ArtifactBucket}/*&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;arn:aws:s3:::${ArtifactBucket}&lt;/span&gt;
                &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
                &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;s3:*&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
                &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
                &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;codebuild:StartBuild&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;codebuild:BatchGetBuilds&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;iam:PassRole&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;CodeStarConnection&lt;/span&gt;
                &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
                &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;codestar-connections:UseConnection&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
                &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
                &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;codedeploy:CreateDeployment&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;codedeploy:CreateDeploymentGroup&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;codedeploy:GetApplication&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;codedeploy:GetApplicationRevision&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;codedeploy:GetDeployment&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;codedeploy:GetDeploymentConfig&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;codedeploy:RegisterApplicationRevision&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-create-the-source-stage"&gt;
  &lt;/a&gt;
  4. Create the Source Stage
&lt;/h3&gt;

&lt;p&gt;For the Source stage, we’ll create a CodeStar Connection and an S3 Bucket.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Create a CodeStarConnection&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
When we set up the pipeline, we’ll have a Source stage the pulls our source code from GitHub. To do this, we’ll need to create a CodeStarConnection for GitHub. This will give our pipeline access to a GitHub repository. We’ll use CloudFormation to create this by adding the resource to our template, but there will be a manual step to change the connection from Pending to Available after the first time we apply the template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;CodeStarConnection&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;AWS::CodeStarConnections::Connection'&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ConnectionName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CfnExamplesGitHubConnection&lt;/span&gt;
      &lt;span class="na"&gt;ProviderType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GitHub&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Create S3 Bucket to Hold Artifacts&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
We’ll need a place to store the build artifacts so we’ll create an S3 bucket. Add the following S3 resource to your template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;ArtifactBucket&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::S3::Bucket&lt;/span&gt;
    &lt;span class="na"&gt;DeletionPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Delete&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Create the Stage&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Then we’ll create the first stage of the pipeline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Pipeline&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::CodePipeline::Pipeline&lt;/span&gt;
  &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;RoleArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;CodePipelineServiceRole.Arn&lt;/span&gt;
    &lt;span class="na"&gt;ArtifactStore&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;S3&lt;/span&gt;
      &lt;span class="na"&gt;Location&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;ArtifactBucket&lt;/span&gt;
    &lt;span class="na"&gt;Stages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Source&lt;/span&gt;
        &lt;span class="na"&gt;Actions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;App&lt;/span&gt;
            &lt;span class="na"&gt;ActionTypeId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;Category&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Source&lt;/span&gt;
              &lt;span class="na"&gt;Owner&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS&lt;/span&gt;
              &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1'&lt;/span&gt;
              &lt;span class="na"&gt;Provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CodeStarSourceConnection&lt;/span&gt;
            &lt;span class="na"&gt;Configuration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;ConnectionArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;CodeStarConnection&lt;/span&gt;
              &lt;span class="na"&gt;BranchName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;GitHubBranch&lt;/span&gt;
              &lt;span class="na"&gt;FullRepositoryId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;${GitHubUser}/${GitHubRepo}&lt;/span&gt;
            &lt;span class="na"&gt;OutputArtifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AppArtifact&lt;/span&gt;
            &lt;span class="na"&gt;RunOrder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the CodeStarSourceConnection resource we created above, this will configure it to use the branch, GitHub user, and repository name based on the input parameters.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-create-build-stage"&gt;
  &lt;/a&gt;
  5. Create Build Stage
&lt;/h3&gt;

&lt;p&gt;For the Build stage, we’ll create a CodeBuild Project that indicates what kind of environment to build the code in. Here, we’re using a Docker Linux container. We’ll also set the service role to the service role we created earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;CodeBuildProject&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::CodeBuild::Project&lt;/span&gt;
  &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Artifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CODEPIPELINE&lt;/span&gt;
    &lt;span class="na"&gt;Source&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CODEPIPELINE&lt;/span&gt;
      &lt;span class="na"&gt;BuildSpec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildspec.yml&lt;/span&gt;
    &lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ComputeType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;BUILD_GENERAL1_SMALL&lt;/span&gt;
      &lt;span class="na"&gt;Image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws/codebuild/docker:17.09.0&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;LINUX_CONTAINER&lt;/span&gt;
    &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;AWS::StackName&lt;/span&gt;
    &lt;span class="na"&gt;ServiceRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;CodeBuildServiceRole&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to add the Build stage to the pipeline we started in the last step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
  &lt;span class="na"&gt;Actions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
      &lt;span class="na"&gt;ActionTypeId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Category&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
        &lt;span class="na"&gt;Owner&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS&lt;/span&gt;
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1'&lt;/span&gt;
        &lt;span class="na"&gt;Provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CodeBuild&lt;/span&gt;
      &lt;span class="na"&gt;Configuration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;ProjectName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;CodeBuildProject&lt;/span&gt;
      &lt;span class="na"&gt;InputArtifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AppArtifact&lt;/span&gt;
      &lt;span class="na"&gt;OutputArtifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;BuildOutput&lt;/span&gt;
      &lt;span class="na"&gt;RunOrder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will also use the same S3 bucket from a the previous step to store the build output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-create-deploy-stage"&gt;
  &lt;/a&gt;
  6. Create Deploy Stage
&lt;/h3&gt;

&lt;p&gt;In the last stage, Deploy, we’ll need a CodeDeploy Application and a CodeDeploy DeploymentGroup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;CodeDeployApplication&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::CodeDeploy::Application&lt;/span&gt;

&lt;span class="na"&gt;CodeDeployGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::CodeDeploy::DeploymentGroup&lt;/span&gt;
  &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;ApplicationName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;CodeDeployApplication&lt;/span&gt;
    &lt;span class="na"&gt;Ec2TagFilters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;TagKey'&lt;/span&gt;
        &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;TagValue'&lt;/span&gt;
        &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;KEY_AND_VALUE&lt;/span&gt;
    &lt;span class="na"&gt;ServiceRoleArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CodeDeployServiceRole'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The DeploymentGroup uses the &lt;code&gt;EC2TagFilters&lt;/code&gt; to specify which group of EC2 instances to deploy to. When we setup the EC2 instance above, we tagged it with a tag/value that is used here. We also set the service role to the one we created earlier.&lt;/p&gt;

&lt;p&gt;Then we add the final stage to the pipeline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy&lt;/span&gt;
  &lt;span class="na"&gt;Actions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy&lt;/span&gt;
      &lt;span class="na"&gt;ActionTypeId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Category&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy&lt;/span&gt;
        &lt;span class="na"&gt;Owner&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS&lt;/span&gt;
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1'&lt;/span&gt;
        &lt;span class="na"&gt;Provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CodeDeploy&lt;/span&gt;
      &lt;span class="na"&gt;Configuration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;ApplicationName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;CodeDeployApplication&lt;/span&gt;
        &lt;span class="na"&gt;DeploymentGroupName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;CodeDeployGroup&lt;/span&gt;
      &lt;span class="na"&gt;InputArtifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;BuildOutput&lt;/span&gt;
      &lt;span class="na"&gt;RunOrder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-add-outputs"&gt;
  &lt;/a&gt;
  7. Add Outputs
&lt;/h3&gt;

&lt;p&gt;Last, we need to add an Output to our template to give us the fully URL to view our pipeline in the AWS Console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;PipelineUrl&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To view the full version of this template, check it out &lt;a href="https://github.com/jennapederson/cloudformation-examples/blob/main/08_pipeline.yaml"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-create-the-stack"&gt;
  &lt;/a&gt;
  8. Create the Stack
&lt;/h3&gt;

&lt;p&gt;Now that we have the pipeline template created, we can create the stack. We’ll need to copy CodeDeployTrustRoleARN Output from previous EC2 stack, which you can grab from the Outputs tab in the AWS Console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zh5kZfEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goxguzvkj0mz2fgzamba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zh5kZfEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goxguzvkj0mz2fgzamba.png" alt="CloudFormation Stack Outputs tab in the AWS Console" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, run &lt;code&gt;create-stack&lt;/code&gt; at the command line, replacing &lt;code&gt;CODE_DEPLOY_SERVICE_ROLE_ARN&lt;/code&gt; below with the ARN you just copied.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws cloudformation create-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; CloudFormationPipelineExample &lt;span class="nt"&gt;--template-body&lt;/span&gt; file://08_pipeline.yaml &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--parameters&lt;/span&gt; &lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;GitHubRepo,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;hello-express &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;GitHubUser,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;jennapederson &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;CodeDeployServiceRole,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;CODE_DEPLOY_SERVICE_ROLE_ARN &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--capabilities&lt;/span&gt; CAPABILITY_IAM
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because this template creates IAM roles, we also need to tell CloudFormation that this capability (creating IAM resources) is allowed to be used by specifying the &lt;code&gt;--capabilities&lt;/code&gt; option.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-make-codestarconnection-available"&gt;
  &lt;/a&gt;
  9. Make CodeStarConnection Available
&lt;/h3&gt;

&lt;p&gt;Once the stack is created successfully, you'll need to change the CodeStarConnection from Pending to Available. To do this, head over to the AWS Console and find your newly created stack. On the Outputs tab, click the link to go to your new pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EqKIlAX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nchd3p4dasrjsqq778n2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EqKIlAX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nchd3p4dasrjsqq778n2.png" alt="CloudFormation Stack Outputs tab in the AWS Console" width="880" height="363"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the left-hand menu under Settings, click Connections. Select the new connection and click the "Update pending connection" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YvcMpCWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqj016wdj0k36bu1awll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YvcMpCWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqj016wdj0k36bu1awll.png" alt="CodeStar Connection Settings" width="880" height="217"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll need to give GitHub access to your account and the repository before the connection will become available. You can read more about that &lt;a href="https://docs.aws.amazon.com/dtconsole/latest/userguide/connections-create-github.html"&gt;here&lt;/a&gt; in the section "To create a connection to GitHub."&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-retry-the-source-stage"&gt;
  &lt;/a&gt;
  10. Retry the Source Stage
&lt;/h3&gt;

&lt;p&gt;Now that your CodeStarConnection is Available, head back to your pipeline and note that the Source stage has failed because of the Pending CodeStarConnection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HlI_EcJs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vu54emdkrihxmh3o0lx0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HlI_EcJs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vu54emdkrihxmh3o0lx0.png" alt="CodePipeline pipeline showing a Source stage failure" width="880" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the "Retry" button next to the Source stage to restart it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BFr4CN4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqhcbqf5y4kp86udz153.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BFr4CN4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqhcbqf5y4kp86udz153.png" alt="CodePipeline pipeline showing the Retry button for the failed Source stage" width="880" height="523"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your pipeline will restart by pulling the source code from GitHub, build the app, and then deploy the artifact to your EC2 instance! When complete, you can grab the &lt;code&gt;WebServerPublicDNS&lt;/code&gt; URL from your EC2 stack and open it in a browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j21YmDmu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fg50e0pwq5jjgxu1b3b1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j21YmDmu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fg50e0pwq5jjgxu1b3b1.png" alt="CloudFormation Stack Outputs tab in the AWS Console" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you will see Hello, Express show in your browser!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GjYOVmWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjek6fszct6gwp18snce.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GjYOVmWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjek6fszct6gwp18snce.png" alt="The Express app running in the browser" width="877" height="319"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-learned"&gt;
  &lt;/a&gt;
  What you learned
&lt;/h2&gt;

&lt;p&gt;In this post, we enhanced the CloudFormation template from &lt;a href="https://jennapederson.com/blog/2021/6/28/provisioning-an-rds-database-with-cloudformation-part-2/"&gt;part 2&lt;/a&gt; to install CodeDeploy agent and tag the EC2 instances you want to deploy to. Then we created a new template that sets up a Source, Build, and Deploy stage for a CodePipeline complete with a CodeStarConnection, CodeBuild project, and a CodeDeploy application. Now you have a pipeline that will pull source code, build your app, and deploy it to EC2 when there are changes to a specific branch in a GitHub repository.&lt;/p&gt;

&lt;p&gt;You can grab the final CloudFormation template we created &lt;a href="https://github.com/jennapederson/cloudformation-examples"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Like what you read? Follow me here on &lt;a href="https://dev.to/jennapederson"&gt;Dev.to&lt;/a&gt; or on &lt;a href="https://twitter.com/jennapederson"&gt;Twitter&lt;/a&gt; to stay updated!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloudformation</category>
      <category>codepipeline</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
