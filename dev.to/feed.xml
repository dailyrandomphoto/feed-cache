<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Tesla Pushes Out Dangerous Software Update, Bungles Rollback Attempt</title>
      <author>Ben Halpern</author>
      <pubDate>Mon, 25 Oct 2021 00:50:35 +0000</pubDate>
      <link>https://dev.to/ben/tesla-pushes-out-dangerous-software-update-bungles-rollback-attempt-5hl4</link>
      <guid>https://dev.to/ben/tesla-pushes-out-dangerous-software-update-bungles-rollback-attempt-5hl4</guid>
      <description>&lt;p&gt;There are a lot of headlines about Tesla that overstate a story for clicks, and I can assure you this is not one of them.&lt;/p&gt;

&lt;p&gt;Before I'm accused of being a hater: I am a Tesla owner and shareholder. I'm no Elon Musk fanboy, but I definitely root on Tesla's environmentally-driven mission of &lt;a href="https://www.tesla.com/about"&gt;accelerating the world’s transition to sustainable energy&lt;/a&gt;. I'll also say that I personally hope this does not result in reactionary regulation of autonomous driving software in the USA because current rules seem reasonable and I don't necessarily trust that changes would happen in good faith.&lt;/p&gt;

&lt;p&gt;And major hugops to all the developers and admins doing their best with all of this — I'm posting this on DEV because it's an interesting software story that deserves attention, not to be critical of the engineering teams. They strike me as very misssion-driven over there, and are generally doing incredible things.&lt;/p&gt;

&lt;p&gt;With all that said, this was a doozy...&lt;/p&gt;

&lt;p&gt;Here's what went down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tesla was set to release FSD Beta 10.3 on Friday night. &lt;a href="https://twitter.com/elonmusk/status/1451907229796417542"&gt;It gets delayed due to regressions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rollout happens Saturday night.&lt;/li&gt;
&lt;li&gt;Sunday morning, many customers (who all opted in to the beta) experience a variety of problems: &lt;a href="https://www.reddit.com/r/TeslaLounge/comments/qf16dx/while_in_manual_driving_my_car_emergency_braked/"&gt;Most alarmingly — swerving into adjacent lane while FSD is &lt;em&gt;not&lt;/em&gt; enabled&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Tesla tries to &lt;a href="https://twitter.com/elonmusk/status/1452345284483235841"&gt;rollback to version 10.2&lt;/a&gt;, but accidentally &lt;a href="https://twitter.com/chazman/status/1452346661259419652"&gt;rolls back to some other build&lt;/a&gt; without FSD enabled at all.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__reddit--container"&gt;
  &lt;div class="ltag__reddit--title-container"&gt;
    
      &lt;div class="ltag__reddit--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqI7Yj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/reddit-icon-c6851eed10026b5707e2e8c814b5bbcbb4823de68d5b611a6f4b99c8beed6f05.svg" alt="Reddit Logo"&gt;
          &lt;a href="https://www.reddit.com/r/TeslaLounge/comments/qf2fwg/the_102_rollback_stopped_because_they_just_turned/" rel="noopener noreferrer"&gt;
            The 10.2 “rollback” stopped because they just turned off the Automatic Emergency Braking for everyone
          &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__reddit--post-metadata"&gt;
          &lt;span&gt;Oct 24 '21&lt;/span&gt;
          &lt;span&gt;Author: commanderepsilon&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--body"&gt;
    &lt;p&gt;
        &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4slHvvUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://b.thumbs.redditmedia.com/QXWtM287eaBEMBgs8Lfiqx38Q7E0jFDZ70Xo5REE86M.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4slHvvUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://b.thumbs.redditmedia.com/QXWtM287eaBEMBgs8Lfiqx38Q7E0jFDZ70Xo5REE86M.jpg" alt="The 10.2 “rollback” stopped because they just turned off the Automatic Emergency Braking for everyone"&gt;&lt;/a&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div class="ltag__reddit--btn--container"&gt;
    
      &lt;a href="https://www.reddit.com/r/TeslaLounge/comments/qf2fwg/the_102_rollback_stopped_because_they_just_turned/" rel="noopener noreferrer"&gt;See Full Post&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__reddit--container"&gt;
  &lt;div class="ltag__reddit--title-container"&gt;
    
      &lt;div class="ltag__reddit--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqI7Yj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/reddit-icon-c6851eed10026b5707e2e8c814b5bbcbb4823de68d5b611a6f4b99c8beed6f05.svg" alt="Reddit Logo"&gt;
          &lt;a href="https://www.reddit.com/r/TeslaLounge/comments/qf16dx/while_in_manual_driving_my_car_emergency_braked/" rel="noopener noreferrer"&gt;
            While in manual driving my car emergency braked and tried to swerve into the car next to me (FSD Beta 10.3)
          &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__reddit--post-metadata"&gt;
          &lt;span&gt;Oct 24 '21&lt;/span&gt;
          &lt;span&gt;Author: ThatKingsFan&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--body"&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--btn--container"&gt;
    
      &lt;a href="https://www.reddit.com/r/TeslaLounge/comments/qf16dx/while_in_manual_driving_my_car_emergency_braked/" rel="noopener noreferrer"&gt;See Full Post&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I am one of the customers with the FSD beta myself. I am out of town, but my wife described a pretty scary scene that fits in alongside the reports from the rest of the users.&lt;/p&gt;

&lt;p&gt;Rolling back software is generally always easier said than done, but that doesn't act as an excuse for a company building software which is fundamentally unsafe if buggy.&lt;/p&gt;

&lt;p&gt;Musk's latest tweet today...&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ROOTLROx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1442634650703237120/mXIcYtIs_normal.jpg" alt="Elon Musk profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Elon Musk
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/elonmusk"&gt;@elonmusk&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Pop music has both literal &amp;amp; figurative Stockholm Syndrome
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:38 PM - 24 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1452373897366618112" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1452373897366618112" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1452373897366618112" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Tesla certainly &lt;em&gt;gives off the impression&lt;/em&gt; of a company that rides some of their software teams to meet absurd deadlines, work through the weekends, and generally work to exhaustion: That is the story I've gotten from anyone I've met who works in Tesla or SpaceX engineering. They definitely hire for people who are passionate about the mission and self-select for the journey, but that kind of culture tends to drive these kinds of mistakes.&lt;/p&gt;

&lt;p&gt;At the end of the day, mistakes happen, but failure to communicate effectively has consistently caused frustration between Tesla and its customers/users. Tesla &lt;a href="https://electrek.co/2020/10/06/tesla-dissolves-pr-department/"&gt;no longer has a PR team&lt;/a&gt;, which is fine in and of itself, but this is an organization that &lt;em&gt;badly&lt;/em&gt; needs to delegate its communication strategy over matters like this. Not to a PR department per se, but a trusted leader within the organization who can communicate directly.&lt;/p&gt;

&lt;p&gt;Tesla is not exactly opaque. They are remarkably transparent in many ways, but these problems hurt their mission and they need to level up. If they are going to be rolling out beta software and pushing a lot of good things forward at a great pace, they need to learn from this — starting at the top.&lt;/p&gt;

&lt;p&gt;Happy coding ❤️&lt;/p&gt;

</description>
      <category>news</category>
      <category>devops</category>
      <category>ai</category>
      <category>selfdriving</category>
    </item>
    <item>
      <title>Using slot with custom web componnents.</title>
      <author>spb5732</author>
      <pubDate>Mon, 25 Oct 2021 00:31:15 +0000</pubDate>
      <link>https://dev.to/spb5732/using-slot-with-custom-web-componnents-493j</link>
      <guid>https://dev.to/spb5732/using-slot-with-custom-web-componnents-493j</guid>
      <description>&lt;p&gt;when creating custom web components the slot tag can be very useful. The slot tag allows you to pass html content into the shadowroot of your custom element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-would-you-use-the-slot-tag"&gt;
  &lt;/a&gt;
  When would you use the slot tag?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;An example of when I have had to use the slot tag was when I was coding my custom web component learning card.
-The card had a body section that needed to have support for any html content.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#slimecard"&gt;
  &lt;/a&gt;
  slime-card:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--raPzLCtl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ky3n80l44sqpspkciqtj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--raPzLCtl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ky3n80l44sqpspkciqtj.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-slot"&gt;
  &lt;/a&gt;
  How to use slot.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you have a blank slot any content will be passed from inside the custom element into the blank slot.&lt;/li&gt;
&lt;li&gt;If you have a named slot you need to pass the slot attribute with the correct name into the html content.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples-below"&gt;
  &lt;/a&gt;
  examples below:
&lt;/h3&gt;

&lt;h1&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  index.html
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;custom-web-component&amp;gt;

&amp;lt;span&amp;gt;This will be put into the blank slot&amp;lt;/span&amp;gt;

&amp;lt;/custom-web-component&amp;gt;


&amp;lt;custom-web-component&amp;gt;

&amp;lt;span slot="s1"&amp;gt;This will be put into s1 slot!&amp;lt;/span&amp;gt;

&amp;lt;/custom-web-component&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#customwebcomponentjs"&gt;
  &lt;/a&gt;
  custom-web-component.js
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;render(){ return hml`
&amp;lt;div id="custom-web-component"&amp;gt;
&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;
&amp;lt;slot name="s1"&amp;gt;&amp;lt;/slot&amp;gt;
&amp;lt;/div&amp;gt;`;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the slot tag allows you to pass html content into a custom web component. It also makes it really easy to pass content from the top level of a web component down to the bottom level. This makes alot of sense when you break down a custom web component into smaller sub components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-example"&gt;
  &lt;/a&gt;
  For example
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The learning card was broken down into icon, header, body , and card as a whole&lt;/li&gt;
&lt;li&gt;When using the card as a whole, info can be passed from the slot of the card as a whole into the slot for the body component. This allows custom web components to be very flexible.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>html</category>
    </item>
    <item>
      <title>GraphQL file uploads - evaluating the 5 most common approaches</title>
      <author>S ♠️</author>
      <pubDate>Mon, 25 Oct 2021 00:15:40 +0000</pubDate>
      <link>https://dev.to/growthatwundergraph/graphql-file-uploads-evaluating-the-5-most-common-approaches-59dd</link>
      <guid>https://dev.to/growthatwundergraph/graphql-file-uploads-evaluating-the-5-most-common-approaches-59dd</guid>
      <description>&lt;p&gt;One question that keeps coming up in GraphQL communities is, how to upload files using GraphQL? This post should give you an overview of the different options available and how they compare.&lt;/p&gt;

&lt;p&gt;Serving structured data is the core of GraphQL. Send a Query to the server, and you get a JSON Object back with exactly the structure you were asking for. What about files though? How do files fit into a Query Language for Data?&lt;/p&gt;

&lt;p&gt;It's a common theme that starters are confused when they are asked to upload a JPEG or PDF file using GraphQL. Out of the box, there's nothing in the GraphQL specification that mentions files. So, what are the options available and when should we choose which one?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#overview-of-the-5-most-common-options-to-upload-files-with-graphql-apis"&gt;
  &lt;/a&gt;
  Overview of the 5 most common options to upload files with GraphQL APIs
&lt;/h1&gt;

&lt;p&gt;Let's start with an overview of the different options:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using GraphQL mutations with base64 encoded Blobs
using GraphQL mutations with a multipart HTTP Requests
using a separate REST API
using S3
WunderGraph's Approach using the TokenHandler Pattern with S3 as the storage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Throughout the post, you'll learn that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;base64&lt;/span&gt; &lt;span class="nx"&gt;encoded&lt;/span&gt; &lt;span class="nx"&gt;blobs&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;simplest&lt;/span&gt; &lt;span class="nx"&gt;solution&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt; &lt;span class="nx"&gt;drawbacks&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;mutations&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;multipart&lt;/span&gt; &lt;span class="nx"&gt;HTTP&lt;/span&gt; &lt;span class="nx"&gt;Requests&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;most&lt;/span&gt; &lt;span class="nx"&gt;complex&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;separate&lt;/span&gt; &lt;span class="nx"&gt;REST&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;clean&lt;/span&gt; &lt;span class="nx"&gt;solution&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;unnecessary&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;because&lt;/span&gt; &lt;span class="nx"&gt;S3&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;already&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;perfect&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;s just not ideal to directly expose it
- which we will fix using the TokenHandler Pattern using WunderGraph
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#how-to-evaluate-different-graphql-file-upload-solutions"&gt;
  &lt;/a&gt;
  How to evaluate different GraphQL file upload solutions?
&lt;/h1&gt;

&lt;p&gt;Before we dive into evaluating the different solutions, let's establish some metrics for "good" solutions:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;complexity of implementation on both client and server
bandwidth overhead should be minimal
uploads should be fast
the solution should work across different languages and client- and server frameworks
portability: it should work on your laptop as well as in the cloud
no vendor lock in
we should be able to easily make uploads secure
once an upload is finished, we should be able to run server-side code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h1&gt;
  &lt;a href="#comparison-of-the-different-options-available-to-upload-files-using-graphql"&gt;
  &lt;/a&gt;
  Comparison of the different options available to upload Files using GraphQL
&lt;/h1&gt;
&lt;h5&gt;
  &lt;a href="#uploading-files-via-a-graphql-using-mutations-with-base64-encoded-blobs"&gt;
  &lt;/a&gt;
  Uploading files via a GraphQL using mutations with base64 encoded blobs
&lt;/h5&gt;

&lt;p&gt;Let's start with the simplest solution, encoding the file as a base64 encoded blob.&lt;/p&gt;

&lt;p&gt;StackOverflow has an example for us on how it works:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toBase64&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FileReader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readAsDataURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This reads a file and returns it as a base64 encoded string. You might be asking why base64 at all? The reason is, you cannot just send a file as part of a string. A JSON Object, which is used to send GraphQL Requests, is a string. If we want to send a file as part of this JSON Object, we first have to turn it into a text representation.&lt;/p&gt;

&lt;p&gt;Ok, we understand the how and the why, let's see if this is a good solution.&lt;/p&gt;

&lt;p&gt;The complexity of the implementation, as you can see above, is low. On the server side, you decode the JSON and then turn the base64 encoded string into its binary format again.&lt;/p&gt;

&lt;p&gt;But there are a few problems with this solution. Base64 encoding increases the size of the file by roughly one third. So, instead of uploading 3 Megabytes, you have to upload 4. This doesn't scale well, especially not for large files.&lt;/p&gt;

&lt;p&gt;Keep in mind that base64 encoded files are part of the enclosing JSON object. This means, you're not able to "stream" this base64 string through a decoder and into a file. Uploading one gigabyte of data using this method would result in one gigabyte occupied memory on the server.&lt;/p&gt;

&lt;p&gt;If you're looking for a quick and dirty solution, it's a great choice. For production environments where a lot of API clients upload files, it's not a good match though.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#uploading-files-via-a-graphql-using-mutations-with-multipart-http-requests"&gt;
  &lt;/a&gt;
  Uploading files via a GraphQL using mutations with multipart HTTP Requests
&lt;/h1&gt;

&lt;p&gt;Alright, we've learned that encoding files to ASCII is a quick solution but doesn't scale well. How about sending files in binary format? That's what HTTP Multipart Requests are meant for.&lt;/p&gt;

&lt;p&gt;Let's have a look at a Multipart Request to understand what's going on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;POST&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cgi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;qtest&lt;/span&gt; &lt;span class="nx"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;
&lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;aram&lt;/span&gt;
&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;multipart&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;boundary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;a8ae6ad&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;f4ad&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nx"&gt;d9a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;a92c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;d217011fe0f&lt;/span&gt;
&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;514&lt;/span&gt;

&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;a8ae6ad&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;f4ad&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nx"&gt;d9a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;a92c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;d217011fe0f&lt;/span&gt;
&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Disposition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;datafile1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;r.gif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;gif&lt;/span&gt;

&lt;span class="nx"&gt;GIF87a&lt;/span&gt;&lt;span class="p"&gt;.............,...........&lt;/span&gt;&lt;span class="nx"&gt;D&lt;/span&gt;&lt;span class="p"&gt;..;&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;a8ae6ad&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;f4ad&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nx"&gt;d9a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;a92c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;d217011fe0f&lt;/span&gt;
&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Disposition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;datafile2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g.gif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;gif&lt;/span&gt;

&lt;span class="nx"&gt;GIF87a&lt;/span&gt;&lt;span class="p"&gt;.............,...........&lt;/span&gt;&lt;span class="nx"&gt;D&lt;/span&gt;&lt;span class="p"&gt;..;&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;a8ae6ad&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;f4ad&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nx"&gt;d9a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;a92c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;d217011fe0f&lt;/span&gt;
&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Disposition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;datafile3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b.gif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;gif&lt;/span&gt;

&lt;span class="nx"&gt;GIF87a&lt;/span&gt;&lt;span class="p"&gt;.............,...........&lt;/span&gt;&lt;span class="nx"&gt;D&lt;/span&gt;&lt;span class="p"&gt;..;&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;a8ae6ad&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;f4ad&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nx"&gt;d9a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;a92c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;d217011fe0f&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A HTTP Multipart request can contain multiple "parts" separated by a boundary. Each part can have additional "Content-*" Headers followed by the body.&lt;/p&gt;

&lt;p&gt;How to create a MultiPart Request from JavaScript?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FileList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FileList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://example.com/upload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's simple, right? Take a (fake) list of Files, append all of them to the FormData Object and pass it to fetch as the body. JavaScript takes care of the boundaries, etc...&lt;/p&gt;

&lt;p&gt;On the backend, you have to read all individual parts of the body and process them. You could send a dedicated part for the GraphQL Operation and additional parts for attached files.&lt;/p&gt;

&lt;p&gt;Let's first talk about the benefits of this solution. We're sending the files not as ASCII text but in the binary format, saving a lot of bandwidth and upload time.&lt;/p&gt;

&lt;p&gt;But what about the complexity of the implementation? While the client implementation looks straight forward, what about the server?&lt;/p&gt;

&lt;p&gt;Unfortunately, there's no standard to handle Multipart Requests with GraphQL. This means, your solution will not be easily portable across different languages or implementations and your client implementation depends on the exact implementation of the server.&lt;/p&gt;

&lt;p&gt;Without Multipart, any GraphQL client can talk to any GraphQL server. All parties agree that the protocol is GraphQL, so all these implementations are compatible. If you're using a non-standard way of doing GraphQL over Multipart HTTP Requests, you're losing this flexibility.&lt;/p&gt;

&lt;p&gt;Next, how will your GraphQL client handle the Request? Do you have to add a custom middleware to rewrite a regular HTTP Request into a Multipart one? Is it easy to accomplish this with your GraphQL client of choice?&lt;/p&gt;

&lt;p&gt;Another problem I see is that you have to limit the number of Operations that allow Multipart Requests. Should it be allowed for Queries and Subscriptions? Probably not. Should it be allowed for all Mutations? No, just for some of them, or even just for a single Mutation, the one to upload files. To handle this, you have to add custom logic to your GraphQL Server. This logic will make portability more complex as you'd have to re-implement this logic in another language.&lt;/p&gt;

&lt;p&gt;Finally, you have the file as part of the Multipart Request. Where do you store it? That's another problem you have to solve. S3 is probably your best option if it should work both locally and in the cloud.&lt;/p&gt;

&lt;p&gt;So, in terms of implementation complexity, this solution is quite heavy and has a lot of open questions.&lt;/p&gt;

&lt;p&gt;Maybe it's simpler to just use a dedicated REST API?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#leaving-data-to-graphql-and-handling-file-uploads-with-a-dedicated-rest-api"&gt;
  &lt;/a&gt;
  Leaving data to GraphQL and handling file uploads with a dedicated REST API
&lt;/h1&gt;

&lt;p&gt;This sounds like a solid idea. Instead of tightly coupling a custom GraphQL client to our custom GraphQL server, we could also just add a REST API to handle file uploads.&lt;/p&gt;

&lt;p&gt;We use the same concepts as before, uploading the files using a Multipart Request.&lt;/p&gt;

&lt;p&gt;Then, from the REST API handler, we take the files and upload them to S3 and return the response to the client.&lt;/p&gt;

&lt;p&gt;With this solution, we're not tightly coupling a custom GraphQL client to our custom GraphQL server implementation as we leave the GraphQL protocol as is.&lt;/p&gt;

&lt;p&gt;This solution is also fast and there's not much of a bandwidth overhead. It's also easily portable as we've not invented a custom GraphQL transport.&lt;/p&gt;

&lt;p&gt;What are the tradeoffs though?&lt;/p&gt;

&lt;p&gt;For one, authentication is an issue. If we're deploying the upload API as a second service, we have to find a solution that allows us to authenticate users across both the GraphQL and the REST API. If, instead, we're adding the REST API alongside the GraphQL API, just on a different endpoint, we're losing on portability again, but it's not as big of an issue as adding Multipart directly to the GraphQL API.&lt;/p&gt;

&lt;p&gt;Another issue is complexity, We're establishing a custom protocol between client and server. We have to implement and maintain both of them. If we'd like to add another client to our implementation, using a different language, we're not able to use an off-the-shelf GraphQL client and call it a day. We'd have to add this extra piece of code to the client to make it work.&lt;/p&gt;

&lt;p&gt;In the end, we're just wrapping S3. Why not just use S3 directly?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#combining-a-graphql-api-with-a-dedicated-s3-storage-api"&gt;
  &lt;/a&gt;
  Combining a GraphQL API with a dedicated S3 Storage API
&lt;/h1&gt;

&lt;p&gt;One of the issues of our custom solution is that we're establishing a custom protocol for uploading files. How about relying on an established protocol? How about just using S3? There are plenty of clients in all languages available.&lt;/p&gt;

&lt;p&gt;With this approach, the GraphQL API stays untouched, and we're not inventing custom file upload protocols. We can use off-the-shelf GraphQL clients as well as standard S3 clients. It's a clear separation of concerns.&lt;/p&gt;

&lt;p&gt;Well, there's another tradeoff. How do we do authentication?&lt;/p&gt;

&lt;p&gt;Most guides suggest adding custom backend code to pre-sign upload URLs so that users from insecure environments, e.g. the Browser, are able to upload files without the need of a custom Authentication Middleware.&lt;/p&gt;

&lt;p&gt;This adds some complexity, but it's doable. You could even add this logic as a Mutation to our GraphQL Schema. With this approach, the user can first create an attachment with metadata, which then returns a pre-signed URL to upload the file.&lt;/p&gt;

&lt;p&gt;However, this leads to another problem. How do you know if the file was actually uploaded? You probably want to add some custom business logic to check S3 periodically if the file is successfully uploaded. If this is the case, you can update the attachment metadata in the GraphQL API.&lt;/p&gt;

&lt;p&gt;Another issue with pre-signed S3 URLs is that you're not able to limit the upload file size. Attackers could easily spam you with big files and exhaust your storage limits.&lt;/p&gt;

&lt;p&gt;Additionally, do you really want your API clients to directly talk to an API of the storage provider? From a security point of view, wouldn't it make more sense to not have them interact directly?&lt;/p&gt;

&lt;p&gt;To sum it up, a dedicated S3 API comes with a lot of advantages over the previously discussed solutions, but it's still not the perfect solution. We can make it work, but it needs custom solutions to make it secure, validate the files are actually uploaded and to prevent large uploads.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ahhh-we-meet-again-shall-we-take-this-to-your-inbox"&gt;
  &lt;/a&gt;
  Ahhh we meet again? Shall we take this to your inbox?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://8bxwlo3ot55.typeform.com/to/KJ96Egx6?format=json&amp;amp;referrer=https%3A%2F%2Fmedium.com%2F%40Growth_at_Wundergraph%2Fwhy-not-use-graphql-97287db9cd09&amp;amp;typeform-embed-id=18449291482131458&amp;amp;typeform-embed=popup-blank&amp;amp;typeform-medium-version=next&amp;amp;typeform-medium=embed-sdk&amp;amp;typeform-source=wundergraph.com"&gt;Let's chat&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#securely-uploading-files-alongside-graphql-apis-using-the-tokenhandler-pattern"&gt;
  &lt;/a&gt;
  Securely uploading files alongside GraphQL APIs using the TokenHandler Pattern
&lt;/h1&gt;

&lt;p&gt;Looking at all the options we've discussed so far, we're able to make a wish list to guide us to the ultimate solution.&lt;/p&gt;

&lt;p&gt;Base64 encoding files is out. The increase in upload bandwidth doesn't justify the simplicity. We definitely want to use Multipart file uploads. However, we don't want to customize our GraphQL API, that's an absolute No. The custom REST API sounds great, but it's also adding a lot of flexibility. That said, the idea of separating file uploads from the data layer really makes sense. Finally, using S3 as the storage is great, but we don't want to directly expose it to our users. Another important aspect is that we don't want to invent custom protocols and implement custom API clients, just to be able to upload files alongside standard GraphQL clients.&lt;/p&gt;

&lt;p&gt;Taking all this into consideration, here's our final solution!&lt;/p&gt;

&lt;p&gt;The WunderGraph Way of solving problems like this is to abstract away the complexity from the developer and to rely on open standards. We're using OpenID Connect as the standard for authentication and S3 as the standard protocol for uploading files. In addition, by using the TokenHandler Pattern, we're abstracting away the complexity of security into the server-side component, the WunderNode. Finally, we're generating a typesafe client to not just handle authentication and data access but also file uploads. All this results in the perfect abstraction that balances between developer experience and flexibility, without locking our users into specific implementations.&lt;/p&gt;

&lt;p&gt;Let's look at an architecture diagram to get an overview:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jeBYLfZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5yf0bo6svhjhhrdty3d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jeBYLfZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5yf0bo6svhjhhrdty3d.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The client on the left is generated. It lets you upload files without knowing much about it. It handles authentication and everything.&lt;/p&gt;

&lt;p&gt;In the middle, we have the "TokenHandler", the WunderGraph Server, the WunderNode. It handles the server-side part of authenticating a user, uploading files, etc... We'll talk about the TokenHandler pattern in a second.&lt;/p&gt;

&lt;p&gt;On the right side, we've got the storage providers. These could be Minio, running in Docker on your local Machine, or a cloud provider.&lt;/p&gt;

&lt;p&gt;Let's talk about the TokenHandler Pattern!&lt;/p&gt;

&lt;p&gt;If you want to be able to pre-sign URLs, the browser needs to be able to send some singed information alongside a request about the identity of the user. Signed means, the server needs to be able to trust this information.&lt;/p&gt;

&lt;p&gt;There are different ways of solving this problem. One very popular approach is to let the user login via OpenID Connect and then use a Bearer Token. The problem with this approach is that if there is a Token available in the Browser, accessible to JavaScript, there's the possibility that the JavaScript code does something bad with the Token. Intentionally or not, if the token is accessible from JavaScript, there's a chance to risk security.&lt;/p&gt;

&lt;p&gt;A better approach is to not handle the token on the client but on the server. Once the user has completed the OpenID Connect flow, the authorization code can be exchanged on the back channel (server to server) without exposing it to the client. The response, containing the identity information about the user, is never exposed to the client. Instead, it's encrypted using a secure HTTP only cookie, with strict SameSite settings to only allow it on first party domains.&lt;/p&gt;

&lt;p&gt;Using the TokenHandler Pattern, the Browser sends information about the user alongside every request but is not able to touch or modify it. The server can trust the client, and we're not leaking and information to non first-party domains.&lt;/p&gt;

&lt;p&gt;If you want to say so, the WunderGraph Server, also called WunderNode, is a TokenHandler. Well, it's not just that, it's a lot more, e.g. also a file upload handler.&lt;/p&gt;

&lt;p&gt;Let's assume an application wants to upload files, how does the implementation look like?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FormEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uploadFiles&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;S3Provider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;formData&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The client comes with an uploadFiles function. We're able to choose between all configured upload providers. In this case, S3Provider.do was chosen because we've named one of our S3 providers do.&lt;/p&gt;

&lt;p&gt;Everything else is handled already. We can check if the user is authenticated before allowing them to upload a file, and we're able to limit the size of the files they are intending to upload. Files will automatically be uploaded to the bucked we've defined in our configuration.&lt;/p&gt;

&lt;p&gt;Speaking of the configuration, here's an example of how to configure S3 file uploads for a WunderGraph application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;configureWunderGraphApplication&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;s3UploadProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;minio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// a unique name for the storage provider&lt;/span&gt;
            &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;127.0.0.1:9000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// the S3 endpoint&lt;/span&gt;
            &lt;span class="na"&gt;accessKeyID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// access key to upload files to the S3 bucket&lt;/span&gt;
            &lt;span class="na"&gt;secretAccessKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;12345678&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// access secret to upload files to the S3 bucket&lt;/span&gt;
            &lt;span class="na"&gt;bucketLocation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eu-central-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// the bucket location, some providers don't require it&lt;/span&gt;
            &lt;span class="na"&gt;bucketName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uploads&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// the bucket name to which you're uploading files&lt;/span&gt;
            &lt;span class="na"&gt;useSSL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// disable SSL if you're running e.g. Minio on your local machine&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;do&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// second unique name for the storage provider&lt;/span&gt;
            &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fra1.digitaloceanspaces.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;accessKeyID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;xxx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;secretAccessKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;xxx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;bucketLocation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eu-central-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// ignore this setting on Digital Ocean&lt;/span&gt;
            &lt;span class="na"&gt;bucketName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wundergraph-demo2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;useSSL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// you should always enable SSL for cloud storage providers!&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's left is to evaluate this solution against the criteria we've established at the beginning.&lt;/p&gt;

&lt;p&gt;We configure the S3 storage provider and don't have to do anything on the server. The client is generated and comes with a function to easily upload files. So, complexity of the implementation is very low.&lt;/p&gt;

&lt;p&gt;There's no bandwidth overhead as we're using Multipart. Additionally, the WunderGraph server streams all parts, meaning that we're not putting the whole file into memory. As we're not adding base64 encoding, uploads are quite fast.&lt;/p&gt;

&lt;p&gt;As we're handling uploads in front of the backend, there are no changes required to it. Clients can be generated in any language and for every framework, allowing for easy portability of the solution.&lt;/p&gt;

&lt;p&gt;Users of this solution are not locked into vendors. For authentication, you're free to choose any OpenID Connect Provider. For uploads, any S3 compatible storage provider works fine. You can use Minio on localhost using Docker, AWS S3, DigitalOcean or others.&lt;/p&gt;

&lt;p&gt;Uploads are as secure as it can be by using the TokenHandler pattern. We're not exposing any user credentials to the client. We limit the upload file size. There's no way to leak pre-signed URLs if we don't use them.&lt;/p&gt;

&lt;p&gt;Additionally, you're able to use WunderGraph Hooks to act once a file upload is finished. Just add your custom logic using TypeScript, call a mutation and update the Database, anything is possible.&lt;/p&gt;

&lt;p&gt;Conclusion#&lt;/p&gt;

&lt;p&gt;I hope it's clear that uploading files for web applications is not as easy as it might sound. We've put a lot of thought into architecting a proper solution. Using the TokenHandler pattern we're able to offer a secure solution not just for handling data but also file uploads.&lt;/p&gt;

&lt;p&gt;Depending on your use case, the simple base64 approach might work well for you.&lt;/p&gt;

&lt;p&gt;Adding custom Multipart protocols to your GraphQL API should really be avoided as it's adding a lot of complexity.&lt;/p&gt;

&lt;p&gt;A custom REST API might be a good solution if you have the resources to build it.&lt;/p&gt;

&lt;p&gt;If you're looking for a battle tested ready to use solution, give WunderGraph's approach a try.&lt;/p&gt;

&lt;p&gt;Try out the example to see uploads in action or watch the video to follow along.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;wundergraph&lt;/span&gt;&lt;span class="sr"&gt;/wunderctl@lates&lt;/span&gt;&lt;span class="err"&gt;t
&lt;/span&gt;&lt;span class="nx"&gt;mkdir&lt;/span&gt; &lt;span class="nx"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;demo&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;demo&lt;/span&gt;
&lt;span class="nx"&gt;wunderctl&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="nx"&gt;nextjs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;starter&lt;/span&gt;
&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1_Nl6ZQJJQY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Writing Bash Scripts Like A Pro - Part 1 - Styling Guide</title>
      <author>Meir Gabay</author>
      <pubDate>Sun, 24 Oct 2021 23:51:25 +0000</pubDate>
      <link>https://dev.to/unfor19/writing-bash-scripts-like-a-pro-part-1-styling-guide-4bin</link>
      <guid>https://dev.to/unfor19/writing-bash-scripts-like-a-pro-part-1-styling-guide-4bin</guid>
      <description>&lt;p&gt;Writing &lt;a href="https://www.gnu.org/software/bash/"&gt;Bash&lt;/a&gt; scripts can be challenging if you don't know the quirks and perks. In my mother tongue, we use the Yiddish word for quirks and perks; it's called "Shtickim" (plural of &lt;a href="https://en.wikipedia.org/wiki/Shtick"&gt;"Shtick"&lt;/a&gt;). Are you ready to learn more about Bash's "Shtickim"?&lt;/p&gt;

&lt;p&gt;This blog post is part of a series that I'm working on in my spare time to preserve the knowledge for future me that forgets stuff, to assist new colleagues, and indulge programmers like you who wish to love Bash as I do. So let's begin, shall we?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-a-scripting-language"&gt;
  &lt;/a&gt;
  It's A Scripting Language
&lt;/h2&gt;

&lt;p&gt;It's important to remember that Bash is a &lt;a href="https://en.wikipedia.org/wiki/Scripting_language#:~:text=A%20scripting%20language%20or%20script,at%20runtime%20rather%20than%20compiled."&gt;scripting language&lt;/a&gt;, which means it doesn't offer the standard functionalities that a &lt;a href="https://en.wikipedia.org/wiki/Programming_language#:~:text=A%20programming%20language%20is%20a,consist%20of%20instructions%20for%20computers."&gt;programming language&lt;/a&gt; has to offer, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Object-Oriented Programming is not supported natively&lt;/li&gt;
&lt;li&gt;There are no external libraries like Python's &lt;a href="https://docs.python-requests.org/en/latest/"&gt;requests&lt;/a&gt; or Node's &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt;, though it is possible to use external applications such as &lt;a href="https://curl.se/"&gt;curl&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.oreilly.com/library/view/learning-php-mysql/9781449337452/ch13s06.html"&gt;Variables Typing&lt;/a&gt; is not supported, and all values are evaluated as &lt;em&gt;strings&lt;/em&gt;. It is possible to use numbers by using specific commands, such as &lt;a href="https://tldp.org/LDP/abs/html/comparison-ops.html"&gt;test equality with -eq&lt;/a&gt; and &lt;a href="https://tldp.org/LDP/abs/html/ops.html"&gt;increment a variable with ((VAR_NAME+1))&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://linuxhint.com/associative_array_bash/"&gt;Bash's Associative array&lt;/a&gt; like Python's &lt;a href="https://www.w3schools.com/python/python_dictionaries.asp"&gt;dict&lt;/a&gt; or JavaScript's &lt;a href="https://www.w3schools.com/js/js_objects.asp"&gt;Object&lt;/a&gt; is supported from version &lt;a href="https://tldp.org/LDP/abs/html/bashver4.html"&gt;Bash v4.4&lt;/a&gt;, and it's important to remember that &lt;a href="https://tldp.org/LDP/abs/html/bashver3.html"&gt;macOS is shipped with Bash v3.2&lt;/a&gt; (we'll get to that in future blog posts of this series)&lt;/li&gt;
&lt;li&gt;There is no "source of truth" for naming convention. For example, how would you name a global variable? &lt;code&gt;Pascal_Case&lt;/code&gt;? &lt;code&gt;snake_case&lt;/code&gt;? &lt;code&gt;SCREAMING_SNAKE_CASE&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you already guessed, "Bash programmers" (if there is such a thing) face many challenges. The above list is merely the tip of the iceberg.&lt;/p&gt;

&lt;p&gt;Here are great blog posts that share the same feelings as I do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tothenew.com/blog/foolproof-your-bash-script-some-best-practices/"&gt;Foolproof Your Bash Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kvz.io/bash-best-practices.html"&gt;Best Practices for Writing Bash Scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bertvv.github.io/cheat-sheets/Bash.html"&gt;Bash best practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we've covered the fact that I'm in love with Bash, I want to share that feeling with you; here goes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variables-naming-convention"&gt;
  &lt;/a&gt;
  Variables Naming Convention
&lt;/h2&gt;

&lt;p&gt;Here's how I name variables in my Bash scripts&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Scope&lt;/th&gt;
&lt;th&gt;Convention&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Environment&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;MY_VARIABLE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;_MY_VARIABLE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Local&lt;/td&gt;
&lt;td&gt;Function&lt;/td&gt;
&lt;td&gt;my_variable&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In my older Bash scripts, the names of the variables were hard to interpret. Changing to this naming convention helped me a lot to understand the scope of variables and their purpose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-vibes-application"&gt;
  &lt;/a&gt;
  Good Vibes Application
&lt;/h2&gt;

&lt;p&gt;And of course, we gotta' see some practical example, so here's how I implement the above naming convention in my &lt;code&gt;good_vibes.sh&lt;/code&gt; application.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;good_vibes.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="c"&gt;# ^ This is called a Shebang&lt;/span&gt;
&lt;span class="c"&gt;# I'll cover it in future blog posts&lt;/span&gt;


&lt;span class="c"&gt;# Global variables are initialized by Env Vars.&lt;/span&gt;
&lt;span class="c"&gt;# I'm setting a default value with "${VAR_NAME:-"DEFAULT_VALUE"}"&lt;/span&gt;
&lt;span class="nv"&gt;_USER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER_NAME&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nv"&gt;_USER_AGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER_AGE&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;


complement_name&lt;span class="o"&gt;(){&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Wow, &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, you have a beautiful name!"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;


complement_age&lt;span class="o"&gt;(){&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-gt&lt;/span&gt; &lt;span class="s2"&gt;"30"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Seriously &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;? I thought you were &lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;age-7&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Such a weird age, are you sure it's a number?"&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;


main&lt;span class="o"&gt;(){&lt;/span&gt;
  &lt;span class="c"&gt;# The only function that is not "pure"&lt;/span&gt;
  &lt;span class="c"&gt;# This function is tightly coupled to the script&lt;/span&gt;
  complement_name &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$_USER_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  complement_age &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$_USER_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$_USER_AGE&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;


&lt;span class="c"&gt;# Invokes the main function&lt;/span&gt;
main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;good_vibes.sh - Execution and output&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;USER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Julia"&lt;/span&gt; &lt;span class="nv"&gt;USER_AGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"36"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
bash good_vibes.sh

&lt;span class="c"&gt;# Output&lt;/span&gt;
Wow, Julia, you have a beautiful name!
Seriously Julia? I thought you were 29
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break down the &lt;code&gt;good_vibes.sh&lt;/code&gt; application to a "set of rules" that can be implemented in your scripts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-block-spacing"&gt;
  &lt;/a&gt;
  Code block spacing
&lt;/h3&gt;

&lt;p&gt;Two (2) blank rows between each block of code make the script more readable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indentation"&gt;
  &lt;/a&gt;
  Indentation
&lt;/h3&gt;

&lt;p&gt;I'm using two (2) spaces, though it's totally fine to use four (4) spaces for indentation. Just make sure you're not mixing between the two.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#curly-braces"&gt;
  &lt;/a&gt;
  Curly braces
&lt;/h3&gt;

&lt;p&gt;If it's a &lt;code&gt;${VARIABLE} concatenated with string&lt;/code&gt;, use curly braces as it makes it easier to read.&lt;/p&gt;

&lt;p&gt;In case it's a &lt;code&gt;"$LONELY_VARIABLE"&lt;/code&gt; there's no need for that, as it will help you realize faster if it's "lonely" or not.&lt;/p&gt;

&lt;p&gt;The primary purpose for curly braces is for performing a &lt;a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html"&gt;Shell Parameter Expansion&lt;/a&gt;, as demonstrated in the Global variables initialization part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#squared-brackets"&gt;
  &lt;/a&gt;
  Squared brackets
&lt;/h3&gt;

&lt;p&gt;Using &lt;strong&gt;double&lt;/strong&gt; &lt;code&gt;[[ ]]&lt;/code&gt; squared brackets makes it easier to read conditional code blocks. However, do note that using double squared brackets is not supported in &lt;a href="https://stackoverflow.com/a/5725402/5285732"&gt;Shell sh&lt;/a&gt;; instead, you should use single brackets &lt;code&gt;[ ]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I always use double brackets to ensure that my target users/machines have &lt;a href="https://www.gnu.org/software/bash/"&gt;Bash bash&lt;/a&gt; installed.&lt;/p&gt;

&lt;p&gt;To demonstrate the readability, here's a "complex" conditional code block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Julia"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Willy"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER_AGE&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-gt&lt;/span&gt; &lt;span class="s2"&gt;"30"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Easy to read right?"&lt;/span&gt;
&lt;span class="k"&gt;fi

if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Julia"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Willy"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER_AGE&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-gt&lt;/span&gt; &lt;span class="s2"&gt;"30"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"No idea why but I feel lost with single brackets."&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you didn't notice, you've just learned that &lt;code&gt;||&lt;/code&gt; stands for &lt;code&gt;OR&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; stands for &lt;code&gt;AND&lt;/code&gt;. And the short &lt;a href="https://tldp.org/LDP/abs/html/comparison-ops.html"&gt;-gt&lt;/a&gt; expression means &lt;code&gt;greater than&lt;/code&gt; when using numbers. Finally, the &lt;code&gt;\&lt;/code&gt; character allows &lt;a href="https://unix.stackexchange.com/questions/281309/shell-syntax-how-to-correctly-use-to-break-lines"&gt;breaking rows&lt;/a&gt; in favor of making the code more readable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Shtick&lt;/strong&gt;: Using &lt;code&gt;\&lt;/code&gt; with an extra space &lt;code&gt;\ &amp;lt;- extra space&lt;/code&gt; can lead to weird errors. Make sure there are no trailing spaces after &lt;code&gt;\&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I assume that using &lt;code&gt;[[ ]]&lt;/code&gt; feels more intuitive since most conditional commands are doubled &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; &lt;code&gt;||&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variable-initialization"&gt;
  &lt;/a&gt;
  Variable initialization
&lt;/h3&gt;

&lt;p&gt;Global variables are initialized with Environment Variables and are set with default values in case of empty Environment variables.&lt;/p&gt;

&lt;p&gt;As mentioned in the &lt;code&gt;good_vibes.sh&lt;/code&gt; comments, I'm setting a default value with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VAR_NAME&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="s2"&gt;"DEFAULT_VALUE"&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet, the text &lt;code&gt;DEFAULT_VALUE&lt;/code&gt; is hardcoded, and it's possible to replace it with a variable. For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_USER_NAME="${USER_NAME:-"$USER"}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#functions-and-local-function-variables"&gt;
  &lt;/a&gt;
  Functions and local function variables
&lt;/h3&gt;

&lt;p&gt;Functions names and &lt;code&gt;local&lt;/code&gt; function variables names are &lt;code&gt;snake_cased&lt;/code&gt;. You might want to change functions names to &lt;code&gt;lowerCamelCase&lt;/code&gt;, and of course, it's your call.&lt;/p&gt;

&lt;p&gt;Coupling a function to the script is a common mistake, though I do sin from time to time, and you'll see Global/Environment variables in my functions, but that happens when I know that "this piece of code won't change a lot". &lt;/p&gt;

&lt;p&gt;Oh, and make sure you don't use &lt;code&gt;$1&lt;/code&gt; or any other argument directly; always use &lt;code&gt;local var_name="$1"&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;_USER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER_NAME&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# Bad - coupled&lt;/span&gt;
coupled_username&lt;span class="o"&gt;(){&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"_USER_NAME = &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_USER_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Good - decoupled&lt;/span&gt;
decoupled_username&lt;span class="o"&gt;(){&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"name = &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; 
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Usage&lt;/span&gt;
coupled_username  
decoupled_username &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$_USER_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#functional-programming"&gt;
  &lt;/a&gt;
  Functional Programming
&lt;/h3&gt;

&lt;p&gt;This topic relates to &lt;strong&gt;Functions and local function variables&lt;/strong&gt;, where functions are as "pure" as possible. As you can see in &lt;code&gt;good_vibes.sh&lt;/code&gt;, almost everything is wrapped in a function, except for &lt;strong&gt;Initializing Global variables&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I don't see the point of writing the &lt;code&gt;init_vars&lt;/code&gt; function, whose purpose is to deal with Global variables. However, I do find myself adding a &lt;code&gt;validate_vars&lt;/code&gt; function from time to time, which goes over the Global variables and validates their values. I'm sure there's room for debate here, so feel free to comment with your thoughts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;The "Good Vibes Application" mostly covered how to write a readable Bash script following the &lt;a href="https://en.wikipedia.org/wiki/Functional_programming"&gt;Functional Programming&lt;/a&gt; paradigm.&lt;/p&gt;

&lt;p&gt;If you feel that there's a need to change how you name variables and functions, go for it! As long as it's easy to understand your code, you're on the right track.&lt;/p&gt;

&lt;p&gt;The next blog posts in this series will cover the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Error handling&lt;/li&gt;
&lt;li&gt;Retrieving JSON data from an HTTP endpoint&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tldp.org/LDP/abs/html/x9644.html"&gt;Background jobs&lt;/a&gt; and watching file for changes with &lt;a href="https://github.com/emcrisostomo/fswatch"&gt;fswatch&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Git Repository structure - adding Bash scripts to existing repositories or creating a new repository with a Bash CLI application&lt;/li&gt;
&lt;li&gt;Publishing a Bash CLI as a &lt;a href="https://www.docker.com/why-docker"&gt;Docker&lt;/a&gt; image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And more, and more ... I'm just going to spit it all out to blog posts. Feel free to comment with questions or suggestions for my next blog posts.&lt;/p&gt;

</description>
      <category>bash</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>devops</category>
    </item>
    <item>
      <title>Explaining SOLID with LEGO (and probably making enemies in the tech community)</title>
      <author>Bruno Noriller</author>
      <pubDate>Sun, 24 Oct 2021 23:31:09 +0000</pubDate>
      <link>https://dev.to/noriller/explaining-solid-with-lego-and-probably-making-enemies-in-the-tech-community-4db4</link>
      <guid>https://dev.to/noriller/explaining-solid-with-lego-and-probably-making-enemies-in-the-tech-community-4db4</guid>
      <description>&lt;p&gt;Yeah... so, this time I'll be doing something a little different.&lt;/p&gt;

&lt;p&gt;I believe I have a way to explain how SOLID works with LEGO!&lt;br&gt;
And... I'm already preparing for people making a enemy of me because of that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-solid"&gt;
  &lt;/a&gt;
  What is SOLID?
&lt;/h2&gt;

&lt;p&gt;The textbook (AKA Wikipedia) definition is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Five design principles intended to make software designs more understandable, flexible, and maintainable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was promoted by Uncle Bob and the acronym was introduced by Michael Feathers.&lt;/p&gt;




&lt;p&gt;And even without using all of the SOLID principles, your code will always be better.&lt;/p&gt;

&lt;p&gt;BTW... Do I know everything there is to know about SOLID? Noooo.&lt;/p&gt;

&lt;p&gt;But ever since I've started thinking of it as LEGOS, they started making a lot more sense to me, and I hope it will do the same for you.&lt;/p&gt;

&lt;p&gt;To understand what I'm talking, I'll be assuming you know what LEGO is, because if you don't... well... I'm sorry for you... (or Welcome to Earth!)&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#s-the-singleresponsibility-principle"&gt;
  &lt;/a&gt;
  S: The Single-responsibility principle
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;There should never be more than one reason for a class to change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at the cover photo again... why are there so many different pieces?&lt;br&gt;
Because each one... does ONE thing.&lt;/p&gt;

&lt;p&gt;Let's say you're making something out of LEGO, if you need a yellow brick, you don't need to cut another, larger piece, you just need the one piece you want.&lt;br&gt;
You need other color? No need to recolor it, just take the appropriate piece.&lt;/p&gt;

&lt;p&gt;The pieces itself never change!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#o-the-openclosed-principle"&gt;
  &lt;/a&gt;
  O: The Open–closed principle.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Software entities should be open for extension, but closed for modification.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Can you change a LEGO brick?&lt;br&gt;
No you can't.&lt;/p&gt;

&lt;p&gt;But what if you need a bigger piece?&lt;br&gt;
You'll either take an already bigger piece or you will "make one" by combining smaller pieces.&lt;/p&gt;

&lt;p&gt;Each brick being immutable by itself, how do you do that?&lt;br&gt;
You use the knobs and tubes to connect one to another... you extend them without modifying them!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#l-the-liskov-substitution-principle"&gt;
  &lt;/a&gt;
  L: The Liskov substitution principle
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This one is a little trick with LEGO alone...&lt;br&gt;
But think it this way: what if I 3D Print a piece?&lt;/p&gt;

&lt;p&gt;The knobs and tubes in either one don't care if there's a brand (or the right brand), they only care if it fits or not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-the-interface-segregation-principle"&gt;
  &lt;/a&gt;
  I: The Interface segregation principle
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Many client-specific interfaces are better than one general-purpose interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again... look at the cover photo.&lt;br&gt;
Would it even be possible to make anything if pieces wanted to be ALL pieces?&lt;/p&gt;

&lt;p&gt;You would have one big piece what would be too much on all situations.&lt;br&gt;
Maybe all you wanted is a little brick with one knob, but instead you have a gigantic thing that... just don't fit.&lt;br&gt;
If it won't be using everything... you just use the right piece for the job. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#d-the-dependency-inversion-principle"&gt;
  &lt;/a&gt;
  D: The Dependency inversion principle
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Depend upon abstractions, [not] concretions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More than just plastic pieces, you have stuff made out of LEGO that you wouldn't believe!&lt;br&gt;
Electric toys, prosthetic limbs, drones...&lt;/p&gt;

&lt;p&gt;And how is that possible? Have you ever seen motors, batteries, circuit boards with knobs and tubes?&lt;br&gt;
No, because you don't need them.&lt;/p&gt;

&lt;p&gt;You "hide" them, behind an &lt;em&gt;abstraction&lt;/em&gt; that will have the knobs and tubes and that &lt;em&gt;abstraction&lt;/em&gt; will connect with the rest. &lt;br&gt;
You don't need special parts that will fit the LEGO, you just need to encapsulate it in a way that you can use that instead.&lt;/p&gt;




&lt;p&gt;Little pieces that you aggregate, one by one, multiples by multiples and that makes a bigger and more complex things... LEGO and programming... who knew right?&lt;/p&gt;




&lt;p&gt;&lt;a href="https://buymeacoffee.com/noriller"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AEuIK9cH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hx2uxkw087643wc4t51o.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@xavi_cabrera?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Xavi Cabrera&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Building A Product Management Tool Using Appsmith and FaunaDB</title>
      <author>Curious Paul</author>
      <pubDate>Sun, 24 Oct 2021 23:24:13 +0000</pubDate>
      <link>https://dev.to/curiouspaul1/building-a-product-management-tool-using-appsmith-and-faunadb-3mi</link>
      <guid>https://dev.to/curiouspaul1/building-a-product-management-tool-using-appsmith-and-faunadb-3mi</guid>
      <description>&lt;p&gt;In this article, I'll be showing you how to create a product management tool that helps, small business signed up on a mythical e-commerce platform manage products in their catalogue. This tool will allow users to view products and edit them from their catalogues. This article will also help to show how you can integrate Appsmith with other serverless tools like FaunaDB.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#setting-up-a-faunadb-database"&gt;Setting Up A FaunaDB Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#building-the-management-tool-using-appsmith"&gt;Building The Management Tool Using Appsmith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fauna is a flexible, developer-friendly, NoSQL database delivered as a secure and scalable cloud API with native GraphQL. It is a serverless solution for hosting data without having to worry about setting up or configuring your backend architecture to host data, as with traditional applications. This allows developers to focus more on building application logic with little to no involvement in database hassles - Fauna handles all that for you.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#setting-up-a-faunadb-database"&gt;
  &lt;/a&gt;
  Setting Up A FaunaDB Database
&lt;/h3&gt;

&lt;p&gt;In order to follow along, you'll need to have a FaunaDB account, if you don't have one you can easily sign up in a few minutes via this &lt;a href="https://dashboard.fauna.com/accounts/register"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you're signed up, log in to your Fauna dashboard and use the &lt;code&gt;Create Database&lt;/code&gt; button to create a new database, fill in the details as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6172_3kH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj2jjjnpx2fm9ea4zcpp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6172_3kH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj2jjjnpx2fm9ea4zcpp.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Observe the &lt;code&gt;Use demo data&lt;/code&gt; option and see that it is checked, this will tell Fauna to help us prepopulate this new database with demo data that we can use to play around, and co-incidentally (or not), this data is related to customers and businesses. Fauna will add collections, documents as well as indexes, and you can find them in the correspoding sections of your database dashboard as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0s-tkNse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pug6lptwvrpj5vkcl0iv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0s-tkNse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pug6lptwvrpj5vkcl0iv.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#generating-an-api-key"&gt;
  &lt;/a&gt;
  Generating An API Key
&lt;/h4&gt;

&lt;p&gt;Now that this is done, what we need now is an Api key, which will allow us communicate with our database from other applications, like our appsmith tool for instance. To get this head over to the &lt;code&gt;Security&lt;/code&gt; tab of the database dashboard and click on the &lt;code&gt;New key&lt;/code&gt; option to generate a new key, you can give the key a name if you want, leave the other options as they are and click the &lt;code&gt;Save&lt;/code&gt; button to generate a new key.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N9kxpgOn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdyrnta84n3xwvflffzv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N9kxpgOn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdyrnta84n3xwvflffzv.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you get the key, you need to copy it and save it somewhere for later when we need it. That's it for setting up the database, prettu easy as you can see, now lets create the interface for our tool.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#building-the-management-tool-using-appsmith"&gt;
  &lt;/a&gt;
  Building The Management Tool Using Appsmith
&lt;/h3&gt;

&lt;p&gt;To begin with you want to make sure you've signed up with Appsmith, its super-easy you can sign up &lt;a href="https://app.appsmith.com/user/signup"&gt;here&lt;/a&gt;. Once you have that login to your dashboard and create a new application, this should bring you to the development environment like the one shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rNg1CqCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqvuk4rf3gh3x2w2ror0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rNg1CqCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqvuk4rf3gh3x2w2ror0.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This environment is where we'd be building our "application" and its mostly a drag and drop environment with widgets and other build tools on the left pane and the wider space to the right is the development area where you drag widgets on. &lt;/p&gt;

&lt;p&gt;We'll start by clicking and dragging a &lt;code&gt;table&lt;/code&gt; widget unto the right area, this table will display a business's product listings, and the details of each one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iTsxyCRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lopxptep770g0yu62xi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTsxyCRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lopxptep770g0yu62xi.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can resize the table by dragging on the edges, however leave some space so that we can add one more widget - a form. This form will collect information for a new product to be added to the list and will also serve as a means of editing already existing products in the catalogue.&lt;/p&gt;

&lt;p&gt;Click and drag the form widget onto the right area so that it fits to the right of the table as shown below, you may need to do some resizing to get it to fit in there:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mSQJVJEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvdmejrqgfpif34nvcyt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mSQJVJEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvdmejrqgfpif34nvcyt.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#populating-the-table"&gt;
  &lt;/a&gt;
  Populating The Table
&lt;/h4&gt;

&lt;p&gt;In order to populate the table with data from our database, we'll be using the GraphQL api that Fauna automatically created for us when we created the database - again this is courtesy of the option we checked earlier on when we created the database to allow Fauna pre-populate the database with data on our behalf.&lt;/p&gt;

&lt;p&gt;In order to see what queries we can run head over to the &lt;code&gt;GraphQL&lt;/code&gt; section in the database dashboard to view the queries Fauna created on our behalf:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DK0a63sD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wxbi96hqhpcgnxjp8gw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DK0a63sD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wxbi96hqhpcgnxjp8gw.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The link to this graphql api is in the searchbox on this page, copy it and head over to the appsmith dashboard from  before, and click on the &lt;code&gt;Datasources&lt;/code&gt; option to create a new api.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qz1Lt1QE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekjn5x5wva6jomcb6qdb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qz1Lt1QE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekjn5x5wva6jomcb6qdb.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It should prompt you to enter details about your api on a new page, these includes a name for the API (I called mine FaunaApi), the URL, headers and data or request body to be sent to the Api. Fill the details as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S2LNLwsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5oevz3g27fp9c4iyn7e.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S2LNLwsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5oevz3g27fp9c4iyn7e.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the value of &lt;code&gt;Authorization&lt;/code&gt; in the headers, its usually in the format of &lt;code&gt;Bearer [Fauna Secret]&lt;/code&gt; which is what we got from previous steps, copy that and paste it in, as I have done.&lt;/p&gt;

&lt;p&gt;Next we must now write the query that fetches data from our api, so in the body of the request select type &lt;code&gt;JSON&lt;/code&gt; and add the following piece of query to fetch all products on our hypothetical platform:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
                {
                    allProducts{
                        data{
                            _id
                            name
                            description
                            price
                            backordered
                            backorderLimit
                            quantity
                            store{
                                name
                            }
                        }
                    }
                }
            `&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Observe that we use the JSON.stringify method provided by appsmith (via the moustache syntax) to ignore the line breaks. Inside the query we have the query name - &lt;code&gt;allProducts&lt;/code&gt; and is one specified by Fauna on our behalf you can check its doc back at the Fauna dashboard under the &lt;code&gt;GraphQL&lt;/code&gt; section to see available queries and mutations. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--afgyt4Xs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/071c5fh1dplknvj9tsbd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--afgyt4Xs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/071c5fh1dplknvj9tsbd.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now head back to the table widget and we'll ask the table to fetch data from this api instead of the hard-coded data in it. Click on the table widget and its context manager should pop-up right beside it, and under the field that reads - &lt;code&gt;Table Data&lt;/code&gt;, you want to clear out the hard-coded data in it and add the following instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;FaunaApi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allProducts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will populate the table with results from the api instead.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0CT-jAR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o1xk0lobsi3zlgy41t5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0CT-jAR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o1xk0lobsi3zlgy41t5.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The store column seems to come as an object, as opposed to a simple string. This is because stores are independent documents in the database too, and have other attributes as well, however in this query we only fetch their name but the result comes in an object format regardless. &lt;/p&gt;

&lt;p&gt;Appsmith allows us the flexibility of editing columns too, so we can click on the settings icon on the &lt;code&gt;store&lt;/code&gt; column in the &lt;code&gt;Columns&lt;/code&gt; section and in the &lt;code&gt;computed value&lt;/code&gt; option from the menu that shows up, we change the value to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;currentRow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRzvjqs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnl3vyv2op7yos51qfti.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRzvjqs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnl3vyv2op7yos51qfti.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also want to set the &lt;code&gt;Column Type&lt;/code&gt; on the &lt;code&gt;price&lt;/code&gt;, &lt;code&gt;backorderLimit&lt;/code&gt; and &lt;code&gt;quantity&lt;/code&gt; columns to a type of &lt;code&gt;Number&lt;/code&gt; so that Appsmith can properly handle the data.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#building-the-form"&gt;
  &lt;/a&gt;
  &lt;u&gt;Building The Form&lt;/u&gt;
&lt;/h4&gt;

&lt;p&gt;To create a form, we'll need the &lt;code&gt;Text&lt;/code&gt; and &lt;code&gt;Input&lt;/code&gt; widgets which will help us to name and create the input fields for the form. For this form we need fields that correspond to the title of each column except of course the &lt;code&gt;_id&lt;/code&gt; and &lt;code&gt;store&lt;/code&gt; column, those should be immutable ideally.&lt;/p&gt;

&lt;p&gt;So drag and drop the widget and position them so that the form looks like the one shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nlWEbdqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p6l0uju4akmgzvr0u5f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nlWEbdqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p6l0uju4akmgzvr0u5f.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Observe that for the &lt;code&gt;backordered&lt;/code&gt; column, we drag a &lt;code&gt;Switch&lt;/code&gt; widget to the form as opposed to an input widget because it's values are boolean and that corresponds to a switch or a checkbox widget which can represent both states as checked or unchecked.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we want to be able to prefill these fields when any product is selected on the table so that we can edit them on the form. To do this we leverage on the &lt;code&gt;Default value&lt;/code&gt; property of the input widget and add moustache syntax to fetch data on the selected row and add it to the field. &lt;/p&gt;

&lt;p&gt;Add the following to the &lt;code&gt;Default value&lt;/code&gt; entry on the &lt;code&gt;Product name&lt;/code&gt; field to prefill it with the name of the product on a selected row.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;Table1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectedRow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't see the details of the input widget, click on the settings icon beside it to bring up the properties of the widegt, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3yiqhH6v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn851teszb4krh7pdvig.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3yiqhH6v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn851teszb4krh7pdvig.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do this for the other fields adding in the corresponding column name for each one. Also set the &lt;code&gt;Data type&lt;/code&gt; property for the input fields: &lt;code&gt;quantity&lt;/code&gt;, &lt;code&gt;backorderLimit&lt;/code&gt;, and &lt;code&gt;price&lt;/code&gt; to type of &lt;code&gt;Number&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;"backordered"&lt;/code&gt; switch use the &lt;em&gt;&lt;code&gt;Default Selected&lt;/code&gt;&lt;/em&gt; option to add the moustache syntax as with the other fields, as shown below, this will automatically change the state of the switch depending on what value on the "backordered" column is for the selected row.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wambXWb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98pyf4ambwblncx1sk7i.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wambXWb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98pyf4ambwblncx1sk7i.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#updating-a-product"&gt;
  &lt;/a&gt;
  &lt;u&gt;Updating A Product&lt;/u&gt;
&lt;/h4&gt;

&lt;p&gt;Once this is done, we need to write a query that helps to update the document in the database when we change something in the form and hit the submit button. This query will be tethered to the &lt;code&gt;Submit&lt;/code&gt; button widget, which was automatically added when the form was created.&lt;/p&gt;

&lt;p&gt;We will now create a new Api to handle this, using the same steps as we have done for the first one, give this a name, and use the same headers from before. In the body of the request, we want to add the following to pick data from the input fields and send them to the graphQL api:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`mutation ($object: ProductInput!){
                            updateProduct(
                                id: "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Table1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectedRow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;",
                                data: $object
                            )
                            {
                                name
                            }
                        }`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Input1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Input2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Input3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                        
                    &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Input4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;backorderLimit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Input6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;backordered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Switch1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSwitchedOn&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This query fetches the ID of the currently selected row, and uses the data from the pre-filled and or edited form to update the details of the produt on the Fauna database. &lt;/p&gt;

&lt;p&gt;Let's now tie this with the submit button so that when we edit the form and click submit the this api is called. Head over to the submit widget and bring up the settings pane, and under the &lt;code&gt;Actions&lt;/code&gt; section choose the option to &lt;code&gt;Execute a query&lt;/code&gt; and then select the &lt;code&gt;updateProduct&lt;/code&gt; api from the list of options showed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d75PKAC0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehr0nu8owtwo816pb3s7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d75PKAC0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehr0nu8owtwo816pb3s7.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;We also want the table to refresh its data &lt;code&gt;onSuccess&lt;/code&gt; of the api query, and we do this by specifying an &lt;code&gt;onSuccess&lt;/code&gt; action right beneath the &lt;code&gt;onClick&lt;/code&gt; action of the submit button, this also &lt;code&gt;Executes a query&lt;/code&gt; via the FaunaApi which we created first - remember this api is responsible for populating the table with data from the database. You can now select any row from the table, edit it in the form and send the request to update the database, which in turn updates the table accordingly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this article, we have seen a brief introduction to Fauna, and the kind of flexibility it offers, we created a FaunaDB database, and generated data automatically with the help of Fauna including a full fledged GraphQL API, which helped us to intereact with Appsmith later on, lastly we worked with Appsmith to build a simple product management tool for business owners, and connected it to our Fauna API, using &lt;code&gt;datasources&lt;/code&gt; from Appsmith. Hopefully this tutorial has further shown you what is possible with serverless technologies like Appsmith and Fauna. Thanks for sticking with me till the end, happy coding!.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Conditional logic you should know</title>
      <author>Muhammad Muhktar Musa</author>
      <pubDate>Sun, 24 Oct 2021 23:14:18 +0000</pubDate>
      <link>https://dev.to/mcube25/conditional-logic-you-should-know-3bad</link>
      <guid>https://dev.to/mcube25/conditional-logic-you-should-know-3bad</guid>
      <description>&lt;p&gt;Once you start getting JavaScript under the belt, one of the things you would want to do is get conditional logic into an application. What is conditional logic? Conditional logic acts as a traffic curve in a program. It decides which conditions are to be prioritized if the logic is true. It also decides the code to run or what to do if the condition is false. This conditions can be used to run different things based on different values.&lt;br&gt;
 Let us take a look at 3 different conditional logic in javaScript. We want to know what they look like and when they are to be used to optimize an application .&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#ifelse-statement"&gt;
  &lt;/a&gt;
  If/else statement
&lt;/h4&gt;

&lt;p&gt;We are going to look at an array of food and each food is represented an objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fruits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lettuce&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vegetable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grains&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to use a javascript forEach method to loop through the contents of the food array and execute the function using the if/else statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;family&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fruits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`i am eating &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Vegetable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`i am eating &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grains&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`i am eating &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run the above code we get the current value that we loop over and introduce our conditional logic. All we are doing is saying if the condition is met run the code or other wise move to the next statement. That is the basic idea behind an if statement. It is a very simple but powerful tool. We can apply an else statement to the if statement. For example we can say&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fruits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`i am eating &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Vegetable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`i am eating &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grains&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`i am eating &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all food are good for hunger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we give a condition to the if statement, if the condition is true we are going to log a statement otherwise we log whatever the else statement is when the if statement is through no matter the value we are looping through. As long as it does not  meet our if statement the else statement will be logged.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#switch-statement"&gt;
  &lt;/a&gt;
  Switch statement
&lt;/h4&gt;

&lt;p&gt;The next type of logic we are going to look at is the switch statement. The switch statement is similar to the if/else statement. We going to take a look at a similar food array and loop through using the switch statement&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFoodAll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is my favorite fruit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lettuce&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is my favorite Vegetable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is my favorite grain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;i have no business being here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlike if/else statements, the switch statements keep going. They do what is called fall through. What it does is print all the statements when the conditions are met. To prevent all the statements falling through, a break statement is added.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFoodAll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is my favorite fruit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lettuce&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is my favorite Vegetable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is my favorite grain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;i have no business being here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When using the switch statement, in some cases we want to fall through all the various cases. In some other cases we want to break the code when we have our result. The break is known as the stop mechanism for achieving this. When we hit a statement we want evaluated the break stops the code from evaluating all other statements from that point. This break stops the steady flow. If we don't have a break, the code is going to run to the default statement. The switch statement is super useful in replacing logic that uses a lot of if/else statements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ternary-operator"&gt;
  &lt;/a&gt;
  Ternary operator
&lt;/h4&gt;

&lt;p&gt;It is a simple piece of very powerful code. It is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. This operator is frequently used as a shortcut for the if statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;lifeStyle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the tenery operator the above logic can be simplified into&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function lifeStyle() {
    return condition1 ? value1
         : condition2 ? value2
         : condition3 ? value3
         : value4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>[SOLVED?] Is there a way to have raw-types in (modern) C++?</title>
      <author>Calin Baenen</author>
      <pubDate>Sun, 24 Oct 2021 22:29:33 +0000</pubDate>
      <link>https://dev.to/baenencalin/is-there-a-way-to-have-raw-types-in-modern-c-2knd</link>
      <guid>https://dev.to/baenencalin/is-there-a-way-to-have-raw-types-in-modern-c-2knd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-raw-types"&gt;
  &lt;/a&gt;
  What are "raw" types?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html"&gt;Raw types&lt;/a&gt;&lt;sup&gt;(in Java)&lt;/sup&gt; is a type who has type-arguments (generics/templates*), but whose type-arguments are not specified in a declaration.&lt;br&gt;
Consider the following (Java) code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NeverRaw1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;NeverRaw1&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="no"&gt;T&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NeverRaw2&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;NeverRaw2&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ... Some code later...&lt;/span&gt;

&lt;span class="c1"&gt;// This isn't raw because a type argument is specified.&lt;/span&gt;
&lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;notRaw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// This IS raw because none are specified&lt;/span&gt;
&lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt; &lt;span class="n"&gt;uncooked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Invalid. Mismatched types.&lt;/span&gt;
&lt;span class="n"&gt;notRaw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.56&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Valid. No type mismatch because none is specified.&lt;/span&gt;
&lt;span class="n"&gt;uncooked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.56&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-would-you-want-types"&gt;
  &lt;/a&gt;
  Why would you want types?
&lt;/h2&gt;

&lt;p&gt;So, the first thought that probably popped into your head is "Hey. Isn't that not type-safe?", and to that, I say "Yes. It can be unsafe at times. But then it can also be utilized.".&lt;br&gt;&lt;br&gt;
So? Where can I use this?&lt;br&gt;
Well, here's where I'm stuck. - I'm implementing a &lt;code&gt;Token&lt;/code&gt; type for Janky, and I want to have a &lt;code&gt;parse(std::string|char*)&lt;/code&gt; function that returns an array of &lt;code&gt;Token&lt;/code&gt;.&lt;br&gt;
How is this a problem?&lt;br&gt;
It's a problem because even if you want to return an array of something, you must define the template arguments.&lt;br&gt;
My &lt;code&gt;Token&lt;/code&gt; type is written as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Token&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;T&lt;/span&gt;              &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;TokenType&lt;/span&gt;      &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TokenType&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;_UNASSIGNED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And I can't create any abstraction, since all pieces of this structure are important to have. -- And because members aren't preserved when you say a piece of data is of its parent type.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so"&gt;
  &lt;/a&gt;
  So...
&lt;/h2&gt;

&lt;p&gt;What's the best solution here?&lt;/p&gt;

&lt;h1&gt;&lt;b&gt;Thanks!&lt;br&gt;Cheers!&lt;/b&gt;&lt;/h1&gt;

</description>
      <category>cpp</category>
      <category>c</category>
      <category>help</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How to create a Preloader in NextJS</title>
      <author>Caleb O.</author>
      <pubDate>Sun, 24 Oct 2021 22:22:40 +0000</pubDate>
      <link>https://dev.to/seven/how-to-create-a-preloader-in-nextjs-15n8</link>
      <guid>https://dev.to/seven/how-to-create-a-preloader-in-nextjs-15n8</guid>
      <description>&lt;p&gt;There's always a need to have all the content of a webpage ready before it is displayed to whoever is visiting your web app/website.&lt;/p&gt;

&lt;p&gt;In situations where the contents of the webpage aren't ready, people would have to wait for it to be displayed, and this causes a very high decline rate of people who visit your website.&lt;/p&gt;

&lt;p&gt;In this article, we'll have a look at how we can build a loading screen component that is displayed whenever the contents of the page is about to be mounted onto the DOM.&lt;/p&gt;

&lt;p&gt;Before you read this article any further, you should be familiar with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, a declarative JavaScript library for building user interfaces&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/"&gt;NextJS&lt;/a&gt;, a framework of React, used for building production-ready applications&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://seven.hashnode.dev/two-very-simple-ways-to-render-ui-conditionally-in-react"&gt;Conditional rendering&lt;/a&gt; in React&lt;/li&gt;
&lt;li&gt;Animations in CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;In this article, we’ll be using NextJS to set up our app, you can use &lt;a href="https://create-react-app.dev"&gt;create-react-app&lt;/a&gt; if you are not familiar with NextJS. &lt;/p&gt;

&lt;p&gt;Let us start by installing the dependencies that we need in this project. We’d start by creating a nextjs app. The command below gets the dependencies that we need in a  Nextjs app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app &lt;span class="o"&gt;[&lt;/span&gt;name-of-your-app]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ll make use of the &lt;code&gt;"styled-component"&lt;/code&gt; library to style the loading screen component. Let’s get the dependency above by typing the command below into our terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; styled-components
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-components-in-our-nextjs-app"&gt;
  &lt;/a&gt;
  The components in our Nextjs app
&lt;/h2&gt;

&lt;p&gt;In this section, we are going to see the different files that make up the architecture of this project, and their respective functions below.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;pages&lt;/code&gt; directory is where all the routing of the app takes place. This is an out-of-the-box feature of Nextjs. It saves you the stress of hard hard-coding your independent routes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pages/api&lt;/code&gt;: the api directory enables you to have a backend for your nextjs app, inside the same codebase, instead of the common way of creating separate repositories for your REST or GraphQL APIs and deploying them on backend hosting platforms like Heroku, and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pages/_app.js&lt;/code&gt;: is where all our components get attached to the DOM. If you take a look at the component structure, you’ll see that all the components are passed as &lt;code&gt;pageProps&lt;/code&gt; to the &lt;code&gt;Component&lt;/code&gt; props too.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is like the &lt;code&gt;index.js&lt;/code&gt; file in Create-React-App. The only difference here is that you are not hooking your app to the DOM node called “root”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;index.js&lt;/code&gt; is the default route in the pages folder. When you run the command below, it starts up a development server and the contents of &lt;code&gt;index.js&lt;/code&gt; are rendered on the web page.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-the-loading-screen-component"&gt;
  &lt;/a&gt;
  Building the loading screen component
&lt;/h2&gt;

&lt;p&gt;The previous sections walked you through the process of installing the dependencies that are needed for building the loading screen component and the functions of each file in a typical Nextjs app.&lt;/p&gt;

&lt;p&gt;In this section, we'll go through the step-by-step process of building the component itself.&lt;/p&gt;

&lt;p&gt;First, we'll be taking a look at the style of the loader. We are using the styled component library for this purpose.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Screen&lt;/code&gt; styled-component serves as the parent container that wraps the loading animation. It uses a &lt;code&gt;fade&lt;/code&gt; keyframe to ensure the transition of the screen is properly utilized.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// loadingScreen.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Screen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  position: relative;
  height: 100vh;
  width: 100%;
  opacity: 0;
  animation: fade 0.4s ease-in forwards;
  background: black;

  @keyframes fade {
    0% {
      opacity: 0.4;
    }
    50% {
      opacity: 0.8;
    }
    100% {
      opacity: 1;
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The snippet below shows the &lt;code&gt;Balls&lt;/code&gt; styled component. It serves as a container for the child elements in it. The corresponding &lt;code&gt;divs&lt;/code&gt; in the container are the balls that we'll be animating.&lt;/p&gt;

&lt;p&gt;You'll notice that there are unique &lt;code&gt;className&lt;/code&gt;s assigned to each &lt;code&gt;div&lt;/code&gt; element in the container. This is for us to be able to set an &lt;code&gt;animation-delay&lt;/code&gt; property on each ball so that the oscillating effect can be seen properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Balls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  display: flex;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  .ball {
    height: 20px;
    width: 20px;
    border-radius: 50%;
    background: #1b5299;
    margin: 0 6px 0 0;
    animation: oscillate 0.7s ease-in forwards infinite;
  }

  .one {
    animation-delay: 0.5s;
  }
  .two {
    animation-delay: 1s;
  }
  .three {
    animation-delay: 2s;
  }

  @keyframes oscillate {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(20px);
    }
    100% {
      transform: translateY(0);
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're new to animations in CSS. You can check this &lt;a href="https://seven.hashnode.dev/the-abc-of-css-animation"&gt;guide&lt;/a&gt; that explains the fundamentals.&lt;/p&gt;

&lt;p&gt;Now that you have seen the styles of the components above. We'll go ahead to reference the styles in the &lt;code&gt;LoadingScreeen&lt;/code&gt; component below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Screen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;``&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Balls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;``&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoadingScreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Screen&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Balls&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ball one"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ball two"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ball three"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Balls&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Screen&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;LoadingScreen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementing-the-preloader-functionality"&gt;
  &lt;/a&gt;
  Implementing the preloader functionality
&lt;/h2&gt;

&lt;p&gt;We've seen the function of the loading screen styles and how the animation works behind the scene.&lt;/p&gt;

&lt;p&gt;In this section, we'll be importing the component into &lt;code&gt;_app.js&lt;/code&gt;. Take a look at it below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LoadingScreen&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../src/components/LoadingScreen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoadingScreen&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The snippet above shows how we've used conditional rendering to check the state of the loading component. We had to create a local state variable that holds the current state with the &lt;code&gt;useState&lt;/code&gt; React hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The initial state of the loader is set to a boolean value, &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useEffect&lt;/code&gt; hook is a lifecycle method in React that is fired whenever there's a change in the DOM. It combines all the lifecycle methods that a typical class-based component will have.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By setting the initial "falsy" state of the loader to be &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;useEffect&lt;/code&gt; hook. We're telling the browser to display the loader with the help of the &lt;code&gt;setTimeout&lt;/code&gt; function for a duration of five seconds. &lt;/p&gt;

&lt;p&gt;At the end of the timeframe, the browser should've loaded all the contents that need to be on the webpage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Below is a GIF that shows what we've been building all along.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3N8mrZ6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b42dd2hwzen23ycjl353.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3N8mrZ6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b42dd2hwzen23ycjl353.gif" alt="preloader demo site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although, this is an approach that helps us to have the content on a webpage/site available. If you are dealing with dynamic data, say from an API endpoint, the approach will be a little bit different.&lt;/p&gt;

&lt;p&gt;You can decide to make use of this &lt;a href="https://www.npmjs.com/package/react-spinners"&gt;react-spinners&lt;/a&gt; package if you don't want to spend time creating a custom loading component all by yourself.&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Kindly leave your thoughts in the comments section, and share this article with your peers, Thanks.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Today I successfully completed Hacktoberfest 2021! </title>
      <author>Souvik Mondal</author>
      <pubDate>Sun, 24 Oct 2021 21:47:03 +0000</pubDate>
      <link>https://dev.to/souvikm2002/today-i-successfully-completed-hacktoberfest-2021-2ab</link>
      <guid>https://dev.to/souvikm2002/today-i-successfully-completed-hacktoberfest-2021-2ab</guid>
      <description>&lt;p&gt;It was an amazing experience since it was my first participation to any open source project contribution. &lt;br&gt;
Thank you Hactoberfest and DigitalOcean for bringing this awesome opportunaty for me!!&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>cpp</category>
    </item>
    <item>
      <title>🔥How to become an SEO specialist in the coming 2022 #1</title>
      <author>Łukasz B.</author>
      <pubDate>Sun, 24 Oct 2021 20:57:02 +0000</pubDate>
      <link>https://dev.to/wallesamehere/how-to-become-an-seo-specialist-in-the-coming-2022-1-36h2</link>
      <guid>https://dev.to/wallesamehere/how-to-become-an-seo-specialist-in-the-coming-2022-1-36h2</guid>
      <description>&lt;p&gt;Hi, My name is Łukasz and it's my first post here 😇. I would like to share my knowledge of working as an SEO Specialist. In this post I will discuss the topic that I see such a person should have in 2022 to start work. The development of technology is progressing very quickly, which is why the requirements set for SEO specialists too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Who is an SEO Specialist&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2. Where can we work as an SEO Specialist&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;3. What skills should an SEO Specialist have&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;4. Everyday tasks in the SEO industry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlISKXp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlg2doykceaixo9njy3q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlISKXp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlg2doykceaixo9njy3q.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who is an SEO Specialist&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An SEO specialist is a person who works with the optimization and marketing of a website in order to achieve higher search engine rankings (commonly referred to as a website positioner).&lt;br&gt;
The word SEO specialist is not related to just one kind of job.&lt;/p&gt;

&lt;p&gt;The SEO industry is extremely broad 📏- apart from several career levels of an SEO Specialist, we also distinguish positions that include people dealing with content marketing, copywriting, linkbuilding or customer contact. So we can list jobs: SEO Analyst, SEO Specialist, SEO Consultant, SEO Technician, SEO Manager, SEO Trainer, SEO Director, and the position of SEO Specialist can be divided into career paths - Junior SEO Specialist, SEO Specialist, Senior SEO Specialist. Head of SEO, SEO Team Leader, Full Stack SEO, Full Stack SEO Expert or Full Stack SEO Developer 💰&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where we can work as an SEO Specialist.&lt;/strong&gt;&lt;br&gt;
Working as an SEO Specialist, we can work in an internet agency, in-house or as a freelancer.&lt;/p&gt;

&lt;p&gt;The great advantage of working in an &lt;strong&gt;SEO agency&lt;/strong&gt; is the variety of projects and the exchange of experiences based on various case-studies.&lt;/p&gt;

&lt;p&gt;Working &lt;strong&gt;in-house&lt;/strong&gt;, we usually constitute a one-person department whose task is to support the management board and the marketing department in the effective promotion of the company's offer. On the other hand, however, when working for one brand, we have much more time to get to know it, maximize its promotion and the freedom to experiment with new solutions.&lt;/p&gt;

&lt;p&gt;When working as a &lt;strong&gt;freelancer&lt;/strong&gt;, we certainly have the greatest freedom in our actions, we choose our clients and organize our working day. Soft skills, good communication and, above all, very good organization of work and self-discipline are very useful here. This type of work also does not require daily contact with clients or colleagues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What skills should an SEO specialist have&lt;/strong&gt;&lt;br&gt;
In my opinion, a good SEO specialist should have some of the features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Technical SEO skills&lt;/li&gt;
&lt;li&gt;ON-site SEO skills&lt;/li&gt;
&lt;li&gt;OFF-site SEO skills&lt;/li&gt;
&lt;li&gt;Data analysis skills&lt;/li&gt;
&lt;li&gt;Project management skills&lt;/li&gt;
&lt;li&gt;Web development skills&lt;/li&gt;
&lt;li&gt;Communication skills&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact, the best SEO specialists are people who are proficient in many different areas of digital marketing. This includes basic SEO skills, but also digital marketing skills such as copywriting and website design. At the beginning of your career as an SEO Specialist, you should definitely start with gaining knowledge about the secrets of SEO, positioning and website optimization. On the Internet you will find hundreds of interesting courses, both for beginners and more advanced people.&lt;/p&gt;

&lt;p&gt;While theoretical knowledge is not the most important for an SEO specialist, it does provide important preparation at the beginning of your career.&lt;/p&gt;

&lt;p&gt;On the theoretical level, an SEO specialist should know the basics of computer and network operation, know the basics of creating a website and be fluent in tools such as Excel or Docs. In addition, it is advisable for an SEO specialist to have a basic understanding of web technologies. It is difficult to list all the skills that a good specialist should have, but I will try to specify the appropriate elements according to the experience. You can read more about SEO on the website: &lt;a href="https://afterweb.pl/pozycjonowanie-stron/"&gt;https://afterweb.pl/pozycjonowanie-stron/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Skills at the Junior SEO Specialist level:&lt;/em&gt;&lt;br&gt;
-Computer skills and network &lt;br&gt;
-What is a website,Pagerank, proxy server, structural data&lt;br&gt;
-What are the URL parameters in the Google search engine&lt;br&gt;
-What is Hosting, Domain&lt;br&gt;
-FTP client (what is FTP, Scure FTP)&lt;br&gt;
-HTTP / HTTPS / HTTP2,&lt;br&gt;
-Internet browsers&lt;br&gt;
-Server's responses and be able to analyze and verify them,&lt;br&gt;
-Google penalties for violating the guidelines and know the differences between them,&lt;br&gt;
-Important updates of the Google&lt;br&gt;
-Google's ranking factors (the most important ones) and search engine guidelines&lt;br&gt;
-How it all works keywords in the search engine,&lt;br&gt;
-Google courses (GAIQ, Ads)&lt;br&gt;
-Office suite - Excel, Docs&lt;br&gt;
-Content marketing&lt;br&gt;
-On-page SEO&lt;br&gt;
-HTML&lt;br&gt;
-CSS&lt;br&gt;
-JavaScript (Basic)&lt;br&gt;
-Google Analytics (Basic)&lt;br&gt;
-Google Tag Manager (Basic)&lt;br&gt;
-Google My Business&lt;br&gt;
-SEO tools support&lt;br&gt;
-Navigating the most popular CMSs, eg Wordpress&lt;br&gt;
-The ability to speed up page loading, reduce the weight of photos, how the browser cache works, what is css sprite, interpret the results provided by these tools&lt;br&gt;
-keyword analysis using of free and paid tools&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Skills at the Senior SEO Specialist level:&lt;/em&gt;&lt;br&gt;
-Making marketing strategy&lt;br&gt;
-ON-page SEO (advanced)&lt;br&gt;
-OFF-page SEO - Linkbuilding (advanced)&lt;br&gt;
-HTML&lt;br&gt;
-CSS / SASS&lt;br&gt;
-RWD&lt;br&gt;
-JavaScript&lt;br&gt;
-CORS&lt;br&gt;
-API&lt;br&gt;
-Knowledge of frameworks (AngularJS, Backbone, Bootstrap, -Foundation and Vue.js)&lt;br&gt;
-Accessibility&lt;br&gt;
-RegExp&lt;br&gt;
-PHP&lt;br&gt;
-Python&lt;br&gt;
-NPM / YARN&lt;br&gt;
-Github&lt;br&gt;
-UX and UI&lt;br&gt;
-Google Ads&lt;br&gt;
-Google Tag Manager&lt;br&gt;
-Google Analytics&lt;br&gt;
-Content marketing&lt;br&gt;
-Excel&lt;br&gt;
-SQL&lt;br&gt;
-Navigate through popular CMS sites and stores.&lt;br&gt;
-Keyword analysis&lt;br&gt;
-Conducting trainings&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Everyday tasks in the SEO industry&lt;/strong&gt;&lt;br&gt;
The most popular tasks in the daily work of a specialist:&lt;br&gt;
-keyword analysis&lt;br&gt;
-creating SEO audits&lt;br&gt;
-contact with developers&lt;br&gt;
-preparation of work reports&lt;br&gt;
-creating a campaign strategy&lt;br&gt;
-contact with the customer&lt;br&gt;
-implementation of audit changes&lt;br&gt;
-marketing of the company I work for (e.g. I run a blog)&lt;br&gt;
-linkbuilding&lt;br&gt;
-supervision over copywriters&lt;br&gt;
-creating editorial recommendations&lt;br&gt;
-conducting internal training&lt;br&gt;
-creating offers for customers&lt;br&gt;
-team management&lt;br&gt;
-obtaining links (I run the entire process)&lt;br&gt;
-creating a back-end&lt;br&gt;
-conducting trainings for clients&lt;br&gt;
-writing SEO texts&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;br&gt;
Becoming an SEO specialist may seem difficult in part, and it takes a lot of work, time and effort, but if you follow the plan and gradually develop your skills, it's something anyone can do.&lt;br&gt;
Working in the SEO industry is both rewarding and creative. &lt;br&gt;
It is also one of the jobs that is in demand as more and more companies are investing in online marketing ( and the pandemic has shown how important the e-commers segment is ). The most important thing in working with SEO is to be patient. SEO is a very slow process, so if you are a beginner it will take a while to learn the theory and a lot more time to gain hands-on experience.&lt;/p&gt;

&lt;p&gt;Start today ❗️❗️ 🤓&lt;/p&gt;

&lt;p&gt;In my next posts, I will say something more about individual skills.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>5 Best High Order Array Methods in JavaScript</title>
      <author>Greg </author>
      <pubDate>Sun, 24 Oct 2021 20:54:06 +0000</pubDate>
      <link>https://dev.to/gregpetropoulos/5-best-high-order-array-methods-in-javascript-jh7</link>
      <guid>https://dev.to/gregpetropoulos/5-best-high-order-array-methods-in-javascript-jh7</guid>
      <description>&lt;div class="ltag__link"&gt;
  &lt;a href="https://medium.com/@gregpetropoulos/5-best-high-order-array-methods-in-javascript-dae589a2c9d9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNjidtFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/56/56/1%2ABytUH7cc0VxeJkrxn5DNCg.jpeg" alt="Greg Petropoulos"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/@gregpetropoulos/5-best-high-order-array-methods-in-javascript-dae589a2c9d9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Best High Order Array Methods in JavaScript | by Greg Petropoulos | Oct, 2021 | Medium&lt;/h2&gt;
      &lt;h3&gt;Greg Petropoulos ・ &lt;time&gt;Oct 24, 2021&lt;/time&gt; ・ 
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ze5yh_2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>coding</category>
      <category>javascript</category>
      <category>array</category>
      <category>highorderfunctions</category>
    </item>
  </channel>
</rss>
