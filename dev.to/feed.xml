<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How I created my portfolio with Nextjs and PlainCSS!</title>
      <author>Randeep Rana</author>
      <pubDate>Tue, 19 Oct 2021 13:29:49 +0000</pubDate>
      <link>https://dev.to/randeeprana/how-i-created-my-portfolio-with-nextjs-and-plaincss-26ik</link>
      <guid>https://dev.to/randeeprana/how-i-created-my-portfolio-with-nextjs-and-plaincss-26ik</guid>
      <description>&lt;p&gt;At present Next.js has been a very popular library to build beautiful, scalable Full-Stack Applications. Today I would like to share my experience on building a portfolio with Next.js.&lt;/p&gt;

&lt;p&gt;Before going to my &lt;a href="https://rana-portfolio.vercel.app/"&gt;Portfolio's&lt;/a&gt; explanation, Let me give a brief intro about Next.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-nextjs"&gt;
  &lt;/a&gt;
  Why Next.js?
&lt;/h2&gt;

&lt;p&gt;Next.js is a React Framework used for front-end development that enables us to use functionalities such as generating static websites and server-side rendering for React-based web applications.&lt;/p&gt;

&lt;p&gt;It's a great tool to build your next website. It has many great features and advantages, which can make Next.js your first option for building your next web application.&lt;/p&gt;

&lt;p&gt;If you want to learn more about it please visit &lt;a href="https://nextjs.org/docs/getting-started"&gt;Next.js Official Website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-idea"&gt;
  &lt;/a&gt;
  The Idea.
&lt;/h2&gt;

&lt;p&gt;One Year ago‚è≤ I built &lt;a href="https://r-rana-portfolio.netlify.app/"&gt;my last portfolio&lt;/a&gt; website with React.js and SASS, and till now I was using that one. But Last weekend I thought why not make a new portfolio. Because it's my current fav framework so I picked Next.js and I started working on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;p&gt;Firstly I was planningü§î to make it only single page portfolio, but then I decided to use Next.js routing and lets make different pages for different data, like about page, blog page, contact page and projects page.&lt;/p&gt;

&lt;p&gt;After Deciding Number of pages, I started working on Homepage or you can say landing page. I divided homepage into three sections, Hero Section, About, Skills. &lt;/p&gt;

&lt;p&gt;Background Videos in website is always excitesüòç me, so I used a video in Hero Section's background, and I used &lt;a href="https://fonts.google.com/specimen/Kaushan+Script"&gt;Kaushan script&lt;/a&gt; fonts for Main Heading in Hero Section.&lt;/p&gt;

&lt;p&gt;In About Section, I added two boxes one for image and second for details and A button to read more, and it redirects to about page.&lt;br&gt;
For Skills section, I added logos of all framworks and technologies in a single box. I prefer logos instead of text because it creates attention.&lt;/p&gt;

&lt;p&gt;Let's come to Other Pages, For Project's Page I made reusable component, this component create a box and it divide the screen width equally into two boxes and one box contains the Project's Image and other box contains the project's title and description. I loop through this component in projects data array and my projects page is ready.&lt;/p&gt;

&lt;p&gt;About page contains the same component which we have in project page and I added my data in it and it works fine for about page as well. &lt;/p&gt;

&lt;p&gt;Please Have a look on my &lt;a href="https://rana-portfolio.vercel.app/"&gt;Portfolio&lt;/a&gt;üöÄ.&lt;/p&gt;

&lt;p&gt;If you want to check the source code please visit my &lt;a href="https://github.com/Randeep-Rana-au8"&gt;Github Profile&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hope-you-liked-it"&gt;
  &lt;/a&gt;
  Hope you liked it
&lt;/h3&gt;

&lt;p&gt;Thank you guys for reading my first blog. Feel free to write your view and suggestion. Your feedback is always appreciatedüòÑ.&lt;/p&gt;

&lt;p&gt;Happy Codingüòâ&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>css</category>
      <category>javascript</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>Introducing Web Scraping with Scrapy.js</title>
      <author>Sijey</author>
      <pubDate>Tue, 19 Oct 2021 13:09:13 +0000</pubDate>
      <link>https://dev.to/sijeypraveen/introducing-web-scraping-with-scrapyjs-35pb</link>
      <guid>https://dev.to/sijeypraveen/introducing-web-scraping-with-scrapyjs-35pb</guid>
      <description>&lt;h1&gt;
  &lt;a href="#scrapyjs"&gt;
  &lt;/a&gt;
  Scrapy.js
&lt;/h1&gt;

&lt;p&gt;A Web Scraping library for JavaScript built using BeautifulSoup4.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#overview-of-this-library"&gt;
  &lt;/a&gt;
  Overview of this library
&lt;/h1&gt;

&lt;p&gt;First import the library using the script tag and then proceed to call the functions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://sijey-praveen.github.io/scrapy.js/lib/scrapy.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a-common-javascript-syntax-for-using-the-scrapy-object-looks-like-this"&gt;
  &lt;/a&gt;
  A common JavaScript syntax for using the Scrapy object looks like this:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Scrapy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://example.com/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html.parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;findElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#get-basic"&gt;
  &lt;/a&gt;
  Get Basic
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Scrapy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//creates an Scrapy object.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Scrapy()&lt;/code&gt; object needs 2 necessary arguments to further &lt;br&gt;
next step.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;url&lt;/strong&gt; &amp;gt; The source url.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;features&lt;/strong&gt; &amp;gt; This may be the name of a specific parser ("lxml", "lxml-xml", "html.parser").&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Scrapy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://example.com/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html.parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#findelement"&gt;
  &lt;/a&gt;
  findElement()
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;findElement()&lt;/code&gt; method is used to scrap the specific element from the given source url.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;findElement()&lt;/code&gt; method needs 3 necessary &amp;amp; 1 optional arguments to execute the program.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;class=hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;element&lt;/strong&gt; &amp;gt; the element you need to scrap.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;attrs&lt;/strong&gt; &amp;gt; you can specify element class and id or tags, if you need to specify class and id at the same time use &lt;code&gt;;&lt;/code&gt; to split it &lt;code&gt;attrs="class=hello;id=hello"&lt;/code&gt; (optional).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;get&lt;/strong&gt; &amp;gt; the element value you need to return.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;callback&lt;/strong&gt; &amp;gt; A callback function is executed after the current effect is finished.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#notice"&gt;
  &lt;/a&gt;
  Notice
&lt;/h1&gt;

&lt;p&gt;üòú You can use python &lt;code&gt;print()&lt;/code&gt; method to log stuffs in console once you imported Scrapy.js in your html.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#scraping-a-word-meaning-from-httpswwwdictionarycom"&gt;
  &lt;/a&gt;
  Scraping a word meaning from &lt;a href="https://www.dictionary.com/"&gt;https://www.dictionary.com/&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://sijey-praveen.github.io/scrapy.js/lib/scrapy.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.dictionary.com/browse/hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;meaning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Scrapy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html.parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;findElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;class=css-10ul8x e1q3nk1v2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;                
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#console-output"&gt;
  &lt;/a&gt;
  Console Output:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wp_UCYUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b876d29bqe1og3ccbolv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wp_UCYUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b876d29bqe1og3ccbolv.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#if-you-like-this-library-you-can-give-a-star-on-github-repo-and-support"&gt;
  &lt;/a&gt;
  if you like this library you can give a star üåü on GitHub Repo and support. üëç
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#github-httpsgithubcomsijeypraveenscrapyjs"&gt;
  &lt;/a&gt;
  GitHub : &lt;a href="https://github.com/sijey-praveen/scrapy.js"&gt;https://github.com/sijey-praveen/scrapy.js&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>{Completed my Hacktoberfest 2021-}</title>
      <author>Usama Jamil</author>
      <pubDate>Tue, 19 Oct 2021 13:08:16 +0000</pubDate>
      <link>https://dev.to/usamajamil67/completed-my-hacktoberfest-2021--2jki</link>
      <guid>https://dev.to/usamajamil67/completed-my-hacktoberfest-2021--2jki</guid>
      <description>&lt;p&gt;ALHAMDULILLAH, completed my first hacktoberfest 2021. &lt;/p&gt;

</description>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>How to choose between Next.js CSR, SSR, SSG, and ISR</title>
      <author>Theodorus Clarence</author>
      <pubDate>Tue, 19 Oct 2021 12:52:42 +0000</pubDate>
      <link>https://dev.to/theodorusclarence/how-to-choose-between-nextjs-csr-ssr-ssg-and-isr-15o</link>
      <guid>https://dev.to/theodorusclarence/how-to-choose-between-nextjs-csr-ssr-ssg-and-isr-15o</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;On my last blog, you have explored the technical side of how does it work underneath, now what you will need is how to choose between them. I'll give you 4 metrics and some use cases to help you decide.&lt;/p&gt;

&lt;p&gt;These metrics will generally work for &lt;strong&gt;most of the cases&lt;/strong&gt; but there might be some cases that are not fit with this metric.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;This post will not cover the technical difference between Client-Side Rendering, Server-Side Rendering, Static Site Generator, and Incremental Static Regeneration.&lt;/p&gt;

&lt;p&gt;You are encouraged to read my blog about &lt;a href="https://theodorusclarence.com/blog/nextjs-fetch-method"&gt;Understanding Next.js Data Fetching (CSR, SSR, SSG, ISR)&lt;/a&gt; first.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#something-to-note"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Something to note&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Please do note that when we are talking about a website, you can use more than 1 fetch method. Use the necessary fetch method for each page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#review"&gt;
  &lt;/a&gt;
  Review
&lt;/h2&gt;

&lt;p&gt;Let's review the last blog to remember what are the characteristics of each.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client-Side Rendering (useEffect) ‚Üí the data is fetched &lt;strong&gt;after every single render&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Server-Side Rendering ‚Üí the data is fetched &lt;strong&gt;before every single render&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Static Site Generator ‚Üí the data is fetched &lt;strong&gt;once at build time&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Incremental Static Regeneration ‚Üí the data is fetched &lt;strong&gt;once on build time&lt;/strong&gt; and will be &lt;strong&gt;fetched again after a certain cooldown&lt;/strong&gt; and served on the second visit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep an eye on the frequency of each fetch method.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#metrics"&gt;
  &lt;/a&gt;
  Metrics
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RFCOQgXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/halzqv6l9gc67b29lj9g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RFCOQgXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/halzqv6l9gc67b29lj9g.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usually, when I'm deciding what fetch method I should use, I consider these 4 metrics.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#metric-1-data-integrity"&gt;
  &lt;/a&gt;
  Metric 1: üîÑ Data Integrity
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OuLuPHT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ybfq4641lmbs3semvyv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OuLuPHT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ybfq4641lmbs3semvyv.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Data integrity is how fresh do you want the data to be.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#high"&gt;
  &lt;/a&gt;
  High
&lt;/h3&gt;

&lt;p&gt;High integrity means that we want fresh data‚Äîthe most updated one‚Äî&lt;strong&gt;every&lt;/strong&gt; &lt;strong&gt;single&lt;/strong&gt; &lt;strong&gt;render&lt;/strong&gt;. This is usually crucial for pages that are interactive and contain some critical value that can't be stale.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simply put:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We need the most updated data, every. single. time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Sites that benefit high data integrity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Products page that contains price ‚Üí imagine you have a product page, and the price shown is not the most updated one. You might lose some dough.&lt;/li&gt;
&lt;li&gt;The comment section on Twitter ‚Üí we want to see the most recent comment&lt;/li&gt;
&lt;li&gt;Social media ‚Üí we want to see the most up-to-date content obviously.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#medium"&gt;
  &lt;/a&gt;
  Medium
&lt;/h3&gt;

&lt;p&gt;Medium integrity means that we want to serve fresh data, but it is not much of a problem if some users get stale data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simply put:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We should get fresh data, but it's okay if some still see the stale one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Sites that benefit medium data integrity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blog post with CMS ‚Üí you can tolerate it when someone gets the stale page with minor typos&lt;/li&gt;
&lt;li&gt;Profile page ‚Üí it is rarely updated and it is not that critical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please note that &lt;strong&gt;only you&lt;/strong&gt; can decide what is critical. If you are mainly making a website to showcase your profile and portfolio with a high update rate, then it can be considered critical.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#low-to-none"&gt;
  &lt;/a&gt;
  Low to none
&lt;/h3&gt;

&lt;p&gt;Pages that fall into this category usually won't change or rarely change.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simply put:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We don't really care, just fetch and show it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Sites that benefit low to none data integrity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;About page&lt;/li&gt;
&lt;li&gt;A page with fixed data that won't change ‚Üí ex: a pokemon stat page (we will use this as an example later)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#table-result"&gt;
  &lt;/a&gt;
  Table Result
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ql96MDuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5tbvyby1ljq9c4753rp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ql96MDuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5tbvyby1ljq9c4753rp.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see on the illustration:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;High: CSR and SSR, as it fetches on every render&lt;/li&gt;
&lt;li&gt;Medium: ISR, we still can get the fresh data, but some user will still get the stale one&lt;/li&gt;
&lt;li&gt;Low to none: SSG, it is only fetched on build time&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#metric-2-seo"&gt;
  &lt;/a&gt;
  Metric 2: üîç SEO
&lt;/h2&gt;

&lt;p&gt;SEO (Search Engine Optimization) is going to be useful when we want our content to be easily found on google and bringing in that good organic visitors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QBwgeb_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0foly2qz3bmdtrx9a0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QBwgeb_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0foly2qz3bmdtrx9a0x.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I only have 2 categories for this, which are &lt;strong&gt;SEO Friendly&lt;/strong&gt; and &lt;strong&gt;Not SEO Friendly&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good"&gt;
  &lt;/a&gt;
  Good
&lt;/h3&gt;

&lt;p&gt;This category is expected when we are pre-rendering the content on the website, the general difference is when we are doing pre-render, we can see the content on the page source. This type of rendering will help search engines index our page and might put us up on the SEO ranking.&lt;/p&gt;

&lt;p&gt;SSR, SSG, ISG categorizes as SEO Friendly because the HTML is prefilled with the content without having to fetch it on the client-side.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sites that can benefit SEO&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shopping website ‚Üí it will be great if our products show up on search engine&lt;/li&gt;
&lt;li&gt;Quora-type website ‚Üí site that provides an answer of course relies on SEO. You probably not going to search something directly from quora or stack overflow, but you start on google.&lt;/li&gt;
&lt;li&gt;Social media ‚Üí contents need to be able to be searched on the internet&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#not-good"&gt;
  &lt;/a&gt;
  Not Good
&lt;/h3&gt;

&lt;p&gt;It is definitely not bad. Although we don't get any content on the page source, it doesn't mean that the search engine crawler can't index your page. The search engine can still index it, but it is not as friendly as the pre-rendered pages.&lt;/p&gt;

&lt;p&gt;CSR is categorized as Not SEO Friendly because we do not get any content until after the page renders.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sites that don't really need SEO&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authentication Gated Apps ‚Üí things like a dashboard, premium content, or paid courses.&lt;/li&gt;
&lt;li&gt;Registration page&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#table-result"&gt;
  &lt;/a&gt;
  Table Result
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kREzdRyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8kkdsva56gtz5lu4f7z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kREzdRyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8kkdsva56gtz5lu4f7z.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;SEO Friendly: SSR, SSG, and ISR all have very great SEO because they pre-render the fetched content&lt;/li&gt;
&lt;li&gt;Not SEO Friendly: CSR is not that good because we only get the data after render&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#metric-3-performance"&gt;
  &lt;/a&gt;
  Metric 3: ‚è© Performance
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XDN6jV-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7lckjheupok6vnm05vk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XDN6jV-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7lckjheupok6vnm05vk.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Performance is whether it is loading when we visit the page or not. It should be very easy to differentiate now if you have read the first blog.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note that performance in this metrics strictly means to the load time before First Contentful Paint, not to be generalized to the whole application performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#instant"&gt;
  &lt;/a&gt;
  Instant
&lt;/h3&gt;

&lt;p&gt;Instantly loads because the fetching does not happen when we request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loads-beforeafter-render"&gt;
  &lt;/a&gt;
  Loads before/after render
&lt;/h3&gt;

&lt;p&gt;There will be a slight loading on before or after renders.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-result"&gt;
  &lt;/a&gt;
  Table Result
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_iwR4OKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nbstxyhge39l8h8t46d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_iwR4OKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nbstxyhge39l8h8t46d.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, we obviously want better performance, so this is not something that you choose as the main metrics, but rather to consider.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Instant: SSG &amp;amp; ISR&lt;/li&gt;
&lt;li&gt;Loads before/after render: CSR &amp;amp; SSR&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#metric-4-build-time"&gt;
  &lt;/a&gt;
  Metric 4: ‚è∞ Build Time
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aV4J5F_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g1y8eykxmtu6nsme03x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aV4J5F_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g1y8eykxmtu6nsme03x.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Build time is the amount of time it takes to build and deploy the website.&lt;/p&gt;

&lt;p&gt;This metric is to be considered when we are generating a bunch of pages with parameters, for example, &lt;code&gt;product/[name]&lt;/code&gt; or &lt;code&gt;pokemon/[name]&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fast-only-one-page"&gt;
  &lt;/a&gt;
  Fast (only one page)
&lt;/h3&gt;

&lt;p&gt;When we are using CSR and SSR, we only build 1 page because the data won't be fetched at build time.&lt;/p&gt;

&lt;p&gt;For example, if we are visiting &lt;code&gt;/pokemon/bulbasaur&lt;/code&gt; then we will take that parameter and use it to fetch it before or after render.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#slow-every-single-page"&gt;
  &lt;/a&gt;
  Slow (every single page)
&lt;/h3&gt;

&lt;p&gt;When we are using SSG and ISR, we are fetching it on build time and creating a page out of the response. So if we have 1000 products, it will take quite some time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a1ert1_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o22hshhenssvibv1giqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a1ert1_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o22hshhenssvibv1giqm.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-time-example"&gt;
  &lt;/a&gt;
  Build Time Example
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---io0qf4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzycfuejjtp7yez9vmyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---io0qf4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzycfuejjtp7yez9vmyq.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alt:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/ssr/poke/[name]&lt;/code&gt; only have 1 page even though it is serving 100 pokemon&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/ssg/poke/[name]&lt;/code&gt; have all of the pokemon names built into a page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is something that you'll need to consider if you have thousands of products, or you want to show all of the pokemon out there. We can't wait for them to finish building, using CSR or SSR should be the right answer.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cheatsheet"&gt;
  &lt;/a&gt;
  Cheatsheet
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jG9h3IUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olho6yu5n352gz9qpw12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jG9h3IUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olho6yu5n352gz9qpw12.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#csr"&gt;
  &lt;/a&gt;
  CSR
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://next-usecase.thcl.dev/csr"&gt;https://next-usecase.thcl.dev/csr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EvU9Z8u4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hd0ofstrk2yesvwn73h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EvU9Z8u4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hd0ofstrk2yesvwn73h.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;there is a loading indicator when visited&lt;/li&gt;
&lt;li&gt;the data (repository detail) that is served is the most up to date&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's ideal for a dashboard and authentication-gated website. We need the latest data, and we don't really care about SEO.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ssg"&gt;
  &lt;/a&gt;
  SSG
&lt;/h2&gt;

&lt;p&gt;I'll give SSG example first so we can compare it with SSR&lt;/p&gt;

&lt;p&gt;&lt;a href="https://next-usecase.thcl.dev/ssg"&gt;https://next-usecase.thcl.dev/ssg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qd2nqZFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yoc71tvn75l99eh6wtqi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qd2nqZFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yoc71tvn75l99eh6wtqi.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data fetched on build time at 13:58:38, when the current time is already 2 hours late‚Äî16:28:30&lt;/li&gt;
&lt;li&gt;It is instant and has no loading&lt;/li&gt;
&lt;li&gt;There are 10 pokemon data to choose&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This one is great for pokemon data because the data probably won't change for quite some time. And maybe you have a question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why not just store it as JSON and create every page?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We usually use SSG for convenience, adding hundreds of pages is quite repetitive and we can maintain it better if we use &lt;code&gt;getStaticProps&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ssr"&gt;
  &lt;/a&gt;
  SSR
&lt;/h2&gt;

&lt;p&gt;You probably notice and have it in mind that apps that have high data integrity and have a good SEO should use SSR, for example, products page, comment section. The obvious example should be Quora, Reddit, Facebook, etc.&lt;/p&gt;

&lt;p&gt;But it is not always the case, here is the same pokemon app using SSR:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://next-usecase.thcl.dev/ssr"&gt;https://next-usecase.thcl.dev/ssr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a1dEa-zA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5sbua7u4st07kzmpjo7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a1dEa-zA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5sbua7u4st07kzmpjo7.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clicking the page takes a second or two before the page shows up&lt;/li&gt;
&lt;li&gt;Fetch time is the current time (meaning the data is fresh)&lt;/li&gt;
&lt;li&gt;There are considerably a lot of pokemon to choose&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This use case fits because there are about 900 pokemon, and if we build all of them using SSG, it is going to take a while. That is why you should also consider the build time metric.&lt;/p&gt;

&lt;p&gt;Well actually 900 is not that much, but imagine Amazon or eBay.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#isr"&gt;
  &lt;/a&gt;
  ISR
&lt;/h2&gt;

&lt;p&gt;ISR is quite fun and might be the common grounds between the 4 fetch methods, but we need to emphasize the data integrity. ISR can still give stale data, so it will be dangerous if you are using it on a critical process.&lt;/p&gt;

&lt;p&gt;For this example, I suggest you visit it yourself&lt;/p&gt;

&lt;p&gt;What to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Try to star the repo that is linked in the demo page (&lt;strong&gt;disclosure&lt;/strong&gt;: you are going to star my personal repository, kindly keep it starred if you like this post üòâ)&lt;/li&gt;
&lt;li&gt;Wait for about 5-10 seconds&lt;/li&gt;
&lt;li&gt;Refresh the page &lt;strong&gt;twice&lt;/strong&gt; (remember how ISR works)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Demo page: &lt;a href="https://next-usecase.thcl.dev/isr"&gt;https://next-usecase.thcl.dev/isr&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You done? Cool!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can see that the data will still update, but we can have medium data integrity and still have a good performance.&lt;/p&gt;

&lt;p&gt;This is very useful if you are creating a blog with CMS, and it will be updated without having to rebuild the whole site.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#additional-resource"&gt;
  &lt;/a&gt;
  Additional Resource
&lt;/h2&gt;

&lt;p&gt;There is a pattern that uses ISR and &lt;a href="http://swr.vercel.app/"&gt;SWR&lt;/a&gt; library, it follows optimistic UI by mutating the value, and regenerating on the background.&lt;/p&gt;

&lt;p&gt;I'm not going to cover this topic, but Joe Bell has a really &lt;a href="https://joebell.co.uk/blog/updating-static-next-js-pages-instantly"&gt;great article&lt;/a&gt; about it.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Save the 4 metrics cheatsheet, and try to consider each of them when you want to choose.&lt;/p&gt;

&lt;p&gt;Remember you can use multiple fetch methods on different pages. You can use CSR on the dashboard, and also use SSR on the product page. Use the best one.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How To Install Linux, Apache, MySQL, PHP On Ubuntu</title>
      <author>Devtonight</author>
      <pubDate>Tue, 19 Oct 2021 12:30:42 +0000</pubDate>
      <link>https://dev.to/devtonight/how-to-install-linux-apache-mysql-php-on-ubuntu-76b</link>
      <guid>https://dev.to/devtonight/how-to-install-linux-apache-mysql-php-on-ubuntu-76b</guid>
      <description>&lt;p&gt;LAMP stack or Linux, Apache, MySQL and PHP are the main essential set of tools that you need to develop or run a PHP based web application or a CMS (Content Management System) such as Laravel and WordPress.&lt;/p&gt;

&lt;p&gt;Usually, when we develop an application, we create at least 3 different and separate environments for development, stage and production. In this guide, mainly you will be able to learn how to install and set up the LAMP stack. Additionally, you will be able to learn how to install Composer, NPM and troubleshoot possible errors which can be occurred when setting up the MySQL server and phpMyAdmin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lamp-linux-apache-mysql-php-stack-setup"&gt;
  &lt;/a&gt;
  LAMP (Linux, Apache, MySQL, PHP) Stack Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#linux-installation"&gt;
  &lt;/a&gt;
  Linux Installation
&lt;/h3&gt;

&lt;p&gt;You can install LAMP stack on any Linux distribution such as &lt;a href="https://ubuntu.com/"&gt;Ubuntu&lt;/a&gt;, &lt;a href="https://getfedora.org/"&gt;Fedora&lt;/a&gt; and &lt;a href="https://www.centos.org/"&gt;CentOS&lt;/a&gt;. Since different distributions use their package managers, we are using Ubuntu 20.04 LTS for this guide. If you need to install Ubuntu 20.04 LTS, refer to the &lt;a href="https://devtonight.com/posts/how-to-install-ubuntu-2004-lts-for-beginners"&gt;Ubuntu 20.04 LTS installation guide&lt;/a&gt; which explains everything step-by-step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-repository-update"&gt;
  &lt;/a&gt;
  Software Repository Update
&lt;/h3&gt;

&lt;p&gt;Before installing any application, the very first thing that you need to do is updating the software repository of your system and installing any available updates. You need to execute these administrative commands with ‚Äúroot‚Äù privileges, we are using &lt;code&gt;sudo&lt;/code&gt; for that. Enter the following commands, the first command will update the repository and the second command will download and install necessary updates. We are using the &lt;code&gt;-y&lt;/code&gt; flag to indicate that we do not need to confirm each action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update -y
sudo apt-get upgrade -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#apache-php-and-php-modules-installation"&gt;
  &lt;/a&gt;
  Apache, PHP And PHP Modules Installation
&lt;/h3&gt;

&lt;p&gt;Again, enter the following command. It will take few minutes to complete the installation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install apache2 curl php php-bcmath php-cli php-curl php-gd php-intl php-mbstring php-mysql php-pgsql php-sqlite3 php-xdebug php-xml php-zip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you should be able to access the Apache webserver by going to &lt;a href="http://localhost/"&gt;http://localhost&lt;/a&gt; address from your web browser. Make sure it does &lt;strong&gt;not&lt;/strong&gt; start with ‚Äú&lt;strong&gt;https&lt;/strong&gt;‚Äù. If everything is installed properly, you should be able to see the Apache welcome screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--buLhJO9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39dgxxtzv3j8tu9xnu7p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--buLhJO9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39dgxxtzv3j8tu9xnu7p.png" alt="Apache2 Installation Welcome Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can access your web pages (PHP, HTML,..) in &lt;code&gt;/var/www/html&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#composer-dependency-manager-installation"&gt;
  &lt;/a&gt;
  Composer dependency manager installation
&lt;/h3&gt;

&lt;p&gt;Composer is a dependency manager which you can use to manage PHP packages in your application. Mainly, Composer eliminates the requirement of manually downloading package files. In addition to that, it maintains a record of which packages and versions have been used for the application that we are developing. Once you included the &lt;code&gt;composer.json&lt;/code&gt; and &lt;code&gt;composer.lock&lt;/code&gt; files in your source code, another developer can install the required packages with the same versions without making version conflicts.&lt;/p&gt;

&lt;p&gt;Enter the following command to download Composer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -sS https://getcomposer.org/installer | php
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make it globally available for all the users in the system, so you will be able to use it anywhere regardless of the path of your project or the user currently logged in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mv composer.phar /usr/local/bin/composer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make it executable, then you will be able to use it by typing &lt;code&gt;composer&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo chmod +x /usr/local/bin/composer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now check whether Composer has been successfully installed by entering the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer -V
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should print the version of Composer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nodejs-npm-package-manager-installation"&gt;
  &lt;/a&gt;
  NodeJS NPM package manager installation
&lt;/h3&gt;

&lt;p&gt;NPM or Node Package Manager is a tool that is similar to Composer but for JavaScript packages. You can use NPM to manage JavaScript packages.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://nodejs.org/en/download"&gt;https://nodejs.org/en/download&lt;/a&gt; and download the Linux binary tar.xz file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CiE3rs2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhtif62vbz5x08p1s9gp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CiE3rs2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhtif62vbz5x08p1s9gp.png" alt="NodeJS Download Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open its download directory using the file manager and open a terminal window from there by right-clicking and selecting the ‚ÄúOpen in Terminal‚Äù.&lt;/p&gt;

&lt;p&gt;Type this command in the terminal to create a directory for NodeJS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir ~/nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter the following command to extract the downloaded file to the nodejs directory that we have created. Since the download file name change from time to time with its version numbers, make sure to type the same file name that you have downloaded. We are using the &lt;code&gt;-C&lt;/code&gt; flag to mention the destination path and &lt;code&gt;--strip-components=1&lt;/code&gt; to directly extract files in to the nodejs directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tar -xf node-v14.17.6-linux-x64.tar.xz -C ~/nodejs --strip-components=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to make NodeJS available accessible with terminal, for that type following commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "export PATH=$PATH:~/nodejs/bin" &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will apply the changes and make them available immediately through the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure NodeJS and NPM are installed properly by typing the following commands. They should print the current version numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is optional, but if you need you can use this command to delete the downloaded file tar.xz.This command is optional, but if you need you can use this command to delete the downloaded file tar.xz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mv node-v14.17.6.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mysql-server-installation"&gt;
  &lt;/a&gt;
  MySQL Server Installation
&lt;/h3&gt;

&lt;p&gt;Run the following command to install the MySQL server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install mysql-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is optional since we are building a development environment. But still, you can run the following command to secure the MySQL server if you are concern about the security.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#phpmyadmin-installation"&gt;
  &lt;/a&gt;
  phpMyAdmin installation
&lt;/h3&gt;

&lt;p&gt;phpMyAdmin is a web-based tool that you can use to browser databases in the MySQL server. Run the following command to install it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install phpmyadmin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you run that command, within few seconds, it will ask the web server that you are using. Select &lt;code&gt;apache2&lt;/code&gt; by using up/down arrow keys and press space to select it. Then press the tab key to select ‚ÄúOk‚Äù and press enter key.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dY8OtgJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a8muphpjvojswh6b9vd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dY8OtgJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a8muphpjvojswh6b9vd.png" alt="phpMyAdmin Webserver Selection Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again it will ask to configure the database for phpMyAdmin with dbconfig-common, select ‚ÄúYes‚Äù and press the enter key.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uZ-XT9RL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vbdq4t7xyllxnd9kz27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uZ-XT9RL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vbdq4t7xyllxnd9kz27.png" alt="phpMyAdmin Installation dbconfig-common Configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, it will ask for a password, just leave it blank by pressing the enter key to generate a password by itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cUxnEVvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usja9bpipolc8ki9mvn6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cUxnEVvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usja9bpipolc8ki9mvn6.png" alt="phpMyAdmin Installation Password"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now check whether that you can access the phpMyAdmin login page by visiting &lt;a href="http://localhost/phpmyadmin"&gt;http://localhost/phpmyadmin&lt;/a&gt;. But sometimes you will not be able to login with the ‚Äúroot‚Äù MySQL account as it shows an error called ‚ÄúLogin without a password is forbidden by configuration‚Äù. This is a security measure implemented by phpMyAdmin and you can easily fix it by following &lt;a href="https://devtonight.com/questions/how-to-fix-phpmyadmin-login-without-a-password-is-forbidden-by-configuration-error"&gt;how to fix phpMyAdmin ‚ÄúLogin without a password is forbidden by configuration‚Äù error&lt;/a&gt;. Again, you might get another error called mysqli_real_connect(): (HY000/1698): Access denied for user ‚Äòroot‚Äô@'localhost'. This can be happened due to the default MySQL Unix socket based authentication. Learn &lt;a href="https://devtonight.com/questions/how-to-fix-mysqli-real-connect-hy0001698-access-denied-for-user-root-at-localhost-error"&gt;how to fix mysqli_real_connect(): (HY000/1698): Access denied for user ‚Äòroot‚Äô@'localhost' error&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now try to login to the phpMyAdmin with ‚Äúroot‚Äù user and a blank password. You should be able to see a similar page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kjFMNwxH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3eb6jf2q5ho27fsf4xn9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kjFMNwxH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3eb6jf2q5ho27fsf4xn9.png" alt="phpMyAdmin PMA Welcome Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this guide, mainly we explained the installations of Apache web server, PHP and MySQL DBMS (Database Management System). Also, we explained the installations of phpMyAdmin, Composer and NPM package manager. Additionally, we discussed the possible troubleshooting with MySQL server and phpMyAdmin. What do you think about this guide? Let us know your thoughts in the comment section.&lt;/p&gt;

&lt;p&gt;Feel free to visit &lt;a href="https://devtonight.com"&gt;devtonight.com&lt;/a&gt; for more related content.&lt;/p&gt;

</description>
      <category>ubuntu</category>
      <category>apache</category>
      <category>mysql</category>
      <category>php</category>
    </item>
    <item>
      <title>The Data Engineer Roadmap üó∫</title>
      <author>Bobby Iliev</author>
      <pubDate>Tue, 19 Oct 2021 12:26:09 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/the-data-engineer-roadmap-4o30</link>
      <guid>https://dev.to/bobbyiliev/the-data-engineer-roadmap-4o30</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;This has been inspired by the &lt;a href="https://dev.to/ender_minyard/full-stack-developer-s-roadmap-2k12"&gt;Full Stack Developer's Roadmap&lt;/a&gt; post written by &lt;a class="mentioned-user" href="https://dev.to/ender_minyard"&gt;@ender_minyard&lt;/a&gt;
 üôå&lt;/p&gt;

&lt;p&gt;With the ever growing data volumes and demands, the data engineering career has been one of the fastest growing jobs for the past few years.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href="https://insights.stackoverflow.com/survey/2021"&gt;2021 Stack Overflow survey&lt;/a&gt;, data engineers are one of the top 5 highest paid professionals right after SREs and DevOps engineers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vOSRzFgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/svaZqLl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vOSRzFgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/svaZqLl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are looking to become a data engineer, here are some resources for data engineering that you can save for later.&lt;/p&gt;

&lt;p&gt;Table Of Contents&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;üíª Fundamentals&lt;/li&gt;
&lt;li&gt;üë©‚Äçüíª Programming basics&lt;/li&gt;
&lt;li&gt;üß™ Testing&lt;/li&gt;
&lt;li&gt;üìä Database Fundamentals&lt;/li&gt;
&lt;li&gt;üè† Data warehouses&lt;/li&gt;
&lt;li&gt;üì¶ Object storage&lt;/li&gt;
&lt;li&gt;‚ö° Data processing&lt;/li&gt;
&lt;li&gt;üì© Messaging&lt;/li&gt;
&lt;li&gt;üíΩ Cluster computing&lt;/li&gt;
&lt;li&gt;‚è≤ Workflow Scheduling&lt;/li&gt;
&lt;li&gt;üì∫ Monitoring data pipelines&lt;/li&gt;
&lt;li&gt;üë®‚Äçüíª Infrastructure as Code&lt;/li&gt;
&lt;li&gt;üõ´ CI/CD&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#fundamentals"&gt;
  &lt;/a&gt;
  üíª Fundamentals
&lt;/h1&gt;

&lt;p&gt;Having a solid understanding of the Linux operating system could be a must in many IT related roles. You are going to benefit a lot if you know the basics of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href=""&gt;Basic Terminal Usage&lt;/a&gt;&lt;a href="https://devdojo.com/course/linux-command-line-basics"&gt;https://devdojo.com/course/linux-command-line-basics&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ur9lAPcbMhs&amp;amp;list=PLY7SzAmnEqp78tsHh1kK0gOx_f-uwQZAT"&gt;Shell Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=UpdhourKi3c&amp;amp;list=PLY7SzAmnEqp7P6KHmBKBVNIjZkXMKh_fn"&gt;Git and GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-networking-terminology-interfaces-and-protocols"&gt;Networking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#programming-basics"&gt;
  &lt;/a&gt;
  üë©‚Äçüíª Programming basics
&lt;/h1&gt;

&lt;p&gt;As with any IT related role it is essential to have fundamental knowledge of programming in general. The programming language itself does not matter that much, but you need to have good understanding of programming paradigms and best practices. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=7WiJGTPuVeU"&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorial_series/how-to-code-in-go"&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=3bVIFVpGPvc&amp;amp;list=PL_UnIDIwT95Oq0ZwgZ1MCkKH2mvsJ11pW&amp;amp;ab_channel=devdojo"&gt;PHP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  üß™ Testing
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=flpmSXVTqBI&amp;amp;ab_channel=freeCodeCamp.org"&gt;Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Functional testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#database-fundamentals"&gt;
  &lt;/a&gt;
  üìä Database Fundamentals
&lt;/h1&gt;

&lt;p&gt;Having a solid understanding of SQL, data normalization and ACID transactions is a must for all data engineers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bobbyiliev/introduction-to-sql"&gt;SQL basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ibm.com/cloud/blog/olap-vs-oltp"&gt;OLTP vs OLAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/11707879/difference-between-scaling-horizontally-and-vertically-for-databases"&gt;Horizontal vs vertical scaling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#relational-databases"&gt;
  &lt;/a&gt;
  Relational Databases
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/a-basic-mysql-tutorial"&gt;MySQL / MariaDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-18-04"&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#nonrelational-databases"&gt;
  &lt;/a&gt;
  Non-relational databases
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Document: &lt;a href="https://devdojo.com/bo-iliev/introduction-to-mongodb-and-how-to-use-it"&gt;MongoDB&lt;/a&gt;, &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-elasticsearch-on-ubuntu-18-04"&gt;Elasticsearch&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Wide column: &lt;a href="https://cassandra.apache.org/_/index.html"&gt;Apache Cassandra&lt;/a&gt;, &lt;a href="https://hbase.apache.org/"&gt;Apache HBase&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Graph: &lt;a href="https://neo4j.com/"&gt;Neo4j&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Key-value: &lt;a href="https://www.digitalocean.com/community/books/how-to-manage-a-redis-database-ebook"&gt;Redis&lt;/a&gt;, &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-memcached-on-ubuntu-20-04"&gt;Memcached&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#data-warehouses"&gt;
  &lt;/a&gt;
  üè† Data warehouses
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.snowflake.com/"&gt;Snowflake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prestodb.io/"&gt;Presto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hive.apache.org/"&gt;Apache Hive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#object-storage"&gt;
  &lt;/a&gt;
  üì¶ Object storage
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/s3/"&gt;AWS S3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/products/spaces/"&gt;DigitalOcean Spaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/storage"&gt;Google Cloud Storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#data-processing"&gt;
  &lt;/a&gt;
  ‚ö° Data processing
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#batch"&gt;
  &lt;/a&gt;
  Batch
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pig.apache.org/"&gt;Apache pig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arrow.apache.org/"&gt;Apache Arrow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hybrid"&gt;
  &lt;/a&gt;
  Hybrid
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spark.apache.org/"&gt;Apache Spark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://beam.apache.org/"&gt;Apache Beam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#streaming"&gt;
  &lt;/a&gt;
  Streaming
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://materialize.com/"&gt;Materialize&lt;/a&gt; - The Streaming Database for Real-time Analytics&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kafka.apache.org/"&gt;Apache Kafka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://storm.apache.org/"&gt;Apache Storm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#messaging"&gt;
  &lt;/a&gt;
  üì© Messaging
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://activemq.apache.org/"&gt;Apache ActiveMQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#cluster-computing"&gt;
  &lt;/a&gt;
  üíΩ Cluster computing
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://hadoop.apache.org/"&gt;Apache Hadoop&lt;/a&gt; and &lt;a href="https://hadoop.apache.org/docs/r1.2.1/hdfs_design.html"&gt;HDFS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ibm.com/topics/mapreduce"&gt;MapReduce&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#%E2%8F%B2-workflow-scheduling"&gt;
  &lt;/a&gt;
  ‚è≤ Workflow Scheduling
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://airflow.apache.org/"&gt;Apache Airflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://oozie.apache.org/"&gt;Apache Oozie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#monitoring-data-pipelines"&gt;
  &lt;/a&gt;
  üì∫ Monitoring data pipelines
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-prometheus-on-ubuntu-16-04"&gt;Prometheus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.datadoghq.com/"&gt;Datadog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#infrastructure-as-code"&gt;
  &lt;/a&gt;
  üë®‚Äçüíª Infrastructure as Code
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Containers: &lt;a href="https://devdojo.com/bobbyiliev/the-missing-docker-crash-course-for-developers"&gt;Docker&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Orchestration: &lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-kubernetes"&gt;Kubernetes&lt;/a&gt;, &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-cluster-of-docker-containers-with-docker-swarm-and-digitalocean-on-ubuntu-16-04"&gt;Docker Swarm&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Provisioning: &lt;a href="https://www.digitalocean.com/community/tutorial_series/how-to-manage-infrastructure-with-terraform"&gt;Terraform&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Automation: &lt;a href="https://www.digitalocean.com/community/books/how-to-manage-remote-servers-with-ansible-ebook"&gt;Ansible&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#cicd"&gt;
  &lt;/a&gt;
  üõ´ CI/CD
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-20-04"&gt;Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This was inspired by the Data Engineer Roadmap open source repository here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/datastacktv/data-engineer-roadmap"&gt;https://github.com/datastacktv/data-engineer-roadmap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cnXIakxd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/datastacktv/data-engineer-roadmap/raw/master/img/roadmap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cnXIakxd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/datastacktv/data-engineer-roadmap/raw/master/img/roadmap.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted to build upon the roadmap and provide a list of resources for each topic.&lt;/p&gt;

&lt;p&gt;Let me know if I've missed anything! Hope you find this useful and make sure to keep learning üôå&lt;/p&gt;

&lt;p&gt;You can follow me on Twitter at: &lt;a href="https://twitter.com/bobbyiliev_"&gt;@bobbyiliev_&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>programming</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>The Only Bash Scripting Cheat Sheet That You Will Ever Need</title>
      <author>Bobby Iliev</author>
      <pubDate>Tue, 19 Oct 2021 12:17:52 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/the-only-bash-scripting-cheat-sheet-that-you-will-ever-need-55c7</link>
      <guid>https://dev.to/bobbyiliev/the-only-bash-scripting-cheat-sheet-that-you-will-ever-need-55c7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;No matter if you are a DevOps/SysOps engineer, developer, or just a Linux enthusiast, you can use Bash scripts to combine different Linux commands and automate boring and repetitive daily tasks, so that you can focus on more productive and fun things.&lt;/p&gt;

&lt;p&gt;Here you can find the completed Bash Scripting cheat sheet üëá&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bash-script-header-shebang"&gt;
  &lt;/a&gt;
  Bash Script Header (Shebang)
&lt;/h1&gt;

&lt;p&gt;Option 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Option 2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash
name="DevDojo"
echo "Hi there $name"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#user-input"&gt;
  &lt;/a&gt;
  User Input
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

echo "What is your name?"
read name

echo "Hi there $name"
echo "Welcome to DevDojo!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h1&gt;

&lt;p&gt;To do that in bash you need to add the # symbol at the beginning of the line. Comments will never be rendered on the screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# This is a comment and will not be rendered on the screen
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#arguments"&gt;
  &lt;/a&gt;
  Arguments
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

echo "Argument one is $1"
echo "Argument two is $2"
echo "Argument three is $3"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the file and pass 3 arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bash ./arguments.sh dog cat bird
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my_array=("value 1" "value 2" "value 3" "value 4")

# Access a single element, this would output: value 2
echo ${my_array[1]}

# This would return the last element: value 4
echo ${my_array[-1]}

# This would output the total number of elements in the array, in our case it is 4:
echo ${my_array[@]}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conditional-expressions"&gt;
  &lt;/a&gt;
  Conditional Expressions
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#file-expressions"&gt;
  &lt;/a&gt;
  File expressions
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## True if file exists.
[[ -a ${file} ]]

## True if file exists and is a block special file.
[[ -b ${file} ]]

## True if file exists and is a character special file.
[[ -c ${file} ]]

## True if file exists and is a directory.
[[ -d ${file} ]]

## True if file exists.
[[ -e ${file} ]]

## True if file exists and is a regular file.
[[ -f ${file} ]]

## True if file exists and is a symbolic link.
[[ -h ${file} ]]

## True if file exists and is readable.
[[ -r ${file} ]]

## True if file exists and has a size greater than zero.
[[ -s ${file} ]]

## True if file exists and is writable.
[[ -w ${file} ]]

## True if file exists and is executable.
[[ -x ${file} ]]

## True if file exists and is a symbolic link.
[[ -L ${file} ]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#string-expressions"&gt;
  &lt;/a&gt;
  String expressions
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# True if the shell variable varname is set (has been assigned a value).
[[ -v ${varname} ]]

# True if the length of the string is zero.
[[ -z ${string} ]]

# True if the length of the string is non-zero.
[[ -n ${string} ]]

# True if the strings are equal. = should be used with the test command for POSIX conformance. When used with the [[ command, this performs pattern matching as described above (Compound Commands)
[[ ${string1} == ${string2} ]]

# True if the strings are not equal.
[[ ${string1} != ${string2} ]]

# True if string1 sorts before string2 lexicographically.
[[ ${string1} &amp;lt; ${string2} ]]

# True if string1 sorts after string2 lexicographically.
[[ ${string1} &amp;gt; ${string2} ]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arithmetic-operators"&gt;
  &lt;/a&gt;
  Arithmetic operators
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Returns true if the numbers are equal
[[ ${arg1} -eq ${arg2} ]]

# Returns true if the numbers are not equal
[[ ${arg1} -ne ${arg2} ]]

# Returns true if arg1 is less than arg2
[[ ${arg1} -lt ${arg2} ]]

# Returns true if arg1 is less than or equal arg2
[[ ${arg1} -le ${arg2} ]]

# Returns true if arg1 is greater than arg2
[[ ${arg1} -gt ${arg2} ]]

# Returns true if arg1 is greater than or equal arg2
[[ ${arg1} -ge ${arg2} ]]

# As with other programming languages you can use AND &amp;amp; OR conditions:
[[ test_case_1 ]] &amp;amp;&amp;amp; [[ test_case_2 ]] # And
[[ test_case_1 ]] || [[ test_case_2 ]] # Or
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conditionals"&gt;
  &lt;/a&gt;
  Conditionals
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

# Bash if statement example

read -p "What is your name? " name

if [[ -z ${name} ]]
then
    echo "Please enter your name!"
else
    echo "Hi there ${name}"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#for-loops"&gt;
  &lt;/a&gt;
  For loops
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

users="devdojo, bobby, tony"

for user in ${users}
do
    echo "${user}"
done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#while-loops"&gt;
  &lt;/a&gt;
  While loops
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

counter=1
while [[ $counter -le 10 ]]
do
    echo $counter
    ((counter++))
done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#until-loops"&gt;
  &lt;/a&gt;
  Until Loops
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

count=1
until [ $count -gt 10 ]
do
    echo $count
    ((count++))
done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function function_name() {
    your_commands
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

function hello(){
    echo "Hello World Function!"
}

hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;For a more in-depth explanations check out this online guide here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/guide/bash/bash-conditional-expressions"&gt;Bash Scripting Hands-on Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about Bash Scripting check out this free eBook here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/introduction-to-bash-scripting"&gt;üí° Introduction to Bash Scripting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you prefer video content, you could take a look at this mini video crash course here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLY7SzAmnEqp78tsHh1kK0gOx_f-uwQZAT"&gt;Introduction to Bash Scripting Mini Video Crash Course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can follow me on Twitter at: &lt;a href="https://twitter.com/bobbyiliev_"&gt;@bobbyiliev_&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>bash</category>
      <category>100daysofcode</category>
      <category>devops</category>
    </item>
    <item>
      <title>Day 11 of 100 Days of Code &amp; Scrum: Coding, Writing, and Physical Therapy</title>
      <author>Rammina</author>
      <pubDate>Tue, 19 Oct 2021 12:12:43 +0000</pubDate>
      <link>https://dev.to/rammina/day-11-of-100-days-of-code-scrum-coding-writing-and-physical-therapy-51o2</link>
      <guid>https://dev.to/rammina/day-11-of-100-days-of-code-scrum-coding-writing-and-physical-therapy-51o2</guid>
      <description>&lt;p&gt;&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@bruno_nascimento?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Bruno Nascimento&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/exercise?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Greetings, everyone!&lt;/p&gt;

&lt;p&gt;It's Tuesday, and it's unfortunate that I won't be able to be as productive today because of my weekly physical therapy session. That said, I shall try my best to fulfill the minimum requirements of the challenge!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I finished the draft of the introduction of my Scrum Guide for beginners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;wrote about how the members of a Scrum Team function individually as well as their interactions with the others (still missing the Scrum Master section).&lt;/li&gt;
&lt;li&gt;read about traits that make an individual suitable for each role in a Scrum Team.&lt;/li&gt;
&lt;li&gt;looked into how businesses misuse Agile and Scrum in their operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#graphql"&gt;
  &lt;/a&gt;
  GraphQL
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;review concepts I've learned last week.&lt;/li&gt;
&lt;li&gt;look deeper into how GraphQL differs from REST API, and which scenarios one should be used over the other.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U064q701--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fb9iv4qjptfw1wgg8sp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U064q701--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fb9iv4qjptfw1wgg8sp.jpg" alt="difficult roads lead to beautiful destinations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@helloimnik?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Hello I'm Nik&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Have a good day everyone! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.howtographql.com/"&gt;The Fullstack Tutorial for GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.apollographql.com/docs/"&gt;Apollo Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/chingu/a-short-introduction-to-the-scrum-methodology-7a23431b9f17"&gt;A Short Introduction to the Scrum Framework by Jim Medlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Getting started with Appwrite's Apple SDK and UIKit</title>
      <author>Jake Barnby</author>
      <pubDate>Tue, 19 Oct 2021 12:10:29 +0000</pubDate>
      <link>https://dev.to/appwrite/getting-started-with-appwrites-apple-sdk-and-uikit-4bjd</link>
      <guid>https://dev.to/appwrite/getting-started-with-appwrites-apple-sdk-and-uikit-4bjd</guid>
      <description>&lt;p&gt;One of the major highlights of Appwrite 0.11 is the official support for iOS, macOS, tvOS and watchOS. We've also released a brand-new Apple SDK to go alongside it! üòâ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YGblQZNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5gk906j5ngsah46w3px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YGblQZNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5gk906j5ngsah46w3px.png" alt="Appwrite &amp;amp; Swift"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll learn to set up Appwrite's Apple SDK, interact with Appwrite's Accounts API and also learn to set up OAuth Logins in your App. Let's get started!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We'll use UIKit in this tutorial, if you're using &lt;a href="https://developer.apple.com/xcode/swiftui/"&gt;SwiftUI&lt;/a&gt;, check out &lt;a href="https://dev.to/appwrite/getting-started-with-appwrites-apple-sdk-and-swiftui-131h"&gt;this tutorial&lt;/a&gt; instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  üìù Prerequisites
&lt;/h2&gt;

&lt;p&gt;At this stage, we assume that you already have an Appwrite instance up and running. If you do not have Appwrite setup yet, you can follow the super easy installation &lt;strong&gt;step&lt;/strong&gt; over at &lt;a href="https://appwrite.io/docs/installation"&gt;appwrite.io&lt;/a&gt;. It's not a typo. There really is only 1 step!&lt;/p&gt;

&lt;p&gt;You should have also set up an OAuth provider with Appwrite to be able to follow the OAuth section of this tutorial. You can learn to set up OAuth providers in Appwrite with &lt;a href="https://dev.to/appwrite/30daysofappwrite-oauth-providers-3jf6"&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-app-project"&gt;
  &lt;/a&gt;
  üõ†Ô∏è Create a new App Project
&lt;/h2&gt;

&lt;p&gt;Create a new &lt;strong&gt;iOS &amp;gt; App&lt;/strong&gt; in Xcode, selecting &lt;strong&gt;Storyboard&lt;/strong&gt; for &lt;strong&gt;Interface&lt;/strong&gt; and &lt;strong&gt;UIKit App Delegate&lt;/strong&gt; for &lt;strong&gt;Life Cycle&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fvATk18R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ms8klbqnyhfsxqrqbp8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fvATk18R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ms8klbqnyhfsxqrqbp8a.png" alt="Create Project"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;With the app created, now is also a good time to add our iOS, macOS, watchOS or tvOS app as a platform in the Appwrite Console. Head over to your project file and find your &lt;strong&gt;Bundle Identifier&lt;/strong&gt;. It should look something like &lt;code&gt;io.appwrite.Appwrite-iOS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In your Appwrite console, click on &lt;strong&gt;Add Platform&lt;/strong&gt; and select a &lt;strong&gt;New Apple App&lt;/strong&gt;, then one of the iOS, macOS, watchOS or tvOS tabs. Give your app a name, add the bundle identifier and click &lt;strong&gt;Register&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once this is complete, it's time to head back to our Xcode project add our dependencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-appwrites-apple-sdk"&gt;
  &lt;/a&gt;
  üë∑ Setup Appwrite's Apple SDK
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#using-xcode"&gt;
  &lt;/a&gt;
  Using Xcode
&lt;/h3&gt;

&lt;p&gt;The Appwrite Apple SDK is available via Swift Package Manager. In order to use the Appwrite Apple SDK from &lt;strong&gt;Xcode&lt;/strong&gt;, select File &amp;gt; Swift Packages &amp;gt; &lt;strong&gt;Add Package Dependency&lt;/strong&gt;. In the dialog that appears, enter the Appwrite Apple SDK &lt;a href="https://github.com/appwrite/sdk-for-apple"&gt;package URL&lt;/a&gt; and click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the repository information is loaded, add your version rules and click &lt;strong&gt;Next&lt;/strong&gt; again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q4KeCU-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ymhv1va2x99ithkpxxb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4KeCU-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ymhv1va2x99ithkpxxb.png" alt="Set Package Version"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the final screen, make sure &lt;code&gt;Appwrite&lt;/code&gt; is selected to add to your target as a library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D5klm8I1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plu4hizc1o3bxd1p5j16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D5klm8I1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plu4hizc1o3bxd1p5j16.png" alt="Link To Target"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-swift-package-manager"&gt;
  &lt;/a&gt;
  Using Swift Package Manager
&lt;/h3&gt;

&lt;p&gt;Add the package to your &lt;code&gt;Package.swift&lt;/code&gt; dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;    &lt;span class="nv"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/appwrite/sdk-for-apple"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add it to your target:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;    &lt;span class="nv"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"[YourAppTarget]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Appwrite"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;package&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"sdk-for-apple"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build your project and if there are no errors, we're ready to proceed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-viewcontroller"&gt;
  &lt;/a&gt;
  üèóÔ∏è Create the ViewController
&lt;/h2&gt;

&lt;p&gt;Create a new file &lt;code&gt;ViewController.swift&lt;/code&gt; and add the following. This defines our controller for our storyboard and sets up our button click listeners that will call the &lt;code&gt;ViewModel&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Appwrite&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;NIO&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;UIKit&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;ViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;@IBOutlet&lt;/span&gt; &lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITextView&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="kd"&gt;@IBOutlet&lt;/span&gt; &lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="kd"&gt;@IBOutlet&lt;/span&gt; &lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;loginButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="kd"&gt;@IBOutlet&lt;/span&gt; &lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;logOutButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="kd"&gt;@IBOutlet&lt;/span&gt; &lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;getUserButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="kd"&gt;@IBOutlet&lt;/span&gt; &lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;loginWithFacebook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://localhost/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"613b18dabf74a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setSelfSigned&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;lazy&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;picker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ImagePicker&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;

    &lt;span class="kd"&gt;required&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;?(&lt;/span&gt;&lt;span class="nv"&gt;coder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSCoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;coder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;coder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;@IBAction&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"tester@appwrite.io"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;@IBAction&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"tester@appwrite.io"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;session&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;@IBAction&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;loginWithFacebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// To be added later.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;@IBAction&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 

    &lt;span class="kd"&gt;@IBAction&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;logOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;deleteSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sessionId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"current"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;success&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;describing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our ViewController has 4 state functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;register - click handler for the Signup Button&lt;/li&gt;
&lt;li&gt;login - click handler for the Login Button&lt;/li&gt;
&lt;li&gt;logout - click handler for the Logout Button&lt;/li&gt;
&lt;li&gt;getUser - click handler for the Get User Button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should now be able to run your app and create users, login, logout and get information about the currently logged-in user!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-oauth-support"&gt;
  &lt;/a&gt;
  üîê Adding OAuth Support
&lt;/h2&gt;

&lt;p&gt;You would have noticed that we have a &lt;strong&gt;Login With Facebook&lt;/strong&gt; button in our UI, but it doesn't do anything yet; let's now add Facebook OAuth to our app!&lt;/p&gt;

&lt;p&gt;The first step is to add a callback URL scheme to our &lt;code&gt;Info.plist&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLTypes&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleTypeRole&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Editor&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLName&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;io.appwrite&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLSchemes&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;appwrite-callback-[PROJECT-ID]&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you replace the Project ID in &lt;code&gt;appwrite-callback-[PROJECT-ID]&lt;/code&gt; with your own.&lt;/p&gt;

&lt;p&gt;Next we need to add a hook to save cookies when our app is opened by its callback URL. To do this, add the following function to your &lt;code&gt;SceneDelegate.swift&lt;/code&gt;. If you have already defined this function, you can just add the contents below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIScene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;openURLContexts&lt;/span&gt; &lt;span class="kt"&gt;URLContexts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;UIOpenURLContext&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;URLContexts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;absoluteString&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"appwrite-callback"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kt"&gt;WebAuthComponent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;handleIncomingCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last step is to invoke the SDK function &lt;code&gt;createOAuth2Session&lt;/code&gt; from &lt;code&gt;AccountViewController.swift&lt;/code&gt; from our existing button's action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;    &lt;span class="kd"&gt;@IBAction&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;loginWithFacebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createOAuth2Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"facebook"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"https://demo.appwrite.io/auth/oauth2/success"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"https://demo.appwrite.io/auth/oauth2/failure"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
                &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

                &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Re-run your app and you should now be able to trigger your Facebook OAuth Flow! With that, you now know how to interact with Appwrite's Accounts API in your iOS, macOS, tvOS and watchOS apps!&lt;/p&gt;

&lt;p&gt;We've built a complete app that interacts with all of Appwrite's APIs, which you can find over at our &lt;a href="https://github.com/appwrite/playground-for-apple-uikit"&gt;Github Repo&lt;/a&gt;. If you'd like to learn more about Appwrite or how Appwrite works under the hood, we've just curated all the resources for you during &lt;a href="https://30days.appwrite.io/"&gt;30 Days of Appwrite&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-credits"&gt;
  &lt;/a&gt;
  ‚ú®Ô∏è Credits
&lt;/h2&gt;

&lt;p&gt;Hope you enjoyed this article! We love contributions and encourage you to take a look at our &lt;a href="https://github.com/appwrite/appwrite/issues"&gt;open issues&lt;/a&gt; and &lt;a href="https://github.com/appwrite/rfc/pulls"&gt;ongoing RFCs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you get stuck anywhere, feel free to reach out to us on our &lt;a href="https://appwrite.io/discord"&gt;friendly support channels&lt;/a&gt; run by humans üë©‚Äçüíª.&lt;/p&gt;

&lt;p&gt;Here are some handy links for more information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/appwrite/blob/master/CONTRIBUTING.md"&gt;Appwrite Contribution Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;Appwrite Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ios</category>
      <category>swift</category>
      <category>tutorial</category>
      <category>news</category>
    </item>
    <item>
      <title>Business logic in Rails with operators</title>
      <author>Petr Hlavicka</author>
      <pubDate>Tue, 19 Oct 2021 11:43:17 +0000</pubDate>
      <link>https://dev.to/citronak/business-logic-in-rails-with-operators-3hnl</link>
      <guid>https://dev.to/citronak/business-logic-in-rails-with-operators-3hnl</guid>
      <description>&lt;p&gt;Having a thousand lines long controllers and/or models is not the right way to have sustainable applications or developers' sanity. Let's look at my solution for business logic in the Rails app. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Spoiler alert: yes, I will use PORO... &lt;a href="https://petr.codes/blog/rails/fun-with-enums-and-poro/"&gt;again&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;Why should you not have such long controllers/models (or even views)? There are a lot of reasons. From worse sustainability, readability, to worse testability. But mainly, they all affect &lt;a href="https://cult.honeypot.io/developer-happiness-index"&gt;the developer's happiness&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I can gladly recommend &lt;a href="https://sustainable-rails.com/"&gt;Sustainable Web Development with Ruby on Rails&lt;/a&gt; from &lt;a href="https://twitter.com/davetron5000"&gt;David Bryant Copeland&lt;/a&gt; where he did a great job explaining it all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-did-i-want-from-the-solution"&gt;
  &lt;/a&gt;
  What did I want from the solution?
&lt;/h2&gt;

&lt;p&gt;I can‚Äôt say I was not influenced by other solutions. For example, I used &lt;a href="https://trailblazer.to/"&gt;Trailblazer&lt;/a&gt; before. But none of what I read about or used was the one I would like.&lt;/p&gt;

&lt;p&gt;When I read a solution from &lt;a href="https://nts.strzibny.name/business-logic-in-rails-with-contexts/"&gt;Josef Strzibny&lt;/a&gt;, I realized that I should write down my approach to get some feedback.&lt;/p&gt;

&lt;p&gt;Here is what I wanted to achieve:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;nothing complex&lt;/li&gt;
&lt;li&gt;naming easy as possible&lt;/li&gt;
&lt;li&gt;simple file structure&lt;/li&gt;
&lt;li&gt;OOP and its benefits (even for results)&lt;/li&gt;
&lt;li&gt;easy testability&lt;/li&gt;
&lt;li&gt;in general - as few later decisions as possible&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;I will demonstrate the solution on a simple &lt;code&gt;Invoice&lt;/code&gt; model with a corresponding &lt;code&gt;InvoicesController&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#naming-and-structure"&gt;
  &lt;/a&gt;
  Naming and structure
&lt;/h3&gt;

&lt;p&gt;The first thing is the naming and the corresponding file structure. I chose the &lt;code&gt;Operator&lt;/code&gt; suffix. In our case, it will be &lt;code&gt;InvoiceOperator&lt;/code&gt; inside the &lt;code&gt;app/operators&lt;/code&gt; folder. &lt;/p&gt;

&lt;p&gt;The suffix makes everything easier - the developer will always know what to use for any model, it is just a simple &lt;code&gt;&amp;lt;ModelName&amp;gt;Operator&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Naming is hard, especially for non-native speakers. If you find a better name, let me know!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, we have the class name, but what about its methods? It will be, mainly but not only, used in controllers. As Rails controllers are already breaking the Single File Responsibility principle, I will not hesitate to continue with that to have things easier.&lt;/p&gt;

&lt;p&gt;To make it even easier, let's use the classic RESTful names for methods. For the &lt;code&gt;create&lt;/code&gt; action in the controller, it will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/operators/invoice_operator.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InvoiceOperator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/invoices_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InvoicesController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;InvoiceOperator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;invoice_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, every model will have its operator and in every operator, we will know what methods should be used in each action. Everything is easily predictable in most cases.&lt;/p&gt;

&lt;p&gt;Except... the &lt;code&gt;new&lt;/code&gt; action in a controller. Having &lt;code&gt;InvoiceOperator.new.new&lt;/code&gt; does not look cool to me. Luckily for most cases, we don't need it and we can use the simple &lt;code&gt;Invoice.new&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we will need to apply complex logic (and thus use the operator), we can use a &lt;code&gt;prepare&lt;/code&gt; method instead of the &lt;code&gt;new&lt;/code&gt;. It is not perfect to the previous statement, but the naming makes sense to me.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#result-object"&gt;
  &lt;/a&gt;
  Result object
&lt;/h3&gt;

&lt;p&gt;Using the result object is a common strategy. The base concept is the same for every operator, so we won‚Äôt repeat it in every operator. Let's create a &lt;code&gt;BaseOperator&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;This will also help us not to think about the name of the method with our object (in our case the invoice). It will always be the &lt;code&gt;result.record&lt;/code&gt; and not eg. &lt;code&gt;result.invoice&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/operators/base_operator.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseOperator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@record&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;new_record&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_record&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;NotImplementedError&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;
    &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:meta&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;
      &lt;span class="vi"&gt;@record&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;
      &lt;span class="vi"&gt;@meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;success?&lt;/span&gt;
      &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="vi"&gt;@state&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And use it for our &lt;code&gt;InvoiceOperator&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/operators/invoice_operator.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InvoiceOperator&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;BaseOperator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="vi"&gt;@record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;assign_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# do your business&lt;/span&gt;

    &lt;span class="no"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;state: &lt;/span&gt;&lt;span class="vi"&gt;@record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="vi"&gt;@record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="vi"&gt;@record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;assign_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# do your business&lt;/span&gt;

    &lt;span class="no"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;state: &lt;/span&gt;&lt;span class="vi"&gt;@record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="vi"&gt;@record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_record&lt;/span&gt;
    &lt;span class="no"&gt;Invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;BaseOperator&lt;/code&gt; also introduced the &lt;code&gt;initialize&lt;/code&gt; method. That will help us to use the operator in two ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;with a new record: eg. &lt;code&gt;InvoiceOperator.new.create(params: invoice_params)&lt;/code&gt; where it will use &lt;code&gt;Invoice.new&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;with the existing record: eg. &lt;code&gt;InvoiceOperator.new(record: Invoice.find(params[:id])).update(params: invoice_params)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;Result&lt;/code&gt; object uses a &lt;code&gt;state&lt;/code&gt; variable. I like this way more than using two objects (one for success and one for failure). It is also much simpler for testing. &lt;/p&gt;

&lt;p&gt;The private method &lt;code&gt;new_record&lt;/code&gt; can be also used for setting the right "blank" object (eg. with some defaults). &lt;/p&gt;

&lt;p&gt;And now, the example usage in the controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/invoices_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InvoicesController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;InvoiceOperator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;invoice_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success?&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Created!"&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;invoice: &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;record&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="ss"&gt;status: :unprocessable_entity&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;InvoiceOperator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="no"&gt;Invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;invoice_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success?&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Updated!"&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;invoice: &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;record&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="ss"&gt;status: :unprocessable_entity&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#custom-actions-in-controllers"&gt;
  &lt;/a&gt;
  Custom actions in controllers
&lt;/h3&gt;

&lt;p&gt;If you are using custom actions in controllers, you can continue to have the same method name in the operator.&lt;/p&gt;

&lt;p&gt;If you don't and you are using only RESTful actions, you can end up with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Invoices&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DuplicatesController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
      &lt;span class="n"&gt;original_invoice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;InvoiceOperator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="n"&gt;original_invoice&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;duplicate&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success?&lt;/span&gt;
        &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Duplicated!"&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;redirect_back&lt;/span&gt; &lt;span class="ss"&gt;fallback_location: &lt;/span&gt;&lt;span class="n"&gt;original_invoice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;allow_other_host: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, the action &lt;code&gt;create&lt;/code&gt; does not correspond with the operator's &lt;code&gt;duplicate&lt;/code&gt; method, but at least, the controller name is related to it. That should help with a decision on what name should be used.&lt;/p&gt;

&lt;p&gt;Other possible solution could be to use a new operator (eg. &lt;code&gt;InvoiceDuplicateOperator&lt;/code&gt;) that would inherit from &lt;code&gt;InvoiceOperator&lt;/code&gt; and has the right &lt;code&gt;create&lt;/code&gt; action.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;p&gt;I mentioned testing several times. Here is a simplified example for testing the operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/operators/invoice_operator_spec.rb&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;InvoiceOperator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :operator&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:invoice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:company&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:company&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;described_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"create"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s2"&gt;"company_id"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;company&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"date_from"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"2021-01-01"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"date_to"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"2021-01-31"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"due_at"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"2021-01-16"&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"creates a record"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_success&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;persisted?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_truthy&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"update"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:invoice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:invoice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;paid_at: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s2"&gt;"paid_at"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"2021-01-18"&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"updates a record"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_success&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;paid_at&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;not_to&lt;/span&gt; &lt;span class="n"&gt;be_nil&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is a simplified spec for the &lt;code&gt;create&lt;/code&gt; action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/requests/invoices_spec.rb&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"Invoices"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;signed_in: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:current_user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:invoice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:invoice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;date_from: &lt;/span&gt;&lt;span class="s2"&gt;"2021-01-01"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;date_to: &lt;/span&gt;&lt;span class="s2"&gt;"2021-01-31"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"create"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;InvoiceOperator&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive_message_chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:create&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;instance_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"BaseOperator::Result"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;success?: &lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;invoices_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;invoice: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="s2"&gt;"Just Invoice"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s2"&gt;"with successful result"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_http_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:found&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s2"&gt;"without successful result"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_http_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:unprocessable_entity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; 
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;This solution was not battle-tested in a large Rails application for a long period of time. But I think it is a simple, readable, predictable and extendable solution. &lt;/p&gt;

&lt;p&gt;It solved a lot of what I wanted from it. I am already using it in one application and I, obviously, like it.&lt;/p&gt;

&lt;p&gt;I would really welcome any feedback and I hope we can together find an even better solution.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>logic</category>
      <category>poro</category>
    </item>
    <item>
      <title>Top 10 articles about JavaScript of the weeküíò.</title>
      <author>Kavindu Santhusa</author>
      <pubDate>Tue, 19 Oct 2021 11:32:14 +0000</pubDate>
      <link>https://dev.to/ksengine/top-10-articles-about-javascript-of-the-week-41eg</link>
      <guid>https://dev.to/ksengine/top-10-articles-about-javascript-of-the-week-41eg</guid>
      <description>&lt;p&gt;DEV is a community of software developers getting together to help one another out. The software industry relies on collaboration and networked learning. They provide a place for that to happen.&lt;/p&gt;

&lt;p&gt;Once relegated to the browser as one of the 3 core technologies of the web, JavaScript can now be found almost anywhere you find code.&lt;br&gt;
JavaScript developers move fast and push software development forward; they can be as opinionated as the frameworks they use, so let's keep it clean here and make it a place to learn from each other!&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__6"&gt;
  
    .ltag__tag__id__6 .follow-action-button{
      background-color: #F7DF1E !important;
      color: #000000 !important;
      border-color: #F7DF1E !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/javascript" class="ltag__tag__link"&gt;javascript&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        &amp;lt;p&amp;gt;Once relegated to the browser as one of the 3 core technologies of the web, JavaScript can now be found almost anywhere you find code. &amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;JavaScript developers move fast and push software development forward; they can be as opinionated as the frameworks they use, so let's keep it clean here and make it a place to learn from each other!&amp;lt;/p&amp;gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Here is the most popular articles published on this platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1"&gt;
  &lt;/a&gt;
  #1
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/codeoz/7-html-attribute-you-should-know-right-now-dfn"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--esu3Ozqw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--kB1oQ8t2--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qffs6vp1sr43gyksmnp9.png" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/codeoz" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqyYINYJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--A8scdPPB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/535221/d73c1f8e-f607-440b-a29d-1e8e5f1174ab.png" alt="codeoz"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/codeoz/7-html-attribute-you-should-know-right-now-dfn" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 HTML attribute you should know right now!&lt;/h2&gt;
      &lt;h3&gt;CodeOz „Éª Oct 15 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#2"&gt;
  &lt;/a&gt;
  #2
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/rjitsu/stop-using-if-else-264o"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RW_k0SLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0zKl7GBi--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p0qaiclbhp40gz8dfmq.png" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/rjitsu" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LTRK7A2h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rNzjYh53--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/452153/173c1288-ce90-4b46-82f6-edd8bd6f6dd1.png" alt="rjitsu"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rjitsu/stop-using-if-else-264o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Stop using if else &lt;/h2&gt;
      &lt;h3&gt;Rishav Jadon „Éª Oct 14 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#3"&gt;
  &lt;/a&gt;
  #3
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/alexgurr/turning-a-react-app-into-a-pwa-with-offline-detection-service-workers-and-theming-142i"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P73xMdZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rLI2S6Xz--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3eow50aza72u5k89b7w.png" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/alexgurr" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jqf66NGT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--E3ildM4e--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/356103/914d2448-45eb-49c2-813e-e535614b5110.png" alt="alexgurr"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alexgurr/turning-a-react-app-into-a-pwa-with-offline-detection-service-workers-and-theming-142i" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Turning a React app into an installable PWA with offline detection, service workers and theming.&lt;/h2&gt;
      &lt;h3&gt;Alex Gurr „Éª Oct 13 „Éª 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#4"&gt;
  &lt;/a&gt;
  #4
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/koladev/build-an-api-using-node-express-mongodb-and-docker-128p"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ApGp4IUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--M37ETBIo--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlrmkxv4zdvwttoirb49.png" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/koladev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uEM5qAGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yzmUFzFs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/282902/4f864134-f853-4f7e-84c5-3edcb1650361.jpg" alt="koladev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/koladev/build-an-api-using-node-express-mongodb-and-docker-128p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build an API using Node, Express, MongoDB, and Docker&lt;/h2&gt;
      &lt;h3&gt;Mangabo Kolawole „Éª Oct 17 „Éª 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#docker&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#5"&gt;
  &lt;/a&gt;
  #5
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/ananiket/create-a-responsive-landing-page-using-html-css-js-b7m"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOmjb_-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Y4q3lhde--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvewzhphhgcx1nnqwfec.jpg" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ananiket" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJzMCRsl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3K-TmsMb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/462056/b62591f2-7339-4dbd-8716-bb4fe12dc85d.png" alt="ananiket"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ananiket/create-a-responsive-landing-page-using-html-css-js-b7m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;üë®‚Äçüíª Create a Responsive Landing Page using HTML CSS &amp;amp; JS üî•&lt;/h2&gt;
      &lt;h3&gt;Aniket „Éª Oct 13 „Éª 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#6"&gt;
  &lt;/a&gt;
  #6
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/javascriptacademy/top-10-vscode-extensions-for-web-developers-19jg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Onn2FJt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--estXj0hm--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7paxq29wka0ssa5o9fsd.png" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/javascriptacademy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5hibFiYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ehxqwaKf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/721655/cf6268db-f6d4-4eee-ad3e-7c2970dede90.jpeg" alt="javascriptacademy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/javascriptacademy/top-10-vscode-extensions-for-web-developers-19jg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;TOP 10 VsCode Extensions for web developers&lt;/h2&gt;
      &lt;h3&gt;Adam Nagy „Éª Oct 16 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#7"&gt;
  &lt;/a&gt;
  #7
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/rubengabrielian/stop-writing-javascript-like-this-8po"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OgQNP_1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/social_previews/article/863631.png" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/rubengabrielian" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tHAWcJLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZxXHzbUn--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/653247/2b45968c-401d-49f2-83bc-ca269af5f78f.jpeg" alt="rubengabrielian"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rubengabrielian/stop-writing-javascript-like-this-8po" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Stop Writing JavaScript Like This
&lt;/h2&gt;
      &lt;h3&gt;Ruben Gabrielyan „Éª Oct 14 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#8"&gt;
  &lt;/a&gt;
  #8
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/ali6nx404/confused-about-rem-and-em-units-in-css-26go"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--maLdQxJM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--sO027RLF--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddjqvuwkpuocldrylav2.png" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ali6nx404" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6eKJHV5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lDAn59NE--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/718375/5d79790f-4842-4a47-9082-e98b90319589.png" alt="ali6nx404"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ali6nx404/confused-about-rem-and-em-units-in-css-26go" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Confused About rem and em units in CSS?&lt;/h2&gt;
      &lt;h3&gt;Mahesh  „Éª Oct 13 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#9"&gt;
  &lt;/a&gt;
  #9
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/daveyhert/how-to-implement-a-dark-mode-with-css-and-3-simple-lines-of-javascript-576"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOwPwarG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--a49tmalY--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_66%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m600dggfkhi1s7q3nvmz.gif" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/daveyhert" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uongVoqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--pt29wLQu--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/455980/b63e9724-a26e-4cc2-99c6-f60b1ef7b2e4.jpg" alt="daveyhert"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/daveyhert/how-to-implement-a-dark-mode-with-css-and-3-simple-lines-of-javascript-576" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Implement a Dark Mode with CSS and 3 Simple Lines of Javascript&lt;/h2&gt;
      &lt;h3&gt;David HerbertüíªüöÄ „Éª Oct 17 „Éª 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#10"&gt;
  &lt;/a&gt;
  #10
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/codehacker/backend-developer-learning-path-2021-37c"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlWmbIp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/social_previews/article/867556.png" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/codehacker" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RZb93Epa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--70OSo76T--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/728015/c0d06cd8-4134-4ed6-8e4d-772fb24636ce.jpg" alt="codehacker"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/codehacker/backend-developer-learning-path-2021-37c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Backend Developer Learning Path 2021&lt;/h2&gt;
      &lt;h3&gt;Rocky „Éª Oct 18 „Éª 26 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Orginal authors of this articles are &lt;a class="mentioned-user" href="https://dev.to/codeoz"&gt;@codeoz&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/rjitsu"&gt;@rjitsu&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/alexgurr"&gt;@alexgurr&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/koladev"&gt;@koladev&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/ananiket"&gt;@ananiket&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/javascriptacademy"&gt;@javascriptacademy&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/rubengabrielian"&gt;@rubengabrielian&lt;/a&gt;
, ali6nx404, daveyhert, codehacker .&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enjoy these articles.&lt;br&gt;
Follow me for more articles.&lt;br&gt;
Thanks üíñüíñüíñ&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JavaScript Let - How to declare block-scoped values?</title>
      <author>hrishikesh1990</author>
      <pubDate>Tue, 19 Oct 2021 11:32:00 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/javascript-let-how-to-declare-block-scoped-values-2inc</link>
      <guid>https://dev.to/hrishikesh1990/javascript-let-how-to-declare-block-scoped-values-2inc</guid>
      <description>&lt;p&gt;In this short tutorial, we look at how to declare block-scoped values using JavaScript let. We also look at how the let keyword is different from the others.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-javascript-startswith"&gt;
  &lt;/a&gt;
  Table of Contents - JavaScript startsWith():
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#javascript-let"&gt;JavaScript let&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-and-explanation"&gt;Code and Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#redeclaring-variables"&gt;Redeclaring variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts"&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#javascript-let"&gt;
  &lt;/a&gt;
  JavaScript let:
&lt;/h2&gt;

&lt;p&gt;Until ES5, JavaScript variables had either global or local scope. Only after ES6 was block scope introduced in JavaScript. Scope denotes which variables we have access to in our program.&lt;/p&gt;

&lt;p&gt;You may have come across functional scope variables, these variables are only accessible inside a function. You could receive an error in case you tried to print it outside the function. Apart from these, there are global variables. These variables can be accessed anywhere in the program and are declared using the var keyword.&lt;/p&gt;

&lt;p&gt;Similarly, variables that are block-scoped are only accessible inside a particular block of code. These variables are declared using JavaScript let and these blocks are enclosed within { } brackets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h2&gt;

&lt;p&gt;Let us look at a code snippet explaining the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Output: 1&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Output: 2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Output: 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code snippet, we initially declared a variable ‚Äònum‚Äô using the var keyword. We printed the value and the output was 1&lt;br&gt;
We printed the value and the output was 1&lt;br&gt;
We later open a block and use the let keyword to declare the value as 2. Now the value of ‚Äònum‚Äô inside the block is 2&lt;br&gt;
Lastly, we print the variable after the block is closed, here the variable takes the values set using the var keyword&lt;br&gt;
The above steps are an example of how the let method can be used.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#redeclaring-variables"&gt;
  &lt;/a&gt;
  Redeclaring variables:
&lt;/h2&gt;

&lt;p&gt;While using the JavaScript let, the variable cannot be redeclared within the same block. Attempting to do so would raise an error as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Error: Identifier 'num' has already been declared&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a common problem while using a switch case, this can be solved by using new blocks for each case. However, this is not a problem while using the var keyword. The below code snippet should give an idea of the case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As aforementioned, a similar syntax can be used while using the let method in switch cases as the variable has to be redeclared.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts:
&lt;/h2&gt;

&lt;p&gt;In this article, although we discuss in detail about the JavaScript let methods we have not explained in detail about scope. I would recommend you spend some quality reading about the various types of scopes and their uses.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
