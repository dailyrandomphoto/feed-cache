<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Week 2 of my 100daysofcode Challenge</title>
      <author>Jean Pierre Chreim</author>
      <pubDate>Sun, 18 Apr 2021 17:14:07 +0000</pubDate>
      <link>https://dev.to/jpchreim/week-2-of-my-100daysofcode-challenge-3jab</link>
      <guid>https://dev.to/jpchreim/week-2-of-my-100daysofcode-challenge-3jab</guid>
      <description>&lt;p&gt;It has been 2 weeks since I started the 100 days of code challenge in which I decided to study and code for at least an hour per day. Allow me to enroll  my achievements for the last week.&lt;/p&gt;

&lt;p&gt;I've completed the basic course in Responsive WEB Design and, surprisingly, I've found that I can acquire a certificate from FreeCodeCamp if I managed to submit 4 projects. From my point of view, this certificate is a great opportunity because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FreeCodeCamp is a well known site, and a certificate from it will bring a  value to my profile.&lt;/li&gt;
&lt;li&gt;We should constantly practice what we learned, as learning without practicing isn't enough.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first project was a tribute page, I didn't encounter any difficulties in doing it, and that's because I've planned everything  before coding.&lt;/p&gt;

&lt;p&gt;In the second project, I had to create a form which  users should submit their information. Unluckily, I couldn't manage to finish it as I had to return my laptop to the dealer because of a camera issue and didn't take any backup of the projects that I'm working on. Thanks to that, I found out the importance of creating GitHub repositories for each project, and to keep it updated.&lt;/p&gt;

&lt;p&gt;This issue didn't stop me from continuing my 100daysofcode journey, so I took a break from these projects, until my laptop returns, and I started with JavaScript which I hardly know how to practice it.&lt;/p&gt;

&lt;p&gt;I've learned the fundamentals, and then jumped to Object manipulating. It wasn't something new as my first programming language was Java, an OOP, but I was surprised with how easy JS is with objects.&lt;/p&gt;

&lt;p&gt;I'm currently on challenge number 92 out of 111 on FreeCodeCamp, after that I'll start with ES6, something I heard quite a little about but never had the opportunity to know what is it and why/when we use it.&lt;br&gt;
How about you? Are you doing the 100daysofcode challenge? If so, where did you reach?&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Excelize 2.4.0 is Released – New support 152 formula functions</title>
      <author>xuri</author>
      <pubDate>Sun, 18 Apr 2021 16:32:14 +0000</pubDate>
      <link>https://dev.to/xuri/excelize-2-4-0-is-released-new-support-152-formula-functions-23nc</link>
      <guid>https://dev.to/xuri/excelize-2-4-0-is-released-new-support-152-formula-functions-23nc</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_rS1swf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xuri.me/excelize/images/excelize.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_rS1swf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xuri.me/excelize/images/excelize.svg" width="440" alt="github.com/360EntSecGroup-Skylar/excelize"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Excelize is a library written in pure Go providing a set of functions that allow you to write to and read from XLSX / XLSM / XLTM files. Supports reading and writing spreadsheet documents generated by Microsoft Excel™ 2007 and later. Supports complex components by high compatibility, and provided streaming API for generating or reading data from a worksheet with huge amounts of data.&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://github.com/xuri/excelize"&gt;github.com/xuri/excelize&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are pleased to announce the release of version 2.4.0. Featured are a handful of new areas of functionality and numerous bug fixes.&lt;/p&gt;

&lt;p&gt;A summary of changes is available in the &lt;a href="https://github.com/360EntSecGroup-Skylar/excelize/releases/tag/v2.4.0"&gt;Release Notes&lt;/a&gt;. A full list of changes is available in the &lt;a href="https://github.com/360EntSecGroup-Skylar/excelize/compare/v2.3.2...v2.4.0"&gt;changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#release-notes"&gt;
  &lt;/a&gt;
  Release Notes
&lt;/h2&gt;

&lt;p&gt;The most notable changes in this release are:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compatibility"&gt;
  &lt;/a&gt;
  Compatibility
&lt;/h3&gt;

&lt;p&gt;Upgrade requirements Go language version is 1.15 or later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notable-features"&gt;
  &lt;/a&gt;
  Notable Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;New API &lt;a href="https://pkg.go.dev/github.com/360EntSecGroup-Skylar/excelize/v2@v2.4.0#File.GetCellRichText"&gt;&lt;code&gt;GetCellRichText&lt;/code&gt;&lt;/a&gt; support to get the rich text of cell by given worksheet&lt;/li&gt;
&lt;li&gt;Now support to set and get: print scaling, print black and white, and specified the first printed page number of the worksheet by &lt;a href="https://pkg.go.dev/github.com/360EntSecGroup-Skylar/excelize/v2@v2.4.0#File.SetPageLayout"&gt;&lt;code&gt;SetPageLayout&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://pkg.go.dev/github.com/360EntSecGroup-Skylar/excelize/v2@v2.4.0#File.GetPageLayout"&gt;&lt;code&gt;GetPageLayout&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Now support to change and get tab color of the worksheet by &lt;a href="https://pkg.go.dev/github.com/360EntSecGroup-Skylar/excelize/v2@v2.4.0#File.SetSheetPrOptions"&gt;&lt;code&gt;SetSheetPrOptions&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://pkg.go.dev/github.com/360EntSecGroup-Skylar/excelize/v2@v2.4.0#File.GetSheetPrOptions"&gt;&lt;code&gt;GetSheetPrOptions&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pkg.go.dev/github.com/360EntSecGroup-Skylar/excelize/v2@v2.4.0#File.SetCellHyperlink"&gt;&lt;code&gt;SetCellHyperlink&lt;/code&gt;&lt;/a&gt; now support to set hyperlink display &amp;amp; tooltips text, related issue #790&lt;/li&gt;
&lt;li&gt;Support &lt;code&gt;ShowError&lt;/code&gt; option when adding the pivot table&lt;/li&gt;
&lt;li&gt;Support setting formula for cell in streaming API, related issue #625&lt;/li&gt;
&lt;li&gt;The formula calculation engine now supports not equal operator&lt;/li&gt;
&lt;li&gt;The nested formula function now supports cell references as arguments&lt;/li&gt;
&lt;li&gt;Support to specifies that each data marker in the series has a different color&lt;/li&gt;
&lt;li&gt;New support 152 formula functions: ATAN, AVERAGE, AVERAGEA, BESSELI, BESSELJ, BIN2DEC, BIN2HEX, BIN2OCT, BITAND, BITLSHIFT, BITOR, BITRSHIFT, BITXOR, CHAR, CHOOSE, CLEAN, CODE, COLUMN, COLUMNS, COMPLEX, CONCAT, CONCATENATE, COUNT, COUNTBLANK, CUMIPMT, CUMPRINC, DATE, DATEDIF, DB, DDB, DEC2BIN, DEC2HEX, DEC2OCT, DOLLARDE, DOLLARFR, EFFECT, ENCODEURL, EXACT, FALSE, FIND, FINDB, FISHER, FISHERINV, FIXED, FV, FVSCHEDULE, GAMMA, GAMMALN, HARMEAN, HEX2BIN, HEX2DEC, HEX2OCT, HLOOKUP, IF, IFERROR, IMABS, IMAGINARY, IMARGUMENT, IMCONJUGATE, IMCOS, IMCOSH, IMCOT, IMCSC, IMCSCH, IMDIV, IMEXP, IMLN, IMLOG10, IMLOG2, IMPOWER, IMPRODUCT, IMREAL, IMSEC, IMSECH, IMSIN, IMSINH, IMSQRT, IMSUB, IMSUM, IMTAN, IPMT, IRR, ISTEXT, ISPMT, KURT, LARGE, LEFT, LEFTB, LEN, LENB, LOOKUP, LOWER, MAX, MID, MIDB, MIN, MINA, MIRR, N, NOMINAL, NORM.DIST, NORMDIST, NORM.INV, NORMINV, NORM.S.DIST, NORMSDIST, NORM.S.INV, NORMSINV, NOT, NOW, NPER, NPV, OCT2BIN, OCT2DEC, OCT2HEX, PDURATION, PERCENTILE.INC, PERCENTILE, PERMUT, PERMUTATIONA, PMT, POISSON.DIST, POISSON, PPMT, PROPER, QUARTILE, QUARTILE.INC, REPLACE, REPLACEB, REPT, RIGHT, RIGHTB, ROMAN, ROW, ROWS, SHEET, SKEW, SMALL, STDEV, STDEV.S, STDEVA, SUBSTITUTE, T, TODAY, TRIM, TRUE, UNICHAR, UNICODE, UPPER, VAR.P, VARP, VLOOKUP&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#improve-the-compatibility"&gt;
  &lt;/a&gt;
  Improve the Compatibility
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Now set the empty string for the cell when &lt;a href="https://pkg.go.dev/github.com/360EntSecGroup-Skylar/excelize/v2@v2.4.0#File.SetCellValue"&gt;&lt;code&gt;SetCellValue&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;nil&lt;/code&gt;, resolve issue #756&lt;/li&gt;
&lt;li&gt;Remove useless internal XML omitempty tag on style pattern fill color&lt;/li&gt;
&lt;li&gt;Fix compatibility issue of Google Sheets offline browser extension #769&lt;/li&gt;
&lt;li&gt;Use absolute reference in the auto filters defined name to make it compatible with OpenOffice, resolve issue #776&lt;/li&gt;
&lt;li&gt;Handle end element event in the worksheet row/column iterator XML SAX parser, faster row/column iterate and fix inconsistent read rows count of the file in some case&lt;/li&gt;
&lt;li&gt;Improves compatibility for worksheet relative XML path&lt;/li&gt;
&lt;li&gt;Avoid duplicate rich text string items #787&lt;/li&gt;
&lt;li&gt;Improves compatibility for absolute XML path, Windows-style directory separator, and inline namespace&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fix round precision issue #764&lt;/li&gt;
&lt;li&gt;Add missing fields and change the order of the fields of workbook fields, prevent generate the corrupted file in some case, resolve issue #766&lt;/li&gt;
&lt;li&gt;Fix hyperbolic cotangent calculation incorrect&lt;/li&gt;
&lt;li&gt;Correct adjust calculation chain in duplicate rows, resolve issue #774&lt;/li&gt;
&lt;li&gt;Correct adjust defined name in the workbook when deleting a worksheet, resolve issue #775&lt;/li&gt;
&lt;li&gt;Fix cyclomatic complexity issue of internal function &lt;code&gt;newFills&lt;/code&gt; and &lt;code&gt;parseToken&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Fix custom row height check issue&lt;/li&gt;
&lt;li&gt;Fix unmerge all cells cause corrupted file, resolve issue #782&lt;/li&gt;
&lt;li&gt;Fix part of auto filter rules missing after saved&lt;/li&gt;
&lt;li&gt;Fix &lt;a href="https://pkg.go.dev/github.com/360EntSecGroup-Skylar/excelize/v2@v2.4.0#File.UpdateLinkedValue"&gt;&lt;code&gt;UpdateLinkedValue&lt;/code&gt;&lt;/a&gt; which returns an error when has chart sheet or dialog sheet&lt;/li&gt;
&lt;li&gt;Fix incorrect default column from &lt;a href="https://pkg.go.dev/github.com/360EntSecGroup-Skylar/excelize/v2@v2.4.0#File.GetColWidth"&gt;&lt;code&gt;GetColWidth&lt;/code&gt;&lt;/a&gt; in some case&lt;/li&gt;
&lt;li&gt;Fix can't add timelines and slicers for a pivot table in generated spreadsheet, resolve issue #804&lt;/li&gt;
&lt;li&gt;Fix incorrect SetDefinedName's &lt;code&gt;localSheetId&lt;/code&gt; attribute to use &lt;code&gt;sheetIndex&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Fix missing cell locked or hidden protection in some case, resolve issue #809&lt;/li&gt;
&lt;li&gt;Fix streaming data writer result missing after call normal API, resolve issue #813&lt;/li&gt;
&lt;li&gt;Fix the negative values series missing chart color issue&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Faster numeric precision process&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#miscellaneous"&gt;
  &lt;/a&gt;
  Miscellaneous
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The dependencies module has been updated&lt;/li&gt;
&lt;li&gt;Unit tests and godoc updated&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://xuri.me/excelize"&gt;Documentation website&lt;/a&gt; with multilingual: Arabic, German, Spanish, English, French, Russian, Chinese, Japanese, and Korean, which has been updated&lt;/li&gt;
&lt;li&gt;Welcome join &lt;a href="https://join.slack.com/t/xuri/shared_invite/zt-eriqdkeo-wV04zcCdBiiZveFgY86Wzw"&gt;the Slack channel&lt;/a&gt; or &lt;a href="https://t.me/excelize"&gt;Telegram Group&lt;/a&gt; to meet other members of our community&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>excel</category>
      <category>xlsx</category>
    </item>
    <item>
      <title>My 100DaysofCode</title>
      <author>DHANUSH N</author>
      <pubDate>Sun, 18 Apr 2021 16:29:07 +0000</pubDate>
      <link>https://dev.to/dhanushxeno/my-100daysofcode-journey-56je</link>
      <guid>https://dev.to/dhanushxeno/my-100daysofcode-journey-56je</guid>
      <description>&lt;p&gt;Self teaching and progressing can be a difficult task, but thanks to internet for making it easy.&lt;/p&gt;

&lt;p&gt;So people who dont know what is 100DaysOfCode&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coding a minimum of an hour each day for 100 days.&lt;/li&gt;
&lt;li&gt;Tweeting your progress with the #100DaysOfCode hashtag&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I started this 100DaysOfCode when I was an employee and not as a student. When I was a student I was not aware that this kind of challenge exists even though I would code a lot during college days. I joined twitter on April 2014 but didn't but was not a regular user. During 2020, COVID crisis, at quarantine when I logged into twitter I found this hashtag #100DaysOfCode randomly on a post, then I checked with few people whom I know and came to know about this challenge.&lt;/p&gt;

&lt;p&gt;So I started and tried myself to be consistent and did various tech oriented codes of my interest. I see few projects get inspired learn them and start creating projects. This challenge made me to learn more technologies which I am usually passionate about. &lt;/p&gt;

&lt;p&gt;Below is the list of codes over my #100DaysOfCode journey along with their twitter links. If you have any doubts on any of the below projects feel free to reach out to me. Also the below may help anyone who thinks what to do in the 100Days of Codes as it covers various technologies&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#100daysofcode-journey"&gt;
  &lt;/a&gt;
  100DaysOfCode Journey
&lt;/h1&gt;

&lt;p&gt;Day 1 - Created a Deno App&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1300131201538166784?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1300131201538166784?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 2 - Was learning to make a 3D Rubixs Cube&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1300504677407010816?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1300504677407010816?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 3 - Created a 3D Rubixs Cube in Codepen&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1300868535254528000?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1300868535254528000?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 4 - Solved hackerrank puzzles &amp;amp; few freecodecamp tutorials&lt;br&gt;
 &lt;a href="https://twitter.com/Dhanush_Xen/status/1301233408983531526?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1301233408983531526?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 5 - Created a chessboard using HTML &amp;amp; JS only&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1301575456181813248?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1301575456181813248?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 6 - Created a static chess board with pieces &amp;amp; hosted using http server in local&lt;br&gt;&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1301953698382270464?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1301953698382270464?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 7 - Tried an animation in codepen&lt;br&gt;
 &lt;a href="https://twitter.com/Dhanush_Xen/status/1302190818455769090?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1302190818455769090?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 8 - Learnt some react &amp;amp; created my first penguin&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1302625180397654019?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1302625180397654019?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 9 - Created a digital dice using python&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1302990119155105792?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1302990119155105792?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 10 - Machine Precision in Computer Science &lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1303381540106199041?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1303381540106199041?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 11 - RPA &amp;amp; Converted HTML to XML using C#&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1303768054493372416?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1303768054493372416?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 12 - Trying out few js codes&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1304126435464863744?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1304126435464863744?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 13 - Animation in codepen&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1304426888815734784?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1304426888815734784?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 14 - Chrome extension to share quote or image&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1304861281489313792?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1304861281489313792?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 15 - Chrome extension to download bulk images&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1305216127061032960?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1305216127061032960?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 16 - Deployed app in vercel &amp;amp; updated github readme&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1305535526959607808?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1305535526959607808?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 17 - Earned problem solving basic skill in Hackerrank&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1305898978744000513?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1305898978744000513?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 18 -  Started learning Phaser.js&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1306269500929531904?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1306269500929531904?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 19 -  Color a winged horse using Phaser.js&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1306626168020320256?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1306626168020320256?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 20 - Using github CLI &amp;amp;  some python code&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1306977617740926976?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1306977617740926976?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 21 - Face detection image &amp;amp; video using python&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1307275760952995842?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1307275760952995842?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 22 - Solved hackerrank problems (4th star in 10DaysOfJS) &amp;amp; game development&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1307719185099665408?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1307719185099665408?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 23 - TDD using Jest in Node JS &amp;amp; spent time reading ML Models&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1308090768368652288?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1308090768368652288?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 24 - Completed some more hackerrank problems(10DaysOfJS) &amp;amp; started with web design&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1308446632686485504?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1308446632686485504?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 25 - A simple android app using java to open a blog site via an app&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1308785292145426436?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1308785292145426436?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 26 - Created a game using phaser js&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1309172861379125248?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1309172861379125248?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 27 - Created a twitter bot using python&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1309530116997836801?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1309530116997836801?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 28 - Spent some time in web designing&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1309856830097555458?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1309856830097555458?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 29 - Text to speech and also convert into mp3 audio file using python&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1310254229064278016?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1310254229064278016?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 30 - Coded bouncing disco balls in codepen using html &amp;amp; js&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1310650204727599104?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1310650204727599104?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 31 - Created a blackboard using html, css &amp;amp; js&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1310963860816396294?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1310963860816396294?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 32 - Made the blackboard suitable for mobile devices too&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1311327949916839936?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1311327949916839936?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 33 - A smiling animation in codepen&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1311712673638227970?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1311712673638227970?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 34 - Contributed to hacktoberfest&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1312035011453878274?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1312035011453878274?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 35 - ML Math &amp;amp; Flying spaceship using codepen&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1312420213883772930?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1312420213883772930?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 36 - Spent some time in web designing&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1312763979190554624?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1312763979190554624?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 37 - Worked in Docker&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1313165051486896128?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1313165051486896128?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 38 &amp;amp; 39 - Learning to configure YAML files&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1313528170117644289?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1313528170117644289?s=20&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1313890727756099584?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1313890727756099584?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 40 - Configuring Log management tools ELK Stack&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1314254242450862081?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1314254242450862081?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 41 - Explored Node Js Streams&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1314593489946959872?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1314593489946959872?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 42 - Created a desktop app using python&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1314998873924857856?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1314998873924857856?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 43 - Extra features for desktop application using python&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1315311047918534658?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1315311047918534658?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 44 - Explored winston npm for Node Js&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1315701437830111232?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1315701437830111232?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 45 - Explored some more log npm packages  &amp;amp; worked on log management tools &lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1316064954710073344?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1316064954710073344?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 46 - Structured &amp;amp; unstructured logs&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1316425788783173632?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1316425788783173632?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 47 - More exploration and implemented logging&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1316742465525698561?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1316742465525698561?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 48 - Worked on Node JS File Streams&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1317147874749157377?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1317147874749157377?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 49 - Web designing for a site &amp;amp; getting ip using node js&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1317488651337486338?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1317488651337486338?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 50 &amp;amp; 51 - Exploring about logging implementation in real time systems&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1318246939318644738?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1318246939318644738?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 52 - Fancy text using html &amp;amp; css using codepen&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1318579044472872960?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1318579044472872960?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 53 - CSS Blend mode for images&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1318963227846348800?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1318963227846348800?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 54 - Kibana Visualization for logging&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1319305233298698241?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1319305233298698241?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 55 -Music player using codepen&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1319665113222307840?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1319665113222307840?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 56 - Explored some ML Libraries&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1320052868129255424?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1320052868129255424?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 57 - ML &amp;amp; HTML Tags&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1320400651294142464?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1320400651294142464?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 58 - Flip card using html &amp;amp; css in codepen&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1320740544499175429?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1320740544499175429?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 59 - Color ranger using codepen&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1321112952078954498?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1321112952078954498?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 60 - MongoDb queries in Node Js&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1321499674612699136?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1321499674612699136?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 61 - NLP in ML&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1321830128612110336?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1321830128612110336?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 62 - Date functions in js&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1322234911537782784?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1322234911537782784?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 63 - Plot google map using python&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1322582917013336064?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1322582917013336064?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 64 &amp;amp; 65 - Css Flexboxes&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1323257560862920705?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1323257560862920705?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 66 &amp;amp; 67 - Data Science Project for birth rate analysis&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1324007881813884928?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1324007881813884928?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 68 - Revised React Concepts via freeCodeCamp&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1324402616277688320?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1324402616277688320?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 69 to 74 - Working on React in creating interactive UI&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1326530382364176384?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1326530382364176384?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 75 - Completed Managing packages with Node Js via freeCodeCamp&lt;br&gt;
 &lt;a href="https://twitter.com/Dhanush_Xen/status/1326930754534735872?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1326930754534735872?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 76 to 80 - Worked on various web concepts&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1328406556484935680?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1328406556484935680?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 81 to 84 - Created an AIML application &amp;amp; worked on some css &amp;amp; node js concepts&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1329815167698235395?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1329815167698235395?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 85 to 86 - Happy birthday music karaoke in codepen&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1330515927532666880?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1330515927532666880?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 87 to 88 - Explored end to end encryption&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1331249427928018948?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1331249427928018948?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 89 &amp;amp; 90 - Transactions in Node js &amp;amp; Started with Adobe photoshop&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1332014551806529538?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1332014551806529538?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 91&amp;amp; 92 - Using Adobe photoshop &amp;amp; XD created my first poster&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1332713038395314176?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1332713038395314176?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 93 &amp;amp; 94 - More exploration in Adobe photoshop &amp;amp; XD and solved hackerrank problems&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1333466635823312896?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1333466635823312896?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 95 &amp;amp; 96 - React concepts&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1334152549255954434?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1334152549255954434?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 97 to 99 - Solved few coding problems &amp;amp; some designing using Adobe XD&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1335226724670324738?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1335226724670324738?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Day 100 - Solved some more complex problems &amp;amp; decided to start learning AWS&lt;br&gt;
&lt;a href="https://twitter.com/Dhanush_Xen/status/1335603956928548864?s=20"&gt;https://twitter.com/Dhanush_Xen/status/1335603956928548864?s=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's stay in touch:&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/Dhanush_Xen"&gt;https://twitter.com/Dhanush_Xen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Programming in Clojure (Part 1 Basics)</title>
      <author>Mark Mahoney</author>
      <pubDate>Sun, 18 Apr 2021 16:20:22 +0000</pubDate>
      <link>https://dev.to/markm208/programming-in-clojure-part-1-basics-51gl</link>
      <guid>https://dev.to/markm208/programming-in-clojure-part-1-basics-51gl</guid>
      <description>&lt;p&gt;This 7 part series of posts will cover programming in Clojure. Clojure is an awesome functional programming language that runs on Java's Virtual Machine (JVM). It is sometimes called a &lt;em&gt;LISP&lt;/em&gt; or LISt Processer. Through a series of code 'playbacks' I will guide you through the basics of the language. &lt;/p&gt;

&lt;p&gt;I am expecting that the reader already has some programming experience in another language but Clojure is so different than most imperative programming languages that it doesn't really matter where you are coming from as long as you know the basics (variables, if statements, loops, and functions). If you are looking for a complete beginners guide to programming you can find some of my other &lt;a href="https://markm208.github.io/"&gt;programming content here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will cover basic flow, data structures, immutability, functions, closures, tail recursion, lazy sequences, macros, and concurrency. Clojure is a functional programming language, the function is king and data is immutable. This may be a different paradigm than you are used to but there are some compelling reasons to use it. Clojure's immutability is particularly good for programs that want to take advantage of modern hardware on laptops and mobile phones (multiple processors sharing a single memory). &lt;/p&gt;

&lt;p&gt;Simply watching an experienced artist paint is not enough to say that you have learned how to become a painter. Watching an experienced artist is an important &lt;em&gt;part&lt;/em&gt; of the learning process but you can only call yourself a painter after struggling to make your own paintings first. There are lot of similarities between learning to paint and learning to program. The only way to truly learn to program is to practice! Clojure runs on the JVM and it can be difficult to set up a programming environment. So, I recommend using a web-based IDE. There is no easier way to start programming in Clojure than using &lt;a href="https://replit.com/"&gt;replit&lt;/a&gt;. I recommend using it to write your first programs in Clojure.&lt;/p&gt;

&lt;p&gt;So, let's get started. You will be asked to follow along with the programs below. Just click on the links and a code playback will load (you might want to open each one in a new tab). Then click on the comments on the left hand side of the screen or hit the play button to drive the development of the code. You can download the code at any point or copy/paste it into a repl on replit. There are some controls in the top right hand side of the screen to make the text bigger or to switch to blog mode (which is good for small screens).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction-to-clojure"&gt;
  &lt;/a&gt;
  Introduction to Clojure
&lt;/h3&gt;

&lt;p&gt;These first few programs show how to print to the screen, perform basic arithmetic, and store some data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cljbook/chapter1/01/playback.html"&gt;Hello World!!!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cljbook/chapter1/02/playback.html"&gt;Readers/evaluators and simple arithmetic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cljbook/chapter1/03/playback.html"&gt;Dog age converter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This program shows how to use the Java capability that it built-in to the JVM.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cljbook/chapter1/04/playback.html"&gt;Java interoperability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These programs show some basic data structures in Clojure and how they are immutable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cljbook/chapter1/05/playback.html"&gt;Clojure data structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cljbook/chapter1/06/playback.html"&gt;Efficient immutability (more with data structures)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#call-to-action"&gt;
  &lt;/a&gt;
  Call to Action
&lt;/h3&gt;

&lt;p&gt;Problem 1&lt;br&gt;
Write a Clojure program that prompts the user for the length and width of a wooden board in inches. Then display the number of whole square feet are in the board. For example, if the height is 27 inches and the width is 34 inches, then the number of square feet is 6.375.&lt;/p&gt;

&lt;p&gt;Problem 2&lt;br&gt;
Write a program that creates an empty list and use &lt;code&gt;def&lt;/code&gt; to store a reference to it called &lt;code&gt;empty-list&lt;/code&gt;. Use &lt;code&gt;cons&lt;/code&gt; to add your name to it and store it in a new list called &lt;code&gt;my-name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;conj&lt;/code&gt; to add all of your siblings to a list called &lt;code&gt;me-and-my-siblings&lt;/code&gt; (if you don't have any you can use some of mine or make some up).&lt;/p&gt;

&lt;p&gt;Print all the names in &lt;code&gt;me-and-my-siblings&lt;/code&gt;. Print the third name on the list &lt;code&gt;me-and-my-siblings&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a map with all of your siblings' names as keys and their ages as values. Use &lt;code&gt;assoc&lt;/code&gt; to add my name/age to the map (my age is 48). Use the map to print your age.&lt;/p&gt;

&lt;p&gt;Problem 3&lt;br&gt;
Create a map with the number of days in each of the months called &lt;code&gt;days-in-months&lt;/code&gt;. Use the integers 1-12 as the keys and the number of days in the months as the values. Create a second map from the first that has 29 days for February. Call this one &lt;code&gt;days-in-months-leapyear&lt;/code&gt;. Make sure to do this efficiently (use &lt;code&gt;assoc&lt;/code&gt; to create a new value for February). Create another map with month names as the strings.&lt;/p&gt;

&lt;p&gt;Prompt the user for a month number, day number, and year and create two new variables, &lt;code&gt;short-string&lt;/code&gt; and &lt;code&gt;long-string&lt;/code&gt;. Short string will be in this format month/day/year and long string will be in this format "MonthName dayNumber, Year". Print out both of the strings and the number of days in the month you were born. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comments-and-feedback"&gt;
  &lt;/a&gt;
  Comments and Feedback
&lt;/h3&gt;

&lt;p&gt;You can find all of these code playbacks in my free 'book', &lt;a href="https://markm208.github.io/cljbook/"&gt;An Animated Introduction to Clojure&lt;/a&gt;. I am always looking for feedback so please feel free to comment here or to send me a message. You can follow me on twitter &lt;a href="https://twitter.com/markm208"&gt;@markm208&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>clojure</category>
    </item>
    <item>
      <title>AdaptiveAvgPool2d in PyTorch</title>
      <author>Ambarish Ganguly</author>
      <pubDate>Sun, 18 Apr 2021 16:15:04 +0000</pubDate>
      <link>https://dev.to/ambarishg/adaptiveavgpool2d-in-pytorch-1dke</link>
      <guid>https://dev.to/ambarishg/adaptiveavgpool2d-in-pytorch-1dke</guid>
      <description>&lt;p&gt;I had trouble understanding the &lt;code&gt;AdaptiveAvgPool2d&lt;/code&gt; function in PyTorch.  The following examples helped me to teach myself better. Hopefully, somebody may benefit from this.    &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#example-1"&gt;
  &lt;/a&gt;
  Example 1
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;torch&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;torch.nn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AdaptiveAvgPool2d&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;

&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output will be equal to torch.mean(input)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#example-2-with-a-3-x-3-x-3-tensor"&gt;
  &lt;/a&gt;
  Example 2 with a 3 x 3 x 3  tensor
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;5.&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;7.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;7.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;7.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a 3 x 3  x 3 array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AdaptiveAvgPool2d&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BPMAjts1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgj93iaxv1pj74s030uq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BPMAjts1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgj93iaxv1pj74s030uq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's investigate why the 1st element is 2.5   &lt;/p&gt;

&lt;p&gt;We take a 2 x 2 tensor out of the 3 x 3 x 3 tensor and take the mean and see that it is 2.5&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gxE3X7d_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8rxef2kvh1vw7cie79e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gxE3X7d_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8rxef2kvh1vw7cie79e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-3"&gt;
  &lt;/a&gt;
  Example 3
&lt;/h2&gt;

&lt;p&gt;We see that the 6th element is 4.5. How is this calculated?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5wfLhFD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ih0u38c6uuikwqlaojvd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5wfLhFD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ih0u38c6uuikwqlaojvd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We take the mean of the following section&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K7if4W58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kg7za5rzu6m32ptcguql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K7if4W58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kg7za5rzu6m32ptcguql.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#example-4-with-a-4-x-3-x-3-tensor"&gt;
  &lt;/a&gt;
  Example 4   with a 4 x 3 x 3 tensor
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;5.&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;7.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;7.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;7.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;8.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;8.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;8.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a 4 x 3 x 3 tensor &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rMyZ4UOC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrpawg4zi1yw56np15bc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rMyZ4UOC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrpawg4zi1yw56np15bc.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AdaptiveAvgPool2d&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eQ0MPbr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1qn2m7q67e96hy39937.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQ0MPbr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1qn2m7q67e96hy39937.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let us explore why the first element is &lt;strong&gt;2.3333&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                 &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G-QXASyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lck8u8gkwepfyur9el3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G-QXASyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lck8u8gkwepfyur9el3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>deeplearning</category>
      <category>pytorch</category>
    </item>
    <item>
      <title>Boolean Values</title>
      <author>Randy Rivera</author>
      <pubDate>Sun, 18 Apr 2021 16:11:21 +0000</pubDate>
      <link>https://dev.to/rthefounding/boolean-values-2a13</link>
      <guid>https://dev.to/rthefounding/boolean-values-2a13</guid>
      <description>&lt;h4&gt;
  &lt;a href="#understanding-boolean-values"&gt;
  &lt;/a&gt;
  Understanding Boolean Values
&lt;/h4&gt;

&lt;p&gt;Another data type is the Boolean. Booleans may only be one of two values: true or false. &lt;/p&gt;

&lt;p&gt;Note: Boolean values are never written with quotes. The strings "true" and "false" are not Boolean and have no special meaning in JavaScript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function welcomeToBooleans() {
  return true;
}
welcomeToBooleans(); // will display true

function welcomeToBooleans() {
 return false; 
}
welcomeToBooleans(); // will display false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>devops</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>BaseCamp Community Intro + Resources🎉</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Sun, 18 Apr 2021 15:54:28 +0000</pubDate>
      <link>https://dev.to/basecampxd/basecamp-community-intro-resources-51pm</link>
      <guid>https://dev.to/basecampxd/basecamp-community-intro-resources-51pm</guid>
      <description>&lt;h1&gt;
  &lt;a href="#basecamp-community"&gt;
  &lt;/a&gt;
  BaseCamp Community
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;When I started my programming journey as a newbie, I literally had no idea about "How to kickstart in the right way?". Having a roadmap is good but sometimes it may not be enough. We need more engagement and discussion.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D4U_Q8oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j523v1n8pma1b0viztvd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D4U_Q8oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j523v1n8pma1b0viztvd.gif" alt="Confused"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After finding a way for myself, I am here, writing code and blog on a regular basis. To solve this problem of getting started in the right direction and helping them with the right tool and resources regarding coding, getting started, open sources, joining the different community, etc. Me and my friend &lt;a href="https://dev.to/mindninjax"&gt;Risabh Singh&lt;/a&gt; have started BaseCamp Community to help the newbies who are passionate about learning to code and becoming better programmers eventually.&lt;/p&gt;

&lt;p&gt;We are currently in starting phases where we are creating videos on YouTube to teach open sources contribution through GitHub. We have repositories on GitHub, where new developers can contribute easily and learn Github working and contributing on GitHub.&lt;/p&gt;

&lt;p&gt;Now we are writing blogs.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#dev-blog"&gt;
  &lt;/a&gt;
  Dev Blog
&lt;/h2&gt;

&lt;p&gt;BaseCamp is now on dev.to to help reach more people through our blogs &amp;amp; share our knowledge. We have a lot of ideas already. here are some we have decided to get started with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Dev Discuss -A healthy discussion on developing community as well as off-topic.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open Source -Introduction to open source and encouraging people to join open source. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Languages -We will focus on the different programming languages to help newbie developers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Resources and Roadmap -Series of resources and roadmap for the different professions from web development(Frontend/Backend/Full Stack) to mobile development.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Much More......&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-us"&gt;
  &lt;/a&gt;
  Connect with Us
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Twitter - &lt;a href="https://twitter.com/basecampXD"&gt;@basecampXD&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;YouTube - &lt;a href="https://www.youtube.com/channel/UCJzWrm8hN4cYt2-rgbryVHQ"&gt;@Basecamp&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;GitHub - &lt;a href="https://github.com/Basecamp-Community"&gt;@Basecamp-Community&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;p&gt;As you get excited about BaseCamp, we are going to start with some resources to set up for you for future projects and learning.&lt;/p&gt;

&lt;p&gt;Let's start with the resources list&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notion"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1PFlEFh8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj8kzcpevc9zn4yww2p1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1PFlEFh8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj8kzcpevc9zn4yww2p1.png" alt="Notion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#trello"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.notion.so/"&gt;Trello&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--86b2oUuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3knatu1i6fopz6eqllwo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--86b2oUuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3knatu1i6fopz6eqllwo.png" alt="Trello"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Collaborate, manage projects and reach new productivity peaks. From high rises to the home office, the way your team works is unique—accomplish it all with Trello.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#freecodecamp"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qnhaqytZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3idj6nt6nko4a34wui33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qnhaqytZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3idj6nt6nko4a34wui33.png" alt="freeCodeCamp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;freeCodeCamp is a non-profit organization that consists of an interactive learning web platform, an online community forum, chat rooms, online publications. They accomplish this by creating thousands of videos, articles, and interactive coding.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#replit"&gt;
  &lt;/a&gt;
  &lt;a href="https://replit.com/"&gt;Replit&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wVc_N7jM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pc8xkyxgojwilsy4p8bn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wVc_N7jM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pc8xkyxgojwilsy4p8bn.PNG" alt="Replit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Replit is a simple yet powerful online IDE, Editor, Compiler, Interpreter, and REPL. Code, compile, run, and host in 50+ programming languages.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#graphicmaker"&gt;
  &lt;/a&gt;
  &lt;a href="https://designs.ai/graphicmaker/"&gt;Graphicmaker&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_bMmtxbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rah4zv7g96e65tfgw8u9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_bMmtxbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rah4zv7g96e65tfgw8u9.png" alt="Graphicmaker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Get beautiful and customizable SVG, PNG, and Vector illustrations that match your brand identity. Brought to you by Designs.ai.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#heroku"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XoBjsaCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/484urjx43pa6g5nizalo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XoBjsaCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/484urjx43pa6g5nizalo.png" alt="Heroku"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Heroku is a platform as a service (PaaS) that enables developers to build, run, and operate applications entirely in the cloud.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#last-note"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;Thank you for reading and always remember that you are amazing. &lt;/p&gt;

&lt;p&gt;Make sure to follow us on &lt;a href="https://dev.to/basecampxd"&gt;dev.to&lt;/a&gt; to stay updated with our latest blog posts.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Deploying Jupyter Notebook as a Web Page</title>
      <author>Parth Doshi</author>
      <pubDate>Sun, 18 Apr 2021 15:52:27 +0000</pubDate>
      <link>https://dev.to/parthketandoshi/deploying-jupyter-notebook-as-a-web-page-44jp</link>
      <guid>https://dev.to/parthketandoshi/deploying-jupyter-notebook-as-a-web-page-44jp</guid>
      <description>&lt;p&gt;I am writing this post to demonstrate how I deployed a Jupyter Notebook as an HTML Web-page. When provided with a problem statement for which I decided to implement the solution in Python, I was exploring different ways to share my Python Script displaying the code snippets with its output when I found out this method. &lt;/p&gt;

&lt;p&gt;You can check out the final output here 👇🏻&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#production-application-test-project-webpage"&gt;
  &lt;/a&gt;
  &lt;a href="https://parthketandoshi.github.io/Production-Application-Test/"&gt;Production Application Test - Project Webpage&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#problem-statement-source-intercom"&gt;
  &lt;/a&gt;
  Problem Statement 📄 (Source: &lt;a href="https://www.intercom.com/blog/how-we-hire-engineers-part-1/"&gt;Intercom&lt;/a&gt;)
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;We have some customer records in a text file, one customer per line, JSON formatted lines. We want to invite any customer within 100km of our Dublin office for some food and drinks on us. Write a program that will read the full list of customers and output the names and user ids of matching customers (within 100km), sorted by User ID (ascending).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You must use the first formula from &lt;a href="https://en.wikipedia.org/wiki/Great-circle_distance"&gt;this Wikipedia article&lt;/a&gt; to calculate distance. Don't forget, you'll need to convert degrees to radians.&lt;/li&gt;
&lt;li&gt;The GPS coordinates for our Dublin office are 53.339428 and -6.257664.&lt;/li&gt;
&lt;li&gt;You can find the Customer list &lt;a href="https://gist.github.com/shadab16/ebf141802f90a51c42350ca2dd98ec7c"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#implementation-%F0%9F%8F%97"&gt;
  &lt;/a&gt;
  Implementation 🏗
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://colab.research.google.com"&gt;Google Colaboratory ⚗️&lt;/a&gt; to implement the Python Script&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://python-visualization.github.io/folium/"&gt;Folium 🗺&lt;/a&gt; to render Maps and Markers for Office and Customer Locations&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://urllib3.readthedocs.io/en/latest/"&gt;URLlib Module 📁&lt;/a&gt; to fetch and process customer data&lt;/li&gt;
&lt;li&gt;Built-in &lt;a href="https://docs.python.org/3/library/json.html"&gt;JSON Package 🧾&lt;/a&gt; to process the data after initial pre-processing&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pandas.pydata.org"&gt;Pandas 📊&lt;/a&gt; to work with the processed customer data&lt;/li&gt;
&lt;li&gt;Built-in &lt;a href="https://docs.python.org/3/library/unittest.html"&gt;UnitTest Library 📋&lt;/a&gt; to implement basic unit-testing&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pages.github.com"&gt;GitHub Pages 💻&lt;/a&gt; for hosting the generated Web-page&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment 🚀
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#jupyter-notebook-to-html"&gt;
  &lt;/a&gt;
  Jupyter Notebook to HTML
&lt;/h4&gt;

&lt;p&gt;I used &lt;a href="https://nbconvert.readthedocs.io/en/latest/"&gt;&lt;strong&gt;jupyter nbconvert&lt;/strong&gt;&lt;/a&gt; to convert the ipynb script to html&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;jupyter nbconvert &amp;lt;input-file&amp;gt; --to &amp;lt;output-format&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://nbconvert.readthedocs.io/en/latest/usage.html#supported-output-formats"&gt;Supported output formats&lt;/a&gt; are HTML, PDF, LaTeX and many more. &lt;/p&gt;

&lt;p&gt;Additional &lt;a href="https://nbconvert.readthedocs.io/en/latest/config_options.html"&gt;Configuration Options&lt;/a&gt; can be used to enrich the experience of converting notebooks to other forms. One option which I used was changing the theme of the notebook which is set to &lt;em&gt;Light&lt;/em&gt; by default. It can be done using HTMLExporter.theme CLI flag.&lt;/p&gt;

&lt;p&gt;Usage Eample:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;jupyter nbconvert script.ipynb --to html --HTMLExporter.theme=dark 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After generating the HTML file, I made changes to the HTML code like adding a navbar to navigate to sections and changing the background colour jp-Notebook class from Black to Grey20 colour (#333333). I hosted it using GitHub Pages directly from its GitHub Repository.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#github-repository"&gt;
  &lt;/a&gt;
  GitHub Repository 📥
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ParthKetanDoshi"&gt;
        ParthKetanDoshi
      &lt;/a&gt; / &lt;a href="https://github.com/ParthKetanDoshi/Production-Application-Test"&gt;
        Production-Application-Test
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>python</category>
      <category>jupyter</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Python, ASAP 🐍</title>
      <author>Brice Duke</author>
      <pubDate>Sun, 18 Apr 2021 15:44:06 +0000</pubDate>
      <link>https://dev.to/briceduke/python-asap-2bea</link>
      <guid>https://dev.to/briceduke/python-asap-2bea</guid>
      <description>&lt;p&gt;Hello there! I've been a DEV reader for a long time, but just recently I decided to make an account and maybe start posting. I want to share what I know with everyone, and even if I'm able to help one person, that'd be amazing.&lt;/p&gt;

&lt;p&gt;I've decided to start writing bite-sized articles that will provide you a crash course on the concept. I thought that if I start with the easier languages and concepts and move to more advanced ones, beginners could follow along with me!&lt;/p&gt;

&lt;p&gt;This specific article will be targeted towards complete beginners, as I will be going over basic programming concepts; more advanced programmers are certainly welcome to peruse, though!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-without-further-ado-i-give-you-python-as-soon-as-possible"&gt;
  &lt;/a&gt;
  So without further ado, I give you Python, as Soon as Possible!
&lt;/h3&gt;

&lt;p&gt;Let's start by clearing something up:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#programming-is-just-a-set-of-rules"&gt;
  &lt;/a&gt;
  Programming is just a set of rules!
&lt;/h4&gt;

&lt;p&gt;All you're doing is telling a computer to do something, don't overthink it! You give it data and tell it what to do in what circumstances and it obediently does the work. That's all. It may be slightly different in different languages, but the concepts are the same. Alright, now that's off my chest, so here we go:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-look-at-operators"&gt;
  &lt;/a&gt;
  &lt;a&gt;Let's look at operators&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The math things!&lt;/p&gt;

&lt;p&gt;operators are "special symbols in Python that carry out arithmetic or logical computation."&lt;/p&gt;

&lt;p&gt;Here is a list of operators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, and &lt;code&gt;/&lt;/code&gt; are self-explanatory&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;//&lt;/code&gt; divides and rounds down (e.g. &lt;code&gt;7 // 4&lt;/code&gt; will return &lt;code&gt;1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;%&lt;/code&gt; is the modulo operation, which is the remainder of a division (e.g. &lt;code&gt;7 % 4&lt;/code&gt; will return &lt;code&gt;3&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;**&lt;/code&gt; represents exponents (e.g. &lt;code&gt;7**2&lt;/code&gt; will return &lt;code&gt;49&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;==&lt;/code&gt; will compare two things and return &lt;code&gt;True&lt;/code&gt; if they're equivalent (e.g. &lt;code&gt;7 == 4&lt;/code&gt; returns &lt;code&gt;False&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;!=&lt;/code&gt; will compare two things and return &lt;code&gt;True&lt;/code&gt; if they're not equivalent (e.g. &lt;code&gt;7 != 4&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; compare two things to see if they're greater or less than (&lt;code&gt;7 &amp;gt; 4&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt;, and &lt;code&gt;7 &amp;lt; 4&lt;/code&gt; returns &lt;code&gt;False&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt;=&lt;/code&gt; and &lt;code&gt;&amp;lt;=&lt;/code&gt; are greater/less than OR equal to (&lt;code&gt;7 &amp;gt;= 7&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;4 &amp;lt;= 7&lt;/code&gt; is also &lt;code&gt;True&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These also follow "order of operations" (think PEMDAS, students), so do be careful. In order to prioritize a certain part of your math operation, you can surround that part in parenthesis (e.g. &lt;code&gt;(1 + 2) * 3&lt;/code&gt; will add the two numbers first and then multiply the sum)&lt;/p&gt;

&lt;p&gt;Alright, enough math (for now 😉).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variables-and-data-types"&gt;
  &lt;/a&gt;
  &lt;a&gt;Variables and data types&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If we want to store something for later, we can assign it to a variable. Let's look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Snek"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We just made a variable called &lt;code&gt;name&lt;/code&gt; and gave it a value of Snek (by the way, words and letters are represented as &lt;strong&gt;strings&lt;/strong&gt; and can be in &lt;strong&gt;double quotes or single quotes&lt;/strong&gt;). We can now access &lt;code&gt;name&lt;/code&gt; later in our code.&lt;/p&gt;

&lt;p&gt;A benefit of this is that if we need to access &lt;code&gt;name&lt;/code&gt; multiple times, we'll only need to change its value (Snek) once 😎&lt;/p&gt;

&lt;p&gt;The best part is, variables don't even only have to be strings, they can be numbers, &lt;strong&gt;floats&lt;/strong&gt; (these are just decimals like 3.14), &lt;strong&gt;booleans&lt;/strong&gt; (these are just &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;, be sure to capitalize these!), or &lt;strong&gt;lists&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What's a list, you say? Well, it's in the name. Lists are a way of storing multiple values. Let's say we need to store our favorite drinks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;favorite_drinks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"coffee"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"more coffee"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wHoLe MiLk"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just add brackets and separate by a comma!&lt;/p&gt;

&lt;p&gt;If we want to look at items in a list, we can do so by accessing its &lt;strong&gt;index&lt;/strong&gt;. We'll use the &lt;code&gt;favorite_drinks&lt;/code&gt; example to illustrate this. Let's display "more coffee" from the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;favorite_drinks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"coffee"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"more coffee"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wHoLe MiLk"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;favorite_drinks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;"Woah, Brice! You told it to access 1, but it got the second item on the list! What's up with that?" Yeah, programmers decided to break all known laws of sanity and &lt;strong&gt;made counting start at zero&lt;/strong&gt;. The 0th position in &lt;code&gt;favorite_drinks&lt;/code&gt; would be "coffee"!&lt;/p&gt;

&lt;p&gt;We also saw a new thing called &lt;code&gt;print&lt;/code&gt; in that example. &lt;code&gt;print&lt;/code&gt; will take everything in its parenthesis (they can be variables like &lt;code&gt;name&lt;/code&gt;, data types, and more stuff we'll learn later) and display it for us!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One thing to note:&lt;/em&gt; variable names in Python can only start with a letter or underscore, and typically multi-word names are separated by an underscore (e.g. &lt;code&gt;awesome_name&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Easy enough, right?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conditionals"&gt;
  &lt;/a&gt;
  &lt;a&gt;Conditionals&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If we only want something to happen in certain circumstances, we can use &lt;strong&gt;conditionals&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's say we want to print "caffeine addict" ONLY IF the first element in the list is "coffee":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;favorite_drinks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"coffee"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"more coffee"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wHoLe MiLk"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;favorite_drinks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"coffee"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"caffeine addict"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would of course print caffeine addict because the first element (remember, it's in the 0th position) is in fact coffee!&lt;/p&gt;

&lt;p&gt;Let's look at an example and see if you can figure out what's going on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;favorite_drinks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"coffee"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"more coffee"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wHoLe MiLk"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;favorite_drinks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"more coffee"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"caffeine addict"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;favorite_drinks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"coffee"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"slight caffeine addict"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"not a caffeine addict"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here it is in English: if the first element of favorite_drinks is more coffee, print "caffeine addict". Elsewise, if (&lt;strong&gt;elif&lt;/strong&gt;) the 0th element is coffee, print "slight caffeine addict". Elsewise (&lt;strong&gt;else&lt;/strong&gt;) print "not a caffeine addict".&lt;/p&gt;

&lt;p&gt;Cool! 👍&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#looping"&gt;
  &lt;/a&gt;
  &lt;a&gt;Looping&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;There are a few ways we can loop through things like lists.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Loops&lt;/strong&gt; will loop through a specific amount that we define at the beginning of the loop. Let's look at two examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;favorite_drinks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"coffee"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"more coffee"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wHoLe MiLk"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;drink&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;favorite_drinks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;drink&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Here, we will have access to each &lt;code&gt;drink&lt;/code&gt; in our list (we called it a &lt;code&gt;drink&lt;/code&gt; in the for loop) and we will print each drink.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We define the name of each element at the beginning of the for loop. This is perfectly valid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;favorite_drink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;This will still print each element in the list, even though the element is technically called &lt;code&gt;i&lt;/code&gt; (short for index)... You can name this whatever you want!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For loops can also be ranges. Let's say we wanted to print "wassup" 5 times:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"wassup"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy peasy, we just supply a range (5 is the range in this case) and it loops through the code 5 times! 😮&lt;/p&gt;

&lt;p&gt;Let's look at &lt;strong&gt;While Loops&lt;/strong&gt;! These will run while a condition is met, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Math is not broken"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will print "Math is not broken" infinitely. Watch out though, even if math isn't broken, that infinite loop could break your computer... 💔&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whew-thats-a-lot-keep-this-fireplace-on-your-screen-while-you-get-a-snack-or-stretch"&gt;
  &lt;/a&gt;
  Whew, that's a lot! Keep this fireplace on your screen while you get a snack or stretch.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ajXfRPyg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agc84n2jn8by9rzvtmwb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ajXfRPyg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agc84n2jn8by9rzvtmwb.gif" alt="cozy af fireplace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alrighty, back to the fun!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exceptions"&gt;
  &lt;/a&gt;
  &lt;a&gt;Exceptions&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If we want to handle any errors that occur, we can use an exception. It's pretty easy, have a look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;favorite_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;favorite_numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Item is not in the list!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See what I did there? All I did was tell it to try and find the 5th element in the &lt;code&gt;favorite_numbers&lt;/code&gt; array (which obviously doesn't exist 😋). I then told it to catch any index errors via an exception, and tell the user that the item isn't in the list! Wow!&lt;/p&gt;

&lt;p&gt;Okay, all of this stuff is nice, but how can I reuse it?&lt;/p&gt;

&lt;p&gt;Well, dear reader, I give you &lt;strong&gt;functions&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  &lt;a&gt;Functions&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;What do they do? They represent a function (amazing right?). Let's take a look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_a_word&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a word"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;print_a_word&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We start off by &lt;strong&gt;defining&lt;/strong&gt; the function (&lt;em&gt;def&lt;/em&gt;), then we give it a name (like variables, function names can start with letters and underscores and typically use underscores to separate words). The parenthesis at the end will come in handy later. 🕑&lt;br&gt;
Then we tell the function what to do (in this case we tell it to print "a word")&lt;br&gt;
Finally, we "call" the function (we had defined it but now we're putting it to use) by writing the function name and the parenthesis after it.&lt;/p&gt;

&lt;p&gt;Cool, but what if we want to pass in different things, similar to variables? Answer: &lt;strong&gt;parameters&lt;/strong&gt;.&lt;br&gt;
Allow me to shed some light 💡 on the subject:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_a_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;print_a_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Borborygm"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we're passing a parameter called &lt;code&gt;word&lt;/code&gt; into the function definition. This will allow us to use whatever the user passes in later throughout the function. When we go to call the function, we pass in "Borborygm" as the word, thus making the function print Borborygm. I could do this too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_a_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;print_a_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Borborygm"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print_a_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would print Borborygm, then 3.14 on the line below it, since we changed the parameter and called the function again!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;In case you were wondering, Borborygm is a much better word (imo) for "stomach growling"&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#guess-what-youve-learned-the-absolute-basics-of-python-and-programming-for-that-matter-as-soon-as-possible"&gt;
  &lt;/a&gt;
  Guess what? You've learned the absolute basics of Python (and programming for that matter) as soon as possible!!! 🎉
&lt;/h4&gt;

&lt;p&gt;Before you go, I have a few things to say:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Thank you for reading this, it really makes my day! I really would love to hear your feedback, positive or negative, via comments, likes, a follow, Unicorns (what are those, they sound cool! 🦄), or even DMs!&lt;/li&gt;
&lt;li&gt;I'll be pushing more programming language tutorials like this one, but stepping up to more challenging languages. I'll also be adding onto current languages by making more advanced tutorials (Python Pt. 2?)&lt;/li&gt;
&lt;li&gt;Practice Practice Practice! Good programmers practice until they get it right, but &lt;em&gt;great&lt;/em&gt; programmers practice until they can't get it wrong! I'll list some practice resources below 😊&lt;/li&gt;
&lt;li&gt;This is just a &lt;em&gt;basic&lt;/em&gt; introduction to Python and programming. We aren't even scratching the surface, but if this made you have even an inkling of interest in programming, I highly recommend you go further into Python. I'll be adding more Python tutorials soon though 😁&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#practice-resources"&gt;
  &lt;/a&gt;
  Practice Resources:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.programiz.com/python-programming/online-compiler/"&gt;Programiz&lt;/a&gt;, a website where you can practice writing Python (they have a dark mode which is sick)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=kqtD5dpn9C8"&gt;Python Tutorial for Beginners&lt;/a&gt;, a 1 hour long Python crash course on YouTube where you'll learn more about the language&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://edabit.com/challenges/python3"&gt;Edabit&lt;/a&gt;, a cool platform where you can practice Python by doing nifty challenges&lt;/li&gt;
&lt;li&gt;I have my own challenge for you. Write a &lt;strong&gt;function&lt;/strong&gt; that takes in someone's favorite snack as a &lt;strong&gt;parameter&lt;/strong&gt; and prints "My favorite snack is ____". Send your answer in the comments and don't cheat by looking at other answers (we're on the honor system here). &lt;em&gt;Note: I didn't teach you how to insert variables into strings, so you'll have to do some digging! Don't worry though, if you aren't able to find a good answer within a reasonable amount of time then please shoot me an SOS in the comments and I'll be glad to help!&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope y'all enjoyed it; catch you later! 👋&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A look at Kotlin's delegation</title>
      <author>Nicolas Frankel</author>
      <pubDate>Sun, 18 Apr 2021 15:41:22 +0000</pubDate>
      <link>https://dev.to/nfrankel/a-look-at-kotlin-s-delegation-39i1</link>
      <guid>https://dev.to/nfrankel/a-look-at-kotlin-s-delegation-39i1</guid>
      <description>&lt;p&gt;Kotlin offers many exciting features. In general, developers tend to cite null safety as their favorite. For me, it's function extensions. But delegation comes a close second.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-delegation-pattern"&gt;
  &lt;/a&gt;
  The delegation pattern
&lt;/h2&gt;

&lt;p&gt;The delegation pattern is described in the GoF book:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Delegation&lt;/em&gt; is a way to make composition as powerful for reuse as inheritance [Lie86, JZ91]. In delegation, &lt;em&gt;two&lt;/em&gt; objects are involved in handling a request: a receiving object delegates operations to its &lt;em&gt;delegate&lt;/em&gt;. This is analogous to subclasses deferring requests to parent classes. But with inheritance, an inherited operation can always refer to the receiving object through the &lt;code&gt;this&lt;/code&gt; member variable in C++ and &lt;code&gt;self&lt;/code&gt; in Smalltalk. To achieve the same effect with delegation, the receiver passes itself to the delegate to let the delegated operation refer to the receiver.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VyLN8qro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74gy4xytuh7sdiuxye53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyLN8qro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74gy4xytuh7sdiuxye53.png" alt="Delegation example with Window and Rectangle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Delegation is critical when one chooses &lt;em&gt;composition&lt;/em&gt; over &lt;em&gt;inheritance&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--puTZsi7Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sw31xkh4ia1wf9a8oxew.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--puTZsi7Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sw31xkh4ia1wf9a8oxew.png" alt="Composition vs. inheritance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manual-and-native-delegation"&gt;
  &lt;/a&gt;
  Manual and native delegation
&lt;/h2&gt;

&lt;p&gt;In Java, you need to code delegation manually. The example above translates into the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="no"&gt;A&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Composition&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="no"&gt;A&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="no"&gt;B&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nc"&gt;Composition&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;B&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kotlin handles the delegation natively using the keyword &lt;code&gt;by&lt;/code&gt;. You can write the same code in Kotlin like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Delegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;  &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;With this, you can call &lt;code&gt;foo()&lt;/code&gt; on any &lt;code&gt;Delegate&lt;/code&gt; instance&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As explained in the docs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The by-clause in the supertype list for &lt;code&gt;Delegate&lt;/code&gt; indicates that &lt;code&gt;b&lt;/code&gt; will be stored internally in objects of &lt;code&gt;Delegate&lt;/code&gt;, and the compiler will generate all the methods of &lt;code&gt;B&lt;/code&gt; that forward to &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;-- &lt;a href="https://kotlinlang.org/docs/reference/delegation.html"&gt;Delegation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#delegated-properties"&gt;
  &lt;/a&gt;
  Delegated properties
&lt;/h2&gt;

&lt;p&gt;Kotlin also offers &lt;strong&gt;delegated properties&lt;/strong&gt;, a property that delegates its getter (and its setter if a &lt;code&gt;var&lt;/code&gt;) to "something else". A delegated property also uses the &lt;code&gt;by&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;A couple of out-of-the-box delegates are available through the standard library.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Non-null delegate:&lt;/p&gt;

&lt;p&gt;A non-&lt;code&gt;null&lt;/code&gt; delegate behaves the same way as the &lt;code&gt;lazyinit&lt;/code&gt; keyword: if one uses the variable before one has initialized it to a non &lt;code&gt;null&lt;/code&gt; value, it will throw an &lt;code&gt;IllegalStateException&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;notNull&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nc"&gt;Delegates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;notNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lazy delegate:&lt;/p&gt;

&lt;p&gt;A lazy delegate computes the value &lt;em&gt;on the first access&lt;/em&gt;, stores it, and then returns the stored value. As its name implies, you use &lt;code&gt;lazy&lt;/code&gt; when the value is expensive to compute and doesn't change after computation.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;lazy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"An expensive computation"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Observable:&lt;/p&gt;

&lt;p&gt;An observable delegate offers a hook when the value is accessed so you can execute code &lt;strong&gt;afterward&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;observed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Observed"&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nc"&gt;Delegates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"old: $old, new: $new"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vetoable:&lt;/p&gt;

&lt;p&gt;A vetoable delegate is the opposite of the observable. It offers a hook that executes &lt;strong&gt;before&lt;/strong&gt;. If this hook returns &lt;code&gt;true&lt;/code&gt;, the set of the value executes as expected; if it returns &lt;code&gt;false&lt;/code&gt;, the set doesn't happen.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;vetoable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nc"&gt;Delegates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vetoable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nextBoolean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Here, the set fails randomly 50% of the time. It's not helpful but fun to debug for your colleagues.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#your-own-delegated-property"&gt;
  &lt;/a&gt;
  Your own delegated property
&lt;/h2&gt;

&lt;p&gt;If you want to create your own delegated property, it needs to point to a class that has:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An &lt;code&gt;operator fun &amp;lt;T, U&amp;gt; getValue(thisRef: T, prop: KProperty&amp;lt;*&amp;gt;): U&lt;/code&gt; &lt;em&gt;operator&lt;/em&gt; function for fields whose value is immutable&lt;/li&gt;
&lt;li&gt;An extra &lt;code&gt;operator fun &amp;lt;T, U&amp;gt; getValue(thisRef: T, prop: KProperty&amp;lt;*&amp;gt;, value: U)&lt;/code&gt; if it's mutable&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;T&lt;/code&gt; is the class' type&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;U&lt;/code&gt; the property's&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;thisRef&lt;/code&gt; is the class instance&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;value&lt;/code&gt; is the new value&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;prop&lt;/code&gt; is the property itself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an illustration, let's implement a distributed cache delegated property based on Hazelcast IMDG.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HazelcastDelegate&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IMap&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;lazy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                          &lt;span class="c1"&gt;// 1&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;config&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;instanceName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Instance"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;Hazelcast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getOrCreateHazelcastInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;getMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"values"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thisRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;KProperty&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="c1"&gt;// 2&lt;/span&gt;

  &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thisRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;KProperty&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;                                                  &lt;span class="c1"&gt;// 3&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create a reference to a Hazelcast &lt;code&gt;IMap&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Get the value from the &lt;code&gt;IMap&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Set the value in the &lt;code&gt;IMap&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using the above delegate is straightforward:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;cached&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nc"&gt;HazelcastDelegate&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"cached"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cached&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"New value"&lt;/span&gt;
  &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cached&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The delegate pattern is ubiquitous in the Object-Oriented Programming world. Some languages, such as Kotlin, provides a native implementation.&lt;/p&gt;

&lt;p&gt;But delegation doesn't stop at the class level. Kotlin does provide delegation at the property level. It provides some out-of-the-box delegates, but you can easily create your own.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Original published at &lt;a href="https://blog.frankel.ch/kotlin-delegation/"&gt;A Java Geek&lt;/a&gt; on April 18&lt;sup&gt;th&lt;/sup&gt;, 2021&lt;/em&gt;&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>delegation</category>
      <category>pattern</category>
    </item>
    <item>
      <title>What I've learned using Chakra-Ui so far</title>
      <author>Carlos Rafael Leitão</author>
      <pubDate>Sun, 18 Apr 2021 15:36:34 +0000</pubDate>
      <link>https://dev.to/carlosrafael22/what-i-ve-learned-with-chakra-ui-so-far-4f5e</link>
      <guid>https://dev.to/carlosrafael22/what-i-ve-learned-with-chakra-ui-so-far-4f5e</guid>
      <description>&lt;p&gt;When I finished playing around with building a Design System(or part of it) for a project, before start coding one important question popped up: Which library should I use to style my components?&lt;/p&gt;

&lt;p&gt;Lately, I've been working with styled-components but I wanted to try the trending ones right now: Tailwind CSS or Chakra-Ui.&lt;/p&gt;

&lt;p&gt;After watching some videos and seeing how both looked like in code, I decided to go with Chakra-Ui.&lt;/p&gt;

&lt;p&gt;So, in this article I'm going to share what my experience have been so far with Chakra-Ui after working with it during these last 2 days. Hopefully it can help people having their first steps with the library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-creating-a-custom-theme-is-easy"&gt;
  &lt;/a&gt;
  1. Creating a custom theme is easy
&lt;/h2&gt;

&lt;p&gt;By default, Chakra-Ui already comes with a theme but we can customize it to best fit our design. And that was where I started to play with Chakra since I had created a design system.&lt;/p&gt;

&lt;p&gt;The theme object is where we define the application's color pallete, type scale, font stacks, border radius values and etc. All Chakra components inherit from this default theme.&lt;/p&gt;

&lt;p&gt;From the default theme, we can extend and overide tokens and also add new values to the theme. Customizing the it is as easy as:&lt;/p&gt;

&lt;p&gt;1) Extending it with &lt;code&gt;extendTheme&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;extendTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;customTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;extendTheme&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;lightGray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#C4C4C4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;hover&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#EEEEEE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#9E9E9E&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// I'm just adding one more fontSize than the default ones&lt;/span&gt;
    &lt;span class="na"&gt;fontSizes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;xxs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.625rem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// I'm creating a new space tokens since the default is represented with numbers&lt;/span&gt;
    &lt;span class="na"&gt;space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.25rem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.5rem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1rem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1.5rem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;xl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2rem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;xxl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3rem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;customTheme&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Passing to the &lt;code&gt;ChakraProvider&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;customTheme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ChakraProvider&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;customTheme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ChakraProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Using it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;customTheme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BoxWithText&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;borderRadius&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-creating-variants-of-components-makes-it-easier-to-implement-a-design-system"&gt;
  &lt;/a&gt;
  2. Creating variants of components makes it easier to implement a design system
&lt;/h2&gt;

&lt;p&gt;Besides customizing theme tokens we can also customize component styles.&lt;/p&gt;

&lt;p&gt;Chakra component styles have a specific API that a component style consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;baseStyle&lt;/code&gt;, the default style of a component&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sizes&lt;/code&gt;, represents styles for different sizes of a component&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;variants&lt;/code&gt;, represents styles for different visual variants&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;defaultProps&lt;/code&gt;, optional, to define the default &lt;code&gt;size&lt;/code&gt; or &lt;code&gt;variant&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the docs, what the component style looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ComponentStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// style object for base or default style&lt;/span&gt;
  &lt;span class="na"&gt;baseStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="c1"&gt;// styles for different sizes ("sm", "md", "lg")&lt;/span&gt;
  &lt;span class="na"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="c1"&gt;// styles for different visual variants ("outline", "solid")&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="c1"&gt;// default values for `size` and `variant`&lt;/span&gt;
  &lt;span class="na"&gt;defaultProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the possibility of customizing each component we can create variants for them to match pre-defined styles of a component. For example, in a design system you may have different variations of the typography to show different font sizes, font weights, etc. The same goes with components such as buttons, inputs, etc.&lt;/p&gt;

&lt;p&gt;With variants we can create pre-defined styles for those components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;extendTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;customTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;extendTheme&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4xl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="na"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3xl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;subtitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;medium&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;md&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;medium&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;customTheme&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And use it in our code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Badge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;borderRadius&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;max-content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bodyExtraSmall&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-integrating-with-storybook-is-not-so-smooth-currently"&gt;
  &lt;/a&gt;
  3. Integrating with Storybook is not so smooth currently
&lt;/h2&gt;

&lt;p&gt;One pain point I had with this begining of my journey with Chakra-Ui was trying to use Storybook to show my created components. For my work flow, I always create the components and their corresponding stories to be easier to see the different styles and create a component library.&lt;/p&gt;

&lt;p&gt;However, when I created the stories with my Chakra components and checked the Storybook it did not load any styling I made with Chakra. I was frustrated at first but thanks to an &lt;a href="https://github.com/chakra-ui/chakra-ui/issues/2527"&gt;issue raised&lt;/a&gt; I could get it working.&lt;/p&gt;

&lt;p&gt;To fix that you can:&lt;/p&gt;

&lt;p&gt;1) Modify the &lt;code&gt;main.js&lt;/code&gt; file inside the &lt;code&gt;.storybook&lt;/code&gt; folder to match the &lt;code&gt;webpackFinal&lt;/code&gt; config that Chakra uses:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;_path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;stories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../src/**/*.stories.mdx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../src/**/*.stories.@(js|jsx|ts|tsx)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;addons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@storybook/addon-links&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@storybook/addon-essentials&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@storybook/preset-create-react-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;webpackFinal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@emotion/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;toPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node_modules/@emotion/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emotion-theming&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;toPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node_modules/@emotion/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Wrap the story decorator with the &lt;code&gt;ChakraProvider&lt;/code&gt; in the &lt;code&gt;preview.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChakraProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../src/theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;argTypesRegex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^on[A-Z].*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;withChakra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StoryFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ChakraProvider&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StoryFn&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ChakraProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decorators&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;withChakra&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a temporary workaround that I believe can be resolved any time soon since they are already working on &lt;a href="https://github.com/chakra-ui/chakra-ui/issues/2694"&gt;it&lt;/a&gt; :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-we-cant-create-variants-for-box-but-we-can-use-layer-styles-or-text-styles"&gt;
  &lt;/a&gt;
  4. We can't create variants for Box but we can use Layer Styles or Text Styles
&lt;/h2&gt;

&lt;p&gt;Another "problem" I had was when I tried to create variants for the &lt;code&gt;Box&lt;/code&gt; component. I wanted to create different types of &lt;code&gt;Badges&lt;/code&gt; that I could simply choose the &lt;code&gt;variant&lt;/code&gt; when inserting them on my components. My Badge consisted of a &lt;code&gt;Box&lt;/code&gt; with a &lt;code&gt;Text&lt;/code&gt; inside, the code I've shown in the previous snippets.&lt;/p&gt;

&lt;p&gt;However, after finding this &lt;a href="https://github.com/chakra-ui/chakra-ui/issues/2456"&gt;issue&lt;/a&gt; I understood that by design &lt;code&gt;Box&lt;/code&gt; cannot receive variants in theme since it is a generic component, it represents a &lt;code&gt;div&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To work around that, you could use the &lt;a href="https://next.chakra-ui.com/docs/theming/component-style#usestyleconfig-api"&gt;&lt;code&gt;useStyleConfig&lt;/code&gt;&lt;/a&gt; or use the &lt;code&gt;textStyle&lt;/code&gt; or &lt;code&gt;layerStyle&lt;/code&gt; props, docs &lt;a href="https://chakra-ui.com/docs/features/text-and-layer-styles"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Both props are used to avoid repeating specific text and layer properties and help us keep our components organized and consistent. They allow us to save styling attributes to re-use in other components, passing the corresponding prop to the component.&lt;/p&gt;

&lt;p&gt;Since I only needed to change the background color and the border depending on the type of &lt;code&gt;Badge&lt;/code&gt; I wanted, I used the layer style.&lt;/p&gt;

&lt;p&gt;To solve this:&lt;br&gt;
1) Extend the theme with new &lt;code&gt;layerStyles&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;customTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;extendTheme&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;layerStyles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;defaultBadge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lightGray.default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;outlinedBadge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;transparent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1px solid #000000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;whiteBadge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#FFFFFF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Consume it in the component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Badge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;layerStyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;`outlinedBadge`&lt;/span&gt; &lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;borderRadius&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;max-content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bodyExtraSmall&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;That's it for now. I hope you could get some tips when also starting your journey with Chakra-Ui. If I find more interesting points and learnings to share I may create another article as well :)&lt;/p&gt;

&lt;p&gt;If it was somehow useful, leave it a ❤️ or if you have more to add drop a comment.&lt;br&gt;
Also, I'd love if we connect on &lt;a href="https://twitter.com/CR_Rafael22"&gt;Twitter&lt;/a&gt; as well :)&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 10 Javascript projects for Resume 🚀🚀</title>
      <author>Kiran Sethumadhavan</author>
      <pubDate>Sun, 18 Apr 2021 15:30:15 +0000</pubDate>
      <link>https://dev.to/kiransethu46/top-5-javascript-projects-for-resume-8d6</link>
      <guid>https://dev.to/kiransethu46/top-5-javascript-projects-for-resume-8d6</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Facebook Clone&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B-kxUMHBxNo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Instagram Clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/f7T48W0cwXM"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;li&gt;Whatsapp Clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pUxrDcITyjg"&gt;
&lt;/iframe&gt;
 &lt;/li&gt;
&lt;li&gt;Linkedin Clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QaYts9sPmcY"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;li&gt;Amazon Clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RDV3Z1KCBvo"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;li&gt;Spotify Clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pnkuI8KXW_8"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;li&gt;Netflix Clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1TCw9wO1neA"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;li&gt;Hotstar + Disney Clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4pjpHUN28kk"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;li&gt;Google Drive clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ljuCH6_jrYE"&gt;
&lt;/iframe&gt;
 &lt;/li&gt;
&lt;li&gt;Signal Clone 
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MJzmZ9qmdaE"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Do you want to Kick-start a career in Cyber Security and want to know how hackers hack in real life ☠️☠️&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join Now 200+ Members already Joined &lt;/p&gt;

&lt;p&gt;&lt;a href="https://t.me/infosecbugbounty"&gt;https://t.me/infosecbugbounty&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>devops</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
