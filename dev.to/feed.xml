<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>TO Do List {Day -25}</title>
      <author>Al Siam</author>
      <pubDate>Wed, 08 Sep 2021 16:56:29 +0000</pubDate>
      <link>https://dev.to/alsiamworld/to-do-list-day-25-3mk8</link>
      <guid>https://dev.to/alsiamworld/to-do-list-day-25-3mk8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-25"&gt;
  &lt;/a&gt;
  100daysofcode {Day -25}
&lt;/h1&gt;

&lt;p&gt;A to-do list has been created and the special feature of this to-do list is that it will not remove items after reloading or exiting the browser. Because I used local storage to store inventory items. It hasn't been designed yet but I'll update it soon. Check quickly ..&lt;/p&gt;

&lt;p&gt;Preview: &lt;a href="https://smart-todo-lists.netlify.app"&gt;https://smart-todo-lists.netlify.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code: &lt;a href="https://github.com/alsiamworld/todo-list"&gt;https://github.com/alsiamworld/todo-list&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CWk9Th0m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdmppvvnxqrz25mgrn4b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWk9Th0m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdmppvvnxqrz25mgrn4b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to wait for a function to finish with all its inside expressions, in router in mongoose?</title>
      <author>Rishav Raj</author>
      <pubDate>Wed, 08 Sep 2021 16:28:04 +0000</pubDate>
      <link>https://dev.to/rishavraj221/how-to-wait-for-a-function-to-finish-with-all-its-inside-expressions-in-router-in-mongoose-5213</link>
      <guid>https://dev.to/rishavraj221/how-to-wait-for-a-function-to-finish-with-all-its-inside-expressions-in-router-in-mongoose-5213</guid>
      <description>&lt;div class="ltag__stackexchange--container"&gt;
  &lt;div class="ltag__stackexchange--title-container"&gt;
    
      &lt;div class="ltag__stackexchange--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gn-iPj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt=""&gt;
            &lt;a href="https://stackoverflow.com/questions/69106315/how-to-wait-for-a-function-to-finish-with-all-its-inside-expressions-in-router" rel="noopener noreferrer"&gt;
               How to wait for a function to finish with all its inside expressions, in router in mongoose?
            &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__stackexchange--post-metadata"&gt;
          &lt;span&gt;Sep  8 '21&lt;/span&gt;
            &lt;span&gt;Comments: 1&lt;/span&gt;
            &lt;span&gt;Answers: 0&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/69106315/how-to-wait-for-a-function-to-finish-with-all-its-inside-expressions-in-router" rel="noopener noreferrer"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9mJpuJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt=""&gt;
        &lt;div class="ltag__stackexchange--score-number"&gt;
          0
        &lt;/div&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wif5Zq3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt=""&gt;
      &lt;/a&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--body"&gt;
    
&lt;p&gt;I just want to change the value of a key of all the objects inside an array&lt;/p&gt;
&lt;p&gt;What I want actually -&lt;/p&gt;
&lt;p&gt;The object which I queried from the database is -&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  _id: 61389277fa5c742caf959885
  title: 'What is GRE?',
  forumTab: 'GRE',
  askedAt: 2021-09-08T10:37:43.979Z,
  askedBy: {
    _id: 60f0a6a9b4259f7ef9c49cc8,
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I…&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--btn--container"&gt;
    
      &lt;a href="https://stackoverflow.com/questions/69106315/how-to-wait-for-a-function-to-finish-with-all-its-inside-expressions-in-router" rel="noopener noreferrer"&gt;Open Full Question&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>mongodb</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Will the Real Senior Dev Please Stand Up? (2021 Edition)</title>
      <author>Conor Bronsdon</author>
      <pubDate>Wed, 08 Sep 2021 16:23:35 +0000</pubDate>
      <link>https://dev.to/linearb/will-the-real-senior-dev-please-stand-up-2021-edition-1k4j</link>
      <guid>https://dev.to/linearb/will-the-real-senior-dev-please-stand-up-2021-edition-1k4j</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was written exclusively for devinterrupted.com by Tomasz Waraksa&lt;/em&gt;&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
A year ago I wrote an article for &lt;a href="https://dzone.com/"&gt;Dzone&lt;/a&gt; titled &lt;a href="https://dzone.com/articles/the-rise-and-fall-of-a-senior-developer-8"&gt;The Rise and Fall of a Senior Developer&lt;/a&gt;. Filled with personal anecdotes and stories from my years as a software engineer, the article was a critique of industry practices surrounding the somewhat controversial issue of ranking programmers’ seniority. I realized that I might sound like an elitist dinosaur patronizing the upcoming generation of software engineers. A sort of “back in my day we did things differently” mentality that every generation seems to age into.&lt;/p&gt;

&lt;p&gt;So you can imagine my surprise when the article became not only my most popular submission, but caught the eye of &lt;a href="https://dzone.com/users/4248382/linearb.html"&gt;Dan Lines&lt;/a&gt;, host of the &lt;a href="https://open.spotify.com/show/7icMkauSvLflWCpQrfafIv"&gt;Dev Interrupted podcast&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a follow-up to my article from last year, I’d like to share some of the takeaways from &lt;a href="https://open.spotify.com/episode/4lAKfoOnzMZe7ANVaKW7YS"&gt;my discussion with Dan&lt;/a&gt; and discuss whether or not some of these hiring practices have changed in the past year.&lt;/p&gt;

&lt;p&gt;The rise of remote work is truly changing the landscape of hiring developers and finding talent. But are companies better able to find The True Senior Software Developers in 2021?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/4lAKfoOnzMZe7ANVaKW7YS"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-senior-developer"&gt;
  &lt;/a&gt;
  What is a “senior” developer?
&lt;/h3&gt;

&lt;p&gt;There is no objective measure of a senior developer. Everything is dependent upon the specific work environment a developer finds themselves in. A humorous analogy could be the movie &lt;a href="https://www.imdb.com/title/tt0387808/"&gt;Idiocracy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Seniority is determined very differently in an environment where your superiors have less knowledge and experience than yourself. Likewise, in a highly technical environment filled with experienced individuals, for instance, Tesla’s autonomous car team, you might discover seniority is determined by different standards.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My most pragmatic answer is to say that it really depends on where you are and that hopefully your organization isn’t being run completely incompetently.&lt;/p&gt;

&lt;p&gt;To me a senior is someone who has mastered their domain beyond a majority of their team. That’s probably the safest way for a manager to define how to find a senior developer: quantify the average level of knowledge on their team, and seek somebody who is above that average.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#being-good-at-your-job-doesnt-make-you-senior"&gt;
  &lt;/a&gt;
  Being good at your job doesn’t make you senior
&lt;/h3&gt;

&lt;p&gt;Not everyone hired at a company can be a senior developer but that’s a good thing because you don’t want everybody to be at the high end of the spectrum. You need a team which is properly varied and has people with all levels of skills to fill in all the niches and gaps in your development process.&lt;/p&gt;

&lt;p&gt;Very often, companies just need someone who is good at React or proficient in TypeScript, able to adapt well to a team, understand a project, pick up tasks and implement them efficiently. That’s a good developer — not a senior developer. Those are things that you would expect from any member of a team because that’s what you pay people for.&lt;/p&gt;

&lt;p&gt;I believe that when you’re looking for a senior developer, you should be evaluating well above average. Unfortunately, it seems many companies advertise for senior developers, in the hope that they will somehow filter out the noise and get the most talented people, simply because they made it clear they were searching for senior candidates.&lt;/p&gt;

&lt;p&gt;Of course every developer that shows up to an interview is going to say &lt;strong&gt;“&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;I am a senior developer, a god amongst men.”&lt;/em&gt;&lt;/strong&gt; Why? Because that’s what everyone wants to hear!&lt;/p&gt;

&lt;p&gt;That’s probably a reason why seemingly 90% of advertisements for developer positions are for seniors, while the reality is that on a team there are only a few seniors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#experience-isnt-everything"&gt;
  &lt;/a&gt;
  Experience isn’t everything
&lt;/h3&gt;

&lt;p&gt;Though a year has gone — and you, dear reader, find yourself with another year of experience — that’s not an indication that you have magically become a senior developer. My belief that experience matters but is in no way an indicator of being a senior developer hasn’t changed. Let’s be honest, somebody can be a lazy bum for ten years and by sheer luck navigate through corporate realities and get away with it. As I said before:&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;“10 years of JavaScript is just as good of an indicator of me being a senior programmer as 10 years jail time for armed robbery is an indicator of me being a law professor.”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Years of experience are needed, but I would never use them as the sole indicator of being a senior.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-are-we-today"&gt;
  &lt;/a&gt;
  Where are we today?
&lt;/h3&gt;

&lt;p&gt;Now that we have recapped, where are we today?&lt;/p&gt;

&lt;p&gt;The rise in remote work is changing the hiring landscape and the development process. Companies are beginning to shift more teams to &lt;a href="https://linearb.io/blog/asynchronous-development/"&gt;asynchronous development&lt;/a&gt; or hybrid models. These changes might be well-received by individuals but what will the long term impact be on hiring practices?&lt;/p&gt;

&lt;p&gt;It’s my opinion that companies are way too focused on the hottest frameworks, coolest tricks and fancy techniques, while forgetting the bigger picture, the concepts and principles behind software engineering and languages.&lt;/p&gt;

&lt;p&gt;In the interview process applicants will claim to be Angular senior developers because they have an understanding of how to set up Vuex state store or fetch data from REST service using Axios, but having no idea about observer pattern, how asynchronous JavaScript actually works and are ignorant about prototype inheritance.&lt;/p&gt;

&lt;p&gt;All these fancy things, they come and go very fast. But fundamental knowledge stays with us much longer, and if needed, allows us to learn all these transient frameworks, fads and fashions.&lt;/p&gt;

&lt;p&gt;Companies need to train themselves to filter out the noise. Don’t hire for passing fads. Look to hire developers with strong fundamentals because those are difficult to teach. If a candidate is good at something, even if it’s not the particular framework or language you are looking for, you should not dismiss them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-reallife-example"&gt;
  &lt;/a&gt;
  A real-life example
&lt;/h3&gt;

&lt;p&gt;When I arrived in Ireland, I began applying for jobs and got interviewed by two gentlemen who started grilling me at the whiteboard. At some point during the interview I interrupted and said, “Guys, I think you have the wrong person here. I came to Ireland with a background as a .NET with a specialty in C sharp.” They wanted someone proficient in Python and I had never worked with it professionally.&lt;/p&gt;

&lt;p&gt;What they said next completely blew me away:&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;“We understand you don’t know much Python but we like your way of thinking, we see you are a brilliant C sharp programmer.”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Then they allowed me to take the test assignment for the interview in my preferred language of C sharp. Once I finished, they brought in a colleague from another floor who was a C sharp expert, he looked at my work, gave his approval, and they hired me on the spot.&lt;/p&gt;

&lt;p&gt;After about half a year, I was actually teaching Python to junior developers on the team.&lt;/p&gt;

&lt;p&gt;I was taken by this honest approach to logic and hiring. They recognized an expertise in me even if it wasn’t exactly what they were looking for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#theres-no-replacing-good-fundamentals"&gt;
  &lt;/a&gt;
  There’s no replacing good fundamentals
&lt;/h3&gt;

&lt;p&gt;It’s possible that the past year, and the continued evolution it has brought to remote work and remote dev teams, has caused more companies to jump at the chance to hire senior developers who claim they are experienced just because they put “managed remote dev teams for x years” on their resume.&lt;/p&gt;

&lt;p&gt;But when I watch events like this &lt;a href="https://devinterrupted.com/video/the-new-leaders-of-remote-engineering-panel/"&gt;remote engineering panel&lt;/a&gt;, it is my hope that more people in the industry are adequately identifying &lt;a href="https://dzone.com/articles/the-rise-and-fall-of-a-senior-developer-8"&gt;The True Senior Software Developers &lt;/a&gt;, by avoiding the pitfalls of buzzwords and fad languages to hire exceptional individuals.&lt;/p&gt;

&lt;p&gt;While the fads and fashions of 2021 won’t be around forever, good fundamentals aren’t going anywhere (remote work might not be either.) Stick to hiring principles with an emphasis on expertise, but avoid having so narrow a view as to overlook talented individuals, and remember to always give honest feedback.&lt;/p&gt;

&lt;p&gt;Not everyone is a senior developer, but if we’re honest with ourselves and our abilities, we can all take the steps to get there!&lt;/p&gt;

&lt;p&gt;If you’re interested in this topic, you can find more content like this on my blog at &lt;a href="https://letsdebug.it"&gt;https://letsdebug.it &lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Also consider checking out &lt;a href="https://open.spotify.com/show/7icMkauSvLflWCpQrfafIv?si=2N49oFDHQSWy1__PfdM8Rw&amp;amp;dl_branch=1"&gt;Dev Interrupted&lt;/a&gt;, a weekly podcast featuring a wide array of software engineering leaders and experts, exploring topics from dev team metrics to accelerating delivery.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you haven't already heard&lt;/strong&gt;, Dev Interrupted is partnering with Dzone to host &lt;strong&gt;INTERACT&lt;/strong&gt;: An interactive, community-driven, digital conference on September 30th - by engineering leaders, for engineering leaders. 1 day, 10 speakers, 100s of engineers and engineering leaders, all free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#register-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;Register Now&lt;/a&gt;
&lt;/h1&gt;




&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;If you haven’t already joined the best developer discord out there, WYD?&lt;/p&gt;

&lt;p&gt;Look, I know we talk about it a lot but we love our developer discord community. With over 1600 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No salespeople allowed. &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kVKeQRJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzfiwx02tx41bdz6sri8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kVKeQRJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzfiwx02tx41bdz6sri8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>hiring</category>
      <category>angular</category>
      <category>devops</category>
    </item>
    <item>
      <title>Inglês de Entrevista</title>
      <author>Daniane P. Gomes</author>
      <pubDate>Wed, 08 Sep 2021 16:04:59 +0000</pubDate>
      <link>https://dev.to/danianepg/ingles-de-entrevista-18a9</link>
      <guid>https://dev.to/danianepg/ingles-de-entrevista-18a9</guid>
      <description>&lt;p&gt;&lt;em&gt;Imagem por &lt;a href="https://unsplash.com/@wocintechchat?utm_source=medium&amp;amp;utm_medium=referral"&gt;Cristina&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;"Passar em entrevistas é uma &lt;em&gt;skill&lt;/em&gt;". &lt;/p&gt;

&lt;p&gt;Esse é o mantra de um amigo que tem quase como hobby fazer entrevistas de emprego na TI.&lt;/p&gt;

&lt;p&gt;Falar com pessoas recrutadoras (ou com qualquer outro ser humano desconhecido) sempre me deixou nervosa, ansiosa e transpirante. Ainda mais quando as entrevistas não são feitas no meu idioma nativo. &lt;/p&gt;

&lt;p&gt;Nos últimos anos pude "gastar" o inglês pois me expus a uma boa quantidade de entrevistas de emprego para países como Holanda/Países Baixos, Alemanha, Reino Unido e Portugal (sim, também precisa falar inglês para trabalhar em Portugal).&lt;/p&gt;

&lt;p&gt;E fato é que quanto mais entrevistas fiz, melhor preparada me senti para as próximas, pois notava que as perguntas começavam a se repetir ou eram muito semelhantes.&lt;/p&gt;

&lt;p&gt;Com isso, deixo aqui um compilado de perguntas em inglês comuns nas ditas "screening interviews": o primeiro contato (telefone ou reunião presencial) com pessoas recrutadoras.  Adiciono uma breve explicação do que suponho que é esperado das recrutadoras e exemplos de possíveis respostas. As questões técnicas e específicas de cada tecnologia geralmente são feitas só após este primeiro contato e não serão abordadas (talvez num futuro próximo).&lt;/p&gt;

&lt;p&gt;Dessa forma, é possível pensar nas respostas e "ensaiar" antes para se preparar e diminuir a ansiedade no momento de uma entrevista real.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-talk-about-yourself"&gt;
  &lt;/a&gt;
  1. "Talk about yourself"
&lt;/h3&gt;

&lt;p&gt;"Fale sobre você".&lt;/p&gt;

&lt;p&gt;Faça um resumo sobre a sua carreira, destaque as coisas importantes que já realizou. Não é comum na Europa as pessoas começarem a trabalhar na área antes de terminar a faculdade, então é o momento de deixar claro se foi uma faculdade noturna por exemplo, pois pode gerar confusão para as pessoas recrutadoras o tempo de experiência que você diz ter.&lt;/p&gt;

&lt;p&gt;Exemplo: &lt;em&gt;I've been working as a Software Engineer for the past 18 years, mainly with Java and Spring framework. I took night classes during my time in University so I could work during the day. I'm Java 8 certified and I'm currently learning more about cloud providers such as AWS.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-describe-your-most-recent-projects"&gt;
  &lt;/a&gt;
  2. "Describe your most recent projects"
&lt;/h3&gt;

&lt;p&gt;"Descreva seus projetos mais recentes" &lt;/p&gt;

&lt;p&gt;Descreva versões de linguagens, inclua &lt;em&gt;buzzwords&lt;/em&gt;, fale sobre o volume de dados e acessos da sua aplicação. É uma diferencial trabalhar com tecnologias recentes ou aplicações que suportam grandes cargas de dados ou acessos. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;"I've developed from scratch a cloud-native application using Java, Spring Framework and Angular 11. The application had AWS as a cloud provider and many services such as Lambdas, RDS, ECS, etc, were used"&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-describe-your-dream-job"&gt;
  &lt;/a&gt;
  3. "Describe your dream job"
&lt;/h3&gt;

&lt;p&gt;"Descreva seu emprego dos sonhos".&lt;/p&gt;

&lt;p&gt;O que é importante pra você, as tecnologias que gostaria de trabalhar, o que te entusiasma. A recrutadora vai tentar entender se  a vaga combina com você e tentar te enquadrar em possíveis vagas que possam surgir.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"I would like to work with state of the art technology: cloud native applications, with the programming languages I'm good at. It's important to me that we use the best practices know in the industry: solid pipeline and processes, code reviews, time for research, high test coverage, etc. I also want a good work-life balance and a healthy and diverse environment."&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-how-many-hours-per-week-do-you-spend-coding-how-long-do-you-spend-on-frontendbackend"&gt;
  &lt;/a&gt;
  4. "How many hours per week do you spend coding? How long do you spend on frontend/backend?"
&lt;/h3&gt;

&lt;p&gt;"Quantas horas por semana você passa codificando? Quanto tempo em frontend/backend".&lt;/p&gt;

&lt;p&gt;Essa é uma pergunta bem simples e que não tem "pegadinha", porém na primeira vez que perguntaram eu não sabia exatamente. Precisei "calcular" durante a entrevista, o que me tirou um pouco o foco e me deixou nervosa. É sempre bom ter essas informações de prontidão.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"I work mostly with backend, so roughly 24 hours with Java, 8 with Angular and the other 8 I spend in meetings, code reviews, etc"&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-why-do-you-want-to-live-in-the-netherlandsgermanyuk"&gt;
  &lt;/a&gt;
  5. "Why do you want to live in The Netherlands/Germany/UK?"
&lt;/h3&gt;

&lt;p&gt;"Por que você quer morar nos Países Baixos/Alemanha/Reino Unido?"&lt;/p&gt;

&lt;p&gt;Se você está tentando mudar de país, essa pergunta vai aparecer. As recrutadoras querem entender seus motivos e se você conhece o país para deseja ir. Querem evitar de deslocar você do outro lado do mundo, pagar as despesas e no primeiro mes ter decepções e querer voltar. Pense nos seus motivos - não tem certo ou errado - e expresse-os.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"I **want&lt;/em&gt;* to live in The Netherlands because it's a country that not only accepts but embraces diversity. The Netherlands has a history of tolerance and it seems to be very open-minded both legally and culturally, which matches my own values. And yes, I'm aware of the weather."*&lt;/p&gt;

&lt;p&gt;Perceba aqui que usei &lt;strong&gt;"I want"&lt;/strong&gt; e não &lt;strong&gt;"I would like"&lt;/strong&gt; pra reforçar o efeito de certeza do que quero.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-do-you-have-any-experience-as-a-leader"&gt;
  &lt;/a&gt;
  6. "Do you have any experience as a leader?"
&lt;/h3&gt;

&lt;p&gt;"Você tem alguma experiência como líder?"&lt;/p&gt;

&lt;p&gt;Experiências de liderança geralmente são esperadas em posições mais sênior. Mesmo que você não esteja se canditando a Team/Tech Lead a empresa quer saber se você tem esse potencial e como se sente nessa posição.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"When we have interns I'm responsible for mentoring them and offer them the support needed to perform their activities."&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-what-is-your-salary-expectation"&gt;
  &lt;/a&gt;
  7. "What is your salary expectation?"
&lt;/h3&gt;

&lt;p&gt;"Qual sua expectativa salarial?"&lt;/p&gt;

&lt;p&gt;Acredito que a intenção é saber se a pessoa está informada sobre os valores pagos pelo mercado e verificar se as expectativas estão de acordo com o que a empresa pode pagar. É claro que todo mundo quer pedir 400k por ano pra trabalhar remoto mais benefícios, mas é importante pedir valores de acordo com a experiência e faixa salarial de mercado para ser levade a sério. O &lt;a href="https://www.glassdoor.nl/Salaries/index.htm?countryRedirect=true"&gt;Glassdor&lt;/a&gt; ajuda ter uma boa ideia sobre o assunto.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"I've seen the market value is around x to y. With my experience I believe it's fair to ask for y"&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-tell-me-about-the-weaknesses-you-think-you-have-in-your-cv"&gt;
  &lt;/a&gt;
  8. "Tell me about the weaknesses you think you have in your CV"
&lt;/h3&gt;

&lt;p&gt;"Me fale sobre os pontos fracos que você acha que tem no seu currículo"&lt;/p&gt;

&lt;p&gt;Não precisa maquiar os defeitos. Pode falar das inseguranças! Se a empresa não for uma usina nuclear de tóxica, eles vão entender que procuram profissionais com potencial e não a perfeição na terra.&lt;/p&gt;

&lt;p&gt;"I'm often very insecure about my general knowledge. I have many years of experience and yet there are things I don't know because I've never worked with. I would like to be more comfortable with NoSQL and more programming languages other than Java." .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-how-do-you-keep-yourself-up-to-date"&gt;
  &lt;/a&gt;
  9. "How do you keep yourself up to date?"
&lt;/h3&gt;

&lt;p&gt;"Como você se mantém atualizado"&lt;/p&gt;

&lt;p&gt;É hora de fazer propaganda daqueles cursos online que você posta na sua timeline do Linkedin e mostrar que a busca por conhecimento não parou depois do "hello world".&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"I try to attend every Java meetup, I just complete another AWS training and I'm preparing for the xyz certification".&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-why-are-you-a-good-fit-for-this-position"&gt;
  &lt;/a&gt;
  10. "Why are you a good fit for this position?"
&lt;/h3&gt;

&lt;p&gt;"Por que você acha que é adequado para essa vaga?"&lt;/p&gt;

&lt;p&gt;Não é o momento de ser humilde! Também não é o momento de ser mentiroso. Pense no que você é bom e deixe a recrutadora saber.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"I have good knowledge and experience, so I can deliver the tasks fast. I'm not an asshole, so the team will enjoy working with me. I'm creative, so I can bring different perspectives to your business. And even after all these years I still have the passion. Give me a healthy, fair environment and room to learn that I'm sure we will be a good match."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Essas são as perguntas que pude lembrar. É importante deixar claro que as respostas são baseadas em exemplos reais e formuladas da forma que &lt;strong&gt;eu&lt;/strong&gt; acredito ser a melhor para comunicar meu trabalho. Não se trata de uma receita de sucesso ou cagação de regra: são apenas exemplos para inspirar o exercício de reflexão nas duas pessoas que vão me ler (e pra mim também, que vou voltar aqui quando estiver buscando novo emprego). &lt;/p&gt;

&lt;p&gt;:)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>⚡ Must read Tech news/tools of the day - Digest #8</title>
      <author>Hackertab 🖥️</author>
      <pubDate>Wed, 08 Sep 2021 15:36:51 +0000</pubDate>
      <link>https://dev.to/hackertab/must-read-tech-news-tools-of-the-day-digest-8-p07</link>
      <guid>https://dev.to/hackertab/must-read-tech-news-tools-of-the-day-digest-8-p07</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJyfm8Xt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kVzXltq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJyfm8Xt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kVzXltq.png" alt="articleImg"&gt;&lt;/a&gt;Each day we handpick the best web content across different websites eg: Hackernews, Github, Reddit... to help you stay updated with the hottest trends!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#level-up-your-skills-with-these-github-repositories"&gt;
  &lt;/a&gt;
  Level up your 🚀 skills with these Github repositories:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bHVT2yX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.prodapt.com/wp-content/uploads/github.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bHVT2yX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.prodapt.com/wp-content/uploads/github.png" alt="Github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  📙 &lt;a href="https://github.com/TheAlgorithms/Python"&gt;Python&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 TheAlgorithms | ⭐ +117,148 stars All Algorithms implemented in Python&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mlforbeginners"&gt;
  &lt;/a&gt;
  📙 &lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;ML-For-Beginners&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 microsoft | ⭐ +17,717 stars 12 weeks, 25 lessons, 50 quizzes, classic Machine Learning for all&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#age"&gt;
  &lt;/a&gt;
  📙 &lt;a href="https://github.com/FiloSottile/age"&gt;age&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 FiloSottile | ⭐ +7,808 stars A simple, modern and secure encryption tool (and Go library) with small explicit keys, no config options, and UNIX-style composability.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hottest-devto-posts-"&gt;
  &lt;/a&gt;
  🎉 🔥 Hottest Devto posts :
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#single-page-application-quiz-in-react"&gt;
  &lt;/a&gt;
  📝 &lt;a href="https://dev.to/godspowercuche/single-page-application-quiz-in-react-3k9p-temp-slug-5390722"&gt;Single Page Application Quiz in React&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 ShubhamTiwari909 | 👍 +31 reactions &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uYViZZ9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WzZNbWxW--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fonn8jeaktu9i8idei2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uYViZZ9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WzZNbWxW--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fonn8jeaktu9i8idei2i.png" alt=""&gt;&lt;/a&gt;Hello Guys Today i am going to show you how to create a single page application quiz in react. Hope...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-web-developer-interview-questions"&gt;
  &lt;/a&gt;
  📝 &lt;a href="https://dev.to/godspowercuche/15-web-developer-interview-questions-5111-temp-slug-5884585"&gt;15 web developer interview questions...&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 YusufAdel | 👍 +30 reactions &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PrHniaMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.hackertab.dev/null" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PrHniaMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.hackertab.dev/null" alt=""&gt;&lt;/a&gt;Advanced Interview Questions The following will cover the senior web developer interview...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tell-me-about-a-time-you-had-to-learn-something-quickly-facebook-behavioral-interview-jedi-series"&gt;
  &lt;/a&gt;
  📝 &lt;a href="https://dev.to/godspowercuche/tell-me-about-a-time-you-had-to-learn-something-quickly-facebook-behavioral-interview-jedi-series-1klb-temp-slug-6810045"&gt;✅ Tell Me About A Time You Had To Learn Something Quickly | Facebook Behavioral Interview (Jedi) Series 🔥&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 The Interview Sage | 👍 +28 reactions &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ELhxieLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--g3AxC5vM--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j90znnz9cecnttoh0nki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ELhxieLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--g3AxC5vM--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j90znnz9cecnttoh0nki.png" alt=""&gt;&lt;/a&gt;Before we discuss this question, let us recap what the Behavioral Interview Round at Facebook...&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#keep-an-eye-on-these-cool-products-too"&gt;
  &lt;/a&gt;
  👀 Keep an eye on these cool products too:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#leaksid"&gt;
  &lt;/a&gt;
  🔧 &lt;a href="https://www.producthunt.com/posts/leaksid?utm_campaign=producthunt-api&amp;amp;utm_medium=api-v2&amp;amp;utm_source=Application%3A+Hackertab+%28ID%3A+42881%29"&gt;LeaksID&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;🔺 +173 | 💬 +156 Enrich private docs with dynamic invisible anti-leak marks &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SIaG-w4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ph-files.imgix.net/a2e440cb-6de5-4c91-be10-961e2e5cbe62.gif%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SIaG-w4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ph-files.imgix.net/a2e440cb-6de5-4c91-be10-961e2e5cbe62.gif%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" alt="LeaksID"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flomo"&gt;
  &lt;/a&gt;
  🔧 &lt;a href="https://www.producthunt.com/posts/flomo-5b7b6b01-32ba-43f8-a5df-59f07f5a6ae8?utm_campaign=producthunt-api&amp;amp;utm_medium=api-v2&amp;amp;utm_source=Application%3A+Hackertab+%28ID%3A+42881%29"&gt;flomo&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;🔺 +899 | 💬 +105 The minimal memo taking tool to empower better thinking &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kpzG3CwW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/67f68d5f-3e5f-41fa-bbfe-86bc151b2ebf.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kpzG3CwW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/67f68d5f-3e5f-41fa-bbfe-86bc151b2ebf.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" alt="flomo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meisternote"&gt;
  &lt;/a&gt;
  🔧 &lt;a href="https://www.producthunt.com/posts/meisternote?utm_campaign=producthunt-api&amp;amp;utm_medium=api-v2&amp;amp;utm_source=Application%3A+Hackertab+%28ID%3A+42881%29"&gt;MeisterNote&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;🔺 +150 | 💬 +67 Stunning online documentation - write, organize, collaborate &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7fI_Lxjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ph-files.imgix.net/75ea9d7b-d3fd-4373-882f-52756b97c01b.gif%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7fI_Lxjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ph-files.imgix.net/75ea9d7b-d3fd-4373-882f-52756b97c01b.gif%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" alt="MeisterNote"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;🙌 Wrap Up! That was all for this week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-hackertab-on-twitter-for-more-tips-hackertabdev"&gt;
  &lt;/a&gt;
  Follow Hackertab on Twitter for more tips: @hackertabdev
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L6HrjVwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sYGs3ep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L6HrjVwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sYGs3ep.png" alt="Hackertab"&gt;&lt;/a&gt;&lt;a href="https://hackertab.dev"&gt;Hackertab&lt;/a&gt; turns your New Tab page into a geeky one that keeps you as a developer updated with the best tools, news, jobs and events.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>hackertab</category>
    </item>
    <item>
      <title>Azure Nibble - Hosts File Generator using KQL for App Services</title>
      <author>Marcel.L</author>
      <pubDate>Wed, 08 Sep 2021 15:29:44 +0000</pubDate>
      <link>https://dev.to/pwd9000/azure-nibble-hosts-file-generator-using-kql-for-app-services-p5i</link>
      <guid>https://dev.to/pwd9000/azure-nibble-hosts-file-generator-using-kql-for-app-services-p5i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#azure-resource-graph"&gt;
  &lt;/a&gt;
  Azure Resource Graph
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-gb/azure/governance/resource-graph/overview"&gt;Azure Resource Graph&lt;/a&gt; allows us to quickly and efficiently query across Azure subscriptions. Analyse cloud inventory using complex queries launched programmatically or from the Azure portal. The query language used is known as &lt;strong&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query"&gt;Kusto Query Lanuage (KQL)&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hosts-file-generator"&gt;
  &lt;/a&gt;
  Hosts File Generator
&lt;/h2&gt;

&lt;p&gt;Recently I was looking into a mechanism to generate a hosts file to add a very large number of Azure App services that have been private endpoint enabled for both the default as well as the scm hosts of each app, so that these apps could be tested without/outside of DNS, by using a hosts file instead. This has led me to write a short KQL query that will do just this. I will share this query with you today.  &lt;/p&gt;

&lt;p&gt;In the Azure portal search for &lt;strong&gt;Resource Graph Explorer&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cm9Jyl_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/rge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cm9Jyl_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/rge.png" alt="rge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the query editor add the following lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Resources
| where type =~ "microsoft.web/sites"
| mvexpand pe = properties.privateEndpointConnections
| extend peip = tostring(pe.properties.ipAddresses[0])
| mvexpand hosts = properties.hostNameSslStates
| project peip, hosts=tostring(hosts.name)
| order by peip asc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can also select the scope at which you want to run the query:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NQ21nYf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/scope.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQ21nYf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/scope.png" alt="scope"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then select &lt;strong&gt;Run query&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QI1m192i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/run.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QI1m192i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/run.png" alt="run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is it, you can now export the results to a CSV and copy the results over into a hosts txt file. In addition you can also save the query for future re-use to run it again if any private IP addresses of your App services private endpoints change to get an updated hosts file formatted result.  &lt;/p&gt;

&lt;p&gt;You can also select whether you want to save the query as a &lt;strong&gt;private query&lt;/strong&gt; or a &lt;strong&gt;shared query&lt;/strong&gt;. The later allows you to save the query as an object in a resource group that others can also access and run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--krboALJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/save.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--krboALJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/save.png" alt="save"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post and have learned something new. You can also find the query code sample for this tutorial on my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/code"&gt;Github&lt;/a&gt; page. ❤️&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;


&lt;div class="ltag__user ltag__user__id__620034"&gt;
  
    .ltag__user__id__620034 .follow-action-button {
      background-color: #0cbb58 !important;
      color: #000000 !important;
      border-color: #0cbb58 !important;
    }
  
    &lt;a href="/pwd9000" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Amb4rEJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L_SDLOmq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620034/93be2c72-3a13-478e-8af1-a4bedc1b2331.jpeg" alt="pwd9000 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/pwd9000"&gt;Marcel.L&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/pwd9000"&gt;Cloud Solutions Architect and DevOps enthusiast.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>tutorial</category>
      <category>azure</category>
      <category>productivity</category>
      <category>learning</category>
    </item>
    <item>
      <title>Creating an omnibar with Autocomplete.js</title>
      <author>Bryan Robinson</author>
      <pubDate>Wed, 08 Sep 2021 15:17:55 +0000</pubDate>
      <link>https://dev.to/algolia/creating-an-omnibar-with-autocomplete-3jgh</link>
      <guid>https://dev.to/algolia/creating-an-omnibar-with-autocomplete-3jgh</guid>
      <description>&lt;p&gt;When is a search bar not a search bar? When it's an "omnibar" built with Autocomplete!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ghy7a78JGCQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In her &lt;a href="https://www.learnwithjason.dev/javascript-autocomplete"&gt;episode of Learn with Jason&lt;/a&gt;, &lt;a href="https://twitter.com/frontstuff_io"&gt;Sarah Dayan&lt;/a&gt; mentioned the idea of using Autocomplete to create an experience brimming with shortcuts and power-user affordances.&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll walk through setting up &lt;a href="https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-js/autocomplete/"&gt;Autocomplete&lt;/a&gt; to fire interactions with JavaScript. Specifically, we'll build an omnibar to toggle light and dark mode for our website. An omnibar is a search field that has both search and actions that can be taken. A strong example of this is the Chrome or Firefox search and URL bar.&lt;/p&gt;

&lt;p&gt;In the search field, a user will be able to type in &lt;code&gt;/&lt;/code&gt; commands. These commands will be tied to specific JavaScript methods to trigger. We'll also make the Autocomplete results stateful. When the app is in light mode, the light mode option will show an "enabled" flag. When dark mode is enabled, the dark mode option will show the flag.&lt;/p&gt;

&lt;p&gt;Give it a try yourself!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/autocomplete-actions-finished-eh7xw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-autocomplete-for-use-with-react"&gt;
  &lt;/a&gt;
  Configuring Autocomplete for use with React
&lt;/h2&gt;

&lt;p&gt;At its core, Autocomplete is a vanilla JavaScript library. Let's make it a bit more reusable by mounting it as a React component for use in any React-based framework or site.&lt;/p&gt;

&lt;p&gt;We'll start with CodeSandbox's basic React sandbox. &lt;a href="https://alg.li/omnibar-starter"&gt;Fork this sandbox&lt;/a&gt; to get the exact starting point with all packages installed for us.&lt;/p&gt;

&lt;p&gt;To create our component, we'll start by adding a new file named &lt;code&gt;Autocomplete.js&lt;/code&gt;. This file will house all the initialization code for the Autocomplete library and export the component for use in our application.&lt;/p&gt;

&lt;p&gt;At the top of the new file, import the necessary elements from React, React-dom, and the Autocomplete libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;autocomplete&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@algolia/autocomplete-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once imported, we need to export a new functional React component. We'll start with the basic boilerplate for creating a new mounted component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Autocomplete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;containerRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;containerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="c1"&gt;// Space to initialize autocomplete on the newly created container&lt;/span&gt;


    &lt;span class="c1"&gt;// Destroy the search instance in cleanup  &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
      &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
    &lt;span class="p"&gt;};&lt;/span&gt;  

  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;containerRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code will take care of the basic initialization and breakdown of the component on mount and unmount.&lt;/p&gt;

&lt;p&gt;Inside the function, it's time to initialize the Autocomplete instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates an Autcomplete component from the JS library&lt;/span&gt;
&lt;span class="c1"&gt;// https://www.algolia.com/doc/ui-libraries/autocomplete/guides/using-react/&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Autocomplete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;containerRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;containerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Initialize autocomplete on the newly created container&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;autocomplete&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;containerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Fragment&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="c1"&gt;// Autocomplete render()&lt;/span&gt;
      &lt;span class="c1"&gt;// https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-js/autocomplete/#param-render&lt;/span&gt;
      &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// react-dom render&lt;/span&gt;
        &lt;span class="c1"&gt;// https://reactjs.org/docs/react-dom.html#render&lt;/span&gt;
        &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// Destroy the search instance in cleanup&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;containerRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;autocomplete&lt;/code&gt; method accepts an object of options. We set the &lt;code&gt;container&lt;/code&gt; property to be the element created by this function. By specifying the &lt;code&gt;renderer&lt;/code&gt; function, we can use React's &lt;code&gt;createElement&lt;/code&gt; method and &lt;code&gt;Fragment&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Then, we need to provide Autocomplete with a &lt;code&gt;render&lt;/code&gt; function. This function will accept an object of components to render (&lt;code&gt;children&lt;/code&gt;), and the element to attach the instance (&lt;code&gt;root&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;We can then use any method to render these items. In our case, we'll use &lt;code&gt;react-dom&lt;/code&gt;'s &lt;code&gt;render()&lt;/code&gt; method and pass it those same elements. Finally, we want to pass the &lt;code&gt;autocomplete&lt;/code&gt; method any additional props added to our component when we use it. This will allow for on-the-fly customizations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-raw-ltautocomplete-gt-endraw-component"&gt;
  &lt;/a&gt;
  Using the &lt;code&gt;&amp;lt;Autocomplete /&amp;gt;&lt;/code&gt; component
&lt;/h2&gt;

&lt;p&gt;Moving to the &lt;code&gt;App.js&lt;/code&gt; file, we can import our Autocomplete component (along with some default styling).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Styles&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@algolia/autocomplete-theme-classic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="c1"&gt;// Import algolia and autocomplete needs&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Autocomplete&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Autocomplete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here, we're ready to put an Autocomplete field on the page. Inside the &lt;code&gt;App()&lt;/code&gt; function's JSX return value, we can put the &lt;code&gt;&amp;lt;Autocomplete /&amp;gt;&lt;/code&gt; component anywhere that makes sense for the UI. I suggest right after the main text of the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
           &lt;span class="nx"&gt;Run&lt;/span&gt; &lt;span class="nx"&gt;JS&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-js/autocomplete/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
             &lt;span class="nx"&gt;Autocomplete&lt;/span&gt;  
           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-base&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
           &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;based&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;amazing&lt;/span&gt; &lt;span class="nx"&gt;idea&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://twitter.com/frontstuff_io&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sarah&lt;/span&gt; &lt;span class="nx"&gt;Dayan&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt; in her &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;           &lt;span class="nx"&gt;appearance&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.learnwithjason.dev/javascript-autocomplete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
             &lt;span class="nx"&gt;Learn&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;Jason&lt;/span&gt;  
           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;           &lt;span class="p"&gt;.&lt;/span&gt;  
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
           &lt;span class="nx"&gt;Use&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Autocomplete&lt;/span&gt; &lt;span class="nx"&gt;box&lt;/span&gt; &lt;span class="nx"&gt;below&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="nx"&gt;dark&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;perform&lt;/span&gt; &lt;span class="nx"&gt;other&lt;/span&gt;  
           &lt;span class="nx"&gt;JS&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;driven&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Autocomplete&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* ... the rest of the function ... */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Autocomplete component can accept any prop that the &lt;code&gt;autocomplete-js&lt;/code&gt; library can accept as an option. To start, let's add placeholder text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Autocomplete&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Try /dark"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A search field should appear in our app with the placeholder text set. This field doesn't do anything yet. Let's add some data to complete.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-an-raw-actions-endraw-source-to-the-autocomplete-component"&gt;
  &lt;/a&gt;
  Adding an &lt;code&gt;actions&lt;/code&gt; source to the Autocomplete component
&lt;/h2&gt;

&lt;p&gt;The Autocomplete library is capable of creating autocomplete functionality against multiple sources. In our case, we'll only have one static source, but any external data – including Algolia indices – can be used to populate this functionality.&lt;/p&gt;

&lt;p&gt;To add a source, we'll use the &lt;code&gt;getSources&lt;/code&gt; prop and provide a function that accepts the &lt;code&gt;query&lt;/code&gt; option. This query is what a user is actively typing into the input. We can use this to check against the items in our data.&lt;/p&gt;

&lt;p&gt;A source is an object in the getSources returned array. The basic elements we need for the source are a &lt;code&gt;sourceId&lt;/code&gt; string, a &lt;code&gt;template&lt;/code&gt; object for rendering, and a &lt;code&gt;getItems()&lt;/code&gt; function that returns the data. For now, we'll just return a static array with a label attribute. This is enough to populate our autocomplete. Let's also add &lt;code&gt;openOnFocus&lt;/code&gt; as a prop to automatically list our items when a user focuses the field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Autocomplete&lt;/span&gt;  
  &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Try /dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;openOnFocus&lt;/span&gt;   
  &lt;span class="nx"&gt;getSources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{({&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  
    &lt;span class="p"&gt;{&lt;/span&gt;  
      &lt;span class="na"&gt;sourceId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
      &lt;span class="na"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;  
      &lt;span class="p"&gt;},&lt;/span&gt;  
      &lt;span class="nx"&gt;getItems&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  
          &lt;span class="p"&gt;{&lt;/span&gt;  
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;  
          &lt;span class="p"&gt;},&lt;/span&gt;  
          &lt;span class="p"&gt;{&lt;/span&gt;  
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;  
          &lt;span class="p"&gt;}&lt;/span&gt;  
        &lt;span class="p"&gt;]&lt;/span&gt;  
      &lt;span class="p"&gt;}&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;  
  &lt;span class="p"&gt;]}&lt;/span&gt;  
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have items populating our field, but we're not filtering items as we type. Let's fix that with a couple helper functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filtering-and-highlighting-autocomplete-items"&gt;
  &lt;/a&gt;
  Filtering and highlighting Autocomplete items
&lt;/h2&gt;

&lt;p&gt;When using an Algolia index, we can use some helper functions to manage filtering and highlighting, but we're not using an Algolia index. In our use case, we want to keep this fully in the browser. To do this, we need a couple helper functions to properly filter and highlight our options.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filtering-autocomplete-items-with-javascript-regexp"&gt;
  &lt;/a&gt;
  Filtering Autocomplete items with JavaScript RegExp()
&lt;/h3&gt;

&lt;p&gt;JavaScript offers the ability to filter an array based on a regular expression test. To do that, we need to create a pattern to test against for any combination the user can throw at us. Let's create a helper function based on the query and use that in a JS &lt;code&gt;.filter()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;App.js&lt;/code&gt; outside the export, we'll create the new helper function &lt;code&gt;getQueryPattern()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getQueryPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="s2"&gt;`(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;  
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Trim leading and ending whitespace &lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// convert to lower case&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Split on spaces for multiple commands &lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`^&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Map over the resulting array and create Regex_  &lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;|&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Join those expressions with an OR | &lt;/span&gt;
    &lt;span class="nx"&gt;flags&lt;/span&gt;  
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the helper function is created, we'll create the pattern in the &lt;code&gt;getItems()&lt;/code&gt; method before we return the array of items.&lt;/p&gt;

&lt;p&gt;With the pattern saved, we can test our array against it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Autocomplete&lt;/span&gt;
  &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Try /dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;openOnFocus&lt;/span&gt;
  &lt;span class="nx"&gt;getSources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{({&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sourceId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;getItems&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getQueryPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// tests the label against the pattern&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when we type &lt;code&gt;/dark&lt;/code&gt; into the field, only the &lt;code&gt;/dark&lt;/code&gt; option. We haven't given the user any indication of why that works. Let's add a small highlighting function to showcase the letters typed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#highlighting-the-string-being-typed-in-results"&gt;
  &lt;/a&gt;
  Highlighting the string being typed in results
&lt;/h3&gt;

&lt;p&gt;In order to highlight the typed text, we need to take the query text and the pattern we created in the last step and generate a new string that adds additional markdown around the typed text.&lt;/p&gt;

&lt;p&gt;Right after the &lt;code&gt;getQueryPattern&lt;/code&gt; helper function, let's create a new &lt;code&gt;highlight&lt;/code&gt; helper function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;highlight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// Split the text based on the pattern  &lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Map over the split text and test against the pattern  &lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// If the pattern matches the text, wrap the text in &amp;lt;mark&amp;gt;  &lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/mark&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// return the token back to the array  &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This helper function takes the text to test and the pattern to check it against and returns a string with additional markup.&lt;/p&gt;

&lt;p&gt;We start by splitting the text based on the pattern. This will give us an array with two parts – matched and unmatched. As we map over this new array, we can check the text against the pattern and if it matches, wrap that specific item in a new piece of markup. If it doesn't, return the unmodified text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Autocomplete&lt;/span&gt;
  &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Try /dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;openOnFocus&lt;/span&gt;
  &lt;span class="nx"&gt;getSources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{({&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sourceId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

      &lt;span class="na"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highlighted&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;

      &lt;span class="nx"&gt;getItems&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getQueryPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// tests the label against the pattern&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;highlighted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;highlight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}));&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that helper function, we can now map over all the filtered items. We'll take the action item and return back an object with all of its initial properties, but a new &lt;code&gt;highlighted&lt;/code&gt; property that contains our highlighted text. This is built from the action's &lt;code&gt;label&lt;/code&gt; property and the pattern we defined earlier. &lt;/p&gt;

&lt;p&gt;Now instead of using the &lt;code&gt;action.label&lt;/code&gt; in our template, we'll change it to use the new &lt;code&gt;highlight&lt;/code&gt; property. When &lt;code&gt;/dark&lt;/code&gt; is typed into the field, the item will have properly highlighted text.&lt;/p&gt;

&lt;p&gt;The filtering UI is complete, but when we select an item, nothing happens. Let's fix that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#firing-a-javascript-function-in-autocomplete-with-raw-onselect-endraw-"&gt;
  &lt;/a&gt;
  Firing a JavaScript function in Autocomplete with &lt;code&gt;onSelect&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Each source in the &lt;code&gt;getSources&lt;/code&gt; array can have its own &lt;code&gt;onSelect&lt;/code&gt; method. This method defines the functionality for when a user selects an option – via keyboard or click.&lt;/p&gt;

&lt;p&gt;Let's start by making a global select function to log the item's data and then reset the query to a blank string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getSources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{({&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;sourceId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highlighted&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// Run this code when item is selected  &lt;/span&gt;
   &lt;span class="nx"&gt;onSelect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// item is the full item data&lt;/span&gt;
      &lt;span class="c1"&gt;// setQuery is a hook to set the query state&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;setQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For one action, we could define the JavaScript in this method, but to make this reusable for any action in the future, let's define the method on the item's data instead.&lt;/p&gt;

&lt;p&gt;To do this, we'll define a method named &lt;code&gt;onSelect&lt;/code&gt; for each item. This method can handle whatever functionality you need. In this case, we'll create a very simple dark and light mode by adding the class &lt;code&gt;dark&lt;/code&gt; to the body to enable dark mode and remove it to enable light mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;onSelect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Light Mode enabled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;onSelect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dark Mode enabled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, back in the main &lt;code&gt;onSelect&lt;/code&gt; method, instead of running &lt;code&gt;console.log(item)&lt;/code&gt;, we can run &lt;code&gt;item.onSelect()&lt;/code&gt;. This will fire the functions we just created.&lt;/p&gt;

&lt;p&gt;We now have functioning actions! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enhancing-the-omnibar-experience"&gt;
  &lt;/a&gt;
  Enhancing the omnibar experience
&lt;/h2&gt;

&lt;p&gt;With working actions, we can focus a bit on crafting a strong user experience for our omnibar. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatic-highlight-and-select"&gt;
  &lt;/a&gt;
  Automatic highlight and select
&lt;/h3&gt;

&lt;p&gt;First, let's have Autocomplete automatically highlight the first item in the list. This will allow a user to select an action by just hitting enter.&lt;/p&gt;

&lt;p&gt;To add this feature, we need to pass a new prop to the &lt;code&gt;&amp;lt;Autocomplete /&amp;gt;&lt;/code&gt; component. By passing the prop &lt;code&gt;defaultActiveItemId&lt;/code&gt; a value of &lt;code&gt;"0"&lt;/code&gt;, we can have the first item in the list be active. Any active item can be selected by hitting enter. This makes for a solid keyboard experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-more-robust-ui-with-a-new-component"&gt;
  &lt;/a&gt;
  Creating a more robust UI with a new component
&lt;/h3&gt;

&lt;p&gt;Let's abstract the &lt;code&gt;template&lt;/code&gt; to use a separate component called &lt;code&gt;Action&lt;/code&gt;. We can build this in a separate file or create it in &lt;code&gt;App.js&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;To use the component, we'll pass it a &lt;code&gt;hit&lt;/code&gt; prop that will contain our item data. This component will also use specific class names that match specific items in the classic theme we imported at the beginning of the tutorial.&lt;/p&gt;

&lt;p&gt;Inside the markup, we provide the highlighted text and two new items: &lt;code&gt;hit.icon&lt;/code&gt; and an SVG representation of the return key. This adds some customized iconography for our actions and an indication to users that they can use the enter key to select an item.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;hit&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Component to display the items  &lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemWrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemContent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemIcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemContentBody&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemContentTitle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highlighted&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemActions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemActionButton aa-DesktopOnly aa-ActiveOnly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 24 24&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currentColor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M18.984 6.984h2.016v6h-15.188l3.609 3.609-1.406 1.406-6-6 6-6 1.406 1.406-3.609 3.609h13.172v-4.031z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the component is created, we need to change our &lt;code&gt;item&lt;/code&gt; template to use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Action&lt;/span&gt; &lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also need to add an icon property to each of our action items. In this example, we have some hand-crafted SVGs, but any icon library will work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 24 24&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currentColor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
          &lt;span class="nx"&gt;strokeLinecap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;strokeLinejoin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;strokeWidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;onSelect&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;setContext&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 24 24&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currentColor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
          &lt;span class="nx"&gt;strokeLinecap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;strokeLinejoin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;strokeWidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;onSelect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Light Mode enabled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is starting to look really nice. It's a bit odd that the site is in light mode, but the light mode option provides no indication of that. Let's add some context for our users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-enabled-state-with-raw-setcontext-endraw-"&gt;
  &lt;/a&gt;
  Creating an enabled state with &lt;code&gt;setContext&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Autocomplete gives us access to state. Let's use that to create an &lt;code&gt;enabled&lt;/code&gt; state and set that state when our actions are fired.&lt;/p&gt;

&lt;p&gt;Let's start by adding a new property to each action named &lt;code&gt;enabled&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//...&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//...&lt;/span&gt;
  &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This property will check the Autocomplete's state object for a context item labeled &lt;code&gt;dark&lt;/code&gt;. If &lt;code&gt;dark&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the dark action will have a true &lt;code&gt;enabled&lt;/code&gt; state, if &lt;code&gt;false&lt;/code&gt;, light will be true.&lt;/p&gt;

&lt;p&gt;To have that context, we need to set the context of the app during our &lt;code&gt;onSelect&lt;/code&gt; functions. We can pass the &lt;code&gt;setContext&lt;/code&gt; method into our &lt;code&gt;onSelect&lt;/code&gt; functions and use that to set &lt;code&gt;dark&lt;/code&gt; to true or false.&lt;/p&gt;

&lt;p&gt;We need to pass the &lt;code&gt;setContext&lt;/code&gt; method in the options object for our sources method. Start by changing &lt;code&gt;getSources={({ query })}&lt;/code&gt; to &lt;code&gt;getSources={({ query, setContext })}&lt;/code&gt;. Then we can use &lt;code&gt;setContext&lt;/code&gt; in our &lt;code&gt;onSelect&lt;/code&gt; functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;onSelect&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;setContext&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setContext&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all that's left is to use the &lt;code&gt;enabled&lt;/code&gt; boolean value in our component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;hit&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Component to display the items&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemWrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemContent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemIcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemContentBody&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemContentTitle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highlighted&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemContentTitleNote&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Enabled&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/code&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemActions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemActionButton aa-DesktopOnly aa-ActiveOnly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 24 24&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currentColor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M18.984 6.984h2.016v6h-15.188l3.609 3.609-1.406 1.406-6-6 6-6 1.406 1.406-3.609 3.609h13.172v-4.031z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with that, our omnibar is stateful. This is a relatively simple example of dark mode. To build it out more, you could add and set the context of the omnibar from the overall state of your application or based on information in a user's localStorage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we built out Autocomplete to be more than search, but you can also add regular search functionality with a different source object with its own set of templates. You can also extend the actions to match any potential actions your application has. &lt;/p&gt;

&lt;p&gt;Some ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Adding to a todo list or saved list&lt;/li&gt;
&lt;li&gt;  Newsletter sign up&lt;/li&gt;
&lt;li&gt;  User profile updates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'd love to see what you come up with. Fork &lt;a href="https://alg.li/omnibar-starter"&gt;the starter sandbox&lt;/a&gt; (or &lt;a href="https://codesandbox.io/s/autocomplete-actions-finished-eh7xw"&gt;this finished one&lt;/a&gt;), create something new, and &lt;a href="https://twitter.com/algolia"&gt;share it with us on Twitter&lt;/a&gt; or in the comments below.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>ux</category>
      <category>tutorial</category>
      <category>react</category>
    </item>
    <item>
      <title>I Finished a Coding Bootcamp: What Was It Like?</title>
      <author>Adriana DiPietro</author>
      <pubDate>Wed, 08 Sep 2021 15:16:27 +0000</pubDate>
      <link>https://dev.to/am20dipi/i-finished-a-coding-bootcamp-what-was-it-like-256j</link>
      <guid>https://dev.to/am20dipi/i-finished-a-coding-bootcamp-what-was-it-like-256j</guid>
      <description>&lt;p&gt;Yesterday, on September 7, 2021, I finished a coding bootcamp. I spent 12+ months in Flatiron's part-time Software Engineering extensive course. I am so proud of myself. Adjacent to my pride, I feel a lot of relief -- as if I can breathe again. Adjacent to that, I question if I am ready to dive into the world of tech. This conglomerate of emotions is both feared and appreciated. But more for later... &lt;/p&gt;

&lt;p&gt;In this post I will be discussing my experience + opinion of Flatiron's bootcamp, what I learned, what I wish I learned + my biggest mistakes. So hold on tight, we are about to begin.&lt;/p&gt;

&lt;p&gt;☁️☁️☁️☁️☁️☁️☁️☁️☁️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#itinerary"&gt;
  &lt;/a&gt;
  ITINERARY
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#flatiron"&gt;WHAT IS FLATIRON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#experience-opinion"&gt;MY EXPERIENCE + OPINION FLATIRON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learned-curriculum"&gt;WHAT I LEARNED / CURRICULUM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#wish"&gt;WHAT I WISH I LEARNED&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#mistakes"&gt;MY BIGGEST MISTAKES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-flatiron"&gt;
  &lt;/a&gt;
  WHAT IS FLATIRON &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Flatiron is an educational organization that encompasses 4 main "bootcamps": (1) Software Engineering, (2) Data Science, (3) Cyber Security, and (4) Product Design. According to Flatiron's &lt;a href="https://flatironschool.com/"&gt;website&lt;/a&gt;, "Each of our immersive programs — on-campus and online — has one goal: to &lt;strong&gt;help you launch a new tech career&lt;/strong&gt;. Whether you're learning to become a software developer, data scientist,[...], our Career Services team is there to &lt;strong&gt;help you land that first job&lt;/strong&gt;."&lt;/p&gt;

&lt;p&gt;As claimed above, "to help you land that first job", bootcamps are designed for just that. With a militaristic and fear-inducing connotation, a "bootcamp" is an &lt;strong&gt; extensive, accelerated curriculum whose primary purpose is to teach what it necessary to get a job&lt;/strong&gt; in that desired field. I believe tied for its &lt;em&gt;projected&lt;/em&gt;, primary purpose is learning, but learning for the sake of knowledge kind of takes a back seat in bootcamps. &lt;/p&gt;

&lt;p&gt;We can see this in Flatiron School's overall instructional design: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full-time course is approximately 20 weeks long. &lt;/li&gt;
&lt;li&gt;Part-time course is about 40-50 weeks long. &lt;/li&gt;
&lt;li&gt;Full-time curriculum asks students to dedicate 60-80+ hours a week. &lt;/li&gt;
&lt;li&gt;Part-time curriculum asks students to dedicate 40-60+ hours a week.&lt;/li&gt;
&lt;li&gt;Full-time nor part-time curriculum requires any computer science background or any higher education background. &lt;/li&gt;
&lt;li&gt;The application process is easy + non-competitive. &lt;/li&gt;
&lt;li&gt;The curriculum pace is basically self-paced (besides project due dates). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, all of this criteria made me interested in Flatiron. They seem to throw out all of the methods of a traditional, old wave educational system. They saw that students self-motivating is what works, hence no due dates or required submissions (besides the module projects). They saw that students nowadays do not need a traditional, 4-year Computer Science education to land a job in tech. Flatiron only need 20-50 weeks! They basically threw out traditionalism; in which they are righteous in doing so. &lt;/p&gt;

&lt;p&gt;Yet, in their attempt, which I personally deem successful, they created a factory farm of tech personnel; you may say a pipeline directly from those in a rush to software engineer. The 20-week curriculum seems promising, but its focus is just what is encompassed in their mission statement: to get a job. &lt;strong&gt;This is not a bad thing. But it is a new thing.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-experience-opinion-of-flatiron"&gt;
  &lt;/a&gt;
  MY EXPERIENCE + OPINION OF FLATIRON &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;During my 12+ months at Flatiron School, I participated in both the full-time + part-time Software Engineering curriculums. I began in September of 2020 in the full-time cohort and went on to quickly fail my second project review in November. When a student does not pass a module's project review, on the first or second attempt, they technically fail and are given a few options: &lt;br&gt;
(1) Redo the module. &lt;br&gt;
(2) Drop out.&lt;/p&gt;

&lt;p&gt;Having a predisposed fear of failure, I felt like the end of days were near. I was embarrassed, angry, hopeless... But my fear of failure made me chug along. So I opted to redo the module. A student is given two (2) "fallbacks" -- basically meaning if you fail you can redo a module or if you feel as if the pace you are at does not match your abilities, you can transfer to a different pace (i.e part-time, full-time). I took both of my fallbacks at the same time -- I would say DON'T DO THIS. Honestly, I don't regret it but it was a mistake. It's like when they say "don't show your whole hand" or whatever that saying is. So come early November, I was kicked out of my cohort and transferred to a part-time cohort. However, since part-time moves at a slower pace, I had to wait until January to resume where I left off. Not a big deal but I definitely did not do anything between November to early January. I slacked. Also a huge mistake. DON'T DO THIS EITHER. Continue studying what you already learned or take to third party resources like YouTube, Leetscode, or Codewars to keep your brain going. &lt;/p&gt;

&lt;p&gt;Fast forward, I was doing pretty well in the part-time cohort. I had more time for myself. I was understanding the material. I felt more at ease and could breathe. Also, I was able to work some shifts at a restaurant. So, my experience at Flatiron went up a lot during this time. &lt;/p&gt;

&lt;p&gt;I do want to mention that with each cohort comes different teaching, learning, and communication styles. In the full-time cohort, everyone (including instructor, instructor aid, educational coach) was constantly talking in the slack channel. Mostly because the full-time curriculum expected 60-80+ hours a week; so everyone was always on their computer. There was definitely a larger, more emphasized sense of community in the full-time cohort. I had made "friends" and "acquaintances" in which whom I would work on labs with or study with. Basically, there was rapport + promise of future networking. &lt;/p&gt;

&lt;p&gt;In my part-time cohort, this basically fell to the wayside. There was some, not going to lie. But drastically less sense of community + rapport. I missed this very much and often felt lonely as you do as a student learning completely online and spending 40-60 hours a week in front of a computer alone. There was just less of a need for the intense community + constant discussion in the slack channel for part-time. I would say most, if not all, of my cohort peers worked a part-time job during the part-time curriculum. &lt;/p&gt;

&lt;p&gt;I bet you can imagine, as with all instructors anywhere, each instructor has a different teaching style. Some resort to visual emphasis, some use analogies, some use movies. Within Flatiron, my two instructors taught very differently. One was more colloquial, "think of this as you are going to the store with your friend". While one was very dictionary and strict, "this means this and that's that". While I'm being vague, I just wanted to caution you readers that while Flatiron has set boundaries and goals for their instructors, each instructor takes these boundaries and goals and flies with it. So, try to learn what your instructor's teaching style is and figure out the best way you can learn from it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-learned-flatirons-curriculum"&gt;
  &lt;/a&gt;
  WHAT I LEARNED + FLATIRON'S CURRICULUM &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Here, I am going to simply break down the curriculum into five (5) pieces representing the five (5) modules of both the full-time and part-time curriculums:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ruby + Basic Object Oriented Programming (OOP)&lt;/li&gt;
&lt;li&gt;Sinatra + SQL + ActiveRecord&lt;/li&gt;
&lt;li&gt;Ruby on Rails&lt;/li&gt;
&lt;li&gt;JavaScript, Rails(API)&lt;/li&gt;
&lt;li&gt;React + Redux, JavaScript, Rails(API)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the full-time program, you basically have two (2) weeks to learn the curriculum and two (2) weeks to start and complete the project AND pass the review. &lt;/p&gt;

&lt;p&gt;In the part-time program, you basically have four (4) weeks to learn the curriculum and four (4) weeks to start and complete the project AND pass the review. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-wish-i-learned"&gt;
  &lt;/a&gt;
  WHAT I WISH I LEARNED&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Honestly, I think Ruby on Rails is a great language to start off learning as a beginner or novice programmer. Ruby on Rails really exemplifies the key concepts + basic foundation of Object Oriented Programming(OOP). However, Ruby on Rails is not being used &lt;em&gt;that much&lt;/em&gt; anymore in newer companies/newer applications --- I would not say its dying like some people, but it is a little shaded. Take what I said with a grain of salt. &lt;/p&gt;

&lt;p&gt;With that being said, I wish I learned Python. Python is dominated the greater NYC metro area; in which I reside. Python is great and also reflects the basics of OOP. So, with the knowledge of Ruby on Rails, I can expend it to learn Python on my own terms. &lt;/p&gt;

&lt;p&gt;The five (5) main projects were really cool, yet stressful to work on. I wish they were nest in a few more mini projects into the curriculum. I feel as if that would reduce the stress that comes with the intensity of each module project. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-biggest-mistakes"&gt;
  &lt;/a&gt;
  MY BIGGEST MISTAKES&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I already mentioned a few of my biggest mistakes, but here I am going to take the time to list out and explain them + some more because I make mistakes often!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Taking both "fallbacks" at once.&lt;/li&gt;
&lt;li&gt;During curriculum hiatus/breaks, not doing any work (even if its not Flatiron work).&lt;/li&gt;
&lt;li&gt;Not using "Ask-A-Question" more.

&lt;ul&gt;
&lt;li&gt;"Ask-A-Question" is an utility given to each Flatiron student. It is an almost 24/7 chat with real alumni and instructors. You basically ask a question about a lab or lecture, and the person helps you out by pair programming on a lab together or going through the lecture and explaining. &lt;/li&gt;
&lt;li&gt;Honestly, I get embarrassed asking for help and I always try to figure it out on my own before asking. I should have just swallow my pride and used this amazing utility. You should too!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Networking during the curriculum.

&lt;ul&gt;
&lt;li&gt;Start networking the minute the course begins. People will remember you that way. &lt;/li&gt;
&lt;li&gt;Network by being outspoken (in a polite + professional way), offering help, asking a lot of questions, sending your cohort peers good resources... etc.&lt;/li&gt;
&lt;li&gt;Connect with people on your blog website or LinkedIn...etc. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write a blog a week.

&lt;ul&gt;
&lt;li&gt;I started doing this toward the end of my course. Each student is required to write one (1) blog per project. So five (5) total.&lt;/li&gt;
&lt;li&gt;Just write more than that. Even if its two (2) per project.&lt;/li&gt;
&lt;li&gt;Get a following on your blog page -- this is networking too. &lt;/li&gt;
&lt;li&gt;Write blogs on what you don't understand -- teach yourself!!!&lt;/li&gt;
&lt;li&gt;Write blogs on what you do understand -- teach others!!!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;This is basically it. I just wanted to share some insight to those looking into bootcamps; those who have done bootcamps; those who are new to coding...&lt;/p&gt;

&lt;p&gt;I hope this has found you well + helps you through your journey. &lt;/p&gt;

&lt;p&gt;☁️☁️☁️☁️☁️☁️☁️☁️☁️&lt;br&gt;
Comment below for any questions, suggestions, or to just continue the discussion!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>bootcamp</category>
      <category>react</category>
      <category>flatiron</category>
    </item>
    <item>
      <title>HTTPie for Performance Engineers</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Wed, 08 Sep 2021 15:13:14 +0000</pubDate>
      <link>https://dev.to/qainsights/httpie-for-performance-engineers-3pp4</link>
      <guid>https://dev.to/qainsights/httpie-for-performance-engineers-3pp4</guid>
      <description>&lt;p&gt;In this blog post we are going to learn HTTPie - a command line utility to debug web services. In our last post, we read about &lt;a href="https://qainsights.com/curl-tips-for-performance-engineers/" rel="noreferrer noopener"&gt;cURL for Performance Engineers&lt;/a&gt;. If you are looking for a cURL alternative, you can check out HTTPie.&lt;/p&gt;

&lt;h2&gt;What is HTTPie?&lt;/h2&gt;

&lt;p&gt;Here is the excerpt from httpie.io:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;HTTPie (pronounced aitch-tee-tee-pie) is a command-line HTTP client. Its goal is to make CLI interaction with web services as human-friendly as possible. HTTPie is designed for testing, debugging, and generally interacting with APIs &amp;amp; HTTP servers.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It supports both http and https; displays it in color by default. &lt;/p&gt;

&lt;h2&gt;How to install HTTPIe?&lt;/h2&gt;

&lt;p&gt;You can HTTPie on Linux, Windows and macOS. The only prerequisite is Python 3.6 or greater.&lt;/p&gt;

&lt;p&gt;Head to https://httpie.io/docs#installation to see the instructions based on your OS.&lt;/p&gt;

&lt;p&gt;In this demonstration, we are going to utilize HTTPie on Windows Subsystem for Linux (WSL).&lt;/p&gt;

&lt;p&gt;Issue any one of the below command to install HTTPie.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt install httpie&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python -m pip install --upgrade pip setuptools
python -m pip install --upgrade httpie&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After successful installation, you can validate by issuing &lt;code&gt;http --version&lt;/code&gt; or &lt;code&gt;https --version&lt;/code&gt; which will display the installed version of httpie.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/09/image-13.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XrAO0nZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/09/image-13.png" alt="HTTPie for Performance Engineers"&gt;&lt;/a&gt;HTTPie for Performance Engineers&lt;/p&gt;

&lt;p&gt;Throughout this demo, we are going to use &lt;code&gt;https&lt;/code&gt; variant.&lt;/p&gt;

&lt;h2&gt;HTTPie Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Expressive and intuitive syntax&lt;/li&gt;
&lt;li&gt;Formatted and colorized terminal output&lt;/li&gt;
&lt;li&gt;Built-in JSON support&lt;/li&gt;
&lt;li&gt;Forms and file uploads&lt;/li&gt;
&lt;li&gt;HTTPS, proxies, and authentication.&lt;/li&gt;
&lt;li&gt;Arbitrary request data&lt;/li&gt;
&lt;li&gt;Custom headers&lt;/li&gt;
&lt;li&gt;Persistent sessions&lt;/li&gt;
&lt;li&gt;Wget-like downloads&lt;/li&gt;
&lt;li&gt;Linux, macOS and Windows support&lt;/li&gt;
&lt;li&gt;Plugins&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Test coverage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://youtu.be/EBHqAPp1PIw"&gt;https://youtu.be/EBHqAPp1PIw&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Usage&lt;/h2&gt;

&lt;h3&gt;Hello World&lt;/h3&gt;

&lt;p&gt;Let us start with the simple &lt;code&gt;GET&lt;/code&gt; method using the httpbin.org demo app. As you can see, by default, httpie will display the response and the headers in the colored format.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https httpbin.org/get&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/09/image-14.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hFYvDMhm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/09/image-14.png" alt=""&gt;&lt;/a&gt;HTTPie - Hello World&lt;/p&gt;

&lt;h3&gt;POST&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https httpbin.org/post name=naveenkumar&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Submit Form&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https -f httpbin.org/post custname=naveenkumar&amp;amp;custtel=&amp;amp;custemail=&amp;amp;size=small&amp;amp;topping=mushroom&amp;amp;delivery=&amp;amp;comments=&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;View the sent request&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https -v httpbin.org/post name=naveenkumar&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Download File&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https https://httpbin.org/image/png &amp;gt; myimage.png&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Upload File&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https POST https://httpbin.org/post &amp;lt; myimage.png&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Follow Redirect&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https --follow pie.dev/redirect/4&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Proxy&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https --proxy=http:http://localhost:3128 --proxy=https:https://localhost:1080 example.net&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Skip HTTPS check&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https --verify=no https://pie.dev/get&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;SSL Version&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https --ssl=ssl3 https://example.org&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;View Headers&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https httpbin.org/get -h&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;View Body&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https httpbin.org/get -b&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Stream&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;http --stream httpbin.org/stream/3&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have listed only the frequently commands which I use for debugging. Apart from these, HTTPie supports named sessions, wget-like downloads, piping, formatting, resuming downloads, conditional body download, SOCKS, and more.&lt;/p&gt;

&lt;p&gt;Here is the GitHub repo for your reference: https://github.com/httpie/httpie&lt;/p&gt;

&lt;p&gt;HTTPie will be available for the web and desktop soon.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you are looking to debug HTTP requests and for cURL alternative, then HTTPie is for you. Easy to learn and get started; comes with powerful features and format options.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>tutorial</category>
      <category>webperf</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CPAN Release of Time::Verbal module</title>
      <author>Kang-min Liu</author>
      <pubDate>Wed, 08 Sep 2021 15:09:37 +0000</pubDate>
      <link>https://dev.to/gugod/cpan-release-of-time-verbal-module-1ecl</link>
      <guid>https://dev.to/gugod/cpan-release-of-time-verbal-module-1ecl</guid>
      <description>&lt;p&gt;&lt;a href="https://metacpan.org/pod/Time::Verbal"&gt;Time::Verbal&lt;/a&gt; 1.1.1 made its way to CPAN.&lt;/p&gt;

&lt;p&gt;This module dose one little things, that is to convert the time differece to a verbal format, rounded to some unit that "makes sense", just as how you would say such thing as a human.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my o = Time::Verbal-&amp;gt;new();
say $o-&amp;gt;distance( time(), time() - 4567 );
#=&amp;gt; about 1 hour
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Besides the default English format, other 67 languages identified by these ISO language codes are supported:&lt;/p&gt;

&lt;p&gt;ar bg bn-IN bs ca cy da de-AT de-CH de dsb el en-AU en-GB en-US eo es-AR es-CL es-CO es-MX es-PE es et eu fa fi fr-CA fr-CH fr fur gl-ES gsw-CH he hi-IN hi hr hsb hu id is it ja ko lo lt lv mk mn nb nl nn pl pt-BR pt-PT rm ro ru sk sl sr-Latn sr sv-SE sw tr uk vi zh-CN zh-TW&lt;/p&gt;

&lt;p&gt;I don't know all these languages (nor their language codes), but &lt;a href="https://metacpan.org/pod/Locale::Wolowitz"&gt;Locale::Wolowiz&lt;/a&gt; does. Or, at least it is the library that does the translation, given a bunch of JSON files that contain the body of translations.&lt;/p&gt;

&lt;p&gt;So here's how you say "about 1 hour" in Vietnamese:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my o = Time::Verbal-&amp;gt;new( "locale" =&amp;gt; "vi" );
say $o-&amp;gt;distance( time(), time() - 4567 );
#=&amp;gt; khoảng 1 giờ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A default version of translations of all the above-mentioned 68 languages are provided  with &lt;code&gt;Time::Verbal&lt;/code&gt; itself and is ready to use once installed properly -- a usual &lt;code&gt;cpan&lt;/code&gt; or &lt;code&gt;cpanm&lt;/code&gt; or &lt;code&gt;cpm&lt;/code&gt; command would suffice. However, in case some customize version is need because, say, you wish to provide better UX to whom spekas Vulcan variant of Kligon, you need to create a file named after the language code -- which can be arbitrary such as &lt;code&gt;tlh-Vulcan&lt;/code&gt;. You would create &lt;code&gt;tlh-Vulcan.json&lt;/code&gt; and put it under &lt;code&gt;/app/i18n&lt;/code&gt;, or really any directory of your choice, then do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my o = Time::Verbal-&amp;gt;new(
    "locale" =&amp;gt; "tlh-Vulcan",
    "i18n_dir" =&amp;gt; "/app/i18n"
);
say $o-&amp;gt;distance( time(), time() - 4567 );
#=&amp;gt; Chaq wa' rep
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Disclaimer -- I don't know if that's how Volcanized Kligon speaks. Don't take my example as if it is authentic.&lt;/p&gt;

&lt;p&gt;To prepare the translation, take a look of the json files under the default &lt;code&gt;i18n_dir&lt;/code&gt;, which can be printed by running this oneliner:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;perl -MTime::Verbal -E 'say Time::Verbal-&amp;gt;new()-&amp;gt;i18n_dir'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It shouldn't be difficult to grasp the structure of those translation files and produce a new one. It is however, very difficult to start describing the schema of thoes json file as an indolent developer.&lt;/p&gt;

&lt;p&gt;The translations are accquired from &lt;a href="https://github.com/svenfuchs/rails-i18n"&gt;rails-i18n&lt;/a&gt; project -- which is one of the first modules that does things like this.&lt;/p&gt;




&lt;p&gt;Originally posted at &lt;a href="https://gugod.org/2021/09/cpan-release-of-time-verbal/"&gt;https://gugod.org/2021/09/cpan-release-of-time-verbal/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>perl</category>
      <category>cpan</category>
    </item>
    <item>
      <title>Switching accounts in dev.to </title>
      <author>Darsh</author>
      <pubDate>Wed, 08 Sep 2021 15:04:06 +0000</pubDate>
      <link>https://dev.to/programmerno24/switching-accounts-in-dev-to-19o</link>
      <guid>https://dev.to/programmerno24/switching-accounts-in-dev-to-19o</guid>
      <description>&lt;p&gt;Switching account feature is available in G-Mail, Youtube etc &lt;/p&gt;

&lt;p&gt;I want that feature in dev.to&lt;/p&gt;

&lt;p&gt;A quick reply(about when will the work start or it wont start) would be appreciated.&lt;/p&gt;

&lt;p&gt;Thanks for reading my post please press the like and the unicorn button while going.&lt;br&gt;
Thank you&lt;br&gt;
Darsh kulthia&lt;/p&gt;

</description>
      <category>help</category>
      <category>discuss</category>
      <category>accounts</category>
    </item>
    <item>
      <title>Building a client side router in React with event hooks (pt1: events)</title>
      <author>Mike Talbot</author>
      <pubDate>Wed, 08 Sep 2021 14:58:29 +0000</pubDate>
      <link>https://dev.to/miketalbot/building-a-client-side-router-in-react-with-event-hooks-pt1-events-56m7</link>
      <guid>https://dev.to/miketalbot/building-a-client-side-router-in-react-with-event-hooks-pt1-events-56m7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR;
&lt;/h2&gt;

&lt;p&gt;I'm making a pluggable widget component with front end and serverless back end parts.  This article is the first in the series and covers the usage of custom events in React to build a router.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handling events in React&lt;/li&gt;
&lt;li&gt;Raising custom events&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;I'm embarking on a collaborative project to build a serverless widget for the &lt;a href="https://4c.rocks"&gt;4C&lt;/a&gt; content creator community that I've recently joined.&lt;/p&gt;

&lt;p&gt;The first thing that this project needs is a router on the client side and as I thought I'd use React, the first thing I thought of was React Router.  But then I thought, it's just a client side router and that might make an interesting opportunity to get into the heart of that problem and allow me to understand Routers more.&lt;/p&gt;

&lt;p&gt;There's also a thing about React Router I don't like so much.  I always end up writing a wrapper around it so I can dynamically register routes in a declarative fashion rather than imperatively writing them inside the JSX.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// What I want&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./something-that-declares-routes.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/some/route/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SomeComponent&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Rather than&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./something-that-declares-routes.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;declaredRoutes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./declared-routes.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SomeComponent&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/some/route/:id"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;declaredRoutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; 
            &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-router"&gt;
  &lt;/a&gt;
  What is a router?
&lt;/h2&gt;

&lt;p&gt;So ok, what do we want from a router?  We want to be able to specify a pattern of URLs supplied to our app in order to convert them into some function to be called.  The function should also be able to take parameters from a route so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   /some/:id/route?search&amp;amp;sort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Calls some registered function or component with the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt; and &lt;code&gt;sort&lt;/code&gt; parameters from a url like this &lt;code&gt;/some/abc123/route?search=something&amp;amp;sort=name,desc&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/some/:id/route?search&amp;amp;sort&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ShowInfo&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ShowInfo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="cm"&gt;/* something */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#the-url"&gt;
  &lt;/a&gt;
  The URL
&lt;/h2&gt;

&lt;p&gt;So for routes to work we have to deal with the &lt;code&gt;window.location&lt;/code&gt; object and know when it changes... either because we've navigated ourselves or the user has pressed the &lt;em&gt;Back&lt;/em&gt; or &lt;em&gt;Forward&lt;/em&gt; buttons.&lt;/p&gt;

&lt;p&gt;From the &lt;code&gt;location&lt;/code&gt; we will need to match routes based on the &lt;code&gt;pathname&lt;/code&gt; and extract variables from the &lt;code&gt;pathname&lt;/code&gt; and &lt;code&gt;search&lt;/code&gt; properties to pass to our component.&lt;/p&gt;

&lt;p&gt;The browser gives us an &lt;code&gt;onpopstate&lt;/code&gt; event when the user navigates using the buttons, but there is no event for the navigation to a new URL so we are going to have to deal with that ourselves. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  Events
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Let's keep our code simple by faking &lt;code&gt;onpopstate&lt;/code&gt; events when the user navigates around our app using links.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I like events, I use events everywhere in my code to loosely couple components.  We've seen above that we will need to raise and handle events quite frequently so the first step on the journey is to build some tools to aid with that process.  &lt;/p&gt;

&lt;p&gt;In this first part of the article we will create some useful functions to raise and handle events both inside and outside React components.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-plan"&gt;
  &lt;/a&gt;
  The Plan
&lt;/h3&gt;

&lt;p&gt;Because we are working with browser standard events I decided to just press the existing methods on &lt;code&gt;window&lt;/code&gt; into service.  However, I want to be able to pass custom properties to a handler function as additional parameters, rather than creating dozens of custom events, so we will decorate up standard &lt;code&gt;Event&lt;/code&gt; instances with the parameters passed along with the event, we'll do this so we don't accidentally conflict with any standard properties.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%C2%A0handling-events"&gt;
  &lt;/a&gt;
   Handling events
&lt;/h3&gt;

&lt;p&gt;Our first function is then: one to attach a handler and deal with these extra properties, returning a method to detach the handler later.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;innerHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_parameters&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]))&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;innerHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;innerHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we create an inner handler that uses a &lt;code&gt;_parameters&lt;/code&gt; property on the event object to pass additional parameters to the handler.&lt;/p&gt;

&lt;p&gt;Turning this into a hook for React is then child's play:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#raising-events"&gt;
  &lt;/a&gt;
  Raising events
&lt;/h3&gt;

&lt;p&gt;Writing a function to raise these events with custom parameters is also pretty easy:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note how we return the first parameter - that's an Inversion of Control helper, we might be raising events looking for return values, and this gives us an easy way of doing that.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get-stuff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get-stuff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Another choice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stuff&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get-stuff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;By returning the first parameter we write a lot less boilerplate.&lt;/p&gt;

&lt;p&gt;When we are working with events like &lt;code&gt;onPopState&lt;/code&gt; we also want to decorate the event object with parameters (like the &lt;code&gt;state&lt;/code&gt; for the &lt;code&gt;location&lt;/code&gt;) so we do need another function to deal with this circumstance, that we will use every now and again:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;raiseWithOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This one is very similar, just it decorates the custom event with the options object passed in.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus-redrawing-things-when-events-happen"&gt;
  &lt;/a&gt;
  Bonus: Redrawing things when events happen
&lt;/h2&gt;

&lt;p&gt;We may well want to get our React components to redraw based on events that have changed some global state.  There's an easy way to do that with a &lt;code&gt;useRefresh&lt;/code&gt; hook that can either cause a refresh or register a function that will refresh after a sub function is called.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useRefresh&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refreshFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;subParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;](...&lt;/span&gt;&lt;span class="nx"&gt;subParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="nx"&gt;refreshFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;// eslint-disable-next-line react-hooks/exhaustive-deps&lt;/span&gt;
        &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;refreshFunction&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This creates us a utility function that causes React to redraw the component.  It's handy for lots of things but here we can just use it to do a refresh on an event:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRefresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="nx"&gt;useEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;onPopState&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;useRefresh&lt;/code&gt; function takes a list of other functions to call.  This is sometimes useful, especially for debugging&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRefresh&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Redrawing X&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And the returned function can be made to wrap a refresh around something:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRefresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="c1"&gt;// do something with global state on window.location.search&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Set X&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this first part we've seen how to easily raise and handle events in React.  Below is the running widget that uses these techniques.  &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/miketalbot"&gt;
        miketalbot
      &lt;/a&gt; / &lt;a href="https://github.com/miketalbot/cccc-widget"&gt;
        cccc-widget
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/n4dpo?initialpath=/BIr6y6QZhjz1fEJ-h4wJ_/embed&amp;amp;runonclick=0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
