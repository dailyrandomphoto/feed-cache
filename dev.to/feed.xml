<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Principles of Object-oriented programming </title>
      <author>Abhinav Pandey</author>
      <pubDate>Sat, 16 Oct 2021 14:27:09 +0000</pubDate>
      <link>https://dev.to/abh1navv/principles-of-object-oriented-programming-51k1</link>
      <guid>https://dev.to/abh1navv/principles-of-object-oriented-programming-51k1</guid>
      <description>&lt;p&gt;Object-oriented programming has been the most popular programming paradigm for over two decades. It is build on the idea that problems can be broken down in terms of the objects required to solve it.&lt;/p&gt;

&lt;p&gt;Let's have a look into the core principles around the object-oriented programming paradigm.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-blocks-of-oop"&gt;
  &lt;/a&gt;
  Building blocks of OOP
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  Objects
&lt;/h3&gt;

&lt;p&gt;Objects are entities which have certain attributes and provide some services. &lt;/p&gt;

&lt;p&gt;In programming terms attributes are data held by the object in variables and services are the methods of the object that are accessible from outside.&lt;/p&gt;

&lt;p&gt;A Car is an object. Its attributes are its engine, color, model, seats, etc. while its service is to help people travel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#class"&gt;
  &lt;/a&gt;
  Class
&lt;/h3&gt;

&lt;p&gt;Class is based on the idea of "type". It provides a template  for defining similar objects and an interface for interacting with the object's services and data. &lt;/p&gt;

&lt;p&gt;In OOP, each object will belong to a class which defines its characteristics and behaviour. Objects, also called as instances of a class, are created, stored and utilized as per the template defined by their class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#principles"&gt;
  &lt;/a&gt;
  Principles
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#encapsulation"&gt;
  &lt;/a&gt;
  Encapsulation
&lt;/h3&gt;

&lt;p&gt;The object's data and its capabilities are bundled together. And as we already know, they are defined in a class. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The class provides an interface for other objects to interact with instances of that class. The point to note about the interface is that it does not need to reveal everything about the object. &lt;/li&gt;
&lt;li&gt;Some capabilities and data are internal to the object. They are not for the outside world to know or use.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can be understood in terms of a capsule which is consumed from the outside. It has a composition of medicines inside but they cannot be taken separately.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#abstraction"&gt;
  &lt;/a&gt;
  Abstraction
&lt;/h3&gt;

&lt;p&gt;Focus on "what" can solve your problem and not on "how" it solves it. More specifically, find the objects which can solve your problem and use their relevant services. &lt;/p&gt;

&lt;p&gt;Objects communicate by calling each other's services to get the job done. At no point does one object need to know the specifics of how the other object is implementing the services. &lt;/p&gt;

&lt;p&gt;Abstraction and Encapsulation work together to ensure that implementation details of an object are hidden from the external world.&lt;/p&gt;

&lt;p&gt;For e.g. a Car is an encapsulated unit. It will not tell you what each of its parts are made of and what material was used to create them. However, it will provide you with some abstracted functionalities. &lt;/p&gt;

&lt;p&gt;You can press the accelerator and it will increase your speed without you knowing how it increases the speed or what parts are involved in the process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inheritance"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h3&gt;

&lt;p&gt;At its core, inheritance is a technique for code reuse. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inheritance allows a class (&lt;em&gt;subclass&lt;/em&gt;) to build on top of another class (&lt;em&gt;superclass&lt;/em&gt;). &lt;/li&gt;
&lt;li&gt;The subclass will have all the properties of its superclass and should be able to perform all the services provided by the superclass. &lt;/li&gt;
&lt;li&gt;In addition it can define/update a few properties and services of its own.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes objects required to solve problems will follow a uniform interface but will differ in implementation details. In such cases, inheritance is useful to help in avoiding repetition of code that will remain the same.&lt;/p&gt;

&lt;p&gt;A stricter and recommended use case of inheritance is subtyping where we state that if a subclass object "is-a" and "behaves-as-a" superclass object, only then the inheritance is valid.&lt;/p&gt;

&lt;p&gt;A Car is a class. Additionally, cars can be of several subtypes. A SUV is also a Car and a LUV is a Car too because they will both have all the attributes of . &lt;/p&gt;

&lt;p&gt;If we were defining SUV and LUV as classes, it would make sense to make them inherit the class of Car.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#polymorphism"&gt;
  &lt;/a&gt;
  Polymorphism
&lt;/h3&gt;

&lt;p&gt;Polymorphism is the ability to behave differently in different situations. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is achieved using a technique called "Late Binding". The code to be executed is determined at runtime. &lt;/li&gt;
&lt;li&gt;From another perspective, the object or method to be used is determined at runtime. &lt;/li&gt;
&lt;li&gt;This helps in making the code "decoupled" - not tied strongly with objects of a specific type.&lt;/li&gt;
&lt;/ul&gt;




</description>
      <category>oop</category>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to migrate from webpacker to esbujsbundling-rails (esbuild)</title>
      <author>thomasvanholder</author>
      <pubDate>Sat, 16 Oct 2021 14:12:40 +0000</pubDate>
      <link>https://dev.to/thomasvanholder/how-to-migrate-from-webpacker-to-jsbundling-rails-esbuild-5f2</link>
      <guid>https://dev.to/thomasvanholder/how-to-migrate-from-webpacker-to-jsbundling-rails-esbuild-5f2</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;a href="#1-install-jsbundlingrails"&gt;Install jsbundling-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-swap-packtag-for-includetag"&gt;Swap pack_tag for include_tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-import-stimumulus-controllers"&gt;Import stimulus controllers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-migrate-js-entrypoint"&gt;Migrate JS entrypoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-remove-webpack"&gt;Remove webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-github-actions"&gt;Github Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-heroku"&gt;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#1-install-jsbundlingrails"&gt;
  &lt;/a&gt;
  1. Install jsbundling-rails
&lt;/h2&gt;

&lt;p&gt;Add to gemfile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'jsbundling-rails'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the terminal, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="sb"&gt;`&lt;/span&gt;bundle &lt;span class="nb"&gt;install&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="sb"&gt;`&lt;/span&gt;rails javascript:install:esbuild&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#2-swap-packtag-for-includetag"&gt;
  &lt;/a&gt;
  2. Swap pack_tag for include_tag
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;jsbundling:install&lt;/strong&gt; command inserts a &lt;code&gt;javascript_include_tag&lt;/code&gt; tag above the  tag in your &lt;code&gt;application.html.erb&lt;/code&gt; file. This tag wil include the new javascript entrypoint &lt;code&gt;javascript/application.js&lt;/code&gt; for your build script to be included in your application.&lt;/p&gt;

&lt;p&gt;Remove the webpack's legacy &lt;code&gt;stylesheet_pack_tag&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;# old
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;javascript_pack_tag&lt;/span&gt; &lt;span class="s1"&gt;'application'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'data-turbo-track'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'reload'&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

# new
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;javascript_include_tag&lt;/span&gt; &lt;span class="s2"&gt;"application"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"data-turbo-track"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"reload"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;defer: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your app render multiple layouts, be sure to remove any &lt;code&gt;javascript_pack_tag&lt;/code&gt; there too.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-import-stimulus-controllers"&gt;
  &lt;/a&gt;
  3. Import stimulus controllers
&lt;/h2&gt;

&lt;p&gt;Even when you already installed stimulus, run the install command again in your terminal and overwrite any confliction changes. This will import all your existing stimulus controller correctly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails stimulus:install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, after adding or removing a new stimulus controller you can use a command which will auto-generate the &lt;code&gt;controllers/index.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails stimulus:manifest:update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#4-migrate-js-entrypoint"&gt;
  &lt;/a&gt;
  4. Migrate JS entrypoint
&lt;/h2&gt;

&lt;p&gt;Move the content from &lt;code&gt;javascript/packs/application.js&lt;/code&gt; to&lt;br&gt;
&lt;code&gt;javascript/application.js&lt;/code&gt;. After migrating the file, delete the javascript/packs folder which was used by Webpacker.&lt;/p&gt;

&lt;p&gt;Make sure to import directories in the &lt;strong&gt;javascript&lt;/strong&gt; folder with a relative path.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// old&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;channels&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//new&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./channels&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./controllers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#5-remove-webpack"&gt;
  &lt;/a&gt;
  5. Remove webpack
&lt;/h2&gt;

&lt;p&gt;Webpack and its tentacles can finally be removed from the application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-webpacker-gem"&gt;
  &lt;/a&gt;
  A. Webpacker gem
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'webpacker'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'~&amp;gt; 5.4'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#b-remove-webpack-packages"&gt;
  &lt;/a&gt;
  B. Remove webpack packages
&lt;/h3&gt;

&lt;p&gt;Webpack packages and plugins that accumulated over time can be removed too. For me, this included:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;@rails/webpacker&lt;/li&gt;
&lt;li&gt;webpack&lt;/li&gt;
&lt;li&gt;webpack-cli&lt;/li&gt;
&lt;li&gt;webpack-cli/serve&lt;/li&gt;
&lt;li&gt;webpack-dev-server&lt;/li&gt;
&lt;li&gt;clean-webpack-plugin&lt;/li&gt;
&lt;li&gt;@hotwired/stimulus-webpack-helpers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#c-remove-webpack-files"&gt;
  &lt;/a&gt;
  C. Remove webpack files
&lt;/h3&gt;

&lt;p&gt;Finally, remove all config and start-up files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bin/webpack&lt;/li&gt;
&lt;li&gt;bin/webpack-dev-server&lt;/li&gt;
&lt;li&gt;config/webpacker.yml&lt;/li&gt;
&lt;li&gt;config/webpack (directory)&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#6-github-actions"&gt;
  &lt;/a&gt;
  6. Github Actions
&lt;/h2&gt;

&lt;p&gt;If you use Github Actions as a CI/CD make sure to add in an additional build step to run yarn build. Yarn build will trigger the build step defined in your &lt;code&gt;package.json&lt;/code&gt; file: &lt;code&gt;"build": "esbuild app/javascript/*.* --bundle --outdir=app/assets/builds"&lt;/code&gt;. All javascript files need to be bundled before running the tests in your workflow file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build Esbuild&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#7-heroku"&gt;
  &lt;/a&gt;
  7. Heroku
&lt;/h2&gt;

&lt;p&gt;If you use heroku to deploy your application, Heroku will &lt;strong&gt;NOT&lt;/strong&gt; automatically install yarn as it does for Webpack!**&lt;/p&gt;

&lt;p&gt;Therefore, we need to explicitly set a node buildpack before ruby. You can do this in the terminal or the Heroku Dashboard.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Terminal
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;heroku buildpacks:clear
heroku buildpacks:set heroku/nodejs
heroku buildpacks:add heroku/ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Dashboard
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L5jnKEoX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evxrzrn2dsvf3zy94b4p.png" alt="Heroku Dashboard"&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;Feedback or question? Let me know :)&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;** Thanks to &lt;a href="https://twitter.com/robzolkos"&gt;Rob&lt;/a&gt; for blogging about the &lt;a href="https://world.hey.com/robzolkos/rails-7-fix-yarn-missing-on-heroku-04509d23"&gt;yarn missing step&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=qOptalp8zUY"&gt;How to use ESBuild with JS Bundling in Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>webpack</category>
      <category>esbuild</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Manual de sobrevivência: Hacktoberfest 2021</title>
      <author>Bianca Pereira</author>
      <pubDate>Sat, 16 Oct 2021 14:03:09 +0000</pubDate>
      <link>https://dev.to/compiladoras/manual-de-sobrevivencia-hacktoberfest-2021-14a8</link>
      <guid>https://dev.to/compiladoras/manual-de-sobrevivencia-hacktoberfest-2021-14a8</guid>
      <description>&lt;p&gt;Essa é sua primeira vez no &lt;strong&gt;Hacktoberfest&lt;/strong&gt;? Não tema! Temos aqui recursos pra você não perder esse evento mundial!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#afinal-o-que-%C3%A9-hacktoberfest"&gt;
  &lt;/a&gt;
  Afinal, o que é Hacktoberfest? 🤔
&lt;/h2&gt;

&lt;p&gt;O Hacktoberfest é um evento que acontece no mundo todo durante o mês de outubro já faz alguns anos. O &lt;strong&gt;objetivo&lt;/strong&gt; dele é incentivar a contribuir no &lt;em&gt;Open Source&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Open Source são projetos de código aberto, ou seja, projetos que qualquer pessoa pode contribuir para melhorá-lo.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#primeiro-se-inscreva"&gt;
  &lt;/a&gt;
  Primeiro, se inscreva! ✍🏽
&lt;/h2&gt;

&lt;p&gt;No site da dona &lt;a href="https://hacktoberfest.digitalocean.com"&gt;DigitalOcean&lt;/a&gt;, você deve se inscrever para participar.&lt;/p&gt;

&lt;p&gt;👉🏽 &lt;a href="https://drive.google.com/file/d/1-sF8xavvTx72CTxlFCspdBwHz6pNd5hZ/view?usp=sharing"&gt;[PDF] Como se inscrever para o Hacktoberfest 2021&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#comece-a-contribuir"&gt;
  &lt;/a&gt;
  Comece a contribuir! 🤩
&lt;/h2&gt;

&lt;p&gt;Para participar do evento, você deve criar &lt;strong&gt;Pull Requests&lt;/strong&gt; no site &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O pull request (ou PR) é a forma de você contribuir e ganhar pontos no evento.&lt;/p&gt;

&lt;p&gt;👉🏽 &lt;a href="https://drive.google.com/file/d/1c7c-w0lDUdjI5Eg11fO-rGP4WVJA8-sN/view?usp=sharing"&gt;[PDF] Tutorial: Meu primeiro Pull Request para o Hacktoberfest&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#n%C3%A3o-sei-onde-contribuir"&gt;
  &lt;/a&gt;
  Não sei onde contribuir 😿
&lt;/h2&gt;

&lt;p&gt;A parte de procurar um repositório para ajudar é realmente a mais chatinha, mas também trouxemos uma coisinha para ajudar!&lt;/p&gt;

&lt;p&gt;👉🏽 &lt;a href="https://drive.google.com/file/d/1SNgqsYc4qFSgTeI6zjHiCcDdV9ilvKIg/view?usp=sharing"&gt;[PDF] 10 dicas para achar repositórios e contribuir no Hacktoberfest&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#d%C3%BAvidas-frequentes"&gt;
  &lt;/a&gt;
  Dúvidas frequentes 🤓
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Preciso saber programar para participar?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Não! Você pode ajudar sem programar uma única linha de código.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. É muito difícil ganhar a camiseta?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Também não! Se seguir os PDF's acima direitinho, sua camiseta e stickers do evento poderão ser enviados pela dona DigitalOcean. &lt;/p&gt;

&lt;p&gt;(PS: Os primeiro 50.000 participantes ganharam a camiseta, então tem bastante camiseta pra gente! 👕)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. E as regras do evento?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Penso que a mais importante é: não faça spam ou conteúdo inapropriado, se não você poderá ser &lt;strong&gt;desclassificado&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Para resolver isso, basta realmente ajudar um projeto, e não participar apenas para ganhar a camiseta.&lt;/p&gt;

&lt;p&gt;Leia as &lt;a href="https://hacktoberfest.digitalocean.com/faq"&gt;regras e mais informações aqui&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>braziliandevs</category>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>Parcel.js v2 Bundler, is an excellent web development build tool.</title>
      <author>Alexandre Desroches</author>
      <pubDate>Sat, 16 Oct 2021 13:56:42 +0000</pubDate>
      <link>https://dev.to/alexdrocks/parceljs-v2-bundler-is-an-excellent-web-development-build-tool-67j</link>
      <guid>https://dev.to/alexdrocks/parceljs-v2-bundler-is-an-excellent-web-development-build-tool-67j</guid>
      <description>&lt;p&gt;&lt;a href="https://parceljs.org/"&gt;Parcel Version 2&lt;/a&gt; was publicly released on October 13 of 2021 - as seen in &lt;a href="https://parceljs.org/blog/v2/"&gt;their blog post&lt;/a&gt; and also &lt;a href="https://twitter.com/devongovett/status/1448303499045838859"&gt;on Twitter&lt;/a&gt; by the creator of Parcel, &lt;a href="https://twitter.com/devongovett"&gt;Devon Govett&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#version-2-of-the-parcel-build-tool-is-simple-and-efficient"&gt;
  &lt;/a&gt;
  Version 2 of the Parcel build tool is simple and efficient.
&lt;/h2&gt;

&lt;p&gt;During a year and a half - as a new web developer learning mostly Javascript, HTML, CSS and React - I was searching for the perfect build tools to create web applications and web sites.&lt;/p&gt;

&lt;p&gt;Well, it was almost impossible to find one that did "everything" simply and efficiently. By "everything" I mean that it provides out-of-the-box: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dev server for Javascript, HTML, CSS based projects.&lt;/li&gt;
&lt;li&gt;Default loaders to handle regular web site and web apps requirements like loading images, SVGs, multiple CSS and JS files, etc.&lt;/li&gt;
&lt;li&gt;Optimized production builds - without any complex configs that can waste hours of your day each time you start a new project.&lt;/li&gt;
&lt;li&gt;Speed and performance.&lt;/li&gt;
&lt;li&gt;Proper usage of HTML and CSS files rather than everything handled by Javascript.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#parcel-v2-replaced-a-webpack-5-project-in-10-minutes"&gt;
  &lt;/a&gt;
  Parcel v2 replaced a Webpack 5 project in 10 minutes.
&lt;/h2&gt;

&lt;p&gt;No jokes. I had a project using Webpack 5 and a super complex configuration which took me days to setup! &lt;/p&gt;

&lt;p&gt;I went on the &lt;a href="https://parceljs.org/"&gt;Parcel website&lt;/a&gt; and read the &lt;a href="https://parceljs.org/getting-started/webapp/"&gt;get started guide for web apps&lt;/a&gt; which took 1 minute. Then in my project, I deleted my &lt;code&gt;node_modules&lt;/code&gt; folder and every dev dependencies I had related to Webpack in my package.json file. Then I installed Parcel as stated in the guide, setup the scripts in &lt;code&gt;package.json&lt;/code&gt; then ran the &lt;code&gt;npm install&lt;/code&gt; command. Then I executed &lt;code&gt;npm start&lt;/code&gt; a few times to see console error messages which were super easy to understand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After 10 minutes, the project was fully replaced with Parcel v2&lt;/strong&gt;. Isn't that incredible?! Seriously, I was telling myself that this could never be possible. I mean - how could you replace days of work setting up my custom Webpack configurations and then simply replace it with a new module bundler called Parcel...? Well, it worked. Incredible and awesome.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatic-image-optimization-with-production-builds"&gt;
  &lt;/a&gt;
  Automatic Image Optimization with production builds.
&lt;/h2&gt;

&lt;p&gt;Believe it or not, we are now at this awesome point in time where the build tool is able to let you declare a  HTML element with multiple image sources (including AVIF images) and it will automatically optimize them when you run the production build command. This is insane. I previously had to manually setup a gulp workflow with imagemin and other complexities which I really had trouble with most of the time because you kind of never remember what you did in previous projects to set this up. &lt;strong&gt;Parcel v2... simply declare your HTML&lt;/strong&gt;, put the original image in your project's preferred folder, run a command. Done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#smaller-javascript-and-css-minified-bundles-than-with-my-previous-webpack-v5-setup"&gt;
  &lt;/a&gt;
  Smaller Javascript and CSS minified bundles than with my previous Webpack v5 setup.
&lt;/h2&gt;

&lt;p&gt;Not only is it extremely handy, fast and enjoyable - it also produced ~10kb less of total shipped Javascript and CSS. Then if you also count the automatic image optimizations which took another ~10kb off my previous images. That is &lt;strong&gt;around 20kb less shipped code&lt;/strong&gt; in the production build with zero real efforts on my side.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatic-caching-helpers-with-file-names-hashing"&gt;
  &lt;/a&gt;
  Automatic caching helpers with file names hashing.
&lt;/h2&gt;

&lt;p&gt;Parcel will reorganize your file names in production builds so that they include a hash like this &lt;code&gt;index.f7b8de4d.js&lt;/code&gt;. &lt;strong&gt;This helps to cache those files for a very long time without worrying that you users will get old cached results&lt;/strong&gt;. In fact, by hashing your file names, each production build that modified a file's content will generate a new hash which automatically invalidates the cache and ensure your users get the latest content you wanted to provide to them. That's awesome too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So, I found that Parcel v2 provides out-of-the-box ideal modern default configurations for my web development needs. &lt;strong&gt;I am not affiliated with Parcel in any way&lt;/strong&gt;. I just discovered it the day it was released publicly on Twitter. &lt;/p&gt;

&lt;p&gt;Maybe you could try it and be as impressed as I am today. Honestly, when you spend hours, days, months, years searching for something and then you finally find it, it's an extremely satisfying feeling. &lt;/p&gt;

&lt;p&gt;Thanks to all contributors in the &lt;a href="https://parceljs.org/"&gt;Parceljs.org&lt;/a&gt; project. This new release is my new go to build tool for starting new projects.&lt;/p&gt;

&lt;p&gt;Disclaimer: For purely React based projects I will keep using &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; because its extremely good at it (and built especially for it).&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>How to simplify and organize imports in Typescript</title>
      <author>Dany Paredes</author>
      <pubDate>Sat, 16 Oct 2021 13:53:19 +0000</pubDate>
      <link>https://dev.to/danywalls/simplify-imports-in-typescript-29jo</link>
      <guid>https://dev.to/danywalls/simplify-imports-in-typescript-29jo</guid>
      <description>&lt;p&gt;Sometimes we have a long  list of imports, with files that come from the same place, it makes our code noisy and a bit longer, something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BeersService } from './services/beers.service';
import { WhiskyService } from './services/whiski.service';
import { WineService } from './services/wine.service';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can simplify it by exposing all files, from a single file, to point to all of them.&lt;/p&gt;

&lt;p&gt;Create index.ts, (you can name as you want, but most common is index) and export all services.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./beers.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./whiski.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./wine.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can update our files, to the new path.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BeersService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;WhiskyService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;WineService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./services/index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code looks clean and easy to ready because all of them comes from the same place.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@marcinjozwiak?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Marcin Jozwiak&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/imports?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Jira CLI: The Missing Command-line Tool for Atlassian Jira</title>
      <author>Ankit Pokhrel</author>
      <pubDate>Sat, 16 Oct 2021 13:52:48 +0000</pubDate>
      <link>https://dev.to/konsole/jira-cli-the-missing-command-line-tool-for-atlassian-jira-2n2i</link>
      <guid>https://dev.to/konsole/jira-cli-the-missing-command-line-tool-for-atlassian-jira-2n2i</guid>
      <description>&lt;p&gt;&lt;em&gt;The &lt;a href="https://medium.com/@ankitpokhrel/introducing-jira-cli-the-missing-command-line-tool-for-atlassian-jira-fe44982cc1de"&gt;original version&lt;/a&gt; of this post first appeared in Medium.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The year is 2078 and there have been 0 improvements in the Jira UI — #rant&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jira UI is terrible to work with. It is slow, buggy, and doesn’t even load on occasions. If you have to rely on it for your day-to-day job it is going to cost you a lot of time and frustration. These frustrations pile up if you need to create tickets, in a pre-defined format with proper labels, components, etc, for every change you make, even a typo!&lt;/p&gt;

&lt;p&gt;Since I spend a significant amount of my time in the command-line, this is my small attempt to make Jira experience better for the CLI users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-jira-cli"&gt;
  &lt;/a&gt;
  Introducing Jira CLI
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ankitpokhrel"&gt;
        ankitpokhrel
      &lt;/a&gt; / &lt;a href="https://github.com/ankitpokhrel/jira-cli"&gt;
        jira-cli
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🔥 [WIP] Feature-rich interactive Jira command line.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
    &lt;a href="https://github.com/ankitpokhrel/jira-cli#"&gt;
        &lt;img alt="stargazers over time" src="https://camo.githubusercontent.com/0e674d8f04a6e1a50dfea464cc89512e48e8c2304f987a1648a046bba167d75b/68747470733a2f2f73746172732e6d6564762e696f2f616e6b6974706f6b6872656c2f6a6972612d636c692e737667"&gt;
    &lt;/a&gt;
    &lt;h1&gt;
JiraCLI&lt;/h1&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;p&gt;
        &lt;a href="https://github.com/ankitpokhrel/jira-cli/actions?query=workflow%3Abuild+branch%3Amaster"&gt;
            &lt;img alt="Build" src="https://camo.githubusercontent.com/11ccce3b149701a583a7eda25e8e1e70d993e659cdd59954cf46dd20da12a504/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f616e6b6974706f6b6872656c2f6a6972612d636c692f6275696c643f7374796c653d666c61742d737175617265"&gt;
        &lt;/a&gt;
        &lt;a href="https://goreportcard.com/report/github.com/ankitpokhrel/jira-cli" rel="nofollow"&gt;
            &lt;img alt="GO Report-card" src="https://camo.githubusercontent.com/6dfa0d69b416072706b881ad566f83f97c52fbd3b53a5e11e0c5a06d85914bfd/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f616e6b6974706f6b6872656c2f6a6972612d636c693f7374796c653d666c61742d737175617265"&gt;
        &lt;/a&gt;
        &lt;a href="https://github.com/ankitpokhrel/jira-cli/blob/master/LICENSE"&gt;
            &lt;img alt="Software License" src="https://camo.githubusercontent.com/ad8758fbaebbced78645b98e446c0bb5ec223676ed61700184320887cadbfb8e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265"&gt;
        &lt;/a&gt;
        &lt;a href="https://github.com/ankitpokhrel/jira-cli#"&gt;
            &lt;img alt="Software License" src="https://camo.githubusercontent.com/f18094648d87d228dd660d6226473ddb786bcc3a6d8cfe2f373cd213f79512a5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7374617475732d5749502d79656c6c6f773f7374796c653d666c61742d73717561726526636f6c6f723d6f72616e6765"&gt;
        &lt;/a&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;i&gt;Feature-rich Interactive Jira Command Line&lt;/i&gt;
    &lt;/p&gt;
    &lt;a rel="noopener noreferrer" href="https://github.com/ankitpokhrel/jira-cli.github/assets/demo.gif"&gt;&lt;img alt="JiraCLI Demo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUOuXffw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/ankitpokhrel/jira-cli.github/assets/demo.gif"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
    &lt;p&gt;
        🚧 This project is still a work in progress 🚧&lt;br&gt;
        &lt;a href="https://opencollective.com/jira-cli#backers" rel="nofollow"&gt;
            &lt;img src="https://camo.githubusercontent.com/28790ec72e54f784580b53ef5afc67c6647a95f0650a04cacec4c51958b8adb2/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6a6972612d636c692f6261636b6572732e737667" alt="jira-cli open collective badge"&gt;
        &lt;/a&gt;
    &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;JiraCLI is a command line tool for Jira created with an idea to avoid the Jira UI as much as possible. The tool is not yet complete but has
all necessary features required to improve your workflow with Jira. The tool mostly focuses on issue search and navigation at the moment
However, it also includes features like issue creation, cloning, linking, ticket transition, and so on.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your suggestions and feedbacks are highly appreciated. Feel free to &lt;a href="https://github.com/ankitpokhrel/jira-cli/discussions"&gt;start a discussion&lt;/a&gt;
or &lt;a href="https://github.com/ankitpokhrel/jira-cli/issues/new"&gt;create an issue&lt;/a&gt; to share your experience about the tool or to discuss a feature/issue
If you think this project is cool and helpful, consider contributing by starring the repo, sharing with your friends or submitting a PR.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Supported platforms&lt;/h2&gt;
&lt;p&gt;The tool is only tested with the latest Jira cloud since that's what I…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ankitpokhrel/jira-cli"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#tldr-features-highlight"&gt;
  &lt;/a&gt;
  TLDR; Features Highlight
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Interactive mode + an option to easily integrate with shell/automation scripts using standard &lt;a href="https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html"&gt;POSIX-complaint&lt;/a&gt; flags.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ankitpokhrel/jira-cli/#list"&gt;Easy search&lt;/a&gt; and navigation. For instance, you can easily search for something like “&lt;em&gt;Issues that are of high priority, is in progress, was created this month, and has a label called backend&lt;/em&gt;” with &lt;code&gt;jira issue list -yHigh -s"In Progress" --created month -lbackend&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ankitpokhrel/jira-cli/#create"&gt;Create a neat Jira ticket&lt;/a&gt; (and &lt;a href="https://github.com/ankitpokhrel/jira-cli/#comment"&gt;comment&lt;/a&gt;) using &lt;a href="https://github.github.com/gfm/"&gt;Github-flavored&lt;/a&gt; + &lt;a href="https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all"&gt;Jira-flavored&lt;/a&gt; markdown as a template. Supports pre-defined templates.&lt;/li&gt;
&lt;li&gt;The ticket details are translated to &lt;a href="https://github.github.com/gfm/"&gt;markdown&lt;/a&gt; from the &lt;a href="https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/"&gt;Atlassian document&lt;/a&gt; and is &lt;a href="https://github.com/ankitpokhrel/jira-cli/#view"&gt;beautifully displayed&lt;/a&gt; on the screen when you view it.&lt;/li&gt;
&lt;li&gt;Easy &lt;a href="https://github.com/ankitpokhrel/jira-cli/#sprint"&gt;sprint&lt;/a&gt; and &lt;a href="https://github.com/ankitpokhrel/jira-cli/#epic"&gt;epic&lt;/a&gt; navigation. You can quickly view tickets in previous, current, and next sprint tickets using flags like &lt;code&gt;--prev&lt;/code&gt;, &lt;code&gt;--next&lt;/code&gt;, and &lt;code&gt;--current&lt;/code&gt; eg: &lt;code&gt;jira sprint list --current&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Fast and straightforward &lt;a href="https://github.com/ankitpokhrel/jira-cli/#clone"&gt;ticket cloning&lt;/a&gt; with the ability to replace text in summary and description.&lt;/li&gt;
&lt;li&gt;You can &lt;a href="https://github.com/ankitpokhrel/jira-cli#edit"&gt;edit&lt;/a&gt;, &lt;a href="https://github.com/ankitpokhrel/jira-cli#link"&gt;link&lt;/a&gt;, &lt;a href="https://github.com/ankitpokhrel/jira-cli#assign"&gt;assign&lt;/a&gt; and &lt;a href="https://github.com/ankitpokhrel/jira-cli#movetransition"&gt;transition&lt;/a&gt; the issues with ease.&lt;/li&gt;
&lt;li&gt;Supports multiple Jira servers using &lt;code&gt;--config&lt;/code&gt; flag or &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; env.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h3&gt;

&lt;p&gt;The tool is mosty tested with the latest Jira cloud since that’s what I usually work with. However, the support for on-premise Jira installation is &lt;a href="https://github.com/ankitpokhrel/jira-cli/issues/138"&gt;on the way&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, the tool is still a work in progress with some exciting features in the todo pipeline.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#searching-for-an-issue"&gt;
  &lt;/a&gt;
  Searching for an Issue
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/ankitpokhrel/jira-cli"&gt;JiraCLI&lt;/a&gt; makes searching for an issue as easy as it should be. The lists are displayed in an interactive UI and can be navigated easily to perform actions like viewing, navigating, and copying issue keys/links.&lt;/p&gt;

&lt;p&gt;The examples below shows how easy it is to look for an issue. See more examples &lt;a href="https://github.com/ankitpokhrel/jira-cli"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# List issues that I am watching in the current board
$ jira issue list -w

# List issues assigned to me
$ jira issue list -a$(jira me)

# List issues created within an hour and updated in the last 30 minutes️
$ jira issue list --created -1h --updated -30m

# Give me issues that are of high priority, is in progress, was created this month, and has given labels 🔥
$ jira issue list -yHigh -s"In Progress" --created month -lbackend -l"high prio"

# Wait, what was that ticket I opened earlier today? 😫
$ jira issue list --history# What was the first issue I ever reported on the current board? 🤔
$ jira issue list -r$(jira me) --reverse

# What was the first bug I ever fixed in the current board? 🐞
$ jira issue list -a$(jira me) -tBug sDone -rFixed --reverse

# What issues did I report this week? 🤷‍♂️
$ jira issue list -r$(jira me) --created week
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-an-issue"&gt;
  &lt;/a&gt;
  Creating an Issue
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;create&lt;/code&gt; command lets you create an issue and supports Github-flavored and Jira-flavored markdown for writing descriptions. You can load pre-defined templates using &lt;code&gt;--template&lt;/code&gt; flag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Create an issue using interactive prompt
$ jira issue create

# Pass required parameters to skip prompt or use --no-input option
$ jira issue create -tBug -s"New Bug" -yHigh -lbug -lurgent -b"Bug description"

# Load description from template file
$ jira issue create --template /path/to/template.tmpl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HbebjIDL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/1%2AYJ7iBrmFlpBR3VSgj3UIXg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HbebjIDL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/1%2AYJ7iBrmFlpBR3VSgj3UIXg.gif" alt="Creating an issue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The preview below shows the markdown template passed in JiraCLI and the way it is rendered in the Jira UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SZ2Au3it--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2Ak5q3jXFs2m_oYHUI3qBDzA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SZ2Au3it--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2Ak5q3jXFs2m_oYHUI3qBDzA.jpeg" alt="Create shell and UI preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#viewing-an-issue"&gt;
  &lt;/a&gt;
  Viewing an Issue
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;view&lt;/code&gt; command lets you see issue details in a terminal. Atlassian document is roughly converted to a markdown and is nicely displayed in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ jira issue view ISSUE-1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JiDlfxOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/1%2A5Zt6icnszXhq3ALznT5pTA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JiDlfxOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/1%2A5Zt6icnszXhq3ALznT5pTA.gif" alt="Viewing an issue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#assigning-a-user-to-an-issue"&gt;
  &lt;/a&gt;
  Assigning a user to an issue
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;assign&lt;/code&gt; command lets you easily assign and unassign users to and from the issue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I18sqj_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/1%2ACs0JlkQWXCSP1MtUApjptw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I18sqj_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/1%2ACs0JlkQWXCSP1MtUApjptw.gif" alt="Assigning a user to an issue"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Assign user to an issue using interactive prompt
$ jira issue assign

# Pass required parameters to skip prompt
$ jira issue assign ISSUE-1 "Jon Doe"

# Assign to self
$ jira issue assign ISSUE-1 $(jira me)

# Will prompt for selection if keyword suffix returns multiple entries
$ jira issue assign ISSUE-1 suffix

# Assign to default assignee
$ jira issue assign ISSUE-1 default

# Unassign
$ jira issue assign ISSUE-1 x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cloning-an-issue"&gt;
  &lt;/a&gt;
  Cloning an Issue
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;clone&lt;/code&gt; command lets you clone an issue. You can update fields like summary, priority, assignee, labels, and components when cloning the issue. The command also allows you to replace a part of the string (case-sensitive) in summary and description using &lt;code&gt;--replace/-H&lt;/code&gt; option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Clone an issue
$ jira issue clone ISSUE-1

# Clone issue and modify the summary, priority and assignee
$ jira issue clone ISSUE-1 -s"Modified summary" -yHigh -a$(jira me)

# Clone issue and replace text from summary and description
$ jira issue clone ISSUE-1 -H"find-me:replace-with-me"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sprints"&gt;
  &lt;/a&gt;
  Sprints
&lt;/h3&gt;

&lt;p&gt;Sprints are displayed in an explorer view by default. You can output the results in a table view using the &lt;code&gt;--table&lt;/code&gt; flag. When viewing sprint issues, you can use all filters available for the issue command. You can quickly view tickets in previous, current, and next sprint tickets using flags like &lt;code&gt;--prev&lt;/code&gt;, &lt;code&gt;--next&lt;/code&gt;, and &lt;code&gt;--current&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h0e1hud5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/1%2A3pFxH8lmXAdGDpNXYhZKsQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h0e1hud5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/1%2A3pFxH8lmXAdGDpNXYhZKsQ.gif" alt="Sprints"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Display sprints in an interactive list
$ jira sprint list

# Display tickets in the current active sprint
$ jira sprint list --current

# Display tickets in the previous sprint
$ jira sprint list --prev

# Display tickets of a particular sprint
$ jira sprint list &amp;lt;SPRINT_ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  Learn more
&lt;/h3&gt;

&lt;p&gt;Check out &lt;a href="https://github.com/ankitpokhrel/jira-cli"&gt;the project page&lt;/a&gt; to view the full set of features and learn more about the project.&lt;/p&gt;

&lt;p&gt;Your suggestions and feedback is highly appreciated. Feel free to &lt;a href="https://github.com/ankitpokhrel/jira-cli/discussions"&gt;start a discussion&lt;/a&gt; or &lt;a href="https://github.com/ankitpokhrel/jira-cli/issues/new"&gt;create an issue&lt;/a&gt; to share your experience about the tool or to discuss a feature/issue. If you think this project is useful, consider contributing by &lt;a href="https://github.com/ankitpokhrel/jira-cli/stargazers"&gt;starring the repo&lt;/a&gt;, sharing with your friends, or submitting a PR.&lt;/p&gt;

</description>
      <category>go</category>
      <category>opensource</category>
      <category>showdev</category>
      <category>bash</category>
    </item>
    <item>
      <title>Asp.net core Handle Errors; Dosyaya Errors Loglamak Giriş.</title>
      <author>MustafaSamedYeyin</author>
      <pubDate>Sat, 16 Oct 2021 13:33:46 +0000</pubDate>
      <link>https://dev.to/mustafasamedyeyin/aspnet-core-handle-errors-dosyaya-errors-loglamak-giris-3fd1</link>
      <guid>https://dev.to/mustafasamedyeyin/aspnet-core-handle-errors-dosyaya-errors-loglamak-giris-3fd1</guid>
      <description>&lt;p&gt;İlk başta aşağıdaki yazımdaki adımları teker teker uygulayalım : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/mustafasamedyeyin/asp-net-core-logging-serilog-giris-200d"&gt;https://dev.to/mustafasamedyeyin/asp-net-core-logging-serilog-giris-200d&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Daha sonra HomeController'ının Index action'ını aşağıdaki gibi değiştirelim :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public IActionResult Index()
        {
            throw new Exception(Environment.NewLine + Environment.NewLine + Environment.NewLine + "Bu öylesine fırlatılmış hata;");
            return View();
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Daha sonra Error action'ınnı içini aşağıdaki gibi değiştirelim :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {

            var exHandlerFeature = HttpContext.Features.Get&amp;lt;IExceptionHandlerFeature&amp;gt;();
            var exception = exHandlerFeature.Error;
            Log.Error(exception,"Bir hata oluştu."); 

            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uygulamayı çalıştırdığınızda belirttiğiniz yolda aşağıdaki dosyalar ve loglar oluşacaktır : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y4quRJtT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou6t1p08nfkk5ak4n0sn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y4quRJtT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou6t1p08nfkk5ak4n0sn.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aşağıdaki linkteki her şeyi yaptıysanız seq'de de loglarını görebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/mustafasamedyeyin/asp-net-core-logging-serilog-giris-200d"&gt;https://dev.to/mustafasamedyeyin/asp-net-core-logging-serilog-giris-200d&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bir dahaki yazımda görüşmek dileğiyle.&lt;/p&gt;

&lt;p&gt;En iyi dileklerim ile.&lt;/p&gt;

&lt;p&gt;Mustafa Samed Yeyin.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
    </item>
    <item>
      <title>Read Data From Firebase Firestore (V9)</title>
      <author>abhisheks-12</author>
      <pubDate>Sat, 16 Oct 2021 13:25:31 +0000</pubDate>
      <link>https://dev.to/abhisheks12/read-data-from-firebase-firestore-v9-28be</link>
      <guid>https://dev.to/abhisheks12/read-data-from-firebase-firestore-v9-28be</guid>
      <description>&lt;p&gt;For reading data from firestore database we will need some starter files so clone this repo &lt;a href="https://github.com/abhisheks-12/Blog-dev-to"&gt;https://github.com/abhisheks-12/Blog-dev-to&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) Go to &lt;a href="https://firebase.google.com/"&gt;https://firebase.google.com/&lt;/a&gt; then click on Go to console.&lt;/p&gt;

&lt;p&gt;2) Now create project with name parking system and after that turn off google  analytics.&lt;/p&gt;

&lt;p&gt;3) After that click on &amp;lt;/&amp;gt; icon which represents web app.&lt;/p&gt;

&lt;p&gt;4) Register app with any name , then copy firebase configuration and if you don't have firebase install firebase first.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1NRI670q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b80i86cuvh5vwmoafed8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1NRI670q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b80i86cuvh5vwmoafed8.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5) After that go to your editor open src/Firebase/config.js &lt;br&gt;
and paste configuration here&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T9MXqyvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upgicfcs3s6un4huz6zh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T9MXqyvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upgicfcs3s6un4huz6zh.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6) Again go to firebase click on firestore database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Xo9Ouz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3457ynnj36og92moydm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Xo9Ouz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3457ynnj36og92moydm.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7) Click on start collection and create your data base like this &lt;br&gt;
picture&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iD58GQVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f540jgyhgsz37r8tu034.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iD58GQVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f540jgyhgsz37r8tu034.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8) Now come back to your text editor open src/App.js.&lt;/p&gt;

&lt;p&gt;9)Import following statements&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qy7Jp-dQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va2qfy8bvysir2ta1pgs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qy7Jp-dQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va2qfy8bvysir2ta1pgs.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;10) Now we will fetch data from firestore so we will use async function so first see this code&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--la5NxA0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/be0n1x6mp9ezi1xz8ohp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--la5NxA0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/be0n1x6mp9ezi1xz8ohp.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;11) Here we are using getData function to fetch data ,now we will save data in parkingData first console log parkingData after logging we will find doc value in this value there will be objects of our  data.&lt;/p&gt;

&lt;p&gt;12) In setCars we are setting data in array using map method . All properties will come in different objects so we are destructuring &lt;br&gt;
this properties into one object with unique id .&lt;/p&gt;

&lt;p&gt;15) Now we have data and now we are going to loop over that data &lt;br&gt;
using map and access every property and set it in our html .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZeM2ARk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbi1inw3n1zviaz1ik4q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZeM2ARk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbi1inw3n1zviaz1ik4q.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;16) Here is final code &lt;a href="https://github.com/abhisheks-12/Blog-dev-to/tree/final/src"&gt;https://github.com/abhisheks-12/Blog-dev-to/tree/final/src&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>firebase</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Most commonly used React Hooks</title>
      <author>SangeetaGogoi</author>
      <pubDate>Sat, 16 Oct 2021 13:24:57 +0000</pubDate>
      <link>https://dev.to/sangeetagogoi/most-commonly-used-react-hooks-1b9l</link>
      <guid>https://dev.to/sangeetagogoi/most-commonly-used-react-hooks-1b9l</guid>
      <description>&lt;p&gt;We are going to learn about React hooks in this blog.&lt;br&gt;
Let us start with its introduction:&lt;/p&gt;

&lt;p&gt;Hooks are new addition to React that lets us use state, and other React features such as Lifecycle methods, without writing a class.&lt;/p&gt;

&lt;p&gt;Types of Hooks in React are:&lt;/p&gt;

&lt;p&gt;&lt;b&gt; 1.State Hook &lt;/b&gt;&lt;br&gt;
Using the useState hook lets us add a React state to our functional component.The useState function is a built-in hook that can be imported from the react package.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#importing-usestate-hook-from-react"&gt;
  &lt;/a&gt;
  Importing useState hook from react
&lt;/h4&gt;

&lt;p&gt;&amp;amp; Declaring a State Variable:&lt;/p&gt;

&lt;p&gt;In a functional component we directly call the useState hook inside our component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, {useState} from "react";

function Example(){
const [time, setTime] = useState(0);
//..
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;useState hook returns a pair of values: the current state and a function that updates it. This is why we write const [time, setTime] = useState().&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reading-a-state"&gt;
  &lt;/a&gt;
  Reading a State
&lt;/h4&gt;

&lt;p&gt;In a functional component we can use 'time' as :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;p&amp;gt;You clicked {time} times&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#updating-a-state"&gt;
  &lt;/a&gt;
  Updating a state
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button onClick={() =&amp;gt; setTime(time + 1)}&amp;gt;
    Submit
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#putting-together-the-whole-code"&gt;
  &lt;/a&gt;
  Putting together the whole code:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, {useState} from "react";

function Example(){
const [time, setTime] = useState(0);

 &amp;lt;p&amp;gt;You clicked {time} times&amp;lt;/p&amp;gt;
&amp;lt;button onClick={() =&amp;gt; setTime(time + 1)}&amp;gt;
    Submit
  &amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;b&gt; 2. Effect hook&lt;/b&gt; &lt;/p&gt;

&lt;p&gt;The purpose of the useEffect hook is to allow us to perform side effects within a functional components. Examples of side effects we will typically perform in a React application are: data fetching, setting up a subscription, and manually changing the DOM in React components.&lt;/p&gt;

&lt;p&gt;It accepts two arguments:&lt;/p&gt;

&lt;p&gt;1.callback function &lt;br&gt;
 2.Dependencies Array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;useEffect(callback[, dependencies]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can put side-effect logic into the callback function, then use the dependencies argument to control when we want the side-effect to run. That’s the purpose of useEffect().&lt;/p&gt;

&lt;p&gt;&lt;b&gt; The dependencies of useEffect() &lt;/b&gt; &lt;/p&gt;

&lt;p&gt;Three cases with dependencies array:&lt;br&gt;
&lt;b&gt; 1. No dependency array &lt;/b&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useEffect } from 'react';

function App(){
useEffect(() =&amp;gt; {

    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, the callback gets fired after the initial rendering and everytime any of the component state changes.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; 2. Empty dependency array &lt;/b&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useEffect } from 'react';

function App(){
 useEffect(() =&amp;gt; {

    }, []);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, the callback gets fired only once after the initial rendering.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; 3. With dependencies &lt;/b&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useEffect } from 'react';

function App(){
useEffect(() =&amp;gt; {

    }, [dependency1, dependency2]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, the callback gets fired after the initial rendering and every time any of the dependencies in the dependencies array changes.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Summary &lt;/b&gt;:&lt;/p&gt;

&lt;p&gt;useEffect(callback, dependencies) invokes the callback after initial mounting, and on later renderings, if any value inside dependencies has changed.&lt;/p&gt;




&lt;p&gt;&lt;b&gt; 3. Ref hook &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;useRef() is JavaScript function, which creates and returns a mutable JavaScript object.&lt;br&gt;
This hook accepts some value and returns an object with the given value. &lt;/p&gt;

&lt;p&gt;&lt;b&gt; Syntax &lt;/b&gt;&lt;br&gt;
Importing the ref hook and setting up looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {useRef} from 'react';

const refContainer = useRef(initialValue);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h4&gt;

&lt;p&gt;1.Getting access to DOM nodes&lt;br&gt;
The use case of useRef() is getting access to DOM nodes. If we want to pass the value we get from useRef() as a ref prop on any React element, React will set the .current property of an element to the corresponding DOM node. This allows us to do things like grab input values or set focus, for example in the Form below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {useRef} from 'react';

const Form =() =&amp;gt;{

const nameRef = useRef();

//Here variable Name contains the current value of input field 
const name = nameRef.current.value; 

return(
    &amp;lt;&amp;gt;
      &amp;lt;label&amp;gt;
        Name:
        &amp;lt;input
          placeholder="name"
          type="text"
          ref={nameRef}  
        /&amp;gt;
      &amp;lt;/label&amp;gt;
      //Here we added an event which will set the input to focus when user clicks on the button
      &amp;lt;button onClick={() =&amp;gt; nameRef.current.focus()}&amp;gt;
        Focus Name Input
      &amp;lt;/button&amp;gt;
  &amp;lt;/&amp;gt;
)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2storing-values"&gt;
  &lt;/a&gt;
  2.Storing Values
&lt;/h4&gt;

&lt;p&gt;A unique way to implement a useRef() hook is to use it to store values instead of DOM references. These values can either be a state that does not need to change too often or a state that should not trigger full re-rendering of the component. This can be used when we want to implement toggle function, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let toggled = useRef(false);

  const handleToggle  = () =&amp;gt; {
    toggled.current = !toggled.current;
  }

return(
&amp;lt;&amp;gt;
   &amp;lt;label onMouseMove={handleToggle}&amp;gt;&amp;lt;/label&amp;gt;
&amp;lt;/&amp;gt;
)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;b&gt; 4.Context hook &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;useContext hook is used to create common data that can be accessed throughout the component hierarchy without passing the props down manually to each level. Context defined will be available to all the child components without involving props.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#importing-the-hook-from-the-react-library"&gt;
  &lt;/a&gt;
  Importing the hook from the React library:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {useContext} from 'react';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We call useContext() function, which accepts context object as argument and returns current context value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const contextValue = useContext(MyContext);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The context object should be created above the useContext() hook before the hook is called (or imported from another file).&lt;/p&gt;

&lt;p&gt;Usage of useContext() in functional component is same as we would use Context API, except that the hook works with a MyContext.Provider and MyContext.Consumer component in one call.&lt;/p&gt;

&lt;p&gt;Let us consider, we are building app where we have a button and by clicking on it the status of authentication is changed from Yes to No.&lt;/p&gt;

&lt;p&gt;Firstly we need to create Context:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Creating the context object and passing the default values. 

export const authContext = React.createContext({status:null,login:()=&amp;gt;{}}); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we import Context to our file and use it's values anywhere we find it necessary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {AuthContext} from './authContext';
import {useContext} from 'react';

export const Auth = () =&amp;gt;{

const auth = useContext(AuthContext); 

return ( 
    &amp;lt;&amp;gt; 
      &amp;lt;h1&amp;gt;Are you authenticated?&amp;lt;/h1&amp;gt; 
      {auth.status ?  &amp;lt;p&amp;gt;Yes you are&amp;lt;/p&amp;gt; :  &amp;lt;p&amp;gt;No you are not&amp;lt;/p&amp;gt; 
       } 
      &amp;lt;button onClick={auth.login}&amp;gt;Click To Login&amp;lt;/button&amp;gt; 
    &amp;lt;/&amp;gt; 
  ); 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt; Summary &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;React’s useContext hook makes it easy to pass data throughout your app without manually passing props down the tree.&lt;/p&gt;


  

&lt;p&gt;&lt;b&gt; References For this blog &lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;https://reactjs.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/olenadrugalya/basic-hooks-in-react-usecontext-4bie"&gt;https://dev.to/olenadrugalya/basic-hooks-in-react-usecontext-4bie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Wicked Blocks V2: Ready Made Tailwind CSS blocks, for your next project. updated with new blocks. 500% free</title>
      <author>Michael Andreuzza</author>
      <pubDate>Sat, 16 Oct 2021 13:23:42 +0000</pubDate>
      <link>https://dev.to/mike_andreuzza/wicked-blocks-v2-ready-made-tailwind-css-blocks-for-your-next-project-updated-with-new-blocks-500-free-1egf</link>
      <guid>https://dev.to/mike_andreuzza/wicked-blocks-v2-ready-made-tailwind-css-blocks-for-your-next-project-updated-with-new-blocks-500-free-1egf</guid>
      <description>&lt;p&gt;Hello beautiful people! 🖐&lt;/p&gt;

&lt;p&gt;How are you all doing?&lt;br&gt;
I have made something for those that like Tailwind CSS to the bones and back.Yes, for you, don't be skeptical....come on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-is-wwwwickedblocksdev"&gt;
  &lt;/a&gt;
  So what is &lt;a href="http://www.WickedBlocks.dev"&gt;www.WickedBlocks.dev&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;WICKED BLOCKS are a growing collection of layouts  and components built with Tailwind CSS  and Alpine.js ready to copy-paste on your Tailwind project.&lt;br&gt;
Get it here ---&amp;gt; Wicked Blocks&lt;br&gt;
In this version you will find updated blocks and and the addition of Alpine.js on the navigation, plus all are  visually updated and with a better and nicer design , bro: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Left Headers&lt;/li&gt;
&lt;li&gt;Centered Headers&lt;/li&gt;
&lt;li&gt;Right Headers&lt;/li&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;li&gt;Pricing&lt;/li&gt;
&lt;li&gt;Cards&lt;/li&gt;
&lt;li&gt;Alerts&lt;/li&gt;
&lt;li&gt;Grids&lt;/li&gt;
&lt;li&gt;Clients&lt;/li&gt;
&lt;li&gt;Modals&lt;/li&gt;
&lt;li&gt;Content&lt;/li&gt;
&lt;li&gt;Forms&lt;/li&gt;
&lt;li&gt;Navigation ( with Alpine.js )&lt;/li&gt;
&lt;li&gt;Sidebars&lt;/li&gt;
&lt;li&gt;Footers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I added the new blocks yesterday, I am still working ( literally right now ) with the responsiveness of some of them, but 90% are responsive.&lt;/p&gt;

&lt;p&gt;I hope you guys like it and remember that I am always open to feedback and DM's are also open for anything you want to know.&lt;/p&gt;

&lt;p&gt;Or Twitter u/mike_andreuzza&lt;/p&gt;

&lt;p&gt;Let me drop some previews here....&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qkv65IRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://preview.redd.it/1dfm05645tt71.png%3Fwidth%3D2480%26format%3Dpng%26auto%3Dwebp%26s%3D86088c1b0fd0ad0dc537deb11b63c0007f823b69" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qkv65IRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://preview.redd.it/1dfm05645tt71.png%3Fwidth%3D2480%26format%3Dpng%26auto%3Dwebp%26s%3D86088c1b0fd0ad0dc537deb11b63c0007f823b69" alt="a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RmT5_We2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://preview.redd.it/3nnfkmfj7tt71.png%3Fwidth%3D2462%26format%3Dpng%26auto%3Dwebp%26s%3D12b6cc2701804eee947864a23e494ce61f73f5cd" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RmT5_We2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://preview.redd.it/3nnfkmfj7tt71.png%3Fwidth%3D2462%26format%3Dpng%26auto%3Dwebp%26s%3D12b6cc2701804eee947864a23e494ce61f73f5cd" alt="b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--npDfpgEK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://preview.redd.it/s7fm5gep7tt71.png%3Fwidth%3D2462%26format%3Dpng%26auto%3Dwebp%26s%3D2f949147e33b45448b015ca8dafb44e16a379bb7" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--npDfpgEK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://preview.redd.it/s7fm5gep7tt71.png%3Fwidth%3D2462%26format%3Dpng%26auto%3Dwebp%26s%3D2f949147e33b45448b015ca8dafb44e16a379bb7" alt="c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tF8KsYCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://preview.redd.it/58sbr1vw7tt71.png%3Fwidth%3D2462%26format%3Dpng%26auto%3Dwebp%26s%3D88d3cfebe6ff19d2008e0bd5a633d0edcb1f2756" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tF8KsYCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://preview.redd.it/58sbr1vw7tt71.png%3Fwidth%3D2462%26format%3Dpng%26auto%3Dwebp%26s%3D88d3cfebe6ff19d2008e0bd5a633d0edcb1f2756" alt="d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CS2IsAyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://preview.redd.it/n5jw8gu18tt71.png%3Fwidth%3D2462%26format%3Dpng%26auto%3Dwebp%26s%3Dd082355a669d89606b8457f38ebbe40ef4ad084a" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CS2IsAyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://preview.redd.it/n5jw8gu18tt71.png%3Fwidth%3D2462%26format%3Dpng%26auto%3Dwebp%26s%3Dd082355a669d89606b8457f38ebbe40ef4ad084a" alt="f"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Lesser used React Hooks</title>
      <author>SangeetaGogoi</author>
      <pubDate>Sat, 16 Oct 2021 13:18:17 +0000</pubDate>
      <link>https://dev.to/sangeetagogoi/lesser-used-react-hooks-1fnf</link>
      <guid>https://dev.to/sangeetagogoi/lesser-used-react-hooks-1fnf</guid>
      <description>&lt;p&gt;In this blog we are going to talk about React hooks that are not used commonly.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; 1. useMemo Hook &lt;/b&gt;  :&lt;/p&gt;

&lt;p&gt;The useMemo is a hook used in the functional component of react that returns a memoized value.In react also, we use this concept, whenever in the React component, the state and props do not change the component and the component does not re-render, it shows the same output.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Syntax &lt;/b&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const memoizedValue = useMemo(() =&amp;gt; computeExpensiveValue(a, b), [a, b]);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;useMemo takes in a function and an array of dependencies. &lt;/p&gt;

&lt;p&gt;&lt;b&gt; Usage of useMemo &lt;/b&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const memoizedList = useMemo(() =&amp;gt; {
  return userList.map(user =&amp;gt; {
    return {
      ...user,
      name: someExpensiveOperation(user.name)
    } 
  }) 
}, [userList])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;b&gt; 2. useCallback Hook &lt;/b&gt; :&lt;/p&gt;

&lt;p&gt;The useCallback hook is used when we have a component in which the child is rerendering again and again without need.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Syntax &lt;/b&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const memoizedCallback = useCallback(
  () =&amp;gt; {
    doSomething(a, b);
  },
  [a, b],
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pass an inline callback and an array of dependencies. useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed. &lt;/p&gt;

&lt;p&gt;&lt;b&gt; Purpose of useCallback &lt;/b&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function MyComponent() {
  // handleClick is re-created on each render
  const handleClick = () =&amp;gt; {
    console.log('Clicked!');
  };

  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;handleClick is a different function object on every rendering of MyComponent.&lt;/p&gt;

&lt;p&gt;But in some cases you need to maintain a single function instance between renderings:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A functional component wrapped inside React.memo() accepts a function object prop&lt;/li&gt;
&lt;li&gt;When the function object is a dependency to other hooks, e.g. useEffect(..., [callback])&lt;/li&gt;
&lt;li&gt;When the function has some internal state, e.g. when the function is debounced or throttled.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s when useCallback(callbackFun, deps) is helpful: given the same dependency values deps, the hook returns (aka memoizes) the function instance between renderings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useCallback } from 'react';

function MyComponent() {
  // handleClick is the same function object
  const handleClick = useCallback(() =&amp;gt; {
    console.log('Clicked!');
  }, []);

  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;b&gt; 3.useReducer Hook &lt;/b&gt;:&lt;/p&gt;

&lt;p&gt;useReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Syntax &lt;/b&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [state, dispatch] = useReducer(reducer, initialArg, init);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It accepts a reducer of type (state, action) =&amp;gt; newState, and returns the current state paired with a dispatch method. (If you’re familiar with Redux, you already know how this works.&lt;/p&gt;

&lt;p&gt;Here is the countReducer example;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const initialState = { count: 0 }

const counterReducer = (state, action) =&amp;gt; {
  switch (action.type) {
    case 'increment':
      return {count: state.count + 1};
    case 'decrement':
      return {count: state.count - 1};
    default:
      throw new Error();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt; Specifying the initial State &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Two ways to initialized the useReducer state;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;1. Basic &lt;/b&gt; :&lt;/p&gt;

&lt;p&gt;We can just give it as a second argument to useReducer call;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [state, dispatch] = useReducer(
  countReducer,
  { count: 0 } // second argument
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt; 2. Lazy Initialization &lt;/b&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const initState = (defaultCount) =&amp;gt; ({ count: defaultCount })

const Counter = ({ counter }) =&amp;gt; {
    const [state, dispatch] = useReducer(
      countReducer,
      counter, // second argument
        initState // third argument
    );

    // Rest of the component...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt; Usage &lt;/b&gt;&lt;br&gt;
After we initialize it we just need to call dispatch functions that we are getting from useReducer hook and use it as a handler inside our elements.&lt;/p&gt;

&lt;p&gt;React guarantees that dispatch function identity is stable and won’t change on re-renders.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Counter = ({ counter }) =&amp;gt; {
    const [state, dispatch] = useReducer(countReducer, 0);

    return (
    &amp;lt;&amp;gt;
      Count: {state.count}
      &amp;lt;button onClick={() =&amp;gt; dispatch({type: 'decrement'})}&amp;gt;-&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; dispatch({type: 'increment'})}&amp;gt;+&amp;lt;/button&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;References &lt;/b&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://reactjs.org/docs/hooks-reference.html"&gt;https://reactjs.org/docs/hooks-reference.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dmitripavlutin.com/dont-overuse-react-usecallback/"&gt;https://dmitripavlutin.com/dont-overuse-react-usecallback/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>REST API in Express (ES6)</title>
      <author>SangeetaGogoi</author>
      <pubDate>Sat, 16 Oct 2021 13:17:08 +0000</pubDate>
      <link>https://dev.to/sangeetagogoi/rest-api-in-express-es6-23m5</link>
      <guid>https://dev.to/sangeetagogoi/rest-api-in-express-es6-23m5</guid>
      <description>&lt;p&gt;What is a REST API&lt;/p&gt;

&lt;p&gt;From &lt;a href="https://www.redhat.com/en/topics/api/what-is-a-rest-api"&gt;Redhat&lt;/a&gt; &lt;br&gt;
A REST API (also known as RESTful API) is an application programming interface (API or web API) that conforms to the constraints of REST architectural style and allows for interaction with RESTful web services. REST stands for representational state transfer and was created by computer scientist Roy Fielding.&lt;/p&gt;

&lt;p&gt;To create a Nodejs project (for a runtime environment) we will create a folder called rest-api and run the command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init - y

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is done, we will install few packages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i --save express cors mongoose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Discussing the packages&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Express: It is used to write the main code for the REST API&lt;/li&gt;
&lt;li&gt;Cors: Used to make requests from a different domain. Eg: Request from frontend which is hosted in &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to the backend which is &lt;a href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Mongoose: Mongoose is an ORM package which we will need to communicate with MongoDB.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To run ES6 &lt;code&gt;import&lt;/code&gt; code instead of &lt;code&gt;require&lt;/code&gt; we will add this piece of code to our package.json&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"type": "module"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Paste the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';

import authRoutes from './auth.routes.js';

const app = express();
const port = process.env.PORT || 8000

app.use(express.urlencoded({ extended: true }))
app.use(express.json())
app.use(cors())

authRoutes(app);

mongoose.connect(process.env.mongoURI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() =&amp;gt; {
    console.log("Connected to Database");
}).catch(err =&amp;gt; {
    console.log('Could not connect to the database', err);
    process.exit();
});

app.listen(port, () =&amp;gt; {
    console.log('Backend is running on port: ' + port)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explaining-the-code-step-by-step"&gt;
  &lt;/a&gt;
  Explaining the code step by step
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we are going to import the libraries that we have installed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import authRoutes from './auth.routes.js';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are importing a file, which we will create soon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = express();
const port = process.env.PORT || 8000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first line we are creating an instance of express to use through out the app&lt;br&gt;
In the second line we are declaring a port variable to that takes value from an &lt;code&gt;.env&lt;/code&gt; file or the value is 8000&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use(express.urlencoded({ extended: true }))
app.use(express.json())
app.use(cors())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;app.use(express.urlencoded({extended: true })) is a method inbuilt in express to recognize the incoming Request Object as strings or arrays. &lt;/p&gt;

&lt;p&gt;app.use(express.json()) is a method inbuilt in express to recognize the incoming Request Object as a JSON Object&lt;/p&gt;

&lt;p&gt;app.use(cors()) is using cors as a middleware for incoming requests from a different origin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;authRoutes(app);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;authRoutes(app) here we calling authRoutes function passing the app instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mongoose.connect(process.env.mongoURI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() =&amp;gt; {
    console.log("Connected to Database");
}).catch(err =&amp;gt; {
    console.log('Could not connect to the database', err);
    process.exit();
});

app.listen(port, () =&amp;gt; {
    console.log('Backend is running on port: ' + port)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These lines of code are used to connect to the mongodb and also check if it's running on which port.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { register, login } from './auth.controller.js';

const authRoutes = (app) =&amp;gt; {
  app.route('/register')
    .post(register)
  app.route('/signin')
    .post(login)
}

export default authRoutes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are routing the requests based on the method that is incoming.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import bcrypt from 'bcryptjs';
import User from './User.model.js';

export const register = (req, res) =&amp;gt; {
  const { email, password, name, dob, gender } = req.body.userDetails
  const userData = {
    email, password, name, dob, gender
  }
  if (!email || !password || !name) {
    return res.status(422).json({ error: "Please add all the credentials" })
  }
  User.findOne({ email })
    .then((data) =&amp;gt; {
      if (data) {
        res.send({ error: 'Email already registered' });
      } else {
        bcrypt.hash(password, 10, (err, hash) =&amp;gt; {
          userData.password = hash;
          User.create(userData, (err, data) =&amp;gt; {
            res.status(200).json({ msg: 'Successfully registered' });
          })
        })
      }
    })
    .catch((err) =&amp;gt; res.send({ error: err }))
};

export const login = (req, res) =&amp;gt; {

  const { email, password } = req.body.userDetails;
  User.findOne({ email: email })
    .then((user) =&amp;gt; {
      if (!user) {
        res.send({ error: 'Account not found' })
      } else {
        if (!bcrypt.compareSync(password, user.password)) {
          res.send({ error: "You entered a wrong password" })
        } else if (bcrypt.compareSync(password, user.password)) {
          delete user.password;
          res.status(200).json({ user: user.toJSON() });

        }
      }
    })
    .catch((err) =&amp;gt; res.json({ error: err }))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will not go into the details too much but here we have written two function for login and register.&lt;/p&gt;

&lt;p&gt;While registering we are doing basic check if email, password and name are present or not. Before registering to our app, we will check if he is already present or not in the database. If he isn't present we will register him and use bcrypt to encrypt his password and save to database.&lt;/p&gt;

&lt;p&gt;While logging in we are checking if the user is present or not. If not, we send an 'Account not found' error. If present, we pull out his data from database, remove his password and send back the data to the frontend.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import mongoose from 'mongoose';

const Schema = mongoose.Schema;

const UserSchema = Schema({
  name: {
    type: String,
    maxlength: 50,
  },
  email: {
    type: String,
    trim: true,
    unique: true,
    required: true,
  },
  password: {
    type: String,
    required: true,
  },
  gender: {
    type: String
  },
  dob: {
    type: Date
  }
})

const User = mongoose.model('User', UserSchema)
export default User;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, this is the User schema for all the users.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
