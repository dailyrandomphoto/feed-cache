<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>1 line of code: How to shallow clone an Array</title>
      <author>martin krause</author>
      <pubDate>Sun, 24 Oct 2021 12:38:47 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-shallow-clone-an-array-38aj</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-shallow-clone-an-array-38aj</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const shallowClone = arr =&amp;gt; arr.slice(0); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creates a shallow-copied clone of the provided array. Since it's a shallow copy, nested objects or arrays will be copied by reference, not duplicated.&lt;/p&gt;




&lt;p&gt;Happy coding and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>MongoDB AND Operator ( $and ) | How to use it?</title>
      <author>Srajan Gupta</author>
      <pubDate>Sun, 24 Oct 2021 12:27:05 +0000</pubDate>
      <link>https://dev.to/srajangupta__/mongodb-and-operator-and-how-to-use-it-6df</link>
      <guid>https://dev.to/srajangupta__/mongodb-and-operator-and-how-to-use-it-6df</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Xb6Z3rdP9k8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This tutorial is all about the AND Operator in MongoDB.&lt;br&gt;
This tutorial includes both theoretical and hands-on explanation.&lt;/p&gt;

&lt;p&gt;About Me:&lt;br&gt;
Project Enquiries: &lt;a href="https://www.srajangupta.com/"&gt;https://www.srajangupta.com/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Day 16 of 100 Days of Code &amp; Scrum: Plan of Counterattack for the Next.js Week</title>
      <author>Rammina</author>
      <pubDate>Sun, 24 Oct 2021 11:47:14 +0000</pubDate>
      <link>https://dev.to/rammina/day-16-of-100-days-of-code-scrum-plan-of-counterattack-for-the-nextjs-week-56kd</link>
      <guid>https://dev.to/rammina/day-16-of-100-days-of-code-scrum-plan-of-counterattack-for-the-nextjs-week-56kd</guid>
      <description>&lt;p&gt;Happy Sunday, everyone!&lt;/p&gt;

&lt;p&gt;I kickstarted my week by getting my new user story article finished. I'm going to do proofreading on it tomorrow, as I'm way too sleepy now. Also, I worked on creating my banner with my editor. I'm going for a milk tea color palette/theme, it's still a work in progress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I did my Weekly Sprint Review and Retrospective, in which I went over what I've managed to do well, what my shortcomings were, and what I could do better in the future. It most likely was my worst week so far.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Since it's the start of a new week, I planned out what I should be doing and established my new &lt;code&gt;Sprint Goals&lt;/code&gt;. My focus for this week will still be &lt;strong&gt;Scrum&lt;/strong&gt;, to prepare for my PSM I exam and the upcoming &lt;a href="https://chingu.io/"&gt;Chingu&lt;/a&gt; voyage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;focus on diving deeper into &lt;strong&gt;Scrum&lt;/strong&gt; principles&lt;/li&gt;
&lt;li&gt;study for Professional Scrum Master I (PSM I) certification&lt;/li&gt;
&lt;li&gt;finish my guides about Scrum&lt;/li&gt;
&lt;li&gt;continue networking&lt;/li&gt;
&lt;li&gt;if I have extra time, learn about Next.js to prepare for coding my business website&lt;/li&gt;
&lt;li&gt;no interviews&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B5wNGwSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyi1ip2bzgnxx6zfbr8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B5wNGwSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyi1ip2bzgnxx6zfbr8m.png" alt="Thank You Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you to everyone who supported me and interacted with me during the past weeks! I hope we can make a lot of progress this week.&lt;/p&gt;

&lt;p&gt;I hope everyone's enjoying their weekend!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>9 Months Are Enough : Job Placement </title>
      <author>Keshav</author>
      <pubDate>Sun, 24 Oct 2021 11:36:55 +0000</pubDate>
      <link>https://dev.to/keshav44483499/9-months-are-enough-job-placement-3d56</link>
      <guid>https://dev.to/keshav44483499/9-months-are-enough-job-placement-3d56</guid>
      <description>&lt;h2&gt;
  &lt;a href="#phase-1-month-04%E2%80%8B%E2%80%8B"&gt;
  &lt;/a&gt;
  Phase 1 | Month 0-4​​
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Let's get started with programming and master data structure&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Learn the essentials of programming along with writing optimised code in terms of time &amp;amp; space, recursion and OOPS concepts using Java&lt;/p&gt;

&lt;p&gt;Get familiar with most common ways of organising your data using LL, Stacks, Queues, Trees, BST and Hashmaps&lt;/p&gt;

&lt;p&gt;Learn to store and access complicated real world data more efficiently with the help of Priority Queues, Tries, Graphs and Dynamic Programming&lt;/p&gt;

&lt;p&gt;Solve 350+ coding problems | Ready to crack any DS &amp;amp; algo interview round.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-2-month-56%E2%80%8B"&gt;
  &lt;/a&gt;
  Phase 2 | Month 5-6​
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Let's build Some Amazing Responsive Websites&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Learn key technologies for creating interactive and stunning Websites – HTML, CSS, JavaScript, JQuery &amp;amp; Ajax&lt;/p&gt;

&lt;p&gt;Work on some really cool projects from starting to deployment involving Music Player, Calculator, some games etc&lt;/p&gt;

&lt;p&gt;Practice some Mock interviews and contact seniors for discussions &amp;amp; problem solving&lt;/p&gt;

&lt;p&gt;Become Front End Developer | 4 Projects Completed | 1 Live Project with deployement&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-3-month-78%E2%80%8B"&gt;
  &lt;/a&gt;
  Phase 3 | Month 7-8​
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Write scalable backend servers using Nodejs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Learn to create your own servers, use database to store data, build APIs and deploy your apps for the world to use using NodeJs&lt;br&gt;
Create some end to end usable projects such as Todo List, Social Media Website, Habit Tracker, Expense Manager etc&lt;/p&gt;

&lt;p&gt;Practice some Mock interviews and contact seniors for discussions &amp;amp; problem solving&lt;/p&gt;

&lt;p&gt;Become Full Stack Developer | 4 Projects Completed | 1 Live Project with deployment&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-4-month-9%E2%80%8B"&gt;
  &lt;/a&gt;
  Phase 4 | Month 9​
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Learn another amazing library for frontend, React&lt;/code&gt;&lt;br&gt;
Take your JS skills to next level with React, Redux, Context API, React Router and React Hooks. Work on some amazing projects&lt;/p&gt;

&lt;p&gt;Practice some Mock interviews and contact seniors for discussions &amp;amp; problem solving&lt;/p&gt;

&lt;p&gt;Become master of Front End | 1 Live Project with Deployment&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-5-month-9-onwards%E2%80%8B"&gt;
  &lt;/a&gt;
  Phase 5 | Month 9 onwards​
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Grab additional skills and gear up for placements&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Learn to build scalable and robust systems using System Design concepts&lt;/p&gt;

&lt;p&gt;Learn the pre-requisites for clearing any tech interview, aptitude, Operating Systems, DBMS and SQL&lt;/p&gt;

&lt;p&gt;Create an impressive resume through multiple personal review sessions and prepare for HR and non-tech rounds through and take your soft skills to next level&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-you-are-ready-to-land-your-dream-job"&gt;
  &lt;/a&gt;
  Now You are Ready to Land your dream job 😊
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#follow-me-if-possible-github-link"&gt;
  &lt;/a&gt;
  Follow Me : &lt;a href="https://github.com/keshavgbpecdelhi"&gt;If possible&lt;/a&gt; (Github Link)
&lt;/h6&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>python</category>
    </item>
    <item>
      <title>Tailwind isn't the answer</title>
      <author>Madi Ostoja</author>
      <pubDate>Sun, 24 Oct 2021 11:33:40 +0000</pubDate>
      <link>https://dev.to/madeleineostoja/tailwind-isnt-the-answer-2opj</link>
      <guid>https://dev.to/madeleineostoja/tailwind-isnt-the-answer-2opj</guid>
      <description>&lt;p&gt;&lt;a href="https://tailwindcss.com"&gt;Tailwind CSS&lt;/a&gt; has taken the frontend development world by storm over the last few years. A utility-first library of CSS classes, it promises a new way of styling that's more consistent, maintainable, and faster than writing CSS directly. And for the most part, it delivers on that promise. &lt;/p&gt;

&lt;p&gt;By using Tailwind you're almost guaranteed a single source of truth for all the values you use throughout a project. From typesets to spacing to colours, everything is defined in a single place. Which means that your code stays consistent and you aren't making things up as you go.&lt;/p&gt;

&lt;p&gt;This was Tailwind's biggest idea, and the greatest benefit of utility-first CSS as a concept: compose don't create. &lt;/p&gt;

&lt;p&gt;Tailwind achieves this with an extensive library of CSS classes to style &lt;em&gt;everything&lt;/em&gt;. The idea being that you no longer write any CSS of your own, you compose predefined classes like lego pieces for every single property. &lt;/p&gt;

&lt;p&gt;Developers new to this way of working often have a knee-jerk reaction just from looking at example code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 Button
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's no denying that Tailwind is hideous. Its creator acknowledges as much right on the project home page. But that's just pedantry, and if the Tailwind way of doing things really was the panacea to all our problems then it would be a very small price to pay.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;The problem with this approach isn't that its ugly, or bloated (Tailwind &lt;a href="https://tailwindcss.com/docs/optimizing-for-production"&gt;purges&lt;/a&gt; unused classes), or that "you might as well write inline styles" (you shouldn't). It's that in order to apply a consistent set of values with classes, you also have to create classes for &lt;em&gt;every&lt;/em&gt; conceivable  set of rule:value pairs in CSS, even where it adds no value at all. So you end up using classes like &lt;code&gt;.block&lt;/code&gt; rather than writing &lt;code&gt;display: block&lt;/code&gt; and &lt;code&gt;.text-center&lt;/code&gt; rather than &lt;code&gt;text-align: center&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course you can mix Tailwind's more useful classes with regular CSS. But then you're breaking the Tailwind style-by-classes abstraction, and you have to maintain two seperate styling touchpoints for every element.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"So what?"&lt;/em&gt; you might ask, what's wrong with just using those classes rather than CSS? It certainly saves some keystrokes. Here is where Tailwind introduces new problems it shouldn't have to solve in the first place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reinventing-css"&gt;
  &lt;/a&gt;
  Reinventing CSS
&lt;/h3&gt;

&lt;p&gt;Tailwind has to reinvent everything regular CSS can already do. Media queries, pseudo elements, selectors, and states. All of it now has to fit into the classes-only paradigm. &lt;/p&gt;

&lt;p&gt;Tailwind achieves this with what it calls modifiers. By prepending Tailwind classes with &lt;code&gt;md:&lt;/code&gt; they will only apply above the &lt;code&gt;md&lt;/code&gt; breakpoint. By appending &lt;code&gt;hover:&lt;/code&gt; a class will be applied in a &lt;code&gt;:hover&lt;/code&gt; state. And so on. &lt;/p&gt;

&lt;p&gt;Each of these tools is a poor facsimile of the functionality gaps it has to fill. Want an &lt;code&gt;:nth-child&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt; sibling selector? Back to CSS. Want to target the devices between two breakpoints? Back to CSS. Want to target children of an element? Back to CSS. You get the picture. &lt;/p&gt;

&lt;p&gt;Of course you &lt;em&gt;can&lt;/em&gt; go back to CSS to do any of these things. Lovingly coined "bailwind", almost every project will need at least a little custom CSS when Taiwind's classes and modifiers just don't cut it. But then you're back at breaking the Tailwind abstraction, and giving yourself maintenance headaches.&lt;/p&gt;

&lt;p&gt;And if this is already a given, then why use pointless classes like &lt;code&gt;block&lt;/code&gt; when it adds no consistency or maintainability value over writing &lt;code&gt;display: block&lt;/code&gt; in CSS, other than a few saved keystrokes? Because while gap-filling classes like this don't add value, they &lt;em&gt;do&lt;/em&gt; add a new Domain Specific Language (DSL) to learn on top of the CSS we all already know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#class-soup"&gt;
  &lt;/a&gt;
  Class soup
&lt;/h3&gt;

&lt;p&gt;The thing every critic of Tailwind yells at first, its enormous class strings. Yes, they're ugly, but who cares. The problem isn't a surface-level developer perfectionism one. It again comes back to modifiers. &lt;/p&gt;

&lt;p&gt;Every rule that applies to a modified state needs its own class with its own modifier. Unlike in CSS where these states and pseudo elements are naturally organised into logical blocks, Tailwind's modified classes can very quickly become a huge, difficult to maintain mess that has to be carefully teased apart line by line.&lt;/p&gt;

&lt;p&gt;Take a contrived example of the button we had in the intro of this article, with an icon of some sort added to a &lt;code&gt;::before&lt;/code&gt; pseudo element, and less-than-ideal attention given to class ordering.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative before:absolute bg-blue-500 hover:bg-blue-700 text-white before:left-2 font-bold before:text-sm py-2 px-6 rounded  before:top-1/2 before:content-['\f00c']  before:-translate-y-1/2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Button with icon
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course in this particular example the icon would be better placed as a real element inside the button, but the point stands. Without (and even with) careful ordering of classes, these jumbles very quickly become a maintenance nightmare. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jit-to-the-rescue"&gt;
  &lt;/a&gt;
  JIT to the rescue?
&lt;/h3&gt;

&lt;p&gt;Tailwind's new &lt;a href="https://tailwindcss.com/docs/just-in-time-mode"&gt;Just In Time mode&lt;/a&gt; compiles just the classes you use on the fly, rather than pruning back a goliathan stylesheet after the fact. It allows you to use modifiers everywhere out of the box, and most importantly write arbitrary values right in Tailwind classes, like &lt;code&gt;margin-[100px]&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This is another language feature that was added to Tailwind's style-by-classes DSL in order to fix problems it introduced itself. And while arbitrary values mean you don't have to break out of Tailwind's paradigm as often, they also diminish the core value that Tailwind provides — a single source of truth for a whole project. Taken to its logical extreme Tailwind JIT is really just reinventing CSS, bit by bit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;As I said at the very beginning, Tailwinds' central idea is a very good one — a low-level, utility-driven design system to get rid of magic numbers and bring consistency to your CSS. The problem was the implementation.&lt;/p&gt;

&lt;p&gt;Thankfully CSS now has the same solution as every other language to consistent values: variables. CSS variables, or more properly &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*"&gt;CSS custom properties&lt;/a&gt;, are fairly new to the language but already adopted by every major browser, and used extensively in Tailwind's own internals.&lt;/p&gt;

&lt;p&gt;For example, Tailwind's &lt;code&gt;.p-4&lt;/code&gt; padding utility could be rewritten like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--p-4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--p-4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And since we no longer have to write separate classes for every rule:value pair, we can greatly simplify our utility-first design system. We could have one set of size variables that can be applied to any part of padding, margin, width, height, position, etc. Without needing separate utilities for every combination of every property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--size-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--size-4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size-2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size-4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size-4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And since variables are part of the platform, they have a native runtime. We can interact with CSS variables using Javascript, and update them dynamically. This makes things like reskinning a whole interface for dark mode possible with just a couple lines of code, without introducing any new utilities or tools.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;enableDarkMode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`--color-background`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`black`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`--color-text`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`white`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So why don't we, instead of reinventing the styling paradigm altogether, just abstract all the values in an interface into a single source of truth by putting them in CSS variables that can be used &lt;em&gt;anywhere&lt;/em&gt;, with real CSS, without all these new problems?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-pollen"&gt;
  &lt;/a&gt;
  Introducing Pollen
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.pollen.style"&gt;Pollen&lt;/a&gt; is a new CSS library that does exactly that. Inspired by Tailwind, it takes its best ideas and implements them as a micro-library of CSS variables. With a 1kb core that can be used anywhere, without a buildstep or class naming conventions, it gives us all of the biggest benefits of Tailwind without reinventing how we write CSS.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/madeleineostoja/embed/LYjGjGa?height=600&amp;amp;default-tab=css&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Write CSS however you want, with regular pseudo selectors, media queries, and all the rest, and abstract out every value choice into a single source of truth. &lt;/p&gt;

&lt;p&gt;Extend it into your own design system with plain old CSS. Modify it on the fly with JavaScript without any runtime library. Make it responsive without new concepts or tools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-you-might-not-even-need-it"&gt;
  &lt;/a&gt;
  But you might not even need it
&lt;/h3&gt;

&lt;p&gt;Full disclosure: I created Pollen. But I'm not trying to sell you on using it. I'm trying to sell you on the ideas behind it. If you already have a solid design system with sizes, typesets, colours, and all the other shared values of an interface defined, then you don't need Pollen, and you certainly don't need Tailwind. Write them as CSS variables in one place, and use them everywhere. That's the way out of this insanity. &lt;/p&gt;

&lt;p&gt;Bring consistency to CSS by getting rid of magic numbers with variables. The other problems of CSS (deep composition, leaky inheritance, performance optimisation) aren't solved by Tailwind, but they are made harder by the new DSL it tries to introduce. At least by sticking to regular CSS you have all the other patterns and tools we as a community have been working on for the last decade at your disposal, without any gotchas.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Building Tailwind CSS checkbox and radio input fields</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Sun, 24 Oct 2021 10:38:29 +0000</pubDate>
      <link>https://dev.to/themesberg/building-tailwind-css-checkbox-and-radio-input-fields-2alg</link>
      <guid>https://dev.to/themesberg/building-tailwind-css-checkbox-and-radio-input-fields-2alg</guid>
      <description>&lt;p&gt;Ever since I've been using Tailwind CSS it has completely changed my way of building user interfaces and as things stand right now, I can't imagine going back to an OOCSS framework, such as Bootstrap. It's just faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rLhIkLGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4dkspfv7izwxlhza4go.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rLhIkLGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4dkspfv7izwxlhza4go.png" alt="Tailwind CSS checkbox and radio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One disadvantage that I have encountered, however, is that there are no components to get started with right away. I know that Tailwind CSS is supposed to be a utility-first framework, but that doesn't mean a couple of commonly used web components, such as buttons, dropdowns, forms wouldn't be helpful.&lt;/p&gt;

&lt;p&gt;That is why I have started a Tailwind CSS components tutorial series here at the DEV community. Last time I showed you how to build a &lt;a href="https://dev.to/themesberg/building-tailwind-css-form-and-input-components-2ang"&gt;form with input fields with Tailwind CSS&lt;/a&gt; and today I will show you how to build checkbox and radio input elements.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-checkbox"&gt;
  &lt;/a&gt;
  Tailwind CSS checkbox
&lt;/h2&gt;

&lt;p&gt;First things first, let's build the HTML markup for the checkbox fields.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
      &amp;lt;input id="flowbite" aria-describedby="flowbite" type="checkbox"&amp;gt;
      &amp;lt;label for="flowbite"&amp;gt;I love how Flowbite works&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've added an extra &lt;code&gt;div&lt;/code&gt; element so that we can wrap the &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;label&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;Let's now add some styles to the checkbox element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
      &amp;lt;input class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded" id="flowbite" aria-describedby="flowbite" type="checkbox"&amp;gt;
      &amp;lt;label for="flowbite"&amp;gt;I love how Flowbite works&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty cool. You can of course decide whether you want to use blue or another color.&lt;/p&gt;

&lt;p&gt;Now let's also add some style to the &lt;code&gt;label&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
      &amp;lt;input class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded" id="flowbite" aria-describedby="flowbite" type="checkbox"&amp;gt;
      &amp;lt;label class="text-sm ml-3 font-medium text-gray-900" for="flowbite"&amp;gt;I love how Flowbite works&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, we should also add some style to the wrapper &lt;code&gt;div&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="flex items-start items-center"&amp;gt;
      &amp;lt;input class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded" id="flowbite" aria-describedby="flowbite" type="checkbox"&amp;gt;
      &amp;lt;label class="text-sm ml-3 font-medium text-gray-900" for="flowbite"&amp;gt;I love how Flowbite works&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! You've created a checkbox element using Tailwind CSS.&lt;/p&gt;

&lt;p&gt;Here's an example of a fieldset with multiple checkbox elements that you can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;fieldset&amp;gt;
&amp;lt;legend class="sr-only"&amp;gt;Checkbox variants&amp;lt;/legend&amp;gt;

  &amp;lt;div class="flex items-center items-start mb-4"&amp;gt;
      &amp;lt;input id="checkbox-1" aria-describedby="checkbox-1" type="checkbox" class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded" checked=""&amp;gt;
      &amp;lt;label for="checkbox-1" class="text-sm ml-3 font-medium text-gray-900"&amp;gt;I agree to the &amp;lt;a href="#" class="text-blue-600 hover:underline"&amp;gt;terms and conditions&amp;lt;/a&amp;gt;&amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-start items-center mb-4"&amp;gt;
      &amp;lt;input id="checkbox-2" aria-describedby="checkbox-2" type="checkbox" class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded"&amp;gt;
      &amp;lt;label for="checkbox-2" class="text-sm ml-3 font-medium text-gray-900"&amp;gt;I want to get promotional offers&amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-start items-center mb-4"&amp;gt;
      &amp;lt;input id="checkbox-3" aria-describedby="checkbox-3" type="checkbox" class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded"&amp;gt;
      &amp;lt;label for="checkbox-3" class="text-sm ml-3 font-medium text-gray-900"&amp;gt;I am 18 years or older&amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-start mb-4"&amp;gt;
    &amp;lt;div class="flex items-center h-5"&amp;gt;
      &amp;lt;input id="shipping-2" aria-describedby="shipping-2" type="checkbox" class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded"&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="text-sm ml-3"&amp;gt;
      &amp;lt;label for="shipping-2" class="font-medium text-gray-900"&amp;gt;Free shipping via Flowbite&amp;lt;/label&amp;gt;
      &amp;lt;div class="text-gray-500"&amp;gt;&amp;lt;span class="font-normal text-xs"&amp;gt;For orders shipped from Flowbite from &amp;lt;span class="font-medium"&amp;gt;€ 25&amp;lt;/span&amp;gt; in books or &amp;lt;span&amp;gt;€ 29&amp;lt;/span&amp;gt; on other categories&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-start items-center"&amp;gt;
      &amp;lt;input id="international-shipping-disabled" aria-describedby="international-shipping-disabled" type="checkbox" class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded" disabled=""&amp;gt;
      &amp;lt;label for="international-shipping-disabled" class="text-sm ml-3 font-medium text-gray-400"&amp;gt;Eligible for international shipping (disabled)&amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/fieldset&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final result should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bm8Q08zj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k32nmodnm4dfefqogho1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bm8Q08zj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k32nmodnm4dfefqogho1.png" alt="Tailwind CSS checkbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-radio"&gt;
  &lt;/a&gt;
  Tailwind CSS radio
&lt;/h2&gt;

&lt;p&gt;The next element that we will build is very similar to the first one, but this time it's going to be a radio type.&lt;/p&gt;

&lt;p&gt;A radio input field is different from a checkbox one because when put together with other radio inputs in the same form you can only select one option, whereas with the checkbox elements you can choose as many as you want.&lt;/p&gt;

&lt;p&gt;Here's a fieldset of radio inputs that you can use in terms of styling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;fieldset&amp;gt;
  &amp;lt;legend class="sr-only"&amp;gt;
    Countries
  &amp;lt;/legend&amp;gt;

  &amp;lt;div class="flex items-center mb-4"&amp;gt;
    &amp;lt;input id="country-option-1" type="radio" name="countries" value="USA" class="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300" aria-labelledby="country-option-1" aria-describedby="country-option-1" checked&amp;gt;
    &amp;lt;label for="country-option-1" class="text-sm font-medium text-gray-900 ml-2 block"&amp;gt;
      United States
    &amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-center mb-4"&amp;gt;
    &amp;lt;input id="country-option-2" type="radio" name="countries" value="Germany" class="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300" aria-labelledby="country-option-2" aria-describedby="country-option-2"&amp;gt;
    &amp;lt;label for="country-option-2" class="text-sm font-medium text-gray-900 ml-2 block"&amp;gt;
      Germany
    &amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-center mb-4"&amp;gt;
    &amp;lt;input id="country-option-3" type="radio" name="countries" value="Spain" class="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300" aria-labelledby="country-option-3" aria-describedby="country-option-3"&amp;gt;
    &amp;lt;label for="country-option-3" class="text-sm font-medium text-gray-900 ml-2 block"&amp;gt;
      Spain
    &amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-center mb-4"&amp;gt;
    &amp;lt;input id="country-option-4" type="radio" name="countries" value="United Kingdom" class="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300" aria-labelledby="country-option-4" aria-describedby="country-option-4"&amp;gt;
    &amp;lt;label for="country-option-4" class="text-sm font-medium text-gray-900 ml-2 block"&amp;gt;
      United Kingdom
    &amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-center"&amp;gt;
    &amp;lt;input id="option-disabled" type="radio" name="countries" value="China" class="h-4 w-4 border-gray-200 focus:ring-2 focus:ring-blue-300" aria-labelledby="option-disabled" aria-describedby="option-disabled" disabled&amp;gt;
    &amp;lt;label for="option-disabled" class="text-sm font-medium text-gray-400 ml-2 block"&amp;gt;
      China (disabled)
    &amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/fieldset&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final result should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h7lrrg14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfrub57pyqu7rml7padu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h7lrrg14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfrub57pyqu7rml7padu.png" alt="Tailwind CSS radio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-tailwind-css-component-library"&gt;
  &lt;/a&gt;
  Flowbite - Tailwind CSS component library
&lt;/h2&gt;

&lt;p&gt;I hope that this tutorial helps you with your web dev journey and your project. Allow me to inform you that these &lt;a href="https://flowbite.com/docs/components/forms/#checkbox"&gt;Tailwind CSS checkbox&lt;/a&gt; and &lt;a href="https://flowbite.com/docs/components/forms/#radio"&gt;Tailwind CSS radio&lt;/a&gt; components are part of a larger and open-source &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Tailwind CSS component library&lt;/a&gt; called Flowbite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0komIXdo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8clb9q846irlr4s7p3oh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0komIXdo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8clb9q846irlr4s7p3oh.png" alt="Tailwind CSS component library"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to check it out as it includes hundreds of components using the utility-first classes from Tailwind CSS. You can also choose to clone it from the &lt;a href="https://github.com/themesberg/flowbite"&gt;official Github Repository&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Be safe with the SSH version you use — for Roadrunners</title>
      <author>Tharun Shiv</author>
      <pubDate>Sun, 24 Oct 2021 10:24:34 +0000</pubDate>
      <link>https://dev.to/developertharun/be-safe-with-the-ssh-version-you-use-for-roadrunners-3dj3</link>
      <guid>https://dev.to/developertharun/be-safe-with-the-ssh-version-you-use-for-roadrunners-3dj3</guid>
      <description>&lt;p&gt;SSH ( Secure Shell ) is a program that is used to create a secure connection between two network enabled hosts. With this connection, the user will be able to get remote access to machines or transfer data between machines. Both these operations are critical from a security point of view, and even one slight vulnerability will cause a heavy damage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-are-two-major-components-involved-in-ssh"&gt;
  &lt;/a&gt;
  There are two major components involved in SSH:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;SSH server: It is the component that will enable a machine to listen or be open to accept SSH connections from clients.&lt;/li&gt;
&lt;li&gt;SSH client: It is the component that will allow a machine to connect to a remote server that is listening to incoming connections.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#major-versions-of-ssh"&gt;
  &lt;/a&gt;
  Major versions of SSH
&lt;/h2&gt;

&lt;p&gt;There are two major versions of SSH. SSH version 1 &amp;amp; SSH version 2.&lt;/p&gt;

&lt;p&gt;SSH is secure, only because of the encryption that is involved. Now what is encryption? It is basically converting all the raw data that would be transmitted from Machine A to Machine B in a form that would be understandable only by those two machines.&lt;/p&gt;

&lt;p&gt;The encryption involved in SSH version 1 is weak enough for a middleman to decrypt it, view the contents, and even modify it without both the parties knowing about it.&lt;/p&gt;

&lt;p&gt;Thus, make sure to use SSH version 2 both on client side, as well as enforcing the same on the server side.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-ssh-client-version"&gt;
  &lt;/a&gt;
  Check SSH client version
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-irn&lt;/span&gt; &lt;span class="s2"&gt;"Protocol"&lt;/span&gt; /etc/ssh/sshd_config
2:Protocol 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure the protocol is 2. By default, if this field is missing, then the SSH client will try to connect to the server using SSH protocol 2, and will fallback to SSH protocol 1. Hence, if you want to be strictly secure, then we have to add Protocol 2 to the /etc/ssh/sshd_config file and restart the ssh client.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-the-ssh-server-versions-allowed"&gt;
  &lt;/a&gt;
  Check the SSH server versions allowed
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-irn&lt;/span&gt; &lt;span class="s2"&gt;"Protocol"&lt;/span&gt; /etc/ssh/sshd_config
2:Protocol 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The process is similar to SSH configuring the ssh client, but is more critical to configure on the server. We have to add Protocol 2 to the /etc/ssh/sshd_config file and restart the ssh client.&lt;/p&gt;

&lt;p&gt;More articles on SSH coming up, but before moving ahead with them, I wanted to make sure you are aware of the SSH protocol versions.&lt;/p&gt;

&lt;p&gt;You can find more articles here: &lt;a href="https://www.tharunshiv.com"&gt;https://www.tharunshiv.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Roadrunners is a series that is aimed at delivering concepts as precisely as possible. Here, a roadrunner is referred to as a person who does things super fast &amp;amp; efficiently. Are you a roadrunner?&lt;/p&gt;

&lt;p&gt;Thank you&lt;/p&gt;

</description>
      <category>linux</category>
      <category>security</category>
      <category>beginners</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>What is an API ?</title>
      <author>Sanskar Goyal</author>
      <pubDate>Sun, 24 Oct 2021 10:04:33 +0000</pubDate>
      <link>https://dev.to/sanskar_goyal/what-is-an-api--36eb</link>
      <guid>https://dev.to/sanskar_goyal/what-is-an-api--36eb</guid>
      <description>&lt;p&gt;If you are a novice web developer then you must have heard of &lt;em&gt;APIs&lt;/em&gt;, here is a simple explanation of what this term means.&lt;/p&gt;

&lt;p&gt;API is short for &lt;strong&gt;Application Programming Interface&lt;/strong&gt;.&lt;/p&gt;




&lt;p&gt;Let's look at an example.&lt;br&gt;
In older times we had radios, right! They all had different functions but there was one thing which was common in each of them. The &lt;strong&gt;PLAY&lt;/strong&gt; button. This button became so popular that later on it was used everywhere, even &lt;em&gt;GUIs&lt;/em&gt; (Graphical User Interfaces).&lt;/p&gt;

&lt;p&gt;That is a &lt;em&gt;button API&lt;/em&gt;. An API is an interface for a coder, they don't have to code the functionality of that button completely. It's abstract! &lt;/p&gt;

&lt;p&gt;For clicking PLAY and sending sound to speaker is using &lt;strong&gt;Web Audio API&lt;/strong&gt;. While using 'strings' we are using String APIs.&lt;/p&gt;




&lt;p&gt;When someone says that they have an API for a company, they have a Web based API. A web based API is basically like a TV remote, we send the request it does its MAGIC (function!) and comes back with the result.&lt;/p&gt;

&lt;p&gt;To look for the API on a website, one can look in the footer or the menu to check out their APIs.&lt;/p&gt;







&lt;p&gt;If you are still reading, I hope you gained something out of this blog and if you liked it, don't hesitate to join my community's discord server where we discuss things in a similar way!&lt;br&gt;
Link : &lt;a href="https://discord.gg/FG9qWMEAbA"&gt;https://discord.gg/FG9qWMEAbA&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>api</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Make Your Own Next.js Starter Template</title>
      <author>Yehezkiel Gunawan</author>
      <pubDate>Sun, 24 Oct 2021 09:59:48 +0000</pubDate>
      <link>https://dev.to/yehezkielgunawan/how-to-make-your-own-nextjs-starter-template-6jl</link>
      <guid>https://dev.to/yehezkielgunawan/how-to-make-your-own-nextjs-starter-template-6jl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Currently, I'm learning about React &amp;amp; Next.js. To understand how it works, I usually push myself to make some mini-projects using that framework. One thing I hate when I develop a project, it's about config.&lt;/p&gt;

&lt;p&gt;It started when I knew a friend who made his own starter template. I asked him, &lt;code&gt;Why do you make it?&lt;/code&gt;. He answered, &lt;code&gt;Well I don't need to worry about the 'configuration' thing when I initiate a new project. So I can focus on the development process.&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I think it's a great idea. I also don't need to feel anxious about the configuration when I make a new project if I have my own starter template.&lt;/p&gt;

&lt;p&gt;Here's how I made my starter template using Next.js and Chakra UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-initialization"&gt;
  &lt;/a&gt;
  Project Initialization
&lt;/h2&gt;

&lt;p&gt;This time, I used the example of base starter template that Next.js provide.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app --example with-chakra-ui-typescript [YOUR_APP_NAME]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, I initiated the ESlint config so the code style can be consistent. I added &lt;code&gt;next-lint&lt;/code&gt; at &lt;code&gt;package.json&lt;/code&gt; and executed it. The details can be seen &lt;a href="https://nextjs.org/docs/basic-features/eslint"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
  "lint": "next lint"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, execute the command &lt;code&gt;yarn lint&lt;/code&gt; or &lt;code&gt;npm run lint&lt;/code&gt; to initiate &lt;code&gt;eslintrc.json&lt;/code&gt;. I modified some things due to personal preferences. You also can adapt it with your own preferences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "env": {
    "node": true
  },
  "extends": [
    "next/core-web-vitals",
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "import"],
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"],
        "moduleDirectory": ["node_modules", "src/"]
      }
    }
  },
  "rules": {
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-inferrable-types": "off",
    "import/order": [
      "warn",
      {
        "groups": [
          ["builtin", "external"],
          "internal",
          "parent",
          ["sibling", "index"],
          "object"
        ],
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ],
    "complexity": "warn",
    "no-console": ["error"]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After finished the ESlint config, I made a &lt;a href="https://www.npmjs.com/package/next-seo"&gt;Next SEO&lt;/a&gt; config. This library is used to modify the meta-tag which is usually used to optimized the SEO and make a preview for the web project.&lt;/p&gt;

&lt;p&gt;First, install the Next SEO using &lt;code&gt;npm i next-seo&lt;/code&gt;. Then, make &lt;code&gt;next-seo.config.js&lt;/code&gt; at the root directory. This is my base configuration. You can accommodate with your own preferences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/** @type {import('next-seo').DefaultSeoProps} */
const defaultSEOConfig = {
  title: "yehez-nextchakra-starter",
  titleTemplate: "%s | yehez-nextchakra-starter",
  defaultTitle: "yehez-nextchakra-starter",
  description:
    "Yehezkiel Gunawan's personalized Next.js + chakra-ui + TypeScript starter template",
  canonical: "https://yehez-nextchakra-starter.yehezgun.com",
  openGraph: {
    url: "https://yehez-nextchakra-starter.yehezgun.com",
    title: "yehez-nextchakra-starter",
    description: "Next.js + chakra-ui + TypeScript template",
    type: "website",
    images: [
      {
        url: "https://yehez-og-image.yehezgun.com/**yehez-nextchakra-starter**.yehezgun.com.png?theme=dark&amp;amp;md=1&amp;amp;fontSize=50px&amp;amp;images=https%3A%2F%2Fres.cloudinary.com%2Fyehez%2Fimage%2Fupload%2Fv1631970666%2Fyehez_avatar_vkv7pc.png&amp;amp;widths=200&amp;amp;heights=200",
        alt: "yehez-nextchakra-starter.yehezgun.com og-image",
        width: 800,
        height: 600,
      },
    ],
    site_name: "yehez-nextchakra-starter",
  },
  twitter: {
    handle: "@handle",
    site: "@site",
    cardType: "summary_large_image",
  },
  additionalLinkTags: [
    {
      rel: "icon",
      href: "https://res.cloudinary.com/yehez/image/upload/v1630902976/Assassination_Classroom_-_Koro-sensei_smiling_head_fwpndi.svg",
    },
  ],
};

export default defaultSEOConfig;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#folder-structure"&gt;
  &lt;/a&gt;
  Folder Structure
&lt;/h2&gt;

&lt;p&gt;The base config is done, now it's time to make the folder structure. Actually the base folder structure from the example template is quite good, but I want some modification here. Here's mine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/src
    /components
        /layout
        /motion
        /wrapper
    /functions
        /helper
    /pages
    /types
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#modify-the-base-ui"&gt;
  &lt;/a&gt;
  Modify the Base UI
&lt;/h2&gt;

&lt;p&gt;It's time to modify the UI and layout. Maybe I won't explain the whole process here. It will be too long to explain. You can modify the layout by your own option.&lt;/p&gt;

&lt;p&gt;Here's my result &lt;a href="https://github.com/yehezkielgunawan/yehez-nextchakra-starter"&gt;https://github.com/yehezkielgunawan/yehez-nextchakra-starter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy"&gt;
  &lt;/a&gt;
  Deploy
&lt;/h2&gt;

&lt;p&gt;Finally, the final step. Don't forget to push the project to your own repo in Github or Gitlab. You can check &lt;a href="https://www.git-tower.com/learn/git/faq/push-to-github/"&gt;here&lt;/a&gt; for the details.&lt;/p&gt;

&lt;p&gt;I used &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt; as my hosting platform. It's easy to use, you can integrate your repository with Vercel, so every time you push an update, it also re-build the project. Read &lt;a href="https://egghead.io/lessons/next-js-deploy-a-project-on-vercel-formerly-zeit-from-a-github-repository"&gt;here&lt;/a&gt; for the details.&lt;/p&gt;

&lt;p&gt;After deployed, let's make the project as a public template.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KerKk7xr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://diskusi-tech-production.s3.amazonaws.com/i/mzpxxxc6hdj4i6hd5un5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KerKk7xr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://diskusi-tech-production.s3.amazonaws.com/i/mzpxxxc6hdj4i6hd5un5.PNG" alt="Template Repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aaaanddd, that's it. You can use the template using this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx degit [REPOSITORY NAME] &amp;lt;APP NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx degit yehezkielgunawan/yehez-nextchakra-starter test-template
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Next.js you can use the built-in command to initiate a project based on the example template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app --example [Github Repository Link] &amp;lt;YOUR_APP_NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app --example https://github.com/yehezkielgunawan/yehez-nextchakra-starter test-template
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your life will be easier with this, so you can focus on the development process every time you initiate a new project, LOL. Congratulations!!!&lt;/p&gt;

&lt;p&gt;Here's my own starter template: &lt;a href="https://yehez-nextchakra-starter.yehezgun.com/"&gt;https://yehez-nextchakra-starter.yehezgun.com/&lt;/a&gt;. How about you? Not a perfect one, I know. But at least, it's very helpful for me.&lt;/p&gt;

&lt;p&gt;Yeah, that's from me. I'm sorry if there're some typos or mistakes here. I'm still an amateur on making an tech article. Happy trying and you can give some feedback here if you want. Thank you.&lt;/p&gt;

&lt;p&gt;Reference: &lt;a href="https://github.com/sozonome/nextarter-chakra"&gt;https://github.com/sozonome/nextarter-chakra&lt;/a&gt; (Sozonome NextChakra-starter)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>nextjs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Javascript </title>
      <author>chittumallasainikhil</author>
      <pubDate>Sun, 24 Oct 2021 09:51:04 +0000</pubDate>
      <link>https://dev.to/chittumallasainikhil/javascript-49j8</link>
      <guid>https://dev.to/chittumallasainikhil/javascript-49j8</guid>
      <description>&lt;p&gt;JavaScript is the programming language that lets the Internet work. The Internet would be nothing without JavaScript and in this lesson, you will find out why.&lt;br&gt;
At the end of this article, you should be able to:&lt;br&gt;
understand what Javascript is and explain its use in web development.&lt;br&gt;
explain and use JavaScript primitive data types and variables.&lt;br&gt;
explain and use JavaScript functions as properties and methods on primitive data types.&lt;br&gt;
explain global object in JavaScript and be able to use the Math object.&lt;br&gt;
explain basic control flow and if/else statements.&lt;br&gt;
Learn&lt;br&gt;
Learn to understand what Javascript is and explain its use in web development.&lt;br&gt;
Overview&lt;br&gt;
JavaScript is the third of the major building blocks of a web page. Without it, we wouldn’t have the dynamic content and usability we expect from modern websites. We will now learn what it is (and isn’t) and how it is used, not only on the web but in all of its applications.&lt;br&gt;
What is JavaScript and why do we use it?&lt;br&gt;
JavaScript is a programming language that was first created in 1994 as a way to add functionality and user interaction to a website. If we think back to our analogy of a web page as a house (Introduction to Web Development Fundamentals), we will remember that we said that JavaScript is the electricity, plumbing, and gas. It is what makes the web page “run”. JavaScript was originally designed to be used purely on the front end as a way for web developers to add functionality to their web pages, and in its early days, it did just that. Recently, the introduction of the “V8 engine” by Google has improved the speed and functionality of JS. That led to the development and release of exciting new front end JavaScript frameworks and eventually Node.js, a way to run JavaScript on a server (back end). This new development has led to a resurgence of JavaScript. Now, JavaScript is one of the world’s most widely-used programming languages. We can find JavaScript used on the front end, back end, mobile, Internet of Things (Iot), game development, and really anywhere a traditional programming language would be used. Recently, the newest version of the JavaScript language was released, ES6*&lt;/p&gt;

</description>
      <category>cybersecurity</category>
    </item>
    <item>
      <title>Better Ideas At Test Design</title>
      <author>Maaret Pyhäjärvi</author>
      <pubDate>Sun, 24 Oct 2021 09:42:45 +0000</pubDate>
      <link>https://dev.to/maaretp/better-ideas-at-test-design-2c62</link>
      <guid>https://dev.to/maaretp/better-ideas-at-test-design-2c62</guid>
      <description>&lt;p&gt;Even with many years in this industry, I get inspired by courses I take. A course - BBST Test Design - served as inspiration on sharing on this: Having better ideas at Test Design.&lt;/p&gt;

&lt;p&gt;And by Test Design, I mean the continuous collection, creation and prioritization of ideas that would help us produce the results from testing that the world around us expects. The ideas that lead us into doing what we do with software; so that we recognize what we recognize; so that we have the conversations around quality that we need to have. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ijHjfH_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qojmp4ijsbw09ruo01kk.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ijHjfH_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qojmp4ijsbw09ruo01kk.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know from the 25 years I’ve been at this that testing is far from simple. It’s knowledge work, just like application programming, targeting information that helps us address quality concerns. &lt;/p&gt;

&lt;p&gt;With a simple model, we could describe testing as a process of doing testing where the input is someone with brains, and the output is learning to do the work better and the information and artifacts we expect in our organizations. We come as we are, and we learn: the software we are testing and its features; the problems and their relevance; each other and communication and collaboration; and the business that pays our salaries. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKJ1u0Mz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35xj0jrg37ynhdwficba.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKJ1u0Mz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35xj0jrg37ynhdwficba.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the last months, I’ve taken a course on Test Design. On the course, two exercises have thrown me at Open Office Impress, the presentation software, and choosing a single variable to analyze for test ideas. True to my exploratory tester nature, I could not commit to a variable before completing a whole variable tour to find something I would have fun with, finding information. &lt;/p&gt;

&lt;p&gt;I chose transparency of elements. I learned quickly to connect it with a default value it could have; with editing, presenting and printing modes and their options; the different element types it could be applied with; and the many places from where you can edit it. &lt;/p&gt;

&lt;p&gt;On the first exercise, we listed risks imagining bug reports we might end up writing on it. I generated the list allowing the application to be my external imagination and it increased the creativity I could bring at the task.&lt;/p&gt;

&lt;p&gt;On the second exercise, we were asked to apply risk-based domain testing. Equivalence classes, boundary values and the sort, but with the idea that risk - what we expect might fail - will guide us to equivalence classes. Like entering a single digit can (and does) behave quite differently from something with three digits or decimal numbers. &lt;/p&gt;

&lt;p&gt;I found a bunch of inconsistencies, and problems, and the application rewarded my tester efforts with a big visible crash dialog that nicely reproduces at will when combining two digit numbers with undo. Yes, single digit is fine but two digit with undo crash the app. And remind me that we don’t have to create bugs intentionally for learning, the software industry has us covered. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X-lZAwpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjs1obts1nm5fyfewnk5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X-lZAwpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjs1obts1nm5fyfewnk5.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s not just courses where I find that I already think in quite many dimensions and details allowing me to discover bugs, but that is the experience and reality from the teams, projects and products I work with too. &lt;/p&gt;

&lt;p&gt;With the simple process, I am often called to situations where the output isn’t where it should be. We are missing bugs. We are not documenting with test automation. We are thinking simplistically about coverage, and thus missing even the idea that there are bugs to find on other dimensions. &lt;/p&gt;

&lt;p&gt;As a tester, I start with adding of results. But as principal, being great at testing isn’t sufficient. I need to make people around me better at testing. I need to fix the practice, while adding some of the results. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CvfxVzTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06cw0fd78lcjokje15u8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CvfxVzTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06cw0fd78lcjokje15u8.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To fix the practice, I have a recipe of my own. I don’t do instructions and processes, and I don’t choose tools and enforce guidelines. I start my work from within, joining a team as a tester. As such, I experience what the team misses, and I try to figure out how to learn together ways of not missing that anymore, even when I am gone. &lt;/p&gt;

&lt;p&gt;We work towards making testing everyone’s business. Testing is too important to be left for just testers. Developers, product owners, neighbor teams are all welcome to pitch in. &lt;/p&gt;

&lt;p&gt;We make improvements continuously, but each individual improvement can be a small adjustment through feedback. We notice the change looking back six months, but day to day it seems we do the same things. &lt;/p&gt;

&lt;p&gt;I work to remove myself, so that I can repeat the work with another team needing insightful ways of taking small steps to better. &lt;/p&gt;

&lt;p&gt;Fixing the results start from showing what results we have been missing. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HsVlcYtE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzy0qi9f4yk3ijaqd5rt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HsVlcYtE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzy0qi9f4yk3ijaqd5rt.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve repeated this growth journey across organizations and teams, and the takeaway I still want to leave you with is on where do you learn to have the versatility of the ideas so that you see the results we have been missing. Those ideas stem from your ability to connect information of the past into the product change work ongoing right now. &lt;/p&gt;

&lt;p&gt;I recommend you read bug reports. Not just your own, but your colleagues, your organizations, and if possible, whatever the customers directly report in unfiltered form. &lt;/p&gt;

&lt;p&gt;I recommend you read lists of generalized bug reports. taxonomies are available in books by Kaner and Beizer with a lot of relevant information&lt;/p&gt;

&lt;p&gt;Learn Test Design. BBST course series is brilliant. I grew up to being a tester with Cem Kaner creating the teaching materials and owe a lot of foundational perspectives to his work now packaged as online learning courses.&lt;/p&gt;

&lt;p&gt;Finally, work together with others. When you work in a group - an ensemble - you will learn about things you did not know you don’t know, and thus could not ask. It speeds up our learning significantly. &lt;/p&gt;

&lt;p&gt;We all need to go and learn to experience what we miss. Better ideas produce better results in testing. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HsVlcYtE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzy0qi9f4yk3ijaqd5rt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HsVlcYtE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzy0qi9f4yk3ijaqd5rt.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m happy to connect on LinkedIn, and write my notes publicly on Twitter. Looking forward to learning to provide better results in testing with you all. &lt;/p&gt;

</description>
      <category>testdesign</category>
      <category>exploratorytesting</category>
      <category>improvement</category>
    </item>
    <item>
      <title>Proposed Infrastructure Setup on AWS for a Microservices Architecture (1)</title>
      <author>Nicolas El Khoury</author>
      <pubDate>Sun, 24 Oct 2021 09:36:07 +0000</pubDate>
      <link>https://dev.to/aws-builders/proposed-infrastructure-setup-on-aws-for-a-microservices-architecture-1-503o</link>
      <guid>https://dev.to/aws-builders/proposed-infrastructure-setup-on-aws-for-a-microservices-architecture-1-503o</guid>
      <description>&lt;h1&gt;
  &lt;a href="#chapter-1-introduction-and-design-considerations"&gt;
  &lt;/a&gt;
  Chapter 1: Introduction and Design Considerations.
&lt;/h1&gt;

&lt;p&gt;Traditionally, applications were designed and implemented using a &lt;a href="https://microservices.io/patterns/monolithic.html"&gt;Monolithic&lt;/a&gt; architectural style, with which the application was developed and deployed as a single component, divided into multiple modules. Monolithic applications are very easy to develop and deploy.&lt;/p&gt;

&lt;p&gt;However, such an architectural pattern becomes a burden once the application becomes too large:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Difficult to manage and maintain, due to the large code.&lt;/li&gt;
&lt;li&gt;All of the application is built using one programming language, thus the system may suffer from bottlenecks when performing tasks not suitable for this specific language.&lt;/li&gt;
&lt;li&gt;Difficult to scale the application.&lt;/li&gt;
&lt;li&gt;Difficult to use container based technologies (Due to the large size of the application).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With the emergence of Cloud Computing, and the concept of the on-demand provisioning of resources, a more suitable architectural pattern was required. Microservices rapidly gained popularity, and became a widely used architectural pattern, especially for applications deployed on the cloud. Microservcies are an architectural pattern which divides an application into smaller, independent, loosely coupled services that may communicate with each other via multiple protocols (e.g., HTTP, sockets, events, etc). Microservices provide the following advantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Easy to maintain (smaller code in each service).&lt;/li&gt;
&lt;li&gt;Highly scalable.&lt;/li&gt;
&lt;li&gt;Extremely suitable for container-based technologies.
Complements cloud solutions.&lt;/li&gt;
&lt;li&gt;Fault tolerance: If one microservice fails, the rest of the system remains functional.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Truly, the Microservices Architecture is a very powerful architectural pattern that goes hand in hand with the services provided by the cloud. However, a well designed system depends on two factors. A robust design of the software, and of the underlying infrastructure. There exists multiple articles, tutorials, courses, that explain and promote the design, and implementation of Microservices. What follows is a detailed description of the points that should be considered when setting up an infrastructure on the cloud, in order to host an application built using the Microservices Architecture.&lt;/p&gt;

&lt;p&gt;Indeed, an application is as robust as its underlying infrastructure. Therefore, when designing an infrastructure on the cloud, one must concentrate on achieving the following characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;: One of the most integral parts in any application is security. A robust software is one that prohibits cyber attacks, such as SQL Injection Attacks, Password Attacks, Cross Site Scripting Attacks, etc. Integrating security mechanisms in the code is a mandatory practice to ensure the safety of the system in general, especially the data layer. However, implementing security in the code is not enough; achieving a secure infrastructure is of utmost importance. An example of a bad infrastructure setup would be to deploy a database in a public subnet, and secure it with a password only. A simple brute force attack is capable of breaching it, no matter how secure and strong the password is. However, deploying the database in a private subnet, with no public access to it will mitigate any sort of direct attack on the database. Hiding the database (Or any other component) from public access is an excellent security mechanism: The database simply does not exist for anyone outside the private network.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Availability&lt;/strong&gt;: refers to the probability that a system is running as required, when required, during the time it is supposed to be running. When deploying the code on the cloud, one has no access or information on the location or type of servers used, and no control whatsoever on the underlying hardware. Moreover, one can never predict and mitigate failures in neither the software nor the hardware. Therefore, a good practice to achieve availability would be to have more than one replica of the system (e.g., replicate the microservices) on more than one machine, and to spawn machines in multiple distinct datacenters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Scalability&lt;/strong&gt;: Prior to the existence of the cloud, an entity would buy a fixed amount of computing resources, set them up, and deploy the services. One of the biggest disadvantages was the lack of elasticity. This approach suffers from inefficient resource usage: one might end up not using all the resources available (over-provisioning), or requiring more resources to operate (under-provisioning). The on-demand provisioning mechanism offered by the cloud alleviates the aforementioned drawbacks by allowing its users to scale-in and scale-out resources based on the varying load. Therefore, a robust is one that is scalable. Powerful auto-scaling mechanisms ensure the automatic provisioning of “enough” resources, while minimizing the costs of the system, and without any manual intervention. An example of auto-scaling policies would be to increase the number of replicas of one microservice, should the average CPU utilization exceeds 70% for a period of one minute, and to decrease the number of replicas when the CPU utilizations averages 25% for a period of one minute.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Evidently, the application’s performance depends on multiple factors. The Microservices architecture offers the flexibility of writing different parts of the system with different programming languages, depending on the Microservice’s task. For instance, NodeJs is a wonderful platform for IO intensive applications, whereas GoLang is more suitable for CPU intensive ones. In addition to choosing the best platform to develop your application, the quality of the code highly affects the performance. Nevertheless, optimizing the code, and choosing the correct platforms will not guarantee an optimized application performance, should the underlying infrastructure not be equipped enough to properly host the application. For instance, Deploying a database on a memory optimized machine will perform much better than deploying it on a regular machine. Another example of performance degradation would be to host Microservices on machines with not enough computing power. Lastly, the the geographical region in which the application is hosted will also affect the system’s performance. Consider an application deployed in a North American region, and its users are all based in India. Clearly, the users may suffer from latency due to the distance between them and the application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;System Visibility&lt;/strong&gt;: One of the most important mechanisms required to achieve a robust system, and the aforementioned four points is system visibility: Logging, Tracing, and Monitoring. Aggregating the applications logs and displaying them in an organized fashion allows the developers to test, debug, and enhance the application. Tracing the requests is another important practice, allowing to tail every request flowing in and out of the system and rapidly finding and fixing errors and bottlenecks. For instance, consider a request that has to traverse 4 Microservices before returning a response to the user. With proper tracing mechanisms, in case of an error, the developers should be easily able to identify which Microservice caused the error, the reasons behind it, and thus decrease the time needed to fix the issue. In addition to catching errors, tracing allows the developers to find bottlenecks in the system by measuring the time spent by the request in each part of the system. Lastly, it is essential to have accurate and reliable monitoring mechanisms on every aspect of the system. Key metrics that must be monitored include but are not limited to: CPU utilization, Memory Utilization, Disk Read/Write Operations, Disk space, etc. Briefly, maximizing the system visibility is essential in order to increase the robustness of the system.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In summary, this article listed some of the most important concerns that need to be addressed when designing an infrastructure on the cloud for Microservices. The following articles will propose and describe a conceptual architectural design for hosting a Microservices application on AWS, and discuss in details every part of that infrastructure.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>microservices</category>
      <category>devops</category>
      <category>docker</category>
    </item>
  </channel>
</rss>
