<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Query +100k records inside whereIn() ‚Äî Laravel</title>
      <author>Bertug Korucu</author>
      <pubDate>Sat, 17 Jul 2021 14:37:57 +0000</pubDate>
      <link>https://dev.to/kodeas/query-100k-records-inside-wherein-laravel-50n3</link>
      <guid>https://dev.to/kodeas/query-100k-records-inside-wherein-laravel-50n3</guid>
      <description>&lt;p&gt;If you are tinkering with a big data (say are trying to export a huge CSV), you may end up needing to query +100k ids in a  &lt;code&gt;whereIn()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And if you try it to use +100k ids in a  &lt;code&gt;whereIn()&lt;/code&gt;, you‚Äôll see a MySQL error ‚Äú&lt;a href="https://stackoverflow.com/questions/18100782/import-of-50k-records-in-mysql-gives-general-error-1390-prepared-statement-con"&gt;General error: 1390 Prepared statement contains too many placeholders&lt;/a&gt;‚Äù&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$my100kIds = [1,2,3,4,5, ...];
Transaction::whereIn('id', $my100kIds)-&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because  you can use 65,536 placeholders at a time in MySQL.&lt;/p&gt;

&lt;p&gt;Well, you are not the only one facing this problem! Good news is, here is a way to overcome that problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-quick-and-dirty-way"&gt;
  &lt;/a&gt;
  The Quick and Dirty Way
&lt;/h2&gt;

&lt;p&gt;I‚Äôll call this the bad because I personally don‚Äôt like changing MySQL configs in the runtime, but it works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$my100kIds = [1,2,3,4,5, ...];

config([  
    'database.connections.mysql.options' =&amp;gt; [   
        \PDO::ATTR_EMULATE_PREPARES =&amp;gt; _true_ 
     ]
]);

\Illuminate\Support\Facades\DB::reconnect();
$result = Transaction::whereIn('id', $my100kIds)-&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I‚Äôm pretty sure you too feel like: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--olYhxutV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhh8d09r5wuotcjs3rxv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--olYhxutV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhh8d09r5wuotcjs3rxv.jpeg" alt="DuckTape"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-elegant-way"&gt;
  &lt;/a&gt;
  The Elegant Way
&lt;/h2&gt;

&lt;p&gt;Now let‚Äôs see the good way of achieving this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$transactionIds = Transaction::pluck('id'); // +100k transaction ids

$maxAtOneTime = 5000;
$total = count($transactionIds);
$pages = ceil($total / $maxAtOneTime);

$transactions = collect();

for ($i = 1; $i &amp;lt; ($pages + 1); $i++) {
    $offset = (($i - 1) * $maxAtOneTime);

    $start = ($offset == 0 ? 0 : ($offset + 1));

    $data = Transaction::query()
        -&amp;gt;whereIn('id', $transactionIds)
        -&amp;gt;skip($start)
        -&amp;gt;take($maxAtOneTime)
        -&amp;gt;get();

     $transactions = $transactions-&amp;gt;merge($data);
}

// Now $transactions has all you need!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you like this post, please leave a üëç, and if you want to see more of my posts, make sure you click ‚ÄúFollow‚Äù üòä&lt;/p&gt;

&lt;p&gt;See ya!&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>mysql</category>
      <category>php</category>
    </item>
    <item>
      <title>tmux splitting panes</title>
      <author>Waylon Walker</author>
      <pubDate>Sat, 17 Jul 2021 14:20:30 +0000</pubDate>
      <link>https://dev.to/waylonwalker/tmux-splitting-panes-2n85</link>
      <guid>https://dev.to/waylonwalker/tmux-splitting-panes-2n85</guid>
      <description>&lt;p&gt;splitting panes is a core feature of tmux.  It allows us to split the terminal&lt;br&gt;
vertically or horizontally into new panes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-s split-window &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'#{pane_current_path}'&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-v split-window &lt;span class="nt"&gt;-h&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'#{pane_current_path}'&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-X kill-pane
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üóíÔ∏è note that  '#{pane_current_path}'will keep the split in the same directory&lt;br&gt;
as it's parent, without this it will default to your home directory.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>techtalks</category>
      <category>tmux</category>
      <category>linux</category>
    </item>
    <item>
      <title>Pure CSS Text Typography Effect</title>
      <author>CoderZ90</author>
      <pubDate>Sat, 17 Jul 2021 14:01:55 +0000</pubDate>
      <link>https://dev.to/official_fire/pure-css-text-typography-effect-1i1</link>
      <guid>https://dev.to/official_fire/pure-css-text-typography-effect-1i1</guid>
      <description>&lt;p&gt;Hello üëã Guys Hope you are well and safe üòÄ so in this post we will learn to create an amazing CSS Text typography using CSS Gradient - conic-gradient&lt;/p&gt;

&lt;p&gt;Before we get started please subscribe to my channel üíñüòä I Post coding tutorials&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtube.com/c/Codingfire?sub_confirmation=1"&gt;https://youtube.com/c/Codingfire?sub_confirmation=1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jL87qQgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/km4cu0fb3uzekq5044do.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jL87qQgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/km4cu0fb3uzekq5044do.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is what it is going to look like üëÜ&lt;/p&gt;

&lt;p&gt;This helps you to get better in CSS so before wasting time lets get into it &lt;/p&gt;

&lt;p&gt;first step is to create a &lt;strong&gt;HTML&lt;/strong&gt; file and create a text so in this example i am going to take &lt;strong&gt;&lt;h2&gt;&lt;/h2&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  (type any text of you choice ) 
 &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt; Gradient text &lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now our html is complete Yes only one h2 to do this or any paragraph or div text&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Conic Gradient&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Gradient text&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to add our style.css make sure that you linked it in your html file&lt;/p&gt;

&lt;p&gt;after this go to css and write this üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* Here we are setting the font size to 8rem */&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;/* Now you need to set gradient but not normal one - 
    you need to set
    Conic gradient (this is the main part of the gradient */&lt;/span&gt;

    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;conic-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="m"&gt;#CA4246&lt;/span&gt; &lt;span class="m"&gt;16.666%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;#E16541&lt;/span&gt; &lt;span class="m"&gt;16.666%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;#E16541&lt;/span&gt; &lt;span class="m"&gt;33.333%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;#F18F43&lt;/span&gt; &lt;span class="m"&gt;33.333%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;#F18F43&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;#8B9862&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;#8B9862&lt;/span&gt; &lt;span class="m"&gt;66.666%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;#476098&lt;/span&gt; &lt;span class="m"&gt;66.666%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;#476098&lt;/span&gt; &lt;span class="m"&gt;83.333%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;#A7489B&lt;/span&gt; &lt;span class="m"&gt;83.333%&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c"&gt;/* Settings the background clip to text */&lt;/span&gt;

    &lt;span class="c"&gt;/* so the background is like a text which i wrote and  */&lt;/span&gt;

    &lt;span class="c"&gt;/* Number 1 - here what we do is we set the background to text and then make our text color transparent) */&lt;/span&gt; 

    &lt;span class="c"&gt;/* -webkit-background-clip: text;
    color: transparent; */&lt;/span&gt;

    &lt;span class="c"&gt;/* Seconds way */&lt;/span&gt;

    &lt;span class="nl"&gt;-webkit-background-clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-text-fill-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And BOOM! üåü we are done - if you want to know it better check my youtube tutorial here&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Lg7fCUWx1Pc&amp;amp;t=85s"&gt;https://www.youtube.com/watch?v=Lg7fCUWx1Pc&amp;amp;t=85s&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;hope you like it please subscribe üíñüòä&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Ruby Basics</title>
      <author>Vinicius Cerqueira Bonif√°cio</author>
      <pubDate>Sat, 17 Jul 2021 13:23:17 +0000</pubDate>
      <link>https://dev.to/vinicius77/ruby-basics-i6e</link>
      <guid>https://dev.to/vinicius77/ruby-basics-i6e</guid>
      <description>&lt;p&gt;Hello, dear devs. üëã&lt;/p&gt;

&lt;p&gt;I am back, bringing to you (again) the weirdest articles on the internet. I am sure you were waiting for that, right? (Please don't answer!)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F_dbMz9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idpah2su7f06f5t3kczs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F_dbMz9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idpah2su7f06f5t3kczs.gif" alt="No No No"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, as the title points out, I will be briefly &lt;del&gt;talking&lt;/del&gt; writing about the &lt;strong&gt;Ruby&lt;/strong&gt; language and some of its features. üòâ&lt;/p&gt;

&lt;p&gt;If you have read my previous posts (something I don't recommend) I usually write about &lt;strong&gt;JavaScript&lt;/strong&gt; related stuff and I love doing so.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TAI0SUhW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odcecwgec1w1zu9b7vi6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TAI0SUhW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odcecwgec1w1zu9b7vi6.jpg" alt="banana JS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But today I have decided to vary a little bit and talk about &lt;strong&gt;Ruby&lt;/strong&gt; that is an extremely powerful language and, long story short, thanks to it I am a developer today. (Am I? ü§î)&lt;/p&gt;

&lt;p&gt;Before start and given my ability to read minds I know it is time to &lt;code&gt;Q &amp;amp; A&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JfyrUNnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txznng4kd39eg7w9k6zk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JfyrUNnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txznng4kd39eg7w9k6zk.gif" alt="Reading minds"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#is-ruby-a-dying-language"&gt;
  &lt;/a&gt;
  Is Ruby A Dying Language?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Short answer:&lt;/strong&gt; no. Indeed, it has been losing "popularity" along the years I cannot deny that but it is way far from death. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Clash&lt;/strong&gt; is my favorite band ever, it also has been losing its popularity but can you tell they are dying? üé∏ Yeah, you just cannot! (In musical terms, I meant.) &lt;br&gt;
I am losing focus here, sorry. üòÖ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; just got a recent minor update to &lt;code&gt;3.0.2&lt;/code&gt; on  July 7th but it is beyond the current scope of this article.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#is-it-worth-learning-ruby-in-2021"&gt;
  &lt;/a&gt;
  Is it worth learning Ruby in 2021? üíé
&lt;/h2&gt;

&lt;p&gt;Paraphrasing someone I have no idea: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"... Knowledge does not occupy space!"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many discussions about this specific subject out there but honestly, I am here to bring you the basics of &lt;strong&gt;Ruby&lt;/strong&gt; so let's get started because life is short.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  ‚ö†Ô∏è Disclaimer ‚ö†Ô∏è
&lt;/h3&gt;

&lt;p&gt;Given the language vastness it is impossible to include  here, in a mere 10 minutes reading post, either all its features, different ways of doing the same thing or even best practices. I hope you understand that.&lt;/p&gt;

&lt;p&gt;The examples are based in both my mental disorders, personal delirium and confused state of mind caused by unknown reasons, according to my psychologist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KRcaEnrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4kmqtym5uvvv37wa59qr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KRcaEnrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4kmqtym5uvvv37wa59qr.gif" alt="Insane"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are &lt;strong&gt;OK&lt;/strong&gt; with that, &lt;strong&gt;welcome aboard !&lt;/strong&gt;, otherwise you are free to go. There are tons of normal people waiting for you somewhere else. üòÇ ü§£&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ruby-in-a-nutshell"&gt;
  &lt;/a&gt;
  Ruby in a nutshell üíé üëâ üå∞ üêö
&lt;/h3&gt;

&lt;p&gt;üö® The next three paragraphs I didn't write myself. They are, in my vision, plausible to explain what I have in mind. I am not a huge fan of &lt;strong&gt;"reinvent the wheel"&lt;/strong&gt;. üö®&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; is a dynamic, interpreted, high-level and general-purpose programming language. &lt;a href=""&gt;Wikipedia:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was was created by &lt;strong&gt;Yukihiro Matsumoto (Matz)&lt;/strong&gt;, in Japan in the mid 1990's and was designed for programmer productivity with the idea that &lt;strong&gt;programming should be fun for programmers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It emphasizes the necessity for software to be understood by humans first and computers second. &lt;a href=""&gt;Launch School:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please pay special attention for those three sentences:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"... necessity for software to be understood by humans first (üôãü•á) and computers second (üó£Ô∏è losers!)."&lt;/p&gt;

&lt;p&gt;" ... It was was created by Yukihiro Matsumoto (Matz), in Japan."&lt;/p&gt;

&lt;p&gt;" ... with the idea that programming should be fun for programmers."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Quote 1:&lt;/strong&gt; Most of the time, &lt;strong&gt;Ruby&lt;/strong&gt; statements are very similar to plain English and it turns out a language very easy to read and understand by us, mere mortals.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s217OwxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k89f2h3xvt33gqlwtb0k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s217OwxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k89f2h3xvt33gqlwtb0k.gif" alt="Mark Zuckerbot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quote 2:&lt;/strong&gt; Try to convince me about something bad that is originally from Japan and fail miserably. &lt;/p&gt;

&lt;p&gt;üëâ [ Suggest a gif (about Japan) in the comments section and I will upload the best here. ]. üëà&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quote 3:&lt;/strong&gt; The 'having fun' part you are going to discover very soon. If you stick with me until the end, of course. üòä&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRo1VBGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfyhnku2hijhhehqtouy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRo1VBGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfyhnku2hijhhehqtouy.gif" alt="Jim Carrey Complaining"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you would like to follow along and don't have &lt;strong&gt;Ruby&lt;/strong&gt; installed in your machine, don't worry. Install it! ü§£ üòÜ üòÇ&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;Installing Ruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just kidding, you can use the &lt;a href=""&gt;Ruby Online Compiler &amp;amp; Interpreter - Replit&lt;/a&gt;. It is a mixing of the &lt;code&gt;irb&lt;/code&gt; console and an &lt;code&gt;IDE&lt;/code&gt; in the same page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;IRB stands for "interactive Ruby" and is a tool to interactively execute Ruby expressions ...&lt;br&gt;
&lt;a href="https://ruby-doc.org/stdlib-2.4.0/libdoc/irb/rdoc/IRB.html"&gt;Module: IRB&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6TvallKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94555f2iq2awnhw9llqb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6TvallKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94555f2iq2awnhw9llqb.gif" alt="Starts here"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#commenting"&gt;
  &lt;/a&gt;
  Commenting ‚úçÔ∏è
&lt;/h3&gt;

&lt;p&gt;You can comment a block of code, for example, using both the  &lt;code&gt;=begin&lt;/code&gt; and &lt;code&gt;=end&lt;/code&gt; keywords and placing the block to be comment between them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="cm"&gt;=begin
   Dale a tu cuerpo alegria Macarena
   Eeeh Macarena .... 
   Aaahe!
=end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also have an one-line comment using the &lt;code&gt;#&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Never gonna give you up, never gonna let you down ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-print-endraw-raw-puts-endraw-methods"&gt;
  &lt;/a&gt;
  &lt;code&gt;print&lt;/code&gt; / &lt;code&gt;puts&lt;/code&gt; methods üñ•Ô∏è
&lt;/h2&gt;

&lt;p&gt;Both functions are used to display output on the screen. The major difference between them is that &lt;code&gt;puts&lt;/code&gt; inserts a newline at the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Hello, "&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"darkness my old friend."&lt;/span&gt;

&lt;span class="c1"&gt;# Result: &lt;/span&gt;
&lt;span class="c1"&gt;# Hello, darkness my old friend&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hark, hark! I hear"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The strain of strutting chanticleer"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Cry, Cock-a-diddle-dow!"&lt;/span&gt;

&lt;span class="c1"&gt;# Result:&lt;/span&gt;
&lt;span class="cm"&gt;=begin
   Hark, hark! I hear
   The strain of strutting chanticleer
   Cry, Cock-a-diddle-dow! 
=end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables üì¶
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; has four different kinds of &lt;code&gt;variables&lt;/code&gt; where which one is declared in its specific way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hey, I am a local variable."&lt;/span&gt;
    &lt;span class="n"&gt;_other_local_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Never mess up with a local!"&lt;/span&gt;

    &lt;span class="vi"&gt;@instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"For instance, I am an instance variable."&lt;/span&gt;
    &lt;span class="vc"&gt;@@class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"I am 'classy'."&lt;/span&gt;
    &lt;span class="vg"&gt;$global&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Globalization rules!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types üòé üòç üòà üëª üí©
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; has several data types: &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt; (&lt;code&gt;TrueClass&lt;/code&gt;, &lt;code&gt;FalseClass&lt;/code&gt;), &lt;code&gt;Symbol&lt;/code&gt; and &lt;code&gt;Nil&lt;/code&gt; (&lt;code&gt;NilClass&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;I wouldn't classify them as primitive data types because everything is &lt;strong&gt;Ruby&lt;/strong&gt; is an object. (or almost everything. Keep reading! üòú)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="vg"&gt;$my_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Clancy Gilroy"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="vg"&gt;$my_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;        &lt;span class="c1"&gt;# String&lt;/span&gt;

&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"X √Ü A-12"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;            &lt;span class="c1"&gt;# String&lt;/span&gt;

&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;             &lt;span class="c1"&gt;# Integer&lt;/span&gt;

&lt;span class="n"&gt;gpa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.22&lt;/span&gt;                 
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;gpa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;             &lt;span class="c1"&gt;# Float &lt;/span&gt;

&lt;span class="n"&gt;had_fun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;had_fun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;         &lt;span class="c1"&gt;# TrueClass&lt;/span&gt;

&lt;span class="n"&gt;is_hot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;is_hot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;          &lt;span class="c1"&gt;# FalseClass&lt;/span&gt;

&lt;span class="n"&gt;week_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;week_points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;     &lt;span class="c1"&gt;# NilClass (absence of value)&lt;/span&gt;

&lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:hello&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;          &lt;span class="c1"&gt;# Symbol &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you notice the &lt;code&gt;.class&lt;/code&gt; method ? Since &lt;strong&gt;Ruby is a Fully Object Oriented language&lt;/strong&gt; everything is an &lt;code&gt;object&lt;/code&gt;, a &lt;code&gt;property of&lt;/code&gt; or a &lt;code&gt;method call on&lt;/code&gt; an object.&lt;/p&gt;

&lt;p&gt;By the way and being shallow, &lt;strong&gt;an object is the instance of a given class&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Think of a &lt;code&gt;class&lt;/code&gt; like a &lt;strong&gt;blueprint for creating objects&lt;/strong&gt;, which determines initial values, attributes, behavior etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QRzn5YNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcnusiig06fo0nr653za.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QRzn5YNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcnusiig06fo0nr653za.gif" alt="Class and Object"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can confirm the "almost everything is an object" theory using the &lt;code&gt;.superclass&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;TrueClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;superclass&lt;/span&gt;        &lt;span class="c1"&gt;# Object&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;superclass&lt;/span&gt;          &lt;span class="c1"&gt;# Object&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;superclass&lt;/span&gt;           &lt;span class="c1"&gt;# Object&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;superclass&lt;/span&gt;           &lt;span class="c1"&gt;# BasicObject&lt;/span&gt;
&lt;span class="c1"&gt;# so on and so forth&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#some-useful-string-methods"&gt;
  &lt;/a&gt;
  Some (Useful) String Methods üí™
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; has many built-in methods to manipulate strings. &lt;/p&gt;

&lt;p&gt;Do you remember when I had mentioned that in &lt;strong&gt;Ruby&lt;/strong&gt; things are similar to plain English? I bet you can guess what most of these methods below do, am I right? üòÉ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;phrase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"   Sometimes I‚Äôm confused by what I think is really obvious. But what I think is really obvious obviously isn‚Äôt obvious.   "&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;

&lt;span class="c1"&gt;# hint: .strip removes the empty spaces from both beginning and ending.&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;    

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt; &lt;span class="s2"&gt;"Some"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt; &lt;span class="s2"&gt;"Sure"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"confused"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"auckland"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;capitalize&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also possible to create both &lt;strong&gt;interpolation&lt;/strong&gt; and &lt;strong&gt;concatenation&lt;/strong&gt; of &lt;code&gt;strings&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;character_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"17"&lt;/span&gt;
&lt;span class="n"&gt;character_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Link"&lt;/span&gt;

&lt;span class="c1"&gt;# Interpolation&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"There once was a young man named &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;character_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;# Concatenation ‚ûï&lt;/span&gt;
&lt;span class="c1"&gt;# '.to_s' is the short method name for 'to string'&lt;/span&gt;
&lt;span class="c1"&gt;# There is more like '.to_i', '.to_f', '.to_a' etc&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"he was "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;character_age&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" years old"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#some-math-methods"&gt;
  &lt;/a&gt;
  Some Math Methods üî¢üî£
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;     &lt;span class="c1"&gt;# addition&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;     &lt;span class="c1"&gt;# subtraction&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;     &lt;span class="c1"&gt;# multiplication&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;7.0&lt;/span&gt;  &lt;span class="c1"&gt;# division&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="c1"&gt;# exponentiation&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="c1"&gt;# modulo or remainder&lt;/span&gt;

&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;163.23&lt;/span&gt;
&lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;45.47&lt;/span&gt;

&lt;span class="c1"&gt;# returns the absolute number&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;abs&lt;/span&gt;                 &lt;span class="c1"&gt;# 163.23   &lt;/span&gt;

&lt;span class="c1"&gt;# return a value rounded to the nearest value with "n" digits decimal digits precision.&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;              &lt;span class="c1"&gt;# 45&lt;/span&gt;

&lt;span class="c1"&gt;# returns the ceil value&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ceil&lt;/span&gt;               &lt;span class="c1"&gt;# 46&lt;/span&gt;

&lt;span class="c1"&gt;# returns the floor value &lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;floor&lt;/span&gt;              &lt;span class="c1"&gt;# 45&lt;/span&gt;

&lt;span class="c1"&gt;# returns the square root of a given number (5.0)&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;# 5.0&lt;/span&gt;

&lt;span class="c1"&gt;# returns the natural logarithm (base e) or logarithm to the specified base of a given number, e.g. Math.log(x, base).&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;# 4.605170185988092&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays üìö
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ruby arrays&lt;/strong&gt; are collections of ordered, integer-indexed objects which can store numbers, strings, hashes, symbols, objects or even any other arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# different ways to declare an array&lt;/span&gt;
&lt;span class="n"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Rapha"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Alexandre"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Andre"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Bogus"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# I prefer this one üëá&lt;/span&gt;
&lt;span class="n"&gt;fruits_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"cherimoya"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"durian"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"lamut"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"langsat"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# What the heck? ü§¢&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"awful"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt; 
&lt;span class="c1"&gt;# output: ["awful", "awful", "awful", "awful", "awful"]&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; 

&lt;span class="c1"&gt;# Remind: Ruby Arrays indexing starts at 0.&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="c1"&gt;# Rapha&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;# Bogus&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;# Rapha Alexandre&lt;/span&gt;

&lt;span class="c1"&gt;# Replacing items&lt;/span&gt;
&lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Fael"&lt;/span&gt;

&lt;span class="c1"&gt;# output: ["Fael", "Alexandre", "Andre", "Bogus"]&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;    

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;  &lt;span class="c1"&gt;# 4&lt;/span&gt;

&lt;span class="c1"&gt;# Down here the methods syntax are pretty much understandable&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Fael"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sort&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;empty?&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;fruits_array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"rambutan"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;## the example above (`push`) could also be done as shown below&lt;/span&gt;
&lt;span class="n"&gt;fruits_array&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"akebi"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;Ruby arrays built-in methods&lt;/strong&gt; are not limited to just those ones I have mentioned above. &lt;br&gt;
If you are eager to learn more (I am sure you are ü§ì), &lt;a href="https://ruby-doc.org/core-3.0.2/Array.html"&gt;Ruby docs&lt;/a&gt; is a really good resource to do so.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#hashes"&gt;
  &lt;/a&gt;
  Hashes  #Ô∏è‚É£
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ruby hashes&lt;/strong&gt; are collections of key-value pairs, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;random_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;:sao_paulo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"SP"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"rio_de_janeiro"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"RJ"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"NY"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember that the way you declare the &lt;code&gt;key&lt;/code&gt; is the same you will use in order to successfully access its &lt;code&gt;value&lt;/code&gt; in a hash.&lt;/p&gt;

&lt;p&gt;For example, trying to access &lt;code&gt;random_hash["sao_paulo"]&lt;/code&gt; would return nothing because &lt;code&gt;:sao_paulo&lt;/code&gt; is not the same as &lt;code&gt;"sao_paulo"&lt;/code&gt;. (&lt;code&gt;Symbol&lt;/code&gt;x &lt;code&gt;String&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;This is S√£o Paulo, by the way! üèôÔ∏è&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nYpQh6_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kitrmfl9wultpa4xelep.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nYpQh6_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kitrmfl9wultpa4xelep.jpg" alt="Sao Paulo City"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;random_hash&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;random_hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sao_paulo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="c1"&gt;# SP&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;random_hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"rio_de_janeiro"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# RJ&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;random_hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                &lt;span class="c1"&gt;# NY&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;random_hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;              &lt;span class="c1"&gt;# false&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;random_hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;            &lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods üìêüìè
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ruby methods&lt;/strong&gt; are used to tie or wrap together one or more repeatable statements into a single unit.&lt;/p&gt;

&lt;p&gt;Along the article we have already used many methods, for example, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;sqrt&lt;/code&gt;, &lt;code&gt;to_s&lt;/code&gt; etc. &lt;/p&gt;

&lt;p&gt;The difference here is that we have only invoked them. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AFazJ-V7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00mml7h93ovj024wt99o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AFazJ-V7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00mml7h93ovj024wt99o.gif" alt="Invoking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Someone, probably &lt;em&gt;Matz&lt;/em&gt;, have already written them for us and for this reason they are the so called &lt;em&gt;built-in&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BI2hNu1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak497reug91gzqtnwgo6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BI2hNu1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak497reug91gzqtnwgo6.jpg" alt="Matz"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even &lt;strong&gt;Ruby&lt;/strong&gt; being an amazing language it is practically impossible to include every single method that we would use in our daily life. We are free to implement them by our own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; Method names should begin with a &lt;em&gt;lowercase letter&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"... If you begin a method name with an uppercase letter, Ruby might think that it is a constant and hence can parse the call incorrectly. "&lt;br&gt;
&lt;a href=""&gt;Source: Tutorials Point&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Method without parameter(s)&lt;/span&gt;

&lt;span class="c1"&gt;# This is how you declare a method&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_konnichiwa&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"„Åì„Çì„Å´„Å°„ÅØ"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# This is how you invoke it&lt;/span&gt;
&lt;span class="n"&gt;say_konnichiwa&lt;/span&gt;

&lt;span class="c1"&gt;# Method with parameter(s)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_tadaima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Unknown"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"„Åü„Å†„ÅÑ„Åæ, &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;say_tadaima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Mr."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Toguro"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# prints "„Åü„Å†„ÅÑ„Åæ, Mr. Toguro!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the second parameter &lt;code&gt;name&lt;/code&gt; holds the &lt;strong&gt;default value&lt;/strong&gt; &lt;code&gt;Unknown&lt;/code&gt;. In other words, if we call the same method without providing the second argument, the default value will be put in place. Example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;say_tadaima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Mr."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;# prints "„Åü„Å†„ÅÑ„Åæ, Mr. Unknown!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also &lt;code&gt;return&lt;/code&gt; values from inside of our methods both explicitly or implicitly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Explicit &lt;code&gt;return&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"return"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"?????"&lt;/span&gt;

   &lt;span class="c1"&gt;# Never reached&lt;/span&gt;
   &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"No value after the return statement is reached"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# IT will console the result of "num * num * num"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Prints the number "70"&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Prints the string "return" and so on&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;- Implicit &lt;code&gt;return&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;always_return&lt;/span&gt;
    &lt;span class="s2"&gt;"I am always returned"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Variable created for the sake of demonstration&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;always_return&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;   &lt;span class="c1"&gt;# "I am always returned"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In other words, methods are most likely those relatives we don't like. They always return. (ü•Å Tu dum tsss)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conditionals-raw-if-endraw-raw-else-endraw-and-raw-elsif-endraw-"&gt;
  &lt;/a&gt;
  Conditionals (&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt; and &lt;code&gt;elsif&lt;/code&gt;)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;is_dev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Cobol"&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_dev&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Cobol"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"DISPLAY 'Hello, Cobol'."&lt;/span&gt;
&lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_dev&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Pascal"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"writeln('Hello, Pascal!');"&lt;/span&gt;
&lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_dev&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Delphi"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"ShowMessage('Hello Delphi');"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; 
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"üëã"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also use &lt;strong&gt;comparisons&lt;/strong&gt; inside of &lt;code&gt;if / else&lt;/code&gt; statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;max_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num3&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;    
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;max_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#case-expressions"&gt;
  &lt;/a&gt;
  Case Expressions üíº
&lt;/h3&gt;

&lt;p&gt;There is no mystery here. I am sure you can read this &lt;del&gt;master&lt;/del&gt;piece of code and guess what it does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_day_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day_abbreviaton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;

     &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;day_abbreviaton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"ma"&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Maanantai"&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"ti"&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Tiistai"&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"ke"&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Keskiviikko"&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"to"&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Torstai"&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"pe"&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Perjantai"&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"la"&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Lauantai"&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"sun"&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Sunnuntai"&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;day_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"En tied√§!"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Implicit returns the value&lt;/span&gt;
    &lt;span class="n"&gt;day_name&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;get_day_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ma"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# Maanantai&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;get_day_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"koira"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# En tied√§!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#while-loops"&gt;
  &lt;/a&gt;
  While Loops ‚Ü™Ô∏è
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;lucky_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;

&lt;span class="c1"&gt;# Note that the 'not' keyword is similar to '!=' (negation)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;lucky_num&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"No Lucky &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;lucky_num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="n"&gt;lucky_num&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops ‚Ü©Ô∏è
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# You already know what is an array :)&lt;/span&gt;
&lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"C. Falcon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Fox"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"DK"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Ness"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Samus"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# It will display all names in a different line&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Same same but ... same&lt;/span&gt;
&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Display numbers from range 0 to 5 (inclusive ..)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;inclusive&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;inclusive&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Display number from range 0 to 4 (exclusive ...)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;exclusive&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;exclusive&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;   

&lt;span class="c1"&gt;# Let's agree: This is plain English&lt;/span&gt;
&lt;span class="c1"&gt;# PS.: counting starts from 0&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Counting: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;   
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#classes-and-objects"&gt;
  &lt;/a&gt;
  Classes And Objects üìù üõãÔ∏è
&lt;/h3&gt;

&lt;p&gt;This is my favorite part. Why? Because I remember when I have had my first contact with &lt;strong&gt;OOP&lt;/strong&gt; (back in 2000's [btw, old are your ancestors üò†]) in &lt;code&gt;Java&lt;/code&gt;. &lt;br&gt;
I was like: "What the heck is going on here?".&lt;br&gt;
I got to understand it better because of the &lt;strong&gt;Ruby&lt;/strong&gt; way of doing things.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MhuSrwou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbhnq5d4dff5lilgs72y.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MhuSrwou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbhnq5d4dff5lilgs72y.gif" alt="Raquer"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;## This is a very simple class&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Character&lt;/span&gt;
    &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:role&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:home&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;## This is a very simple way to create a new object&lt;/span&gt;
&lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Rygar"&lt;/span&gt;
&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Searcher"&lt;/span&gt;
&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Black Mountains"&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Good that you asked (üîÆ), under the hood the &lt;code&gt;attr_...&lt;/code&gt; creates the so famous &lt;code&gt;getters&lt;/code&gt; and &lt;code&gt;setters&lt;/code&gt; for you, for instance:&lt;/p&gt;

&lt;p&gt;-&lt;code&gt;attr_accessor&lt;/code&gt;: creates the &lt;code&gt;getter&lt;/code&gt; and &lt;code&gt;setter&lt;/code&gt; methods.&lt;br&gt;
-&lt;code&gt;attr_reader&lt;/code&gt;: creates only the &lt;code&gt;getter&lt;/code&gt; method.&lt;br&gt;
-&lt;code&gt;attr_writer&lt;/code&gt;: creates only the &lt;code&gt;setter&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# In other words this&lt;/span&gt;
&lt;span class="n"&gt;attr_acessor&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;

&lt;span class="c1"&gt;# Is the equivalent of&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;
    &lt;span class="vi"&gt;@name&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Note: The equals sign is a Ruby convention when creating setters. &lt;/span&gt;
&lt;span class="c1"&gt;# Omitting it is considering a bad practice but still works.&lt;/span&gt;
&lt;span class="c1"&gt;# (if it is working don't touch! üëç)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool, right? We have achieved so much just writing very few lines of code. I have to confess, when writing code using &lt;strong&gt;Ruby&lt;/strong&gt; sometimes I feel like cheating. &lt;br&gt;
But, in my opinion, &lt;strong&gt;Ruby&lt;/strong&gt; saves our time so we can worry about stuff that really matters.&lt;/p&gt;

&lt;p&gt;Let's check an other manner to create a &lt;code&gt;class&lt;/code&gt; in Ruby.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Shoes&lt;/span&gt;
    &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:brand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:color&lt;/span&gt;

    &lt;span class="c1"&gt;# Allows you to set the initial values for a given object&lt;/span&gt;
    &lt;span class="c1"&gt;# Does 'constructor' sound familiar to you?&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;@brand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brand&lt;/span&gt;
        &lt;span class="vi"&gt;@size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;
        &lt;span class="vi"&gt;@color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;        
    &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;trainers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Shoes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Kichute"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Heliotrope"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;trainers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;brand&lt;/span&gt;  &lt;span class="c1"&gt;# Kichute&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#object-class-methods"&gt;
  &lt;/a&gt;
  Object / Class Methods
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hero&lt;/span&gt;
    &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:hp&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
        &lt;span class="vi"&gt;@animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt;
        &lt;span class="vi"&gt;@hp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# It is a class method&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_enough_hp&lt;/span&gt;
        &lt;span class="vi"&gt;@hp&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5.5&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;"Able to play"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Consider resting, &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;hero1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Nakoruru"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"eagle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;hero2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Galford"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Here we have invoked the object(s) method&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;hero1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;has_enough_hp&lt;/span&gt;      &lt;span class="c1"&gt;# Able to play&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;hero2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;has_enough_hp&lt;/span&gt;      &lt;span class="c1"&gt;# Consider resting, Galford&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#class-inheritance-shallow-explanation"&gt;
  &lt;/a&gt;
  Class Inheritance (Shallow Explanation)
&lt;/h3&gt;

&lt;p&gt;Allows classes to inherit characteristics of other classes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fighter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_special_attack&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hadouken"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_uppercut_punch&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Makes the uppercut move"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;ryu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Fighter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ryu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;make_special_attack&lt;/span&gt;          &lt;span class="c1"&gt;# Hadouken&lt;/span&gt;
&lt;span class="n"&gt;ryu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;make_uppercut_punch&lt;/span&gt;          &lt;span class="c1"&gt;# Makes the uppercut move&lt;/span&gt;

&lt;span class="c1"&gt;# Subclass - "&amp;lt;" means inherits from&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SpecialFighter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Fighter&lt;/span&gt; 

    &lt;span class="c1"&gt;# Overwrites 'make_special_attack' method&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_special_attack&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Shun Goku Satsu"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Creates a new method for this class&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;celebrate&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Is that all? You must be joking!"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;gouki&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;SpecialFighter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;gouki&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;make_special_attack&lt;/span&gt;  &lt;span class="c1"&gt;# Shun Goku Satsu&lt;/span&gt;
&lt;span class="n"&gt;gouki&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;make_uppercut_punch&lt;/span&gt;  &lt;span class="c1"&gt;# Makes the uppercut move&lt;/span&gt;
&lt;span class="n"&gt;gouki&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;celebrate&lt;/span&gt;            &lt;span class="c1"&gt;# Is that all? You must be joking!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; as the &lt;code&gt;make_uppercut_punch&lt;/code&gt; move is used by both characters there is no need to re-declare it in our &lt;code&gt;subclass&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules üõí
&lt;/h3&gt;

&lt;p&gt;Modules are nothing more nothing less than a container where you can store methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Greeting&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"there"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hi &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_bye_bye&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"dear"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Bye bye &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to access modules you must include its relative path as the example shows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require_relative&lt;/span&gt; &lt;span class="s2"&gt;"./folder/the_name_of_your_file.rb"&lt;/span&gt;
&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Greeting&lt;/span&gt;

&lt;span class="no"&gt;Greeting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Bowser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# Hi Bowser.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error Handling ‚õî
&lt;/h3&gt;

&lt;p&gt;Error handlers are methods defined in the Exception class to deal with errors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="c1"&gt;# we have never defined the 'fav_character' variable&lt;/span&gt;
    &lt;span class="c1"&gt;# so it will fire the second 'rescue' block&lt;/span&gt;
    &lt;span class="c1"&gt;# and will display the customized message even&lt;/span&gt;
    &lt;span class="c1"&gt;# knowing that we also tried to make a division by 0&lt;/span&gt;
    &lt;span class="c1"&gt;# =&amp;gt; Reference to control flow for more &amp;lt;=&lt;/span&gt;

    &lt;span class="n"&gt;fav_character&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Makoto Mizuhara"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;ZeroDivisionError&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Division By Zero Error"&lt;/span&gt;
&lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;NameError&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"undefined local variable or method 'fav_character'."&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you would like to see the other &lt;code&gt;error handling&lt;/code&gt; in action, replace the statement &lt;code&gt;fav_character["Makoto Mizuhara"]&lt;/code&gt; for that one &lt;code&gt;fav_character = ["Makoto Mizuhara"]&lt;/code&gt;. üòâ&lt;/p&gt;

&lt;p&gt;And that's it, folks! I mean, &lt;strong&gt;Ruby&lt;/strong&gt; cannot be resumed by any means to the features I have shown so far but it is a pretty good start.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#happy-hour-moment"&gt;
  &lt;/a&gt;
  Happy Hour Moment üçπüçªü•§üç∑
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5ja_Dkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmt0gfw7z3h7kj94tc9m.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5ja_Dkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmt0gfw7z3h7kj94tc9m.gif" alt="Happy Hour"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The good news here are that if you have followed along until the end (and thank you a ton for doing that! üôè), you can already use the acquired knowledge to start exploring other 'seas'. For example, why don't you try to play around with &lt;strong&gt;Rails&lt;/strong&gt; (one of Ruby frameworks) a little bit?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#skip-this-part"&gt;
  &lt;/a&gt;
  Skip this part üìö üìñ
&lt;/h3&gt;

&lt;p&gt;I can see you did not skip it so don't you dare to complain later. üòÇüëå&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;" The curiosity killed the cat."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, if you allow me to recommend an excellent source to learn about &lt;strong&gt;Ruby on Rails&lt;/strong&gt;, I would advice the &lt;a href=""&gt;Zayne's&lt;/a&gt; Youtube channel.&lt;br&gt;
He doesn't publish videos very often but it really worth checking it out!&lt;/p&gt;

&lt;p&gt;You can also check &lt;a href=""&gt;Web Crunch&lt;/a&gt;, &lt;a href=""&gt;Codemy&lt;/a&gt;, &lt;a href=""&gt;FreeCodeCamp&lt;/a&gt; and of course the &lt;a href=""&gt;Ruby Docs&lt;/a&gt; and &lt;a href=""&gt;Rails Guides&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion-and-final-thoughts"&gt;
  &lt;/a&gt;
  Conclusion and Final Thoughts üîö üí°
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; is without any doubts a very powerful, beginner friendly and lovely language. As any language, it has your flaws but don't be influenced by the &lt;strong&gt;"which one is the best language?"&lt;/strong&gt; war.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; has been evolving a lot in the last years and counts with a very strong and respectful community that will help you whenever you need it.&lt;/p&gt;

&lt;p&gt;I have tried to highlight some examples I &lt;strong&gt;personally&lt;/strong&gt; consider important when 'meeting' &lt;strong&gt;Ruby&lt;/strong&gt; for the very first time.&lt;/p&gt;

&lt;p&gt;As you could see, the language speaks for itself. I venture to say that it is a &lt;code&gt;self.describing&lt;/code&gt; language. (Pun intended ü§¶)&lt;/p&gt;

&lt;p&gt;Thanks so much for your companion. I hope you have learned something new today. (It doesn't necessarily mean from this article! ü§£)&lt;/p&gt;

&lt;p&gt;Cheerio! üëã&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why should every DEV use a screen reader? The answer might surprise You.</title>
      <author>Ammadeo</author>
      <pubDate>Sat, 17 Jul 2021 13:16:00 +0000</pubDate>
      <link>https://dev.to/ammadeo/why-should-every-dev-use-a-screen-reader-the-answer-might-surprise-you-1139</link>
      <guid>https://dev.to/ammadeo/why-should-every-dev-use-a-screen-reader-the-answer-might-surprise-you-1139</guid>
      <description>&lt;p&gt;As a developer, You probably know the pain of eyestrain. Screen readers may come to the rescue.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-will-it-help-me"&gt;
  &lt;/a&gt;
  How will it help Me?
&lt;/h1&gt;

&lt;p&gt;You read docs and articles every day. They sometimes don't even provide You with a dark theme! To save Your eyes, let's make a screen reader read them for You.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-benefit"&gt;
  &lt;/a&gt;
  Additional benefit
&lt;/h2&gt;

&lt;p&gt;When using a screen reader, You get better at designing an accessible user experience. For instance, You'll quickly find out how crucial semantic HTML is in helping You jump through websites' sections with ease.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#word-of-caution"&gt;
  &lt;/a&gt;
  Word of caution
&lt;/h1&gt;

&lt;p&gt;Using a screen reader might take some time to master. It's similar to learning to write fast on a keyboard. It takes practice, but it's also quite rewarding.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-screen-reader-should-i-use"&gt;
  &lt;/a&gt;
  What screen reader should I use?
&lt;/h1&gt;

&lt;p&gt;There are plenty of screen readers available. My personal favourites are &lt;a href="https://play.google.com/store/apps/details?id=com.google.android.marvin.talkback"&gt;TalkBack&lt;/a&gt; for android and &lt;a href="https://www.nvaccess.org/download/"&gt;NVDA&lt;/a&gt; for windows. I've heard a lot of good opinions about VoiceOver for Mac too. For the first one, I recommend You to check out TalkBack. It's the most user-friendly. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next week&lt;/strong&gt; I'll tell You how to set up TalkBack for the best developer experience. So stay tuned!&lt;/p&gt;

&lt;p&gt;Btw. A few months ago, I made an electron app to help myself with severe eyestrain. Feel free to check it out!&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ammadeo"&gt;
        ammadeo
      &lt;/a&gt; / &lt;a href="https://github.com/ammadeo/save-my-eyes"&gt;
        save-my-eyes
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Eyes care app for windows
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>productivity</category>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>On Modern Web Applications</title>
      <author>Johnny Jarecsni</author>
      <pubDate>Sat, 17 Jul 2021 12:47:34 +0000</pubDate>
      <link>https://dev.to/jarecsni/on-modern-web-applications-5eab</link>
      <guid>https://dev.to/jarecsni/on-modern-web-applications-5eab</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;We all know that fashion waves come and go in software development, just like everywhere else in life. When in the middle of such a wave, it is extremely difficult to raise any concerns about the actual main stream, canonical method or truth. Currently it is agile and functional programming. We have a tunnel vision, where we keep repeating '4 legs good, 2 legs bad'. This article attempts to go against the accepted and unchallenged, and look at a few pretty big cracks in the system, trying to come up with some recommendations as well.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h1&gt;

&lt;p&gt;It has been a while now that I noticed a few things I did not like about how we write software. I started to collect these points, and was thinking about why we do things the way we do them, and how these individual aspects might correlate, catalysing each other. It is best if we start with the end product of it all, the software that we write.&lt;/p&gt;

&lt;p&gt;If you look at a typical web application made in the past few years, you will notice the following few attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is using FP as programming paradigm&lt;/li&gt;
&lt;li&gt;it is using a framework like Redux for application logic&lt;/li&gt;
&lt;li&gt;it has no noticeable software design&lt;/li&gt;
&lt;li&gt;it has tons of unit tests&lt;/li&gt;
&lt;li&gt;it has a layered organisation of files (services, actions, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you try to apply even the tiniest change to an application written like this, you immediately notice the following engineering principles all being violated:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open-Closed Principle&lt;/li&gt;
&lt;li&gt;Single Responsibility Principle&lt;/li&gt;
&lt;li&gt;Liskov Substitution Principle&lt;/li&gt;
&lt;li&gt;Interface Segregation Principle&lt;/li&gt;
&lt;li&gt;Dependency Inversion Principle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First of all, any functionality change needs to involve all the layers, actions, reducers, components, meaning lots of changes. Since there is a tendency to introduce dependencies between pieces of state in the reducer(s) these changes are all potentially risky - hence you need to put a load of unit tests in place to make sure things still work. Things are flat and open, there is no resistance in this software, people can do pretty much anything, software contracts, etc. are not expressed by any means. And they even think that this is a good thing...&lt;/p&gt;

&lt;p&gt;There is no noticeable design, that is, no entities, processes, interactions, the software is an unintelligible assembly of framework specific technicalities like actions and reducer functions that operate on atomic bits like a Boolean variable that has a particular meaning. Looking at this from ten thousand feet it looks as though we are again at the elementary level of assembly programming - our software is close to the iron (close to the framework and the DOM) and far away from the reality it is modelling. Yes, it seems history does repeat itself.&lt;/p&gt;

&lt;p&gt;This type of software will obviously be very costly to maintain. As I said before, simple functional changes will need to be woven through the fabric of the application (lots of changes, lots of unit tests) but larger changes, like supporting a different financial product with a slightly different set of attributes/behaviours will be painful due the complete lack of abstraction and tight coupling everywhere. I like to call this type of software shrink wrap software. It is tailor made to the exact set of requirements known at the time of writing the software, with absolutely zero flexibility to withstand or help with change.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#under-the-hood"&gt;
  &lt;/a&gt;
  Under the hood
&lt;/h1&gt;

&lt;p&gt;So what is driving all this? We all know that back in the 90s people started to feel that Waterfall doesn't really cut the mustard as it was unable to keep up with the fast changing business reality. By the way, this was the era of Object Oriented programming and software design (Design Patterns by GoF, etc. - apparently people had time for all that! :) &lt;/p&gt;

&lt;p&gt;Coincidentally, application development took another turn at the time, more like around the early 2000s. Web applications started to replace the heavy duty GUIs and their object oriented designs that were developed with costly waterfall methodology. The fast paced business world found its ideal match, functional programming and agile.&lt;/p&gt;

&lt;p&gt;The focus of agile is short term, the actual iteration, there is not much room for anything else. It is but natural that developers picked up a tool which is more proper for this type work, functional programming. Functional languages are good at small scale work, as in writing lots of small functions that can be combined to carry out more complicated work. Due to their dynamic nature they are also good for quick prototyping (funnily enough most prototypes in an Agile project end up being used as the real thing - clearly showing some confusion in the minds). &lt;/p&gt;

&lt;p&gt;Functional programming, however, inherently is not so good at expressing larger scale designs. If you try to google for functional design patters you will find none. Everything is a function, end of story. You can play with scopes etc, but it is not idiomatic functional programming any more. Functional programming is wonderful, and it is very efficient for an array of things. It is a mistake however to try to use it for everything. It leads to the messy, unmaintainable codebases we call agile software. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-way-out"&gt;
  &lt;/a&gt;
  A Way out
&lt;/h1&gt;

&lt;p&gt;So far I tried to show where I see the problems with modern software development. It is ephemeral, short sighted, lacks design and uses a tool that is inherently incapable of producing structured, reusable and maintainable software. So what shall we do, shall we go back to waterfall and Object Oriented languages? &lt;/p&gt;

&lt;p&gt;Well, that would hardly work, there was a reason for leaving all that behind.&lt;/p&gt;

&lt;p&gt;There are a few things we need to take into account when trying to come up with a better way of crafting software.&lt;/p&gt;

&lt;p&gt;1) Businesses change rapidly, so only tools/metholodigies that are able to keep up will be viable&lt;br&gt;
2) Agile is unlikely to go away&lt;/p&gt;

&lt;p&gt;Since coming up with an application design for each new application is not really viable due to the points above, we need a better framework that allows us to craft software, component by component that blends into the super-structure of the application, which is easy to maintain over time. This is the exact opposite of things like Redux, where things melt away, as you keep adding more and more to the application. They dissolve into atomic pieces of the state and fragmented logic, which are very difficult to reason about. I think this is a key problem with Redux. It forces a brittle, fragmented architecture on your application - and there is a massive price to pay for this down the line.&lt;/p&gt;

&lt;p&gt;So the way forward can be a plugin-like architecture, where you can develop pieces of functionality (yes, using FP if you like!) where these plugins provide clear integration points and APIs, and it is easy to see how they are assembled together to provide a piece of functionality. These plugins can then be easily reused in other application, since plugins are self-contained and encapsulated units of markup, state and async resources. Contrast this with the fragmented nature of modern web apps, with the entangled web of action creators, reducers, services, utilities, and UI components - where it is impossible to isolate anything for reuse.&lt;/p&gt;

&lt;p&gt;This plugin architecture will also help with testing, by allowing easy replacement of the dependencies these plugins declare. &lt;/p&gt;

&lt;p&gt;It is still a question, how much of this is possible to implement in TypeScript, which is tied to JavaScript which has some limitations around implementing these kind of 'meta' designs, which are based on indirection, inversion of control, decoupling and lazy/conditional loading.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;It is long overdue to come up with a better architecture and organisation for web applications. Finally we have a simple and elegant UI component framework, Svelte, but we are still suffering from an even bigger problem, not being able to model business problems in a clean, reusable and maintainable way.&lt;/p&gt;

&lt;p&gt;My proposal is combine the good from both OO and FP to come up with a framework that allows rapid application development and yet it does not compromise on the maintainability of the resulting code. &lt;/p&gt;

&lt;p&gt;Sounds like a daring proposition? &lt;/p&gt;

</description>
      <category>architecture</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introducing Angular Mini Blog Series - Part 1</title>
      <author>Shreya Prasad</author>
      <pubDate>Sat, 17 Jul 2021 12:27:22 +0000</pubDate>
      <link>https://dev.to/shreyapd06/introducing-angular-mini-blog-series-part-1-4hdg</link>
      <guid>https://dev.to/shreyapd06/introducing-angular-mini-blog-series-part-1-4hdg</guid>
      <description>&lt;p&gt;In this series of blog posts, we are going to learn about Angular from beginning. I will try to keep the blogs very short, crisp and easy to understand.&lt;br&gt;
Go to &lt;a href="https://angular.io/"&gt;Angular's official website&lt;/a&gt; if you want to learn basic stuff like: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What Angular is &lt;/li&gt;
&lt;li&gt;How to create a basic application&lt;/li&gt;
&lt;li&gt;Generate Components&lt;/li&gt;
&lt;li&gt;Start Angular Live Server&lt;/li&gt;
&lt;li&gt;Basic Directory Structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, we will get started with:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;Modules &lt;/li&gt;
&lt;li&gt;How Angular Apps loads&lt;/li&gt;
&lt;li&gt;AppModule&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;You know about &lt;code&gt;&amp;lt;html&amp;gt;, &amp;lt;head&amp;gt; and &amp;lt;body&amp;gt;&lt;/code&gt; tags and so on right? These are native HTML elements that are provided to us. But what if we could create our own HTML elements?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/91fEJqgdsnu4E/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/91fEJqgdsnu4E/giphy.gif" alt="surprised-gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, this is where components come in! Components are typically custom built HTML elements, and each of these elements can instantiate only one component. &lt;br&gt;
The best part is - they are reusable, which means that one you create a component, you can utilize it multiple times in your application! Also, if you need to modify it, simply change one file and those changes will be reflected wherever you have used this component! Some popular examples of components are Navigation Bar, Footer, Side Menu etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rp8y73mK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://geeksarray.com/images/blog/Angular-Component-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rp8y73mK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://geeksarray.com/images/blog/Angular-Component-example.png" alt="component"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules
&lt;/h2&gt;

&lt;p&gt;Angular is not present as one monolithic code base. Instead, it is divided into modules which are present in different locations and their utility is independent of each other. Modules provide the highest level of abstraction available within the Angular framework. Everything in your app is ultimately structured around modules. This is powerful! It means that you can easily encapsulate code within a module and share or reuse it throughout your app.&lt;/p&gt;

&lt;p&gt;We use &lt;strong&gt;@NgModule&lt;/strong&gt; decorator to declare a class as module.&lt;br&gt;
&lt;strong&gt;@NgModule&lt;/strong&gt; decorator contains below properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;declarations&lt;/strong&gt;: It includes component, directives, pipes that belongs to this module.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;exports&lt;/strong&gt;: It include component, directives, pipes which can be accessible to other NgModule.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;imports&lt;/strong&gt;: Contains Modules whose exported classes needed by this module.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;providers&lt;/strong&gt;: Contains the services generated by this module.
bootstrap: Initialize root component
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;AppComponent&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;BrowserModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;AppRoutingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;FormsModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;CoreModule&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#how-angular-app-loads"&gt;
  &lt;/a&gt;
  How Angular App loads?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5oGIwd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5b3999l9ojj0b7h124sf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5oGIwd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5b3999l9ojj0b7h124sf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you see this index.html? This is the page that's mainly rendered by Angular. It consists of only 1 component - &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;. This &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; is the root component which encapsulates all the child components, i.e the components you create and bootstraps them to render everything inside it on index.html.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Demo Angular App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;base&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;app-root&amp;gt;&amp;lt;/app-root&amp;gt;&lt;/span&gt; //only this component will be present 
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#appmodule"&gt;
  &lt;/a&gt;
  AppModule
&lt;/h2&gt;

&lt;p&gt;When looking at the Angular module system, all things must begin with the app module. The root app module is a necessary portion of every Angular app. By default, this module is named AppModule, although it is possible to rename this module. The AppModule is the entry point to your app.&lt;/p&gt;

&lt;p&gt;A newly generated AppModule would look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NgModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;AppComponent&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;BrowserModule&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is a good practice to keep this file as minimal as possible. This can be done by importing only those modules that are absolutely necessary for your app to load initially. Or only declare Angular components, directives, or pipes that you want globally available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hey-before-you-go-%E2%80%8D"&gt;
  &lt;/a&gt;
  ‚úã Hey! Before you go üèÉ‚Äç
&lt;/h2&gt;

&lt;p&gt;If you enjoyed this article, I recommend you to stay tuned to my &lt;a href="https://twitter.com/shreyacasmalert"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is my first time on Dev.to so I would really appreciate if you would like my blog or share constructive feedback!&lt;/em&gt;üíñ&lt;/p&gt;

&lt;p&gt;In the next blog, we will cover data binding and it's various types so stay tuned! ‚ú®&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Setting Up Custom 404 Error Page</title>
      <author>Krutik Raut</author>
      <pubDate>Sat, 17 Jul 2021 11:50:59 +0000</pubDate>
      <link>https://dev.to/reboot13_dev/setting-up-custom-404-error-page-57c3</link>
      <guid>https://dev.to/reboot13_dev/setting-up-custom-404-error-page-57c3</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-does-http-404-mean"&gt;
  &lt;/a&gt;
  What does HTTP 404 mean?
&lt;/h3&gt;

&lt;p&gt;The HTTP 404, 404 Not Found, 404, 404 Error, Page Not Found or File Not Found error message is a Hypertext Transfer Protocol standard response code, in computer network communications, to indicate that the browser was able to communicate with a given server, but the server could not find what was requested. &lt;/p&gt;




&lt;p&gt;&lt;strong&gt;The Default 404 error pages are not good looking and don't have any type of navigations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Following are some methods you can use to auto-redirect to a custom error page.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Website Running on Apache webserver&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a custom webpage for 404 error and name it 404.html&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a file name &lt;code&gt;.htaccess&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;File content: ErrorDocument {error_code}  {custom file path}&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ErrorDocument 404 /404.html 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ErrorDocument 404 https://yourwebsite.com/404.html 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the site will redirect to 404.html whenever the user gets a 404 HTTP response or browse the wrong URL path on your website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are some hosting services that run on Apache webserver&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt;Hostinger&lt;/td&gt;
    &lt;td&gt;Heroku&lt;/td&gt;
    &lt;td&gt;GoDaddy&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Netlify&lt;/td&gt;
    &lt;td&gt;BlueHost&lt;/td&gt;
    &lt;td&gt;1&amp;amp;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Cloudways&lt;/td&gt;
    &lt;td&gt;SiteGround&lt;/td&gt;
    &lt;td&gt;HostGator&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;ul&gt;
&lt;li&gt;Website Hosted on Vercel.com&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a custom webpage for 404 error and name it 404.html&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a file name &lt;code&gt;vercel.json&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;File content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "routes": [
    { "handle": "filesystem" },
    { "src": "/(.*)", "status": 404, "dest": "/404.html" }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read more at official docs: &lt;a href="https://vercel.com/guides/custom-404-page"&gt;https://vercel.com/guides/custom-404-page&lt;/a&gt;&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Website hosted on Github Page&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The simplest so far&lt;/em&gt;&lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a custom webpage for 404 error and name it 404.html&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add this file to your repository&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Done &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Website running on Heroku&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a PHP app hosted on Heroku follow the same method as of Apache Server&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a custom webpage for 404 error and name it 404.html&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run this command on Heroku CLI&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;heroku config:set \ 
ERROR_PAGE_URL=//yourwebsite.com/public/404.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read more at official docs: &lt;a href="https://devcenter.heroku.com/articles/error-pages"&gt;https://devcenter.heroku.com/articles/error-pages&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Note: Make sure the 404.html is present in your root directory with index.html&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Tutorial [Apache Server]&lt;/strong&gt; : &lt;a href="https://www.youtube.com/watch?v=QkB5ZxeYaJQ&amp;amp;t"&gt;https://www.youtube.com/watch?v=QkB5ZxeYaJQ&amp;amp;t&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#social-links"&gt;
  &lt;/a&gt;
  Social Links
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://instagram.com/reboot13_dev"&gt;Instagram&lt;/a&gt; | &lt;a href="https://youtube.com/krutikraut"&gt;Youtube&lt;/a&gt;  | &lt;a href="https://twitter.com/reboot13_dev"&gt;Twitter&lt;/a&gt; | &lt;a href="https://codepen.io/reboot13"&gt;Codepen&lt;/a&gt;&lt;/p&gt;



&lt;center&gt; ThankYou &lt;/center&gt;

</description>
      <category>error404</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What is a software blueprint?</title>
      <author>Jesse Jordan</author>
      <pubDate>Sat, 17 Jul 2021 11:15:28 +0000</pubDate>
      <link>https://dev.to/jayjayjpg/what-is-a-software-blueprint-5388</link>
      <guid>https://dev.to/jayjayjpg/what-is-a-software-blueprint-5388</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-a-software-blueprint"&gt;
  &lt;/a&gt;
  What is a software blueprint?
&lt;/h1&gt;

&lt;p&gt;A &lt;strong&gt;software blueprint&lt;/strong&gt; is a &lt;strong&gt;high-level plan&lt;/strong&gt; or outline used in the development of software.&lt;/p&gt;

&lt;p&gt;When the term blueprint is used in programming, it usually refers to one of two related, yet slightly different concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a high-level, graphical or written piece of &lt;strong&gt;documentation&lt;/strong&gt; of software architecture ("blueprint for &lt;strong&gt;humans&lt;/strong&gt;")&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a piece of code serving as a template for &lt;strong&gt;code-generating tools&lt;/strong&gt; that build or configure applications ("blueprint for &lt;strong&gt;machines&lt;/strong&gt;")&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, software blueprints are a powerful tool for planning, building and maintaining software projects.&lt;/p&gt;

&lt;p&gt;And first, let's take a look into how software blueprints are used &lt;strong&gt;as documentation&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blueprints-as-software-design-documentation"&gt;
  &lt;/a&gt;
  Blueprints as software design documentation
&lt;/h2&gt;

&lt;p&gt;Blueprints may be used to &lt;strong&gt;design&lt;/strong&gt; and &lt;strong&gt;document the architecture&lt;/strong&gt; of applications. It serves as a &lt;strong&gt;high-level representation of software design&lt;/strong&gt; that supports the development process in several ways:&lt;/p&gt;

&lt;p&gt;As part of the planning process of upcoming feature work, a blueprint communicates &lt;strong&gt;implementation requirements&lt;/strong&gt; across an engineering team more efficiently; a software architect may design a new feature and they can then use a blueprint to provide the feature requirements to the software engineers who will implement it later on.&lt;/p&gt;

&lt;p&gt;In a similar manner, blueprints help teams consisting of both engineering and non-engineering professionals to collaborate on the development of business applications; blueprints empower stakeholders of either department to define requirements using common terminology that doesn't require in-depth, technical knowledge. This way, a &lt;strong&gt;software blueprinting process&lt;/strong&gt; reduces the number of cycles needed for planning, implementing and iterating on features by getting application requirements defined well from the beginning. This in turn helps to &lt;strong&gt;reduce the overall development time&lt;/strong&gt; of applications significantly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---FzTeeVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo9v1ctvqki1xy58mlhv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---FzTeeVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo9v1ctvqki1xy58mlhv.jpg" alt="Title: An Architect in His Studio. Old ink drawing from the 19th century showing a man in a wealthy-looking coat sitting in front of his desk in his small studio room and working on a blueprint for a cathedral. You can see one of his employees in the background serving him tea"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Through this process, blueprints become an effective strategy for maintaining documentation of software architecture. As a business goes through the iterative process of blueprinting feature work upfront and implementing features according to the design, a growing documentation for the business's software architecture is created automatically.&lt;/p&gt;

&lt;p&gt;Using &lt;strong&gt;Unified Modeling Language (UML)&lt;/strong&gt; software architects oftentimes visualize the design of the systems they and their team are implementing. Many products and open-source tools support software design with UML, such as &lt;a href="https://www.eclipse.org/papyrus/"&gt;Papyrus&lt;/a&gt;, &lt;a href="https://visualstudio.microsoft.com/"&gt;Visual Studio&lt;/a&gt; or &lt;a href="https://www.lucidchart.com/"&gt;Lucidchart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more insight into the rationale behind &lt;strong&gt;blueprints as documentation&lt;/strong&gt; and UML specifically, you may want to continue reading &lt;a href="https://martinfowler.com/bliki/UmlAsBlueprint.html"&gt;"UmlAsBlueprint"&lt;/a&gt; by &lt;a href="https://twitter.com/martinfowler"&gt;Martin Fowler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But the term blueprint isn't only used to describe software design plans that help &lt;strong&gt;people&lt;/strong&gt; to implement said software. "Blueprint" also refers to those design plans that help &lt;strong&gt;computers&lt;/strong&gt; to &lt;strong&gt;implement software automatically&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blueprints-as-automatic-programming-templates"&gt;
  &lt;/a&gt;
  Blueprints as automatic programming templates
&lt;/h2&gt;

&lt;p&gt;In &lt;strong&gt;automatic programming&lt;/strong&gt; a computer program, when run, generates code automatically based on a specific configuration. The configuration for these &lt;strong&gt;code generators&lt;/strong&gt; can come from &lt;strong&gt;direct user input&lt;/strong&gt; (e.g. parameters provided to a shell command) and - from &lt;strong&gt;blueprints&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nlBkK-RK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dz8f4r3b5m2v0uh0xjo0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nlBkK-RK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dz8f4r3b5m2v0uh0xjo0.jpg" alt="Old ink drawing of blueprints for the construction of the towers of the cathedral in Cologne, Germany"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As part of the code generation process, the blueprint outlines the layout and configuration of the resulting program. This makes the blueprint useful in scaffolding and extending applications; a software engineer who uses blueprints in their development process can &lt;strong&gt;focus&lt;/strong&gt; on the implementation of the &lt;strong&gt;business logic&lt;/strong&gt; itself and worry less about how their implementation fits into the code base.&lt;/p&gt;

&lt;p&gt;Therefore when used as &lt;strong&gt;code generator templates&lt;/strong&gt;, blueprints improve the immediate developer experience significantly and can reduce overall development time. Lastly, they facilitate scaling and maintaining large applications by making extending applications easier.&lt;/p&gt;

&lt;p&gt;Many different tools and &lt;strong&gt;frameworks&lt;/strong&gt; already support blueprints and code generators for developers. This includes, for example and among many others, the &lt;a href="https://flask.palletsprojects.com/en/2.0.x/tutorial/views/#create-a-blueprint"&gt;Python web framework Flask&lt;/a&gt;, the &lt;a href="https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/Blueprints/"&gt;Blueprint visual scripting system of Unreal Engine&lt;/a&gt;, and the &lt;a href="https://cli.emberjs.com/release/advanced-use/blueprints/"&gt;JavaScript framework EmberJS&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blueprints-as-documentation-and-automatic-programming-tool"&gt;
  &lt;/a&gt;
  Blueprints as documentation and automatic programming tool
&lt;/h2&gt;

&lt;p&gt;Blueprints are a &lt;strong&gt;powerful tool&lt;/strong&gt; in planning, documenting and implementing software applications.&lt;/p&gt;

&lt;p&gt;Blueprints - when used as documentation for software architecture - are critical for successfully planning and executing development cycles, whereas blueprints - when used as a template for code generators - are an integral part of maintaining and scaling code bases gracefully.&lt;/p&gt;




&lt;p&gt;Have you created or used software blueprints before? Let me know in the comments below! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>software</category>
      <category>uml</category>
      <category>architecture</category>
    </item>
    <item>
      <title>How much time should you spend on lowering your Bill of Materials? üìâü§î</title>
      <author>Valentin Sawadski</author>
      <pubDate>Sat, 17 Jul 2021 11:06:52 +0000</pubDate>
      <link>https://dev.to/_vsaw/how-much-time-should-you-spend-on-lowering-your-bill-of-materials-1fjh</link>
      <guid>https://dev.to/_vsaw/how-much-time-should-you-spend-on-lowering-your-bill-of-materials-1fjh</guid>
      <description>&lt;p&gt;üëâ tl/dr; Lower the BOM only to the point where you have a comfortable profit margin. Going lower than that is probably not worth it because of low production volumes, higher burn and longer time to market. üëà&lt;/p&gt;

&lt;p&gt;When looking at your Bill of Materials (BOM), I believe it's best to always put it into comparison with your profit margins. This will help you establish a "Max BOM" line. The number depends on a lot of different things like your business model and price, but rule of thumb for non-subscriptions models is at least: Price &amp;gt; 2x BOM&lt;/p&gt;

&lt;p&gt;If you're above that "Max BOM" line, you'll need to figure out a way to either raise the price or lower your BOM. But we're going to focus on why it's not worth to go lower, with a small back of the envelope calculation:&lt;/p&gt;

&lt;p&gt;Assume you are are startup close to start production of your first batch, and then someone proposes to replace a few parts and save some money!&lt;/p&gt;

&lt;p&gt;Production Volume: 5k pcs&lt;br&gt;
BOM reduction: 10 EUR / piece&lt;br&gt;
=&amp;gt;üí∞üí∞üí∞ 50k EUR savings! üí∞üí∞üí∞&lt;/p&gt;

&lt;p&gt;Now that's a lot of money for a startup! ..... Except when you take implementation effort into account. Last minute HW changes can easily delay the timeline for 2 months, because you'll need&lt;/p&gt;

&lt;p&gt;~1 month to implement the new changes&lt;br&gt;
~1 month to build new prototypes and make sure everything still works&lt;/p&gt;

&lt;p&gt;If you take your burn rate into account, it could easily be that you burn &amp;gt;25k EUR per Month in salaries, tools, prototypes etc.&lt;/p&gt;

&lt;p&gt;Compare this with your potential savings of 50k and you'll lose money in the end! Not to mention the 2 months sales revenue you miss out on! üòâ&lt;/p&gt;

&lt;p&gt;Therefore cost saving projects only start paying off when you've reached higher production volumes.&lt;/p&gt;

&lt;p&gt;So, be careful when implementing cost saving projects early in your companies life. Most of the time your resources are better spent focusing on growing your revenue. üìà&lt;/p&gt;

&lt;p&gt;How do you manage your BOM and cost-cutting initiatives?&lt;/p&gt;

&lt;p&gt;Image Credits: &lt;a href="https://commons.wikimedia.org/wiki/File:Bill_of_Materials.jpg"&gt;NathanMinnick58&lt;/a&gt;&lt;/p&gt;

</description>
      <category>iot</category>
      <category>startup</category>
      <category>management</category>
      <category>discuss</category>
    </item>
    <item>
      <title>SolidJs: First impression</title>
      <author>Edem Agbenyo</author>
      <pubDate>Sat, 17 Jul 2021 10:44:29 +0000</pubDate>
      <link>https://dev.to/edemagbenyo/solidjs-first-impression-15pm</link>
      <guid>https://dev.to/edemagbenyo/solidjs-first-impression-15pm</guid>
      <description>&lt;p&gt;I have been using React.js for the past 3 years for various projects, and the main reason why I decided to do so were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The ability to use JSX&lt;/li&gt;
&lt;li&gt;The power to create composable components&lt;/li&gt;
&lt;li&gt;One-way data binding&lt;/li&gt;
&lt;li&gt;Reactivity and Virtual DOM&lt;/li&gt;
&lt;li&gt;Simplicity and Performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I recently explored SolidJS, a JS library framework and I discovered that you can do all these and even more. Here are my initial thoughts on SolidJS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SolidJS is a declarative, efficient and flexible JavaScript library for building user interfaces.&lt;/li&gt;
&lt;li&gt;It looks more like functional React components&lt;/li&gt;
&lt;li&gt;It has its own hooks, the difference being they start with &lt;code&gt;create*&lt;/code&gt; while React hooks start with &lt;code&gt;use*&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;SolidJS has 2 main building blocks: JSX Components and Reactive Primitives&lt;/li&gt;
&lt;li&gt;Components: just like in React are functions that accept props and return JSX elements or other components&lt;/li&gt;
&lt;li&gt;The Reactive Primitives are made up of Signals(equivalent to State in React), memos and Effects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is more to SolidJS, as the above are my initial findings. I will be diving deeper into the topic in my subsequent articles.&lt;/p&gt;

</description>
      <category>solidjs</category>
      <category>reactivity</category>
      <category>components</category>
      <category>javascript</category>
    </item>
    <item>
      <title>JavaScript : Arrays</title>
      <author>Vivek Alhat</author>
      <pubDate>Sat, 17 Jul 2021 10:43:13 +0000</pubDate>
      <link>https://dev.to/vivekalhat/javascript-arrays-4mkc</link>
      <guid>https://dev.to/vivekalhat/javascript-arrays-4mkc</guid>
      <description>&lt;p&gt;Variables can store only a single value at a time but what if you want to store multiple items at the same time? It is not efficient to create separate variables to store each item, right?&lt;/p&gt;

&lt;p&gt;In JavaScript, we can store multiple items &lt;em&gt;together&lt;/em&gt; using an array. An array is just a &lt;strong&gt;list-like&lt;/strong&gt; structure or a container that is used to store multiple elements irrespective of the data type.&lt;/p&gt;

&lt;p&gt;In JavaScript, you can create an array as given below,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let items = ["Apples", "Bananas", 2, 4, 8, "Purple", true, false]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;An array is just a variable that stores a list. In the above line, we have created an items variable that contains a list of 8 items. All the items inside the array have different data types. You can create an array of strings, numbers, boolean, objects, or a combination of multiple types. An array does not care about the type of data that is stored inside it.&lt;/p&gt;

&lt;p&gt;You can also create an array that contains another array such as,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let items = [1, 2, 3, ["Apples", "Bananas"]]&lt;/code&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-syntax-for-creating-an-array"&gt;
  &lt;/a&gt;
  The syntax for creating an array
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;let/const/var arrayName = []&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;An array name should not begin with a number.&lt;/p&gt;

&lt;p&gt;An array is created using &lt;strong&gt;square brackets&lt;/strong&gt;. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#accessing-elements-from-an-array"&gt;
  &lt;/a&gt;
  Accessing elements from an array
&lt;/h3&gt;

&lt;p&gt;Arrays are &lt;em&gt;zero-indexed&lt;/em&gt;. It means that the first element inside an array is stored at index 0, the second element is stored at index 1, and so on.&lt;/p&gt;

&lt;p&gt;If you want to access the third element then you can do it by using the following expression,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let items = [1, 2, 3, 4, 5]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let thirdElement = items[2]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, the thirdElement variable contains the value 3.&lt;/p&gt;

&lt;p&gt;To access an element from the array you have to specify the index of the element inside the square brackets i.e &lt;em&gt;arrayName&lt;/em&gt;[index].&lt;/p&gt;

&lt;p&gt;Since the array is a list-like structure, you can use loops to access all elements from the array.&lt;/p&gt;

&lt;p&gt;To get the length of an array you can use the length property of an array i.e &lt;code&gt;array.length&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#foreach-loop"&gt;
  &lt;/a&gt;
  forEach loop
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// for each loop is used to access each element present inside the array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-loop"&gt;
  &lt;/a&gt;
  for loop
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// The above loop will print each item to the console&lt;/span&gt;
&lt;span class="c1"&gt;// items.length contains the value 5 because array contains 5 elements&lt;/span&gt;
&lt;span class="c1"&gt;// hence the loop will run until the value of i is less than 5&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#modifying-array-elements"&gt;
  &lt;/a&gt;
  Modifying array elements
&lt;/h3&gt;

&lt;p&gt;We have seen how to create and access array elements. You can also modify the elements inside the array.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let items = [1, 2, 3, 4, 5]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Suppose you want to modify the value of the third element and replace it with 10. You can do it by,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;items[2] = 10&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now the array will be [1, 2, 10, 4, 5]&lt;/p&gt;

&lt;p&gt;In this way, you can reassign a value to any index inside the array. This property of an array is called mutability. It means that you can modify the elements inside the array.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#array-methods"&gt;
  &lt;/a&gt;
  Array Methods
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// get length of an array&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// prints 5&lt;/span&gt;

&lt;span class="cm"&gt;/*
    add and remove elements from the end of the array
    push - adds element at the end of the array
    pop - removes element from the end of the array
*/&lt;/span&gt;

&lt;span class="c1"&gt;// add element at the end of an array&lt;/span&gt;
&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns [1, 2, 3, 4, 5, 6]&lt;/span&gt;
&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns [1, 2, 3, 4, 5, 6, 7, 8]&lt;/span&gt;

&lt;span class="cm"&gt;/* At this point,
    items = [1, 2, 3, 4, 5, 6, 7, 8]
*/&lt;/span&gt;

&lt;span class="c1"&gt;// remove element from the end of an array&lt;/span&gt;
&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// returns [1, 2, 3, 4, 5, 6, 7]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removedValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// prints 7&lt;/span&gt;

&lt;span class="cm"&gt;/* At this point,
    items = [1, 2, 3, 4, 5, 6]
*/&lt;/span&gt;

&lt;span class="c1"&gt;// check if element is present inside array or not&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// prints false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// prints true&lt;/span&gt;

&lt;span class="cm"&gt;/* 
    find index of array elements
    indexOf - returns index of the first occurrence of the element
    lastIndexOf - returns index of the last occurrence of the element
*/&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pencil&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eraser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// prints 0&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// prints 4&lt;/span&gt;

&lt;span class="cm"&gt;/*
    add and remove elements from the beginning of the array
    shift - removes the first element from the array
    unshift - add element at the beginning of the array
*/&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// returns [2, 3]&lt;/span&gt;
&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns [0, 1, 2, 3]&lt;/span&gt;

&lt;span class="cm"&gt;/*
    sort - sorts an array in increasing order
    to sort array in decreasing order, you have to pass comparison function 
    to the sort
    syntax - array.sort()
*/&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// returns [1, 2, 3, 4, 5]&lt;/span&gt;

&lt;span class="c1"&gt;// sort in decreasing order&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// returns [5, 4, 3, 2, 1]&lt;/span&gt;

&lt;span class="cm"&gt;/*
    slice - returns a portion of array without modifying the array 
    syntax - slice(start, end), slice(start)

    slice does not return element present at the end index specified
*/&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// returns [3, 1, 2]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// returns [3, 1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can learn more about array methods &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
