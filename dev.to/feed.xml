<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 14 Best Css Frameworks For Your Next Projects</title>
      <author>Pawan Bhayde</author>
      <pubDate>Mon, 19 Apr 2021 05:26:58 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/top-14-best-css-frameworks-for-your-next-projects-2no2</link>
      <guid>https://dev.to/pawanbhayde/top-14-best-css-frameworks-for-your-next-projects-2no2</guid>
      <description>&lt;p&gt;HomeFrontendTop 14 Best Css Frameworks For Your Next Projects&lt;br&gt;
Top 14 Best Css Frameworks For Your Next Projects&lt;/p&gt;

&lt;p&gt;Hey Welcome...!, In this post we see top 14 Best Css Frameworks for your next web development projects. this 14 frameworkd are easy to use and easily customizable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Bootstrap&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/top-14-best-css-frameworks-for-your.html"&gt;Bootstrap&lt;/a&gt; may be a front-end development framework that permits developers &amp;amp; designers to quickly build fully responsive websites. The framework contains global CSS settings with built-in components and extensible classes within the sort of typography, navigation, buttons and far more.&lt;/p&gt;

&lt;p&gt;Bootstrap also contains optional jQuery plugins that further enhance the framework.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;p&gt;1 Massive community support&lt;br&gt;
2 Widest variety of themes&lt;br&gt;
3 Best browser capability&lt;br&gt;
4 Has both a fluid and fixed pattern grid system&lt;br&gt;
5 More development tools available&lt;br&gt;
6 Many popular websites are built on this framework&lt;/p&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;p&gt;1 Not as lightweight when compared to others&lt;br&gt;
2 Difficult to use jQuery plugins&lt;br&gt;
3 Websites are easily recognizable&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Foundation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/top-14-best-css-frameworks-for-your.html"&gt;Foundation&lt;/a&gt; may be a CSS framework designed by ZURB in September 2011. it's a rather more advanced interface compared to other frameworks. Foundation is compatible on multiple browsers and hand-held devices. The responsive menu is one among its greatest assets. The menu is incredible when it involves functionality and may even be easily styled using CSS. This responsive framework allows designers and developers to make elegant websites with more of a design-it-yourself approach.&lt;/p&gt;

&lt;p&gt;Pros:&lt;br&gt;
1 Design-it-yourself approach&lt;br&gt;
2 Immense customization settings&lt;br&gt;
3 Strong grid system&lt;br&gt;
4 Provides rapid development of code&lt;br&gt;
5 Easy to use templates available for download&lt;br&gt;
6 Lightweight&lt;/p&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;p&gt;1 More complex when trying to customize&lt;br&gt;
2 Not a great framework for beginners&lt;br&gt;
3 Less popular than Bootstrap&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.Bulma&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/top-14-best-css-frameworks-for-your.html"&gt;Bulma&lt;/a&gt; may be a relatively new entrant to the battleground of CSS frameworks and has made a reputation for itself during a short time. Its attractiveness lies during a strict, CSS-only approach (there are not any JavaScript components), and stylish defaults, which are some things many developers with an honest eye for design have a drag with when working with Bootstrap.&lt;/p&gt;

&lt;p&gt;Why choose the Bulma CSS Framework&lt;/p&gt;

&lt;p&gt;1 Quite popular&lt;br&gt;
2 Extremely readable classes&lt;br&gt;
3 Flat learning curve&lt;br&gt;
4 Elegant&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. UIkit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The thing that involves mind when thinking of &lt;a href="https://webdevpawan.blogspot.com/2021/04/top-14-best-css-frameworks-for-your.html"&gt;UIkit&lt;/a&gt; is minimalism. Minimalism not in features (in fact, it offers perhaps the foremost features of all frameworks), but in design. If super-clean, elegant, non-whitespace-shy designs are your thing, UIkit has you covered.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Semantic UI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another contender within the race is &lt;a href="https://webdevpawan.blogspot.com/2021/04/top-14-best-css-frameworks-for-your.html"&gt;Semantic UI&lt;/a&gt;, which tries to differentiate itself with tons of themes and customization. There are quite 3000 theming variables, which ends up during a massive breadth. approximately the docs say.&lt;/p&gt;

&lt;p&gt;Bootstrap 4 quite covers all this and is fully customizable also , but one advantage with Semantic UI is that it leads to nice-looking layouts by default. Still, it‚Äôs not the best-looking out of the box, which is why I put it later down on my list.&lt;/p&gt;

&lt;p&gt;It also has one among the steepest learning curves, and coding conventions are far more strict. Try it; I‚Äôd say, and see if it's like something you would possibly prefer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Susy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/top-14-best-css-frameworks-for-your.html"&gt;Susy&lt;/a&gt; may be a little-known framework at now , but it‚Äôs a desirable and refreshing idea. Another pure-layout framework, Susy does away with all predefined ideas of float, grid, Flexbox, tables, or anything , and allows you to compose the type of layout you would like . ‚ÄúCompose‚Äù is that the keyword here, as Susy is supposed for creating highly modular, staggering layouts with ultra-complex, unusual, and precise needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Materialize&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you‚Äôre crazy with Google‚Äôs Material Design, &lt;a href="https://webdevpawan.blogspot.com/2021/04/top-14-best-css-frameworks-for-your.html"&gt;Materialize&lt;/a&gt; may be a framework you‚Äôll enjoy. the simplest thing is that it's only a couple of components and classes to find out , and is concentrated on getting you productive as fast as possible. There are few customization options, and Materialize follows the favored 12-column grid format established by Bootstrap.&lt;/p&gt;

&lt;p&gt;If you inquire from me , though, a cloth design is becoming so common, and is so . . . Flat by default, that pretty soon we‚Äôll be complaining about it as we do about Bootstrap‚Äôs all-websites-look-the-same problem. Still, it‚Äôs a pleasant framework to start out with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Pure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Is Yahoo dead?&lt;/p&gt;

&lt;p&gt;No, this question isn't a diversion, but highlights a crucial observation: Yahoo built the Pure framework and released it under the BSD license.&lt;/p&gt;

&lt;p&gt;A quick look impresses me, and that i wonder why this offering isn't known to more people. Anyway, what makes Pure, well, pure, is that it‚Äôs a &lt;a href="https://webdevpawan.blogspot.com/2021/04/top-14-best-css-frameworks-for-your.html"&gt;pure&lt;/a&gt; CSS framework. üôÇ actually , the developers have gone the additional mile and broken it up into different CSS modules that you simply can import as required . So, if you would like only the grid system, there‚Äôs no got to import the whole CSS and add it to the site‚Äôs load time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Skeleton&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As you'll see within the screenshot, &lt;a href="https://webdevpawan.blogspot.com/2021/04/top-14-best-css-frameworks-for-your.html"&gt;Skeleton&lt;/a&gt; is so minimal that it doesn‚Äôt even call itself a CSS framework, library, or maybe module. It‚Äôs boilerplate, and contains only 400 lines of source code! Incredible? i feel so, but to place things in perspective, Skeleton was designed for little or small projects that require little quite layouts and positioning.&lt;/p&gt;

&lt;p&gt;Worth a look; in any case , who knows, Skeleton could be what you were trying to find all along!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Milligram&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/top-14-best-css-frameworks-for-your.html"&gt;Milligram&lt;/a&gt;, a CSS framework designed for speed and productivity. The developers have kept it under 2 KB in size, which by today‚Äôs standards, means tons .&lt;/p&gt;

&lt;p&gt;A milligram may be a fun little combat CSS frameworks that you‚Äôll appreciate working with. Extending it's easy, and with a couple of lines of custom CSS, you'll change its look to the way you would like .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. Tailwind Css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I remember the first days when &lt;a href="https://webdevpawan.blogspot.com/2021/04/top-14-best-css-frameworks-for-your.html"&gt;Tailwind CSS&lt;/a&gt; was released. It barely made a soft thud, and therefore the ecosystem gave it no attention; and rightly so, as long as Tailwind was neither backed by a tech giant nor had the push of a huge marketing budget. Besides, with Tailwind, you didn‚Äôt get a Bootstrap-like experience, something that had (or maybe still is) become the norm.&lt;/p&gt;

&lt;p&gt;In fact, Tailwind advocated a method of writing and using CSS that sent many screaming in disgust. I mean, check out the utilization of CSS classes within the following piece of code (taken from the Tailwind website)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. Tacit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/top-14-best-css-frameworks-for-your.html"&gt;Tacit&lt;/a&gt; is somebody‚Äôs side-project that I found while trying to find interesting things for this text . Yup, simply a side project; nothing quite one person‚Äôs work supported their liking.&lt;/p&gt;

&lt;p&gt;Why do I stress that so much?&lt;/p&gt;

&lt;p&gt;Because this generally means the danger of getting abandoned is extremely high. But then, I also can consider a few of positives: 1) The project is on GitHub, and so, if you‚Äôre a developer and need to support/expand Tacit, you recognize what to try to to . üòâ 2) CSS isn't like JavaScript in terms of change or evolution; whatever styling you‚Äôre using today are going to be supported by browsers for a really while .&lt;/p&gt;

&lt;p&gt;So, what exactly is that this Tacit thing?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. Spectre&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Modern, flexible, lightweight ‚Äî if you‚Äôre trying to find something with these attributes, &lt;a href="https://webdevpawan.blogspot.com/2021/04/top-14-best-css-frameworks-for-your.html"&gt;Spectre&lt;/a&gt; is worth a glance .&lt;/p&gt;

&lt;p&gt;Let me explain my choice of adjectives for Spectre:&lt;/p&gt;

&lt;p&gt;Modern: The layout system of Spectre is predicated on Flexbox, which is among the simplest things modern CSS has given us. Simultaneously, many facilities and tooling found in modern CSS workflows or other frameworks also are included.&lt;br&gt;
Flexible: you'll write the foremost modular and advanced CSS framework, but it‚Äôs little use if it‚Äôs not easily customizable. i prefer how customization is mentioned at the very top of their docs; follow the rabbit burrow , and you‚Äôll find extensive explanations.&lt;br&gt;
Lightweight: We are in an era where concerns about web performance are on an upswing; every kilobyte being transferred is scrutinized and criticized. As such, Spectre wraps up everything during a sweet 10KB package, which shouldn't be ‚Äútoo much‚Äù for all folks . üòù&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14. Primer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/top-14-best-css-frameworks-for-your.html"&gt;Primer&lt;/a&gt; isn't a CSS framework or library. It‚Äôs not even a set of CSS classes or another weird twist on terminology.&lt;/p&gt;

&lt;p&gt;Then why is it on this list? Two reasons:&lt;/p&gt;

&lt;p&gt;It has a CSS framework.&lt;br&gt;
It‚Äôs one among the foremost all-encompassing and mind-blowing things you‚Äôll ever see.&lt;/p&gt;

&lt;p&gt;Yes, because the screenshot says, Primer may be a design system developed by GitHub for his or her own use. Eventually, they realized this thing was powerful and very useful for frontend and visual work; so, they made it open source.&lt;/p&gt;

&lt;p&gt;I‚Äôve been struggling to seek out the proper words to explain Primer. Their own Design System Team calls it . . . well, yes, a design system, but i feel the scope is way broader than what we mean once we say ‚Äúdesign system‚Äù.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Node.JS - Foal framework - What's new in version 2 (4/4)</title>
      <author>Lo√Øc Poullain</author>
      <pubDate>Mon, 19 Apr 2021 05:25:41 +0000</pubDate>
      <link>https://dev.to/loicpoullain/node-js-foal-framework-what-s-new-in-version-2-4-4-3k0l</link>
      <guid>https://dev.to/loicpoullain/node-js-foal-framework-what-s-new-in-version-2-4-4-3k0l</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was originally published on &lt;a href="https://foalts.org/blog/2021/04/08/whats-new-in-version-2-part-4"&gt;https://foalts.org/blog/2021/04/08/whats-new-in-version-2-part-4&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This article presents the improvements to the session system in FoalTS version 2.&lt;/p&gt;

&lt;p&gt;The new syntax can be used either with cookies or with the &lt;code&gt;Authorization&lt;/code&gt; header. It adds the following new features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;query all sessions of a given user&lt;/li&gt;
&lt;li&gt;query all connected users&lt;/li&gt;
&lt;li&gt;force logout of a specific user&lt;/li&gt;
&lt;li&gt;flash sessions&lt;/li&gt;
&lt;li&gt;session ID regeneration&lt;/li&gt;
&lt;li&gt;anonymous and authenticated sessions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FoalTS also simplifies stateful CSRF protection so that all it takes is one setting to enable it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-session-system"&gt;
  &lt;/a&gt;
  New Session System
&lt;/h2&gt;

&lt;p&gt;The new authentication system is probably the main new feature of version 2. The old session components have been redesigned so as to serve three purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;be easy to use with very little code,&lt;/li&gt;
&lt;li&gt;support a large variety of applications and architectures (SPA, Mobile, SSR, API, &lt;code&gt;Authorization&lt;/code&gt; header, cookies, serverless environment, social auth, etc),&lt;/li&gt;
&lt;li&gt;and add missing features impossible to implement in version 1.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the way to use it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First &lt;a href="https://foalts.org/docs/authentication-and-access-control/session-tokens#choosing-a-session-store"&gt;specify in the configuration&lt;/a&gt; where your sessions should be stored (SQL database, redis, Mongo, etc).&lt;/li&gt;
&lt;li&gt;Then decorate any route or controller that need authentication with &lt;code&gt;@UseSessions&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example-with-the-raw-authorization-endraw-header"&gt;
  &lt;/a&gt;
  Example with the &lt;code&gt;Authorization&lt;/code&gt; header
&lt;/h3&gt;

&lt;p&gt;In this first example, we'd like to use the &lt;code&gt;Authorization&lt;/code&gt; header to handle authentication.&lt;/p&gt;

&lt;p&gt;We want to send an email address and password to &lt;code&gt;/login&lt;/code&gt; and retrieve a token in return to authenticate further requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;dependency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserRequired&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UseSessions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ValidateBody&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseUnauthorized&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/typeorm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../entities&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;UseSessions&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fetchUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ApiController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;dependency&lt;/span&gt;
  &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;UserRequired&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;readProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ValidateBody&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;additionalProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseUnauthorized&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;verifyPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseUnauthorized&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/logout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example-with-cookies"&gt;
  &lt;/a&gt;
  Example with cookies
&lt;/h3&gt;

&lt;p&gt;In this second example, we will use cookies to manage authentication. Foal will auto-creates a session when none exists.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;dependency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserRequired&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UseSessions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ValidateBody&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseUnauthorized&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/typeorm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../entities&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;UseSessions&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// highlight-next-line&lt;/span&gt;
  &lt;span class="na"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fetchUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ApiController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;dependency&lt;/span&gt;
  &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;UserRequired&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;readProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ValidateBody&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;additionalProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseUnauthorized&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;verifyPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseUnauthorized&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// highlight-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// highlight-next-line&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/logout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New features
&lt;/h3&gt;

&lt;p&gt;In addition to this redesign, version 2 also offers new features.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#query-all-sessions-of-a-user-typeorm-only"&gt;
  &lt;/a&gt;
  Query all sessions of a user (TypeORM only)
&lt;/h4&gt;

&lt;p&gt;This feature allows you to list all sessions associated with a specific user. This can be useful if a user is connected on several devices and you like to audit them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSessionIDsOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#query-all-connected-users-typeorm-only"&gt;
  &lt;/a&gt;
  Query all connected users (TypeORM only)
&lt;/h4&gt;

&lt;p&gt;This feature lists all users that have at least one session in the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAuthenticatedUserIds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#force-the-disconnection-of-a-user-typeorm-only"&gt;
  &lt;/a&gt;
  Force the disconnection of a user (TypeORM only)
&lt;/h4&gt;

&lt;p&gt;In case you want to remove all sessions associated with a specific user, you can use the &lt;code&gt;destroyAllSessionsOf&lt;/code&gt; method. This can be useful if you think a session has been corrupted or when you want, for example when a password is changed, to disconnect a user from all other devices to which he/she has previously logged on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroyAllSessionsOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#flash-sessions"&gt;
  &lt;/a&gt;
  Flash sessions
&lt;/h4&gt;

&lt;p&gt;Flash content is used when we want to save data (a message for example) only for the next request. A typical use case is when a user enters wrong credentials. The page is refreshed and an error message is displayed.&lt;/p&gt;

&lt;p&gt;To use flash content, you only need to add the option &lt;code&gt;flash&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;set&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Incorrect email or password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#regenerate-the-session-id"&gt;
  &lt;/a&gt;
  Regenerate the session ID
&lt;/h4&gt;

&lt;p&gt;Regenerating the session ID is a &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#renew-the-session-id-after-any-privilege-level-change"&gt;recommended practice&lt;/a&gt; when changing a user's privileges or password. This can now be done with the &lt;code&gt;regenerateID&lt;/code&gt; method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;regenerateID&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#expired-sessions-clean-up-regularly-typeorm-and-mongodb"&gt;
  &lt;/a&gt;
  Expired sessions clean up regularly (TypeORM and MongoDB)
&lt;/h4&gt;

&lt;p&gt;Starting from version 2, Foal regularly cleanup expired sessions in your database so you don't have to do it manually.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#anonymous-sessions-and-templates"&gt;
  &lt;/a&gt;
  Anonymous sessions and templates
&lt;/h4&gt;

&lt;p&gt;In version 2, &lt;code&gt;@UseSessions({ cookie: true })&lt;/code&gt; automatically creates a session if none exists. This is particularly useful if you're building a shopping website with SSR templates. When the user navigates on the website, he/she can add items to the cart without having to log in the first place. Then, when the user wants to place his/her order, he can log in and the only thing you have to do is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#stateful-csrf-protection-simplified"&gt;
  &lt;/a&gt;
  Stateful CSRF protection simplified
&lt;/h2&gt;

&lt;p&gt;In version 1, providing a CSRF protection was quite complex. We needed to manage token generation, handle the CSRF cookie (expiration, etc), use an additional hook, etc.&lt;/p&gt;

&lt;p&gt;Starting from version 2, the CSRF protection is all managed by &lt;code&gt;@UseSessions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;YAML version&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;settings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;session&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;csrf&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;JSON version&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"settings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"session"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"csrf"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;JS version&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;csrf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When it is enabled, an additional &lt;code&gt;XSRF-TOKEN&lt;/code&gt; cookie is sent to the client at the same time as the session cookie. It contains a CSRF token associated with your session.&lt;/p&gt;

&lt;p&gt;When a request is made to the server, the &lt;code&gt;@UseSessions&lt;/code&gt; hooks expects you to include its value in the &lt;code&gt;XSRF-TOKEN&lt;/code&gt; header.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're building a regular web application and want to include the CSRF token in your templates, you can retrieve it with this statement: &lt;code&gt;ctx.session.get('csrfToken')&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>Building perfect portfolio</title>
      <author>Aditya Giri</author>
      <pubDate>Mon, 19 Apr 2021 05:00:12 +0000</pubDate>
      <link>https://dev.to/brainbuzzer/building-perfect-portfolio-261b</link>
      <guid>https://dev.to/brainbuzzer/building-perfect-portfolio-261b</guid>
      <description>&lt;p&gt;Building a developer portfolio is one of the most daunting tasks. Where do you start? What do you need in your portfolio?&lt;/p&gt;

&lt;p&gt;A portfolio just like one for designers is a website that showcases all the work you have done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do you need a portfolio?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, you already have a resume, and a LinkedIn profile, isn't that enough? While both of them are important, a portfolio has much more to it.&lt;/p&gt;

&lt;p&gt;If your projects are a monument, A resume and a LinkedIn profile are like the broachers you get at the gates of the monument when you visit them, a bunch of screenshots, external links, and that's it. A portfolio, on the other hand, is more like a guided tour of your projects. Where you show (rather than just state) your skills. A portfolio lets you highlight the most impressive and important parts of your projects, stuff that isn't visible at the first glance, or things that you are really proud of.&lt;/p&gt;

&lt;p&gt;So how do you build a decent portfolio?&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#curating-the-projects"&gt;
  &lt;/a&gt;
  Curating the projects.
&lt;/h3&gt;

&lt;p&gt;Go deep not wide.&lt;/p&gt;

&lt;p&gt;A portfolio is meant to be a showcase, a showcase of your best work and not an exhaustive list of all your work. Nobody will spend time looking at more than 3-4 projects. If you make it an exhaustive list, chances are a potential employer would end up looking at one of the least impressive ones.&lt;/p&gt;

&lt;p&gt;Pick 4 projects that best represent your skills, and if you really want to include more than that consider putting up an archive link to all the other projects.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#make-it-personal"&gt;
  &lt;/a&gt;
  Make it Personal
&lt;/h3&gt;

&lt;p&gt;The portfolio should reflect your personality. Avoid generic terms and language, you are making your personal portfolio, not a template for mass use. So make sure it reflects you!&lt;/p&gt;

&lt;p&gt;Tell your story, include information that shows the human whose work they are looking at.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-a-tour-guide"&gt;
  &lt;/a&gt;
  Be a tour guide
&lt;/h3&gt;

&lt;p&gt;When it comes to the project description pages, guide the reader through the most important aspects of your projects, show them the challenges you went through, how the project came into being, highlight the sections that you are really proud of. Tell the story of your journey while working on the projects, the difficulties, the way you resolved them, what new things you came across, everything. Your project description pages should convey to employers that you're competent and enthusiastic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good-uxui"&gt;
  &lt;/a&gt;
  Good UX/UI
&lt;/h3&gt;

&lt;p&gt;Obviously, every website needs a decent UX/UI. Even if you are not a designer, it still matters that your portfolio site has a good design and aesthetic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#domain-and-hosting"&gt;
  &lt;/a&gt;
  Domain and Hosting.
&lt;/h3&gt;

&lt;p&gt;A portfolio site should probably be a static site and if possible prefer buying a domain for your portfolio site, eg yourname.com.&lt;/p&gt;

&lt;p&gt;Make sure your portfolio follows accessibility standards.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#general-layout"&gt;
  &lt;/a&gt;
  General Layout
&lt;/h3&gt;

&lt;p&gt;Obviously, the layout of your portfolio depends on your own designs and templates that you use, but let's talk basics, what are the most basic elements that every portfolio has.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An About me section

&lt;ul&gt;
&lt;li&gt;A small about me section that highlights your personality and your background.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;A list of projects

&lt;ul&gt;
&lt;li&gt;a curated list of the projects you have worked on, with each project having a link to a project page that talks more about the project.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Contact Information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;About the Project description pages, while it is a tricky and time-consuming thing to build decent project description pages. Nevertheless, these pages are important.&lt;/p&gt;

&lt;p&gt;Here's a template drawn by Josh Comeau in his book "Building an effective dev portfolio" for the project description pages to give you a better idea.&lt;/p&gt;

&lt;p&gt;Introduction&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High-level summary of what the project is&lt;/li&gt;
&lt;li&gt;List of core functionalities / interesting features&lt;/li&gt;
&lt;li&gt;Your role in the project.&lt;/li&gt;
&lt;li&gt;Technologies used&lt;/li&gt;
&lt;li&gt;Links to live demo + source code (if applicable)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Purpose and Goal&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why did you build this project? Why is it important to you?&lt;/li&gt;
&lt;li&gt;What was the expected outcome of the project?&lt;/li&gt;
&lt;li&gt;What were the initial designs?&lt;/li&gt;
&lt;li&gt;Any other preliminary planning that you did which helps build a narrative&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Spotlight&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is the ‚Äúkiller feature‚Äù of your project?&lt;/li&gt;
&lt;li&gt;What were the technical hurdles that got in your way? Any major problems you hit during development?&lt;/li&gt;
&lt;li&gt;How did you solve those problems? What was the solution? Go deep here, and write with a developer in mind.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Current status&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This section is optional. If the project is actively being used by real people, talk a little bit about the current status, who uses it, why they use it, what they say to you about it, stuff like that.&lt;/li&gt;
&lt;li&gt;If the project was contrived specifically for the portfolio, omit this section.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lessons Learned&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What did you learn doing this project? Feel free to list multiple things. Also, feel free to cover non-technical lessons. It‚Äôs great to talk about how you learned to use an advanced feature of a framework or library, but it‚Äôs just as valuable to talk about the project-management experience or things you learned about shipping projects.&lt;/li&gt;
&lt;li&gt;If you used a framework or other libraries/tools, was it a good choice? How did it help? In which ways was it insufficient?&lt;/li&gt;
&lt;li&gt;Is your project accessible? What did you learn about accessibility, while building this project? Describing how you tested your project using keyboard navigation or a screen reader can make for a really compelling story!&lt;/li&gt;
&lt;li&gt;How has this affected the work you‚Äôve done since then? Real examples of how this project built your knowledge for future projects are fantastic.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;In summary,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your Portfolio site should have a decent enough UI/UX&lt;/li&gt;
&lt;li&gt;Make sure it reflects your personality and the content isn't generic.&lt;/li&gt;
&lt;li&gt;It should have a minimum general layout with an About me section and a Project details list.&lt;/li&gt;
&lt;li&gt;Make sure your portfolio follows accessibility standards.&lt;/li&gt;
&lt;li&gt;Use a domain custom domain.&lt;/li&gt;
&lt;li&gt;Connect your social media profiles and blogs.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Are you looking to create a portfolio but don't know where to start? &lt;a href="https://hyperlog.io"&gt;Hyperlog&lt;/a&gt; was made with just that use-case in mind. It allows you to build a portfolio according to your style while giving you the ability to add cool pluggable and themes to your project. Connect your repositories and get your code analyzed. The best part, you can get your portfolio on the WWW in under 5 minutes. Get custom domains, website analytics, and much more.&lt;/p&gt;

&lt;p&gt;You focus on the code, we do the rest.&lt;/p&gt;

</description>
      <category>portfolio</category>
      <category>javascript</category>
      <category>firstyearincode</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Amazon EBS vs EFS vs S3: Picking the Best AWS Storage Option</title>
      <author>Adit Modi</author>
      <pubDate>Mon, 19 Apr 2021 04:57:27 +0000</pubDate>
      <link>https://dev.to/aws-builders/amazon-ebs-vs-efs-vs-s3-picking-the-best-aws-storage-option-2kdj</link>
      <guid>https://dev.to/aws-builders/amazon-ebs-vs-efs-vs-s3-picking-the-best-aws-storage-option-2kdj</guid>
      <description>&lt;p&gt;The storage strategy you choose plays a major role in the performance you receive, as well as the costs you‚Äôll expend. To achieve peak efficiency, you must match your computing, application, and processing needs to the appropriate storage technology. But which option is right for you?&lt;/p&gt;

&lt;p&gt;To answer this question, we‚Äôll explore the differences between Amazon Elastic Block Store (Amazon EBS), Amazon Elastic File System (Amazon EFS), and Amazon Simple Storage Service (Amazon S3) and understand each solution‚Äôs unique benefits and uses. This will make it easier to pick the best solution to support your business objectives and storage needs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lVfzGRxO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idvhggqn8i6vwu64yh51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVfzGRxO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idvhggqn8i6vwu64yh51.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Background: I am Cloud , DevOps &amp;amp; Big Data Enthusiast | 4x AWS Certified | 3x OCI Certified | 3x Azure Certified . &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-difference-between-amazon-ebs-vs-efs-vs-s3"&gt;
  &lt;/a&gt;
  What‚Äôs The Difference Between Amazon EBS Vs EFS Vs S3?
&lt;/h2&gt;

&lt;p&gt;Amazon EFS, Amazon EBS, and Amazon S3 are AWS‚Äô three different storage types that can be applicable for different types of workload needs. Let‚Äôs take a closer look at the key features of each option, as well as the similarities and differences.&lt;/p&gt;

&lt;p&gt;Amazon EBS delivers high-availability block-level storage volumes for Amazon Elastic Compute Cloud (EC2) instances. It stores data on a file system which is retained after the EC2 instance is shut down. Amazon EFS offers scalable file storage, also optimized for EC2. It can be used as a common data source for any application or workload that runs on numerous instances. Using an EFS file system, you may configure instances to mount the file system. The main differences between EBS and EFS is that EBS is only accessible from a single EC2 instance in your particular AWS region, while EFS allows you to mount the file system across multiple regions and instances.&lt;/p&gt;

&lt;p&gt;Finally, Amazon S3 is an object store good at storing vast numbers of backups or user files. Unlike EBS or EFS, S3 is not limited to EC2. Files stored within an S3 bucket can be accessed programmatically or directly from services such as AWS CloudFront. This is why many websites use it to hold their content and media files, which may be served efficiently from AWS CloudFront.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-can-you-choose-between-amazon-ebs-vs-efs-vs-s3"&gt;
  &lt;/a&gt;
  So how can you choose between Amazon EBS vs EFS vs S3?
&lt;/h2&gt;

&lt;p&gt;That depends on what benefits you‚Äôre looking for, and your use case for your workload. Let‚Äôs take an in-depth look at each one to understand their benefits and use cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-elastic-block-store-amazon-ebs"&gt;
  &lt;/a&gt;
  Amazon Elastic Block Store (Amazon EBS)
&lt;/h2&gt;

&lt;p&gt;Use Amazon EBS to provide storage for the drives of your virtual machines. It stores data in equally-sized blocks and organizes them into a hierarchy similar to a traditional file system. The volumes are provisioned in size and attached to EC2 instances in a way that‚Äôs similar to the local disk drive on a physical machine. Here are EBS‚Äô benefits and use cases:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-ebs-benefits"&gt;
  &lt;/a&gt;
  Amazon EBS Benefits
&lt;/h2&gt;

&lt;p&gt;Performance optimization: Increase throughput by devoting network capacity and minimizing the network contention between your instances and EBS.&lt;/p&gt;

&lt;p&gt;Low-latency performance: By using SSD EBS volumes, it offers reliable I/O performance scaled to meet your workload needs.&lt;br&gt;
Highly available and secure storage: EBS volumes offer redundancy within its Availability Zones while access control and encryption bolster security.&lt;/p&gt;

&lt;p&gt;Geographic interchangeability: With EBS, you can duplicate snapshots throughout AWS regions and place resources and data in multiple locations. This makes disaster recovery, data center migration, and geographical expansion simple.&lt;/p&gt;

&lt;p&gt;Easy data backup and restoration: Point-in-time volume snapshots safeguard data.&lt;/p&gt;

&lt;p&gt;Rapid up- or down-scaling: EBS can quickly scale volumes, ensuring you get the right performance and capacity for changing computing needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-ebs-use-cases"&gt;
  &lt;/a&gt;
  Amazon EBS Use Cases
&lt;/h2&gt;

&lt;p&gt;Testing and development: You can scale, archive, duplicate or provision your testing, development, or production environments.&lt;/p&gt;

&lt;p&gt;NoSQL databases: EBS offers NoSQL databases the low-latency performance and dependability they need for peak performance.&lt;br&gt;
Relational databases: EBS scales to meet your changing storage needs. This makes it a great choice for deploying databases, including PostgreSQL, MySQL, Oracle, or Microsoft SQL Server.&lt;/p&gt;

&lt;p&gt;Business consistency: Copy EBS Snapshots and Amazon Machine Images (AMIs) to run applications in different AWS regions. This reduces data loss and speeds recovery time by backing up log files and data regularly, across geographies.&lt;/p&gt;

&lt;p&gt;Enterprise-wide applications: It can meet a variety of enterprise computing needs through powerful block storage that can support your most important applications, such as Microsoft Exchange, Oracle, or Microsoft SharePoint.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-elastic-file-system-amazon-efs"&gt;
  &lt;/a&gt;
  Amazon Elastic File System (Amazon EFS)
&lt;/h2&gt;

&lt;p&gt;EFS is the best choice for running any application that has a high workload, requires scalable storage, and must produce output quickly. It scales automatically, even to meet the most abrupt workload spikes. After the period of high-volume storage demand has passed, EFS will automatically scale back down. EFS can be mounted to different AWS services and accessed from all your virtual machines. Use it for running shared volumes, or for big data analysis. You‚Äôll always pay for the storage you actually use, rather than provisioning storage in advance that‚Äôs ultimately wasted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-efs-benefits"&gt;
  &lt;/a&gt;
  Amazon EFS Benefits
&lt;/h2&gt;

&lt;p&gt;Performance that scales to support any workload: EFS offers the throughput changing workloads need. It can provide higher throughput in spurts that match sudden file system growth, even for workloads up to 500,000 IOPS or 10 GB per second.&lt;/p&gt;

&lt;p&gt;Energetic elasticity: Automatically scale your file system storage up or down. Remove or add files and never disturb applications. Once you make your EFS file system you can add files without worrying about storage provisioning.&lt;/p&gt;

&lt;p&gt;Accessible file storage: On-premises servers and EC2 instances can access shared file systems concurrently. EC2 instances can also access EFS file systems located in other AWS regions through VPC peering.&lt;/p&gt;

&lt;p&gt;Comprehensive managed service: EFS is a complete managed service, meaning your firm will never have to patch, deploy, or maintain your file system.&lt;/p&gt;

&lt;p&gt;Cost savings: The only storage you‚Äôll pay for is exactly what you use, as there‚Äôs no advance provisioning, up-front fees, or commitments. Moreover, you can use Lifecycle Management to transfer files that have been unused for a month to a more cost-effective storage class, which can lower expenses up to 85%.&lt;br&gt;
Tighter security and compliance: You can securely access the file system with your current security solution, or control access to EFS file systems using AWS Identity and Access Management (IAM), Amazon Virtual Private Cloud (Amazon VPC), or POSIX permissions. And, EFS can encrypt your data, whether it‚Äôs in transit or at rest. This gives you dependable security and makes regulatory compliance easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-efs-use-cases"&gt;
  &lt;/a&gt;
  Amazon EFS Use Cases
&lt;/h2&gt;

&lt;p&gt;Lift-and-shift application support: EFS is elastic, available, and scalable, and enables you to move enterprise applications easily and quickly without needing to re-architect them.&lt;/p&gt;

&lt;p&gt;Analytics for big data: It has the ability to run big data applications, which demand significant node throughput, low-latency file access, and read-after-write operations.&lt;/p&gt;

&lt;p&gt;Content management system and web server support: EFS is a robust throughput file system capable of enabling content management systems and web serving applications, such as archives, websites, or blogs.&lt;/p&gt;

&lt;p&gt;Application development and testing: Only EFS provides a shared file system needed to share code and files, across multiple compute resources to facilitate auto-scaling workloads.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-s3"&gt;
  &lt;/a&gt;
  Amazon S3
&lt;/h2&gt;

&lt;p&gt;Amazon S3 provides object storage. Each object has its own unique identifier or key, for access through web requests from any location. S3 also supports static web content hosting that can be accessed from the S3 bucket or from AWS CloudFront. And S3 is notably secure, providing. ‚Äúeleven nines‚Äù - 99.999999999 of data durability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-s3-benefits"&gt;
  &lt;/a&gt;
  Amazon S3 Benefits
&lt;/h2&gt;

&lt;p&gt;Robust performance, scalability, and availability: Amazon S3 scales storage resources free from resource procurement cycles or investments upfront. It keeps your data safe from errors, failures, and threats and makes it available when you need it.&lt;br&gt;
Cost-saving storage classes: Storing data throughout S3 storage classes saves costs and maintains high levels of performance. Storage class analysis enables you to locate data that may be moved to a lower-cost storage class. Then you can make the transfer using an S3 Lifecycle policy. &lt;/p&gt;

&lt;p&gt;Finally, S3 intelligent-tiering enables the storage of data that has changing or unknown access patterns by tiering objects, which cuts storage costs.&lt;/p&gt;

&lt;p&gt;Easier security, compliance, and audit features: S3 can store data and protect it from unauthorized access using its powerful access management and encryption tools. S3 has features that make it easy to comply with regulatory requirements, and Amazon Macie can deny irregular access requests to your sensitive data. Plus, S3 works well with AWS‚Äô many auditing features.&lt;/p&gt;

&lt;p&gt;Exacting data control: An array of management tools enable you to classify and report on data. S3 has storage class analysis that monitors access patterns, while S3 Lifecycle analyzes object transfers to lower-cost storage. &lt;br&gt;
S3 Object Lock assigns retention dates to objects to prevent deletion, and S3 Inventory offers visibility of stored objects and their encryption and metadata. Finally, S3 Batch Operations can run storage management maintenance for billions of objects while AWS Lambda can be used to automate workflows, define alerts and log activities without added management of infrastructure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-s3-use-cases"&gt;
  &lt;/a&gt;
  Amazon S3 Use Cases
&lt;/h2&gt;

&lt;p&gt;Data lake and big data analytics: Create a data lake to hold raw data in its native format, then use machine learning tools, query-in-place, and analytics to draw insights. S3 works with AWS Lake Formation to create data lakes, then define governance, security, and auditing policies. Together, they can be scaled to meet your growing data stores, and you‚Äôll never have to make an investment upfront.&lt;/p&gt;

&lt;p&gt;Backup and restoration: Secure, robust backup and restoration solutions are easy to build when you combine S3 with other AWS offerings, including EBS, EFS, or S3 Glacier. These offerings enhance your on-premises capabilities, while other offerings can help you meet compliance, recovery time, and recovery point objectives.&lt;/p&gt;

&lt;p&gt;Reliable disaster recovery: S3 storage, S3 Cross-Region Replication and additional AWS networking, computing, and database services make it easy to protect critical applications, data, and IT systems. It offers nimble recovery from outages, no matter if they are caused by system failures, natural disasters, or human error.&lt;/p&gt;

&lt;p&gt;Methodical archiving: S3 works seamlessly with other AWS offerings to provide methodical archiving capabilities. S3 Glacier and S3 Glacier Deep Archive enable you to archive data and retire physical infrastructure. There are three S3 storage classes you can use to retain objects for extended periods of time at their lowest rates. &lt;/p&gt;

&lt;p&gt;S3 Lifecycle policies can be created to archive objects at any point within their lifecycle, or you can upload objects to archival storage classes directly. &lt;/p&gt;

&lt;p&gt;S3 Object Lock meets compliance regulations by applying retention dates objects to avoid their deletion. And unlike a tape library, S3 Glacier can restore any archived object within minutes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X2hORSun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/455ibg4awp8z3qyht4ho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X2hORSun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/455ibg4awp8z3qyht4ho.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this guide helps you understand the Different AWS Storage Options, feel free to connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn.&lt;/a&gt;&lt;br&gt;
You can view my badges &lt;a href="https://www.youracclaim.com/users/adit-modi/badges"&gt;here.&lt;/a&gt;&lt;br&gt;
If you are interested in learning more about AWS then follow me on &lt;a href="https://github.com/AditModi"&gt;github.&lt;/a&gt;&lt;br&gt;
If you liked this content then do clap and share it . Thank You .&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>beginners</category>
      <category>career</category>
      <category>aws</category>
    </item>
    <item>
      <title>How to Easily Add Social Media Icons in WordPress</title>
      <author>GretaThemes</author>
      <pubDate>Mon, 19 Apr 2021 04:34:25 +0000</pubDate>
      <link>https://dev.to/gretathemes/how-to-easily-add-social-media-icons-in-wordpress-8kj</link>
      <guid>https://dev.to/gretathemes/how-to-easily-add-social-media-icons-in-wordpress-8kj</guid>
      <description>&lt;p&gt;It is always easier to interact with other people on social media than on your own WordPress website. That is why on many websites, they add a few icons to direct readers to their social platforms like Facebook or Instagram. If you want to have impressive and convenient social media icons like that, let's follow our construction in this post. We will show you &lt;strong&gt;how to link your social media channels to WordPress websites&lt;/strong&gt; by using a plugin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-social-media-icons-and-its-benefits"&gt;
  &lt;/a&gt;
  What are Social Media Icons and Its Benefits?
&lt;/h2&gt;

&lt;p&gt;To get started, we will discover what social media icons are and why we should have them on our website.&lt;/p&gt;

&lt;p&gt;Social media icons are the icons that link to the social media websites like Facebook, Instagram, Twitter of the website's owner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oGxQjjqh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/b04lz6H.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oGxQjjqh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/b04lz6H.gif" alt="Social media icon are the icons that link to the social media website."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, don't mistake the these icons with social sharing buttons. Social sharing buttons allow you to share a post/page to your own post social media platforms. If you want to know more about how to add social sharing buttons, &lt;a href="https://gretathemes.com/adding-like-button/"&gt;this post&lt;/a&gt; can help you.&lt;/p&gt;

&lt;p&gt;Social linking is really helpful for making your WordPress website recognizable to various people on different social media platforms. Hence, you can &lt;a href="https://gretathemes.com/promoted-social-media-account-improve-seo/"&gt;make your website more popular and interactive&lt;/a&gt; with potential readers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-add-social-media-icons-to-your-wordpress-site"&gt;
  &lt;/a&gt;
  How to Add Social Media Icons to Your WordPress Site
&lt;/h2&gt;

&lt;p&gt;There are many ways to create social media icons for your WordPress website. We have some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Use a theme with a built-in social media menu / widget feature, then read the documentation of the theme to add them. Different themes have different ways to add social links, so remember to read carefully!&lt;/li&gt;
&lt;li&gt;  Use &lt;a href="https://metabox.io/wordpress-themes-for-page-builders/"&gt;a page builder&lt;/a&gt;. One thing to notice is that not every page builder can support you to add a social icons module.&lt;/li&gt;
&lt;li&gt;  Use a plugin. Personally, I think this is the fastest and easiest way, not regarding how amateur you are in WordPress.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, my choice is &lt;strong&gt;Simple Social Icon&lt;/strong&gt; - an easy-to-use plugin just as its name. You just need to keep 3 steps in your mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-install-simple-social-icon-plugin"&gt;
  &lt;/a&gt;
  Step 1: Install Simple Social Icon Plugin
&lt;/h3&gt;

&lt;p&gt;You can &lt;a href="https://gretathemes.com/install-wordpress-plugin/"&gt;download and install plugin&lt;/a&gt; by going to &lt;strong&gt;Dashboard &amp;gt; Plugin &amp;gt; Add New&lt;/strong&gt;. Once seeing &lt;strong&gt;Simple Social Icon&lt;/strong&gt;, click &lt;strong&gt;Install &amp;gt; Activate&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3mneSZN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/33N5nij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3mneSZN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/33N5nij.png" alt="Download and install plugin in your WordPress website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-look-for-the-widget-and-locate-the-icons"&gt;
  &lt;/a&gt;
  Step 2: Look for the Widget and Locate the Icons
&lt;/h3&gt;

&lt;p&gt;After successfully installing and activating the plugin, you will be given a widget named &lt;strong&gt;Simple Social Icon&lt;/strong&gt;. This is where you can add your social links and customize the display of them. There are two options for you:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#option-1-use-admin-dashboard"&gt;
  &lt;/a&gt;
  Option 1: Use Admin Dashboard
&lt;/h4&gt;

&lt;p&gt;To look for the widget of Simple Social Icon plugin, go to &lt;strong&gt;Appearance &amp;gt; Widget&lt;/strong&gt;, search for the name &lt;strong&gt;Simple Social Icon&lt;/strong&gt; and click on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-83fMbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2qHAzOX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-83fMbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2qHAzOX.png" alt="Search plugin Simple Social Icon in Widget"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, just find a desired location for your social icons. Note that each theme has different widget areas. For example, I choose &lt;strong&gt;Sidebar&lt;/strong&gt; to display social icons, then click &lt;strong&gt;Add Widget&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oKBeXR_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UWvkVex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oKBeXR_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UWvkVex.png" alt="Choose your desired position of the icons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is when you can see the widget along with some custom options display on the sidebar. You will add links and customize the display of social media icons here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D5-gY8Tn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/GpggJac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D5-gY8Tn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/GpggJac.png" alt="Add link and customize the display of the icons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can't be more simple, actually. Just add the links into the corresponding tabs, and there you're done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c550ln2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8vPR3ak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c550ln2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8vPR3ak.png" alt="Simple Social Icons allows you to add up many links."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simple Social Icon&lt;/strong&gt; allows you to add up to 20 social links, from the popular ones like Facebook, Instagram and Twitter to the less popular. Hence, you can insert various kinds of social media linking icons to your WordPress site.&lt;/p&gt;

&lt;p&gt;However, custom links are not supported in this plugin. So if you have any links not included in the list above, you can't add them.&lt;/p&gt;

&lt;p&gt;Now, let's see the result after I added some links to my website:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0l-jCNI5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ROon1WB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0l-jCNI5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ROon1WB.png" alt="Result after adding links to website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#option-2-use-customizer"&gt;
  &lt;/a&gt;
  Option 2: Use Customizer
&lt;/h4&gt;

&lt;p&gt;You can also customize and add social links using &lt;strong&gt;Customizer&lt;/strong&gt;. The advantage of this way is that you have real-time preview - that means you can customize and see your social media icons displayed at the same time.&lt;/p&gt;

&lt;p&gt;First, go to your website and click &lt;strong&gt;Customize&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kmIoOnQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DsU9FEJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kmIoOnQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DsU9FEJ.png" alt="Use Customizer to customize and add social links"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;Widget&lt;/strong&gt; and find a nice location for your social icons, just like the Option 1.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lvJ5sqXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/11vBXHM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lvJ5sqXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/11vBXHM.png" alt="Go to Widget to choose social media icon's location"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OO5V7WHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/5iQV3Zb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OO5V7WHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/5iQV3Zb.png" alt="Choose the icon's location"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After locating the links, click &lt;strong&gt;Add Widget&lt;/strong&gt; and type &lt;strong&gt;Simple Social Icon&lt;/strong&gt; in the search bar, then click on that widget.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oKv8wUKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/XeI5b2O.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oKv8wUKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/XeI5b2O.png" alt="Search for Simple Social Icon in Add Widget"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this time, add links into the corresponding tabs, like what I have told you in the option 1.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9x3uwho5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zDI5hY3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9x3uwho5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zDI5hY3.png" alt="Add social links into corresponding tabs "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding all the links, this is what I have:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tHrgW__9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zrvOdpA.png" alt="Result of adding social links"&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#step-3-customize-the-size-and-color-of-social-linking-icons"&gt;
  &lt;/a&gt;
  Step 3: Customize the Size and Color of Social Linking Icons
&lt;/h3&gt;

&lt;p&gt;Customizing social linking icons is important to make your website more eye-catching. You just need to go to &lt;strong&gt;Admin Dashboard&lt;/strong&gt; or &lt;strong&gt;Customizer&lt;/strong&gt; on your website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BOPOEqGG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6XZTIaN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BOPOEqGG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6XZTIaN.png" alt="Customize size and color of your social media icons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before customizing the size and colors of social linking icons, you can write a title for them. An impressive title can be useful to urge people to click on your social icons. So remember to keep titles short and attractive, such as Follow us, Connect us, Let be friend with us,...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f2tBuia2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WAXB6Wf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f2tBuia2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WAXB6Wf.png" alt="Name your social linking icons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, you can choose to either click on &lt;strong&gt;Open links in the new window&lt;/strong&gt; or not. For me, I will click on this option so that it can be more convenient for the users.&lt;/p&gt;

&lt;p&gt;Next, customize the size and colors of social media icons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UYxHdVQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CwU3P0e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UYxHdVQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CwU3P0e.png" alt="Customize size and color of your social media icons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, click &lt;strong&gt;Save&lt;/strong&gt; if you use &lt;strong&gt;Admin Dashboard&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dyjeuwo3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/J0VoQFp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dyjeuwo3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/J0VoQFp.png" alt="Save after customizing your social media icons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Done &amp;gt; Publish&lt;/strong&gt; if you use &lt;strong&gt;Customizer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GpzYMIk2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/cbo2hUs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GpzYMIk2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/cbo2hUs.png" alt="Publish your social media icons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The social icons will be exactly as you have just customized.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YGZLNlvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3HNjtBk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YGZLNlvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3HNjtBk.png" alt="Result of your customizing the social media icons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it! Your website is ready to display its own social linking icons!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-verdict"&gt;
  &lt;/a&gt;
  The verdict
&lt;/h2&gt;

&lt;p&gt;Adding social media icons is as easy as eating a cake, isn't it? Just follow our instructions and you will not be disappointed. Making your website more professional with these social media icons is more likely to impress your targeted readers. If you have any questions or recommendations, don't hesitate to leave us some comments below. We are willing to listen to you.&lt;/p&gt;

</description>
      <category>wordpress</category>
    </item>
    <item>
      <title>14 CSS Topics You Must Know</title>
      <author>üÖ∞Ô∏è GEEK</author>
      <pubDate>Mon, 19 Apr 2021 04:29:58 +0000</pubDate>
      <link>https://dev.to/ageekdev/14-css-topics-you-must-know-2e0g</link>
      <guid>https://dev.to/ageekdev/14-css-topics-you-must-know-2e0g</guid>
      <description>&lt;p&gt;It has been more than 2 decades and we‚Äôre still using CSS for styling. It is simple to learn and here to stay for many years to come. As frontend developer, you are expected to be solid at CSS styling no matter what technologies you‚Äôre using.&lt;/p&gt;

&lt;p&gt;The way we write CSS has changed a little bit in recent years following the rise of JavaScript frameworks. CSS architecture has been moving to direction of local separate styled components than global shared style sheet.&lt;/p&gt;

&lt;p&gt;This post covers 14 essential CSS topics, originally published at &lt;a href="https://ageek.dev/css"&gt;ageek.dev&lt;/a&gt;, which you think you already know but might not be deep enough to be extremely productive on modern web development.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-history"&gt;A bit about CSS history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/problems-of-css"&gt;On problems of CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/current-state-of-css"&gt;Current state of CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/how-css-works"&gt;How CSS works under the hood&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-specificity"&gt;How to calculate CSS specificity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-cascading"&gt;A closer look at CSS cascading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-inheritance"&gt;Writing less CSS code with inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-layouts"&gt;Different CSS layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-frameworks"&gt;Beloved CSS frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-in-js"&gt;CSS-in-JS styling technique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-methodologies"&gt;Long-standing CSS methodologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-preprocessors"&gt;Extending standard CSS by preprocessors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-resets"&gt;The opinionated decision on CSS resets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-style-guides"&gt;The need of CSS style guides&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to send data (state and props) between unrelated components in react</title>
      <author>kimbi619</author>
      <pubDate>Mon, 19 Apr 2021 04:12:49 +0000</pubDate>
      <link>https://dev.to/kimbi619/how-to-send-data-state-and-props-between-unrelated-components-in-react-51a1</link>
      <guid>https://dev.to/kimbi619/how-to-send-data-state-and-props-between-unrelated-components-in-react-51a1</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zYlxNzmj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c9ufxued13c6z2lbr3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zYlxNzmj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c9ufxued13c6z2lbr3h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
If you are new to react, you may have heard that data only flows in one direction as illustrated by the image above. To pass data from a lower level component to its parent or one of it's ancestors, you use something called &lt;a href="https://reactjs.org/docs/lifting-state-up.html"&gt;lifting up state&lt;/a&gt;, where data is being moved up to higher components having same parents and passing it down as props.&lt;br&gt;
In React, a state is always owned by one component. Any changes made by this state can only affect the components below it, i.e. its children. Changing state on a component will never affect its parent or its siblings, only the children will be affected. This is the main reason that the state is often moved up in the component tree so that it can be shared between the components that need to access it. However, to have a state affect directly an unrelated component was hard until the &lt;a href="https://reactjs.org/docs/context.html"&gt;useContext Hook&lt;/a&gt; was added to react.&lt;/p&gt;

&lt;p&gt;Suppose from the image you have an event listener on the component &lt;strong&gt;C&lt;/strong&gt; and you want it to cause a action on &lt;strong&gt;A&lt;/strong&gt; as illustrated above without having to send data to the database and getting that data from there. The answer to your problem is the use context hook in React. I will use the example on a book app I was creating for a library to explain this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, {createContext, useState} from 'react'

export const BookHoldContext = createContext();

export const BookHoldProvider = (props)=&amp;gt;{
    const [clickedBook, setClickedBook] = useState(null);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Declaring using the useState method in react, you can create the data that you want to pass to the different components after importing the createContext method in react as in the first line. I have initially set it to &lt;code&gt;null&lt;/code&gt;, so that every time an event happens on it you get to set the data to what you currently want to get. Now to return this context, you use the context.Provider as below and pass the state as props in the value, except they are not especially props but return values.&lt;br&gt;
This is still within the provider function declared above&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return(
        &amp;lt;BookHoldContext.Provider value={[clickedBook, setClickedBook]}&amp;gt;
            {props.children}
        &amp;lt;/BookHoldContext.Provider&amp;gt;
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to actually consume this context, you need to go to their common parent component and wrap the component  you need to provide access to with the Provider tag, after importing it of course &lt;code&gt;import { BookHoldProvider } from './BookHoldContext'&lt;/code&gt;&lt;br&gt;
in my case I need to share it between the book item and the book detail&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return(
        &amp;lt;div id="book"&amp;gt;
            &amp;lt;BookHoldProvider&amp;gt;
            &amp;lt;div className="container"&amp;gt;
                &amp;lt;ul className="bookItem"&amp;gt;
                    {
                    AllBooks.map((book)=&amp;gt;(
                        &amp;lt;li key={book.isbn} &amp;gt;&amp;lt;Book book={book} 
                         showDetail={showDetail} /&amp;gt;&amp;lt;/li&amp;gt;
                    ))}
                &amp;lt;/ul&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;BookDetail showDetail = {showDetail}/&amp;gt;
            &amp;lt;/BookHoldProvider&amp;gt;
        &amp;lt;/div&amp;gt;
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, on the function you where actually suppose to put that state on, you can import the created context and the useContext method inbuild in React&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {useContext} from 'react';
import {BookHoldContext} from './BookHoldContext';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function BookDetail(){

    const [clickedBook, setClickedBook] = 
    useContext(BookHoldContext);
    return (
        &amp;lt;div className='bookToLoan' &amp;gt;
         {console.log(clickedBook)}
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside your component, you can call those values (useState hook) you passed in the context Provider and the data can be used. ü§ó&lt;/p&gt;

&lt;p&gt;This is actually my first post here guys, I hope it helps someone&lt;/p&gt;

</description>
      <category>react</category>
      <category>usecontext</category>
      <category>hooks</category>
      <category>states</category>
    </item>
    <item>
      <title>Hyperparameter Tuning: Understanding Randomized Search</title>
      <author>Bala Priya</author>
      <pubDate>Mon, 19 Apr 2021 04:00:08 +0000</pubDate>
      <link>https://dev.to/balapriya/hyperparameter-tuning-understanding-randomized-search-343l</link>
      <guid>https://dev.to/balapriya/hyperparameter-tuning-understanding-randomized-search-343l</guid>
      <description>&lt;p&gt;Hi everyone!&lt;br&gt;
This is the third of the series of articles on cross-validation and hyperparameter tuning. Here are the links to the first two if you‚Äôd like to give them a read before going ahead with reading this blog post.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/balapriya/role-of-cross-validation-in-model-validation-and-hyperparameter-search-n3"&gt;Role of Cross-Validation in Model Validation and Hyperparameter Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/balapriya/hyperparameter-tuning-understanding-grid-search-2648"&gt;Hyperparameter Tuning: Understanding Grid Search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us quickly outline the key ideas that we‚Äôve covered thus far.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the first article, we observed how &lt;code&gt;train/test split&lt;/code&gt; depends heavily on the particular data records that end up in the training and test sets, which led us to understand the need for cross-validation as a way to effectively evaluate a model‚Äôs performance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We then saw how cross-validation can be used in hyperparameter search; If you can remember, we decided to choose that value of the hyperparameters that yielded the highest cross-validated accuracy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the second article, we looked at searching for the best hyperparameters more conveniently using &lt;code&gt;GridSearchCV&lt;/code&gt; in &lt;code&gt;scikit-learn&lt;/code&gt;. If you remember, towards the end of the article, we touched upon the fact that performing Grid Search to tune hyperparameters is actually computationally inefficient.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We shall now try to rephrase it better, in a more formal way.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Say we have to search for &lt;code&gt;M&lt;/code&gt; parameters; Let &lt;code&gt;p_1, p_2,p_3, ‚Ä¶, p_M&lt;/code&gt; be the &lt;code&gt;M&lt;/code&gt; parameters. Let the number of values that we would like to search over for &lt;code&gt;p_1&lt;/code&gt; be &lt;code&gt;n1&lt;/code&gt;, for &lt;code&gt;p_2&lt;/code&gt; be &lt;code&gt;n2&lt;/code&gt;, and so on, with &lt;code&gt;nM&lt;/code&gt; values for &lt;code&gt;p_M&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Grid Search considers all possible hyperparameter settings (combinations) into account and creates a model for each possible setting to choose the best model with optimal hyperparameters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To understand it better, assume that out of M parameters, we decide to freeze the values of all hyperparameters except one, say the M_th parameter &lt;code&gt;p_M&lt;/code&gt;. So, Grid Search involves searching through the list of nM values for the M_th hyperparameter; So, there are &lt;code&gt;nM&lt;/code&gt; models created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Suppose we now freeze the values of all hyperparameters except two, say the last two &lt;code&gt;(p_M and p_(M-1))&lt;/code&gt;. We now have to search through &lt;strong&gt;all possible combinations&lt;/strong&gt; of &lt;code&gt;p_M&lt;/code&gt; and &lt;code&gt;p_(M-1)&lt;/code&gt;, each having &lt;code&gt;nM&lt;/code&gt; and &lt;code&gt;n_(M-1)&lt;/code&gt; possible values that we could search over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We now take a step back and freeze the value of &lt;code&gt;p_M-1&lt;/code&gt; and search through all values for &lt;code&gt;p_M&lt;/code&gt;; To account for all possible combinations, we should repeat the procedure for all &lt;code&gt;n_M-1&lt;/code&gt; values for &lt;code&gt;p_M-1&lt;/code&gt;. So, this process would leave us with &lt;code&gt;n_(M-1) * nM&lt;/code&gt; models.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope it‚Äôs clear how the complexity scales with increasing values of the number of values each hyperparameter could take. For the above example with M hyperparameters, we would have &lt;code&gt;n1*n2*n3*‚Ä¶*n_M&lt;/code&gt; models.This is why we said that things could scale up quickly and become computationally intractable with Grid Search.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With this motivation to make hyperparameter search computationally more efficient, let us proceed to understand Randomized Search.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#understanding-randomizedsearchcv"&gt;
  &lt;/a&gt;
  Understanding RandomizedSearchCV
&lt;/h2&gt;

&lt;p&gt;In contrast to &lt;code&gt;GridSearchCV&lt;/code&gt;, not all parameter values are tried out in &lt;code&gt;RandomizedSearchCV&lt;/code&gt;, but rather a fixed number of parameter settings is sampled from the specified distributions/ list of parameters.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If some of the hyperparameters that we‚Äôre searching for are continuous, then we should specify the distribution rather than the list of values, while defining the parameter grid. How do we define the fixed number of parameter settings?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The number of parameter settings that are tried is given by &lt;code&gt;n_iter&lt;/code&gt;. There‚Äôs quality vs computational cost trade-off in picking &lt;code&gt;n_iter&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A very small value of &lt;code&gt;n_iter&lt;/code&gt; would imply that we‚Äôre more likely to find a suboptimal solution, because we are actually considering too few combinations.&lt;/p&gt;

&lt;p&gt;A very high value of &lt;code&gt;n_iter&lt;/code&gt; would mean we can ideally get closer to finding the best hyperparameters that yield the best model, but this again comes with a high computation cost as before. In fact, if we set &lt;code&gt;n_iter= n1*n2*n3*‚Ä¶*n_M&lt;/code&gt; from the previous example, then, we‚Äôre essentially considering all possible hyperparameter combinations and now Randomized Search and Grid Search are equivalent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us build on the same example of &lt;code&gt;KNNClassifier&lt;/code&gt; from the previous blog posts; In addition to &lt;code&gt;n_neighbors&lt;/code&gt;, let us also search for the &lt;code&gt;optimal weighting strategy&lt;/code&gt; ‚Äî ‚Äò&lt;code&gt;uniform&lt;/code&gt;‚Äô where all points are weighted equally and ‚Äò&lt;code&gt;distance&lt;/code&gt;‚Äô option weights points by the inverse of their distance. And now, let us implement Randomized Search in &lt;code&gt;scikit-learn&lt;/code&gt; and do the following steps, as we did for Grid Search.&lt;br&gt;
&lt;strong&gt;1. Import RandomizedSearchCV class&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.model_selection&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RandomizedSearchCV&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Define the parameter grid&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# specify "parameter distributions" rather than a "parameter grid"
&lt;/span&gt;&lt;span class="n"&gt;param_dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_neighbors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;k_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;weight_options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Instantiate the grid; Set n_iter=10, Fit the grid &amp;amp; View the results&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# n_iter controls the number of searches
&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomizedSearchCV&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;knn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param_dist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scoring&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'accuracy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_iter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_train_score&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cv_results_&lt;/span&gt;&lt;span class="p"&gt;)[[&lt;/span&gt;&lt;span class="s"&gt;'mean_test_score'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'std_test_score'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'params'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

&lt;span class="c1"&gt;#DataFrame
&lt;/span&gt;
&lt;span class="n"&gt;mean_test_score&lt;/span&gt; &lt;span class="n"&gt;std_test_score&lt;/span&gt;  &lt;span class="n"&gt;params&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mf"&gt;0.973333&lt;/span&gt;    &lt;span class="mf"&gt;0.032660&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.033333&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mf"&gt;0.980000&lt;/span&gt;    &lt;span class="mf"&gt;0.030551&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;0.953333&lt;/span&gt;    &lt;span class="mf"&gt;0.042687&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mf"&gt;0.973333&lt;/span&gt;    &lt;span class="mf"&gt;0.032660&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mf"&gt;0.973333&lt;/span&gt;    &lt;span class="mf"&gt;0.044222&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mf"&gt;0.973333&lt;/span&gt;    &lt;span class="mf"&gt;0.044222&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mf"&gt;0.973333&lt;/span&gt;    &lt;span class="mf"&gt;0.032660&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. Examine the best score and best hyperparameters&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# examine the best model
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_score_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_params_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output
&lt;/span&gt;&lt;span class="mf"&gt;0.9800000000000001&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Parameters of the best model&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Surprisingly, we see that the highest accuracy score obtained in this case, where we only looked at 10 different parameter settings instead of 60 in Grid Search, is the same as before: 0.98 ‚úî&lt;/li&gt;
&lt;li&gt;And the value for n_neighbors= 18, which is also one of the optimal values that we got when we initially searched for the optimal value of n_neighbors. (Recall from the earlier blog post with the same example)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Maybe we just got lucky?&lt;br&gt;
What is the guarantee that we will always get the best results?&lt;br&gt;
Ah, this question makes perfect sense, doesn‚Äôt it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us do the following now: Let us run &lt;code&gt;RandomizedSearchCV&lt;/code&gt; for multiple times and see how many times we really end up getting lucky!&lt;/p&gt;

&lt;p&gt;‚û°Ô∏èRun RandomizedSearchCV 20 times and see what happens; We log the best_score_ for every run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# run RandomizedSearchCV 20 times (with n_iter=10) and record the best score
&lt;/span&gt;&lt;span class="n"&gt;best_scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomizedSearchCV&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;knn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param_dist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scoring&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'accuracy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_iter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_train_score&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;best_scores&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_score_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Let&lt;/span&gt; &lt;span class="n"&gt;us&lt;/span&gt; &lt;span class="n"&gt;examine&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_scores&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Output: Best Scores
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.973&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.973&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.973&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.973&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.973&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.973&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.973&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Upon examining the best scores above for all the 20 runs, we see that we get the best accuracy score of 0.98 about 13 times.&lt;br&gt;
Looks like we‚Äôre lucky indeed! What about the other 7 times when we didn't quite get the best accuracy score? These accuracy scores are around 0.973 which is pretty close to 0.98.&lt;/p&gt;

&lt;p&gt;This observation convinces us that even though Randomized Search may not always give the hyperparameters of the best performing model, the models obtained by using these hyperparameters do not perform much worse compared to the best model obtained from Grid Search. This means, the best models thus obtained, with the hyperparameters from randomized search are clearly very close to the optimal model.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In essence, these may not be the best hyperparameters, but certainly close to the best hyperparameters, except that these are found under resource-constrained settings. Hope you all understood how we could use Randomized Search for hyperparameter tuning.&lt;br&gt;
Thanks for reading! Happy Learning! Until next time!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;[1] Here‚Äôs the &lt;a href="https://colab.research.google.com/drive/1CRqP0a-L6zgOQY-w3U0qS7e4WvWtfR0P?usp=sharing"&gt;link&lt;/a&gt; to the Google Colab notebook for the example discussed above&lt;br&gt;
[2] &lt;a href="https://www.dataschool.io/machine-learning-with-scikit-learn/"&gt;Introduction to Machine Learning in Python with scikit-learn by DataSchool&lt;/a&gt;.&lt;br&gt;
[3] Scikit-learn documentation- RandomizedSearchCV&lt;br&gt;
&lt;a href="http://scikitlearn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html"&gt;http://scikitlearn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@chrislawton?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Chris Lawton&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/random?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>beginners</category>
    </item>
    <item>
      <title>15+ CSS HOVER EFFECTS EXAMPLE</title>
      <author>mike</author>
      <pubDate>Mon, 19 Apr 2021 03:53:13 +0000</pubDate>
      <link>https://dev.to/mike37/15-css-hover-effects-example-3pbh</link>
      <guid>https://dev.to/mike37/15-css-hover-effects-example-3pbh</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pKEbp5_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b481u6tv3jx9gq61py7n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pKEbp5_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b481u6tv3jx9gq61py7n.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
    &lt;/p&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;br&gt;&lt;br&gt;
 &lt;strong&gt;IF YOU LIKE AIRTICLE THEN CHECK MORE &lt;a href="https://frontendin.com/css-hover-effects/"&gt;40+ Stunning CSS Hover Effects Example&lt;/a&gt;&lt;/strong&gt;

&lt;p&gt;¬†&lt;/p&gt;
    
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         1.Title:-Buttons 
           Author:-Elitsa Dimitrova
           Made With:- HTML CSS 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;These are ten buttons with css hover effects. For the effects are used transitions, text-shadows, animations  and transforms. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/elitsa_dimitrova/embed/JNmaZV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;           2.Title:-CSS Hover Effects
             Author:-Rosa
             Made With:- HTML CSS   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;9 CSS card hover effects using transitions and transforms&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/RRoberts/embed/zBpNoK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;              3.Title:-Text hover effects
                Author:-Matteo
                Made With:- HTML CSS    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/PegasusDev/embed/eZZYdY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;             4.Title:-Button hover effects with box-shadow
               Author:-Giana
               Made With:- HTML CSS 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/giana/embed/BZaGyP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                 5.Title:-10 stunning hover effects with sass
                   Author:-Renan C. Araujo
                   Made With:- HTML CSS 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/caraujo/embed/LVPzxO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                 6.Title:-  Parallax Depth Cards
                   Author:- Andy Merskin
                   Made With:- HTML CSS 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/andymerskin/embed/XNMWvQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                 7. Title:-Button Hover Effects
                    Author:-Ritchie Jacobs
                    Made With:- HTML CSS    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Button hover experiments with pseudo elements.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ritchiejacobs/embed/qEJjBM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                  8.Title:-Sass mixin library for text hover
                    Author:-Antonija ≈†imic
                    Made With:- HTML CSS    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Demo for sass mixin library for text hover effects&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/tonkec/embed/jWmgqN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                   9.Title:-Hover effects with CSS3
                     Author:-Jacob Stone Design
                     Made With:- HTML CSS   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/JacobStone/embed/GfLEn?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                10.Title:-CSS3 Button Hover Effects with FontAwesome
                   Author:-foxeisen
                   Made With:- HTML CSS 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/foxeisen/embed/bqZxLa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                 11.Title:-CSS Card Hover Effects
                   Author:-Jhonier Riascos Zapata
                   Made With:- HTML CSS 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Jhonierpc/embed/MWgBJpy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                 12.Title:-CSS3 Button Hover Effects with FontAwesome
                    Author:-foxeisen
                    Made With:- HTML CSS    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Pure  CSS3 Button Hover Effects&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/foxeisen/embed/bqZxLa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                  13.Title:-Pure-CSS Netflix Show Carousel
                     Author:-Josh Hunt
                     Made With:- HTML CSS   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/joshhunt/embed/LVQZRa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                  14.Title:-Simple Lightspeed Hover Effect
                     Author:-Arjan Jassal
                     Made With:- HTML CSS   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Hover effects are fun.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/arjancodes/embed/pFmyb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                  15.Title:-Animated hover button
                     Author:-Sammy Helali
                     Made With:- HTML CSS   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;A simple button with a hover animation&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Lunoware/embed/jKJRVr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                  16.Title:-3D hover plane effect
                     Author:-Rian Ariona
                     Made With:- HTML CSS JAVASCRIPT    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Simple 3D plane hover effect using CSS3 transform&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ariona/embed/JopOOr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                  17.Title:-Button Hover
                     Author:-Katherine Kato
                     Made With:- HTML CSS   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Pure CSS (SCSS) arrow button hover effect.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kathykato/embed/rZRaNe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                   18.Title:-CSS3 Hover Effect using :after Psuedo Element
                      Author:-Larry Geams Parangan
                      Made With:- HTML CSS  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/larrygeams/embed/pdchG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IF YOU LIKE AIRTICLE THEN CHECK MORE &lt;a href="https://frontendin.com/css-hover-effects/"&gt;40+ Stunning CSS Hover Effects Example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;
    

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Animated Like Button with HTML CSS &amp; JS</title>
      <author>Stackfindover</author>
      <pubDate>Mon, 19 Apr 2021 03:38:08 +0000</pubDate>
      <link>https://dev.to/stackfindover/animated-like-button-with-html-css-js-2le4</link>
      <guid>https://dev.to/stackfindover/animated-like-button-with-html-css-js-2le4</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hello, guys In this tutorial we will try to solve the mentioned query. and also we will learn Animated Like Button with HTML CSS &amp;amp; JS.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-query"&gt;
  &lt;/a&gt;
  Common Query
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;How to create a Like Button&lt;/li&gt;
&lt;li&gt;How To Create Facebook Like Button&lt;/li&gt;
&lt;li&gt;How To Create Animated Like Button&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;See Also:-&lt;/strong&gt; &lt;a href="https://blogs.stackfindover.com/how-to-blink-web-browser-tab/"&gt;How to blink web browser tab&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#animated-like-button-step-by-step"&gt;
  &lt;/a&gt;
  Animated Like Button Step By Step
&lt;/h3&gt;

&lt;p&gt;First, we need to create two files &lt;strong&gt;index.html&lt;/strong&gt; and &lt;strong&gt;style.css&lt;/strong&gt; then we need to do code for it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step1"&gt;
  &lt;/a&gt;
  Step:#1
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Add below code inside index.html&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Facebook Like Button&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"ie=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"like"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"liked()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-thumbs-up"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Like&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;liked&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;like&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;liked&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step2"&gt;
  &lt;/a&gt;
  Step:#2
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Then we need to add code for style.css which code I provide in the below screen.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f2f4f6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#65676b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nc"&gt;.liked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0571ed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nc"&gt;.liked&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;anim&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;anim&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;anim&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-15deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-15deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;-moz-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-15deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;-ms-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-15deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;-o-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-15deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.5px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.5px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#animated-like-button-video-output"&gt;
  &lt;/a&gt;
  Animated Like Button Video Output:
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wqIqKALBafc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#animated-like-button-codepen-output"&gt;
  &lt;/a&gt;
  Animated Like Button Codepen Output:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;We will update soon:)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Who is Emmet?! (Your New Best Friend!)</title>
      <author>Max Zander</author>
      <pubDate>Mon, 19 Apr 2021 03:30:50 +0000</pubDate>
      <link>https://dev.to/maxjacobzander/who-is-emmet-your-new-best-friend-57dc</link>
      <guid>https://dev.to/maxjacobzander/who-is-emmet-your-new-best-friend-57dc</guid>
      <description>&lt;p&gt;The first time I heard about Emmet abbreviations, my mind was blown completely wide open. I was amazed by the sheer power and ease of this tool and wondered how I had never heard about it. If you still don't know about Emmet, allow me to introduce you to your new best friend!&lt;/p&gt;




&lt;p&gt;So who is Emmet? Well, the real question is not "&lt;em&gt;who&lt;/em&gt; is Emmet?" but "&lt;em&gt;what&lt;/em&gt; is Emmet?" Emmet is a plugin for text editors that is meant to do a lot of heavy lifting for you. If you're like me and your text editor of choice is &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt;, support for Emmet is already built in and you don't have to do a thing to start taking advantage of it. Otherwise, all you have to is install the plugin and you're ready to go.&lt;/p&gt;

&lt;p&gt;At its core, Emmet is really just a series of keyboard shortcuts. When I was first introduced to Emmet, I certainly did not realize how much it could do. In fact, I initially thought that the first Emmet abbreviation that I learned was a standalone shortcut. Now, Emmet can be used for a &lt;strong&gt;lot&lt;/strong&gt; including CSS, XML, and more, but if you're just getting started and/or have not dealt with Emmet before, allow me to show you some of the abbreviations that I have come to use for HTML on a daily basis.&lt;/p&gt;

&lt;p&gt;If you're starting up an HTML project and you need some template code, you can Google it, or you can just type &lt;code&gt;!&lt;/code&gt; and hit &lt;code&gt;enter&lt;/code&gt;/&lt;code&gt;return&lt;/code&gt; , and Emmet will then expand it to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perhaps my most commonly-used Emmet abbreviations are the ones for classes and ids. By default, if you use Emmet abbreviation for a class and/or id with no other information, Emmet will assume that you're trying to create a &lt;code&gt;div&lt;/code&gt;. To create a &lt;code&gt;div&lt;/code&gt; with a class of "paragraph", you can just type &lt;code&gt;.paragraph&lt;/code&gt; and, when you hit &lt;code&gt;enter&lt;/code&gt;/&lt;code&gt;return&lt;/code&gt;, it will be expanded to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="paragraph"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you wanted to just give that &lt;code&gt;div&lt;/code&gt; an id of "paragraph", you could type &lt;code&gt;#paragraph&lt;/code&gt;, and that will expand to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="paragraph"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But where Emmet gets &lt;em&gt;really&lt;/em&gt; magical, is in its ability to chain abbreviations! So, let's say you wanted that &lt;code&gt;div&lt;/code&gt; to have both a class of "paragraph" and an id of "first-paragraph". All you'd have to do is type &lt;code&gt;.paragraph#first-paragraph&lt;/code&gt; and Emmet would expand that to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="paragraph" id="first-paragraph"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if you wanted that &lt;code&gt;div&lt;/code&gt; to be a &lt;code&gt;p&lt;/code&gt; tag, you'd just have to pop a "p" on to the beginning of your abbreviation like so: &lt;code&gt;p.paragraph#first-paragraph&lt;/code&gt; to get&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p class="paragraph" id="first-paragraph"&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;&lt;center&gt;Pretty awesome, right?!&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;And it's not just &lt;code&gt;p&lt;/code&gt; tags! If you wanted it to be an &lt;code&gt;h1&lt;/code&gt; or wanted to create a form, you could say &lt;code&gt;h1.header#heading&lt;/code&gt;, which would give you&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1 class="header" id="heading"&amp;gt;&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or &lt;code&gt;form#my-awesome-form&lt;/code&gt;, which would give you&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form action="" id="my-awesome-form"&amp;gt;&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can even create &lt;code&gt;li&lt;/code&gt;s within &lt;code&gt;ul&lt;/code&gt;s! To create a &lt;code&gt;ul&lt;/code&gt; with four &lt;code&gt;li&lt;/code&gt;s with a class of "thing", you can say &lt;code&gt;ul&amp;gt;li.thing*4&lt;/code&gt; and Emmet magic will return&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li class="thing"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="thing"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="thing"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="thing"&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if you wanted to number the "things" (or maybe just felt particularly inspired by Dr. Seuss), you could say &lt;code&gt;ul&amp;gt;li.thing$*4&lt;/code&gt; to add numerical values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li class="thing1"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="thing2"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="thing3"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="thing4"&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;All of this to say, Emmet is absolutely spectacular and, quite frankly, fun to use! I &lt;strong&gt;highly&lt;/strong&gt; recommend that you install the plugin (if necessary), learn these shortcuts, and take a look at the documentation to find out else Emmet can help you save time and be the most efficient developer you can be!&lt;/p&gt;

</description>
      <category>emmet</category>
      <category>shortcuts</category>
      <category>beginners</category>
      <category>plugins</category>
    </item>
    <item>
      <title>R pie</title>
      <author>maxwizard01</author>
      <pubDate>Mon, 19 Apr 2021 01:41:58 +0000</pubDate>
      <link>https://dev.to/maxwizard01/r-pie-ikh</link>
      <guid>https://dev.to/maxwizard01/r-pie-ikh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-to-construct-pie-charts-in-r-programming"&gt;
  &lt;/a&gt;
  How to construct Pie Charts in R programming
&lt;/h2&gt;

&lt;p&gt;Creating a basic pie chart in R is as easy as pie. If list or vector is a list of positive numbers, then simply use the pie() function to draw the pie. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example1"&gt;
  &lt;/a&gt;
  Example1
&lt;/h3&gt;

&lt;p&gt;let's try to use the following data to construct pie chart.&lt;br&gt;
30,40,60,50,30.&lt;br&gt;
To represent the five data listed above in pie chart we type the following codes:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ltlt-codesgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Codes&amp;gt;&amp;gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight r"&gt;&lt;code&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#ltlt-resultgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Result&amp;gt;&amp;gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VEYt7XRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptn5vcprwcxnwhjrht7p.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VEYt7XRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptn5vcprwcxnwhjrht7p.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
looking at the graph it is exactly the chart of the 5 data but it doesn't make sense enough as sometime it might not be just number we might need to label. so let's take a look at a beautiful example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example2"&gt;
  &lt;/a&gt;
  Example2
&lt;/h3&gt;

&lt;p&gt;Represent the following table in form of pie chart.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Students&lt;/th&gt;
&lt;th&gt;Scores&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Maxwizard&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Precious&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abass&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;John&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Victoria&lt;/td&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Solutions&lt;br&gt;
to draw the pie we need to list all the score and the students name accordingly inside two different vector then put inside the pie function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ltlt-codesgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Codes&amp;gt;&amp;gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight r"&gt;&lt;code&gt;&lt;span class="n"&gt;Students&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Maxwizard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"Precious"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"Abass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"Victoria"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Scores&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;55&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Scores&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Students&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#ltlt-resultgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Result&amp;gt;&amp;gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WJ4gacKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqg1f2tzmhkcwoasjtx0.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJ4gacKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqg1f2tzmhkcwoasjtx0.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
study the codes and the result it is not different from example1 except that we make use of label parameter. You should be careful when you need to label, notice that it is the score that we need to draw the graph. so all the students name should be assigned to the label parameter.&lt;/p&gt;

&lt;p&gt;However, while dealing with chart we might need to write the headings for our chart. Also we might prefer some colours to others. Therefore there are some other parameters which you can use to perform these actions, they are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;col&lt;/code&gt;&lt;/strong&gt;  : this is use to change the color of the part of the chart.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;main&lt;/code&gt;&lt;/strong&gt; : this is used to write the heading of your chart.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#example3"&gt;
  &lt;/a&gt;
  Example3
&lt;/h3&gt;

&lt;p&gt;the following table show the number of students in each class in Government secondary school. draw a pie chart for the table.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;th&gt;Number of Student&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;JSS1&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JSS2&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JSS3&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSS1&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSS2&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSS3&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#ltlt-codesgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Codes&amp;gt;&amp;gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight r"&gt;&lt;code&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"JSS1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"JSS2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"JSS3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"SSS1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"SSS2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"SSS3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'violet'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Government Secondary School"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ltlt-resultgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Result&amp;gt;&amp;gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XRKpEvls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuz2l1h8kgy1vhyd3slz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XRKpEvls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuz2l1h8kgy1vhyd3slz.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
wooow! we just get a beautiful result! that is cool! but sometimes you might be working with so many data and you might not want to label that way. I mean you may like to represent it in form of key therefore you use something called legend label.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example4"&gt;
  &lt;/a&gt;
  Example4
&lt;/h3&gt;

&lt;p&gt;use the data in Example3 to plot a pie chart.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ltlt-codesgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Codes&amp;gt;&amp;gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight r"&gt;&lt;code&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"JSS1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"JSS2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"JSS3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"SSS1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"SSS2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"SSS3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'violet'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Government Secondary School"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;legendLabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"bottomleft"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;legendLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#ltlt-resultgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Result&amp;gt;&amp;gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E5lM7NWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xuhkxq7nnacksobyw0s.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E5lM7NWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xuhkxq7nnacksobyw0s.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Study the codes and the result, we make use of a function called &lt;code&gt;legend()&lt;/code&gt; to construct the legend label, the funtion takes four parameters.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;the position of the legend box&lt;/strong&gt;: this is parameter used to specify where the legend box should be place. it can be bottomleft,bottomright,topleft or topright. you can change the value written in your code to any of the other three to see how it works.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;legendLabel&lt;/strong&gt;: the is the key of the legend it usually contain the list of data(label) in the chart.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;fill&lt;/strong&gt;: this is the color, it should be the same color use to construct the chart.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;cex&lt;/strong&gt;: this is use to specify how big the legend box should be you can change the value to 1 then 2 to see the effect.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now I beleve you can now construct beautiful pie chart using R. coding is easy and fun just keep struggling and do not stop. like and comment below. you can also chat me up on whats-app &lt;code&gt;(07045225718)&lt;/code&gt; have a nice day!.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>tutorial</category>
      <category>datascience</category>
      <category>r</category>
    </item>
  </channel>
</rss>
