<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create the Ultimate User Experience with AOS (Animate on Scroll)</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 11 Apr 2021 03:42:20 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/create-the-ultimate-user-experience-with-aos-animate-on-scroll-39jp</link>
      <guid>https://dev.to/ruppysuppy/create-the-ultimate-user-experience-with-aos-animate-on-scroll-39jp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-aos"&gt;
  &lt;/a&gt;
  What is &lt;strong&gt;AOS&lt;/strong&gt;?
&lt;/h1&gt;

&lt;p&gt;As &lt;em&gt;front-end developer&lt;/em&gt;, a popular request you might get from your clients is to implement stunning animation effects on page scroll. &lt;strong&gt;AOS&lt;/strong&gt; (Animate on Scroll) is the most popular library for the purpose of making this task easier for us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AOS&lt;/strong&gt; is a library developed by &lt;a href="https://github.com/michalsnik"&gt;Michał Sajnóg&lt;/a&gt; and it does exactly what its name suggests: it lets you apply different kinds of animations to elements as they scroll into view.&lt;/p&gt;

&lt;p&gt;To see an example of a project using &lt;strong&gt;AOS&lt;/strong&gt;, click &lt;a href="https://tapajyoti-bose.web.app/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;p&gt;The animation effects available by default are shown below.&lt;br&gt;
&lt;strong&gt;NOTE:&lt;/strong&gt; The animations can be further customized using the various properties like &lt;code&gt;data-aos-duration&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ruppysuppy/embed/BapRQgY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-aos"&gt;
  &lt;/a&gt;
  Installing &lt;strong&gt;AOS&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;AOS&lt;/strong&gt; can be installed using &lt;strong&gt;Bower&lt;/strong&gt; or &lt;strong&gt;npm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bower&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bower &lt;span class="nb"&gt;install &lt;/span&gt;aos &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;npm&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;aos &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, link &lt;strong&gt;AOS&lt;/strong&gt; styles and scripts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"bower_components/aos/dist/aos.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"bower_components/aos/dist/aos.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;AOS&lt;/strong&gt; stylesheet and &lt;strong&gt;JavaScript&lt;/strong&gt; files can also be downloaded using a &lt;strong&gt;CDN&lt;/strong&gt; as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.rawgit.com/michalsnik/aos/2.3.4/dist/aos.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.rawgit.com/michalsnik/aos/2.3.4/dist/aos.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To initialize &lt;strong&gt;AOS&lt;/strong&gt;, just use the line below in the &lt;strong&gt;JavaScript&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;AOS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#using-aos"&gt;
  &lt;/a&gt;
  Using &lt;strong&gt;AOS&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;After the setup, just add &lt;code&gt;data-aos="&amp;lt;animation-name&amp;gt;"&lt;/code&gt; to the HTML elements to use basic animations. For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-aos=&lt;/span&gt;&lt;span class="s"&gt;"fade-up"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-aos=&lt;/span&gt;&lt;span class="s"&gt;"flip-down"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-aos=&lt;/span&gt;&lt;span class="s"&gt;"zoom-in"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#configuring-the-animation"&gt;
  &lt;/a&gt;
  Configuring the Animation
&lt;/h1&gt;

&lt;p&gt;Additional properties can be used to configure the animations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;data-aos-delay&lt;/code&gt;&lt;/strong&gt;: You can use this attribute to specify the delay of the animation play time. The duration value can be anywhere between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;3000&lt;/code&gt; with steps of &lt;code&gt;50ms&lt;/code&gt;. Since the duration is handled in CSS, using smaller steps or a wider range would have unnecessarily increased the size of the CSS code. The default value for this attribute is &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;data-aos-offset&lt;/code&gt;&lt;/strong&gt;: You can use this attribute to trigger the animation sooner or later than the designated time. Its default value is &lt;code&gt;120px&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;data-aos-duration&lt;/code&gt;&lt;/strong&gt;: You can use this attribute to specify the duration of the animation. The duration value can be anywhere between &lt;code&gt;50&lt;/code&gt; and &lt;code&gt;3000&lt;/code&gt; with steps of &lt;code&gt;50ms&lt;/code&gt;. Since the duration is handled in CSS, using smaller steps or a wider range would have unnecessarily increased the size of the CSS code. This range should be sufficient for almost all animations. The default value for this attribute is &lt;code&gt;400&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;data-aos-easing&lt;/code&gt;&lt;/strong&gt;: You can use this attribute to control the timing function for animating different elements. Possible (not exhaustive) values are: &lt;code&gt;linear&lt;/code&gt;, &lt;code&gt;ease-in-out&lt;/code&gt; and &lt;code&gt;ease-out-quart&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;data-aos-anchor&lt;/code&gt;&lt;/strong&gt;: This attribute is useful when you want to trigger the animation based on the position of some other element. It accepts any selector as its value. The default value is &lt;code&gt;null&lt;/code&gt;. This means that all the animations will be triggered with respect to the element’s own position.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;data-aos-anchor-placement&lt;/code&gt;&lt;/strong&gt;: By default, the animations on an element are applied as soon as its top part reaches the bottom part of the window. This behavior can be changed using the &lt;code&gt;data-aos-anchor-placement&lt;/code&gt; attribute. As its value, this attribute accepts two words separated by a hyphen. For example, you can set it to &lt;code&gt;top-bottom&lt;/code&gt;, &lt;code&gt;top-center&lt;/code&gt; or &lt;code&gt;top-top&lt;/code&gt;. Three such combinations are also possible for both the &lt;code&gt;center&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt; values.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;data-aos-once&lt;/code&gt;&lt;/strong&gt;: You can also control if the animations should be played only when you get to a particular element the first time or every time you scroll up or down. By default, the animations are replayed every time the elements scroll into view. You can set the value of this attribute to &lt;code&gt;true&lt;/code&gt; in order to animate the elements only once.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#adding-custom-animations"&gt;
  &lt;/a&gt;
  Adding Custom Animations
&lt;/h1&gt;

&lt;p&gt;Sometimes built-in animations are just not enough. Let's create an animation depending on the resolution of the screen. Here's one approach to do it:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;style.css&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-aos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"new-animation"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition-property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-aos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"new-animation"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nc"&gt;.aos-animate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-aos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"new-animation"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-aos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"new-animation"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nc"&gt;.aos-animate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then use it in HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-aos=&lt;/span&gt;&lt;span class="s"&gt;"new-animation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The element will only animate opacity on mobile devices, but from 768px width it'll also slide from right to left.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/michalsnik/aos"&gt;AOS repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sitepoint.com/cool-scroll-animations-made-easy-aos-library/"&gt;Sitepoint Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Reach out to me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.web.app"&gt;Portfolio&lt;/a&gt; (For freelance projects, reach out through the contact form)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>ux</category>
    </item>
    <item>
      <title>Flow State: 10 Practical Tips for Getting In The Zone</title>
      <author>Justin Schroeder</author>
      <pubDate>Sun, 11 Apr 2021 03:38:35 +0000</pubDate>
      <link>https://dev.to/justinschroeder/flow-state-10-practical-tips-for-getting-in-the-zone-ha9</link>
      <guid>https://dev.to/justinschroeder/flow-state-10-practical-tips-for-getting-in-the-zone-ha9</guid>
      <description>&lt;p&gt;I have this recurring dream where I sit down at a piano and start playing like a virtuoso. The music flows out of my fingers at the same speed as my mind is composing the music. In my mind my dream feels like the purest act of creation. It is beautiful, but it's only a dream. On this side of consciousness I can't even play an instrument. Yet, that feeling of "pure creation" where my imagination smoothly becomes a reality is incredibly familiar. In fact, as engineers, on our best days, it's what we do for a living.&lt;/p&gt;

&lt;p&gt;If you've been a serious programmer for more than a few years, I imagine you've experienced this magic. There are a lot of names for it, flow state, deep work, in the zone, being under. However, I prefer “flow state” because it best describes the feeling I have when I'm there. The truth is, it can be as elusive and delicate as it is powerful, but the payoff is enormous — well worth the pursuit.&lt;/p&gt;

&lt;p&gt;When you're truly in flow state, your productivity skyrockets. Complex problems break down to simple steps, intricate logic becomes obvious, and innovative design patterns emerge. Maybe I’m being a bit too romantic. I mean we're just writing some code right? Nah, when I'm truly in flow state I'm &lt;em&gt;creating&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I've been programming for 21 years and, for the last five I've been cataloging my experiments regarding flow. The following recommendations come out of those five years, but these are not "scientific" in an academic sense. Just practical advice born of my own monastic pursuit of flow state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#know-the-basics"&gt;
  &lt;/a&gt;
  Know the basics
&lt;/h2&gt;

&lt;p&gt;In the beginning, there are some fundamental prerequisites. These are not meant to be exclusionary, as anyone can achieve these skills and conditions. However, if you feel you fall short on any of them consider this as a friendly encouragement to keep on pushing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Know the Syntax&lt;/strong&gt; &lt;br&gt;
The kind of flow state we're after requires that concepts transfer smoothly into bytes. You cannot play the piano like a virtuoso if you're stabbing around for middle-c. I'm not saying you have the entire language perfectly memorized, but at a minimum the syntax needs to melt away.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Know your Environment&lt;/strong&gt; &lt;br&gt;
You need to have a familiar and stable development environment: operating system, editor, terminal, server stack etc. Be very cautious about messing with these precious tools. Don't install a new shell environment, use &lt;strong&gt;one&lt;/strong&gt; editor, and don’t be the first person to upgrade your OS. Keep your work space stable and familiar at all times. If you want to experiment, use a different machine or try setting up a secondary account on your computer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Know your key commands&lt;/strong&gt; &lt;br&gt;
Goes without saying right? But seriously, you should be able to go for significant stretches of time in a code editor without ever lifting your hands off the keyboard.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Know How to "long-cycle"&lt;/strong&gt; &lt;br&gt;
When writing code, in any language or platform — there is a "cycle":&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You write some code.&lt;/li&gt;
&lt;li&gt;You check to see if it did what you wanted.&lt;/li&gt;
&lt;li&gt;You move on or adjust the code and repeat.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Beginners typically write very small chunks of code, a couple lines for example, and then check the results. This cycling is necessary to reduce mental overhead (you can't hold all the code for an app in your mind at once), but in my experience, very small cycles also reduce the likelihood you'll reach “flow state.” It's a mental crutch that enables your mind from learning how to balance more complex problems. Each cycle takes an amount of time to complete, even one or two seconds per cycle can really add up. This slows your progress and introduces opportunities for distraction. If you're a victim of “short cycling”, try to intentionally practice writing more code each time before you validate the results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Know &lt;em&gt;how&lt;/em&gt; it works.&lt;/strong&gt; It's important to understand the basics of the technologies you're working with. For example, if you're a web developer, you should really understand how the request/response cycle works, what HTTP methods are, how to interact with the Document Object Model (DOM), what event bubbling is etc. Sure you may use libraries that abstract these concepts away from you, but you must have an understanding of the underlying technologies. If not, it will be difficult to create a mental sandbox. A place where your mind can quickly and efficiently conceive new solutions to challenging problems.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you're struggling with any of these basics it doesn't mean you can't be productive or produce excellent code. It just means the magic is harder to grab a hold of. The good news is practice makes perfect. Keep at it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-practical-tips"&gt;
  &lt;/a&gt;
  10 Practical Tips
&lt;/h2&gt;

&lt;p&gt;Your brain hates getting into a flow state. What it &lt;em&gt;wants&lt;/em&gt; are quick little dopamine hits that are addictive and supremely detrimental to productivity (lookin' at you Twitter). Flow is a marathon that your brain is reluctant to run. So what follows is a list of tips, tricks, and hacks that I've found help drag my mind, kicking and screaming, to the start line. These may seem trivial...because they are. Yet these sorts of small habits and patterns are tremendously useful in combating hours of half-focused waste.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Know what you're going to work on.&lt;/strong&gt; This one is important. Before you even sit down you should already know what your first keystrokes are going to be. To help, each time you stop working, write a short todo list on a scrap of paper or a notes app (&lt;em&gt;not&lt;/em&gt; your team's Trello or Jira board) of what you need to work on next time you sit down. It's good for these to crescendo from small to large: 1. "Finish the primary navigation breakpoints" 2. "Write a click-away handler for the dropdown" 3. "make a new modal component". It can even be a good idea to even leave yourself a breadcrumb, such as an easy to solve problem that only takes a few lines of code to complete that’s been &lt;em&gt;obviously&lt;/em&gt; left incomplete for you (by you). This little trick can really jump start your day's work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Close your apps.&lt;/strong&gt; Shut down email, Slack, discord, social media and anything else that can send you a notification. Seriously. Shut 👏 Them 👏 Down 👏. Nervous someone will need you? Tell your co-workers to call you on the phone if it's really an emergency — trust me they won't call. People hate making phone calls. Those little red bubbles and pinging sounds are the death of flow state.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Music.&lt;/strong&gt; This is controversial, but I've always had my best sessions &lt;em&gt;with&lt;/em&gt; music. I've found it's best to put something on that is well-worn. You already know the words and can get into the rhythm instantly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ride the wave.&lt;/strong&gt; Once you get into flow, ride the wave as far as it takes you, and then get off when it's over. Typically, I've found ~3-4 hours is as long as I can go before my mental state begins to crumble, but while I'm in flow I try hard to stay there even if it’s inconvenient. Occasionally the zen-like magic strikes me at 11:00pm and I make the conscious decision to ride it till it runs out, around 2:00- 3:00am. I'm not suggesting this is a good time to work, as you need to be well rested, but I am saying these sessions are so valuable (and frankly rare) that when they strike, it is worth the sacrifice to stay in them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Instant on.&lt;/strong&gt; The moment you sit down and the screen turns on, start working. Literally do nothing else. Don't check email one last time, or order that thing off Amazon. — You can do all that later. Start writing code...now. Your brain will push back and try to distract you — you need to win this argument. Your brain will thank you later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don’t reward yourself.&lt;/strong&gt; Once in flow you'll start conquering problems left and right, but watch out! These little victories are a signal to your brain to chill out and celebrate the good times. You will suddenly find yourself randomly disengaging. — Don't fall for it. As soon as you solve one problem, instantly jump to the next, then the next. Let the progress snowball until your efficiency starts to die off.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Know how much to sleep.&lt;/strong&gt; Don't just Google "how much sleep do I need to sleep", you're a unique human being. My wife needs a solid nine hours every single night, I need about six. Everyone is different. Listen to your body, and then give it what it needs. If you're thinking about sleep while you're trying to program — you didn't get enough.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Temperature.&lt;/strong&gt; The temperature should be comfortable, but I've found that being slightly cold is better than being slightly hot.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Wear comfortable clothes.&lt;/strong&gt; I remember high school teachers telling me to wear comfortable clothes when taking the SAT. They were right, although, perhaps "comfortable" isn't quite the right word. The important thing is not to be conscious of your clothes (positive or negative), you don't want to think about your clothes at all.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hydrate &amp;amp; caffeinate.&lt;/strong&gt; Drinking a glass of water ahead of time, and having coffee (if that's your thing) hot and ready is key. You don't want to have to get up for a while, so make sure your coffee is in a mug that doesn't get cold. I'm not saying that specifically coffee is needed but rather that it is important to consider and address your body's needs ahead of time so you don't get distracted. For me that “need” happens to be coffee, but for you that might be tea, fruit, or just a cup of water.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#theres-more-to-work-than-flow"&gt;
  &lt;/a&gt;
  There’s more to work than flow
&lt;/h2&gt;

&lt;p&gt;This article, rightfully, glorifies flow state. However, it's important to realize there is more to work than what occurs in flow. As developers, we're positioned in a market where our ability to rapidly produce high quality code is a great asset, but it's not our only one. Meetings, emails, code reviews, helping team members, writing blog posts and other important tasks are part of everyone's job and generally don't require the same level of hyper focus to accomplish. That's okay. When it comes to flow state, keep your powder dry, and your aim narrow. Don't get too down on yourself if you can't achieve flow state every day. While that's an admirable goal, our brains just won't always get there. Remember, there is plenty of other work that can be accomplished as a mere mortal too.&lt;/p&gt;

&lt;p&gt;I hope you find these techniques helpful. If you're interested in hearing from me when you're &lt;em&gt;not&lt;/em&gt; in flow you can &lt;a href="https://twitter.com/jpschroeder"&gt;follow me on Twitter @jpschroeder&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>The Benefits of Project-Based Learning</title>
      <author>SalarC123</author>
      <pubDate>Sun, 11 Apr 2021 03:27:05 +0000</pubDate>
      <link>https://dev.to/salarc123/the-benefits-of-project-based-learning-3c14</link>
      <guid>https://dev.to/salarc123/the-benefits-of-project-based-learning-3c14</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-is-it-different-from-coursebased-learning"&gt;
  &lt;/a&gt;
  How is it different from course-based learning? 🧐
&lt;/h1&gt;

&lt;p&gt;It's very self explanatory, but project-based learning is a learning technique that focuses heavily on building real-world projects. The alternative is following tutorials, but that is ineffective and many times, you'll forget what you learn from a course or tutorial series because you're typically consuming a lot of information without applying it. Thus, you don't truly understand a concept and waste a lot of your precious time trying to follow tutorials. &lt;/p&gt;

&lt;p&gt;Now, don't get me wrong. Courses are amazing, and I love how they give you a structured curriculum, but if you're learning React, for example, you don't need to learn every nuance of the technology and explore the advanced concepts before you get the opportunity to hammer down the basics. Even if the course provides practice problems, those exercises are likely not meaningful to you, meaning that you won't retain the content for very long. &lt;/p&gt;

&lt;p&gt;On the other hand, project-based learning, if done correctly, lets you get a feel of the basics through &lt;strong&gt;simple&lt;/strong&gt; tutorials (preferably by reading the docs or watching youtube) and then immediately building what you want once you gain enough understanding to start writing your own code. Most people learning how to code have a project in mind that they can't wait to start, but unnecessary material interferes and many fall into the trap of wanting to learn it all, so they never end up completing their goal. However, project-based learning gives them the chance to start working on their project right away. Furthermore, Project-based learning gives you the freedom to learn as you create, so you'll definitely master the art of scouring StackOverflow for answers to problems. And unlike with courses, you will use 100% of the stuff you learn because it will directly apply to a problem that you are trying to fix.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-pros"&gt;
  &lt;/a&gt;
  The Pros 🎉
&lt;/h1&gt;

&lt;p&gt;First of all, project-based learning is extremely fun. You don't need to listen to a teacher for hours a day like at school because you get to learn by &lt;strong&gt;doing&lt;/strong&gt; and even &lt;strong&gt;failing&lt;/strong&gt;. Learning from your mistakes is very effective, as you probably know, so why not incorporate it into your learning process more?&lt;/p&gt;

&lt;p&gt;Project-based learning is also powerful for building your portfolio and padding your resume. Portfolio websites are really popular nowadays, so this is a great way to fill up the "projects" section. But even if your goal isn't to switch careers, it's very impressive to have 10+ projects which you can claim as your own and show to your friends and family. And remember, employers want to see proof rather than words.&lt;/p&gt;

&lt;p&gt;And if you need more stuff to boost your portfolio, you can try learning some algorithms and implement them into previous projects or even make an algorithm visualizer that explicitly shows how comfortable you are with concepts that companies actually care about.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-cons"&gt;
  &lt;/a&gt;
  The Cons 🚨
&lt;/h1&gt;

&lt;p&gt;The main disadvantage project-based learning is the difficulty that comes with finding a meaningful project. A simple google search will result in todo lists and Pomodoro timers, but I personally don't think that those are effective in inspiring motivation. Todo lists have been made a million times (literally) and don't provide enough of a challenge to really get your brain working. These projects are also very small and less impressive for a portfolio. Thus, you need to do some extra digging or sit down and ponder possible projects that would be useful for yourself or useful for the world. Some examples of projects I've made to solve some personal problems include a platform that lets you create stylish code snippets for online sharing (similar to carbon.sh) and an automatic SVG generator that produces polygons, waves, and particles in a specified size and color.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion 😎
&lt;/h1&gt;

&lt;p&gt;Personally, I have utilized project-based learning to learn HTML, CSS, Javascript, React, and I am currently learning Redux and MaterialUI. For each of these technologies and languages, I found a few meaningful projects like a website for a school club or a physics visualizer to explore these technologies' most important features and learn how to utilize them when it really matters without having to go back on StackOverflow or Youtube to refresh my memory because I followed a course. Overall, project-based learning is extremely effective and completely free to try, so there is literally no reason to avoid starting &lt;strong&gt;today&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is my first article, so please leave feedback about everything to help me become a better writer and developer for future articles!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>#Day21 - How to use requests to interact with APIs in Python</title>
      <author>Rahul Banerjee</author>
      <pubDate>Sun, 11 Apr 2021 03:17:49 +0000</pubDate>
      <link>https://dev.to/rahulbanerjee99/day21-how-to-use-requests-to-interact-with-apis-in-python-2gfl</link>
      <guid>https://dev.to/rahulbanerjee99/day21-how-to-use-requests-to-interact-with-apis-in-python-2gfl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#want-a-list-of-cool-apis-to-use-for-your-next-project"&gt;
  &lt;/a&gt;
  Want a list of cool APIs to use for your next project?
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Today we will be working with the requests libraries and use it to make requests to some public APIS. I have also included a few resources that have a list of cool APIs. This article will not talk about what an API is or the different status codes. Some familiarity with APIs is expected. We will be discussing the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Making a simple GET Request&lt;/li&gt;
&lt;li&gt;The Response Object&lt;/li&gt;
&lt;li&gt;Making a Request with parameters&lt;/li&gt;
&lt;li&gt;Make a GET Request to a secured endpoint&lt;/li&gt;
&lt;li&gt;Making a POST Request&lt;/li&gt;
&lt;li&gt;APIs you can use for your next project&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#make-a-get-request"&gt;
  &lt;/a&gt;
  Make a GET Request
&lt;/h3&gt;

&lt;p&gt;Starting off with the basics, we will try to make a request to the publicly available  &lt;a href="https://alexwohlbruck.github.io/cat-facts/"&gt;Cat Facts API&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We will be making a request to the following endpoint&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://cat-fact.herokuapp.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following code-snippet makes a request to the endpoint&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://cat-fact.herokuapp.com"&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the following output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Response [200]&amp;gt;
&amp;lt;class 'requests.models.Response'&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The get() function returned a Response Object. We will talk about the response object in the next section.&lt;/p&gt;

&lt;p&gt;Let's try making another GET request. This time we will make a request to the  &lt;a href="https://dukengn.github.io/Dog-facts-API/"&gt;Dog Facts API&lt;/a&gt;. This is the endpoint we will making the request to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://dog-facts-api.herokuapp.com/api/v1/resources/dogs/all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below is the code snippet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://dog-facts-api.herokuapp.com/api/v1/resources/dogs/all"&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see a similar output as the previous output. So how do we use the Response Object to access the data we need?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#response-object"&gt;
  &lt;/a&gt;
  Response Object
&lt;/h3&gt;

&lt;p&gt;Let's continue working with Dog Facts API. The following snippet of code will help us introspect the returned Response object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see a list with a bunch of stuff. Focus on the last few.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#statuscode"&gt;
  &lt;/a&gt;
  status_code
&lt;/h4&gt;

&lt;p&gt;This contains the status code of our request. For a successful GET request, it should be 200.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'''
OUTPUT
200
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#url"&gt;
  &lt;/a&gt;
  url
&lt;/h4&gt;

&lt;p&gt;This contains the URL of the response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'''
OUTPUT
https://dog-facts-api.herokuapp.com/api/v1/resources/dogs/all
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#ok"&gt;
  &lt;/a&gt;
  ok
&lt;/h4&gt;

&lt;p&gt;This is true if the status code is less than 400&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'''
OUTPUT
True
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#json"&gt;
  &lt;/a&gt;
  json
&lt;/h4&gt;

&lt;p&gt;This returns a JSON object of the result. Basically the data we want to access. If the data returned by the endpoint is not in a JSON format, it will raise an error. Most API endpoints usually return data in a JSON format, it's good practice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="s"&gt;'''
OUTPUT
{'fact': 'All dogs can be traced back 40 million years ago to a weasel-like animal called the Miacis which dwelled in trees and dens. The Miacis later evolved into the Tomarctus, a direct forbear of the genus Canis, which includes the wolf and jackal as well as the dog.'}
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am only displaying the first fact in the list but you can try it out on your own without the indexing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#text"&gt;
  &lt;/a&gt;
  text
&lt;/h4&gt;

&lt;p&gt;This contains the result in Unicode format, i.e a string object. The output might look similar to the one returned by json() but if you use type() to inspect the type of the returned data, you'll notice it is a string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="s"&gt;'''
OUTPUT
  {
    "fact": "Fifty-eight percent of people put pets in family and holiday portraits."
  }, 
  {
    "fact": "There are only 350 Cisky Terriers in the world, possibly making it the rarest breed."
  }, 
  .............
  &amp;lt;class 'str'&amp;gt;
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have truncated the output since it was too long.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-a-request-with-parameters"&gt;
  &lt;/a&gt;
  Making a Request with parameters
&lt;/h3&gt;

&lt;p&gt;Some endpoints accept parameters. The Dog Facts API accepts a couple of parameters&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;num: to specify the number of facts you want to receive&lt;/li&gt;
&lt;li&gt;index: to specify the index of the fact you are targeting
There are a couple of ways to include parameters in your request&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#including-parameter-in-url"&gt;
  &lt;/a&gt;
  Including parameter in URL
&lt;/h4&gt;

&lt;p&gt;You can include the parameter in your URL with a ""?parameter=value"". Be careful to use the base URL. In our case, the base URL is the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://dog-facts-api.herokuapp.com/api/v1/resources/dogs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our URL with the parameter included would be the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://dog-facts-api.herokuapp.com/api/v1/resources/dogs?number=2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below is the code to make a request to get 2 facts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://dog-facts-api.herokuapp.com/api/v1/resources/dogs?number=2"&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="s"&gt;'''
OUTPUT
2
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#including-a-parameters-object-in-the-get-request"&gt;
  &lt;/a&gt;
  Including a parameters object in the get request
&lt;/h4&gt;

&lt;p&gt;Another way would be to set the "params" argument in the get() function to our parameter.&lt;br&gt;
Below is the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://dog-facts-api.herokuapp.com/api/v1/resources/dogs"&lt;/span&gt;
&lt;span class="n"&gt;param_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;param_obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'''
OUTPUT
2
https://dog-facts-api.herokuapp.com/api/v1/resources/dogs?number=2
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, "response.url" contains the URL with the parameter included.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-a-get-request-to-a-secured-endpoint"&gt;
  &lt;/a&gt;
  Make a GET Request to a secured endpoint
&lt;/h3&gt;

&lt;p&gt;Most APIs are secured to prevent malicious requests. An API key is needed whenever you make a request to the API. We will be working with &lt;a href="https://docs.thecatapi.com/"&gt;Cats API&lt;/a&gt;. This is different from the first Cat Facts API we used, this is secured. Before proceeding, get your API key from &lt;a href="https://thecatapi.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We should follow best practices when dealing with API keys. The API key must not directly be used in your python file. It must either be used as an environment variable or stored in a .env file. The API key must be loaded in the Python file, so as to hide it from others.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a file named ".env" in the same folder as your python file and paste the following
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR API KEY HERE"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add your API Key as the string&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install the following library
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;python-dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Load the API Key
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt;

&lt;span class="n"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"API_KEY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add the API key while making the requests. Some API let you add it as a parameter (refer to the specific API's documentation for more instructions. Another way is to include it as a header while using the get() function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt;

&lt;span class="n"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"API_KEY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'x-api-key'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://thecatapi.com/v1/images"&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, the key in the header's object can vary from one API to another. But the general format of making a request to a secured endpoint remains the same.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-a-post-request"&gt;
  &lt;/a&gt;
  Making a POST Request
&lt;/h3&gt;

&lt;p&gt;Making a Post request is similar to making a get request. Instead of the get() method, we used the post() method. We will make a POST request to the following &lt;a href="https://jsonplaceholder.typicode.com/"&gt;API&lt;/a&gt;.&lt;br&gt;
The following endpoint supports a POST Request&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://jsonplaceholder.typicode.com/posts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A post request requires some payload/data to be included in the request. The post() method has a parameter called "data" and our object can be passed as an argument to that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://jsonplaceholder.typicode.com/posts"&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"userId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"#DAY21"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Today is #DAY21 of #100daysofcode"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If the POST request was successful, you should get a status_code of 201&lt;/li&gt;
&lt;li&gt;Ensure your data object follows the proper documentation as provided in the documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#apis-you-can-use-for-your-next-project"&gt;
  &lt;/a&gt;
  APIs you can use for your next project
&lt;/h3&gt;

&lt;p&gt;Below is a list of resources with a list of APIs (A list of lists)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-curated-list-of-100-cool-and-fun-public-apis-to-inspire-your-next-project-7600ce3e9b3"&gt;https://betterprogramming.pub/a-curated-list-of-100-cool-and-fun-public-apis-to-inspire-your-next-project-7600ce3e9b3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/public-apis/public-apis"&gt;https://github.com/public-apis/public-apis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://publicapis.sznm.dev/"&gt;https://publicapis.sznm.dev/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Python 3.10 : What's the new ?</title>
      <author>thamer_saraei</author>
      <pubDate>Sun, 11 Apr 2021 03:11:22 +0000</pubDate>
      <link>https://dev.to/thrpy/python-3-10-what-s-the-new-4a61</link>
      <guid>https://dev.to/thrpy/python-3-10-what-s-the-new-4a61</guid>
      <description>&lt;h1&gt;
  &lt;a href="#python-310-whats-the-new-"&gt;
  &lt;/a&gt;
  Python 3.10 : What's the new ?
&lt;/h1&gt;

&lt;p&gt;The release of ✨Python 3.10✨ is getting closer, so it's time to take a ride with the new version of Python and see what awesome new features will come with this new release👌 😍. &lt;/p&gt;

&lt;p&gt;Please join me in ghithub : &lt;a href="https://github.com/th-rpy/python_3.10_all_new_features"&gt;https://github.com/th-rpy/python_3.10_all_new_features&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-python-310-alpha-version"&gt;
  &lt;/a&gt;
  Install Python 3.10 Alpha version
&lt;/h2&gt;

&lt;p&gt;To try these new features, we will have to install the Alpha/Beta version of Python 3.10. Remember that this last version is not yet stable. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you are under Linux (Ubuntu), you just have to follow the steps below :&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="c"&gt;# Download the latest version for Linux&lt;/span&gt;
 wget https://www.python.org/ftp/python/3.10.0/Python-3.10.0a6.tgz
 &lt;span class="c"&gt;# Unpack Python source code&lt;/span&gt;
 &lt;span class="nb"&gt;tar &lt;/span&gt;xzvf Python-3.10.0a6.tgz
&lt;span class="nb"&gt;cd &lt;/span&gt;Python-3.10.0a6
&lt;span class="c"&gt;# Compile Python source with static libraries&lt;/span&gt;
./configure &lt;span class="nt"&gt;--prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/python-3.10.0a6
make
make &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="nv"&gt;$HOME&lt;/span&gt;/python-3.10.0a6/bin/python3.10
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you are under Windows, you just have to &lt;strong&gt;Download Python Executable&lt;/strong&gt; Installer from &lt;a href="https://www.python.org/ftp/python/3.10.0/python-3.10.0a6-amd64.exe"&gt;here&lt;/a&gt;, then you need to &lt;strong&gt;Run Executable Installer&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you are on MacOs, I can't help you. I am not rich enough to buy a Mac!!! 😒, but this &lt;a href="https://opensource.com/article/19/5/python-3-default-mac"&gt;link&lt;/a&gt; may help you. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yeeeep, Python 3.10 is finally installed ✌ , now we can take a look at all the new features . Let's start 😉😎. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New Features
&lt;/h1&gt;

&lt;p&gt;The new version of python has arrived with many features. In this article, I will show you the most important of them. So, So buckle up, the adventure with 🐍&lt;strong&gt;Python&lt;/strong&gt; will begin in a few seconds 🚀🕓. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-type-union-operator"&gt;
  &lt;/a&gt;
  New Type Union Operator
&lt;/h3&gt;

&lt;p&gt;Instead of using typing.union to express the syntax &lt;strong&gt;"either type X or type Y"&lt;/strong&gt;, the new version of python introduces the new union operator of type &lt;em&gt;X | Y&lt;/em&gt;. This new operator allows us to code more cleanly and efficiently.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Old Version&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;New Version&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This features was contributed by Ken Jin. Visit this link (&lt;a href="https://www.python.org/dev/peps/pep-0612"&gt;PEP 612&lt;/a&gt;) for more details. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typealias-annotation"&gt;
  &lt;/a&gt;
  TypeAlias Annotation
&lt;/h3&gt;

&lt;p&gt;The TypeAlias annotation concept was first introduced in PEP 484 (Python-Version: 3.5) . A reimplementation of this concept will be presented in PEP 613 (Python-Version: 3.10). The main reason for this reimplementation is that the old concept is very difficult for type checkers to distinguish between type aliases and ordinary assignments.  See the following example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Old Version&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;StrCache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Cache[str]'&lt;/span&gt;  &lt;span class="c1"&gt;# a type alias
&lt;/span&gt;&lt;span class="n"&gt;LOG_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'LOG[DEBUG]'&lt;/span&gt;  &lt;span class="c1"&gt;# a module constant
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;New Version&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;StrCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TypeAlias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Cache[str]'&lt;/span&gt;  &lt;span class="c1"&gt;# a type alias
&lt;/span&gt;&lt;span class="n"&gt;LOG_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'LOG[DEBUG]'&lt;/span&gt;  &lt;span class="c1"&gt;# a module constant
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This features was contributed by  Mikhail Golubev. Visit this link (&lt;a href="https://www.python.org/dev/peps/pep-0613"&gt;PEP 613&lt;/a&gt;) for more details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#better-error-messages-in-the-parser"&gt;
  &lt;/a&gt;
  Better error messages in the parser
&lt;/h3&gt;

&lt;p&gt;Suppose you want to write a code that manipulates for example a dictionary (or tuple , list or set ) and you forget to close the brackets (or the parentheses). If you are working with python 3, when you execute your code, the interpreter will display a syntax error like this one &lt;strong&gt;"SyntaxError : unexpected EOF"&lt;/strong&gt;. &lt;br&gt;
However, with this new version, when you try to parse code that contains unclosed parentheses or brackets, the interpreter will displays a more informative error with the location of the unclosed parenthesis or brackets. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Old Version&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"example.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;some_other_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="nb"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="n"&gt;syntax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;New Version&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"example.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="nb"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'{'&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;closed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This features was contributed by Pablo Galindo and Batuhan Taskaya.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#structural-pattern-matching"&gt;
  &lt;/a&gt;
  Structural Pattern Matching
&lt;/h3&gt;

&lt;p&gt;We can say that the most important feature will be introduced in this new Python 3. &lt;br&gt;
Pattern matching will be presented in the common form: match statement and case statements of patterns with associated actions.  Patterns can be: sequences, mappings, primitive data types as well as class instances. By using pattern matching, we are able to, for example, extract information from complex data types, plug into the data structure, and apply specific actions based on different data forms. This is not just the switch/case syntax we all know from other programming languages, but it also adds powerful functionality that we should explore. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Example 1: Simple pattern: match to a literal&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"x1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"x1 .."&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"x2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"x2"&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"x3"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;"x4"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# Multiple literals can be combined with `|`
&lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Yay, "&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Just another x..."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Patterns with a literal and variable&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# X = (x, y, z)
&lt;/span&gt;    &lt;span class="c1"&gt;# point is an (x, y) tuple
&lt;/span&gt;    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Origin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Y=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"X=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"X=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, Y=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Not a point"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Example 3: Patterns and classes&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Origin is the point's location."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Y=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; and the point is on the y-axis."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"X=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; and the point is on the x-axis."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The point is located somewhere else on the plane."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Not a point"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Example 4: Guard&lt;/strong&gt;&lt;br&gt;
We can add an if clause to a pattern, called a guard. If the guard is false, match moves on to try the next case block. Note that the value capture takes place before the guard is evaluated:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"The point is located on the diagonal Y=X at &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Point is not on the diagonal."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Example 5: Nested Patterns&lt;/strong&gt;&lt;br&gt;
Patterns can be nested in arbitrary ways. For example, if our data is a short list of points, they could be matched in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No points in the list."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The origin is the only point in the list."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"A single point &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is in the list."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Two points on the Y axis at &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; are in the list."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Something else is found in the list."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to see more examples and a full tutorial, check out &lt;a href="https://www.python.org/dev/peps/pep-0636/"&gt;PEP 636&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Python 3.10 brings many new interesting features, but as it is an alpha version (not yet stable), it is still far from being fully tested and ready for production. So it is not recommended to start using it right away. &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>JavaScript Hoisting</title>
      <author>Santiago Correa</author>
      <pubDate>Sun, 11 Apr 2021 02:58:16 +0000</pubDate>
      <link>https://dev.to/scorreaui/javascript-hoisting-525l</link>
      <guid>https://dev.to/scorreaui/javascript-hoisting-525l</guid>
      <description>&lt;p&gt;JavaScript before executing your code parses it, and adds every function and variable declarations it finds to its own memory. This is called hoisting.&lt;/p&gt;

&lt;p&gt;There are some different behaviors that occur when using a  function declaration vs a function expression.&lt;/p&gt;

&lt;p&gt;With function declarations, we can call a function before it’s defined, and our code will work. In the other case, we’ll have errors.&lt;/p&gt;

&lt;p&gt;A general rule of thumb is to always define functions, variables, objects and classes before using them.&lt;/p&gt;

&lt;p&gt;Suppose we have a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function cat() {
  alert("I'm a cat that meows!")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Due to hoisting, we can invoke cat() before it is declared:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat()
function cat() {
  alert("I'm a cat that meows!")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This only happens with functions and not function expressions.&lt;/p&gt;

&lt;p&gt;When you assign a function to a variable, that is a function expression:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat()
var cat = function() {
  alert("I'm a cat that meows!")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, the var declaration is hoisted and initialized with undefined as a value, something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var cat = undefined
cat()
cat = function() {
  alert("I'm a cat that meows!")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this code will give you a &lt;code&gt;TypeError: cat is not a function error.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;const and let declarations are hoisted, too, but they are not initialized to undefined like var.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const cat = function cat() {
  alert("I'm a cat that meows!")
}

const cat = function () {
  alert("I'm a cat that meows!")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let cat = function cat() {
  alert("I'm a cat that meows!")
}

let cat = function () {
  alert("I'm a cat that meows!")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, if you invoke cat() before declaring it, it will give you a ReferenceError: 'cat' is not defined error.&lt;/p&gt;

&lt;p&gt;The same will happen for any other expression that assigns an object or class to a variable&lt;/p&gt;

&lt;p&gt;Class declarations work like let and const declarations: they are hoisted, but not initialized, and using a class before its declaration will give a ReferenceError:  is not defined error.&lt;/p&gt;

&lt;p&gt;A simple tip: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you are not re-assigning a variable value, it's better to use const, otherwise use let. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't do it&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const meow = 'meow'
meow = 'meow, Angry cat!!! 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will not work - It will give you a &lt;code&gt;SyntaxError: Invalid or unexpected token&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let meow = 'meow'
meow = 'meow, Angry cat!!! 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Summary:&lt;/p&gt;

&lt;p&gt;All function declarations are hoisted to the top of the current scope before any Javascript is executed.&lt;/p&gt;

&lt;p&gt;We can call a function declaration before it’s defined, and our code will work. &lt;/p&gt;

&lt;p&gt;function expressions are hoisted and initialized with undefined as a value, so this will give you an error.&lt;/p&gt;

&lt;p&gt;If you are not re-assigning a variable value, it's better to use const, otherwise use let. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>hoisting</category>
      <category>functional</category>
      <category>intro</category>
    </item>
    <item>
      <title>Django Web Framework (Python)</title>
      <author>Ivana</author>
      <pubDate>Sun, 11 Apr 2021 02:24:50 +0000</pubDate>
      <link>https://dev.to/ivanadokic/django-web-framework-python-ebn</link>
      <guid>https://dev.to/ivanadokic/django-web-framework-python-ebn</guid>
      <description>&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/3.2/"&gt;Django&lt;/a&gt; is an extremely popular and fully featured server-side web framework, written in Python. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-django"&gt;
  &lt;/a&gt;
  Install Django
&lt;/h2&gt;

&lt;p&gt;Before you can use Django, you’ll need to install it. More about what Python version should be used with Django version can be found&lt;a href="https://docs.djangoproject.com/en/3.2/faq/install/#faq-python-version-support"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#get-the-latest-development-version"&gt;
  &lt;/a&gt;
  Get the latest development version
&lt;/h4&gt;

&lt;p&gt;The latest and greatest Django version is the one that’s in its Git repository, we started with:&lt;br&gt;
&lt;code&gt;git clone https://github.com/django/django.git&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#install-python"&gt;
  &lt;/a&gt;
  Install Python
&lt;/h4&gt;

&lt;p&gt;Download the latest version for Mac OS X &lt;a href="https://www.python.org/downloads/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-does-django-code-look-like"&gt;
  &lt;/a&gt;
  What does Django code look like?
&lt;/h2&gt;

&lt;p&gt;A web application waits for HTTP requests from the web browser (or other clients) and when a request is received the application works out what is needed based on the URL and possibly information in POST/GET data. Depending on what is required it may then read or write information from a database or perform other tasks required to satisfy the request. The application will then return a response to the web browser, often dynamically creating an HTML page for the browser to display by inserting the retrieved data into placeholders in an HTML template.&lt;br&gt;
Django web applications typically group the code that handles each of these steps into separate files:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lE9DNC58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5aj63lefpumjr7zggqk0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lE9DNC58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5aj63lefpumjr7zggqk0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;URLs&lt;/strong&gt;: While it is possible to process requests from every single URL via a single function, it is much more maintainable to write a separate view function to handle each resource. A URL mapper is used to redirect HTTP requests to the appropriate view based on the request URL. The URL mapper can also match particular patterns of strings or digits that appear in a URL and pass these to a view function as data.&lt;br&gt;
&lt;strong&gt;View&lt;/strong&gt;: A view is a request handler function, which receives HTTP requests and returns HTTP responses. Views access the data needed to satisfy requests via models and delegate the formatting of the response to templates.&lt;br&gt;
&lt;strong&gt;Models&lt;/strong&gt;: Models are Python objects that define the structure of an application's data and provide mechanisms to manage (add, modify, delete) and query records in the database. &lt;br&gt;
&lt;strong&gt;Templates&lt;/strong&gt;: A template is a text file defining the structure or layout of a file (such as an HTML page), with placeholders used to represent actual content. A view can dynamically create an HTML page using an HTML template, populating it with data from a model. A template can be used to define the structure of any type of file; it doesn't have to be HTML!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sending-the-request-to-the-right-view-urlspy"&gt;
  &lt;/a&gt;
  Sending the request to the right view (urls.py)
&lt;/h2&gt;

&lt;p&gt;A URL mapper is stored in a file named urls.py. The mapper (urlpatterns) defines a list of mappings between routes (specific URL patterns) and corresponding view functions. If an HTTP Request is received that has a URL matching a specified pattern, then the associated view function will be called and passed the request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;urlpatterns = [
    path('admin/', admin.site.urls),
    path('book/&amp;lt;int:id&amp;gt;/', views.book_detail, name='book_detail'),
    path('catalog/', include('catalog.urls')),
    re_path(r'^([0-9]+)/$', views.best),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;urlpatterns&lt;/code&gt; object is a list of &lt;code&gt;path()&lt;/code&gt; and/or &lt;code&gt;re_path()&lt;/code&gt; functions (Python lists are defined using square brackets, where items are separated by commas and may have an optional trailing comma.&lt;/p&gt;

&lt;p&gt;The first argument to both methods is a route (pattern) that will be matched. The &lt;code&gt;path()&lt;/code&gt; method uses angle brackets to define parts of a URL that will be captured and passed through to the view function as named arguments. The &lt;code&gt;re_path()&lt;/code&gt; function uses a flexible pattern matching approach known as a regular expression. We'll talk about these in a later article!&lt;/p&gt;

&lt;p&gt;The second argument is another function that will be called when the pattern is matched. The notation &lt;code&gt;views.book_detail&lt;/code&gt;indicates that the function is called &lt;code&gt;book_detail()&lt;/code&gt; and can be found in a module called views.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handling-the-request-viewspy"&gt;
  &lt;/a&gt;
  Handling the request (views.py)
&lt;/h2&gt;

&lt;p&gt;Views are the heart of the web application, receiving HTTP requests from web clients and returning HTTP responses. &lt;/p&gt;

&lt;p&gt;We will show a view function &lt;code&gt;index()&lt;/code&gt;, which could have been called by our URL mapper in the previous section. Like all view functions it receives an &lt;code&gt;HttpRequest&lt;/code&gt; object as a parameter &lt;code&gt;(request)&lt;/code&gt; and returns an &lt;code&gt;HttpResponse&lt;/code&gt; object. In this case, we don't do anything with the request, and our response returns a hard-coded string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# filename: views.py (Django view functions)

from django.http import HttpResponse

def index(request):
    # Get an HttpRequest - the request parameter
    # perform operations using information from the request.
    # Return HttpResponse
    return HttpResponse('Hello from Django!')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Views are usually stored in a file called views.py.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-features"&gt;
  &lt;/a&gt;
  Main features
&lt;/h2&gt;

&lt;p&gt;We will list the main features that you'll use in almost every web application: URL mapping, views, models, and templates. Just a few of the other things provided by Django include:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forms&lt;/strong&gt;: HTML Forms are used to collect user data for processing on the server and Django simplifies form creation, validation, and processing.&lt;br&gt;
&lt;strong&gt;User authentication and permissions&lt;/strong&gt;: Django includes robust user authentication and permission system that has been built with security in mind. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Caching&lt;/strong&gt;: Creating content dynamically is much more computationally intensive (and slow) than serving static content. Django provides flexible caching so that you can store all or part of a rendered page so that it doesn't get re-rendered except when necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Administration site&lt;/strong&gt;: The Django administration site is included by default when you create an app using the basic skeleton. It's providing an admin page for site administrators to create, edit, and view any data models on your site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serializing data&lt;/strong&gt;: Django makes it easy to serialize and serve your data as XML or JSON. This can be useful when creating a web service (a website that purely serves data to be consumed by other applications or sites, and doesn't display anything itself), or when creating a website in which the client-side code handles all the rendering of data.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-project"&gt;
  &lt;/a&gt;
  Creating a project
&lt;/h2&gt;

&lt;p&gt;To create a project run the following command in your terminal:&lt;br&gt;
&lt;code&gt;django-admin startproject mysite&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will create a &lt;code&gt;mysite&lt;/code&gt; directory in your current directory.  After the project is created go to its directory via &lt;code&gt;cd&lt;/code&gt; command:&lt;br&gt;
&lt;code&gt;cd mysite&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at what &lt;code&gt;startproject&lt;/code&gt; created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those files are:&lt;/p&gt;

&lt;p&gt;The outer &lt;strong&gt;mysite/&lt;/strong&gt; root directory is a container for your project. Its name doesn’t matter to Django and you can rename it to anything you like.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;manage.py&lt;/strong&gt;: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about manage.py in django-admin and manage.py.&lt;/p&gt;

&lt;p&gt;The inner &lt;strong&gt;mysite/ directory&lt;/strong&gt; is the actual Python package for your project. Its name is the Python package name you’ll need to use to import anything inside it (e.g. mysite.urls).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mysite/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/strong&gt;: An empty file that tells Python that this directory should be considered a Python package. If you’re a Python beginner, read more about packages in the official Python docs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mysite/settings.py&lt;/strong&gt;: Settings/configuration for this Django project. Django settings will tell you all about how settings work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mysite/urls.py&lt;/strong&gt;: The URL declarations for this Django project; a “table of contents” of your Django-powered site. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mysite/asgi.py&lt;/strong&gt;: An entry-point for ASGI-compatible web servers to serve your project. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mysite/wsgi.py&lt;/strong&gt;: An entry-point for WSGI-compatible web servers to serve your project. &lt;/p&gt;

&lt;p&gt;To start a server run the following command:&lt;br&gt;
&lt;code&gt;python manage.py runserver&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After visiting &lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt; you can see your server is really running:)&lt;/p&gt;

&lt;p&gt;To connect with me please check my &lt;a href="https://github.com/ivanadokic"&gt;Github&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/ivana-dokic/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/LloydPile"&gt;Twitter&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>django</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Orientação a objetos de outra forma: Métodos estáticos e de classes</title>
      <author>Eduardo Klosowski</author>
      <pubDate>Sun, 11 Apr 2021 02:18:19 +0000</pubDate>
      <link>https://dev.to/acaverna/orientacao-a-objetos-de-outra-forma-metodos-estaticos-e-de-classes-jba</link>
      <guid>https://dev.to/acaverna/orientacao-a-objetos-de-outra-forma-metodos-estaticos-e-de-classes-jba</guid>
      <description>&lt;p&gt;Na &lt;a href="https://dev.to/acaverna/orientacao-a-objetos-de-outra-forma-classes-e-objetos-3mfd"&gt;postagem anterior&lt;/a&gt; foi apresentado o &lt;code&gt;self&lt;/code&gt;, nessa postagem será discutido mais a respeito desse argumento, considerando opções para ele e suas aplicações.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#m%C3%A9todos-est%C3%A1ticos"&gt;
  &lt;/a&gt;
  Métodos estáticos
&lt;/h2&gt;

&lt;p&gt;Nem todas as funções de uma classe precisam receber uma referência de um objeto para lê-lo ou alterá-lo, muitas vezes uma função pode fazer o seu papel apenas com os dados passados como argumento, por exemplo, receber um nome e validar se ele possui pelo menos três caracteres sem espaço. Dessa forma, essa função poderia ser colocada fora do escopo da classe, porém para facilitar sua chamada, e possíveis alterações (que será discutido em outra postagem), é possível colocar essa função dentro da classe e informar que ela não receberá o argumento &lt;code&gt;self&lt;/code&gt; com o decorador &lt;code&gt;@staticmethod&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# Demais funções
&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;valida_nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dessa forma, essa função pode ser chamada diretamente de um objeto pessoa, ou até mesmo diretamente da classe, sem precisar criar um objeto primeiro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Chamando diretamente da classe
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valida_nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'João'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Chamando através de um objeto do tipo Pessoa
&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'João'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'da Silva'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valida_nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E essa função também pode ser utilizada dendro de outras funções, como validar o nome na criação de uma pessoa, de forma que caso o nome informado seja válido, será criado um objeto do tipo Pessoa, e caso o nome seja inválido, será lançado uma exceção:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sobrenome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valida_nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Nome inválido'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sobrenome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sobrenome&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# Demais funções
&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;valida_nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;


&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'João'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'da Silva'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Cria objeto
&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'da Silva'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Lança ValueError: Nome inválido
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#m%C3%A9todos-da-classe"&gt;
  &lt;/a&gt;
  Métodos da classe
&lt;/h2&gt;

&lt;p&gt;Entretanto algumas funções podem precisar de um meio termo, necessitar acessar o contexto da classe, porém sem necessitar de um objeto. Isso é feito através do decorador &lt;code&gt;@classmethod&lt;/code&gt;, onde a função decorada com ele, em vez de receber um objeto como primeiro argumento, recebe a própria classe.&lt;/p&gt;

&lt;p&gt;Para demonstrar essa funcionalidade será implementado um &lt;em&gt;id&lt;/em&gt; auto incremental para os objetos da classe &lt;code&gt;Pessoa&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total_de_pessoas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;novo_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_de_pessoas&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_de_pessoas&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sobrenome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;novo_id&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sobrenome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sobrenome&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt;

&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'João'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'da Silva'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Imprime 1
&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Maria'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'dos Santos'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Imprime 2
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_de_pessoas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Imprime 2
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_de_pessoas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Imprime 2
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_de_pessoas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Imprime 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nesse código é criado uma variável &lt;code&gt;total_de_pessoas&lt;/code&gt; dentro do escopo da classe &lt;code&gt;Pessoas&lt;/code&gt;, e que é compartilhado tanto pela classe, como pelos objetos dessa classe, diferente de declará-la com &lt;code&gt;self.&lt;/code&gt; dentro do &lt;code&gt;__init__&lt;/code&gt;, onde esse valor pertenceria apenas ao objeto, e não é compartilhado com os demais objetos. Declarar variáveis dentro do contexto da classe é similar ao se declarar variáveis com &lt;code&gt;static&lt;/code&gt; em outras linguagens, assim como o &lt;code&gt;@classmethod&lt;/code&gt; é semelhante a declaração de funções com &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As funções declaradas com &lt;code&gt;@classmethod&lt;/code&gt; também podem ser chamadas sem a necessidade de se criar um objeto, como &lt;code&gt;Pessoa.novo_id()&lt;/code&gt;, embora que para essa função específica isso não faça muito sentido, ou receber outros argumentos, tudo depende do que essa função fará.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Considerações
&lt;/h2&gt;

&lt;p&gt;Embora possa parecer confuso identificar a diferença de uma função de um objeto (função sem decorador), função de uma classe (com decorador &lt;code&gt;@classmethod&lt;/code&gt;) e função sem acesso a nenhum outro contexto (com decorador &lt;code&gt;@staticmethod&lt;/code&gt;), essa diferença fica mais clara ao se analisar o primeiro argumento recebido por cada tipo de função. Podendo ser a referência a um objeto (&lt;code&gt;self&lt;/code&gt;) e assim necessitando que um objeto seja criado anteriormente, ser uma classe (&lt;code&gt;cls&lt;/code&gt;) e não necessitando receber um objeto, ou simplesmente não recebendo nenhum argumento especial, apenas os demais argumentos necessários para a função. Sendo diferenciados pelo uso dos decoradores.&lt;/p&gt;

&lt;p&gt;Na orientação a objetos implementada pelo Python, algumas coisas podem ficar confusas quando se mistura com nomenclaturas de outras linguagens que possuem implementações diferentes. A linguagem Java, por exemplo, utiliza a palavra-chave &lt;code&gt;static&lt;/code&gt; para definir os atributos e métodos de classe, enquanto no Python um método estático é aquele que não acessa nem um objeto, nem uma classe, devendo ser utilizado o escopo da classe e o decorador &lt;code&gt;@classmethod&lt;/code&gt; para se criar atributos e métodos da classe.&lt;/p&gt;

</description>
      <category>oop</category>
      <category>python</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>[PT-BR] Resolvendo o Bandit (níveis 5-10)</title>
      <author>Leticia Pegoraro Garcez</author>
      <pubDate>Sun, 11 Apr 2021 02:14:01 +0000</pubDate>
      <link>https://dev.to/lelepg/pt-br-resolvendo-o-bandit-niveis-5-10-29na</link>
      <guid>https://dev.to/lelepg/pt-br-resolvendo-o-bandit-niveis-5-10-29na</guid>
      <description>&lt;p&gt;Olá serumaninhos!&lt;br&gt;
Sei que já faz um tempo desde a útlima vez que eu escrevi sobre o assunto, mas com a faculdade fica difícil encontrar tempo entre listas de exerícios para me dedicar ao dev.to, porém faço o melhor que eu posso.&lt;/p&gt;

&lt;p&gt;Este é o segundo artigo da série "Resolvendo o Bandit" que eu estou produzindo, e hoje vamos avançar mais cinco níveis desse desafio de &lt;em&gt;Capture the Flag&lt;/em&gt; do &lt;a href="https://overthewire.org/wargames/"&gt;OverTheWire&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Se você caiu neste artigo de para-quedas, não deixe de conferir o artigo anterior, onde solucionei (e contei minha jornada de solução) dos cinco primeiros níveis desse jogo &lt;a href="https://dev.to/lelepg/pt-br-resolvendo-o-bandit-niveis-0-5-4ipp"&gt;clicando aqui&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;É importante lembrar que estes artigos tem um foco na minha jornada para solucionar o problema, não na solução em si, o que é bem diferente do que você encontra na internet por ai. Então, se você está pronto pra ir nessa aventura comigo, vamos nessa!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onde-parei"&gt;
  &lt;/a&gt;
  Onde parei:
&lt;/h2&gt;

&lt;p&gt;No último artigo, eu consegui a senha e o login para o nível 6 do desafio.&lt;br&gt;
Comando de login: ssh &lt;a href="mailto:bandit5@bandit.labs.overthewire.org"&gt;bandit5@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: koReBOKuIDDepwhWk7jZC0RTdopnAYKh&lt;/p&gt;

&lt;p&gt;Com essas informações, já podemos &lt;a href="https://overthewire.org/wargames/bandit/bandit6.html"&gt;acessar o link&lt;/a&gt; das instruções e prosseguir o desafio.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-5-gt-n%C3%ADvel-6"&gt;
  &lt;/a&gt;
  Nível 5 -&amp;gt; Nível 6
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está em algum lugar na pasta inhere e tem todas as seguintes propriedades: pode ser lida por humanos, tem tamanho de 1033 bytes e não é executável.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Alguns comandos são disponibilizados na página do desafio, como dicas. O comando que já me parece útil, é o comando &lt;code&gt;find&lt;/code&gt;, já que pelo enunciado precisamos procurar por um arquivo de acordo com suas propriedades, mas só para garantir, eu usei o comando &lt;code&gt;whatis find&lt;/code&gt; para ter certeza de que é este o comando que eu preciso.&lt;/p&gt;

&lt;p&gt;Para saber mais sobre esse comando, eu utilizaria o comando &lt;code&gt;find --help&lt;/code&gt; no terminal no Linux, ou &lt;code&gt;man find&lt;/code&gt;, mas vou tentar fazer algo diferente, e usar uma sugestão do &lt;a href="https://dev.to/eduardoklosowski"&gt;Eduardo Klosowski&lt;/a&gt; (inclusive, se você não conhece o conteúdo que ele produz, recomendo fortemente que conheça, porque ele tem domínio de tudo que fala e está sempre falando de conteúdo relevanete, além é claro de me dar dicas ótimas!) e usar o site &lt;a href="https://explainshell.com/"&gt;https://explainshell.com/&lt;/a&gt; para ter uma alternativa diferente ao terminal. Basta digitar o comando e o site fará uma busca, exibindo os comandos relacionados à sua busca. Então é só selecionar o comando, e tentar entender o que precisamos fazer para passar de nível.&lt;/p&gt;

&lt;p&gt;Lendo &lt;a href="https://explainshell.com/explain/1/find"&gt;o resultado da busca para &lt;code&gt;find&lt;/code&gt;&lt;/a&gt;, vemos que este comando possui uma série de parâmetros para procurar por arquivos por diferentes tipos de coisas. Então precisamos de alguma maneira para filtrar a legibilidade, tamanho, e executabilidade dos arquivos na pasta.&lt;/p&gt;

&lt;p&gt;As diretivas que eu encontrei que podem resolver o problema foram &lt;code&gt;-readable&lt;/code&gt;, &lt;code&gt;-size&lt;/code&gt; e &lt;code&gt;-executable&lt;/code&gt;. Para o parâmetro &lt;code&gt;executable&lt;/code&gt;, eu preciso descobrir uma maneira de inverter seu resultado, algo que eu penso que pode ser feito usando &lt;code&gt;!&lt;/code&gt; ou &lt;code&gt;not&lt;/code&gt;, e como não encontrei essa informação no site, utilizo o &lt;code&gt;find --help&lt;/code&gt; para ver se encontro alguma coisa. De fato, podemos obsersar alguns operadores para os parâmetros, entre eles, o &lt;code&gt;-not&lt;/code&gt; que deve ser usado antes de outro parâmetros. Agora só preciso combinar todos os parâmetros, e teremos uma solução para o problema.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;find -readable -not -executable -size 1033&lt;/code&gt;, infelizmente não funcionou (como se algo funcionasse na primeira tentativa hehe), mas quando eu tirei o parâmetro referente ao tamanho, consegui um resultado para a busca, o que significa que meu problema está neste último parâmetro da busca. E como era de se esperar, eu acabei esquecendo de especificar o tamanho, ou seja, indicar que 1033 se refere a bytes. Então é só aplicar &lt;code&gt;find -readable -not -executable -size 1033c&lt;/code&gt; e temos como resultado um único arquivo. Agora é só usar o comando cat nesse arquivo, e temos a senha para o próximo nível. Lembrando que para fechar a conexão com o servidor atual, você precisa digitar &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandit6@bandit.labs.overthewire.org"&gt;bandit6@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: DXjZPULLxYr17uwoI01bNLQbtFemEgo7&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-6-gt-n%C3%ADvel-7"&gt;
  &lt;/a&gt;
  Nível 6 -&amp;gt; Nível 7
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está em algum lugar no servidor e tem todas as seguintes propriedades: pertence ao usuário bandit7, pertence ao grupo bandit6 e tem 33 bytes de tamanho.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lendo este enunciado, me parece que temos que usar o comando &lt;code&gt;find&lt;/code&gt; outra vez. Para ter certeza disso, volto à nossa &lt;a href="https://explainshell.com/explain/1/find"&gt;busca no explainshell.com&lt;/a&gt; para ver se existe algum comando que filtre a quem determinado arquivo pertence.&lt;/p&gt;

&lt;p&gt;Logo encontro os parâmetros &lt;code&gt;-group&lt;/code&gt;, que retorna arquivos pertences a determinado grupo, e &lt;code&gt;-user&lt;/code&gt;, que retorna arquivos pertences a um determinado usuário. Como já conhecemos o &lt;code&gt;-size&lt;/code&gt; para encontrar um arquivo por tamanho, já temos tudo na mão para resolver esse desafio.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;find -user bandit7 -group bandit6 -size 33c&lt;/code&gt; parece que vai resolver o desafio, porém não consegui nenhum tipo de retorno com este comando. Este é um momento decisivo. Você pode aceitar que algo não funciona e é isso, ou pode tentar entender porque ele não funciona e assim encontrar uma solução. Lógicamente, eu escolhi ler um pouco mais da documentação do comando para entender porque não estava funcionando.&lt;/p&gt;

&lt;p&gt;O comando &lt;code&gt;file&lt;/code&gt; procura arquivos no diretório atual, e nos diretórios que estão dentro deste diretório, porém precisamos realizar nossa busca no servidor inteiro, não em uma pasta específica, por isso não consegui nenhum resultado na pasta home do usuário. &lt;/p&gt;

&lt;p&gt;Para isso, precisamos especificar uma pasta diferente para fazer a procura, no caso, o diretório &lt;code&gt;/&lt;/code&gt; do servidor, já que todo o conteúdo do servidor está dentro deste diretório. Para especificar um novo diretório, o colocamos logo após o comando &lt;code&gt;file&lt;/code&gt;, então rodando &lt;code&gt;find / -user bandit7 -group bandit6 -size 33c&lt;/code&gt;, temos alguns resultados, vários deles indicando &lt;em&gt;"Permission denied"&lt;/em&gt;, ou permissão negada. &lt;/p&gt;

&lt;p&gt;Bom, é quase intuitivo que temos que encontrar um arquivo que tenhamos permissão de acessar, então aqui você tem duas opções: olhar cada um dos resultados atrás de algum que tenha permissão, ou procurar na documentação do &lt;code&gt;find&lt;/code&gt; algo que automatize isso. Eu, novamente, escolhi a segunda opção, mas não encontrei nada relevante. Também dei uma olhada no comando &lt;code&gt;grep&lt;/code&gt; (utilizado para encontrar padrões), e também não encontrei nada de útil.&lt;/p&gt;

&lt;p&gt;Por fim, recorri ao google. É muito importante que você saiba pesquisar para obter melhor um melhor resultado. No meu caso, eu fiz a busca em inglês porque geralmente consigo resultados mais interessantes mais rápido. &lt;em&gt;"linux find skip permission denied"&lt;/em&gt; me pareceu uma boa busca, já que eu quero realmente pular os arquivos que não consigo acessar. E olhando os resultados da pesquisa, consegui encontrar o comando &lt;code&gt;2&amp;gt;/dev/null&lt;/code&gt; &lt;a href="https://www.cyberciti.biz/faq/bash-find-exclude-all-permission-denied-messages/"&gt;clique aqui para acessar o link do artigo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Antes de usar o comando, copiei e colei ele novamente no google (google é essencial se você trabalha com tecnologia, só quero deixar isso registrado aqui), para tentar descobrir do que se tratava, e encontrei a resposta que eu precisava &lt;a href="https://askubuntu.com/questions/350208/what-does-2-dev-null-mean"&gt;neste link&lt;/a&gt;. Basicamente, o número 2 se refere a mensagens de erro, ou seja, falhas no acesso, entre outras coisas. O símbolo &amp;gt; é o simbolo de redirecionamento, então estamos redirecionando todos os erros para &lt;code&gt;/dev/null&lt;/code&gt;, que é um diretório de "lixo". Parece fazer sentido com o que eu preciso, então vamos tentar executar o comando &lt;code&gt;find / -user bandit7 -group bandit6 -size 33c 2&amp;gt;/dev/null&lt;/code&gt;, e temos um único arquivo novamente, onde temos a senha do próximo nível. Só usar &lt;code&gt;cat&lt;/code&gt; e pegar!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandit7@bandit.labs.overthewire.org"&gt;bandit7@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-7-gt-n%C3%ADvel-8"&gt;
  &lt;/a&gt;
  Nível 7 -&amp;gt; Nível 8
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está no arquivo data.txt, do lado da palavra "millionth"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Este exercício parece mais simples que o anterior, a primeira vista, mas só vamor ter certeza, resolvendo. Eu comecei usando o comando &lt;code&gt;cat&lt;/code&gt; no arquivo &lt;code&gt;data.txt&lt;/code&gt; para entender melhor a estrutura dele, e como eu deveria estruturar a minha busca. Basicamente, o arquivo possui várias linhas, cada uma contendo uma palavra chave, e uma senha. O que temos que fazer então é achar um comando que retorne o texto da linha onde determinada palavra foi encontrada. &lt;/p&gt;

&lt;p&gt;Vendo os comandos oferecidos pela ajuda no nível, o comando &lt;code&gt;strings&lt;/code&gt; me parece útil, porém após uma rápida busca no &lt;a href="https://explainshell.com/"&gt;explainshell.com&lt;/a&gt;, acho que não é este o comando que precisamos. Reanalizando o problema, uma solução muito simples me veio a cabeça. Eu quero encontrar uma sequência de caracteres em um arquivo, e o comando &lt;code&gt;grep&lt;/code&gt; é perfeito para isso, já que ele busca por determinados padrões de caracteres em um input. Tudo que eu preciso fazer é redirecionar a saída do comando &lt;code&gt;cat&lt;/code&gt; para o comando grep, e BAM! Temos a senha para o próximo nível. E por sorte, &lt;code&gt;cat data.txt | grep millionth&lt;/code&gt; retorna exatamente a linha de código que eu preciso com a senha &lt;em&gt;cvX2JJa4CFALtqS87jk27qwqGhBM9plV&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Algo que acho importante mencionar aqui, é que o comando &lt;code&gt;grep&lt;/code&gt; foi o primeiro da lista de sugestões do &lt;a href="https://overthewire.org/wargames/bandit/bandit8.html"&gt;OverTheWire&lt;/a&gt;, mas só passou pela minha cabeça utilizá-lo depois que eu já tinha pesquisado e feito algumas tentativas com outros comandos. Talvez eu devesse ter prestado mais atenção às dicas, hehe.   &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandit8@bandit.labs.overthewire.org"&gt;bandit8@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: cvX2JJa4CFALtqS87jk27qwqGhBM9plV&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-8-gt-n%C3%ADvel-9"&gt;
  &lt;/a&gt;
  Nível 8 -&amp;gt; Nível 9
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está guardada no arquivo data.txt e é a única linha de código que ocorre apenas uma vez.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Como no exercício anterior, precisamos realizar uma filtragem em um arquivo de texto, mas uma filtragem que identifique um a linha única. Nos comandos oferecidos na ajuda, &lt;code&gt;uniq&lt;/code&gt; me parece útil, e observando o resultado e &lt;code&gt;whatis uniq&lt;/code&gt;, vejo que ele omite linhas repetidas, então parece que tudo que precisamos fazer é filtrar o arquivo com este comando. Porém não tive muito sucesso com a utilização dele. Isso significa que precisamos ir mais a fundo nas funcionalidades do comando para entender como ele funciona. &lt;/p&gt;

&lt;p&gt;Uma opção de contagem está disponível no comando, e utilizando ela em conjunto com o comando grep, ainda recebemos várias ocorrências de linhas que ocorrem apenas uma vez, e observando a saída, encontrei o problema. Como não existem duas linhas iguais em seguida, o comando &lt;code&gt;uniq&lt;/code&gt; não filtra essas ocorrências separadas, então precisamos de alguma maneira de ordenar as linhas do arquivo de texto. O comando que me parece útil é o comando &lt;code&gt;sort&lt;/code&gt; que ordena linhas de texto. Agora é entender como este comando funciona e de que maneira ele pode ser utilizado.&lt;/p&gt;

&lt;p&gt;O comando &lt;code&gt;sort&lt;/code&gt; ordena as linhas de texto em ordem alfabética, então tudo o que precisamos fazer é ler o arquivo, ordená-lo e remover as linhas duplicadas. Minha primeira ideia foi criar um novo arquivo com a lista ordenada, mas não tenho permissão de fazer esse tipo de alteração, então minha segunda ideia foi redirecionar a saída do comando &lt;code&gt;sort&lt;/code&gt; para o comando &lt;code&gt;uniq&lt;/code&gt;, e isso também não deu muito certo, mas lendo a documentação do comando &lt;code&gt;uniq&lt;/code&gt;, é possível ver que o parâmetro &lt;code&gt;-u&lt;/code&gt; imprime apenas linhas não repetidas, e de fato &lt;code&gt;sort data.txt | uniq -u&lt;/code&gt; retorna apenas uma linha de texto, que é a senha do próximo nível. Note que não é necessário especificar o input para o comando &lt;code&gt;uniq&lt;/code&gt;, já que a entrada deste comando é a saída do comando &lt;code&gt;sort&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandi9@bandit.labs.overthewire.org"&gt;bandi9@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-9-gt-n%C3%ADvel-10"&gt;
  &lt;/a&gt;
  Nível 9 -&amp;gt; Nível 10
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está no arquivo data.txt em uma das poucas strings que podem ser lidas por um humano, precedida de vários '='&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Assim como nos desafios anteriores, aqui precisamos fazer uma filtragem no texto de um arquivo. Basta definir como. Minha primeira ideia para resolver este problema, foi utilizar o comando &lt;code&gt;cat&lt;/code&gt; e filtrar essa saída com o comando &lt;code&gt;grep&lt;/code&gt;, mas como você já deve estar acostumado se leu tudo o que eu escrevi até aqui, isso não deu certo, e não é nenhuma surpresa.&lt;/p&gt;

&lt;p&gt;Já que não deu certo, comecei a procurar na documentação do comando &lt;code&gt;cat&lt;/code&gt; algum motivo para me explicar porque isso não deu certo, mas não consegui chegar em nada muito claro. Minha segunda opção (pelas dicas do nível), é o comando &lt;code&gt;strings&lt;/code&gt; que parece fazer quase a mesma coisa que o &lt;code&gt;cat&lt;/code&gt;, mas ao invés de imprimir na tela, este comando apenas gera uma saída com todas as strings lidas do arquivo, o que o torna um bom candidato para um segundo teste. &lt;/p&gt;

&lt;p&gt;Lembrando que eu preciso filtrar o documento por um padrão, (o que já torna o uso do &lt;code&gt;grep&lt;/code&gt; quase que institivo). Surpreendentemente, (não, eu não esperava que isso fosse funcionar, porque geralmente preciso de muitos erros e a maioria deles não é documentado aqui), &lt;code&gt;strings data.txt |grep '=='&lt;/code&gt; retorna um pequeno texto e a senha para o próximo nível. Note que eu usei '==' como filtro do grep, e se você ler a descrição do problema verá que o exercício enuncia que a senha está &lt;em&gt;precedida de vários '='&lt;/em&gt;, portanto me pareceu mais lógico utilizar dois iguais pois estaria retirando algumas linhas que eu já sabia que não se adequavam à condição (aquelas que contém apenas um '='). &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandit10@bandit.labs.overthewire.org"&gt;bandit10@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-10-gt-n%C3%ADvel-11"&gt;
  &lt;/a&gt;
  Nível 10 -&amp;gt; Nível 11
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está no arquivo data.txt que contém dados criptografados em base64&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Já que um dos comandos das dicas se chama literalmente &lt;code&gt;base64&lt;/code&gt;, acho que a solução desse problema não vai ser muito difícil. Utilizando o comando &lt;code&gt;whatis&lt;/code&gt; vemos que &lt;code&gt;base64&lt;/code&gt; é um comando para criptografar e discriptografar dados. Parece ser o que precisamos, e rodando &lt;code&gt;base64 --help&lt;/code&gt;, o parâmetro &lt;code&gt;-d&lt;/code&gt; fornece uma descriptografia de um arquivo. E de uma maneira muito mais simples do que parece, só precisamos utilizar o comando &lt;code&gt;base64 -d data.txt&lt;/code&gt; para obter a senha do próximo nível.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandit11@bandit.labs.overthewire.org"&gt;bandit11@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es-finais"&gt;
  &lt;/a&gt;
  Considerações finais
&lt;/h2&gt;

&lt;p&gt;Confesso que demorei muito mais do que eu gostaria para escrever este arquivo, porém, antes tarde do que nunca, está publicado.&lt;/p&gt;

&lt;p&gt;Resolver estes desafios está sendo bem divertido, porém eu gostaria muito de ter mais tempo para me dedicar aos desafios. Se você acha que eu "enrolo" muito explicando meus erros, saiba que só os mais significativos realmente entram para o artigo, e que esse processo é bem complicado. &lt;/p&gt;

&lt;p&gt;De qualquer jeito, espero que este artigo tenha sido útil de alguma forma, e até a próxima!&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>linux</category>
      <category>security</category>
    </item>
    <item>
      <title>Tip: use the WordPress code editor to pass attributes to your Gutenberg block variations</title>
      <author>Ashley Kolodziej</author>
      <pubDate>Sun, 11 Apr 2021 02:00:02 +0000</pubDate>
      <link>https://dev.to/ashleykolodziej/tip-use-the-wordpress-code-editor-to-pass-attributes-to-your-gutenberg-block-variations-4jcb</link>
      <guid>https://dev.to/ashleykolodziej/tip-use-the-wordpress-code-editor-to-pass-attributes-to-your-gutenberg-block-variations-4jcb</guid>
      <description>&lt;p&gt;I’ve been learning Gutenberg block development lately, and one of the things I was struggling with was trying to figure out what parameters I could pass on to blocks defined in block variations. I was looking all over the place for documentation on the parameters each block takes, such as font size and color. Little did I know I had all the documentation I needed right in front of me, in the form of the WordPress code editor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-whats-a-variation"&gt;
  &lt;/a&gt;
  Wait, what’s a variation?
&lt;/h2&gt;

&lt;p&gt;A block variation is an easy way of leveraging WordPress core blocks (and even custom blocks you build) to create your own sets of blocks without writing any React code. You’ll need to write a bit of JavaScript, but it’s a lot like writing an array or object. If you can do that, you can write a block variation.&lt;/p&gt;

&lt;p&gt;I like using block variations to create recommended sets of content and help guide my users in content entry. You can nest blocks in block variations, and do things like pre-set the background or font size on them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-the-editor-to-speed-up-block-variation-development"&gt;
  &lt;/a&gt;
  Use the editor to speed up block variation development
&lt;/h2&gt;

&lt;p&gt;My new workflow with block variations is to build the variation just the way I like it in the visual editor, and then switch over to the code editor to grab the attributes I need from there. This lets me set hard-to-remember parameters the right way, like gradients, without having to guess and check, like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6_szirpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8hg7bjq1pk76zj8q5ae.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6_szirpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8hg7bjq1pk76zj8q5ae.jpeg" alt="The attributes in the code editor are between curly braces, and can be used in block variations."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you identify the block you want to model your variation off of in the code editor, just grab those attributes and bring them back into your block variations code. &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/blob/solution-code/src/variations/index.js#L61"&gt;Here’s what that looks like in my final code.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXg78IZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6s03fvk2bs6j9ma3hzt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXg78IZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6s03fvk2bs6j9ma3hzt.jpeg" alt="Code example demonstrating attributes being passed to a block variation using the attributes parameter."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This works for both your variations and your &lt;code&gt;innerBlocks&lt;/code&gt;. &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/blob/solution-code/src/variations/index.js#L28"&gt;Here’s an example in my final code of how I used this in a nested block.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7nX8CpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5pl3yxmaj8qh82eopv9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7nX8CpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5pl3yxmaj8qh82eopv9.jpeg" alt="Code example demonstrating attributes being passed to inner blocks in a block variation."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Block variations are a low key way to get into Gutenberg block development and get familiar with the ecosystem without getting into React or the more complicated bits. Check it out if you’re new to Gutenberg and looking for a place to start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-tutorial"&gt;
  &lt;/a&gt;
  Full tutorial
&lt;/h2&gt;

&lt;p&gt;If you’re new to JavaScript or Gutenberg, I recorded my full process of building block variations using this method in a beginner-friendly way here.  I also put together sample code below in Github you can use to get started with a new block variation.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/m6IH-G286DU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ashleykolodziej"&gt;
        ashleykolodziej
      &lt;/a&gt; / &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations"&gt;
        professorkexplains-block-variations
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Block Variations tutorial&lt;/h1&gt;
&lt;p&gt;These are companion files to my &lt;a href="https://youtu.be/m6IH-G286DU" rel="nofollow"&gt;Build Your First Block Variation tutorial on YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use these files, download them, and then unzip them to the directory of your choice. In my tutorial, this directory is called &lt;code&gt;variations-example&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can view the final code from the tutorial on the &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/tree/solution-code"&gt;solution-code branch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also see exactly what changed codewise from the beginning of the tutorial to the end of the tutorial by &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/pull/1"&gt;taking a look at this pull request&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ashleykolodziej/professorkexplains-block-variations"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>wordpress</category>
      <category>javascript</category>
      <category>gutenberg</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Explain me NPM in simple terms</title>
      <author>Rahul</author>
      <pubDate>Sun, 11 Apr 2021 01:56:11 +0000</pubDate>
      <link>https://dev.to/rahxuls/explain-me-npm-in-simple-terms-3i47</link>
      <guid>https://dev.to/rahxuls/explain-me-npm-in-simple-terms-3i47</guid>
      <description>&lt;p&gt;NPM stands for Node Package Manager and is composed of an online repository of open-source Node.js projects and a command-line utility used to interact with this repository. &lt;/p&gt;

&lt;p&gt;The power of package manager is that they are specially structured to easily provide code, libraries and entire frameworks. &lt;/p&gt;

&lt;p&gt;Just a Play Store for your projects.&lt;/p&gt;




&lt;p&gt;Let's assume that you are creating an APP that will upset the world but you run into a problem and find a magic library that solves it efficiently. You just have to type: &lt;code&gt;npm install "magic library"&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#npm-is-like-a-play-store"&gt;
  &lt;/a&gt;
  NPM is like a Play Store
&lt;/h3&gt;

&lt;p&gt;Let's assume you need a navigator on your phone. Do you need to create an application from scratch? Of course not! You will open the play store and download it(choosing the one you like the best)&lt;/p&gt;

&lt;p&gt;NPM works in much the same way: when you need to implement a feature in your project you can download (install) the associated code package and use it. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-happens-if-i-download-a-lot-of-apps"&gt;
  &lt;/a&gt;
  What happens if I download a lot of Apps?
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;the phone begs you to stop&lt;/em&gt;. LOL. &lt;br&gt;
NPM has you covered. &lt;/p&gt;

&lt;p&gt;A specific file called &lt;code&gt;package.json&lt;/code&gt; keeps track of all the packages you install and manages their dependencies. This makes it easy to keep the packages updated and even easier to share the project (on got for example). &lt;/p&gt;

&lt;p&gt;Package are not physically and shared but only a "link" to them, in this way the project will weigh little and those who want to use it can install the packages listed in "package.json" by typing the command "npm install". &lt;/p&gt;

&lt;p&gt;THANKS FOR READING 🚀&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#removalai-sponsor"&gt;
  &lt;/a&gt;
  RemovalAI - [SPONSOR]
&lt;/h3&gt;

&lt;p&gt;Remove background from multiple images in a single upload straight to your desktop using Bulk Photo Background Remover for Windows.             &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✅  Drag &amp;amp; Drop Multiple Images&lt;/li&gt;
&lt;li&gt;✅  Optimize Product Images&lt;/li&gt;
&lt;li&gt;✅  Select Your Background&lt;/li&gt;
&lt;li&gt;✅  Set Your Output Size&lt;/li&gt;
&lt;li&gt;✅  Exceptional Results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MiTLFkwG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://removal.ai/wp-content/uploads/2021/02/gif-new-2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MiTLFkwG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://removal.ai/wp-content/uploads/2021/02/gif-new-2.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="http://bit.ly/removalai"&gt;RemovalAI&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to have a meaningful weekend as a programmer?</title>
      <author>poudyal_rabin</author>
      <pubDate>Sun, 11 Apr 2021 01:56:02 +0000</pubDate>
      <link>https://dev.to/poudyal_rabin/how-to-spend-a-meaningful-weekend-as-a-programmer-353j</link>
      <guid>https://dev.to/poudyal_rabin/how-to-spend-a-meaningful-weekend-as-a-programmer-353j</guid>
      <description>&lt;p&gt;Human life is a precious incarnation. Being born has a probability of about one in &lt;a href="https://www.huffpost.com/entry/probability-being-born_b_877853"&gt;400 trillion&lt;/a&gt;. So trust me you are special and you should try to get the most out of your life. Living with the scarcity of sunlight, dry eyes, back pain, imposter syndrome, anxiety, and depression is not what you want as a side effect of being a programmer. I want to share some of my tips to have a beautiful weekend.&lt;/p&gt;

&lt;p&gt;Most probably you are reading this post because you also want to make your weekends meaningful and memorable. Of course, having a meaningful and productive weekend is a subjective thing for different people of different age groups. For some, it might be getting a travel experience or reading a book or watching a movie or working on a side hustle, or just doing nothing. But for some, it might be having family time as well.&lt;/p&gt;

&lt;p&gt;No matter in what stage of life you are now, you should try to have a wonderful weekend. Just like everything in life, it doesn't happen without taking any action. To take an action, you need to take a break for some time from your career and retrospect your life as a whole and brainstorm what you want out of your life.&lt;/p&gt;

&lt;p&gt;The hack is to allocate one weekend for yourself. Think about what you want to do in your life. Think about if life is going in the direction you wanted or not. Think about what matters most to you at the current stage of your life. Is it a relationship? Is it traveling? Is it acquiring knowledge? Is it working on your hobby project? Is it cooking?&lt;/p&gt;

&lt;p&gt;Once you have that idea in mind, the next step is to make an actionable plan that could be carried out in 1, 2, 3, and 5 days. Of course! They are Fibonacci numbers. I am picking those because they are also used for task estimations. After picking the task and weights, use google calendar or something similar to mark dates. Execute your weekends and leaves for those plans. And that's all. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-is-the-advantage-of-doing-this"&gt;
  &lt;/a&gt;
  So what is the advantage of doing this?
&lt;/h2&gt;

&lt;p&gt;Since the weekends are short and come after a long tiring week, sometimes we don't have any energy left to plan our weekends. Another advantage is that if we plan ahead, it would be easier to make group plans.&lt;/p&gt;

&lt;p&gt;Depending on the current situation of the pandemic in the place you are living, please follow the safety precautions too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-are-a-few-things-you-can-try-if-you-have-nothing-to-do-this-weekend"&gt;
  &lt;/a&gt;
  Here are a few things you can try if you have nothing to do this weekend:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0. Explore a park you have never been to before
1. Pull a harmless prank on one of your friends
2. Start a collection
3. Go for a run
4. Take your dog on a walk
5. Write a note of appreciation to someone
6. Learn woodworking
7. Do something you used to do as a kid
8. Create and follow a savings plan
9. Learn how to use a french press
10. Organize a bookshelf
11. Improve your touch typing
12. Volunteer at your local food bank
13. Learn how to use a french press
14. Learn how to make an Alexa skill
15. Try a food you don't like
16. Organize a bookshelf
17. Study a foreign language
18. Surprise your significant other with something considerate
19. Go for a walk
20. Learn Kotlin
21. Learn how to play a new sport
22. Go to a concert with some friends
23. Create a compost pile
24. Wash your car
25. Learn GraphQL
26. Volunteer and help out at a senior center
27. Go on a fishing trip with some friends
28. Draw and color a Mandala
29. Clean out your refrigerator
30. Go for a run
31. Find a DIY to do
32. Volunteer at your local food pantry
33. Start a garden
34. Look at your finances and find one way to save money
35. Hold a yard sale
36. Go see a Broadway production
37. Meditate for five minutes
38. Make a to-do list for your week
39. Start a band
40. Start a daily journal
41. Go swimming with a friend
42. Take your dog on a walk
43. Learn Javascript
44. Write a song
45. Give your pet ten minutes of focused attention
46. Have a jam session with your friends
47. Learn calligraphy
48. Memorize a favorite quote or poem
49. Organize a cluttered drawer
50. Learn a new recipe
51. Go for a walk
52. Volunteer at your local food pantry
53. Match your storage containers with their lids
54. Think of a new business idea
55. Plan a trip to another country
56. Read a formal research paper on an interesting subject
57. Create a compost pile
58. Start a book you've never gotten around to reading
59. Start a garden
60. Bake pastries for you and your neighbor
61. Go stargazing
62. Have a jam session with your friends
63. Start a book you've never gotten around to reading
64. Think of a new business idea
65. Learn how to make a website
66. Take a nap
67. Organize a bookshelf
68. Watch a Khan Academy lecture on a subject of your choosing
69. Look at your finances and find one way to save money
70. Pick up litter around your favorite park
71. Take a bubble bath
72. Text a friend you haven't talked to in a long time
73. Cook something together with someone
74. Plant a tree
75. Learn to greet someone in a new language
76. Clean out your car
77. Visit a nearby museum
78. Hold a video game tournament with some friends
79. Do something nice for someone you care about
80. Take your dog on a walk
81. Learn how to use a french press
82. Volunteer and help out at a senior center
83. Pull a harmless prank on one of your friends
84. Create a cookbook with your favorite recipes
85. Make tie-dye shirts
86. Explore the nightlife of your city
87. Learn calligraphy
88. Learn to greet someone in a new language
89. Take a nap
90. Make a simple musical instrument
91. Make a scrapbook with pictures of your favorite memories
92. Make a bucket list
93. Draw something interesting
94. Write a list of things you are grateful for
95. Surprise your significant other with something considerate
96. Bake something you've never tried before
97. Pot some plants and put them around your house
98. Do something you used to do as a kid
99. Make a budget
100. Go to a concert with local artists with some friends
101. Write a short story
102. Take a bubble bath
103. Catch up with a friend over a lunch date
104. Cook something together with someone
105. Mow your neighbor's lawn
106. Go on a fishing trip with some friends
107. Listen to a new music genre
108. Write a thank you letter to an influential person in your life
109. Learn about the Golden Ratio
110. Back up important computer files
111. Play a video game
112. Start a daily journal
113. Learn how to write in shorthand
114. Learn how to use an Arduino
115. Start a blog for something you're passionate about
116. Go for a walk
117. Create a personal website
118. Visit a nearby museum
119. Learn Kotlin
120. Go for a run
121. Find a DIY to do
122. Create a personal website
123. Surprise your significant other with something considerate
124. Plant a tree
125. Go see a movie in theaters with a few friends
126. Learn Express.js
127. Plan a trip to another country
128. Prepare a 72-hour kit
129. Play a game of tennis with a friend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me know how you make your weekends meaningful. Have a wonderful weekend!! 🍻&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>career</category>
    </item>
  </channel>
</rss>
