<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Scrum: The Art of Doing Twice the Work in Half the Time by Jeff Sutherland</title>
      <author>Sandor Dargo</author>
      <pubDate>Sat, 17 Jul 2021 18:18:32 +0000</pubDate>
      <link>https://dev.to/sandordargo/scrum-the-art-of-doing-twice-the-work-in-half-the-time-by-jeff-sutherland-2073</link>
      <guid>https://dev.to/sandordargo/scrum-the-art-of-doing-twice-the-work-in-half-the-time-by-jeff-sutherland-2073</guid>
      <description>&lt;p&gt;I recently read &lt;a href="https://devreads.sandordargo.com/clean-agile-by-uncle-bob/"&gt;Clean Agile by Uncle Bob&lt;/a&gt; and probably that's why my Kindle recommended me to read &lt;a href="https://amzn.to/3bqM0uK"&gt;Scrum: The Art of Doing Twice the Work in Half the Time&lt;/a&gt; on Agile by another founder of &lt;a href="https://agilemanifesto.org/"&gt;the Agile Manifesto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Well, if there is one person who is more equal among the 17 founders, maybe it's &lt;a href="https://twitter.com/jeffsutherland"&gt;Jeff Sutherland&lt;/a&gt;. At least in regards to Scrum. He clearly considers it the best way of doing things - if done right.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deliver-more-with-less"&gt;
  &lt;/a&gt;
  Deliver more with less
&lt;/h2&gt;

&lt;p&gt;He brings examples to support his points. Not one or two but many.&lt;/p&gt;

&lt;p&gt;The most fascinating one is probably the one of the FBI. The Federal Bureau of Investigation had been using an ancient computer system. Maybe it'd be better to say system, without "computer". They had most of their reports on paper, but anyways, they used a gigantic mainframe system that was built in the 80s.&lt;/p&gt;

&lt;p&gt;It was called the Automated Case Support system and often agents avoided using it as it was so cumbersome and slow. Many claim that even 9/11 could have been prevented with a modern system. In any case, by 2001 a new system called the Virtual Case File system was under development.&lt;/p&gt;

&lt;p&gt;But it was a disaster. The project ran late. It was budgeted for $100 million, then when the project was killed in 2005 they had already spent $170 million.&lt;/p&gt;

&lt;p&gt;A new project was announced, Sentinel for $451 million and was promised to be fully operational by 2009.&lt;/p&gt;

&lt;p&gt;In 2010 already $405 million was spent, but only half of the project was developed and independent analysts estimated an additional 6 to 8 years of development and at least $350 million.&lt;/p&gt;

&lt;p&gt;That's the point when agile got involved and the new project lead promised a delivery for the fall of 2011 with an ~80% staff reduction and with the remaining budget.&lt;/p&gt;

&lt;p&gt;The project got late, but finally, Sentinel was turned on in July 2012 that's years before the previous estimation with much fewer people and money.&lt;/p&gt;

&lt;p&gt;Those who were responsible to turn the project around consider the usage of the agile methodology a game-changer. &lt;/p&gt;

&lt;p&gt;Not relying on fixed ways of working, but constantly trying new things to eliminate impediments and inefficiencies of the processes made the teams more committed and faster.&lt;/p&gt;

&lt;p&gt;Not relying on made-up yet rigid plans, but having a constantly updated view on the status and always taking the tasks that would bring the most value added the feeling of success and predictability. &lt;/p&gt;

&lt;p&gt;It let the project go even faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem-of-gantt-charts"&gt;
  &lt;/a&gt;
  The problem of Gantt charts
&lt;/h2&gt;

&lt;p&gt;Who hasn't see &lt;a href="https://en.wikipedia.org/wiki/Gantt_chart"&gt;Gantt charts&lt;/a&gt;? You know it's the popular chart diagram showing tasks displayed against time.  &lt;/p&gt;

&lt;p&gt;It was designed during the beginning of 1910s by a person called Henry Gantt and it was meant to represent plans for systematic routine operations. &lt;/p&gt;

&lt;p&gt;One of its first major use was in the First World War by the US Army. World War I doesn't have the reputation of an organizational success story, yet we use this tool in modern project management shamelessly.&lt;/p&gt;

&lt;p&gt;And do you know what's the main characteristic of these charts? They lie. They always do. The plans look good, but they always fall apart almost immediately. Reality is not taken into account and at the first delay, at the first tiniest change it loses its relevance and it has to be redone. According to Sutherland, there used to be people whose job consisted of nothing more than preparing these charts and keep them up to date.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ooda-loop"&gt;
  &lt;/a&gt;
  The OODA loop
&lt;/h2&gt;

&lt;p&gt;Instead, Scrum is not about creating schedules in advance that cannot be hold. It's about adapting to a constantly changing environment.&lt;/p&gt;

&lt;p&gt;This need and the presented principles of adaption were extremely important at the Vietnam War where the author was a fighter pilot. &lt;/p&gt;

&lt;p&gt;At the US Air Force, he got a training that helped him (and many others) to never lose his cool. The four actions to follow was&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Observe&lt;/li&gt;
&lt;li&gt;Orient&lt;/li&gt;
&lt;li&gt;Decide&lt;/li&gt;
&lt;li&gt;Act&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's also called the &lt;a href="https://en.wikipedia.org/wiki/OODA_loop"&gt;OODA loop&lt;/a&gt; which was formalized by Colonel John Boyd.&lt;/p&gt;

&lt;p&gt;Take the 4 actions in loops. It's such an important concept that there is even a street in Alabama named after it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iuATLVE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lnp5icvtrm4xrs6g6mj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iuATLVE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lnp5icvtrm4xrs6g6mj.jpg" alt="OODA Loop, Alabama"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, both in warfare and business, you have to &lt;strong&gt;observe&lt;/strong&gt; the situation, you have to understand the big picture. Then you have to &lt;strong&gt;orient&lt;/strong&gt; yourself not just in a way to understand where you are, but you also have to take into account what you're capable of seeing.&lt;/p&gt;

&lt;p&gt;With proper observation and orientation, you can (and have to) quickly &lt;strong&gt;make decisions&lt;/strong&gt; and &lt;strong&gt;act&lt;/strong&gt; upon them and then start the loop over.&lt;/p&gt;

&lt;p&gt;In scrum, the result of such a loop is a working increment that helps the product owner to decide what's the next most important story to act upon, what will bring the most value to the customer.&lt;/p&gt;

&lt;p&gt;There is Gantt chart to follow, there is the constantly changing world around us that we have to observe and orient ourselves within.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#size-matters"&gt;
  &lt;/a&gt;
  Size matters
&lt;/h2&gt;

&lt;p&gt;One more interesting thing I wanted to mention from the book is that size matters and maybe a different way that you'd expect. I say maybe because if you've read the seminal book of Fred Brooks, &lt;a href="https://amzn.to/3uQ4sny"&gt;The Mythical Man-Month&lt;/a&gt; you probably remember that simply adding more people to a project will not make it go faster.&lt;/p&gt;

&lt;p&gt;Team dynamics form more difficult at scale. A lot.&lt;/p&gt;

&lt;p&gt;It seems that this has something to do with our short term memory. As it was shown by studies, an average person can retain about seven items in their short-term memory. That's also the ideal size of the team.&lt;/p&gt;

&lt;p&gt;You might err by +-2, but if you do, you should do on the negative side. Think about the number of communication channels in a team (n*(n-1)/2), where n is the number of members.&lt;/p&gt;

&lt;p&gt;I never understand when managers form 10+ agile teams. They never work, people usually don't even know who the others are (especially in remote teams), what they do, why they are there. If you have such a team, it will naturally break down into smaller entities, but it's not something positive either.&lt;/p&gt;

&lt;p&gt;Avoid it by forming small teams.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The end of the book could have been left out. No matter which side you are, you shouldn't involve politics in professional books I think and I say that as someone who was actively involved in politics. You have to be able to draw some borders. &lt;/p&gt;

&lt;p&gt;Apart from that, I think &lt;a href="https://amzn.to/3bqM0uK"&gt;it's an inspiring book&lt;/a&gt; with many real-life examples and pieces of advice. Some I'll follow, like the OODA principle and some I'd be happy if managers would follow such as the number of people on a team.&lt;/p&gt;

&lt;p&gt;And if you've never seen a successful agile project (like many of us), then at least you'll have a few references.&lt;/p&gt;

</description>
      <category>books</category>
      <category>watercooler</category>
      <category>agile</category>
      <category>projectmanagement</category>
    </item>
    <item>
      <title>Learnings from Javascript 30 - Building a JS Drum Kit</title>
      <author>Yaman Sharma</author>
      <pubDate>Sat, 17 Jul 2021 18:18:30 +0000</pubDate>
      <link>https://dev.to/yaman27/learnings-from-javascript-30-building-a-js-drum-kit-40dl</link>
      <guid>https://dev.to/yaman27/learnings-from-javascript-30-building-a-js-drum-kit-40dl</guid>
      <description>&lt;p&gt;This is the first post of the Learnings from Javascript30 Series where we will be covering what we learned from each day of Javascript30, a series by Wesbos.&lt;/p&gt;

&lt;p&gt;In the first lesson of Javascript30, We build a drum kit where user can create their own tunes by clicking alphabetic keys. Get the full Source Code &lt;a href="https://github.com/YyamanSharma/Javascript30/tree/master/01%20-%20JavaScript%20Drum%20Kit"&gt;here&lt;/a&gt; on my &lt;a href="https://github.com/YyamanSharma"&gt;Github&lt;/a&gt; Repo. &lt;/p&gt;

&lt;p&gt;The learnings from the project :-&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-datakey-attributes"&gt;
  &lt;/a&gt;
  1. Data-Key Attributes:
&lt;/h4&gt;

&lt;p&gt;data-* attributes allows us to store extra information on html elements. So, if there's a attribute on an HTML element which starts with data- , it's called a data-attribute.&lt;/p&gt;

&lt;p&gt;e.g. data-key=65 is a data-attribute for the below element&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MqB8od09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afl7obuko43szr7jzzji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MqB8od09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afl7obuko43szr7jzzji.png" alt="Data-Key Attribute"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can get the value of data attribute by using getAttribute() or can read/write using dataset property.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OYs-r-c4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o444pntxnti77lxbvo8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OYs-r-c4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o444pntxnti77lxbvo8.png" alt="Accessing data-key attribute"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-audio-element"&gt;
  &lt;/a&gt;
  2. Audio Element:
&lt;/h4&gt;

&lt;p&gt;The audio element is used to add audio content in html pages.&lt;br&gt;
It can take multiple attributes but the most common and necessary one is the src attribute.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XaHTT_6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biebw92p16n5rr2wvpuy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XaHTT_6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biebw92p16n5rr2wvpuy.png" alt="Audio Element"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can even provide multiple source attributes so that if first one doesn't load, it can fall back to the others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--63IMWlEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb43er1p2t1mreevrzi8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--63IMWlEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb43er1p2t1mreevrzi8.png" alt="Audio Element with multiple src"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Various methods associated with audio are play(), pause() etc and properties like muted, loop, currentTime etc which gives us more control over the audio element.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-transitionend-event"&gt;
  &lt;/a&gt;
  3. TransitionEnd Event
&lt;/h4&gt;

&lt;p&gt;The transitionend event is fired when a CSS transition is completed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yG-h08qr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1mh67meulnymjifaw09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yG-h08qr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1mh67meulnymjifaw09.png" alt="transitionend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our project, we wanted to remove the styling of the key once the css transform transition has ended. Hence we added the event listener on all the keys and checks if transform has occured. If yes, remove the styling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PnLpSjCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qomi6d1rlbh37pri3yfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PnLpSjCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qomi6d1rlbh37pri3yfj.png" alt="remove styling on transitionend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many other events like transitionstart, tranistioncancel etc which can be useful while working with animations.&lt;/p&gt;

&lt;p&gt;Javascript30 is a great learning series for a novice as well as an experienced developer because you will be learning a lot of stuffs which is either not known to you or can be helpful to fill the learning gaps.&lt;/p&gt;

&lt;p&gt;Hope you liked the post and learned something along the way! 😃&lt;/p&gt;

&lt;p&gt;✋ Hey! Before you go 🏃‍&lt;br&gt;
If you enjoyed this article, You can also follow me on&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/yamansharma27/"&gt;LinkedIN&lt;/a&gt; | &lt;a href="https://dev.to/yaman27"&gt;Dev.to&lt;/a&gt; | &lt;a href="https://github.com/YyamanSharma"&gt;Github&lt;/a&gt; | &lt;a href="https://twitter.com/YyamanSharma"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next blog, we will cover the learnings from second day of Javascript30, so stay tuned! ✨&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>javascript30</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>manage the large code</title>
      <author>Palash Gupta</author>
      <pubDate>Sat, 17 Jul 2021 17:45:47 +0000</pubDate>
      <link>https://dev.to/palashgdev/manage-the-large-code-4705</link>
      <guid>https://dev.to/palashgdev/manage-the-large-code-4705</guid>
      <description>&lt;p&gt;When we are working on project there are some code which kept on re-using.&lt;/p&gt;

&lt;p&gt;So we make a function out of it. let's say we want to convert a number into the currency&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numberWithCurrencyAndComma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-IN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;currencyDisplay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;symbol&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;minimumFractionDigits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;currency&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and generally, with this, we try to keep this function in the lib/utils so we can import and use this function whenever we want&lt;/p&gt;

&lt;p&gt;that's how the beauty of the pure function 😍&lt;/p&gt;

&lt;p&gt;but let's say there is a another project and we want to get the same result then sharing the code would be the better approach as a module which &lt;a href="https://rushjs.io/"&gt;rushjs&lt;/a&gt; helps managing the code better&lt;/p&gt;

&lt;p&gt;so let's try our hands dirty&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @microsoft/rushjs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir rush
cd rush
rush init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will configure the basic intial setup for our monorepo config&lt;/p&gt;

&lt;p&gt;i am using &lt;a href="https://pnpm.io/"&gt;pnpm&lt;/a&gt; (verify with this with rush.json) so start setting up different projects&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir apps
yarn create react-app my-app --template typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and add this project to rush by adding to the rush.json under projects&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"packageName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my-app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"projectFolder"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"apps/my-app"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then under the project root run this commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rush update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this will link all the projects to the rush and install all the dependencies&lt;/p&gt;

&lt;p&gt;now let's make the sharable code to this project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir utils
cd utils
npx tsdx create lib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this will prompt you to choose &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;basic&lt;/li&gt;
&lt;li&gt;react&lt;/li&gt;
&lt;li&gt;react-with-storybook&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;let's choose basic this will configure the basic boilerplate.&lt;/p&gt;

&lt;p&gt;and add this project to the &lt;code&gt;rush.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"packageName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@utils/lib"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"projectFolder"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"utils/lib"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now try to run this command one more time&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rush update --purge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Note: if there is an permission issue try to run this command with sudo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now it's the time link the package to our own react app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rush add -p @utils/lib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now you can import the function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;numberWithCurrencyAndComma&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@utils/lib&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This how we manage project with single one manager &lt;br&gt;
let me know down in the comments about your thoughts 😄&lt;/p&gt;

&lt;p&gt;Here is link for the sample repo &lt;code&gt;https://github.com/palashgdev/rushjs&lt;/code&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>node</category>
      <category>git</category>
    </item>
    <item>
      <title>Best Software Download Websites For PC</title>
      <author>Brand Soft Tech</author>
      <pubDate>Sat, 17 Jul 2021 17:26:45 +0000</pubDate>
      <link>https://dev.to/brandsofttech/best-software-download-websites-for-pc-5666</link>
      <guid>https://dev.to/brandsofttech/best-software-download-websites-for-pc-5666</guid>
      <description>&lt;p&gt;Mac users Looking to download their favorite free software applications often have a difficult time locating the best software download websites on the web. With millions of websites offering free downloads for everything from video games and music to special computer software, it can be quite difficult to decide which are the best downloads &lt;a href="https://notresponding.us/textra-desktop/"&gt;this website&lt;/a&gt;. In fact, you may find that your preference of free software is limited to a few specific types of downloads, or you may not even be interested in downloading any software at all.&lt;/p&gt;

&lt;p&gt;If you're a beginner with computers, the best software download websites will offer plenty of instructions and tips for new users. These tutorials are very helpful because they provide a step-by-step guide on how to download free softwares with specific end-user requirements. &lt;/p&gt;

&lt;p&gt;For example, some sites may only offer free versions of Office for Mac, while others provide several different versions of the popular word processing application. Some sites may even provide demonstrations on how to perform a specific task using a particular program. The tutorials also give valuable information on how to choose a compatible operating system.&lt;/p&gt;

&lt;p&gt;As an advanced user, however, you have more control over what software you want to download. For example, if you don't know much about computers at all, you'll want to opt for one of the best software download websites that only features tutorials and offers basic technical support. &lt;/p&gt;

&lt;p&gt;Some sites offer tutorials on installing and running different computer programs, but they don't provide detailed information on how to install softwares &lt;a href="https://pcsoftguru.blogspot.com/"&gt;&lt;/a&gt;&lt;a href="https://pcsoftguru.blogspot.com/"&gt;https://pcsoftguru.blogspot.com/&lt;/a&gt;. On the other hand, some sites have detailed step-by-step instructional manuals on how to use a particular piece of software. But apart from this basic feature, many sites offer free software for downloading Mac programs.&lt;/p&gt;

&lt;p&gt;When you need a specific software program but can't seem to find it among the offerings by the available free downloads, you can visit site offering paid downloads. It pays to be careful about these offers though, since most of them demand that you register or join their membership before you are allowed to download. &lt;/p&gt;

&lt;p&gt;Aside from giving you access to their database of software programs, these websites also offer added benefits. For instance, some offer free updates of their database of downloads. There are also some which allow members to post links and CDs that contain demo copies of their favorite softwares.&lt;/p&gt;

&lt;p&gt;If your computer is not yet updated to the latest version of windows 10, you may still want to download software from these websites. Although it takes longer to receive updates than the regular program updates via the internet, the downloading time would still be faster than what you experience while using the regular method. &lt;/p&gt;

&lt;p&gt;Windows Software Downloads&lt;/p&gt;

&lt;p&gt;Windows software downloads are a great way of getting hold of some of the best software programs for your Mac, and no matter what operating system you are using, you can download these files. Whether you want to download games, music, videos, or applications, you can visit any of these websites and start enjoying them within seconds.&lt;/p&gt;

&lt;p&gt;However, even if you have already obtained your software, there are chances that it won't work on your mac or android device . It is quite possible that the latest software will require an updated version in order to function properly on your mac or your android mobile. To make sure that your downloads work perfectly on all of your devices, you should join one of the many download crew websites that are available on the internet.&lt;/p&gt;

&lt;p&gt;Download Free MAC Software for Windows&lt;/p&gt;

&lt;p&gt;You can find the best websites that offer download free windows software by doing a simple search on your favourite search engine. Simply type in the search term "download free MAC OS X software for windows" and you will be able to see a long list of links. Among these, the two that stand out the most are the iTunes Store and the android apps gallery. These two websites have the largest number of MAC apps available for download free of charge. Not only that, they also offer a large collection of popular android apps.&lt;/p&gt;

&lt;p&gt;Another thing that you should do if you are looking to download free software is to register. Some softwares simply don't allow users to register without purchasing the product first. The more popular software download websites have different ways of assessing your registration. &lt;/p&gt;

&lt;p&gt;Final Words&lt;/p&gt;

&lt;p&gt;Some may ask you for a one-time fee, while others offer a membership option that allows users to become members for a longer period of time. If you are planning to use the software on a regular basis, it would be best if you get the long-term membership plan. This will allow you to update your downloads whenever there is a new version available in the market.&lt;/p&gt;

</description>
      <category>softwaredownloadwebsites</category>
      <category>softwaredownload</category>
    </item>
    <item>
      <title>How dev.to (occasionally) rubs me up the wrong way</title>
      <author>Pavel Morava</author>
      <pubDate>Sat, 17 Jul 2021 17:22:46 +0000</pubDate>
      <link>https://dev.to/hanpari/how-dev-to-occasionally-rubs-me-up-the-wrong-way-97c</link>
      <guid>https://dev.to/hanpari/how-dev-to-occasionally-rubs-me-up-the-wrong-way-97c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#imposters-syndrome"&gt;
  &lt;/a&gt;
  Imposter's syndrome
&lt;/h2&gt;

&lt;p&gt;Recently, I've read several articles dealing with imposter syndrome. Full of optimism and reassurance, the papers try hard to soothe the irritated consciousness of poor souls that deemed themselves unworthy.&lt;/p&gt;

&lt;p&gt;People often need a gentle maternal caress, encouraging them to continue on the mournful journey through challenges and obstacles. Still, these motivational speeches often result in boosted egos of certain authors who do not hesitate to bring authoritative advice despite the minor issue of knowing nothing substantial.&lt;/p&gt;

&lt;p&gt;For instance, one of them has posted a mind-blowing list of how to learn Python in one week. If I were a beginner, I would greatly appreciate it since one week of my life is a reasonable price to pay. Unfortunately, after dabbling with Python for seven years, eight months, and 14 days (yes, I know the time span exactly because I can deduce it from my checkio account), I was rather enraged that nobody had informed me that Python was that easy.&lt;/p&gt;

&lt;p&gt;Trust me; I would rather have this author suffering from the imposter syndrome rather than sharing such wisdom here (or anywhere else). It feels like a blatant scam to me; I saw real-life newbies struggle with programming. One week is often not enough to run their first hello world, much less conquer the vast land of Python fundamentals.&lt;/p&gt;

&lt;p&gt;One girl whom I guided online failed even in downloading and installing Python under Windows. Which, by the way, brings me to another bullet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programming-language-recommendation-for-beginners"&gt;
  &lt;/a&gt;
  Programming language recommendation for beginners
&lt;/h2&gt;

&lt;p&gt;Several times, I've encountered programmers, infatuated with their language of choice (sometimes, I even suspect them that the language of their choice is the only programming language they know) who do not shy away from recommending languages like C, C++, C#, Java, or JavaScript to beginners.&lt;/p&gt;

&lt;p&gt;There are several excellent reasons why not to do that. As I said before, many beginners do not manage basic things (considered commonplace by a slightly advanced IT student), so pushing them into gory details of hardware (C, C++), industry OOP (Java, C#), or sloppily designed (JavaScript) languages borders with a criminal offense.&lt;/p&gt;

&lt;p&gt;Even the arguments provided by their proponents feel otherworldly. Learn C or C++ because they are lightning-fast. I beg your pardon? Similarly, why not teach driving F1 racing cars to teenagers attempting to get their driving licenses? It would make sense because F1 racing cars trump the ordinary, slow, and safe hatchbacks, don't they?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vs-code-extensions-and-themes"&gt;
  &lt;/a&gt;
  VS Code extensions and themes
&lt;/h2&gt;

&lt;p&gt;The final bullet deals with the irritating, but a considerably less dangerous avalanche of articles, tirelessly repeating the same stuff over and over again.&lt;/p&gt;

&lt;p&gt;I would not mind, but the majority of these extensions, praised by their authors, are the first ones that appear as soon as one opens the extension sidebar in VS Code. Am I really the only one who bothers to check this very sidebar every now and then?&lt;/p&gt;

&lt;p&gt;But not only that, their authors, instead of naming these articles timidly like THE WELL KNOWN EXTENSIONS I USE AND YOU ALL PROBABLY KNOW, advertise them like THE EXTENSIONS YOU HAVE NEVER HEARD OF. Preposterous!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-by-writing"&gt;
  &lt;/a&gt;
  Learning by writing
&lt;/h2&gt;

&lt;p&gt;Ending my rant here, I would like to remind all online writers that there is nothing wrong with enforcing their knowledge and skills by writing articles.&lt;/p&gt;

&lt;p&gt;Even tens of thousands of write-ups are bearable, even if they bring nothing new to the table. I would suggest reconsidering the way of how to present them to the online audience.&lt;/p&gt;

&lt;p&gt;The title I SOMEHOW MANAGED TO IMPLEMENT THE SUPER SORT AND I LOVE TO HAVE FEEDBACK is more honest and less misleading than HOW TO WRITE THE SUPER SORT, especially if the super sort threatens to blow up at the first run.&lt;/p&gt;

&lt;p&gt;I may be spoiled by the time spent on checkio.org, where the most common thing was browsing and commenting on other people's code (I have not been an active member for several years), but what else are we supposed to do on the platform, mainly visited by developers?&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>rant</category>
    </item>
    <item>
      <title>What are Cookies?</title>
      <author>Aman Chourasia</author>
      <pubDate>Sat, 17 Jul 2021 16:44:23 +0000</pubDate>
      <link>https://dev.to/amanchourasia/what-are-cookies-4064</link>
      <guid>https://dev.to/amanchourasia/what-are-cookies-4064</guid>
      <description>&lt;p&gt;'&lt;strong&gt;What are Cookies?&lt;/strong&gt;'- this question has become ubiquitous ever since GDPR came into effect.&lt;/p&gt;

&lt;p&gt;Cookies have been of great importance in the tech industry since the advent of the digital world. However, now the scenario is changing and the reliance upon cookie-based information is about to fade, as Google’s decision to phase-out cookies will take effect in less than a year.&lt;/p&gt;

&lt;p&gt;But, before publishers start to look for other solutions, it is equally important for them to understand how cookies have been functioning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-cookies"&gt;
  &lt;/a&gt;
  What are Cookies?
&lt;/h2&gt;

&lt;p&gt;Cookies are small text files sent from the website to the person’s terminal (usually the browser), where they are stored before being transmitted again on the same website visited by the same user. &lt;/p&gt;

&lt;p&gt;A cookie cannot retrieve any other data from the user’s hard drive nor pass on computer viruses or capture email addresses. Each single cookie is unique to the user's web browser. &lt;/p&gt;

&lt;p&gt;Some of the cookies’ functions can be transferred to other technologies. In this document the term 'cookie' refers to both cookies, as such, as well as all similar technologies.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://www.amanchourasia.in/2021/07/what-are-cookies.html"&gt;What are Cookies? Different Types of Web Cookies&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Read More:&lt;/em&gt; &lt;a href="https://www.amanchourasia.in/2021/07/what-are-cookies.html"&gt;https://www.amanchourasia.in/2021/07/what-are-cookies.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>php</category>
      <category>computerscience</category>
      <category>learning</category>
    </item>
    <item>
      <title>5 ultimate resources for git #1</title>
      <author>CodeOzz</author>
      <pubDate>Sat, 17 Jul 2021 16:27:42 +0000</pubDate>
      <link>https://dev.to/codeozz/5-ultimate-resources-for-git-1-20al</link>
      <guid>https://dev.to/codeozz/5-ultimate-resources-for-git-1-20al</guid>
      <description>&lt;p&gt;Welcome my friend !&lt;/p&gt;

&lt;p&gt;I will share with you some important resource that will improve your skill in git or teach you about git.&lt;/p&gt;

&lt;p&gt;If you don't know git, it's very important for every developer to control it. At least know the basic !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-git"&gt;
  &lt;/a&gt;
  Basic git 📚
&lt;/h3&gt;

&lt;p&gt;Check the basic command of git with this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rogerdudler.github.io/git-guide/"&gt;https://rogerdudler.github.io/git-guide/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn git very fast with animation, I recommend you this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://learngitbranching.js.org/"&gt;https://learngitbranching.js.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To be honest this is thanks to this that I learn git, if you need only one resource, take this ! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commands-cheatlist-%F0%9F%95%B9"&gt;
  &lt;/a&gt;
  Commands cheatlist 🕹
&lt;/h3&gt;

&lt;p&gt;When you have the basic, you will need to learn a lot of command, be happy with this clean list of common &amp;amp; important git commands !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/arslanbilal/git-cheat-sheet"&gt;https://github.com/arslanbilal/git-cheat-sheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Available in a lot of language !&lt;/p&gt;

&lt;p&gt;For people that use &lt;code&gt;oh-my-zsh&lt;/code&gt;, you can easily use &lt;code&gt;git command alias&lt;/code&gt; that can be very useful &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Cheatsheet"&gt;https://github.com/ohmyzsh/ohmyzsh/wiki/Cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For exemple you can use &lt;code&gt;gcmsg&lt;/code&gt; instead of &lt;code&gt;git commit -m&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-good-and-correct-git-commit-message"&gt;
  &lt;/a&gt;
  Make good and correct git commit message 🎨
&lt;/h3&gt;

&lt;p&gt;It's important to make correct git commit message, if you work in other dev, you should have some &lt;strong&gt;convention name&lt;/strong&gt;, if it's not the case, i &lt;em&gt;recommend&lt;/em&gt; you to read the article bellow and use convention name ASAP !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/i5han3/git-commit-message-convention-that-you-can-follow-1709"&gt;https://dev.to/i5han3/git-commit-message-convention-that-you-can-follow-1709&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>git</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>Discovering JavaScript: The JavaScript Engine &amp; Runtime</title>
      <author>Pawan Bhatt 👨‍💻</author>
      <pubDate>Sat, 17 Jul 2021 16:25:33 +0000</pubDate>
      <link>https://dev.to/bhattpawan/discovering-javascript-the-javascript-engine-runtime-5hia</link>
      <guid>https://dev.to/bhattpawan/discovering-javascript-the-javascript-engine-runtime-5hia</guid>
      <description>&lt;p&gt;Hey fellow developers, so as I started learning JavaScript, I came across some really important topics that every JavaScript developer must know. So in the "Discovering JavaScript" series, I will be covering these &lt;strong&gt;important&lt;/strong&gt; topics. So without any further delay, let's jump right in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-javascript-engine"&gt;
  &lt;/a&gt;
  What is a JavaScript Engine?
&lt;/h2&gt;

&lt;p&gt;JavaScript Engine is nothing but a program that executes JavaScript code. Every browser has its own JavaScript engine. Some of the well known JavaScript engines are V8, SpiderMonkey, Chakra etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components-of-a-javascript-engine"&gt;
  &lt;/a&gt;
  Components of a JavaScript Engine
&lt;/h2&gt;

&lt;p&gt;Every JavaScript Engine has two components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The Call Stack&lt;/strong&gt;: It is the portion of JavaScript Engine where our code is actually executed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The Heap&lt;/strong&gt;: The heap section of JavaScript Engine is a memory pool that stores all the objects which out application needs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a diagram to depict the same:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--drJvIFd9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz2bbtnfcnde5walng6j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drJvIFd9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz2bbtnfcnde5walng6j.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-the-code-compiled-to-machine-code"&gt;
  &lt;/a&gt;
  How is the code compiled to Machine Code?
&lt;/h2&gt;

&lt;p&gt;JavaScript uses &lt;em&gt;Just-in-time-compilation&lt;/em&gt; technique to execute the code which mainly consists of &lt;em&gt;converting all of the code into machine code at once and then executing the code immediately&lt;/em&gt;. &lt;br&gt;
So, it is a hybrid between compilation and interpretation (both the concepts are explained in detail later). For now, just note that in compilation, all the code is converted into machine code at once and is then executed later when needed. However, in interpretation the interpreter converts and executes each line of code simultaneously. Below diagram illustrates the &lt;em&gt;just-in-time&lt;/em&gt; execution procedure:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eIT_Pf3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ov93mydg8dchj07b4unn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eIT_Pf3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ov93mydg8dchj07b4unn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-involved-in-justintimecompilation-of-javascript"&gt;
  &lt;/a&gt;
  Steps involved in 'Just-In-Time-Compilation' of JavaScript
&lt;/h2&gt;

&lt;p&gt;Following are the steps involved in JavaScript's JIT compilation when any piece of JS code executes in JavaScript Engine:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Parsing&lt;/strong&gt;: Parsing means &lt;em&gt;reading the code&lt;/em&gt;. During this process, the code is parsed and converted to a &lt;em&gt;AST(Abstract Syntax Tree)&lt;/em&gt;. This is done by splitting the code into small meaningful pieces and then saving them all in the form of a tree. This is the step where syntactical errors are checked. This AST is later used to generate the machine code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Compilation&lt;/strong&gt;: In this step, the generated AST is compiled to a machine code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Execution&lt;/strong&gt;: The generated machine code is executed immediately.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below figure depicts the process:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K9JF7Z3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysb9tpl4rptxmec9nyp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K9JF7Z3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysb9tpl4rptxmec9nyp9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-what-is-the-difference-between-compilation-and-interpretation"&gt;
  &lt;/a&gt;
  Bonus: What is the difference between Compilation and Interpretation?
&lt;/h2&gt;

&lt;p&gt;Both Compilation and Interpretation convert our source code to machine code, however the way in which they do it differs. So here goes the detailed explanation for the same.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compilation"&gt;
  &lt;/a&gt;
  Compilation:
&lt;/h3&gt;

&lt;p&gt;In compilation, the entire source code is converted into machine code at once, and is written into a file that can be executed by the computer. After the file is created, there is no need of the source code to run the code, the file created after compilation is used for running the code. In case of compilation, the code execution can take place way after the code has been compiled. For instance, when we run any application on our system, the file we run is actually an executable file that is made after compiling the source code required to perform the operation which our application is performing. Also, you don't even know when the file (say the .exe file) was actually compiled. It may have been compiled an year ago but still can be executed after such a long time. The below diagram explains compilation process:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j6s6mDJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp7u558jptnbnemlczpp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j6s6mDJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp7u558jptnbnemlczpp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interpretation"&gt;
  &lt;/a&gt;
  Interpretation:
&lt;/h3&gt;

&lt;p&gt;An Interpreter, works differently as compared to a compiler. Instead of compiling all the code at once, it executes the source code line by line. So that means, we do not have any concept of &lt;em&gt;intermediate file creation&lt;/em&gt; here. Simply put forward, it just takes the source code &lt;em&gt;one-line-at-a-time&lt;/em&gt;, and executes the code i.e., performs the function that the code is suppose to perform. So in interpretation, we will require the source code every time we need to run our code. Following is the diagram of how a interpretation works:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a-BF28Lt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlsl93hx9xahht7dpiqr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a-BF28Lt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlsl93hx9xahht7dpiqr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that's pretty much it about the JavaScript Engine &amp;amp; Runtime. We will cover more such interesting topics in upcoming blogs.&lt;/p&gt;

&lt;p&gt;Stay Safe &amp;amp; Happy Learning 🙌.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JS - Mocking a REST API with JSON Server</title>
      <author>Pablo Veiga</author>
      <pubDate>Sat, 17 Jul 2021 16:19:31 +0000</pubDate>
      <link>https://dev.to/vcpablo/js-mocking-a-rest-api-with-json-server-368</link>
      <guid>https://dev.to/vcpablo/js-mocking-a-rest-api-with-json-server-368</guid>
      <description>&lt;p&gt;Depending on how your team works, you might need to move forward with the front end while the back end is still being structured.&lt;br&gt;
Or perhaps you need speed to create an &lt;a href="https://www.agilealliance.org/glossary/mvp/"&gt;MVP&lt;/a&gt; or a &lt;a href="https://searchcio.techtarget.com/definition/proof-of-concept-POC"&gt;proof of concept&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This means that you probably will receive interface designs from the designer or product manager and will need to implement them using mocked data, while the back end is still not ready.&lt;/p&gt;

&lt;p&gt;When I first started developing web applications, I used to mock data within the components by replicating pieces of HTML or setting variables with mocked arrays or objects according to what the interface required.&lt;/p&gt;

&lt;p&gt;The problem is when you do this, you increase the amount of work needed when the integration time comes because you will need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;remove mocked data from components;&lt;/li&gt;
&lt;li&gt;create the services which connect the front end to the back end;&lt;/li&gt;
&lt;li&gt;consume these services to display real data;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It turns out that this path can be much less painful if you use mock API's.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h3&gt;

&lt;p&gt;In this article I show you how to easily mock a simple REST API using &lt;a href="https://github.com/typicode/json-server"&gt;JSON Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JSON Server is just one option amongst several others that allow you to fake REST APIs to deal with interface prototyping.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#json-server-mock-rest-api"&gt;
  &lt;/a&gt;
  JSON Server - Mock REST API
&lt;/h3&gt;

&lt;p&gt;Let's start with JSON Server. This package allows you to bootstrap a mocked REST API server without much effort.&lt;/p&gt;

&lt;p&gt;Considering you have already created the main structure of your project using &lt;a href="https://www.npmjs.com/"&gt;NPM&lt;/a&gt; or &lt;a href="https://yarnpkg.com/"&gt;Yarn&lt;/a&gt;, install the package to your project using one of the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;// If using NPM
npm &lt;span class="nb"&gt;install &lt;/span&gt;json-server &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;// If using Yarn
yarn add json-server &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you need to follow these three steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="#configure-entry-point"&gt;Configure an entry-point file&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#creating-mocked-data"&gt;Create a JSON file with mocked data&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#creating-mock-api-script"&gt;Add a new script to your &lt;code&gt;package.json&lt;/code&gt; file&lt;/a&gt;;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-configuring-an-entrypoint-file"&gt;
  &lt;/a&gt;
  1. Configuring an entry-point file
&lt;/h4&gt;

&lt;p&gt;JSON Server will act like a simplified &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt; server, so, this is how you create the main file required by it to run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonServer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;json-server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jsonServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jsonServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;db.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;middlewares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jsonServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;jsonServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rewriter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/$1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;middlewares&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JSON Server is running&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that here, I intend to use the prefix &lt;code&gt;/api&lt;/code&gt; for my requests. You may change it to whatever you like.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-creating-mocked-data"&gt;
  &lt;/a&gt;
  2. Creating mocked data
&lt;/h4&gt;

&lt;p&gt;JSON Server works based on &lt;a href="https://github.com/typicode/lowdb"&gt;Low DB&lt;/a&gt; a &lt;em&gt;"Tiny local JSON database for small projects"&lt;/em&gt;. So you need to configure a &lt;code&gt;db.json&lt;/code&gt; file that will serve the data.&lt;/p&gt;

&lt;p&gt;Let's suppose I need to list &lt;code&gt;users&lt;/code&gt; and &lt;code&gt;products&lt;/code&gt;, for example. This is how our JSON file will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jon Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"active"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jane Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"active"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bob Taylor"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"active"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"products"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Pizza"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"active"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hamburger"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"active"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Ice Cream"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"active"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is enough for the mock API to be started and for you to make requests right away.&lt;/p&gt;

&lt;p&gt;But first, let's create a new script into the &lt;code&gt;package.json&lt;/code&gt; file so that we don't need to install &lt;code&gt;json-server&lt;/code&gt; globally in your machine.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-creating-the-mock-api-script"&gt;
  &lt;/a&gt;
  3. Creating the mock API script:
&lt;/h4&gt;

&lt;p&gt;Add the following property to the &lt;code&gt;scripts&lt;/code&gt; section of the &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mock:api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node json-server/server&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it. In this implementation, we configured JSON server to bootstrap the mock API using the port 3000 but you might change it in the &lt;code&gt;server.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;This is an example of the results when requesting &lt;code&gt;http://localhost:3000/api/users&lt;/code&gt; directly from the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ell-1yon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmq3q1rleyot0r6r0qeb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ell-1yon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmq3q1rleyot0r6r0qeb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'm using the &lt;a href="https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh"&gt;JSON Viewer extension&lt;/a&gt; to display the data properly formatted and coloured as seen above.&lt;/em&gt;  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-json-server-basic-operations"&gt;
  &lt;/a&gt;
  4. JSON Server basic operations
&lt;/h4&gt;

&lt;p&gt;JSON Server will let you implement front-end services that make real API calls and let them ready to wait for the real back-end API because it works exactly like a REST API.&lt;/p&gt;

&lt;p&gt;This also means you can use the most common verbs to perform actions with your data: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GET&lt;/code&gt;: used to retrieve full arrays, objects by id or even filter by certain attributes:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET: /users =&amp;gt; retrieves all users

GET: /users/1 =&amp;gt; retrieve the user with id = 1

GET: /users?_sort=age&amp;amp;_order=desc =&amp;gt; retrieve users sorted by age descending

GET: /users?age_gte=10 =&amp;gt; retrieve users whose ages are greater than 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;POST&lt;/code&gt; - used to create new values. Make a &lt;code&gt;POST&lt;/code&gt; request using the URL of the resource you want to add and pass the value using the body.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This will add a new product to the "products" array

URL: `/api/products`
BODY:
{
  "id": 4,
  "name": "Chocolate",
  "price": 6,
  "active": true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;PUT&lt;/code&gt; - used to update a resource. Make a &lt;code&gt;PUT&lt;/code&gt; request passing the id of the resource you want to update as a query param and the value to be set using the body.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This will update the user with the id = 2

URL: `/api/users/2`
BODY:
{
 "id": 2,
 "active": false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;DELETE&lt;/code&gt; - used to remove a resource. Make a &lt;code&gt;DELETE&lt;/code&gt; request passing the id of the resource you want to be deleted as a query param.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;This will remove the user with id = 3

DELETE: `/api/users/3`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5-json-server-advanced-operations"&gt;
  &lt;/a&gt;
  5. JSON Server advanced operations
&lt;/h4&gt;

&lt;p&gt;As JSON server works just like Express JS, you can also extend it to perform more advanced operations, map different URL's to specific data in the &lt;code&gt;db.json&lt;/code&gt; file or even implement &lt;em&gt;middlewares&lt;/em&gt; and _ parsers_. &lt;/p&gt;

&lt;p&gt;I'm not going to dive deep into all of the possibilities because they are endless. It's worth taking a look at the full documentation in their &lt;a href="https://github.com/typicode/json-server"&gt;Github&lt;/a&gt; to take advantage of its full power.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;You don't need to install and configure databases and back-end API anymore when starting a new front-end project. Sometimes all you need is some sample data to simulate real scenarios.&lt;/p&gt;

&lt;p&gt;In this article you were introduced to JSON Server, an extraordinary tool that can help you bootstrap a simple (or not so simple) REST API very quickly that will provide support for your next front-end prototyped application.&lt;/p&gt;

&lt;p&gt;You can find a fully-working example in &lt;a href="https://github.com/vcpablo/js-json-server-mock-api"&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you liked it.&lt;br&gt;
Please, share and comment!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image by &lt;a href="https://unsplash.com/@marcojodoin"&gt;Marc-Olivier Jodoin&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>development</category>
      <category>json</category>
      <category>api</category>
    </item>
    <item>
      <title>Refactoring #1: Using ternary and null coalescing operators in PHP</title>
      <author>Geni Jaho</author>
      <pubDate>Sat, 17 Jul 2021 16:13:46 +0000</pubDate>
      <link>https://dev.to/genijaho/refactoring-1-using-ternary-and-null-coalescing-operators-in-php-449f</link>
      <guid>https://dev.to/genijaho/refactoring-1-using-ternary-and-null-coalescing-operators-in-php-449f</guid>
      <description>&lt;p&gt;Take a look at this little method below. Three issues come to mind the first time you see it. Unnecessary calls to &lt;code&gt;array_key_exists&lt;/code&gt;, long chaining of &lt;code&gt;if&lt;/code&gt; conditions, and a redundant nested code. Let's see how it can be improved, without changing its behavior.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#using-the-null-coalescing-operator"&gt;
  &lt;/a&gt;
  Using the null coalescing operator
&lt;/h2&gt;

&lt;p&gt;The first thing we want to do is get rid of all those calls to &lt;code&gt;array_key_exists&lt;/code&gt;. The reason for that is that it can be written much more simply. The null coalescing operator is meant for exactly the same purpose we have here, to be safe from exceptions of missing array keys.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#using-the-ternary-shorthand-operator"&gt;
  &lt;/a&gt;
  Using the ternary shorthand operator
&lt;/h2&gt;

&lt;p&gt;The code basically wants to retrieve a &lt;code&gt;$cityName&lt;/code&gt; value from the &lt;code&gt;$addressArray&lt;/code&gt;, which has many keys to represent the name of a city. It traverses the array keys one by one until it finds a non-empty value. It can be made shorter, however, by replacing the &lt;code&gt;if&lt;/code&gt; conditions with the ternary operator &lt;code&gt;?:&lt;/code&gt;. The ternary operator will return the left-hand value if it evaluates as &lt;code&gt;true&lt;/code&gt;, otherwise, it will return the right-hand side.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#removing-one-more-unnecessary-condition"&gt;
  &lt;/a&gt;
  Removing one more unnecessary condition
&lt;/h2&gt;

&lt;p&gt;At the end of these empty value checks, the code has one more condition. If the value is still empty, it sets &lt;code&gt;$cityName = 'error'&lt;/code&gt;;. Then, only if this value is not &lt;code&gt;'error'&lt;/code&gt;, it allows the "happy path", which is fetching or creating the city, launching an event, and returning that &lt;code&gt;$city&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now either the programmer wanted to make sure not to proceed with the happy path if they got an empty value, or they wanted to prevent getting a value of &lt;code&gt;'error'&lt;/code&gt; from the &lt;code&gt;$addressArray&lt;/code&gt; itself, which is unlikely. Taking into account how the rest of the code is using this method, it's safe to say that they simply wanted to avoid empty values. In that case, we just check for empty values.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#one-more-nested-code-gotcha"&gt;
  &lt;/a&gt;
  One more nested code gotcha
&lt;/h2&gt;

&lt;p&gt;The code above looks good, but it can look a little bit better. That &lt;code&gt;if&lt;/code&gt; condition is visually pushing the main bulk of code on the right of the screen, although by a very small margin. But what if the main code was longer, and more complex?&lt;/p&gt;

&lt;p&gt;This happens pretty commonly, checking for the right conditions to execute the happy path, and if those conditions aren't met then return an error value. To fix this, you should "exit early", which means you test for the error condition (or exit condition) first. If that condition is met, exit right away, and the rest of the code can run without being nested.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And that's it. These little changes mostly help for making the code more readable, and a little bit shorter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The code used for illustration is taken from the &lt;a href="https://github.com/OpenLitterMap/openlittermap-web"&gt;OpenLitterMap&lt;/a&gt; project. They're doing a great job creating the world's most advanced open database on litter, brands &amp;amp; plastic pollution. The project is open-sourced and would love your contributions, both as users and developers.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>laravel</category>
      <category>refactoring</category>
      <category>php</category>
      <category>webdev</category>
    </item>
    <item>
      <title>11 VS Code Extensions To Increase Your Productivity (2021)</title>
      <author>Jatin Kumar</author>
      <pubDate>Sat, 17 Jul 2021 15:59:34 +0000</pubDate>
      <link>https://dev.to/jatinkrr/11-vs-code-extensions-to-increase-your-productivity-2021-29b1</link>
      <guid>https://dev.to/jatinkrr/11-vs-code-extensions-to-increase-your-productivity-2021-29b1</guid>
      <description>&lt;p&gt;After reading this article you have a good set of extensions to help you in day-to-day coding.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bookmarks"&gt;
  &lt;/a&gt;
  Bookmarks
&lt;/h2&gt;

&lt;p&gt;To help you track snippets or components within your codebase&lt;br&gt;
Bookmarks extension tutorial&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5jtLR3FR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6ecevsemal80pscakvc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5jtLR3FR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6ecevsemal80pscakvc.png" alt="bookmarks tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks"&gt;VS Marketplace Link&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bracket-pair-colorizer-2"&gt;
  &lt;/a&gt;
  Bracket Pair Colorizer 2
&lt;/h2&gt;

&lt;p&gt;To help you track various brackets within the codebase&lt;br&gt;
Bracket Pair Colorizer 2 example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9RfS0opV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in0xt6utdbv2d417flxu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9RfS0opV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in0xt6utdbv2d417flxu.png" alt="bracket pair colorizer 2 tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt;VS Marketplace Link&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#gitlens"&gt;
  &lt;/a&gt;
  GitLens
&lt;/h2&gt;

&lt;p&gt;Supercharge your  Git capabilities built into Visual Studio Code - Visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more&lt;br&gt;
Gitlens extension tutorial&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---un6_v7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay7ud2oi7o703egj6zdt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---un6_v7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay7ud2oi7o703egj6zdt.png" alt="Git lens tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;VS Marketplace Link&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#git-graph"&gt;
  &lt;/a&gt;
  Git Graph
&lt;/h2&gt;

&lt;p&gt;View a Git Graph of your repository, and perform Git actions from the graph.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jbUnaYGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6umfpv6xcbg3spje70yd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jbUnaYGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6umfpv6xcbg3spje70yd.png" alt="Git Graph tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/r/?url=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmhutchie.git-graph"&gt;VS Marketplace Link&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#path-intellisense"&gt;
  &lt;/a&gt;
  Path Intellisense
&lt;/h2&gt;

&lt;p&gt;Visual Studio Code plugin that autocompletes filenames&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4pHu5Uic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4hih40dms9ulk1s58kq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pHu5Uic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4hih40dms9ulk1s58kq.png" alt="path tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/r/?url=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dchristian-kohler.path-intellisense"&gt;VS Marketplace Link&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#color-picker"&gt;
  &lt;/a&gt;
  Color Picker
&lt;/h2&gt;

&lt;p&gt;Helper with GUI to generate color codes such as CSS color &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7N9k1pG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jypylzae2uuvgl5iw808.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7N9k1pG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jypylzae2uuvgl5iw808.png" alt="Color Picker tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/r/?url=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Danseki.vscode-color"&gt;VS Marketplace Link&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#stepsize%C2%A0"&gt;
  &lt;/a&gt;
  Stepsize 
&lt;/h2&gt;

&lt;p&gt;Manage technical debt &amp;amp; prioritize refactoring work, all directly from VSCode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--duS75d2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5twg6vecdjjndue68usr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--duS75d2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5twg6vecdjjndue68usr.png" alt="stepsize tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/r/?url=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DStepsize.stepsize"&gt;VS Marketplace Link&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#auto-close%C2%A0tag"&gt;
  &lt;/a&gt;
  Auto Close Tag
&lt;/h2&gt;

&lt;p&gt;Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1cnlmBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rlcs32ggwph39pqro84.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1cnlmBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rlcs32ggwph39pqro84.png" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Auto tag tutorial 1After typing in the closing bracket of the opening tag, the closing tag will be inserted automatically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_HQ5tFqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cn8ph77mut7s2yhjb9m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_HQ5tFqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cn8ph77mut7s2yhjb9m.png" alt="2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/r/?url=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dformulahendry.auto-close-tag"&gt;VS Marketplace Link&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#vscodeicons"&gt;
  &lt;/a&gt;
  Vscode-icons
&lt;/h2&gt;

&lt;p&gt;Icons for Visual Studio Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Q-38eBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0w0jos9er1ulhovx9ooa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Q-38eBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0w0jos9er1ulhovx9ooa.png" alt="icons tutorial"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/r/?url=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dvscode-icons-team.vscode-icons"&gt;VS Marketplace Link&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#vscodepdf"&gt;
  &lt;/a&gt;
  Vscode-pdf
&lt;/h2&gt;

&lt;p&gt;Display pdf file in VSCode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wpTDAVpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azsylvw1p5hmz306w7va.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wpTDAVpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azsylvw1p5hmz306w7va.png" alt="vscode-pdf tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/r/?url=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dtomoki1207.pdf"&gt;VS Marketplace Link&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#javascript-booster"&gt;
  &lt;/a&gt;
  JavaScript Booster
&lt;/h2&gt;

&lt;p&gt;Boost your productivity with advanced JavaScript/TypeScript refactoring and commands&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NVYPV7Hq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xkc6njdpmo5f85rrmc0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NVYPV7Hq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xkc6njdpmo5f85rrmc0.png" alt="booster tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/r/?url=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dsburg.vscode-javascript-booster"&gt;VS Marketplace Link&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#kite"&gt;
  &lt;/a&gt;
  Kite
&lt;/h2&gt;

&lt;p&gt;AI code completions for all languages, intellisense, code snippets, code signatures, and cursor-following documentation for VS Code. Kite supports .js .jsx .vue .tsx .ts .css .html .less .c .cc .cpp .cs .h .hpp .m .scala .java&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NmcwPcLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cddu185hjp4z5h2jhfks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NmcwPcLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cddu185hjp4z5h2jhfks.png" alt="kite tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/r/?url=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dkiteco.kite"&gt;VS Marketplace Link&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Sign up for the Medium newsletter to get notified about the next blog JavaScript posts and possible future giveaways&lt;/p&gt;

&lt;p&gt;&lt;a href="https://eepurl.com/hD0nTT"&gt;Medium Newsletter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/jatinsfeed"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="//www.linkedin.com/in/jatinkrr"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>programming</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Abstracting with react hooks on LSD</title>
      <author>Pathetic Geek</author>
      <pubDate>Sat, 17 Jul 2021 15:47:05 +0000</pubDate>
      <link>https://dev.to/patheticgeek/abstracting-with-react-hooks-on-lsd-15p</link>
      <guid>https://dev.to/patheticgeek/abstracting-with-react-hooks-on-lsd-15p</guid>
      <description>&lt;h1&gt;
  &lt;a href="#3-the-final-one-raw-usebussinesslogic-endraw-hook"&gt;
  &lt;/a&gt;
  3. The final one, &lt;code&gt;useBussinessLogic&lt;/code&gt; hook
&lt;/h1&gt;

&lt;p&gt;Hooks are free of cost. i.e., you can make them really easily, and the only cost there is, is the cost of abstraction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#31-a-basic-raw-usetodos-endraw-hook"&gt;
  &lt;/a&gt;
  3.1 A basic &lt;code&gt;useTodos&lt;/code&gt; hook
&lt;/h2&gt;

&lt;p&gt;Now our components, they don't always just interact with the local state, most times they will be interacting with state on the server and managing async operations. And that's where the lines get blurry. So how about we put our hands in the magic pocket and try seeing if we have something that will help us?&lt;/p&gt;

&lt;p&gt;Let's take an example of a basic to-do app, you'd be having a list of to-dos calling the APIs for getting it all that fun stuff, so let's extract it in a hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTodosStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we need to change something, we can just change this small function, and it works everywhere as long as it returns the same object. Now we can just use this with one line of code wherever we want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;// other stuff&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#32-mutating-todos"&gt;
  &lt;/a&gt;
  3.2 Mutating to-dos
&lt;/h2&gt;

&lt;p&gt;Now, let's say we want to toggle the state of a to-do. What do we do? We just put or hands in the custom hooks doremon pocket and bring out &lt;code&gt;useToggleTodo&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useToggleTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;todoId&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/todos/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;todoId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/toggle`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggleTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But wait, we also need to update things in our store and oh, what about having multiple useTodos. Do we have a global store or are all instances updated separately? What about race condition? And caching?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#33-doing-it-all-right"&gt;
  &lt;/a&gt;
  3.3 Doing it all right
&lt;/h2&gt;

&lt;p&gt;Remember, our custom hooks can use other hooks too, so let's bring in &lt;a href="https://react-query.tanstack.com/guides/queries"&gt;useQuery&lt;/a&gt; from &lt;a href="https://www.npmjs.com/package/react-query"&gt;react-query&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in our &lt;code&gt;useToggleTodo&lt;/code&gt; we can use the &lt;a href="https://react-query.tanstack.com/guides/mutations"&gt;useMutation&lt;/a&gt; from &lt;code&gt;react-query&lt;/code&gt; so that our to-dos query is re-fetched whenever we toggle a to-do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getToggleTodoById&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todoId&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/todos/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;todoId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/toggle`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useToggleTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getToggleTodoById&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;refetchQueries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look how we moved to using vanilla axios to &lt;code&gt;react-query&lt;/code&gt; in seconds and didn't have to change more than a couple of lines. And now we have these nice hooks for our components to hooks into.&lt;/p&gt;

&lt;p&gt;And my friends, that how we use hooks and manage like a pro (or from what all I know at least). Now you can go show off your new shiny gadgets to your friends &lt;em&gt;if you have any&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>bussinesslogic</category>
      <category>abstraction</category>
      <category>hooks</category>
    </item>
  </channel>
</rss>
