<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>AnitaB.org Open Source profile README on GitHub</title>
      <author>Isabel Costa</author>
      <pubDate>Sun, 03 Oct 2021 16:01:51 +0000</pubDate>
      <link>https://dev.to/isabelcmdcosta/anitab-org-open-source-profile-readme-on-github-3829</link>
      <guid>https://dev.to/isabelcmdcosta/anitab-org-open-source-profile-readme-on-github-3829</guid>
      <description>&lt;p&gt;GitHub &lt;a href="https://twitter.com/github/status/1438276928696463372"&gt;announced&lt;/a&gt; the other day, that Organizations can now have their own README.&lt;/p&gt;

&lt;p&gt;I love this feature! So when I had the chance I created one for &lt;a href="https://github.com/anitab-org"&gt;AnitaB.org Open Source&lt;/a&gt; community.&lt;/p&gt;

&lt;p&gt;One thing I‚Äôve learned from being involved with Open Source is that not all communities work the same way. Each one has its mission, way of working, and contribution processes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Welcoming every type of contribution is one of our core values&lt;/strong&gt;, as is &lt;a href="https://opensource.com/article/21/8/beginner-open-source-community"&gt;being beginner-friendly&lt;/a&gt;. Having a &lt;strong&gt;README allows us to inform contributors of how we operate and how they can help us&lt;/strong&gt;. Now we can show what the community is about right when a contributor finds our organization page on GitHub. &lt;/p&gt;

&lt;p&gt;The first impression we want to pass to newcomers and our community is that they can contribute in multiple ways other than code if they want. So the first draft of our profile README aims to let our contributors know they can join us on &lt;a href="https://anitab-org.zulipchat.com/"&gt;Zulip&lt;/a&gt; and contribute to our community in various ways such as reviewing code, implementing features, testing our apps, reporting bugs, suggesting design improvements, blogging for our publication, etc... &lt;/p&gt;

&lt;p&gt;Here‚Äôs our profile README üéâ which you can check out at &lt;a href="https://github.com/anitab-org"&gt;github.com/anitab-org&lt;/a&gt; (&lt;a href="https://github.com/anitab-org/.github/blob/main/profile/README.md"&gt;source code&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IaT85_7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6svf5abxumfonjkypx3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IaT85_7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6svf5abxumfonjkypx3.png" alt="anitab.org profile readme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have an organization on GitHub and would like to add this feature you can read about it here: &lt;a href="https://github.blog/changelog/2021-09-14-readmes-for-organization-profiles/"&gt;https://github.blog/changelog/2021-09-14-readmes-for-organization-profiles/&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>Don't Use Create React App Until You Know This</title>
      <author>Jordan Burroughs</author>
      <pubDate>Sun, 03 Oct 2021 15:10:36 +0000</pubDate>
      <link>https://dev.to/jburroughs/don-t-use-create-react-app-until-you-know-this-1a2d</link>
      <guid>https://dev.to/jburroughs/don-t-use-create-react-app-until-you-know-this-1a2d</guid>
      <description>&lt;p&gt;The other day a co-worker noticed something interesting about our production code: You could view our original, perfectly formatted code in the browser. At first I was like, "But I built it for production, and therefore it &lt;em&gt;should&lt;/em&gt; be minified and unreadable, right?"&lt;/p&gt;

&lt;p&gt;I always thought &lt;a href="https://create-react-app.dev/"&gt;Create React App&lt;/a&gt; (CRA) handled that for me. Have I been lied to the entire time?&lt;/p&gt;

&lt;p&gt;Source maps.&lt;/p&gt;

&lt;p&gt;Yes, source maps were the reason. So I learned about them and thought it would be nice to shed some light on them so others, like myself, become aware of them and make more informed decisions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-source-maps"&gt;
  &lt;/a&gt;
  What are source maps?
&lt;/h2&gt;

&lt;p&gt;When building React apps with CRA, you are basically using webpack and babel to transpile, minify, and bundle the JavaScript/TypeScript code you wrote for deployment. During this process your files are manipulated in a way that they need a mapping to be put back together in the original form. That's where source maps come into play.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source maps are just JSON files that essentially rebuild what the bundlers and transpilers changed. Their main purpose is to help debug your built, optimized code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It makes sense that if you have a bug and view the stack trace, you want to see &lt;em&gt;your&lt;/em&gt; code and not the gibberish that webpack and babel spit out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-the-browser-show-everything"&gt;
  &lt;/a&gt;
  Why Does The Browser Show Everything?
&lt;/h2&gt;

&lt;p&gt;The environment variable &lt;code&gt;GENERATE_SOURCEMAP=true&lt;/code&gt; by default in CRA. That means once you build, the generated folder there will be extra ".map" files generated. It will look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kLhfDIju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umy47vb64q3o08g0vlhr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kLhfDIju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umy47vb64q3o08g0vlhr.png" alt="Build folder with .map files"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The browser can then use the .map files to reconstruct the original code, and become viewable in browser dev tools.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;GENERATE_SOURCEMAP=false&lt;/code&gt;, the same code would look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--udAavIrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6psrp816kuts4pgkofgi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--udAavIrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6psrp816kuts4pgkofgi.png" alt="Build folder without .map files"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's what the CRA docs say: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EHl-Xhsn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gslwov09z5wao5lk223j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EHl-Xhsn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gslwov09z5wao5lk223j.png" alt="Create React App documentation on GENERATE_SOURCEMAP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-i-generate-the-source-maps"&gt;
  &lt;/a&gt;
  Should I Generate The Source Maps?
&lt;/h2&gt;

&lt;p&gt;In the end, what am I going to do? Leave the source maps in or take them out. &lt;/p&gt;

&lt;p&gt;Personally, I believe it depends on your requirements, but mostly yes. I think CRA has it correct (as in by default, they are generated, &lt;strong&gt;but&lt;/strong&gt; can be overwritten).&lt;/p&gt;

&lt;p&gt;Below I've identified some points about generating source maps to help make your choice: &lt;/p&gt;

&lt;p&gt;For not having them:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A savvy user could see your source code üò¨&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For having them:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;So what if they see your code? What are &lt;em&gt;they&lt;/em&gt; gonna do with it? ü§∑üèΩ‚Äç‚ôÇÔ∏è&lt;/li&gt;
&lt;li&gt;It helps debug in production.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yep, that's basically it. It seems to come down to whether you care if users see your source code and if you want to have the ability to debug in production.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important Note: If you generate source maps, there are going to be extra .map files created. Although, these do **not&lt;/em&gt;* add to the bundle size because these files are only requested by the client when dev tools are open üòè*&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Let me know how you feel about generating source maps for production. Do you disable them, or leave them be?&lt;/p&gt;

&lt;p&gt;Also, if you want to fact check me, I'm all ears to understand more about source maps.&lt;/p&gt;

&lt;p&gt;Check out these resources I used to get learn about source maps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/oyetoket/is-it-safe-to-ship-javascript-source-maps-to-production-34p8"&gt;Dev.to post by Oyetoke Toby (see the comments too)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.html5rocks.com/en/tutorials/developertools/sourcemaps/"&gt;General info about source maps by Ryan Seddon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.sentry.io/platforms/javascript/guides/react/sourcemaps/"&gt;Sentry.io docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#thanks-for-reading-if-you-want-more-tech-tips-software-stuff-and-bussin-blogs-you-can-throw-me-a-follow-on-twitter"&gt;
  &lt;/a&gt;
  Thanks for reading! If you want more tech tips, software stuff, and bussin' blogs, you can throw me a follow on &lt;a href="https://www.twitter.com/JBurroughsTech"&gt;Twitter&lt;/a&gt;üî•ü§òüèΩüê∂
&lt;/h3&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>webpack</category>
      <category>react</category>
    </item>
    <item>
      <title>AWS Lambda powered up by AWS Graviton2</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 03 Oct 2021 14:57:44 +0000</pubDate>
      <link>https://dev.to/awscommunity-asean/aws-lambda-powered-up-by-aws-graviton2-3237</link>
      <guid>https://dev.to/awscommunity-asean/aws-lambda-powered-up-by-aws-graviton2-3237</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; recently announced the launch of &lt;a href="https://aws.amazon.com/ec2/graviton/"&gt;AWS Graviton2 processor&lt;/a&gt; (arm64 architecture) for Lambda functions which would not only make your Lambda function to execute faster but also optimizes the cost for execution. Graviton2 is an AWS built and owned processor.&lt;/p&gt;

&lt;p&gt;You can read more about it from the &lt;a href="https://aws.amazon.com/blogs/aws/aws-lambda-functions-powered-by-aws-graviton2-processor-run-your-functions-on-arm-and-get-up-to-34-better-price-performance/"&gt;announcement blog&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hlJnlKzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FAfDYztWQAIzvNM.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--X0CXygd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1399770499199254532/zn_-38Hw_normal.jpg" alt="Amazon Web Services profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Amazon Web Services
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @awscloud
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Get up to 34% better price performance with AWS Lambda functions &lt;a href="https://twitter.com/hashtag/poweredbyAWS"&gt;#poweredbyAWS&lt;/a&gt; Graviton2 processors. Try it out for your &lt;a href="https://twitter.com/hashtag/serverless"&gt;#serverless&lt;/a&gt; web and mobile backends, &lt;a href="https://twitter.com/hashtag/microservices"&gt;#microservices&lt;/a&gt;, or &lt;a href="https://twitter.com/hashtag/dataprocessing"&gt;#dataprocessing&lt;/a&gt; workloads. Go build. &lt;a href="https://t.co/DhEVaIlfBW"&gt;go.aws/3F6ToZi&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:09 PM - 29 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1443337084786331652" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1443337084786331652" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1443337084786331652" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Lambda functions which are executing with Amazon Linux 2 runtime, now supports two architectures -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;arm64 - 64-bit ARM architecture, for the AWS Graviton2 processor.&lt;/li&gt;
&lt;li&gt;x86_64 ‚Äì 64-bit x86 architecture, for x86-based processors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the existing Lambda functions would be running on &lt;strong&gt;x86_64 architecture&lt;/strong&gt; and this architecture is the default architecture for any new Lambda function. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#key-takeaways-from-the-blog"&gt;
  &lt;/a&gt;
  Key takeaways from the blog
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#graviton2"&gt;Graviton2 (arm64) for Lambda functions.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-arm64"&gt;Setting up Graviton2 (arm64) powered Lambda functions.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#arm64-vs-x86_64"&gt;Performance with arm64 vs x86_64 architecture.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#graviton2-arm64-for-lambda-functions"&gt;
  &lt;/a&gt;
  Graviton2 (arm64) for Lambda functions &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;The Gaviton2 based arm64 architecture makes the computation faster which results in faster execution of the Lambda function and in turn the cost for Lambda is also optimized. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;AWS Lambda functions running on Graviton2, using an Arm-based processor architecture designed by AWS, deliver up to 34% better price performance compared to functions running on x86 processors. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;arm64 architecture&lt;/strong&gt; for Lambda functions is currently available in selected AWS Regions - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;US East (N. Virginia) us-east-1&lt;/li&gt;
&lt;li&gt;US East (Ohio) us-east-2&lt;/li&gt;
&lt;li&gt;US West (Oregon) us-west-2&lt;/li&gt;
&lt;li&gt;Asia Pacific (Mumbai) ap-south-1&lt;/li&gt;
&lt;li&gt;Asia Pacific (Singapore) ap-southeast-1&lt;/li&gt;
&lt;li&gt;Asia Pacific (Sydney) ap-southeast-2&lt;/li&gt;
&lt;li&gt;Asia Pacific (Tokyo) ap-northeast-1&lt;/li&gt;
&lt;li&gt;EU (Frankfurt) eu-central-1&lt;/li&gt;
&lt;li&gt;EU (Ireland) eu-west-1&lt;/li&gt;
&lt;li&gt;EU (London) eu-west-2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The supported runtimes based on Amazon Linux 2 are -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS 12.x and 14.x&lt;/li&gt;
&lt;li&gt;Python 3.8 and 3.9&lt;/li&gt;
&lt;li&gt;Java 8 (&lt;code&gt;java8.al2&lt;/code&gt;) and 11&lt;/li&gt;
&lt;li&gt;.NET Core 3.1&lt;/li&gt;
&lt;li&gt;Ruby 2.7&lt;/li&gt;
&lt;li&gt;Custom runtime (&lt;code&gt;provided.al2&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Graviton2 processor is well suited for Lambda functions which are processing heavy high-performance computations, video encoding, simulation workloads.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setting-up-graviton2-arm64-powered-lambda-function"&gt;
  &lt;/a&gt;
  Setting up Graviton2 (arm64) powered Lambda function &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;When creating a new Lambda function from the web-console, you can select one of the architecture options - &lt;strong&gt;x86_84&lt;/strong&gt; (default) or &lt;strong&gt;arm64&lt;/strong&gt; (Graviton2 Processor).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q18NvgoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slx6hvfng691exk4fzfb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q18NvgoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slx6hvfng691exk4fzfb.png" alt="New Lambda Function"&gt;&lt;/a&gt;&lt;br&gt;
If you want to change the architecture for the existing Lambda function, navigate to the &lt;em&gt;Runtime settings&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v54yC0pH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnxhv87h9por4n8dl46r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v54yC0pH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnxhv87h9por4n8dl46r.png" alt="Runtime settings"&gt;&lt;/a&gt;&lt;br&gt;
Click on &lt;em&gt;Edit&lt;/em&gt; to change the settings.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qTOOsxGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5rykvtsoixu1xgjn8vq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qTOOsxGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5rykvtsoixu1xgjn8vq.png" alt="Edit runtime settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are trying to change an existing Lambda function from x86_64 to arm64 architecture, ensure to check the &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html#foundation-arch-considerations"&gt;function code compatibility with arm64 architecture&lt;/a&gt; and also &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html#foundation-arch-steps"&gt;suggested migration steps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Setting up Lambda with Graviton2 arm processor with &lt;a href="https://aws.amazon.com/serverless/sam/"&gt;AWS SAM&lt;/a&gt; and &lt;a href="https://aws.amazon.com/cdk/"&gt;AWS CDK&lt;/a&gt; would also be available.&lt;/p&gt;

&lt;p&gt;Running Lambda functions with arm64 architecture on x86_64 machine&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;--privileged&lt;/span&gt; multiarch/qemu-user-static &lt;span class="nt"&gt;--reset&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="nb"&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#performance-with-arm64-vs-x8664-architecture"&gt;
  &lt;/a&gt;
  Performance with arm64 vs x86_64 architecture &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;For determining the performance I would be reusing the DynamoDB operation performance SAM template from my previous blog post.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/awscommunity-asean" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e4t9gaU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XXMquOAk--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3974/95700370-548c-431b-8ed5-cce70f477aed.png" alt="AWS Community ASEAN"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTCEL73H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2MTjnerN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615180/12ee3aca-f67e-4f08-986f-1bdfd7ca384b.jpg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/awscommunity-asean/dynamodb-operations-scan-vs-query-with-cloudwatch-custom-metrics-2mik" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;DynamoDB Operations Scan vs Query with CloudWatch Custom Metrics&lt;/h2&gt;
      &lt;h3&gt;Jones Zachariah Noel for AWS Community ASEAN „Éª Aug 22 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#dynamodb&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#monitoring&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
With some modifications - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change the number of &lt;code&gt;StepFunctionIndex&lt;/code&gt; to 10.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;LambdaMemory&lt;/code&gt; and &lt;code&gt;LambdaProcessor&lt;/code&gt; parameters to the CloudWatch Custom Metrics. &lt;code&gt;LambdaMemory&lt;/code&gt; is taken from Lambda's environment variable and &lt;code&gt;LambdaProcessor&lt;/code&gt; is a value set explicitly as environment variable.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;cloudwatch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putMetricData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MetricData&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MetricName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LambdaProcessorMeteric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dimensions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OPERATION&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;metric&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LambdaMemory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWS_LAMBDA_FUNCTION_MEMORY_SIZE&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LambdaProcessor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lambda_fn_arch&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Unit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Milliseconds&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Namespace&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LambdaProcessMetrics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;arm64 architecture duration of several Lambda function invocations&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pP4Llvpn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zo7pvf5zvm26qysvzce.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pP4Llvpn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zo7pvf5zvm26qysvzce.png" alt="Duration"&gt;&lt;/a&gt;&lt;br&gt;
arm64 architecture average duration of several Lambda function invocations&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QM4cmcPq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r66pyj689tkg9py7xcd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QM4cmcPq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r66pyj689tkg9py7xcd.png" alt="Average duration"&gt;&lt;/a&gt;&lt;br&gt;
Duration graph&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-6LJ9S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pq5ldzrxmonr0g5apk84.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-6LJ9S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pq5ldzrxmonr0g5apk84.png" alt="Duration graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;x86_64 architecture duration of several Lambda function invocations&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ho9vWy0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66ug82kceeuo5v43vd96.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ho9vWy0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66ug82kceeuo5v43vd96.png" alt="Duration"&gt;&lt;/a&gt;&lt;br&gt;
x86_64 architecture average duration of several Lambda function invocations&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UzqYxEr2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfalmuwsmrpocxruywp4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzqYxEr2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfalmuwsmrpocxruywp4.png" alt="Average duration"&gt;&lt;/a&gt;&lt;br&gt;
Duration graph&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a09W_Z1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8ti6lfs0o38h3yp6d05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a09W_Z1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8ti6lfs0o38h3yp6d05.png" alt="Duration graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;query&lt;/code&gt; operations with x86_64 and arm64 with 128MB and 256MB Memory&lt;br&gt;
Average &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OXs8O_X0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6a5b2pm1aj22vbu8pyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OXs8O_X0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6a5b2pm1aj22vbu8pyq.png" alt="All query operations with x86_64 and arm64 with 128MB and 256MB Memory"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Minimum &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MVqyrg1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9j1cxc6ccufn4qu1g3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MVqyrg1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9j1cxc6ccufn4qu1g3h.png" alt="All query operations with x86_64 and arm64 with 128MB and 256MB Memory"&gt;&lt;/a&gt;&lt;br&gt;
Maximum &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IWAgVyH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zc35az1lypdny4lj7r0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IWAgVyH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zc35az1lypdny4lj7r0b.png" alt="All query operations with x86_64 and arm64 with 128MB and 256MB Memory"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;All &lt;code&gt;scan&lt;/code&gt; operations with x86_64 and arm64 with 128MB and 256MB Memory&lt;br&gt;
Average &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9nY54j---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6vwf0bbufr01pid46sv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9nY54j---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6vwf0bbufr01pid46sv.png" alt="All scan operations with x86_64 and arm64 with 128MB and 256MB Memory"&gt;&lt;/a&gt;&lt;br&gt;
Minimum &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dCYb-UyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5164ac6f674sifcdl4k5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dCYb-UyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5164ac6f674sifcdl4k5.png" alt="All scan operations with x86_64 and arm64 with 128MB and 256MB Memory"&gt;&lt;/a&gt;&lt;br&gt;
Maximum &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--08tlnXlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4wshevpx3qtdohxqzqh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--08tlnXlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4wshevpx3qtdohxqzqh.png" alt="All scan operations with x86_64 and arm64 with 128MB and 256MB Memory"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;All operations &lt;br&gt;
Average &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fvm5tvPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lq5gxiqzpgt3f5w4t4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fvm5tvPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lq5gxiqzpgt3f5w4t4r.png" alt="All operations"&gt;&lt;/a&gt;&lt;br&gt;
Minimum &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---daE6eLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jokzll9hvra0w7qaj54c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---daE6eLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jokzll9hvra0w7qaj54c.png" alt="All operations"&gt;&lt;/a&gt; &lt;br&gt;
Maximum &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dD67uIw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sx6wcrsi0v4twcqj87g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dD67uIw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sx6wcrsi0v4twcqj87g.png" alt="All operations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;Lambda function with &lt;strong&gt;arm64 architecture&lt;/strong&gt; is cheaper than the &lt;strong&gt;x86_64 architecture&lt;/strong&gt;. And also both the architectures are included under the 1M free requests per month and 400,000 GB-seconds of compute time per month, usable for functions powered by both x86, and Graviton2 processors, in aggregate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-J2yst3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0ia44uoum9i1fkibsn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-J2yst3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0ia44uoum9i1fkibsn7.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
You can know more about &lt;a href="https://aws.amazon.com/lambda/pricing/"&gt;Lambda pricing&lt;/a&gt;.&lt;br&gt;
For this demo, the complete execution cycle with Lambda functions invocations and StepFunction executions along with CloudWatch dashboards were all part of the &lt;strong&gt;Free Tier limit&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;The operational and execution time with &lt;strong&gt;x86_64&lt;/strong&gt; and &lt;strong&gt;arm&lt;/strong&gt; has significant difference, the DynamoDB operations &lt;code&gt;Scan&lt;/code&gt; and &lt;code&gt;Query&lt;/code&gt; have different variations of execution time but the Lambda function as a whole, the time of duration is dropped which in-turn affects the billed execution time thus making the cost of Lambda function of &lt;strong&gt;arm64&lt;/strong&gt; significantly lower than &lt;strong&gt;x86_64&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>lambdafunctions</category>
      <category>graviton2</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Terraform - Complex Variable Types</title>
      <author>Marcel.L</author>
      <pubDate>Sun, 03 Oct 2021 14:55:03 +0000</pubDate>
      <link>https://dev.to/pwd9000/terraform-complex-variable-types-173e</link>
      <guid>https://dev.to/pwd9000/terraform-complex-variable-types-173e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#terraform-variables"&gt;
  &lt;/a&gt;
  Terraform Variables
&lt;/h2&gt;

&lt;p&gt;When creating a terraform configuration, you have to configure and declare &lt;a href="https://www.terraform.io/docs/language/values/variables.html"&gt;Input Variables&lt;/a&gt;. Input variables serve as parameters for a Terraform module and resources, allowing aspects of the module to be customized without altering the module's own source code, and allowing modules to be shared between different configurations.  &lt;/p&gt;

&lt;p&gt;The Terraform language uses the following types for its values:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;string&lt;/code&gt;: a sequence of Unicode characters representing some text, like "hello".&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;number&lt;/code&gt;: a numeric value. The number type can represent both whole numbers like 15 and fractional values like 6.283185.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bool&lt;/code&gt;: a boolean value, either true or false. bool values can be used in conditional logic.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;list&lt;/code&gt; (or &lt;code&gt;tuple&lt;/code&gt;): a sequence of values, like &lt;code&gt;["one", "two"]&lt;/code&gt;. Elements in a list or tuple are identified by consecutive whole numbers, starting with zero.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;map&lt;/code&gt; (or &lt;code&gt;object&lt;/code&gt;): a group of values identified by named labels, like &lt;code&gt;{name = "Mabel", age = 52}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Strings, numbers, and bools are sometimes called &lt;em&gt;primitive&lt;/em&gt; types. Lists/tuples and maps/objects are sometimes called &lt;em&gt;complex&lt;/em&gt; types, &lt;em&gt;structural&lt;/em&gt; types, or &lt;em&gt;collection&lt;/em&gt; types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-primitive-variable-types"&gt;
  &lt;/a&gt;
  Using Primitive Variable Types
&lt;/h2&gt;

&lt;p&gt;In the following example we create a basic Azure Resource Group and we declare each resource argument with it's own separate variable using &lt;em&gt;Primitive&lt;/em&gt; types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#main.tf&lt;/span&gt;
&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"azurerm_resource_group"&lt;/span&gt; &lt;span class="s2"&gt;"demo_rg"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create_rg&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Each variable is declared separately:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#variables.tf&lt;/span&gt;
&lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"create_rg"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bool&lt;/span&gt;
    &lt;span class="nx"&gt;default&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;default&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Default-RG-Name"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"location"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;default&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"uksouth"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you can see from the above example each resource argument is declared using a &lt;em&gt;primitive&lt;/em&gt; variable type.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-complex-variable-types"&gt;
  &lt;/a&gt;
  Using Complex Variable Types
&lt;/h2&gt;

&lt;p&gt;In the following example we create an Azure Resource Group and two storage accounts, but instead of declaring each variable individually using &lt;em&gt;primitive&lt;/em&gt; types we will use &lt;strong&gt;Collections&lt;/strong&gt; using &lt;em&gt;complex&lt;/em&gt; types. We will create our Resource Group by using a single complex variable called &lt;code&gt;rg_config&lt;/code&gt; and we will create our storage account/s using a single complex variable list of objects called &lt;code&gt;storage_config&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;As you can see from the following variable declaration, we are only declaring each resources values using a &lt;em&gt;complex&lt;/em&gt; variable type of &lt;strong&gt;Object&lt;/strong&gt; (Resource Group config) and &lt;strong&gt;List Object&lt;/strong&gt; (List of Storage Account configs):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#// code/variables.tf#L1-L20&lt;/span&gt;
&lt;span class="c1"&gt;#Resource Group Config - Object&lt;/span&gt;
&lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"rg_config"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;create_rg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bool&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;location&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;#Storage Account Config - List of Objects (Each object represents a storage config)&lt;/span&gt;
&lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"storage_config"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;                      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;account_kind&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;account_tier&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;account_replication_type&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;access_tier&lt;/span&gt;               &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;enable_https_traffic_only&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bool&lt;/span&gt;
    &lt;span class="nx"&gt;min_tls_version&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;is_hns_enabled&lt;/span&gt;            &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bool&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Because we are using variable objects we can just reference and lookup each key of the relevant object passed in to obtain the corresponding configuration value e.g. &lt;code&gt;var.config.key&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#// code/resources.tf#L6-L32&lt;/span&gt;
&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"azurerm_resource_group"&lt;/span&gt; &lt;span class="s2"&gt;"demo_rg"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rg_config&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create_rg&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rg_config&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rg_config&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;
  &lt;span class="nx"&gt;tags&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Purpose&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Demo-RG"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Automation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"azurerm_storage_account"&lt;/span&gt; &lt;span class="s2"&gt;"sas"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;#Implicit dependency from previous resource&lt;/span&gt;
  &lt;span class="nx"&gt;resource_group_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;azurerm_resource_group&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;demo_rg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="nx"&gt;location&lt;/span&gt;            &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;azurerm_resource_group&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;demo_rg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;

  &lt;span class="c1"&gt;#values from variable config object&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;                      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="nx"&gt;account_kind&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account_kind&lt;/span&gt;
  &lt;span class="nx"&gt;account_tier&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account_tier&lt;/span&gt;
  &lt;span class="nx"&gt;account_replication_type&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account_replication_type&lt;/span&gt;
  &lt;span class="nx"&gt;access_tier&lt;/span&gt;               &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;access_tier&lt;/span&gt;
  &lt;span class="nx"&gt;enable_https_traffic_only&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enable_https_traffic_only&lt;/span&gt;
  &lt;span class="nx"&gt;min_tls_version&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min_tls_version&lt;/span&gt;
  &lt;span class="nx"&gt;is_hns_enabled&lt;/span&gt;            &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_hns_enabled&lt;/span&gt;

  &lt;span class="c1"&gt;#Apply tags&lt;/span&gt;
  &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Purpose&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Demo-sa-${count.index + 1}"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Automation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Because we are now using a &lt;strong&gt;list of objects&lt;/strong&gt; as the variable for storage accounts, each storage account we want to create can be configured on our &lt;strong&gt;TFVARS&lt;/strong&gt; file as an object inside its own block, and so we can simply add additional object blocks into our &lt;strong&gt;TFVARS&lt;/strong&gt; to build &lt;code&gt;one&lt;/code&gt; or &lt;code&gt;many&lt;/code&gt; storage accounts, each with different configs:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#// code/common.auto.tfvars.tf#L1-L30&lt;/span&gt;
&lt;span class="c1"&gt;#Resource Group Config - Object Values&lt;/span&gt;
&lt;span class="nx"&gt;rg_config&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;create_rg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Demo-Terraform-RG"&lt;/span&gt;
  &lt;span class="nx"&gt;location&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"uksouth"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;#Storage Account Configs - List of Objects Values&lt;/span&gt;
&lt;span class="nx"&gt;storage_config&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="c1"&gt;#Storage Account 1 (Object1): StorageV2&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;                      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pwd9000v2sa001"&lt;/span&gt;
    &lt;span class="nx"&gt;account_kind&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"StorageV2"&lt;/span&gt;
    &lt;span class="nx"&gt;account_tier&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Standard"&lt;/span&gt;
    &lt;span class="nx"&gt;account_replication_type&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"LRS"&lt;/span&gt;
    &lt;span class="nx"&gt;min_tls_version&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"TLS1_2"&lt;/span&gt;
    &lt;span class="nx"&gt;enable_https_traffic_only&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="nx"&gt;access_tier&lt;/span&gt;               &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Cool"&lt;/span&gt;
    &lt;span class="nx"&gt;is_hns_enabled&lt;/span&gt;            &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;#Storage Account 2 (object2): Azure Data Lake Storage V2 (ADLS2)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;                      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pwd9000adls2sa001"&lt;/span&gt;
    &lt;span class="nx"&gt;account_kind&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"BlockBlobStorage"&lt;/span&gt;
    &lt;span class="nx"&gt;account_tier&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Premium"&lt;/span&gt;
    &lt;span class="nx"&gt;account_replication_type&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ZRS"&lt;/span&gt;
    &lt;span class="nx"&gt;min_tls_version&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"TLS1_2"&lt;/span&gt;
    &lt;span class="nx"&gt;enable_https_traffic_only&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="nx"&gt;access_tier&lt;/span&gt;               &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hot"&lt;/span&gt;
    &lt;span class="nx"&gt;is_hns_enabled&lt;/span&gt;            &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you can see from the last example, using complex variable types and making our configurations more object oriented can offer much greater flexibility and granularity in terraform deployments.  &lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post and have learned something new. You can also find the code samples used in this blog post on my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/master/posts/DevOps-Terraform-Complex-Vars/code"&gt;Github&lt;/a&gt; page. ‚ù§Ô∏è&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;


&lt;div class="ltag__user ltag__user__id__620034"&gt;
  
    .ltag__user__id__620034 .follow-action-button {
      background-color: #0cbb58 !important;
      color: #000000 !important;
      border-color: #0cbb58 !important;
    }
  
    &lt;a href="/pwd9000" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Amb4rEJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L_SDLOmq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620034/93be2c72-3a13-478e-8af1-a4bedc1b2331.jpeg" alt="pwd9000 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/pwd9000"&gt;Marcel.L&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/pwd9000"&gt;Cloud Solutions &amp;amp; DevOps Architect.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>tutorial</category>
      <category>azure</category>
      <category>productivity</category>
      <category>devops</category>
    </item>
    <item>
      <title>my current work on my game</title>
      <author>scoopydevy</author>
      <pubDate>Sun, 03 Oct 2021 14:41:26 +0000</pubDate>
      <link>https://dev.to/scoopydevy/my-current-work-on-my-game-1cl6</link>
      <guid>https://dev.to/scoopydevy/my-current-work-on-my-game-1cl6</guid>
      <description>&lt;p&gt;got basic rendering done using SDL_image which is way better than using OpenGL cuz sdl2 is so "bare-bone" but i feel really proud that ive got an image moving on the screen my next big approach would be to get some physics into the game like gravity, tile collision etc.Till then... Cheers! #gamedev #cpp &lt;a href="https://twitter.com/scoopydevy/status/1441387905096683532"&gt;https://twitter.com/scoopydevy/status/1441387905096683532&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>cpp</category>
    </item>
    <item>
      <title>How to write tests for applications that use MongoDB as a storage</title>
      <author>Georgios Kampitakis</author>
      <pubDate>Sun, 03 Oct 2021 14:27:43 +0000</pubDate>
      <link>https://dev.to/gkampitakis/how-to-write-tests-for-applications-that-use-mongodb-as-a-storage-10bm</link>
      <guid>https://dev.to/gkampitakis/how-to-write-tests-for-applications-that-use-mongodb-as-a-storage-10bm</guid>
      <description>&lt;p&gt;MongoDB is one of the most popular databases right now and many people use it as primary storage on their applications in their pet projects or even in big production applications.&lt;/p&gt;

&lt;p&gt;One of the main benefits of MongoDB is how flexible it is and how fast you can bring value. So I will try to show how to&lt;br&gt;
write tests for your application to make sure the code you write will do what it is supposed to do.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;The motivation for writing this article is twofold.&lt;/p&gt;

&lt;p&gt;The first reason for writing this article is to show that except the benefits of having your code tested ( confidence in the quality of your code, catch bugs before pushing code, etc ) it can also be quite as entertaining and educational as writing the actual code.&lt;/p&gt;

&lt;p&gt;The second reason is for showing how we should write tests in isolation, meaning there should be no external interference that could probably skew test results.&lt;/p&gt;

&lt;p&gt;I am going to show 3 different ways for testing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mocking the MongoDB functionality&lt;/li&gt;
&lt;li&gt;Spinning a dedicated MongoDB instance with docker-compose for running the tests&lt;/li&gt;
&lt;li&gt;Use a mock MongoDB with Mongodb-In-Memory-Server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#technologies-used"&gt;
  &lt;/a&gt;
  Technologies Used
&lt;/h2&gt;

&lt;p&gt;During the article I am going to use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;Jest as a test runner&lt;/li&gt;
&lt;li&gt;Docker and docker-compose for setting locally Mongodb&lt;/li&gt;
&lt;li&gt;MongoDB In-Memory Server for mocking Mongodb&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code provided is written in Typescript but it's not a lot different from being in Javascript.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-code-that-needs-testing"&gt;
  &lt;/a&gt;
  The code that needs testing
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MongoClientOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongodb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;MongoClientOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createUserIndexes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;createIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;createIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;occupation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;UserDTO&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;occupation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Omit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserDTO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;timestamp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserDTO&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getUsersByOccupation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;occupation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserDTO&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;occupation&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Omit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserDTO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;timestamp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;deleteUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above code consists of three components&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a function &lt;code&gt;createClient&lt;/code&gt; that initializes and returns a MongoClient&lt;/li&gt;
&lt;li&gt;a function &lt;code&gt;createUserIndexes&lt;/code&gt;that creates indexes for the &lt;code&gt;users&lt;/code&gt; collection&lt;/li&gt;
&lt;li&gt;and a class &lt;code&gt;UserService&lt;/code&gt; that contains methods for interacting with &lt;code&gt;users&lt;/code&gt; collection (create, delete, update user etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#method-1-mocking-mongodb"&gt;
  &lt;/a&gt;
  Method 1: Mocking MongoDB
&lt;/h2&gt;

&lt;p&gt;The first method is about writing mocks that have the same interface as the actual &lt;a href="https://mongodb.github.io/node-mongodb-native/api-generated/mongoclient.html"&gt;MongoDB Driver&lt;/a&gt;. So in the tests, when the code calls &lt;code&gt;.insertOne&lt;/code&gt;, a mock will emulate the functionality and spy on the arguments that the function was called with.&lt;/p&gt;

&lt;p&gt;Let's see some examples.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;createClient&lt;/code&gt; has as arguments the host &lt;code&gt;url&lt;/code&gt; and the &lt;code&gt;options&lt;/code&gt; that the &lt;code&gt;MongoClient&lt;/code&gt; will be initialized with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;MongoClientOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Jest provides mocking functionality out of the box with &lt;code&gt;jest.mock()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The setup for the tests:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongodb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UserService&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;constructorSpy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;collectionSpy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;createIndexSpy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;databaseSpy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;deleteOneSpy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;findSpy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;findOneSpy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;insertOneSpy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;updateOneSpy&lt;/span&gt;
  &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;MongodbSpies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requireMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongodb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;constructorSpy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mockClear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;collectionSpy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mockClear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;createIndexSpy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mockClear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;databaseSpy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mockClear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;deleteOneSpy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mockClear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;findSpy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mockClear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;findOneSpy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mockClear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;insertOneSpy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mockClear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;updateOneSpy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mockClear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Jest automatically will replace &lt;code&gt;monogdb&lt;/code&gt; from the &lt;code&gt;import { MongoClient } from 'mongodb'&lt;/code&gt; with the mock you provide in &lt;code&gt;__mocks__/mongodb.ts&lt;/code&gt;. At &lt;code&gt;jest.requireMock('mongodb');&lt;/code&gt; I can get access to the spies that are specified in the mock and then use them inside our tests for asserting with what arguments the functions are getting called.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The mock file located at &lt;code&gt;__mocks__/mongodb.ts&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;constructorSpy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MongoClient&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;MongoClientOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;constructorSpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mock-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The structure of the mock respects the interface of MongoDB Driver and exports a &lt;code&gt;MongoClient&lt;/code&gt; with a &lt;code&gt;connect&lt;/code&gt; method&lt;br&gt;
that returns a string. It also includes a spy &lt;code&gt;constructorSpy&lt;/code&gt;, with &lt;code&gt;constructorSpy&lt;/code&gt; we can make sure that our constructor is called with the correct arguments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mock functions or known as 'spies' let you spy on the behavior of a function call.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;An example of a test:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should connect and return a client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongodb://localhost:27017&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;keepAlive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mock-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;constructorSpy&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the same pattern, we can mock and verify all the methods are called with the correct arguments.&lt;/p&gt;

&lt;p&gt;These methods are straightforward. We need to identify what methods from the MongoDB driver are being used by the &lt;br&gt;
code and create mocks that emulate the functionality and assert that the code behaves as it should.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt; of this method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This method gives us the ability to test the code that we have written in isolation of other factors like the MongoDB driver.&lt;/li&gt;
&lt;li&gt;Makes the tests more reliable as they don't rely on HTTP requests or connections with MongoDB in this case.&lt;/li&gt;
&lt;li&gt;Speed, once mocks are ready, it's fast to write and run the tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt; of this method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Includes much more code, other than the actual implementation, creating the extra mocks.
It's clear in &lt;a href="https://github.com/gkampitakis/mongodb-jest-testing/blob/master/mock-method/__mocks__/mongodb.ts"&gt;the complete example&lt;/a&gt; that mocks are more lines of code than the actual &lt;code&gt;UserService&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Another problem with this method is that tests are relying a lot on the mocks. More times than I would like to admit my code misbehaves because of badly written or complex mocks.&lt;/li&gt;
&lt;li&gt;If a new breaking change is introduced to the MongoDB driver, you run the risk of not catching those breaking changes as your tests don't interact with the driver.&lt;/li&gt;
&lt;li&gt;Finally, tests can be a really good guide on how a function or a method is used and its signature.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the below example, you can notice the &lt;code&gt;createClient&lt;/code&gt; is returning a string. That's wrong and can be misleading to someone reading the tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mock-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#method-2-using-dedicated-mongodb-with-raw-dockercompose-endraw-"&gt;
  &lt;/a&gt;
  Method 2: Using dedicated MongoDB with &lt;code&gt;docker-compose&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The second method in this article uses a different approach from the first one. Instead of mocking the MongoDB functionality, it's about creating a dedicated instance before running the tests, run the tests and then destroy it.&lt;/p&gt;

&lt;p&gt;How we can do that? Create a MongoDB on demand keep it isolated and then just destroy it?&lt;/p&gt;

&lt;p&gt;Here comes &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; and &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;. I am not going to spend much time explaining Docker, but if you want I can write a separate blog about it.&lt;/p&gt;

&lt;p&gt;The way for creating a MongoDB is through a manifest file called &lt;code&gt;docker-compose.yaml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.9'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;mongodb&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;27017:27017'&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;./seed.js:/docker-entrypoint-initdb.d/mongo-init.js:ro'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This docker-compose create a MongoDB service and attaches a seed file that runs on startup, &lt;br&gt;
creates the needed collections and populates them with test data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The commands for starting and stopping the MongoDB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="c"&gt;# -d (detach) is for running the service in the background&lt;/span&gt;

docker-compose down
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the tests can run without mocks, they just need to point to the dedicated MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The setup for the tests:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;beforeAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongodb://localhost:27017&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;userService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UserService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;afterAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;deleteMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test-user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;BeforeAll&lt;/code&gt; tests create a client that connects to the &lt;code&gt;docker-compose&lt;/code&gt; MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AfterAll&lt;/code&gt; tests close the connection to MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;BeforeEach&lt;/code&gt; test deletes the &lt;code&gt;test-user&lt;/code&gt; that was created during the tests, so each test is independent of previous data.&lt;/p&gt;

&lt;p&gt;So all the tests are going to assert on real data. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should create needed indexes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;indexes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createUserIndexes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;indexes&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email_1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;occupation_1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return the correct user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;userService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chef@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mock-chef&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chef@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;occupation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chef&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-09-29T15:48:13.209Z&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt; of this method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As you can see tests are much simpler and straightforward to write.&lt;/li&gt;
&lt;li&gt;Tests are more realistic and close to the actual use of our code. As noted before it's good to be able to read the tests and understand the code's behavior and functions/methods signatures.&lt;/li&gt;
&lt;li&gt;Finally, the integration between the &lt;code&gt;UserService&lt;/code&gt; and the MongoDB driver is being tested, meaning if a breaking change is introduced, tests can catch it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt; of this method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Of course with this method, the process of running the tests, iterating on them, and setting up the environment is slower.&lt;/li&gt;
&lt;li&gt;It needs basic knowledge of Docker and Docker Compose for setting the testing environment and might get more difficult in more complex services. (&lt;strong&gt;I would highly recommend though investing some time on learning Docker and containers&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#method-3-using-inmemory-mongodb-server"&gt;
  &lt;/a&gt;
  Method 3: Using In-Memory MongoDB server
&lt;/h2&gt;

&lt;p&gt;The final method tries to combine both methods, 1 and 2. It uses an external package &lt;a href="https://github.com/nodkz/mongodb-memory-server"&gt;MongoDB In-Memory Server&lt;/a&gt; for our MongoDB.&lt;/p&gt;

&lt;p&gt;As stated in the package description &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This package spins up an actual/real MongoDB server programmatically from within NodeJS, for testing or mocking during development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The tests in this method are quite similar to the tests from the Docker Method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The setup for the tests:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;beforeAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;mongod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;MongoMemoryServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mongod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUri&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;seedData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;userService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UserService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;afterAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mongod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;deleteMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test-user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only difference is, that it needs to programmatically start the MongoDB Server and stop it at the end.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt; of this method:&lt;/p&gt;

&lt;p&gt;Some of the pros enlisted in both previous methods apply here&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tests are much simpler and straightforward to write.&lt;/li&gt;
&lt;li&gt;Tests are more realistic and close to the actual use of our code.&lt;/li&gt;
&lt;li&gt;The integration between the &lt;code&gt;UserService&lt;/code&gt; and the MongoDB driver is being tested.&lt;/li&gt;
&lt;li&gt;No complexity around setting up tests.&lt;/li&gt;
&lt;li&gt;Running and iterating tests is faster.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt; of this method:&lt;/p&gt;

&lt;p&gt;There are not many cons to this method.&lt;/p&gt;

&lt;p&gt;I could just mention two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First one is that there is not so much flexibility. An example of a missing feature for &lt;code&gt;In-Memory Server&lt;/code&gt; is that there is no option for seeding data at the start, rather the tests need to do it programmatically.&lt;/li&gt;
&lt;li&gt;and secondly, this solution is specific to MongoDB, it might not be the case for the storage of your choice, having an &lt;code&gt;In-Memory Server&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There are many ways to write your tests and make sure your code does what it is supposed to do, but like everything in software engineering, there is no such thing as one correct way. All the methods mentioned above have some benefits, but it all comes down to what each person or team values the most, or what you need to achieve by testing your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to test your code in isolation and focus on the logic of your features then the 1st method would work for you.&lt;/p&gt;

&lt;p&gt;If you want to test your code and how integrates and communicates with the system ( in this case with the MongoDB ) and get confidence that nothing breaks in between then second and third methods are better options for you.&lt;/p&gt;

&lt;p&gt;My personal view is, go with what makes you feel more confident about your code. But either way please ALWAYS write tests, they are "life-saving".&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;




&lt;p&gt;You can find the complete example and code I shared in the article in &lt;a href="https://github.com/gkampitakis/mongodb-jest-testing"&gt;Github&lt;/a&gt; üíª&lt;/p&gt;

&lt;p&gt;Feel free to ask any questions/help in &lt;a href="https://github.com/gkampitakis/mongodb-jest-testing/discussions"&gt;Github discussions&lt;/a&gt; or at the comments here ‚ùì&lt;/p&gt;

&lt;p&gt;If you liked or found the post useful just leave a ‚ù§Ô∏è&lt;/p&gt;

</description>
      <category>node</category>
      <category>testing</category>
      <category>mongodb</category>
      <category>docker</category>
    </item>
    <item>
      <title>How to Add Accordion in Blogger Using  HTML ,CSS &amp; JavaScript</title>
      <author>Bhavyashah</author>
      <pubDate>Sun, 03 Oct 2021 14:20:14 +0000</pubDate>
      <link>https://dev.to/bhavyashah/how-to-add-accordion-in-blogger-using-html-css-javascript-4h0l</link>
      <guid>https://dev.to/bhavyashah/how-to-add-accordion-in-blogger-using-html-css-javascript-4h0l</guid>
      <description>&lt;p&gt;In this post, I'll show you &lt;a href="https://www.blogtriggers.com/2021/07/how-to-create-faq-accordion-in-blogger.html"&gt;how to add accordion in blogger&lt;/a&gt; using HTML, CSS and JavaScript . Accordion is a type of box widget that made unique panels that can be expanded or collapsed. Website visitors can view one panel or multiple panels associated with the same subject in the accordion. This widget could be used in blogger blog to show more topic and information about your blog in separate accordion.&lt;/p&gt;

&lt;p&gt;So Let's Start&lt;/p&gt;

&lt;p&gt;Step1) First of all Visit Blogger.com Dashboard Website &lt;/p&gt;

&lt;p&gt;Step2) In Blogger go to the Theme section &amp;gt;&amp;gt; Customize &amp;gt;&amp;gt; Edit HTML&lt;/p&gt;

&lt;p&gt;Step3) Now Search &lt;/p&gt; tag and paste this code in-between of  tag.&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Step4) Now Search ]]&amp;gt;&lt;a href="/b:skin"&gt;/b:skin&lt;/a&gt; tag and Paste this CSS Code before the ]]&amp;gt;&lt;a href="/b:skin"&gt;/b:skin&lt;/a&gt; tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.containerwidth {
            width: 100%;
        }

        .wrapper {
            background-color: #ffffff;
            padding: 10px 20px;
            margin-bottom: 20px;
            border-radius: 5px;
            -webkit-box-shadow: 0 15px 25px rgba(0, 0, 50, 0.2);
            box-shadow: 0 15px 25px rgba(0, 0, 50, 0.2);
        }

        .toggle,
        .content {
            font-family: "Poppins", sans-serif;
        }

        .toggle {
            width: 100%;
            background-color: transparent;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
            -webkit-box-pack: justify;
            -ms-flex-pack: justify;
            justify-content: space-between;
            font-size: 16px;
            color: #111130;
            font-weight: 600;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 10px 0;
        }
        .content {
            position: relative;
            font-size: 14px;
            text-align: justify;
            line-height: 30px;
            height: 0;
            overflow: hidden;
            -webkit-transition: all 1s;
            -o-transition: all 1s;
            transition: all 1s;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step4) Now Search  tag &amp;amp; Paste this JAVASCRIPT code before  tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
          //&amp;lt;![CDATA[
        let toggles = document.getElementsByClassName("toggle");
        let contentDiv = document.getElementsByClassName("content");
        let icons = document.getElementsByClassName("icon");

        for (let i = 0; i &amp;lt; toggles.length; i++) {
            toggles[i].addEventListener("click", () =&amp;gt; {
                if (parseInt(contentDiv[i].style.height) != contentDiv[i].scrollHeight) {
                    contentDiv[i].style.height = contentDiv[i].scrollHeight + "px";
                    toggles[i].style.color = "#0084e9";
                    icons[i].classList.remove("fa-plus");
                    icons[i].classList.add("fa-minus");
                } else {
                    contentDiv[i].style.height = "0px";
                    toggles[i].style.color = "#111130";
                    icons[i].classList.remove("fa-minus");
                    icons[i].classList.add("fa-plus");
                }

                for (let j = 0; j &amp;lt; contentDiv.length; j++) {
                    if (j !== i) {
                        contentDiv[j].style.height = 0;
                        toggles[j].style.color = "#111130";
                        icons[j].classList.remove("fa-minus");
                        icons[j].classList.add("fa-plus");
                    }
                }
            });
        }
//]]&amp;gt;
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step5) Now Copy This HTML Code and Paste this code where you have to show FAQs Accordion in blogger Posts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="boxaccordion"&amp;gt;
        &amp;lt;div class="containerwidth"&amp;gt;
            &amp;lt;div class="wrapper"&amp;gt;
                &amp;lt;button class="toggle"&amp;gt;How FAQs Accordion help us to rank our website?&amp;lt;i class="fas fa-plus icon"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/button&amp;gt;
                &amp;lt;div class="content"&amp;gt;
                    &amp;lt;p&amp;gt;FAQs accordion is a great way to help you build authority and trust, and at the same time bestow a bit of personality on the website. It also helps you answer frequently asked questions, produce additional content quickly, and reduce bounce rates.&amp;lt;/p&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="wrapper"&amp;gt;
                &amp;lt;button class="toggle"&amp;gt;What is the benefits of FAQs Accordion in blogger?&amp;lt;i class="fas fa-plus icon"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/button&amp;gt;
                &amp;lt;div class="content"&amp;gt;
                    &amp;lt;p&amp;gt;Benefit of FAQs accordion  for blogger is that it helps your blog visitors to find what they are looking for in less time.&amp;lt;/p&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="wrapper"&amp;gt;
                &amp;lt;button class="toggle"&amp;gt;Does FAQs Scheme Help Us to Rank our Site in Top Position?&amp;lt;i class="fas fa-plus icon"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/button&amp;gt;
                &amp;lt;div class="content"&amp;gt;
                    &amp;lt;p&amp;gt; Yes, Frequently Asked Questions scheme will make your website more popular and increase your search engine ranking position.&amp;lt;/p&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step6) Now Save the Posts.&lt;/p&gt;

&lt;p&gt;Hopefully you have successfully Insert FAQs Accordion in blogger.&lt;/p&gt;

&lt;p&gt;If you want to Read like these Posts Stuff then visit our website &lt;a href="https://www.blogtriggers.com"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>website</category>
    </item>
    <item>
      <title>Next.Js Series #4 - What is the custom 'App' component in Next.Js and how should we use it?</title>
      <author>Dylan Oh</author>
      <pubDate>Sun, 03 Oct 2021 13:54:08 +0000</pubDate>
      <link>https://dev.to/ohdylan/next-js-series-4-what-is-the-custom-app-component-in-next-js-and-how-should-we-use-it-457j</link>
      <guid>https://dev.to/ohdylan/next-js-series-4-what-is-the-custom-app-component-in-next-js-and-how-should-we-use-it-457j</guid>
      <description>&lt;p&gt;We are going to introduce the custom 'App' component in Next.Js and its use cases. &lt;/p&gt;

&lt;p&gt;When we used 'create-next-app' command to create our Next.Js project, there is an existing file called '_app.js' under our 'pages' folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/author.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the default App component that you get and it is used by Next.Js to initialize pages. You could imagine it as an entry point of all your pages component, which rendered within this 'App' container. This App component receives two parameters which are 'Component' and 'pageProps'. 'Component' is basically the current active page component, and whenever the route of our app is changed, 'Component' will be updated to the new page component. 'pageProps' is the initial data that we inject into pages when the page is first loaded. This can be done by calling 'getInitialProps'on the custom App component.&lt;/p&gt;

&lt;p&gt;There are several useful cases for this custom 'App' component:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Persisting partial layout throughout the pages (eg. navbar and footer)&lt;/li&gt;
&lt;li&gt;Applying global CSS (which we have done in series #1)&lt;/li&gt;
&lt;li&gt;Keeping states between pages (because custom 'App' component is a higher level componentÔºâ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this series, we are going to demonstrate how to apply a NavBar component for all the pages.&lt;/p&gt;

&lt;p&gt;First, we create a NavBar component under a new 'component' folder.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KobO15K5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1wqfyhdx0yalgns2n60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KobO15K5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1wqfyhdx0yalgns2n60.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/navbar.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NavBar&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;FAQ&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Contact&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;NavBar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... and let's do some simple styling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;list-style-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt;  &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;black&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the NavBar component has been created, we import it to the '_app.js' file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/author.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;NavBar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/NavBar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NavBar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This NavBar component will now show in every page of our app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9HX3BJq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32uapoabbuxn54rw6f0p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9HX3BJq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32uapoabbuxn54rw6f0p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Y-j_DfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6id6rfraby3w9vrrdrb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Y-j_DfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6id6rfraby3w9vrrdrb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How cool and simple it is! You may also apply other persistant layout such as footer, including copyright information etc to the pages in the same way.&lt;/p&gt;

&lt;p&gt;Hope you get a basic understanding on how this higher level custom 'App' component could make our life easier when developing a Next.Js app. Stay tune for the future articles on Next.Js!&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>component</category>
    </item>
    <item>
      <title>How To Deploy Meshery In Kind</title>
      <author>s1ntaxe770r</author>
      <pubDate>Sun, 03 Oct 2021 13:23:54 +0000</pubDate>
      <link>https://dev.to/s1ntaxe770r/how-to-deploy-meshery-in-kind-1d5j</link>
      <guid>https://dev.to/s1ntaxe770r/how-to-deploy-meshery-in-kind-1d5j</guid>
      <description>&lt;p&gt;In this post, I would be showing you how to  deploy &lt;a href="https://meshery.io/"&gt;Meshery&lt;/a&gt; on Kubernetes using  &lt;a href="//kind.sigs.k8s.io/"&gt;Kind&lt;/a&gt; but first‚Ä¶&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-the-heck-is-meshery"&gt;
  &lt;/a&gt;
  What the heck is Meshery?
&lt;/h2&gt;

&lt;p&gt;If you are reading this chances are you are already familiar with Meshery or you are looking to find out what it is. Well, you are in the right place.&lt;/p&gt;

&lt;p&gt;Meshery is an open-source Service Mesh management plane. In simpler terms Meshery allows you to orchestrate the installation and management of different Service Meshes, Meshery also allows you to evaluate the performance of Service Meshes using the &lt;a href="https://smp-spec.io"&gt;SMP specification&lt;/a&gt; These are just two of the features Meshery provides out of the box.  If I have gotten you a tiny bit interested in Meshery head over to &lt;a href="https://docs.meshery.io/functionality"&gt;https://docs.meshery.io/functionality&lt;/a&gt; for a list of additional features Meshery provides.&lt;/p&gt;

&lt;p&gt;Now that you‚Äôre familiar with what Meshery is let's get it installed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Before we get started be sure you have docker and go installed as both are requirements for installing Kind,  we'll also be needing &lt;a href="https://helm.sh/"&gt;helm&lt;/a&gt; to deploy Meshery &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-kind"&gt;
  &lt;/a&gt;
  Installing Kind
&lt;/h3&gt;

&lt;p&gt;to install Kind run the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;GO111MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"on"&lt;/span&gt; go get sigs.k8s.io/kind@v0.11.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you run into an error along the lines of :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;zsh: &lt;span class="nb"&gt;command &lt;/span&gt;not found: kind
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try adding the following alias to your shell configuration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$GOBIN&lt;/span&gt;&lt;span class="s2"&gt;/kind"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-a-cluster"&gt;
  &lt;/a&gt;
  Creating a cluster
&lt;/h2&gt;

&lt;p&gt;Next, we'll create a kind cluster with an Ingress enabled, this ingress will come in handy when we want to expose Meshery later on. &lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;cluster.yaml&lt;/code&gt; and populate the file with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cluster&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kind.x-k8s.io/v1alpha4&lt;/span&gt;
&lt;span class="na"&gt;nodes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;control-plane&lt;/span&gt;
  &lt;span class="na"&gt;kubeadmConfigPatches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;kind: InitConfiguration&lt;/span&gt;
    &lt;span class="s"&gt;nodeRegistration:&lt;/span&gt;
      &lt;span class="s"&gt;kubeletExtraArgs:&lt;/span&gt;
        &lt;span class="s"&gt;node-labels: "ingress-ready=true"&lt;/span&gt;
  &lt;span class="na"&gt;extraPortMappings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
    &lt;span class="na"&gt;hostPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
    &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
    &lt;span class="na"&gt;hostPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
    &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we the following command to create a cluster using the cluster configuration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kind create cluster &lt;span class="nt"&gt;--name&lt;/span&gt; meshery &lt;span class="nt"&gt;--config&lt;/span&gt; cluster.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a few minutes, you should have a Kubernetes cluster up and running.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-meshery"&gt;
  &lt;/a&gt;
  Installing Meshery
&lt;/h3&gt;

&lt;p&gt;hop into your terminal and run the following command to get Meshery installed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/layer5io/meshery.git&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;meshery
 &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl create namespace meshery
 &lt;span class="nv"&gt;$ &lt;/span&gt;helm &lt;span class="nb"&gt;install &lt;/span&gt;meshery &lt;span class="nt"&gt;--namespace&lt;/span&gt; meshery &lt;span class="nb"&gt;install&lt;/span&gt;/kubernetes/helm/meshery
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#exposing-meshery"&gt;
  &lt;/a&gt;
  Exposing meshery
&lt;/h3&gt;

&lt;p&gt;As mentioned earlier on we would access Meshery by using Ingress, create a file called &lt;code&gt;meshery-ingress.yaml&lt;/code&gt;, and add the following configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Ingress&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;meshery-ingress&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;meshery-ingress&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;meshery.local&lt;/span&gt;
    &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pathType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Prefix&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/"&lt;/span&gt;
        &lt;span class="na"&gt;backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;meshery&lt;/span&gt;
            &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
              &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9081&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apply the configuration using &lt;code&gt;kubectl apply -n meshery -f meshery-ingress.yaml&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Now create the following entry in &lt;code&gt;/etc/hosts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;127.0.0.1 meshery.local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point if you head over to &lt;a href="http://meshery.local"&gt;http://meshery.local&lt;/a&gt; in your browser you should be able to access Meshery's UI which looks something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CcqdQ6L8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://file.coffee/u/4L_8Zc31sDWWF1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CcqdQ6L8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://file.coffee/u/4L_8Zc31sDWWF1.png" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-mesherys-commandline-client"&gt;
  &lt;/a&gt;
  Configuring Meshery's command-line client
&lt;/h3&gt;

&lt;p&gt;While you could interact with Meshery from the UI only, at some point you are going to want to use the command line client which is what mesheryctl is. So let's get that installed.&lt;/p&gt;

&lt;p&gt;Head over to &lt;a href="https://github.com/meshery/meshery/releases/"&gt;https://github.com/meshery/meshery/releases/&lt;/a&gt; and download the binary for your operating system. Next unzip the file and move it to your path&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;unzip mesheryctl_0.5.52_Darwin_x86_64.zip
&lt;span class="nb"&gt;mv &lt;/span&gt;mesheryctl /usr/local/bin/mesheryctl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The version of the binary might differ depending on when you are reading this. &lt;/p&gt;

&lt;p&gt;Now that you have mesheryctl installed you should be able to run &lt;code&gt;mesheryctl version&lt;/code&gt; .On your first try you should see something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~
‚ùØ mesheryctl version     
Missing Meshery config file.
Create default config now &lt;span class="o"&gt;[&lt;/span&gt;y/n]?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;enter &lt;code&gt;y&lt;/code&gt; and mesheryctl would generate a config file which we would also be needing later on. &lt;/p&gt;

&lt;p&gt;if all went well you should be presented with this error message&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Default config file created at /Users/someguy/.meshery/config.yaml
        VERSION     GITSHA      
Client  v0.5.62     35e8d943    
Server  unavailable unavailable 

  Unable to communicate with Meshery: Get &lt;span class="s2"&gt;"http://localhost:9081/api/system/version"&lt;/span&gt;: dial tcp &lt;span class="o"&gt;[&lt;/span&gt;::1]:9081: connect: connection refused
  See https://docs.meshery.io &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;help &lt;/span&gt;getting started with Meshery.

Checking &lt;span class="k"&gt;for &lt;/span&gt;latest version of mesheryctl...

  v0.5.62 is the latest release.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This happens because mesheryctl is trying to communicate with Meshery on the default address, in our case it's &lt;a href="http://meshery.local"&gt;http://meshery.local&lt;/a&gt;. Luckily we can change this using the config file  Meshery generated earlier.&lt;/p&gt;

&lt;p&gt;Open up the config file located at ~/.meshery/config.yaml&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;contexts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;local&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://localhost:9081&lt;/span&gt;
    &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Default&lt;/span&gt;
    &lt;span class="na"&gt;platform&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker&lt;/span&gt;
    &lt;span class="na"&gt;adapters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-istio&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-linkerd&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-consul&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-nsm&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-kuma&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-cpx&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-osm&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-traefik-mesh&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-nginx-sm&lt;/span&gt;
    &lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stable&lt;/span&gt;
    &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;latest&lt;/span&gt;
&lt;span class="na"&gt;current-context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;local&lt;/span&gt;
&lt;span class="na"&gt;tokens&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Default&lt;/span&gt;
  &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;auth.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Taking a closer look we see that the endpoint is set to &lt;code&gt;[localhost:9081](http://localhost:9081)&lt;/code&gt;, modify the file so it looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;contexts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;local&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://meshery.local&lt;/span&gt;
    &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Default&lt;/span&gt;
    &lt;span class="na"&gt;platform&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kubernetes&lt;/span&gt;
    &lt;span class="na"&gt;adapters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-istio&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-linkerd&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-consul&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-nsm&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-kuma&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-cpx&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-osm&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-traefik-mesh&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;meshery-nginx-sm&lt;/span&gt;
    &lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stable&lt;/span&gt;
    &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;latest&lt;/span&gt;
&lt;span class="na"&gt;current-context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;local&lt;/span&gt;
&lt;span class="na"&gt;tokens&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Default&lt;/span&gt;
  &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;auth.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here i changed the endpoint and platform to match our current configuration. Now run &lt;code&gt;mesheryctl version&lt;/code&gt; again and you should see the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚ùØ mesheryctl version      
        VERSION GITSHA   
Client  v0.5.62 35e8d943    
Server  v0.5.62 35e8d943    

Checking &lt;span class="k"&gt;for &lt;/span&gt;latest version of mesheryctl...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there you go, we successfully deployed Meshery in kind and configured the CLI to interact with Meshery. If you have any questions or want to contribute to the Meshery project feel free to join the slack workspace using the link &lt;a href="https://layer5io.slack.com"&gt;here&lt;/a&gt;. Now go forth and make a mesh of things&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>meshery</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>7 passos para construir uma P.o.C. LIKE A BOSS</title>
      <author>V√≠ctor Fructuoso</author>
      <pubDate>Sun, 03 Oct 2021 13:09:14 +0000</pubDate>
      <link>https://dev.to/fructuoso/7-passos-para-construir-uma-p-o-c-like-a-boss-23lm</link>
      <guid>https://dev.to/fructuoso/7-passos-para-construir-uma-p-o-c-like-a-boss-23lm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#7-passos-para-construir-uma-poc-like-a-boss"&gt;
  &lt;/a&gt;
  7 passos para construir uma P.o.C. LIKE A BOSS
&lt;/h2&gt;

&lt;p&gt;Todos n√≥s j√° nos deparamos com situa√ß√µes em que precisamos desenvolver algo novo, ou que possui requisitos peculiares e n√£o temos uma solu√ß√£o "pronta".&lt;/p&gt;

&lt;p&gt;Em alguns casos desenvolver, ou tentar desenvolver, a solu√ß√£o completa pode demandar tempo e/ou dinheiro (normalmente uma coisa leva a outra).&lt;/p&gt;

&lt;p&gt;Uma das alternativas para evitar um grande investimento quando n√£o h√° um n√≠vel aceit√°vel de seguran√ßa no caminho que est√° sendo seguido, √© realizar pequenos experimentos. Afinal de contas se algo der errado, o preju√≠zo ser√° muito menor e haver√° tempo para pensar em outras alternativas.&lt;/p&gt;

&lt;p&gt;No desenvolvimento de software esses experimentos s√£o chamados de POC (Proof Of Concept), ou "Prova de Conceito".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-requisitos"&gt;
  &lt;/a&gt;
  1. Requisitos
&lt;/h3&gt;

&lt;p&gt;A primeira etapa do processo √© entender quais s√£o nossos requisitos e restri√ß√µes, pois todo o trabalho ser√° realizado com objetivo de validar o qu√£o aderente a eles o experimento √©.&lt;/p&gt;

&lt;p&gt;Nesta etapa vamos tamb√©m dividir nossos requisitos em essenciais e desej√°veis. Esta segrega√ß√£o ajudar√° em todo o processo. Pensem comigo:&lt;/p&gt;

&lt;p&gt;Faz sentido continuar investindo tempo e dinheiro em um estudo em que n√≥s j√° sabemos que n√£o atender√° nossos requisitos essenciais?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-estabele%C3%A7a-crit%C3%A9rios-m%C3%A9tricas"&gt;
  &lt;/a&gt;
  2. Estabele√ßa Crit√©rios (m√©tricas)
&lt;/h3&gt;

&lt;p&gt;Uma vez que os requisitos da prova de conceito est√£o claros √© necess√°rio estabelecer quais os crit√©rios que ser√£o utilizados para evidenciar se a solu√ß√£o desenvolvida atende ou n√£o aos requisitos estabelecidos inicialmente, esses crit√©rios devem ser tang√≠veis, ou seja, nossas respostas para estes crit√©rios n√£o podem ser subjetivas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-delimite-o-escopo"&gt;
  &lt;/a&gt;
  3. Delimite o Escopo
&lt;/h3&gt;

&lt;p&gt;Nesta etapa ser√° definido o que efetivamente ser√° implementado na prova de conceito, lembrando sempre que o principal objetivo da prova de conceito √© poupar tempo e dinheiro, logo, o esfor√ßo para a constru√ß√£o da mesma deve ser significantemente menor que o esfor√ßo para construir a solu√ß√£o definitiva.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-plano-de-a%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  4. Plano de A√ß√£o
&lt;/h3&gt;

&lt;p&gt;Com o escopo estabelecido √© preciso elaborar um plano de a√ß√£o indicando como o escopo ser√° atendido e quanto tempo ser√° investido para validar a teoria, ou seja, precisamos identificar as etapas que precisam ser realizadas e o esfor√ßo estimado para a conclus√£o de cada uma delas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-handson-implementa%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  5. Hands-On (Implementa√ß√£o)
&lt;/h3&gt;

&lt;p&gt;Durante a implementa√ß√£o efetiva da POC precisamos ter em mente que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Este c√≥digo deve ser funcional, por√©m ele √© apenas um experimento;&lt;/li&gt;
&lt;li&gt;Apesar de n√£o possuir as mesmas restri√ß√µes de qualidade que um c√≥digo "normal", o c√≥digo precisa estar leg√≠vel para que possa ser analisado e potencialmente reutilizado em uma implementa√ß√£o definitiva;&lt;/li&gt;
&lt;li&gt;Seus esfor√ßos devem SEMPRE estar 100% direcionados para responder √†s perguntas estabelecidas anteriormente.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-documente"&gt;
  &lt;/a&gt;
  6. Documente
&lt;/h3&gt;

&lt;p&gt;Com a prova de conceito devidamente implementada √© hora de voltar √†s m√©tricas e validar o quanto a solu√ß√£o constru√≠da √© aderente aos requisitos e restri√ß√µes definidos no primeiro passo.&lt;/p&gt;

&lt;p&gt;Nesse momento os requisitos que j√° estavam divididos em (essenciais e desej√°veis) agora passam a ser sub-divididos tamb√©m em (simples e complexos) para implementar de forma definitiva.&lt;/p&gt;

&lt;p&gt;√â recomend√°vel documentar os resultados encontrados para apresentar aos stakeholders e manter o hist√≥rico do porque tal decis√£o foi tomada.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;NOTA: Pode ser necess√°rio testar outras abordagens e comparar os resultados at√© que se chegue em um resultado satisfat√≥rio.&lt;/u&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-road-map"&gt;
  &lt;/a&gt;
  7. Road Map
&lt;/h3&gt;

&lt;p&gt;Ao chegar nessa etapa temos nossa prova de conceito efetivamente pronta para ser desenvolvida para se tornar um entreg√°vel.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>productivity</category>
      <category>development</category>
      <category>agile</category>
    </item>
    <item>
      <title>Accessibility Automated Tools - What to Expect</title>
      <author>Neha Sharma </author>
      <pubDate>Sun, 03 Oct 2021 12:53:26 +0000</pubDate>
      <link>https://dev.to/hellonehha/accessibility-automated-tools-what-to-expect-546m</link>
      <guid>https://dev.to/hellonehha/accessibility-automated-tools-what-to-expect-546m</guid>
      <description>&lt;p&gt;There are a few popular tools available for the accessibility testing such as Lighthouse, AXE Tool , and plugins.&lt;/p&gt;

&lt;p&gt;Developers and Testers expect that these tools magically help them cover 100% accessibility issues. However, accessibility tools cannot provide you 100% cover from the issues but it can help you to atleast report some % of issues and how to fix them. &lt;/p&gt;

&lt;p&gt;Today we are going to learn the issues automated took can and cannot report:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-tools"&gt;
  &lt;/a&gt;
  Common Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.deque.com/axe/devtools/"&gt;Axe tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/nerdefocus/lpfiljldhgjecfepfljnbjnbjfhennpd"&gt;Keyboard focus Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/eslint-plugin-jsx-a11y"&gt;ESlint JSX A11y Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coolors.co/contrast-checker/112a46-acc8e5"&gt;Color Contrast Analyser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Can&lt;/th&gt;
&lt;th&gt;Can't&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;alt tags&lt;/td&gt;
&lt;td&gt;Can identify if alt tags are missing&lt;/td&gt;
&lt;td&gt;Can't identify if alt tags are meaningful&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Labels&lt;/td&gt;
&lt;td&gt;Can identify if labels are missing &amp;amp; order is incorrect&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Color contrast&lt;/td&gt;
&lt;td&gt;Can identify if color contrast is failing&lt;/td&gt;
&lt;td&gt;Can't identify if color contrast on images and gradient&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Focus&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Can't identify if the focus order is correct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Order of Headings&lt;/td&gt;
&lt;td&gt;Can identify if order of H1-H6 is correct&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ARIA&lt;/td&gt;
&lt;td&gt;Can identify if ARIA tag is missing&lt;/td&gt;
&lt;td&gt;Can't identify if the usage is correct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Role &amp;amp; landmarks&lt;/td&gt;
&lt;td&gt;Can identify if ARIA role and landmarks is missing&lt;/td&gt;
&lt;td&gt;Can't identify if the usage is correct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Semantic&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Can't identify if the semantic tags are used or not&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Responsive&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Tools cannot identify if app is not responsive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Experience&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Can't identify if the experience of assertive technologies is similar to non-assertive technologies&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The above points are important to understand the scope of automated testing. While using the tools one should be aware 'what' the tools will be testing and do the manual testing of 'what cannot' be tested by tools.&lt;/p&gt;

&lt;p&gt;Happy Learning!!&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>InterSystems Interoperability Contest</title>
      <author>InterSystems Developer</author>
      <pubDate>Sun, 03 Oct 2021 12:46:12 +0000</pubDate>
      <link>https://dev.to/intersystems/intersystems-interoperability-contest-3d1c</link>
      <guid>https://dev.to/intersystems/intersystems-interoperability-contest-3d1c</guid>
      <description>&lt;p&gt;Hey Developers,&lt;/p&gt;

&lt;p&gt;Welcome to the next InterSystems online¬†programming competition:¬†&lt;/p&gt;

&lt;p&gt;üèÜ¬†&lt;a href="https://openexchange.intersystems.com/contest/18"&gt;&lt;strong&gt;InterSystems Interoperability Contest&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;¬†&lt;/strong&gt;üèÜ&lt;/p&gt;

&lt;p&gt;Duration:¬†&lt;strong&gt;October 04-24, 2021&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our prize pool increased to¬†&lt;strong&gt;$9,450&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B3IxSIGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6qnt530vm0kykgh960c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B3IxSIGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6qnt530vm0kykgh960c.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Prizes&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Experts Nomination&lt;/strong&gt;¬†- a specially selected jury will determine winners:&lt;/p&gt;

&lt;p&gt;
  ü•á¬†&lt;strong&gt;1st place - $4,000&lt;/strong&gt;¬†
&lt;/p&gt;

&lt;p&gt;
  ü•à¬†&lt;strong&gt;2nd place - $2,000¬†&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  ü•â¬†&lt;strong&gt;3rd place - $1,000&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  üåü &lt;strong&gt;NEW PRIZES:¬†4-10th places - $100&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.¬†Community winners&lt;/strong&gt;¬†-¬†applications that will receive the most votes¬†in total:&lt;/p&gt;

&lt;p&gt;
  ü•á¬†&lt;strong&gt;1st place - $1,000&lt;/strong&gt;¬†
&lt;/p&gt;

&lt;p&gt;
  ü•à¬†&lt;strong&gt;2nd place - $500¬†&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  ü•â¬†&lt;strong&gt;3rd place - $250&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If several participants score¬†the same amount of votes, they all are considered winners, and the money prize is shared among the winners.¬†¬†&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Who can participate?&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;Any Developer Community member, except for InterSystems employees (ISC contractors allowed).¬†&lt;a href="https://login.intersystems.com/login/SSO.UI.Register.cls?referrer=https%3A//community.intersystems.com/"&gt;Create an account!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üë•¬†&lt;strong&gt;Developers can team up¬†&lt;/strong&gt;to create a collaborative application. Allowed from 2 to 5 developers in one team.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do not forget to highlight your team members in the README of your application ‚Äì¬†DC user¬†profiles.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Contest Period&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;üõ†¬†&lt;em&gt;&lt;u&gt;October 04-17&lt;/u&gt;&lt;/em&gt;_&lt;u&gt;:&lt;/u&gt;¬†_Application development and registration phase.&lt;/p&gt;

&lt;p&gt;‚úÖ¬†&lt;em&gt;&lt;u&gt;October 18¬†- 24&lt;/u&gt;&lt;/em&gt;_&lt;u&gt;:&lt;/u&gt;¬†_Voting period.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Developers can improve their apps throughout the entire registration and voting period.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;The topic&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;üí°¬†&lt;/strong&gt;¬†&lt;strong&gt;Interoperability solutions¬†for InterSystems IRIS and IRIS for Health¬†üí°&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Develop an interoperability solution or a solution that helps to develop or/and maintain Interoperability solutions using InterSystems IRIS or InterSystems IRIS for Health.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Accepted applications: new to Open Exchange apps¬†or existing ones, but with a significant improvement. Our team will review all applications before approving them for the contest.&lt;/li&gt;
&lt;li&gt;The application should work either on¬†&lt;a href="http://hub.docker.com/_/intersystems-iris-data-platform/plans/222f869e-567c-4928-b572-eb6a29706fbd?tab=instructions"&gt;IRIS Community Edition&lt;/a&gt;¬†or¬†&lt;a href="https://hub.docker.com/_/intersystems-iris-for-health/plans/80ae1325-d535-484e-8307-b643c2865dd8?tab=instructions"&gt;IRIS for Health Community Edition&lt;/a&gt;¬†or¬†&lt;a href="https://hub.docker.com/_/intersystems-iris-data-platform/plans/222f869e-567c-4928-b572-eb6a29706fbd?tab=instructions"&gt;IRIS Advanced Analytics Community Edition&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The application should be Open Source and published on GitHub.&lt;/li&gt;
&lt;li&gt;The README¬†file to the application should be in English,¬†contain the installation steps, and contain either the video demo or/and a description of how the application works.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Helpful resources&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;¬†For beginners with InterSystems¬†IRIS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learning.intersystems.com/course/view.php?id=967&amp;amp;ssoPass=1"&gt;Build a Server-Side Application with InterSystems IRIS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.intersystems.com/post/learning-path-beginners"&gt;Learning Path for beginners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Sample¬†applications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://openexchange.intersystems.com/package/ensemble-interoperability-formation"&gt;Ensemble/Interoperability Formation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openexchange.intersystems.com/package/iris-interoperability-template"&gt;IRIS-Interoperability-template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openexchange.intersystems.com/package/ETL-Interoperability-Adapter"&gt;ETL-Interoperability-Adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openexchange.intersystems.com/package/irishealth-ensdemo"&gt;InterSystems IRIS for Health ENSDEMO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openexchange.intersystems.com/package/HL7-and-SMS-Interoperability-Demo"&gt;HL7 and SMS Interoperability Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openexchange.intersystems.com/package/Twitter-Sentiment-Analysis-with-IRIS"&gt;Twitter Sentiment Analysis with IRIS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openexchange.intersystems.com/package/Healthcare-HL7-XML"&gt;Healthcare HL7 XML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openexchange.intersystems.com/package/RabbitMQ-adapter"&gt;RabbitMQ adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openexchange.intersystems.com/package/pex-demo"&gt;PEX demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3.¬†&lt;/strong&gt;Online courses &amp;amp; videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
  &lt;a href="https://learning.intersystems.com/course/view.php?id=1437"&gt;Interoperability for Business&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;a href="https://learning.intersystems.com/course/view.php?id=1074"&gt;Interoperability QuickStart&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;a href="https://learning.intersystems.com/course/view.php?id=1251"&gt;Interoperability Resource Guide - 2019&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/_v-QVavt5ZY"&gt;Intelligent Interoperability&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/FIf-bhMcaqU"&gt;Interoperability for Health Overview&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;¬†How to submit your app¬†to the contest:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/DBh79bCayh4"&gt;How to publish an application on Open Exchange&lt;/a&gt;¬†&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.intersystems.com/post/second-iris-online-programming-contest-intersystems-iris-rest-api#comment-119891"&gt;How to submit an application for the contest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Judgment&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Voting rules will be announced soon. Stay tuned!¬†&lt;/p&gt;

&lt;p&gt;So!&lt;/p&gt;

&lt;p&gt;Ready. Set. Code.&lt;/p&gt;

&lt;p&gt;Please join our exciting coding marathon!&lt;/p&gt;




&lt;p&gt;‚ùóÔ∏è Please check out the &lt;a href="https://openexchange.intersystems.com/markdown?url=%2Fassets%2Fdoc%2Fcontest-terms.md"&gt;Official¬†Contest Terms here&lt;/a&gt;.‚ùóÔ∏è&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>programming</category>
      <category>github</category>
    </item>
  </channel>
</rss>
