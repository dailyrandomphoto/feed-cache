<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Basics of Java #10</title>
      <author>Chathu Rashmini</author>
      <pubDate>Mon, 10 May 2021 04:39:20 +0000</pubDate>
      <link>https://dev.to/chathurashmini/basics-of-java-10-lb2</link>
      <guid>https://dev.to/chathurashmini/basics-of-java-10-lb2</guid>
      <description>&lt;p&gt;In this article we are going to learn about how to read user inputs in java.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#read-user-inputs"&gt;
  &lt;/a&gt;
  Read user inputs
&lt;/h1&gt;

&lt;p&gt;To read user inputs first you need to import &lt;code&gt;java.util.Scanner&lt;/code&gt;. Here &lt;code&gt;scanner&lt;/code&gt; is a predefined java class. Let's see how we can read inputs from the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Age: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 01&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;inputAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 02&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Line 01 prints 'Age: ' in the terminal for the user to input his age. Line 02 has created an object named &lt;code&gt;inputAge&lt;/code&gt; which belongs to &lt;code&gt;Scanner&lt;/code&gt; class. You can see that I have used &lt;code&gt;new&lt;/code&gt; to create the object. Then within the parenthesis I have entered &lt;code&gt;System.in&lt;/code&gt;. This is to get inputs into the system. Think it in the same way as &lt;code&gt;System.out&lt;/code&gt;. So line 02 reads the user input (age that user enters) and assigns it to &lt;code&gt;inputAge&lt;/code&gt;.&lt;br&gt;
Now try to print &lt;code&gt;inoutAge&lt;/code&gt;. If you run the following command,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputAge&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you will see that the program does not print the inputted age, but a long sentence. So how can you print the age? For this you have to use &lt;code&gt;nextByte()&lt;/code&gt; predefined method from &lt;code&gt;Scanner&lt;/code&gt; class. It scans the next token of the input as a byte. Check the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Age: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 01&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;inputAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 02&lt;/span&gt;
        &lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inputAge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextByte&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// line 03&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You are "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 04&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here in line 03 we have declared a new variable &lt;code&gt;age&lt;/code&gt; which is of type &lt;code&gt;byte&lt;/code&gt;. Then we have applied &lt;code&gt;nextByte()&lt;/code&gt; method to the &lt;code&gt;inputAge&lt;/code&gt;. Then when you print the &lt;code&gt;age&lt;/code&gt; in line 04 you can see the output as expected. Also in line 04 'implicit casting' takes place and &lt;code&gt;age&lt;/code&gt; is converted into a string by java itself.&lt;/p&gt;

&lt;p&gt;Try to enter a number like 10.5 (with decimal digits) and check whether the code will run smoothly.&lt;br&gt;
No right? You will definitely get an error. This is because we have declared &lt;code&gt;age&lt;/code&gt; as a &lt;code&gt;byte&lt;/code&gt; type variable. So it does not accept any floating point numbers. For that there is another predefined method &lt;code&gt;nextFloat()&lt;/code&gt; in the &lt;code&gt;Scanner&lt;/code&gt; class. By using it you can take numbers with floating points as user inputs. Go through the code given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Height in meters: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;inputHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inputHeight&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You are "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"m tall."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's see how can we ask the user to input a string and then to print that string in the terminal. Look at the code given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter your name: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 01&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 02&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// line 03&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;userName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 04&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, in line 01 we are asking the user to input his name. Probably he will enter his full name (which means more than one word). Let's assume that he has entered as "Edward Cullen". This name is read by line 02. Now we have to convert this &lt;code&gt;Scanner&lt;/code&gt; object &lt;code&gt;name&lt;/code&gt; into a string. For that here I have used the predefined method &lt;code&gt;next()&lt;/code&gt;. However, when the line 04 prints the output you will only see 'Hello Edward'. Why is that? That is because the &lt;code&gt;next()&lt;/code&gt; method reads only one token. Which means it does not read the whole line. If you want to read the full line use method &lt;code&gt;nextLine()&lt;/code&gt; as shown in the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;inputName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Full Name: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inputName&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLine&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;trim&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Oh hey "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;nextLine()&lt;/code&gt; method reads the full name and assign it to the string &lt;code&gt;fullName&lt;/code&gt;. We have used &lt;code&gt;trim()&lt;/code&gt; method just to eliminate any unnecessary white spaces that might be there in the user input. Using &lt;code&gt;trim()&lt;/code&gt; is not mandatory. If you input name as '        Jacob Black     ', you will get the output as 'Oh hey Jacob Black' without any unnecessary spaces.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Ask the user to enter his name (empName) and salary (salary). Then add a 20,000 bonus to his salary (salWithBonus) and print the line "Hi  your total salary with bonus is ".&lt;br&gt;
Ex: &lt;br&gt;
Input-:&lt;br&gt;
Full Name:      Charlie Swan&lt;br&gt;
Basic Salary: 100000&lt;br&gt;
Expected output-:&lt;br&gt;
Hi Charlie Swan your total salary with bonus is 120000.0&lt;/p&gt;

&lt;p&gt;With that we can wrap up this article. Head to the next article to learn more about java :P&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Let's Build ML Application using Streamlit and Azure in 5mins!!</title>
      <author>SILVOJ RAJESH KUMAR</author>
      <pubDate>Mon, 10 May 2021 04:12:24 +0000</pubDate>
      <link>https://dev.to/rajeshsilvoj/let-s-build-ml-application-using-streamlit-and-azure-in-5mins-477p</link>
      <guid>https://dev.to/rajeshsilvoj/let-s-build-ml-application-using-streamlit-and-azure-in-5mins-477p</guid>
      <description>&lt;p&gt;&lt;strong&gt;Cognitive Services brings AI within reach of every developer—without requiring machine-learning expertise. All it takes is an API call to embed the ability to see, hear, speak, search, understand and accelerate decision-making into your apps. Enable developers of all skill levels to easily add AI capabilities to their apps&lt;/strong&gt;-Microsoft.&lt;/p&gt;

&lt;p&gt;Microsoft has become a cloud-based provider of AI capabilities, machine learning capabilities and sentimental analysis.&lt;br&gt;
we can use the azure cognitive services to build intelligent applications &lt;br&gt;
Step-1: Create a &lt;a href="////portal.azure.com"&gt;Microsoft Azure Account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Step-2:Create a new resource&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tHvmyG6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tx0d2xz6t9jacrunirst.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tHvmyG6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tx0d2xz6t9jacrunirst.PNG" alt="Capture"&gt;&lt;/a&gt;&lt;br&gt;
 Step-3: Search for Translator in resources&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0r1J_i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxhsphszhsqcgg888s0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0r1J_i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxhsphszhsqcgg888s0b.png" alt="Screenshot 2021-05-08 212716"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   -&amp;gt;Give resource name
   -&amp;gt;Select region as eastus
   -&amp;gt;Select free subscription in the pricing tier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cFBtmtRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezfa32c7g5yybomtr3q2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cFBtmtRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezfa32c7g5yybomtr3q2.png" alt="123"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you can see your API keys for the translator app.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CzLCNStW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kllwxld3m60uywuk4ybu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CzLCNStW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kllwxld3m60uywuk4ybu.png" alt="get-cog-serv-keys"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step-4: Let's set up Streamlit.&lt;br&gt;
Step-5:Open your command line install them&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZzFF8Dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjlq5vq41b827duopmtf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZzFF8Dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjlq5vq41b827duopmtf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step-6: There is a good &lt;em&gt;&lt;a href="https://www.udemy.com/course/python-streamlit-for-making-web-applications/"&gt;Streamlit course&lt;/a&gt;&lt;/em&gt; on Udemy. It is a free course for beginners.&lt;br&gt;
Let's set up our application.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M-LbjuA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dwj1z1chpk2rwauoyv2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M-LbjuA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dwj1z1chpk2rwauoyv2.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Explore the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/translator/quickstart-translator?tabs=python"&gt;quick start&lt;/a&gt; guide on the Azure page and get the code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HUO5mlL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mq3tesberp2h7201ln0b.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUO5mlL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mq3tesberp2h7201ln0b.PNG" alt="py code"&gt;&lt;/a&gt;&lt;br&gt;
Step-7: let's change some of the parameters and then our code will be ready. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--btrZKFul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5c123y25u2yjm1jeks5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--btrZKFul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5c123y25u2yjm1jeks5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step-8: Run application:- streamlit run .py in command line.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#try-out-a-working-application-here-httpssharestreamlitiorajeshsilvojscripterappmainapp1py"&gt;
  &lt;/a&gt;
  Try out a working application here: &lt;a href="https://share.streamlit.io/rajeshsilvoj/scripter_app/main/app1.py"&gt;https://share.streamlit.io/rajeshsilvoj/scripter_app/main/app1.py&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Input&lt;/em&gt;:"&lt;br&gt;&lt;br&gt;
The probosci's monkey (Nasalis larvatus) is endemic to the island of Borneo, where it is found predominantly in coastal areas, near rivers and in swamp forests. It is perhaps the most aquatic of the primates and is a fairly good swimmer, capable of swimming underwater; apart from this, it is largely arboreal. This photograph is a composite of three images and shows a probosci's monkey jumping between trees in Labuk Bay in the Malaysian state of Sabah."&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Translated to Italian&lt;/strong&gt;👇:&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hTzLUN_z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6z3nyow09ap9wdpq5iuz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hTzLUN_z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6z3nyow09ap9wdpq5iuz.PNG" alt="output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Translated to Hindi&lt;/strong&gt;👇:&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lhBtGUPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vimqkqpcts4pt9ewugdq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lhBtGUPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vimqkqpcts4pt9ewugdq.PNG" alt="ot_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github repo: &lt;a href="https://github.com/rajeshsilvoj/Scripter-Article"&gt;https://github.com/rajeshsilvoj/Scripter-Article&lt;/a&gt;&lt;br&gt;
Contact me :&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/silvoj-rajesh-kumar-ba655b1a7/"&gt;Linkedin&lt;/a&gt;, &lt;a href="https://www.instagram.com/rajesh_silvoj/"&gt;Instagram&lt;/a&gt;,&lt;a href="https://github.com/rajeshsilvoj"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>azure</category>
      <category>nlp</category>
      <category>machinelearning</category>
      <category>microsoft</category>
    </item>
    <item>
      <title>Project Work: How to Create More in Less Time</title>
      <author>Kirsty Brewster</author>
      <pubDate>Mon, 10 May 2021 03:46:38 +0000</pubDate>
      <link>https://dev.to/kirstybrews/project-work-how-to-create-more-in-less-time-3mg1</link>
      <guid>https://dev.to/kirstybrews/project-work-how-to-create-more-in-less-time-3mg1</guid>
      <description>&lt;p&gt;While working on my final project at the Flatiron School, everything seemed to be in place to allow for a productive experience. My classmates and I would meet everyday for SCRUM, where we would discuss our goals for the day. At the end of every day, we would go over what we had accomplished, so as to keep ourselves accountable. Finally, we had deadlines for when our MVP should be finished, as well as when our entire project would be wrapped up. &lt;/p&gt;

&lt;p&gt;However, there are two major concepts that would have helped me in creating a project that I would have really been proud of after my time at Flatiron. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-8020-rule"&gt;
  &lt;/a&gt;
  The 80/20 Rule
&lt;/h3&gt;

&lt;p&gt;Several times while working on my final project, I would get caught up in small details that really didn't matter that much to the overall vision I set. Worrying a bit too much about the color scheme, line spacing, the inclusion of icons, creating a landing page. While these might have been good to add at some point, there were definitely more important things to focus on first. These smaller tasks were more of a distraction. As a result, I didn't end up including some of the stretch goals I had for my project.&lt;/p&gt;

&lt;p&gt;So what is the 80/20 rule? This is the concept that 20% of our efforts get us 80% of our results. This concept, also called the "Pareto Principle", comes from Vilfredo Pareto, an Italian economist and philosopher from the 1800's. He observed this phenomenon in a few different areas. First, he noticed that 20% of the pea plants in his garden were producing 80% of the healthy pea pods. He also noticed in his home country of Italy, that 80% of the land was owned by 20% of the population. And finally, he noticed that 20% of the companies in his country were generating 80% of total production.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-8020-rule-in-action"&gt;
  &lt;/a&gt;
  The 80/20 rule in action.
&lt;/h4&gt;

&lt;p&gt;When it comes to our personal projects, the 80/20 rule is about prioritization. First, break your project down into steps that lead to the final product. From there, identify the most important steps. This is where you need to put the majority of your focus. You could argue that "the devil's in the details", but trying to give 110% into every little detail in your project is more rooted in perfectionism. Sometimes it's even a tactic we use to procrastinate on a problem we deem too difficult in the moment. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parkinsons-law"&gt;
  &lt;/a&gt;
  Parkinson's Law
&lt;/h3&gt;

&lt;p&gt;Parkinson's Law is the idea that work expands to fill the time allotted. After I finished the MVP on my final project, I didn't really feel like I added any significant features. In all honesty, I was a little aimless and probably gave myself too much time to do things like add form validations and error messages. While these were useful features, I feel like I could have taken less time to finish them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#parkinsons-law-in-action"&gt;
  &lt;/a&gt;
  Parkinson's Law in action.
&lt;/h4&gt;

&lt;p&gt;Set time limits for each task that you tackle on your project. If you give yourself a full day to implement a feature, you'll probably take all day. If you find yourself comfortably finishing a task in your given time frame, maybe try to cut that length of time in half the next time you try that task. If you find yourself stretched thin in a given time frame, increase it the next time around. There's a happy middle ground somewhere. It's all about experimentation.&lt;/p&gt;

&lt;p&gt;Even with deadlines, it's probably inevitable that you'll find yourself stuck on a task. If you've spent a lot of time on such a task, go back to the 80/20 rule and ask yourself if what you're stuck on is really that important to the overall goal. If it's not, maybe it's time to move on. &lt;/p&gt;

&lt;p&gt;In my case, I should have done this for a lot of design related tasks. However, we can't really throw design completely out of the window. People care about the look of a site or app. In that case, make design it's own category in the larger picture of your project. Now go back to the 80/20 rule: Out of the steps we could take for designing our project, what are the most important? Got it? Okay, maybe...we don't need a landing page all that bad? Or maybe we don't need to worry so much about the design of our buttons? However, if you're someone who wants to do more UX type of work, maybe it's beneficial for you to spend a little more time on design. Use your best judgement based on what your broader goals are.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h3&gt;

&lt;p&gt;While you might be thinking that each project you make needs to be the absolute best it can be, remember that knowledge comes with practice. You could spend your whole life trying to create the best app and never achieve it. You have to experiment and learn through trial and error. &lt;strong&gt;In the arena of creation, quantity leads to quality.&lt;/strong&gt; Even if you create something and think it could be better, take that thought and apply it to the next thing you create.&lt;/p&gt;

&lt;p&gt;Hopefully these concepts can help you prioritize and get more done in less time. I wish I had thought of them while I was still working on my final project at Flatiron! I'll definitely be taking what I learned from the experience and applying it to future projects. Heck, I even applied these concepts to this blog post.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.forbes.com/sites/kevinkruse/2016/03/07/80-20-rule/?sh=6efb4f563814"&gt;The 80/20 Rule And How It Can Change Your Life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lifehack.org/articles/featured/how-to-use-parkinsons-law-to-your-advantage.html"&gt;How to Use Parkinson's Law to Get More Done in Less Time&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Supabase Schema Visualizer - No installation/login</title>
      <author>zernonia</author>
      <pubDate>Mon, 10 May 2021 03:45:51 +0000</pubDate>
      <link>https://dev.to/zernonia/supabase-schema-visualizer-no-installation-login-49kg</link>
      <guid>https://dev.to/zernonia/supabase-schema-visualizer-no-installation-login-49kg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#the-idea-and-inspiration"&gt;
  &lt;/a&gt;
  The Idea and Inspiration 💡
&lt;/h1&gt;

&lt;p&gt;Recently, I got addicted to &lt;a href="https://supabase.io/"&gt;Supabase ⚡&lt;/a&gt; as an &lt;strong&gt;Open-Source Firebase Alternative&lt;/strong&gt;, and I'm having so much fun with it. It has such wonderful UI, and well-written documentation, that allows me to spin up a project easily.&lt;/p&gt;

&lt;p&gt;Because of that, I've started to learn &lt;strong&gt;PostgreSQL&lt;/strong&gt;, which Supabase built on top of. I quickly realized that how great would it be if I can easily visualize all my tables, and the relationship with one another (since PostgreSQL is a relational DB), and there's when I found out about &lt;strong&gt;Database Schema&lt;/strong&gt;🔥.&lt;/p&gt;

&lt;p&gt;😥 Unfortunately I found many Database Schema Visualizer online which either requires me to install database software, or login with email, which I do not want to . Thus, this gave me the idea to code it myself, since I'm a Web Developer💻.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#showcase"&gt;
  &lt;/a&gt;
  Showcase 🌟
&lt;/h1&gt;

&lt;p&gt;If you are Supabase user, or interested in using the visualizer, here's the link to it: &lt;a href="https://supabase-schema.vercel.app/"&gt;Supabase Schema Visualizer&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/zernonia"&gt;
        zernonia
      &lt;/a&gt; / &lt;a href="https://github.com/zernonia/supabase-schema"&gt;
        supabase-schema
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://github.com/zernonia/supabase-schema"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YVjvrFcT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/zernonia/supabase-schema/master/src/assets/logo.svg" alt="Logo" width="80" height="80"&gt;
  &lt;/a&gt;
  &lt;/p&gt;
&lt;h3&gt;
Supabase Schema&lt;/h3&gt;
  &lt;p&gt;
    Secured &amp;amp; Simple &lt;strong&gt;&lt;a href="https://supabase.io/" rel="nofollow"&gt;Supabase&lt;/a&gt; Schema Visualizer.&lt;/strong&gt;
    &lt;br&gt;
    No installations • No Database password required
    &lt;br&gt;
    &lt;br&gt;
    &lt;a href="https://supabase-schema.vercel.app/" rel="nofollow"&gt;View Demo&lt;/a&gt;
    ·
    &lt;a href="https://github.com/zernonia/supabase-schema/issues"&gt;Report Bug&lt;/a&gt;
    ·
    &lt;a href="https://github.com/zernonia/supabase-schema/issues"&gt;Request Feature&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/zernonia/supabase-schema/master/images/main.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hRUW2JSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/zernonia/supabase-schema/master/images/main.png" alt="Supabase Schema"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
🚀 Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
🔨 No installations&lt;/li&gt;
&lt;li&gt;
🔒 Persistent State in LocalStorage&lt;/li&gt;
&lt;li&gt;
🚪 Login-less&lt;/li&gt;
&lt;li&gt;
👀 No Sensitive info required&lt;/li&gt;
&lt;li&gt;
🤚 Moveable Schema for own design&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
📇 About The Project&lt;/h2&gt;
&lt;p&gt;I look around the internet and found many Database Schema Visualizers that require me to either download the software, or login to view my Database Schema. I feel like there's too many unneccessary steps, just to view the schema.&lt;/p&gt;
&lt;p&gt;Thus, I've decided to take this opportunity to build this &lt;strong&gt;Open Source, Free, Login-less and Secured&lt;/strong&gt; Supabase Schema Visualizer 🔥&lt;/p&gt;
&lt;h3&gt;
🔨 Built With&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://v3.vuejs.org/" rel="nofollow"&gt;Vue 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vitejs.dev/" rel="nofollow"&gt;Vite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://windicss.org/" rel="nofollow"&gt;WindiCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
🐾 Instructions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://app.supabase.io/" rel="nofollow"&gt;Supabase App&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Select your Project&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;Settings&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;In Settings tab, Go to &lt;code&gt;API&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;Config&lt;/code&gt;, copy &lt;code&gt;URL&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;API Keys&lt;/code&gt;, copy &lt;code&gt;anon&lt;/code&gt; &lt;code&gt;public&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Paste both value into…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/zernonia/supabase-schema"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;If you find this useful, remember to 🌟 it on Github&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lend-me-a-hand"&gt;
  &lt;/a&gt;
  Lend me a Hand ✋
&lt;/h1&gt;

&lt;p&gt;When you navigate through the App, you might notice some bugs or possible improvement, feel free to contribute to this project.💘 &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ultimate-hope"&gt;
  &lt;/a&gt;
  Ultimate Hope 🔮
&lt;/h1&gt;

&lt;p&gt;My Vision for this project is hopefully that it might be absorbed  into official &lt;a href="https://app.supabase.io/"&gt;Supabase App&lt;/a&gt;, where developer can quickly manage their project's schema visually without leaving the app. So if you find it helpful and wish to have this features, a star on Github would be very much appreciated.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me 🐤
&lt;/h1&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3jMu1t9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1174236220626472962/nl2d4B7Z_normal.jpg" alt="Zernonia profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Zernonia
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/zernonia"&gt;@zernonia&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I've build a &lt;a href="https://twitter.com/supabase_io"&gt;@supabase_io&lt;/a&gt; Schema Visualizer so that you and I can quickly visualize schema without installing additional software.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/uh532J3L2a"&gt;supabase-schema.vercel.app&lt;/a&gt;&lt;br&gt;&lt;br&gt;Build with:&lt;br&gt;&lt;a href="https://twitter.com/vuejs"&gt;@vuejs&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/vite_js"&gt;@vite_js&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/windi_css"&gt;@windi_css&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/vueuse"&gt;@vueuse&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:31 PM - 09 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1391430752462508042" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1391430752462508042" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1391430752462508042" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h1&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you 🙏
&lt;/h1&gt;

</description>
      <category>showdev</category>
      <category>vue</category>
      <category>vite</category>
      <category>supabase</category>
    </item>
    <item>
      <title>LifeKnifeX - a Collection of Life Management Tools</title>
      <author>Dylan Boyd</author>
      <pubDate>Mon, 10 May 2021 03:39:48 +0000</pubDate>
      <link>https://dev.to/phantomraa/lifeknifex-a-collection-of-life-management-tools-49n3</link>
      <guid>https://dev.to/phantomraa/lifeknifex-a-collection-of-life-management-tools-49n3</guid>
      <description>&lt;p&gt;Everyone has their own unique set of priorities, goals, and views of the world and themselves. On top of that, you or someone else you know may not be goal-oriented a person in the first place, instead shifting their focus to intuition and practical application to the world around them.&lt;/p&gt;

&lt;p&gt;For those of us who are goal-oriented, however, managing those goals at scale (once again refining the audience to those with markedly busy minds) can become cumbersome without help. If it's not forgetting the goals you had in mind during your brainwave in the day before, it's trying to recall the priority structure that you had; furthermore, it becomes useful to have these goals in your life if you can properly understand if you've been &lt;strong&gt;reaching your own standards&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introductions"&gt;
  &lt;/a&gt;
  Introductions
&lt;/h2&gt;

&lt;p&gt;Given my experience in both setting goals and writing &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; and &lt;a href="https://www.djangoproject.com"&gt;Django&lt;/a&gt; applications (notably in Stopclutch)...&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/phantomraa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q_6AVogR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--gH7he-S8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/623344/0f1fe944-c96c-4adf-9eaf-91265a34e0a1.jpeg" alt="phantomraa image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/phantomraa/stopclutch-a-django-race-manager-aee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Stopclutch - a Django Race Manager&lt;/h2&gt;
      &lt;h3&gt;Dylan Boyd ・ May 8 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#django&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#heroku&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;...I set out to design a front-end and back-end pair called &lt;strong&gt;LifeKnifeX&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BXdVtRYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/home.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BXdVtRYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/home.png" alt="LifeKnifeX home"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The name was suggested to me after announcing that I was designing this tool which was "cool enough to slice through the cake of life". The &lt;em&gt;X&lt;/em&gt; at the end was more so for domain naming and IP reasons.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-objective-in-a-nutshell"&gt;
  &lt;/a&gt;
  The Objective in a Nutshell
&lt;/h2&gt;

&lt;p&gt;LifeKnifeX aims to cover the "slices" of life that pertain to goal-setting, personal performance metrics, continuous improvement of oneself, and discipline in areas one could call "classic offenders", such as diet and habit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#walk-through"&gt;
  &lt;/a&gt;
  Walk Through
&lt;/h2&gt;

&lt;p&gt;The above screenshot of the home page is where users land, giving them a high-level overview of what possible areas the site provides assistance with in one's life. As of these screenshots, this includes &lt;em&gt;Nutrition&lt;/em&gt; and &lt;em&gt;Goals&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The idea between these two modules, designed as equally applicable to the other planned modules on the home page, is about regular check-ins, and being rewarded for consistency of attention paid to these areas. Such reward would take place through the &lt;em&gt;Score&lt;/em&gt; function, though &lt;em&gt;Score&lt;/em&gt; will not be covered in this post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nutrition"&gt;
  &lt;/a&gt;
  Nutrition
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;Nutrition&lt;/em&gt; card provides both direct access and shortcuts to deeper functions within the module itself. When a user first decides to &lt;em&gt;Visit&lt;/em&gt; nutrition, they're likely meet with a notice that they've yet to log something they consumed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sTtURHSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/empty-nutrition.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sTtURHSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/empty-nutrition.png" alt="LifeKnifeX empty nutrition"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The app is intelligent enough to display a different message if the user hasn't logged any food to begin with. In this situation, the &lt;em&gt;Food Library&lt;/em&gt; button disappears, and the message changes to inform them that they must first add a food they wish to log.&lt;/p&gt;

&lt;p&gt;Upon navigating to the &lt;em&gt;Food Library&lt;/em&gt; itself in this situation, an appropriate and similar message is shown there, too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QXE-T6Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/food-library-empty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QXE-T6Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/food-library-empty.png" alt="LifeKnifeX food library - empty"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The form to add a new food allows a subjective determination of whether it's of good or bad quality along a &lt;a href="https://en.wikipedia.org/wiki/Likert_scale"&gt;Likert scale&lt;/a&gt;. This food can also have an image assigned to it for quick reference, and to be easy on the eyes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P5KaNoEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/new-food.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P5KaNoEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/new-food.png" alt="LifeKnifeX new food"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the food is added, a confirmation toast is shown as such:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xzXluf9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/food-saved-toast.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xzXluf9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/food-saved-toast.png" alt="LifeKnifeX food saved toast"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will then appear in the &lt;em&gt;Food Library&lt;/em&gt;, replacing the previous guidance message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6TT8ulXb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/food-library-full.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6TT8ulXb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/food-library-full.png" alt="LifeKnifeX food library - full"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since Django is used for the back end, it makes for easy management of &lt;code&gt;Food&lt;/code&gt; and any other model in the app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XRqDWEzT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/admin-food-list.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XRqDWEzT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/admin-food-list.png" alt="LifeKnifeX admin - food list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One can then log a nutrition (or consumption) record against that food. In doing so, one can specify the food they ate , when they consumed it (because ice cream sounds good for lunch), and how much they had.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NisR9wSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/log-consumption.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NisR9wSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/log-consumption.png" alt="LifeKnifeX log consumption"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;When&lt;/em&gt; field is generalised to hour groups of the current day no later than the current hour. This is to dissuade users from allowing a backlog of consumption records to build up either in their head or on paper; by logging it at the source as soon as possible, the app works to encourage a general philosophy of consistency and discipline.&lt;/p&gt;

&lt;p&gt;The intrinsic benefit and purpose of the &lt;em&gt;Quantity&lt;/em&gt; field is to have a more complex version of &lt;code&gt;Quantity • Quality&lt;/code&gt; to categorically rate a user's health in each consumption, and then generate statistics across days or any arbitrary time period.&lt;/p&gt;

&lt;p&gt;Saving a consumption record shows a similar toast to before:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3BbI7lgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/consumption-logged-toast.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3BbI7lgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/consumption-logged-toast.png" alt="LifeKnifeX consumption logged toast"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This consumption then appears in the list, once again replacing the previous empty message on the corresponding page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCejW7D5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/nutrition-list.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCejW7D5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/nutrition-list.png" alt="LifeKnifeX nutrition list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similar to before, this can be seen and managed in the admin:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cti9wLu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/admin-consumption-list.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cti9wLu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/admin-consumption-list.png" alt="LifeKnifeX admin - consumption list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h3&gt;

&lt;p&gt;When visiting the &lt;em&gt;Goals&lt;/em&gt; section of the site, one is met with a similar guidance screen to before:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XomnEFTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/goals-empty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XomnEFTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/goals-empty.png" alt="LifeKnifeX goals empty"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding a goal is performed through a similar procedure, clicking on the big pink button to bring up a form:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EA1KzHL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/new-goal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EA1KzHL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/new-goal.png" alt="LifeKnifeX new goal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Question&lt;/em&gt;, &lt;em&gt;Style&lt;/em&gt;, and &lt;em&gt;Start Date&lt;/em&gt; fields should be familiar and self-explanatory to many, behaving as intuition would have you guess. However, the &lt;em&gt;Test&lt;/em&gt; field is slightly nuanced.&lt;/p&gt;

&lt;p&gt;The idea, following on from the precedent set by a &lt;code&gt;Goal&lt;/code&gt;, is to allocate accountability to users to ensure continued contribution; this then helps the app help them. By choosing one of &lt;em&gt;At least every&lt;/em&gt; or &lt;em&gt;No more than every&lt;/em&gt; options, the user gets to define both the sentiment, and the priority of the goal in question; this effectively says whether the goal is intrinsically &lt;em&gt;good&lt;/em&gt; or &lt;em&gt;bad&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The final &lt;em&gt;Test&lt;/em&gt; option, &lt;em&gt;Never&lt;/em&gt; provides no penalty or action taken on the user not contributing answers.&lt;/p&gt;

&lt;p&gt;Saving a &lt;code&gt;Goal&lt;/code&gt; shows a similar toast message, and then redirects to the Goals page to show the newly saved item:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--byjSkYRz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/goals-full.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--byjSkYRz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/goals-full.png" alt="LifeKnifeX goals full"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This can then be viewed in the admin:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bPCwHaAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/admin-goal-list.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bPCwHaAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/admin-goal-list.png" alt="LifeKnifeX admin - goal list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The admin can also edit a &lt;code&gt;Goal&lt;/code&gt;, much like other models:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aZG0TBDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/admin-goal-edit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aZG0TBDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/admin-goal-edit.png" alt="LifeKnifeX admin - goal edit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a goal hasn't been answered on the current day, an exclamation mark will appear in its card. A user can then answer that goal by clicking on the pink &lt;em&gt;Log Answer&lt;/em&gt; button, bringing up the answer form:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--05vFR580--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/goal-answer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05vFR580--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/goal-answer.png" alt="LifeKnifeX goal answer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Considerably simple, this page shows one goal at a time, allowing the user to choose an answer defined by the &lt;em&gt;Style&lt;/em&gt; of the goal as seen the previous form.&lt;/p&gt;

&lt;p&gt;Once answered, the previous warning message will change to show success against answered goals, depending on the &lt;em&gt;Test&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5v5VEZ_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/goal-item-answered.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5v5VEZ_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/goal-item-answered.png" alt="LifeKnifeX goal item answered"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following the now-classic admin pattern, an administrator can edit any answer:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QKMZchif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/admin-answer-edit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QKMZchif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/admin-answer-edit.png" alt="LifeKnifeX admin - answer edit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h2&gt;

&lt;p&gt;The application is broken down into a React front-end and a Django back-end. The Django back-end uses the standard &lt;a href="https://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; database without any frills, and exercises &lt;a href="https://www.django-rest-framework.org"&gt;Django REST framework&lt;/a&gt; for communication from the front-end.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Front-end
&lt;/h3&gt;

&lt;p&gt;This was created with (and still technically uses) &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;create-react-app&lt;/a&gt;, but the project was initially created some time ago; as a result, it uses the older method of &lt;code&gt;npm install&lt;/code&gt; in place of &lt;code&gt;yarn&lt;/code&gt; and other similar commands.&lt;/p&gt;

&lt;p&gt;It uses &lt;a href="https://redux-toolkit.js.org"&gt;Redux Toolkit&lt;/a&gt; to make Redux marginally bearable (more on that story later) for state management, and the wonderful and stunning &lt;a href="https://react.semantic-ui.com"&gt;Semantic UI React&lt;/a&gt; integration to make things look pretty. Icons are provided via &lt;a href="https://github.com/react-icons/react-icons"&gt;React Icons&lt;/a&gt;, which we will see in action shortly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Back-end
&lt;/h3&gt;

&lt;p&gt;Aside from the aforementioned PostgreSQL and Django REST framework, this Django application doesn't do anything particularly out of the ordinary. Django's incredibly convenient model and migration management (alliteration not intended) make for a humorously fast development experience, especially when there are no views to be configured.&lt;/p&gt;

&lt;p&gt;This site could have been made using the standard MERN stack, and while there's nothing wrong with that intrinsically, I was curious (at the time of this application's development) to see what Django was like when communicating with another stack for the front-end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ci-and-deployment"&gt;
  &lt;/a&gt;
  CI and Deployment
&lt;/h2&gt;

&lt;p&gt;Similar to the previous Stopclutch app, both the front-end and back-end use GitHub Actions for testing and deployment checks:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6E9yok86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/ci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6E9yok86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/ci.png" alt="LifeKnifeX CI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once all checks pass on a merged pull request to &lt;code&gt;main&lt;/code&gt;, Heroku will detect this and automatically the appropriate app to the staging &lt;code&gt;environment&lt;/code&gt;. After manual inspection to ensure &lt;code&gt;staging&lt;/code&gt; works as expected, this can be promoted to &lt;code&gt;production&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criticism-and-improvements"&gt;
  &lt;/a&gt;
  Criticism and Improvements
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#building-at-scale"&gt;
  &lt;/a&gt;
  Building at Scale
&lt;/h3&gt;

&lt;p&gt;Contrary to what it may seem, this was a big project, especially to take on alone. I have a fair number of such small app concepts that I like to try out, often in new languages; this gives me a good idea of how much time and effort an idea will usually take, and as a result I tend to have a good idea of project feasibility.&lt;/p&gt;

&lt;p&gt;Here, however, I discovered so much about the front-end from the back-end, and vice-versa. The work increased dramatically as a result; it was here that I had newfound respect for full-stack developers out there in industry. Ironically I'm one of them in a professional capacity, and yet still this took me by surprise.&lt;/p&gt;

&lt;p&gt;The lesson learned here was to start small; it's easy to know when something is too small, but often times your internal alarm as a developer won't go off when your idea isn't quite bite-sized enough.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stick-with-what-you-know"&gt;
  &lt;/a&gt;
  Stick With What You Know
&lt;/h3&gt;

&lt;p&gt;The front-end uses Semantic UI for theming, and more recently I started a branch to see what it would look like if I shifted everything to Bootstrap. The working copy looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YSR2RG75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/upgrade.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YSR2RG75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/dylanjboyd/dylanjboyd.github.io%40main/assets/img/lifeknifex/upgrade.png" alt="LifeKnifeX upgrade"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I very quickly realised that the app would have been considerably more valuable had I stuck with contributing to the core internals and mechanics of the app, instead of playing around with theming. Being both the developer and the user of the app, I could quickly imagine myself complaining at the developer (if the poor soul weren't me) about not putting effort where they should.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-trivialise-fastpaced-stacks"&gt;
  &lt;/a&gt;
  Don't Trivialise Fast-Paced Stacks
&lt;/h3&gt;

&lt;p&gt;If PHP is a serene lake, JavaScript is white-water rafting. I have many a time assumed that it was safe to ignore the goings-on and just carry about my business. Little did I know that coming back to this app to ensure it was ready for this post, that many depended-upon libraries had since long moved on (&lt;code&gt;yarn&lt;/code&gt; in &lt;code&gt;CRA&lt;/code&gt; is a good example here).&lt;/p&gt;

&lt;p&gt;After this experience, it has made me think twice before starting up a React app as a knee-jerk reaction, and instead viewing slower-moving (or perhaps more mature) stacks with greater respect and temptation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This has been an incredibly educational experience that has given me newfound respect for both developers and stacks. This isn't a project I feel particularly compelled to continue however, for the main reason that I discovered how it adds more work to my day to contribute such diet and goal logs than it does give back.&lt;/p&gt;

&lt;p&gt;This is really something I had to implement to truly understand, and so this has by no means been a waste of time. All in all, thank you for reading through to the end!&lt;/p&gt;

&lt;p&gt;Until next time, all the best!&lt;/p&gt;

</description>
      <category>react</category>
      <category>django</category>
      <category>python</category>
      <category>heroku</category>
    </item>
    <item>
      <title>Ultimate Web Development Resources</title>
      <author>DHANUSH N</author>
      <pubDate>Mon, 10 May 2021 03:29:44 +0000</pubDate>
      <link>https://dev.to/dhanushxeno/ultimate-web-development-resources-4n0a</link>
      <guid>https://dev.to/dhanushxeno/ultimate-web-development-resources-4n0a</guid>
      <description>&lt;p&gt;Hi&lt;/p&gt;

&lt;p&gt;The below is my github repository which gives a combination of all the available web development resources from beginner to expert level.&lt;/p&gt;

&lt;p&gt;I will be updating the repository frequently &lt;/p&gt;

&lt;p&gt;Use it 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/DHANUSHXENO/Ultimate-Web-Development-Resources"&gt;Ultimate Web Development Resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more technology related information connect with me&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Dhanush_Xen?s=09"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>showdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>From ARM to Bicep 💪🏽</title>
      <author>Yaser Adel Mehraban </author>
      <pubDate>Mon, 10 May 2021 02:13:56 +0000</pubDate>
      <link>https://dev.to/azure/from-arm-to-bicep-251c</link>
      <guid>https://dev.to/azure/from-arm-to-bicep-251c</guid>
      <description>&lt;p&gt;If you have deployed a resource in &lt;a href="https://azure.microsoft.com/"&gt;Microsoft Azure&lt;/a&gt; as part of your CI/CD pipeline you have probably worked with &lt;a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/overview"&gt;ARM templates&lt;/a&gt;. These templates can be used to automate your resource deployment to Azure and help you to have consistent environments whether it's for testing, development or production purposes. However, there are some shortcomings when it comes to complex environments especially when you have many resources and the dependency between them makes the templates to be either super busy, very complex, or unreadable.&lt;/p&gt;

&lt;p&gt;For that Microsoft has introduced &lt;a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/bicep-overview"&gt;Bicep&lt;/a&gt; which is designed to overcome these issues and help you with your infrastructure as code setup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-not-working-with-arm-templates"&gt;
  &lt;/a&gt;
  What's not working with ARM templates?
&lt;/h2&gt;

&lt;p&gt;Although there are some great features which make working with ARM templates a good experience such as functions, variables, nested templates etc, there is some room for improvements regarding below which has been raised by the community:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;No comments&lt;/strong&gt;: As of now you can't use comments in the JSON files used by &lt;a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/overview"&gt;Azure Resource Manager&lt;/a&gt;. Since the users of ARM templates are mainly developers, comments would potentially help the next user to better understand the template and what's going on in it. I'd personally argue with the fact that if you need comments in a template it probably means you need to refactor it, however, this is something which could come handy at times.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Parameter duplication&lt;/strong&gt;: Since ARM templates are reusable, you would normally use parameters for customising the resource naming, number of resources to be deployed, pricing tier and so on. The problem is that these parameters would be needed and if you haven't provided a default value you would get an error. So you might end up with lots of parameters repeated in different files for different environments, or simply replicating a single file and have lot's of extra parameters which are not needed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Validation&lt;/strong&gt;: Although there is a validate command you can use to validate your templates, there might be times where validation doesn't show you enough information or is not enough to prevent a failure in the actual run.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-bicep"&gt;
  &lt;/a&gt;
  What is Bicep?
&lt;/h2&gt;

&lt;p&gt;Bicep is a DSL (domain specific language) which can be used to write your Infrastructure as Code (IaC). Instead of writing ARM templates you write your code with Bicep and it will transpile it to ARM for you. It simplifies the authoring experience and addresses some of the issues we mentioned earlier. Compared to using JSON, Bicep can help you simplify the template definition a great deal. &lt;/p&gt;

&lt;p&gt;Let's see this using a simple example. Imagine you are trying to create a storage account in Azure, with ARM template this is the minimum you will need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"$schema"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"contentVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"parameters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"storageAccountType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"secureString"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"variables"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"diagStorageAccountName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[concat('diags', uniqueString(resourceGroup().id))]"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"resources"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Microsoft.Storage/storageAccounts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"apiVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2019-06-01"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[variables('diagStorageAccountName')]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"location"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[resourceGroup().location]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sku"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[parameters('storageAccountType')]"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"kind"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Storage"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using Bicep it will be simplified to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;secure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="nx"&gt;storageAccountType&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
&lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resourceGroup&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;diagStorageAccountName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;diags&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;uniqueString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resourceGroup&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="nx"&gt;diagsAccount&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Microsoft.Storage/storageAccounts@2019-06-01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;diagStorageAccountName&lt;/span&gt;
  &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;
  &lt;span class="na"&gt;sku&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;storageAccountType&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nl"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Storage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see how much time and space you could be saving if you were to use Bicep.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;p&gt;When it comes to the benefits of using Bicep, there is a list published in our documentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for all resource types and API versions.&lt;/li&gt;
&lt;li&gt;Better authoring experience using editors such as VS Code (you will get validation, type-safety, intellisense).&lt;/li&gt;
&lt;li&gt;Modularity can be achieved using &lt;a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/bicep-modules"&gt;modules&lt;/a&gt;. You can have modules representing an entire environment or a set of shared resources and use them anywhere in a Bicep file.&lt;/li&gt;
&lt;li&gt;Integration with Azure services such as Azure Policy, Templates specs, and Blueprints.&lt;/li&gt;
&lt;li&gt;No need to store a state file or keep any state. You can even use the &lt;a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-deploy-what-if"&gt;what-if operation&lt;/a&gt; to preview your changes before deploying them.&lt;/li&gt;
&lt;li&gt;Bicep is open source with a strong community supporting it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h2&gt;

&lt;p&gt;Every Bicep resource will have the below syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;symbolic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;resource-type&amp;gt;@&amp;lt;api-version&amp;gt;` = {  
  //properties
  name: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;bicepstorage2063&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;
  location: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;northcentralus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;  
  properties: {
    //...sub properties
  }
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;resource&lt;/code&gt;: is a reserved keyword.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;symbolic name&lt;/code&gt;: is an identifier within the Bicep file which can be used to reference this resource elsewhere.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;resource-type&lt;/code&gt;: is the type of the resource you're defining, e.g. &lt;code&gt;Microsoft.Storage&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;api-version&lt;/code&gt;: each resource provider publishes its own API version which defines which version of the Azure Resource Manager REST API should be used to deploy this resource.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;properties&lt;/code&gt;: these are the resource specific properties. For example every resource has a &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;location&lt;/code&gt;. In addition some have sub properties which you can pass on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h2&gt;

&lt;p&gt;When we talk about infrastructure as a code and reusability of our templates, we definitely end up using parameters to customise our resources. Be its name, sku, username or password, we will need to change these per environment or application.&lt;/p&gt;

&lt;p&gt;In a Bicep file you can define the parameters that need to be passed to it when deploying resources. You can put validation on the parameter value, provide default value, and limit it to allowed values. The format of a parameter will be such as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;parameter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;parameter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;parameter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;param&lt;/code&gt;: is a reserved keyword.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;parameter-name&lt;/code&gt; is the name of the parameter.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;parameter-type&lt;/code&gt;: is the type of the parameter such as &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;parameter-value&lt;/code&gt;: is the value of the parameter you're passing in.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's review two examples to get a better understanding of the structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;minLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;maxLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="nx"&gt;storageName&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example you're limiting the &lt;code&gt;storageName&lt;/code&gt; parameter's value length to be between 3 and 24 characters. Or:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;allowed&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Standard_LRS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Standard_GRS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Standard_RAGRS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Standard_ZRS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Premium_LRS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Premium_ZRS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Standard_GZRS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Standard_RAGZRS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="nx"&gt;storageRedundancy&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Standard_LRS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example you're specifying the allowed values for the &lt;code&gt;storageRedundancy&lt;/code&gt; parameter and also provide the default value if nothing is provided during the deployment.&lt;/p&gt;

&lt;p&gt;With ARM templates you had to use a separate file to pass the parameters during the deployments usually with a name ending in &lt;code&gt;.parameters.json&lt;/code&gt;. In Bicep you need to use the same JSON file to pass the parameters in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"$schema"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"contentVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"parameters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"storageName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"myuniquestoragename"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"storageRedundancy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Standard_GZRS"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;Similar to parameters, variables play an important part in our templates, especially when it comes to naming conventions. These can store complex expressions to keep our templates clean and their maintenance simple. In Bicep variables are defined using the &lt;code&gt;var&lt;/code&gt; keyword:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;variable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;variable-name&lt;/code&gt; is the name of your variable. For example in our previous Bicep file we could have used a variable for our storage name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;storageAccName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sa${uniqueString(resourceGroup().id)}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="nx"&gt;stg&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Microsoft.Storage/storageAccounts@2019-06-01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;storageAccountName&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we need a unique name for our storage account the &lt;code&gt;uniqueString&lt;/code&gt; function is used (Don't worry about that for now). The point is that we can create variables and use them in our template with ease.&lt;/p&gt;

&lt;p&gt;There are multiple variable types you can use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Numeric&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#expressions"&gt;
  &lt;/a&gt;
  Expressions
&lt;/h2&gt;

&lt;p&gt;Expressions are used in our templates for variety of reasons, from getting the current location of the resource group to subscription id or the current datetime.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  functions
&lt;/h3&gt;

&lt;p&gt;The good thing is that &lt;strong&gt;ANY&lt;/strong&gt; valid &lt;a href="https://docs.microsoft.com/azure/azure-resource-manager/templates/template-functions"&gt;ARM template function&lt;/a&gt; is also a valid Bicep function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="nx"&gt;currentTime&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;utcNow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resourceGroup&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;makeCapital&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toUpper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all lowercase&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ternary-operator"&gt;
  &lt;/a&gt;
  Ternary operator
&lt;/h3&gt;

&lt;p&gt;To use conditions in your deployments you would use the &lt;code&gt;if&lt;/code&gt; function in ARM templates, however, that's not supported in Bicep. Instead, you can leverage the &lt;strong&gt;ternary operator&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="nx"&gt;globalRedundancy&lt;/span&gt; &lt;span class="nx"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="nx"&gt;stg&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Microsoft.Storage/storageAccounts@2019-06-01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;storageAccountName&lt;/span&gt;
  &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;
  &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Storage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="na"&gt;sku&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;globalRedundancy&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Standard_GRS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Standard_LRS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// if true --&amp;gt; GRS, else --&amp;gt; LRS&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h2&gt;

&lt;p&gt;ARM templates have an output section where you could send information out of your pipeline to be accessed within other deployments or subsequent tasks. In Bicep you have the same concept via the &lt;code&gt;output&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="nx"&gt;stg&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Microsoft.Storage/storageAccounts@2019-06-01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="nx"&gt;storageId&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return the storage id out to be used later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h2&gt;

&lt;p&gt;In ARM templates if you wanted to deploy a resource multiple times you could leverage the &lt;code&gt;copy&lt;/code&gt; operator to add a resource &lt;code&gt;n&lt;/code&gt; times based on the loop count. In Bicep you have the &lt;code&gt;for&lt;/code&gt; operator at your disposal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my.provider/type@2021-03-01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ITERATOR_NAME&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ARRAY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;ITERATOR_NAME&lt;/code&gt; is a new symbol that's only available inside your resource declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="nx"&gt;containerNames&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;images&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;videos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pdf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Microsoft.Storage/storageAccounts/blobServices/containers@2019-06-01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;containerNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;${stg.name}/default/${name}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This snippet creates three containers within the storage account in a loop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#existing-keyword"&gt;
  &lt;/a&gt;
  Existing keyword
&lt;/h2&gt;

&lt;p&gt;If you want to deploy a resource which is depending on an existing resource you can leverage the &lt;code&gt;existing&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="nx"&gt;stg&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Microsoft.Storage/storageAccounts@2019-06-01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;existing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;storageAccountName&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You won't need the other properties since the resource already exists. You need enough information to be able to identify the resource. Now that you have this reference, you can use it in other parts of your deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules
&lt;/h2&gt;

&lt;p&gt;In ARM templates you had the concept of linked templates when it came to reuse a template in other deployments. In Bicep you have &lt;code&gt;modules&lt;/code&gt;. You can define a resource in a module and reuse that module in other Bicep files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
├── main.bicep
└── stg.bicep
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our &lt;code&gt;stg&lt;/code&gt; file you will define the resource, its parameters, variables, outputs, etc:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//stg.bicep&lt;/span&gt;
&lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="nx"&gt;storageAccountName&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;storageSku&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Standard_LRS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="nx"&gt;stg&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Microsoft.Storage/storageAccounts@2019-06-01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;storageAccountName&lt;/span&gt;
  &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;resourceGroup&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;
  &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Storage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="na"&gt;sku&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;storageSku&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in the &lt;code&gt;main&lt;/code&gt; file you will reuse the storage account as a module using the &lt;code&gt;module&lt;/code&gt; keyword:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//main.bicep&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;stg&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./storage.bicep&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;storageDeploy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;storageAccountName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;YOURUNIQUESTORAGENAME&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="nx"&gt;storageName&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;containerProps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You only need to pass the required properties which in case of our storage account is the name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-any-endraw-keyword"&gt;
  &lt;/a&gt;
  The &lt;code&gt;any&lt;/code&gt; keyword
&lt;/h2&gt;

&lt;p&gt;There might be some cases where Bicep throws a false positive when it comes to errors or warnings. This might happen based on different situations such as the API not having the correct type definition. You can use the &lt;code&gt;any&lt;/code&gt; keyword to get around these situations when defining resources which have incorrect types assigned. One of examples is the container instances CPU and Memory properties which expect an &lt;code&gt;int&lt;/code&gt;, but in fact they are &lt;code&gt;number&lt;/code&gt; since you can pass non-integer values such as &lt;code&gt;0.5&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="nx"&gt;wpAci&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;microsoft.containerInstance/containerGroups@2019-12-01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wordpress-containerinstance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;
  &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wordpress&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;
          &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="na"&gt;memoryInGB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using &lt;code&gt;any&lt;/code&gt; and passing the value you can get around the possible errors which might be raised during the build or the validation stage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tooling"&gt;
  &lt;/a&gt;
  Tooling
&lt;/h2&gt;

&lt;p&gt;In terms of tooling the support is the same if not better than the ARM templates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vs-code-extension"&gt;
  &lt;/a&gt;
  VS Code extension
&lt;/h3&gt;

&lt;p&gt;VS Code comes with &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-bicep"&gt;an official extension for Bicep&lt;/a&gt;. This extension gives you validation, intellisense, dot property access, snippets etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cicd"&gt;
  &lt;/a&gt;
  CI/CD
&lt;/h3&gt;

&lt;p&gt;If you're using &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; for your CI/CD pipeline, there is already a &lt;a href="https://github.com/marketplace/actions/bicep-build"&gt;Bicep action&lt;/a&gt; created by our developer advocate &lt;a href="https://github.com/justinyoo"&gt;Justin Yoo&lt;/a&gt; which you can use to build you bicep file and deploy it to Azure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cli"&gt;
  &lt;/a&gt;
  CLI
&lt;/h3&gt;

&lt;p&gt;Bicep comes with a CLI that you can install locally on &lt;a href="https://github.com/Azure/bicep/blob/main/docs/installing.md"&gt;Windows, MacOS, and Linux&lt;/a&gt;. That gives you the ability to build and deploy your Bicep files with &lt;a href="https://docs.microsoft.com/en-us/cli/azure"&gt;Azure CLI&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summery"&gt;
  &lt;/a&gt;
  Summery
&lt;/h2&gt;

&lt;p&gt;In short, I highly recommend using Bicep and improving your IaC and deployments. Of course if your ARM templates are too many, or very complex you might benefit from converting them more, but if you already have a streamlined pipeline with maintainable templates, you could keep them and create any new template using Bicep instead.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>azure</category>
      <category>arm</category>
      <category>bicep</category>
    </item>
    <item>
      <title>Structs in C</title>
      <author>Tomislav Kraljic</author>
      <pubDate>Mon, 10 May 2021 01:52:33 +0000</pubDate>
      <link>https://dev.to/tomislavkraljic/structs-in-c-2ojh</link>
      <guid>https://dev.to/tomislavkraljic/structs-in-c-2ojh</guid>
      <description>&lt;p&gt;In this article, I will show you what structs are and how to effectively use them in your programs. I will go over the following:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;What are Structs&lt;/li&gt;
    &lt;li&gt;Syntax of a Struct&lt;/li&gt;
    &lt;li&gt;Declaring a Struct&lt;/li&gt;
    &lt;li&gt;How to Initialize Struct Members&lt;/li&gt;
    &lt;li&gt;Nested Structs&lt;/li&gt;
    &lt;li&gt; Struct Pointers&lt;/li&gt;
    &lt;li&gt; Pointer Data Members inside a Struct
    &lt;/li&gt;
&lt;li&gt; Passing Structs into Functions&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-what-are-structs"&gt;
  &lt;/a&gt;
  1) What are Structs?
&lt;/h3&gt;

&lt;p&gt;Structs, or commonly known as Structure, are user-defined data-types. They help us group elements together that share something in common. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-syntax-of-a-struct"&gt;
  &lt;/a&gt;
  2) Syntax of a Struct
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct [structure tag] {

   member definition;
   member definition;
   ...
   member definition;
} [one or more structure variables];  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#3-declaring-a-struct"&gt;
  &lt;/a&gt;
  3) Declaring a Struct
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Example 1&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main(int argc, char * argv[]){
    struct date {
        int month;
        int day;
        int year;
    } my_birthday;

    return EXIT_SUCCESS;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Example 2&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main(int argc, char * argv[]){
    struct date {
        int month;
        int day;
        int year;
    };

    struct date my_birthday;

    return EXIT_SUCCESS;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#4-how-to-initialize-struct-members"&gt;
  &lt;/a&gt;
  4) How to Initialize Struct Members
&lt;/h3&gt;

&lt;p&gt;It is important to note that you can not initialize data members inside a struct. You have to do it outide. Structs only hold the variables or data members. They do not hold the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main(int argc, char * argv[]){
    struct date {
        int month = 5; //ERROR - Not allowed
        int day = 23; // ERROR - Not allowed
        int year = 2021; // ERROR - Not allowed
    } today_date;

    return EXIT_SUCCESS;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see an example of how to correctly initialize values with a struct: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example 1&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main(int argc, char * argv[]){
    struct date {
        int month;
        int day;
        int year;
     };

     struct date my_birthday[1] = {
        [0] = {.month = 6, .day = 15, .year = 1997}
     }

     printf("My birthday is %d/%d/%d",
            my_birthday[0].month,
            my_birthday[0].day,
            my_birthday[0].year);

     return EXIT_SUCCESS;
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Example 2&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main(int argc, char * argv[]){
    struct date {
        int month;
        int day;
        int year;
     };

     struct date my_birthday[3] = {
        [0] = { 6, 15, 1997},
        [1] = {3, 23, 1989},
        [2] = {4, 29, 1979}
     };

     for(size_t i = 0; i &amp;lt; 3; ++i}{
         printf("My birthday is %d/%d/%d",
                my_birthday[i].month,
                my_birthday[i].day,
                my_birthday[i].year);
     };

     return EXIT_SUCCESS;
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#5-nested-structs"&gt;
  &lt;/a&gt;
  5) Nested Structs
&lt;/h3&gt;

&lt;p&gt;You can also have structs within structs. This is very helpful! Let's say we want a struct called date and it handles just the day, month, and year. Then, let's say we want another struct called time and it handles seconds, minutes, and hours. &lt;/p&gt;

&lt;p&gt;What if we want a struct called event that takes in month, day, year, minutes, seconds and hours? &lt;/p&gt;

&lt;p&gt;We can do that with nested structs. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main(int argc, char * argv[]) {
    struct date {
        int month;
        int day;
        int year;
    };

    struct time {
        int seconds;
        int minutes; 
        int hours;
    };

    struct date_and_time {
        struct date s_date;
        struct time s_time;
    };

    struct date_and_time event[1] = {
        [0] = {.s_date.month = 6,
               .s_date.day = 15,
               .s_date.year = 1997,
               .s_time.hours = 15,
               .s_time.minutes = 45,
               .s_time.seconds = 59 }
    };

    for(size_t i = 0; i &amp;lt; 1; ++i) {
        printf("I was born on %d/%d/%d at %d: %d: %d ",
                event[i].s_date.month,
                event[i].s_date_day,
                event[i].s_date_year,
                event[i].s_time.hours,
                event[i].s_time.minutes,
                event[i].s_time.seconds);
    };

    return EXIT_SUCCESS;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#6-pointer-structs"&gt;
  &lt;/a&gt;
  6) Pointer Structs
&lt;/h3&gt;

&lt;p&gt;You can also have a pointer struct. This is very helpful. C is a pass-by-value language and we want to be as efficient as possible. If we were to pass a struct through a function as an argument, we would be copying the entire struct. However, with a pointer struct, we just copy the memory address. It is a lot more efficient. &lt;/p&gt;

&lt;p&gt;NOTE: In order to access data members with a pointer struct, you use -&amp;gt; operator as seen in the example below. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main(int argc, char * argv[]) {
    struct date{
        int month;
        int day;
        int year;
    };

    struct date new_date;

    struct date * p_date = &amp;amp;new_date;

    p_date-&amp;gt;month = 6;
    p_date-&amp;gt;day  = 15;
    p_date-&amp;gt;year = 1997;

    printf("My birthday is %d/%d/%d",
            p_date-&amp;gt;month,
            p_date-&amp;gt;day,
            p_date-&amp;gt;year); 

    return EXIT_SUCCESS;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-structs-with-pointer-data-members"&gt;
  &lt;/a&gt;
  7) Structs with Pointer Data Members
&lt;/h3&gt;

&lt;p&gt;Structs can also have pointer data members. However, it is important to note that if you do decide to do this, you must dynamically allocate memory. &lt;/p&gt;

&lt;p&gt;Since, we are dynamically allocating memory using malloc(), we must also call free() to free up the memory. This is prevent memory leaks. &lt;/p&gt;

&lt;p&gt;Also, because have a struct pointer pointing to a struct of pointer data members, we must free the children, then the parent. &lt;/p&gt;

&lt;p&gt;Otherwise, you would just free the data members. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example 1&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main(int argc, char * argv[]) {
    struct create_struct {
        char * first_name;
        char * last_name;
    };

    struct create_struct full_name;

    struct create_struct p_full_name = &amp;amp;full_name;

    ptr_full_name-&amp;gt;first_name = (char*)malloc(sizeof(char) * 50);
    ptr_full_name-&amp;gt;last_name = (char*)malloc(sizeof(char)*50);

    strcpy(ptr_full_name-&amp;gt;first_name, "Tomislav");
    strcpy(ptr_full_name-&amp;gt;last_name, "Kraljic");

    printf("My name is %s %s",
            ptr_full_name-&amp;gt;first_name,
            ptr_full_name-&amp;gt;last_name);

    free(ptr_full_name-&amp;gt;first_name); 
    free(ptr_full_name-&amp;gt;last_name);
    free(ptr_full_name);

    return EXIT_SUCCESS;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#8-passing-structs-into-functions"&gt;
  &lt;/a&gt;
  8) Passing Structs into Functions
&lt;/h3&gt;

&lt;p&gt;We can also pass structs as argument into functions. This is where pointer to a struct comes in handy! We just want to copy the memory address and pass it. We do not want to copy the entire struct and all its data. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example 1&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

struct create_my_struct {
    char * first_name;
    char * last_name;
} my_name;

struct create_my_struct * ptr_full_name = &amp;amp;my_name;

void create_data(struct create_my_struct * ptr_full_name);

void free_data(struct create_my_struct * ptr_full_name);

void print_data(struct create_my_struct * ptr_full_name);

int main(int argc, char * argv[]) {
    create_data(ptr_full_name);

    print_data(ptr_full_name);

    free_data(ptr_full_name);

    return EXIT_SUCCESS;
}

void create_data(struct create_my_struct * ptr_full_name) {
    ptr_full_name-&amp;gt;first_name = (char*)malloc(sizeof(char)*50);
    ptr_full_name-&amp;gt;last_name = (char*)malloc(sizeof(char)*50);

    strcpy(ptr_full_name-&amp;gt;first_name, "Tomislav");
    strcpy(ptr_full_name-&amp;gt;last_name, "Kraljic");
};

void print_data(struct create_my_struct * ptr_full_name) {
    printf("My name is %s %s",
            ptr_full_name-&amp;gt;first_name,
            ptr_full_name-&amp;gt;last_name);
};

void free_data(struct create_my_struct * ptr_full_name) {
    free(ptr_full_name-&amp;gt;first_name);
    free(ptr_full_name-&amp;gt;last_name);
    free(ptr_full_name);
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






</description>
      <category>computerscience</category>
      <category>programming</category>
      <category>cpp</category>
    </item>
    <item>
      <title>So You've Been Criticized Online</title>
      <author>Sacha Greif</author>
      <pubDate>Mon, 10 May 2021 01:28:21 +0000</pubDate>
      <link>https://dev.to/sachagreif/so-you-ve-been-criticized-online-5hna</link>
      <guid>https://dev.to/sachagreif/so-you-ve-been-criticized-online-5hna</guid>
      <description>&lt;p&gt;There's a certain threshold you cross when you achieve a measure a success where you cease being the lovable underdog everybody's rooting for, and suddenly become &lt;a href="https://dev.to/cher/sexism-racism-toxic-positivity-and-tailwindcss-cil"&gt;The Man&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;At first you don't notice it. Your supporters are still cheering you on, and the haters are few and far between. But then the mean tweets start piling on, soon joined by acerbic blog posts and even a couple snarky vlogs. &lt;/p&gt;

&lt;p&gt;And before you know it, all the cool kids no longer get social credit from supporting your little enterprise, but instead earn it by pointing out all its flaws. &lt;/p&gt;

&lt;p&gt;What to do?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-on-the-love"&gt;
  &lt;/a&gt;
  Focus on the Love
&lt;/h2&gt;

&lt;p&gt;First, it's worth remembering that unless you're doing something truly awful, your fans will usually still vastly outnumber your haters. &lt;/p&gt;

&lt;p&gt;But fans are usually quieter, and even when they do manifest their love we tend to focus on the hate instead. It's just how our brains work, we're biased towards action and being antagonized by an angry tweet fires our brain's "something-needs-to-be-bashed-with-a-big-rock" caveman reflex. &lt;/p&gt;

&lt;p&gt;So just take a second to remember that, and tell your caveman brain to chill. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-shoot-the-messenger"&gt;
  &lt;/a&gt;
  Don't Shoot the Messenger
&lt;/h2&gt;

&lt;p&gt;As I said, it's tempting to see a criticism – especially when perceived as unfair – and want to go all out on its author. &lt;/p&gt;

&lt;p&gt;Twitter makes this especially tempting, as its culture glorifies "dunking" on people. But here's a protip: while dunking on Mitch McConnell's weird turtle neck will get you tons of likes, dunking on that junior web developer with 67 followers will not. &lt;/p&gt;

&lt;p&gt;Also remember that while you're sitting here stewing in your own juices, that tweet's author has probably long moved on to the next thing. As much as you want @FlexboxFan2003 to be your lifelong nemesis, and use your eloquence and sheer logical talent to finally best them in a hard-fought battle of quote-tweets, it's probably not going to happen. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-in-touch-privately"&gt;
  &lt;/a&gt;
  Get In Touch Privately
&lt;/h2&gt;

&lt;p&gt;If you really feel the need to respond though, do so privately. This is especially important if the original criticism didn't directly mention you. Just because someone expressed an opinion about something you're involved in doesn't necessarily mean they want to engage in public debate. &lt;/p&gt;

&lt;p&gt;What's more, by publicly quote-tweeting the person, you're now exposing them to the wrath of your own following. Which, as you might expect, is probably favorable disposed towards you, and unfavorably disposed towards any critics. &lt;/p&gt;

&lt;p&gt;So send out a DM or email instead. Here's an example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hi! I hope it's ok to contact you. I came across your tweet about XYZ, and to be honest I was a bit disappointed because I feel that tweet wasn't quite fair to the project. In fact, I wrote a blog post to address this exact issue: &lt;em&gt;link&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thanks for taking the time to read this, and let me know if I can answer any questions!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From my own experience, people won't always respond to this kind of outreach, probably because they've long since moved on. But at least you know that if they're interested in learning more, you've provided resources for them to do so without making anybody feel bad. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#address-the-criticism"&gt;
  &lt;/a&gt;
  Address the Criticism
&lt;/h2&gt;

&lt;p&gt;One thing that really helps is actually taking the time to write a proper blog post to explain your stance. As I said, Twitter promotes very toxic online behaviors and a blog post is a much healthier way to discuss any remotely complex or sensitive topic. &lt;/p&gt;

&lt;p&gt;So &lt;a href="https://dev.to/sachagreif/state-of-js-2020-common-criticisms-23id"&gt;write a detailed explanation&lt;/a&gt; that presents both sides of the issue and gives readers the context to understand your own choices, and then just refer people to it from now on. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fix-the-issue"&gt;
  &lt;/a&gt;
  Fix the Issue
&lt;/h2&gt;

&lt;p&gt;Finally, if the criticism has a grain of truth, then the insecurity and vulnerability you feel about it will often be the very things that push you to be overly defensive. The best way to correct that is to just fix the issue. &lt;/p&gt;

&lt;p&gt;Of course if fixing the issue was easy you'd have already done it. But even if fixing the issue is not possible, it might be worth letting people know that you're aware of it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-people-know-youre-only-human"&gt;
  &lt;/a&gt;
  Let People Know You're Only Human
&lt;/h2&gt;

&lt;p&gt;The tech companies we deal with on a daily basis online have unlimited resources at their disposal, and so any failings on their part must certainly come from a lack of goodwill to change thing. &lt;/p&gt;

&lt;p&gt;But for individuals it can often be the opposite: we want to improve things, but we just don't have the time, knowledge or resources. &lt;/p&gt;

&lt;p&gt;We often forget this in our online interactions, and that can lead to a lack of empathy. So let people know that you appreciate their feedback, even if you might not always be great at dealing with criticism. &lt;/p&gt;

&lt;p&gt;You're only human after all… but remember, so are they!&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>criticism</category>
      <category>twitter</category>
    </item>
    <item>
      <title>VS Code shortcuts that you must know! (Mac and Windows)</title>
      <author>Raynaldo Sutisna</author>
      <pubDate>Mon, 10 May 2021 01:27:56 +0000</pubDate>
      <link>https://dev.to/raaynaldo/vs-code-shortcuts-that-you-must-know-mac-and-windows-cp5</link>
      <guid>https://dev.to/raaynaldo/vs-code-shortcuts-that-you-must-know-mac-and-windows-cp5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Have you ever realized that using a mouse reduces the speed of your development? Using a mouse slows down your speed because you should move your hand to the mouse and move back again to the keyboard. However, we can make both of our hands staying on the keyboard all the time if we know all the shortcuts. I'm still learning to stop using a mouse, and I want to share my most useful shortcuts in VS Code. These are important shortcuts that VSCode user must know to speed up your coding process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#move-the-cursor"&gt;
  &lt;/a&gt;
  Move the cursor
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#move-the-cursor-to-the-first-or-last-character-of-the-line"&gt;
  &lt;/a&gt;
  Move the cursor to the first or last character of the line.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + Left Arrow / Right Arrow
Win: Home / End
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zt5R_I7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6y1w2dibahtx1d4hhzz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zt5R_I7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6y1w2dibahtx1d4hhzz.gif" alt="Moving Cursor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#move-the-cursor-to-the-prev-or-next-word"&gt;
  &lt;/a&gt;
  Move the cursor to the prev or next word.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Option ⌥ + Left Arrow / Right Arrow
Win: Ctrl + Left Arrow / Right Arrow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-Dzo1DW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wdr3enyhy95gnghn6c9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-Dzo1DW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wdr3enyhy95gnghn6c9.gif" alt="Moving Cursor by word"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highlight-code"&gt;
  &lt;/a&gt;
  Highlight code
&lt;/h2&gt;

&lt;p&gt;The main shortcut of highlighting is holding the &lt;code&gt;shift&lt;/code&gt; key + arrow or you can combine it with the shortcuts for moving the cursor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DBZ39UHW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0h78asvc3w0zerei75u.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DBZ39UHW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0h78asvc3w0zerei75u.gif" alt="Highlighting each letter"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#highlight-the-whole-line"&gt;
  &lt;/a&gt;
  Highlight the whole line.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Shift ⇧ + Cmd ⌘ + Left Arrow / Right Arrow
Win: Shift + Home / End
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HTRqLtNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coe8ghzmghrpzmiluhry.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HTRqLtNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coe8ghzmghrpzmiluhry.gif" alt="Highlighting each word"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#highlight-each-word"&gt;
  &lt;/a&gt;
  Highlight each word.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Shift ⇧ + Option ⌥ + Left Arrow / Right Arrow
Win: Shift + Ctrl + Left Arrow / Right Arrow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qDVYZFNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6i7lherx8eiu70ylqgn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qDVYZFNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6i7lherx8eiu70ylqgn.gif" alt="Highlighting the whole line"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#highlight-the-same-word"&gt;
  &lt;/a&gt;
  Highlight the same word.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + d
Win: Ctrl + d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gr9D21Bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj4l494vl8s71qgvqd8w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gr9D21Bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj4l494vl8s71qgvqd8w.gif" alt="Highlighting the same word"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#delete-one-line-code"&gt;
  &lt;/a&gt;
  Delete one line code
&lt;/h2&gt;

&lt;p&gt;There are two ways to delete one line code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + Shift ⇧ + x
Win: Ctrl + x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am personally more convenient to use this, which is the &lt;code&gt;cut&lt;/code&gt; shortcut.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + x
Win: Ctrl + x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fpm2GNbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lelfvm1etpb5fmzn1o85.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fpm2GNbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lelfvm1etpb5fmzn1o85.gif" alt="Delete one line"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#close-the-current-file"&gt;
  &lt;/a&gt;
  Close the current file
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + w
Win: Ctrl + w
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--80sBh7q---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3y1ggle2dge38tqimm0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--80sBh7q---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3y1ggle2dge38tqimm0.gif" alt="Close each file open"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#close-all-open-file"&gt;
  &lt;/a&gt;
  Close all open file
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + k w
Win: Ctrl + k w
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jepxgPSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/go6r4k0ed4y2xdvan2vs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jepxgPSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/go6r4k0ed4y2xdvan2vs.gif" alt="Close all open file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-a-file"&gt;
  &lt;/a&gt;
  Open a file
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + p
Win: Ctrl + p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will open a search bar, and we can type the file name there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gjBdxf9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyvb6xy2rqstm4kvzug5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gjBdxf9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyvb6xy2rqstm4kvzug5.gif" alt="Open file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#change-to-another-file-tab"&gt;
  &lt;/a&gt;
  Change to another file tab
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Ctrl ^ + tab
Win: Ctrl + tab
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5R1xX_KP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56u0cfjn3fcief8kxypp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5R1xX_KP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56u0cfjn3fcief8kxypp.gif" alt="Change Tab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#split-screen"&gt;
  &lt;/a&gt;
  Split screen
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + \
Win: Ctrl + \
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rQ82D1zx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5k8l8limztil51gm7jpv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rQ82D1zx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5k8l8limztil51gm7jpv.gif" alt="Split Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#move-focus-to-another-splitscreen"&gt;
  &lt;/a&gt;
  Move focus to another split-screen
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + 1 / 2 / 3
Win: Ctrl + 1 / 2 / 3 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1, 2, or 3 depends on the screen position, and if the split screen doesn't exist, it will open a new empty split screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AmlWb1Ze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwa5ykc7dfka09rrtm1g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AmlWb1Ze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwa5ykc7dfka09rrtm1g.gif" alt="change split focus"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-and-close-sidebar"&gt;
  &lt;/a&gt;
  Open and close Sidebar
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + b
Win: Ctrl + b
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLcOnNHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju0vb4sfdutz8ckajn1c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLcOnNHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju0vb4sfdutz8ckajn1c.gif" alt="Open Close Side Bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-terminal"&gt;
  &lt;/a&gt;
  Open terminal
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Ctrl ^ + ~
Win: Ctrl + ~
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wD4CKuj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgxb89w1kk5gxa725kly.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wD4CKuj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgxb89w1kk5gxa725kly.gif" alt="Open Terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-vscode-pallete"&gt;
  &lt;/a&gt;
  Open VSCode Pallete
&lt;/h2&gt;

&lt;p&gt;VSCode palette will give you access to all VSCode functionalities and also all shortcuts. VSCode palette is powerful!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + Shift ⇧ + p
Win: Ctrl + Shift + p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0RjARPiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b430y97enfkgpkxdol63.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0RjARPiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b430y97enfkgpkxdol63.gif" alt="Command pallete"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h2&gt;

&lt;p&gt;We haven't discussed how we can add a new file or folder, delete a file, move a file, rename a file name, and duplicate a file. Unfortunately, VSCode doesn't have the built-in feature for that without going to the sidebar. However, I watch James Q Quick's &lt;a href="https://www.youtube.com/watch?v=s3H6PmB4SZ4"&gt;video&lt;/a&gt;, and his video shares about the two useful extensions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#file-utils"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils"&gt;File Utils&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + Shift ⇧ + p -&amp;gt; Type "File Utils"
Win: Ctrl + Shift + p -&amp;gt; Type "File Utils"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This extension gives you access to this feature below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---9HzU83w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvuwd2z62nleaph8xmn3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---9HzU83w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvuwd2z62nleaph8xmn3.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By using File Utils, you don't need to open the sidebar all the time just type &lt;code&gt;File Utils&lt;/code&gt; in the VSCode Palette.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advancednewfile"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=patbenatar.advanced-new-file"&gt;advanced-new-file&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;advanced-new-file extension is handy when you want to create a file or folder. File Utils provides a feature to add a file and folder, but I feel more convenient with this extension. I also create key binding for this extension &lt;code&gt;Cmd + n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_iKmDwrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wcl4ev67no4q8ynuiiv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_iKmDwrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wcl4ev67no4q8ynuiiv.gif" alt="advance file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to add a shortcut for the extension?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open VSCode palette&lt;/li&gt;
&lt;li&gt;search &lt;code&gt;advanced-new-file&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Click the gear icon&lt;/li&gt;
&lt;li&gt;Click edit&lt;/li&gt;
&lt;li&gt;type the shortcut&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---cMrHZvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7zaqdhks2z2z6aqdhsj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---cMrHZvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7zaqdhks2z2z6aqdhsj.gif" alt="add key binding"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Remembering all the shortcuts in a time is challenging, but if we push ourselves to use shortcuts on daily basis. We will remember all the shortcuts soon. I hope it would be helpful.&lt;/p&gt;

&lt;p&gt;Please leave a comment on which the most useful shortcut for you? or do you have another useful VS Code Shortcut?&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>shortcut</category>
    </item>
    <item>
      <title>Python CI/CD with GitHub Actions</title>
      <author>Johanan Idicula</author>
      <pubDate>Mon, 10 May 2021 01:12:31 +0000</pubDate>
      <link>https://dev.to/jidicula/python-ci-cd-with-github-actions-2e26</link>
      <guid>https://dev.to/jidicula/python-ci-cd-with-github-actions-2e26</guid>
      <description>&lt;p&gt;You can also read this on my blog &lt;a href="https://forcepush.tech/python-ci-cd-with-git-hub-actions"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a &lt;a href="https://forcepush.tech/writing-a-simple-cli-program-python-vs-go"&gt;previous post&lt;/a&gt;, I alluded to having pure CI/CD checks and autoreleases for my random-standup program. I wanted to ensure that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Each change I make to my program won't break existing functionality (Continuous Integration), and&lt;/li&gt;
&lt;li&gt;Publishing a new release to PyPI is automatic (Continuous Delivery/Deployment).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;GitHub provides a workflow automation feature called &lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt;. Essentially, you write your workflow configurations in a YAML file in &lt;code&gt;your-repo/.github/workflows/&lt;/code&gt;, and they'll be executed on certain repository events.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#continuous-integration"&gt;
  &lt;/a&gt;
  Continuous Integration
&lt;/h1&gt;

&lt;p&gt;This automation is relatively straightforward. I want to run the following workflows on each commit into the repository trunk and on each pull request into trunk:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Test syntax by running a linting check for formatting (n.b. syntax correctness is a subset of formatting correctness).&lt;/li&gt;
&lt;li&gt;Test functionality &lt;strong&gt;across a variety of operating systems and Python versions&lt;/strong&gt; by running automated tests on the entire program. For this program, I only included a single basic black-box test that's more demonstrative than useful (it checks for a regex match with program output). A suite of unit tests would be more appropriate for a more complex program.&lt;/li&gt;
&lt;li&gt;Test build stability by attempting to build the program (but discarding the build artifact) across the same combinations of operating systems and Python versions from Step 2.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's the &lt;a href="https://github.com/jidicula/random-standup-py/blob/main/.github/workflows/release.yml"&gt;full workflow&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#each-commit-to-trunk"&gt;
  &lt;/a&gt;
  Each commit to trunk
&lt;/h2&gt;

&lt;p&gt;The trigger for this is declared at the top of the workflow file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-syntax-by-checking-formatting"&gt;
  &lt;/a&gt;
  Test syntax by checking formatting
&lt;/h2&gt;

&lt;p&gt;First, we have to checkout the repository in GitHub Actions using &lt;a href="https://github.com/actions/checkout"&gt;GitHub's own &lt;code&gt;checkout&lt;/code&gt; action&lt;/a&gt;. Then, we have to set up the Python version using &lt;a href="https://github.com/actions/setup-python"&gt;GitHub's &lt;code&gt;setup-python&lt;/code&gt; action&lt;/a&gt;. Finally, we can use &lt;a href="https://github.com/psf/black/blob/main/action.yml"&gt;Black's provided GitHub Action&lt;/a&gt; for checking formatting - it runs &lt;code&gt;black --check --diff&lt;/code&gt; on the workflow runner's clone of the repo and outputs an error code if any Python file in the repo fails Black's formatting rules. Note that Black fails if the &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;AST&lt;/a&gt; cannot be parsed (i.e. if there are any syntax errors), so it can also be used for checking syntax correctness, which itself is a good proxy for checking for merge conflict strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;black-formatting-check&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check formatting&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ubuntu-latest'&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-python@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;psf/black@stable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-a-job-across-different-build-environments"&gt;
  &lt;/a&gt;
  Running a job across different build environments
&lt;/h2&gt;

&lt;p&gt;GitHub Actions provides matrix build functionality where you provide the option set for each variable and it runs the dependent steps with the &lt;a href="https://en.wikipedia.org/wiki/Cartesian_product#n-ary_Cartesian_product"&gt;n-ary Cartesian product&lt;/a&gt; of these &lt;em&gt;n&lt;/em&gt; variable option sets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.os }}&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;black-formatting-check&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ubuntu-latest'&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;macos-latest'&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;windows-latest'&lt;/span&gt;
        &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.7'&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.8'&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.9'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is defined in the &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix"&gt;&lt;code&gt;jobs.&amp;lt;job_id&amp;gt;.strategy.matrix&lt;/code&gt; directive&lt;/a&gt;. I've added 2 variables: one for OS (with Ubuntu, macOS, and Windows as options) and one for Python version (with 3.7, 3.8, and 3.9 as options). This means that everything in the &lt;code&gt;build&lt;/code&gt; job will run on every combination of OS and Python version options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu, Python 3.7&lt;/li&gt;
&lt;li&gt;Ubuntu, Python 3.8&lt;/li&gt;
&lt;li&gt;Ubuntu, Python 3.9&lt;/li&gt;
&lt;li&gt;macOS, Python 3.7&lt;/li&gt;
&lt;li&gt;macOS, Python 3.8&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the &lt;code&gt;runs-on&lt;/code&gt; directive is defined as &lt;code&gt;${{ matrix.os }}&lt;/code&gt; which points to the value of the &lt;code&gt;os&lt;/code&gt; variable in the current runner. Internally, the steps are somewhat like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GitHub Actions parses the directives for the job and sees there's a matrix strategy.&lt;/li&gt;
&lt;li&gt;It spins up a separate runner for each matrix combination and defines the variables &lt;code&gt;matrix.os&lt;/code&gt; and &lt;code&gt;matrix.python-version&lt;/code&gt; as the values for that combination. For example, in the Ubuntu/Python 3.7 runner, &lt;code&gt;matrix.os = 'ubuntu-latest'&lt;/code&gt; and &lt;code&gt;matrix.python-version = '3.7'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It runs the job steps in each runner it spun up in Step 2.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can see an example of how this matrix run looks like in the GitHub Actions console &lt;a href="https://github.com/jidicula/random-standup-py/actions/runs/806535255"&gt;here&lt;/a&gt; (see all the OS/Python combinations in the left sidebar). These matrix options are run in parallel by default, so the runtime of the job determined by the slowest matrix option. Note that if your repository is private, you will be charged Actions minutes for each separate build combination, with some &lt;a href="https://docs.github.com/en/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions#about-billing-for-github-actions"&gt;hefty multiplers for macOS and Windows&lt;/a&gt; (1 macOS minute is 10 minutes of Actions credit, 1 Windows minute is 2 minutes of Actions credit as of May 2021).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-functionality"&gt;
  &lt;/a&gt;
  Test Functionality
&lt;/h2&gt;

&lt;p&gt;Again, we need to checkout the repo for this job and set up the Python version. The key difference with the Python version setup here compared to the Black formatting job is that the Python version is specified and points to the matrix option for &lt;code&gt;python-version&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout code&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup Python&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-python@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{matrix.python-version}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we need to set up the dependencies for the program to ensure it can run. I used Poetry for dependency and virtual environment management, and it's not included with any of the runner &lt;a href="https://github.com/actions/virtual-environments"&gt;environments&lt;/a&gt;, so we have to install it in a workflow step. Installing it takes some time, though, so to speed up my workflow runtime, I "permanently" cache Poetry using &lt;a href="https://github.com/actions/cache"&gt;GitHub's provided &lt;code&gt;cache&lt;/code&gt; action&lt;/a&gt;. I only run the installation step if the cache is missed, which won't happen since the key is constant for each OS/Python version combination.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="c1"&gt;# Perma-cache Poetry since we only need it for checking pyproject version&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache Poetry&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cache-poetry&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2.1.5&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;~/.poetry&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.os }}-poetry&lt;/span&gt;
      &lt;span class="c1"&gt;# Only runs when key from caching step changes&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install latest version of Poetry&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps.cache-poetry.outputs.cache-hit != 'true'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -&lt;/span&gt;
      &lt;span class="c1"&gt;# Poetry still needs to be re-prepended to the PATH on each run, since&lt;/span&gt;
      &lt;span class="c1"&gt;# PATH does not persist between runs.&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Add Poetry to $PATH&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo "$HOME/.poetry/bin" &amp;gt;&amp;gt; $GITHUB_PATH&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get Poetry version&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;poetry --version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I do another caching step for dependencies and install them if &lt;code&gt;poetry.lock&lt;/code&gt; has changed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check pyproject.toml validity&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;poetry check --no-interaction&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache dependencies&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cache-deps&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2.1.5&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{github.workspace}}/.venv&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.os }}-${{ hashFiles('**/poetry.lock') }}&lt;/span&gt;
          &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.os }}-&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install deps&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps.cache-deps.cache-hit != 'true'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;poetry config virtualenvs.in-project true&lt;/span&gt;
          &lt;span class="s"&gt;poetry install --no-interaction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, once dependency and virtual environment setup is done, I run pytest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run tests&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;poetry run pytest -v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-build-stability"&gt;
  &lt;/a&gt;
  Test build stability
&lt;/h2&gt;

&lt;p&gt;For testing build stability, we simply run Poetry's &lt;code&gt;build&lt;/code&gt; subcommand, which creates the build artifacts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build artifacts&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;poetry build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#automerge"&gt;
  &lt;/a&gt;
  Auto-merge
&lt;/h2&gt;

&lt;p&gt;GitHub also allows pull requests to be merged automatically if branch protection rules are configured and if the pull request passes all required reviews and status checks. In the repo Settings &amp;gt; Branches &amp;gt; Branch Protection rules, I have a rule defined for &lt;code&gt;main&lt;/code&gt; requiring all jobs in the &lt;code&gt;build.yml&lt;/code&gt; workflow to pass before a branch can be merged into &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#release-automation"&gt;
  &lt;/a&gt;
  Release automation
&lt;/h1&gt;

&lt;p&gt;There are 2 parts to GitHub release automation:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the GitHub release using Git tags and add the build artifacts to it (&lt;a href="https://github.com/jidicula/random-standup-py/blob/main/.github/workflows/release.yml"&gt;workflow&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Publish the package to PyPI (&lt;a href="https://github.com/jidicula/random-standup-py/blob/main/.github/workflows/publish.yml"&gt;workflow&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#create-github-release"&gt;
  &lt;/a&gt;
  Create GitHub Release
&lt;/h2&gt;

&lt;p&gt;We set up the workflow to trigger on push to a tag beginning with &lt;code&gt;v&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Sequence of patterns matched against refs/tags&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;v*'&lt;/span&gt; &lt;span class="c1"&gt;# Push events to matching v*, i.e. v1.0, v20.15.10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we define our &lt;code&gt;autorelease&lt;/code&gt; job, running on Ubuntu (cheapest and fastest GitHub Actions runner environment):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create Release&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;autorelease&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create Release&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ubuntu-latest'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our first 2 steps are almost the same as our Build workflow for pushes and PRs to &lt;code&gt;main&lt;/code&gt;: we checkout the repo and set up Poetry. Our checkout step is slightly different, though: we provide &lt;code&gt;0&lt;/code&gt; to the &lt;code&gt;fetch-depth&lt;/code&gt; input so we make a deep clone with all commits, not a shallow clone with just the most recent commit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout code&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;fetch-depth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Poetry setup steps are identical, so I won't include them here.&lt;/p&gt;

&lt;p&gt;Then, we use Poetry to get the project version from &lt;code&gt;pyproject.toml&lt;/code&gt;, store it in an environment variable, then check if the tag version matches the project version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Add version to environment vars&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;PROJECT_VERSION=$(poetry version --short)&lt;/span&gt;
          &lt;span class="s"&gt;echo "PROJECT_VERSION=$PROJECT_VERSION" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check if tag version matches project version&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;TAG=$(git describe HEAD --tags --abbrev=0)&lt;/span&gt;
          &lt;span class="s"&gt;echo $TAG&lt;/span&gt;
          &lt;span class="s"&gt;echo $PROJECT_VERSION&lt;/span&gt;
          &lt;span class="s"&gt;if [[ "$TAG" != "v$PROJECT_VERSION" ]]; then exit 1; fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a bit of a guardrail because of how I trigger the autorelease. I update the &lt;code&gt;pyproject.toml&lt;/code&gt; version on my local clone using &lt;code&gt;poetry version &amp;lt;version&amp;gt;&lt;/code&gt;, commit it to &lt;code&gt;main&lt;/code&gt;, then tag it with the same &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; and push the commit and the tag, which then starts this workflow. We need to ensure that the version tag and the &lt;code&gt;pyproject.toml&lt;/code&gt; versions match (in case we forget to bump versions properly).&lt;/p&gt;

&lt;p&gt;Then, we do the same dependency and virtualenv setup as in my Build workflow using Poetry, then run pytest and &lt;code&gt;poetry build&lt;/code&gt;. The build artifacts will be used when we create the release in the final step of this workflow.&lt;/p&gt;

&lt;p&gt;The next step is to create some release notes. I keep a release template in the &lt;code&gt;.github&lt;/code&gt; folder and append some gitlog output to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Release Notes&lt;/span&gt;
        &lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an &amp;lt;%ae&amp;gt;' --no-merges &amp;gt;&amp;gt; ".github/RELEASE-TEMPLATE.md"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That gnarly gitlog command is checking all commits since the last tag to HEAD. For each commit, it appends the commit hash, the commit message subject, the author name, and the author email to the release template.&lt;/p&gt;

&lt;p&gt;Finally, we use a &lt;a href="https://dev.toour"&gt;3rd-party release creation Action&lt;/a&gt; for creating a release draft with the release notes and artifacts we just created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create Release Draft&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;softprops/action-gh-release@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;body_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;.github/RELEASE-TEMPLATE.md"&lt;/span&gt;
          &lt;span class="na"&gt;draft&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;dist/random_standup-${{env.PROJECT_VERSION}}-py3-none-any.whl&lt;/span&gt;
            &lt;span class="s"&gt;dist/random-standup-${{env.PROJECT_VERSION}}.tar.gz&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_REPOSITORY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;jidicula/random-standup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates a draft visible at &lt;a href="https://github.com/jidicula/random-standup-py/releases"&gt;https://github.com/jidicula/random-standup-py/releases&lt;/a&gt;. I modify the release announcements as needed, and publish the release.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#publishing-to-pypi"&gt;
  &lt;/a&gt;
  Publishing to PyPI
&lt;/h2&gt;

&lt;p&gt;The final step of the release process is to publish the package release to the Python Package Index along with the release assets. Here's the full &lt;a href="https://github.com/jidicula/random-standup-py/blob/main/.github/workflows/publish.yml"&gt;workflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This time, we trigger the workflow to run on a release being published (the last step of the previous workflow is manually publishing a release draft):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;published&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We do the same checkout and Poetry setup as before. Then, we simply run &lt;code&gt;poetry publish --build&lt;/code&gt; using a PyPI token as a GitHub Secrets environment variable for authentication:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Publish to PyPI&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;PYPI_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.PYPI_TOKEN }}&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;poetry config pypi-token.pypi $PYPI_TOKEN&lt;/span&gt;
          &lt;span class="s"&gt;poetry publish --build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h1&gt;

&lt;p&gt;So overall, working on this project would involve:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make a PR for my changes.&lt;/li&gt;
&lt;li&gt;Confirm auto-merge.&lt;/li&gt;
&lt;li&gt;Repeeat Steps 1 and 2 until I'm ready to release.&lt;/li&gt;
&lt;li&gt;Bump the &lt;code&gt;pyproject.toml&lt;/code&gt; version on my local clone using &lt;code&gt;poetry version &amp;lt;new_version&amp;gt;&lt;/code&gt;. Commit the changes.&lt;/li&gt;
&lt;li&gt;Create a tag on &lt;code&gt;main&lt;/code&gt; pointing to the version bump commit.&lt;/li&gt;
&lt;li&gt;Push both the tag and the version bump commit to GitHub.&lt;/li&gt;
&lt;li&gt;Wait for the &lt;a href="https://github.com/jidicula/random-standup-py/actions/workflows/release.yml"&gt;Create Release&lt;/a&gt; run to finish.&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="https://github.com/jidicula/random-standup-py/releases"&gt;https://github.com/jidicula/random-standup-py/releases&lt;/a&gt; and modify the Announcements for the just-created release draft.&lt;/li&gt;
&lt;li&gt;Publish the release.&lt;/li&gt;
&lt;li&gt;Wait for the &lt;a href="https://github.com/jidicula/random-standup-py/actions/workflows/publish.yml"&gt;PyPI Publish&lt;/a&gt; run to finish.&lt;/li&gt;
&lt;li&gt;Check &lt;a href="https://pypi.org/project/random-standup/"&gt;PyPI&lt;/a&gt; for the updated package version.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have any questions or comments, email me at &lt;a href="mailto:johanan+blog@forcepush.tech"&gt;johanan+blog@forcepush.tech&lt;/a&gt; or post a comment below.&lt;/p&gt;

</description>
      <category>python</category>
      <category>github</category>
      <category>poetry</category>
      <category>devops</category>
    </item>
    <item>
      <title>Understanding Outlines in CSS, overwriting browser defaults.</title>
      <author>chaderenyore</author>
      <pubDate>Mon, 10 May 2021 00:57:11 +0000</pubDate>
      <link>https://dev.to/chaderenyore/understanding-outlines-in-css-overwriting-browser-defaults-3a4n</link>
      <guid>https://dev.to/chaderenyore/understanding-outlines-in-css-overwriting-browser-defaults-3a4n</guid>
      <description>&lt;p&gt;You might have noticed that in newer versions of web browsers there is this dark outline in forms, buttons after they are clicked and many more, Now what are those things, why are they there and how can you remove them? (cause to be sincere these aren't beautiful)&lt;/p&gt;

&lt;p&gt;It usually shows when it's focused, or active. (Pseudo selector for focus, &lt;em&gt;:focus&lt;/em&gt;) And Focus has this outline property it's the browser defaults.&lt;br&gt;
The outline is comparable to a border but it's not part of the box model, It is like a lighter version of the border.&lt;/p&gt;

&lt;p&gt;You can style it with the outline property. &lt;br&gt;
To remove it, outline: none;&lt;br&gt;
It's usually displayed when the element is focused so use the focus Pseudo class&lt;br&gt;
&lt;em&gt;button:focus {&lt;br&gt;
      outline: none;&lt;br&gt;
}&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can set the outline to a different look maybe its width, its color too, you can also add a border-radius to it too and also make it like a normal border&lt;/p&gt;

&lt;p&gt;see MDN For a complete reference of what you can set with the outline &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/outline"&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/outline&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With that, you have full access to your input or button outline and remove ugly outlines by the browser defaults. Now go give that outline a great look😀😀 &lt;/p&gt;

</description>
      <category>css</category>
      <category>browser</category>
    </item>
  </channel>
</rss>
