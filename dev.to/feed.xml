<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 25 🎨 Color Tools for Designers</title>
      <author>venkatesh-aj</author>
      <pubDate>Wed, 07 Apr 2021 12:01:35 +0000</pubDate>
      <link>https://dev.to/venkateshaj/top-25-color-tools-for-designers-4la1</link>
      <guid>https://dev.to/venkateshaj/top-25-color-tools-for-designers-4la1</guid>
      <description>&lt;p&gt;1) &lt;a href="https://colorsui.com"&gt;Colors UI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A collection of beautiful color palettes that can be customized as well. This website also provides Tint and Shade generators, Solid colors, Material colors, and more.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3WH27oVd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blbzwd2gvjm9gh3domhu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3WH27oVd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blbzwd2gvjm9gh3domhu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) &lt;a href="https://www.culrs.com/"&gt;Culrs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Culrs gives you to pick color palettes easily&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--39HnRbLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5lswslxpdwvuce2gbs7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--39HnRbLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5lswslxpdwvuce2gbs7.png" alt="Culrs"&gt;&lt;/a&gt;&lt;br&gt;
3) &lt;a href="https://colorwise.io/"&gt;Colorwise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The wise choice of colors. Most voted on product hunt&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qD4WkbMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo2m4xeseqwfbfsccoqz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qD4WkbMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo2m4xeseqwfbfsccoqz.png" alt="Colorwise"&gt;&lt;/a&gt;&lt;br&gt;
4) &lt;a href="https://htmlcolorcodes.com/"&gt;HTML Color Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTML Color Codes where you can find HTML color codes using color picker and also create color chart and much more&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P8boJnkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v05oxwlnt4oov0azsir0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P8boJnkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v05oxwlnt4oov0azsir0.png" alt="HTML Color Codes"&gt;&lt;/a&gt;&lt;br&gt;
5) &lt;a href="https://www.colorsandfonts.com/"&gt;Colors &amp;amp; Fonts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;C&amp;amp;F is a Curated collection of color palettes and gradient colors and font pairing.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jAxEz5DD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq3f91wqfrwzhj4cp5md.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jAxEz5DD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq3f91wqfrwzhj4cp5md.png" alt="Colors &amp;amp; Fonts"&gt;&lt;/a&gt;&lt;br&gt;
6) &lt;a href="http://colormind.io/"&gt;Color Mind&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Color Mind is an AI-powered color palette generator &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V8FeISbi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv3g1w76fzz3emxzueoj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V8FeISbi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv3g1w76fzz3emxzueoj.png" alt="Color Mind"&gt;&lt;/a&gt;&lt;br&gt;
7) &lt;a href="https://colordrop.io/"&gt;Color Drop&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Color Drop is a collection of beautiful four-color palettes. It is also provided flat colors, color code converter, and more&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kDyjRf7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77am9dmxsnz942q89z8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kDyjRf7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77am9dmxsnz942q89z8o.png" alt="Color Drop"&gt;&lt;/a&gt;&lt;br&gt;
8) &lt;a href="https://www.schemecolor.com/"&gt;Scheme Color&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scheme Color has a large number of color palettes where you can edit and download color palettes. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kIAFjOgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6afpiok4slxam3bfeqvj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIAFjOgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6afpiok4slxam3bfeqvj.png" alt="Scheme Color"&gt;&lt;/a&gt;&lt;br&gt;
9) &lt;a href="https://colorbox.io/"&gt;Colorbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ColorBox is a color tool website. It provides a set of colors&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1j-Uy4l2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aveemf3ytzsaxnw8az8l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1j-Uy4l2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aveemf3ytzsaxnw8az8l.png" alt="Colorbox"&gt;&lt;/a&gt;&lt;br&gt;
10) &lt;a href="https://coolors.co/"&gt;Coolors.co&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Coolors.co is a popular tool for color palettes. Where you can edit, save and download color palettes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4SNDsT7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bes7mxxux73y561kw5j4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4SNDsT7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bes7mxxux73y561kw5j4.png" alt="Coolors"&gt;&lt;/a&gt;&lt;br&gt;
11) &lt;a href="https://colorhunt.co/"&gt;Color Hunt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Color Hunt is an open collection of color palettes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yVMTFY_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwhg7yvma82h8zjs0ee2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yVMTFY_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwhg7yvma82h8zjs0ee2.png" alt="Color Hunt"&gt;&lt;/a&gt;&lt;br&gt;
12) &lt;a href="https://colors.dopely.top/"&gt;Dopelycolors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dopely Colors is a super app for anything related to colors designed for creatives like you.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VSBZXXNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ax91xn8jffkgkou9lum2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VSBZXXNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ax91xn8jffkgkou9lum2.png" alt="Dopelycolors"&gt;&lt;/a&gt;&lt;br&gt;
13) &lt;a href="https://mycolor.space/"&gt;ColorSpace&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generate color palettes from one color.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YraxwPq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6jm5ykgkynobiwhdjnp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YraxwPq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6jm5ykgkynobiwhdjnp.png" alt="ColorSpace"&gt;&lt;/a&gt;&lt;br&gt;
14) &lt;a href="https://saruwakakun.com/en/color-ideas"&gt;Saruwakakun&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nice color schemes for websites with app preview&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zY8Fdkru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtfhzkw9x91c0q7geju3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zY8Fdkru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtfhzkw9x91c0q7geju3.png" alt="Saruwakakun"&gt;&lt;/a&gt;&lt;br&gt;
15) &lt;a href="https://image-color.com/"&gt;Image Color&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pick colors from image, color picker and Color Contrast Checker&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TGOF6thd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sxm6xovgt8nyif4iba5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TGOF6thd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sxm6xovgt8nyif4iba5.png" alt="Image Color"&gt;&lt;/a&gt;&lt;br&gt;
16) &lt;a href="https://farbvelo.elastiq.ch/"&gt;Farbvelo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Random color palette generator&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tFIUW1s4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkc0bvknoe02ff5estii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tFIUW1s4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkc0bvknoe02ff5estii.png" alt="Farbvelo"&gt;&lt;/a&gt;&lt;br&gt;
17) &lt;a href="https://www.happyhues.co/"&gt;Happy Hues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Curated color palettes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8MmGrT4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxrn7l72x24b7dfkyjlu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8MmGrT4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxrn7l72x24b7dfkyjlu.png" alt="Happy Hues"&gt;&lt;/a&gt;&lt;br&gt;
18) &lt;a href="http://khroma.co/"&gt;Khroma&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Another AI color scheme tool&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xgtoobit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tv9gfmr79lmaf04jrnxw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xgtoobit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tv9gfmr79lmaf04jrnxw.png" alt="Khroma"&gt;&lt;/a&gt;&lt;br&gt;
19) &lt;a href="https://nipponcolors.com/"&gt;nipponcolors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you would like to use traditional colors then we recommend Nippon Colors.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zOUFJh0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7giyaitqbvyjgdsiumd8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zOUFJh0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7giyaitqbvyjgdsiumd8.png" alt="nipponcolors"&gt;&lt;/a&gt;&lt;br&gt;
20) &lt;a href="https://colorsinspo.com/"&gt;Colorsinspo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy beautiful color palettes with a single click&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q-LeQnRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goak37lhfghp6b2givcc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q-LeQnRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goak37lhfghp6b2givcc.png" alt="Colorsinspo"&gt;&lt;/a&gt;&lt;br&gt;
21) &lt;a href="https://colortopia.io/"&gt;Colortopia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Online color tool for finding beautiful color schemes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJlwzYx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usi5tqb477lhtp9uskst.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJlwzYx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usi5tqb477lhtp9uskst.png" alt="Colortopia"&gt;&lt;/a&gt;&lt;br&gt;
22) &lt;a href="https://colorswall.com/"&gt;Colorswall&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generate and save your color palettes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CH9Qz7Zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbfn01lk23yoiiryf694.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CH9Qz7Zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbfn01lk23yoiiryf694.png" alt="Colorswall"&gt;&lt;/a&gt;&lt;br&gt;
23) &lt;a href="https://www.palettelist.com/"&gt;Palettelist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pick 2 colors and generate more color palettes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--laZ8vCVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jtgufz1r1j8g2tovscs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--laZ8vCVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jtgufz1r1j8g2tovscs.png" alt="Palettelist"&gt;&lt;/a&gt;&lt;br&gt;
24) &lt;a href="https://webgradients.com/"&gt;Webgradients&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WebGradients is a free collection of linear gradients.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L8rAVnk_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjmtbxk4tgsuptyx44d0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L8rAVnk_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjmtbxk4tgsuptyx44d0.png" alt="Webgradients"&gt;&lt;/a&gt;&lt;br&gt;
25) &lt;a href="https://www.grabient.com/"&gt;Grabient&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another gradient tool&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--185I5Ebn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wiy8sbew7j8jh1scxjul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--185I5Ebn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wiy8sbew7j8jh1scxjul.png" alt="Grabient"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>frontend</category>
      <category>productivity</category>
      <category>design</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Daily Developer Jokes - Wednesday, Apr 7, 2021</title>
      <author>Daily Developer Jokes</author>
      <pubDate>Wed, 07 Apr 2021 12:00:15 +0000</pubDate>
      <link>https://dev.to/dailydeveloperjokes/daily-developer-jokes-wednesday-apr-7-2021-4a2o</link>
      <guid>https://dev.to/dailydeveloperjokes/daily-developer-jokes-wednesday-apr-7-2021-4a2o</guid>
      <description>&lt;p&gt;Generated by Daily Developer Jokes, a project by &lt;a href="https://xtrp.io/"&gt;Fred Adams&lt;/a&gt; (&lt;a href="https://dev.to/xtrp"&gt;@xtrp&lt;/a&gt; on DEV)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Read about Daily Developer Jokes on &lt;a href="https://xtrp.io/blog/2020/01/12/daily-jokes-bot-release/"&gt;this blog post&lt;/a&gt;, and check out the &lt;a href="https://dailydeveloperjokes.github.io/"&gt;Daily Developer Jokes Website&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#todays-joke-is" class="anchor"&gt;
  &lt;/a&gt;
  Today's Joke is...
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OfmoRRHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e1258c00f974.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OfmoRRHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e1258c00f974.png" alt="Joke Image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Have a joke idea for a future post? Email &lt;strong&gt;&lt;em&gt;&lt;a href="//mailto:xtrp@xtrp.io"&gt;xtrp@xtrp.io&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; with your suggestions!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This joke comes from &lt;a href="https://github.com/wesbos/dad-jokes"&gt;Dad-Jokes GitHub Repo by Wes Bos&lt;/a&gt; (thank you!), whose owner has given me permission to use this joke with credit.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>dailydeveloperjokes</category>
    </item>
    <item>
      <title>Making your KotlinJS Website Mobile-Friendly</title>
      <author>skalable-dev</author>
      <pubDate>Wed, 07 Apr 2021 11:59:06 +0000</pubDate>
      <link>https://dev.to/skalabledev/making-your-kotlinjs-website-mobile-friendly-223g</link>
      <guid>https://dev.to/skalabledev/making-your-kotlinjs-website-mobile-friendly-223g</guid>
      <description>&lt;p&gt;At sKalable we are Kotlin driven, so we are in a mission to make KotlinJS websites mainstream. We are advocates of clean code and strive for the best quality in everything we build! &lt;/p&gt;

&lt;p&gt;How many times have you visited a site that is not mobile responsive and thus renders terribly on your device? From my experience, I would say too many times! &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let's explore how we can make our KotlinJS site responsive, so we can delight our users&lt;/em&gt; 🙂😛&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#making-your-kotlinjs-website-mobilefriendly" class="anchor"&gt;
  &lt;/a&gt;
  Making your KotlinJS Website Mobile-Friendly
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0RpENrcv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/skalable.appspot.com/KotlinJS%2520Mobile%2520Responsive%2520Website%2520/KotlinJS%2520Media.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0RpENrcv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/skalable.appspot.com/KotlinJS%2520Mobile%2520Responsive%2520Website%2520/KotlinJS%2520Media.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-mobile-responsiveness" class="anchor"&gt;
  &lt;/a&gt;
  What is mobile responsiveness?
&lt;/h3&gt;

&lt;p&gt;When a website is responsive, its layout and content automatically adapt to fit and render correctly on the device its being run on. Basically, if the screen gets smaller, then the content and layout rearranges accordingly, ensuring the visuals and functionality are not compromised.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-is-it-so-important" class="anchor"&gt;
  &lt;/a&gt;
  Why is it so important?
&lt;/h3&gt;

&lt;p&gt;Google's recommendation is to adopt a &lt;a href="https://developers.google.com/search/mobile-sites/mobile-seo/responsive-design"&gt;responsive development&lt;/a&gt; for our websites. The benefits of doing this are many:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It provides the best quality and user experience as a non-mobile friendly website is very hard to view on devices.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A good website will have better SEO, perform better in rankings and make your brand distill quality!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Users find non-mobile friendly websites frustrating and will certainly abandon your site if it is hard to navigate.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-are-we-going-to-achieve-this" class="anchor"&gt;
  &lt;/a&gt;
  How are we going to achieve this?
&lt;/h3&gt;

&lt;p&gt;We are going to adopt a 'mobile first' approach by using &lt;code&gt;Meta Tags&lt;/code&gt; and &lt;code&gt;Media Queries&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Let's get started by building a quick website with a &lt;em&gt;Navigation Bar&lt;/em&gt; that changes the layout into a convenient &lt;em&gt;Navigation Drawer&lt;/em&gt; depending on the device's dimensions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#meta-viewport-tag" class="anchor"&gt;
  &lt;/a&gt;
  Meta Viewport Tag
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;ViewPort&lt;/code&gt; tag is basically needed to signal browsers that the site adapts to all devices. It provides them with instructions on how to scale and adjust the dimensions to match the screen's size.&lt;/p&gt;

&lt;p&gt;The first thing we need to do is to add the &lt;a href="https://developers.google.com/search/mobile-sites/mobile-seo/responsive-design"&gt;Meta Viewport Tag&lt;/a&gt; below in your &lt;code&gt;index.html&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#media-queries" class="anchor"&gt;
  &lt;/a&gt;
  Media Queries
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/cssref/css3_pr_mediaquery.asp"&gt;Media Queries&lt;/a&gt; are used to style websites for different sized screens (phones, tablets, desktop). Essentially, by using Media Queries, we can target a specific screen size or pixel range and make changes to the CSS ONLY when the particular screen size that we have set is hit. &lt;/p&gt;

&lt;p&gt;So, how do we use them? The syntax of Media Queries for mobile responsiveness looks like this in KotlinJS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*Specify the minimum screen width that you want to target in pixels*/&lt;/span&gt;
&lt;span class="nf"&gt;media&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"only screen and (min-width: 768px)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*Add the CSS changes you want to display here*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To clarify, the code above will only execute on screens that are 768px or larger.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*Specify the maximum screen width that you want to target in pixels*/&lt;/span&gt;
&lt;span class="nf"&gt;media&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"only screen and (max-width: 768px)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="cm"&gt;/*Add the CSS changes you want to display here*/&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will adapt our CSS for screen sizes 768px or lower.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#safety-in-functions" class="anchor"&gt;
  &lt;/a&gt;
  Safety in Functions
&lt;/h3&gt;

&lt;p&gt;As we begin to add more and more queries it becomes more and more hardcoded. A misspelling can cause all sorts of havoc in these cases.&lt;/p&gt;

&lt;p&gt;Using utility functions to generate these can save us from all types of headaches.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;mediaOnlyScreenMinWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;LinearDimension&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"only screen and (min-width: ${width})"&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;mediaOnlyScreenMaxWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;LinearDimension&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"only screen and (max-width: ${width})"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using these functions we can create responsive sizes that will match across our codebase.&lt;/p&gt;

&lt;p&gt;Applying the utility functions our code now feels less hardcoded&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*Specify the minimum screen width that you want to target in pixels*/&lt;/span&gt;
&lt;span class="nf"&gt;media&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mediaOnlyScreenMinWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;768&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*Add the CSS changes you want to display here*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see above, we use the &lt;code&gt;(mediaOnlyScreenMaxWidth())&lt;/code&gt; or the &lt;br&gt;
&lt;code&gt;(mediaOnlyScreenMinWidth())&lt;/code&gt; to specify when the changes to the CSS should happen. &lt;/p&gt;

&lt;p&gt;Let's explore the code above in more detail with specific examples from our website. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#media-in-action" class="anchor"&gt;
  &lt;/a&gt;
  Media in Action
&lt;/h3&gt;

&lt;p&gt;Our top navigation bar includes a logo and three Call to action (CTA) buttons. When the Webpage is rendered on Desktop, we want the navbar to display fully. If the screen size drops below the desired limit, the margin should be removed. To achieve this we use the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;primaryNav&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;css&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;marginTop&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;em&lt;/span&gt;

        &lt;span class="nf"&gt;media&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mediaOnlyScreenMinWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;768&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rendering on smaller devices, such as phones and tablets, the navbar should be replaced with a drawer navigation containing the CTAs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mobileMenu&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;css&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;

        &lt;span class="nf"&gt;media&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mediaOnlyScreenMinWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;768&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;
            &lt;span class="nf"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;LinearDimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blueViolet&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Heg1v24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://storage.googleapis.com/skalable.appspot.com/KotlinJS%2520Mobile%2520Responsive%2520Website%2520/mobile-responsiveness.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Heg1v24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://storage.googleapis.com/skalable.appspot.com/KotlinJS%2520Mobile%2520Responsive%2520Website%2520/mobile-responsiveness.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Using media tags in KotlinJS is quite simple. It is definitely worth addressing mobile responsiveness when developing your KotlinJS website. Making it render correctly on a desktop is not enough, especially  factoring in that mobile traffic has overtaken desktop and now accounts for the majority of website traffic.&lt;/p&gt;

&lt;p&gt;You can check out the sample project &lt;a href="https://github.com/skalable-samples/KotlinJS-Responsive-Web"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to leave any questions or comments below. We would love hear your thoughts.&lt;/p&gt;

&lt;p&gt;@sKalable we are a Full Stack Kotlin-centric agency that create code to ensure it is consistently Maintainable, Flexible and of course,  &lt;strong&gt;&lt;em&gt;sKalable&lt;/em&gt;&lt;/strong&gt;. 😎&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/skalable_dev"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/skalabledev"&gt;Dev.to&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/company/skalable-dev/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;for the latest updates and strategies in Kotlin, Multiplatform and much more, catering for your business or personal needs.&lt;/p&gt;

</description>
      <category>react</category>
      <category>kotlin</category>
      <category>html</category>
      <category>codequality</category>
    </item>
    <item>
      <title>building a rock paper scissors game</title>
      <author>Bethuel</author>
      <pubDate>Wed, 07 Apr 2021 11:49:43 +0000</pubDate>
      <link>https://dev.to/bethropolis/building-a-rock-paper-scissors-game-3a7f</link>
      <guid>https://dev.to/bethropolis/building-a-rock-paper-scissors-game-3a7f</guid>
      <description>&lt;p&gt;We all like building a fun project and one of them is a simple game.&lt;/p&gt;

&lt;p&gt;today I will be building a rock paper scissors game with &lt;code&gt;RPSjs&lt;/code&gt; library which I built myself a year ago.&lt;/p&gt;

&lt;p&gt;the whole source code is at the &lt;a href="#code"&gt;end&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;this is how it will look&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7hTxxrYT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/co41n7fu22fkpwq0c7zj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7hTxxrYT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/co41n7fu22fkpwq0c7zj.png" alt="Desktop-screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;when you click the buttons it shows what the computer choose against yours and who won&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ge46j5lK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir7mbmeunkmg5n0mvbej.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ge46j5lK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir7mbmeunkmg5n0mvbej.gif" alt="7cd19c054f22a60646f87ce541e422b1152def5b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you can play with this &lt;a href="https://jsfiddle.net/bethropolis/fdvxLk13/5/"&gt;JSfiddle&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#first" class="anchor"&gt;
  &lt;/a&gt;
  first
&lt;/h1&gt;

&lt;p&gt;we will import the library through a CDN&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/rpsjs@1.0.0/rockPaperScissors.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you can visit the website for the &lt;a href="https://bethropolis.github.io/rockPaperScissorsjs"&gt;documentation&lt;/a&gt; or &lt;a href="https://github.com/bethropolis/rockPaperScissorsjs"&gt;Github&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;we are going to create a boilerplate&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QqIj5Zlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxlcedde1rxdf9zlbqno.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QqIj5Zlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxlcedde1rxdf9zlbqno.png" alt="xdfsghh-svg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;where are now going to add the buttons&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LP7R6HIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr9cjuny1q7n4hll4tz3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LP7R6HIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr9cjuny1q7n4hll4tz3.png" alt="gy8oooo-svg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;add the cdn onto the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--85L8mIc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dohs8iayih4bkd6be4f0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--85L8mIc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dohs8iayih4bkd6be4f0.png" alt="half-svg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#javascript" class="anchor"&gt;
  &lt;/a&gt;
  javascript
&lt;/h1&gt;

&lt;p&gt;now it is time for sweet JavaScript to be added.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4K9QfTFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awckayevg23ye838nilw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4K9QfTFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awckayevg23ye838nilw.png" alt="oggggui-svg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#explanation" class="anchor"&gt;
  &lt;/a&gt;
  explanation
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
              &lt;span class="nx"&gt;startGame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;in the Js, we first get how many buttons are on the document with the &lt;code&gt;document.querySelectorAll("button")&lt;/code&gt; and for each button, we add an event listener which will call the &lt;code&gt;startGame()&lt;/code&gt; function when clicked. the &lt;code&gt;btn.innerText&lt;/code&gt; is passed as a parameter in the function which will be the user's choice. For example, if you click &lt;code&gt;&amp;lt;button&amp;gt;rock&amp;lt;/rock&amp;gt;&lt;/code&gt; then &lt;code&gt;rock&lt;/code&gt; will be passed as a value in the function.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This way is not recommended but I will use it just for this demonstration &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#second-part" class="anchor"&gt;
  &lt;/a&gt;
  second part
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startGame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userChoice&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Play&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Roll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userChoice&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;in the &lt;code&gt;startGame(userChoice)&lt;/code&gt; function we place the users choice into a variable &lt;code&gt;userChoice&lt;/code&gt;. &lt;br&gt;
Using the &lt;code&gt;play()&lt;/code&gt; class we create a new class &lt;code&gt;player&lt;/code&gt;(can be anything) which gives us access to the &lt;code&gt;player.Roll()&lt;/code&gt; function, we pass &lt;code&gt;userChoice&lt;/code&gt; onto the function which will return an object and finally we log out the result with &lt;code&gt;console.log(data)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;this is what will be displayed on your console&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;it won't be exact, since the computer's choice is random&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MsxOXKOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7exiqv9ze5w5jaqx5mag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MsxOXKOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7exiqv9ze5w5jaqx5mag.png" alt="output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;but displaying it on the console isn't that impressive so let's add some more code.&lt;/p&gt;

&lt;p&gt;on the HTML let's add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt; 
   &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"user"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"computer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"won"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and css&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt; &lt;span class="m"&gt;-17px&lt;/span&gt; &lt;span class="m"&gt;#97c4fe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#3d94f6&lt;/span&gt; &lt;span class="m"&gt;5%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1e62d0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#3d94f6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#337fed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;9px&lt;/span&gt; &lt;span class="m"&gt;26px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#1570cd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1e62d0&lt;/span&gt; &lt;span class="m"&gt;5%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#3d94f6&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#1e62d0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the CSS is just to style the buttons and make them look great.&lt;/p&gt;

&lt;p&gt;and let's update the javascript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startGame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userChoice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Play&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Roll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userChoice&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#computer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;computer: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;computer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#won&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;won: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;won&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#code" class="anchor"&gt;
  &lt;/a&gt;
  code
&lt;/h1&gt;

&lt;p&gt;finally here is the whole source code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
      &lt;span class="c"&gt;&amp;lt;!--the css--&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt; &lt;span class="m"&gt;-17px&lt;/span&gt; &lt;span class="m"&gt;#97c4fe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#3d94f6&lt;/span&gt; &lt;span class="m"&gt;5%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1e62d0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#3d94f6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#337fed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;9px&lt;/span&gt; &lt;span class="m"&gt;26px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;text-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#1570cd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1e62d0&lt;/span&gt; &lt;span class="m"&gt;5%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#3d94f6&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#1e62d0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
          &lt;span class="c"&gt;&amp;lt;!--the cdn--&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/rpsjs@1.0.0/rockPaperScissors.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
     &lt;span class="c"&gt;&amp;lt;!--to be displayed--&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"user"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"computer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"won"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!--user buttons--&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;rock&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;paper&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;scissors&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!--the js--&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
       &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;startGame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startGame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userChoice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Play&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Roll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userChoice&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#computer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;computer: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;computer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#won&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;won: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;won&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and there you go, you have your very own rock paper scissors game.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/TdfyKrN7HGTIY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/TdfyKrN7HGTIY/giphy.gif" alt="huraaay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#about" class="anchor"&gt;
  &lt;/a&gt;
  about
&lt;/h1&gt;

&lt;p&gt;I am Bethuel and this is my first post, I hope you enjoyed it and&lt;br&gt;
thanks for sticking by. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>noob</category>
      <category>rpsjs</category>
    </item>
    <item>
      <title>Video: Building a Codename One Project for iOS</title>
      <author>Steve Hannah</author>
      <pubDate>Wed, 07 Apr 2021 11:46:34 +0000</pubDate>
      <link>https://dev.to/shannah/video-building-a-codename-one-project-for-ios-2j54</link>
      <guid>https://dev.to/shannah/video-building-a-codename-one-project-for-ios-2j54</guid>
      <description>&lt;p&gt;This is the third video in my series about &lt;a href="https://start.codenameone.com"&gt;our new online tool, Codename One initializr&lt;/a&gt;, which allows you to generate a Maven starter project for a native mobile app in one click. The &lt;a href="https://dev.to/shannah/online-tool-to-generate-ios-android-starter-project-k7h"&gt;first video&lt;/a&gt; showed how to generate the starter project, and run it in the Codename One simulator. The &lt;a href="https://dev.to/shannah/how-to-deploy-a-codename-one-app-on-android-5h8o"&gt;second video&lt;/a&gt; showed how to build and deploy the project on an Android device. In this video I show how to build and deploy the project on an iOS device.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/J7UJrtkXHqg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldw-too-long-didnt-watch" class="anchor"&gt;
  &lt;/a&gt;
  TLDW (Too Long Didn't Watch):
&lt;/h2&gt;

&lt;p&gt;This video starts out with my Codename One project already opened in IntelliJ. See &lt;a href="https://dev.to/shannah/online-tool-to-generate-ios-android-starter-project-k7h"&gt;this post&lt;/a&gt; for steps on how to generate this project.&lt;/p&gt;

&lt;p&gt;In the video I demonstrate two different approaches for building the iOS app.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Locally (0:55-2:45)&lt;/strong&gt; - Requires a Mac with Xcode Installed.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Using Build Server (6:45-8:35)&lt;/strong&gt; - Can be built on Windows, Linux, or Mac. With no special requirements beyond Maven and the JDK. You just need a free Codename One account.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;NOTE: I also show how to generate your iOS certificates and provisioning profiles using the Certificate Wizard (2:45-6:45), as this is required to build apps for iOS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-locally" class="anchor"&gt;
  &lt;/a&gt;
  Building Locally
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;local build&lt;/em&gt; option generates an Xcode project, which we then open and build using Xcode.&lt;/p&gt;

&lt;p&gt;To trigger this build, select "Local Builds" &amp;gt; "Xcode iOS Project":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rm4LiGDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-5.51.41-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rm4LiGDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-5.51.41-AM.png" alt="Screen Shot 2021-04-06 at 5.51.41 AM" width="448" height="180" class="aligncenter size-full wp-image-583"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then press the "Run" button.&lt;/p&gt;

&lt;p&gt;It takes the ParparVM compiler a minute or two to do its thing, but when it's done, it opens the generated Xcode project in Xcode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cLnvXnC0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-5.55.03-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cLnvXnC0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-5.55.03-AM.png" alt="Screen Shot 2021-04-06 at 5.55.03 AM" width="911" height="517" class="aligncenter size-full wp-image-584"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once opened, I press the "Run" button on the Xcode toolbar and wait while it compiles the project. When it is done, it opens the iOS simulator with my app running in it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E5BOzwG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-5.58.05-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E5BOzwG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-5.58.05-AM.png" alt="Screen Shot 2021-04-06 at 5.58.05 AM" width="317" height="665" class="aligncenter size-full wp-image-585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-with-the-build-server" class="anchor"&gt;
  &lt;/a&gt;
  Building with the Build Server
&lt;/h3&gt;

&lt;p&gt;One of the nice things about Codename One is that it provides a build server with all of the native build tools installed and up-to-date. This simplifies the process of building native apps greatly. You can build your project for iOS, Android, Mac Desktop, Windows Desktop, Windows UWP, and Javascript without requiring any special build tools installed beyond the JDK. Building for any of these targets is as simple as pressing a button, or running a Maven goal.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#generating-certificates" class="anchor"&gt;
  &lt;/a&gt;
  Generating Certificates
&lt;/h4&gt;

&lt;p&gt;Building for iOS requires that you have an Apple developer account. Additionally, Apple requires you to generate certificates and provisioning profiles for your apps. This is by far the most painful part of app development. To help ease the pain, Codename One provides a certificate wizard to help generate these. Before I can submit my first iOS build, I need to walk through the certificate wizard to generate these certificates. The certificate wizard process starts at approx 2:45 in the video, and runs until 6:45.&lt;/p&gt;

&lt;p&gt;To access the certificate wizard, I need to open Codename One Settings. I do this by selecting "Tools" &amp;gt; "Codename One Settings" from IntelliJ's configuration menu, then pressing the "Run" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YZO1mgZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.11.27-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZO1mgZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.11.27-AM.png" alt="Screen Shot 2021-04-06 at 6.11.27 AM" width="372" height="163" class="aligncenter size-full wp-image-586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will open The Control Center (aka Codename One Settings, aka Codename One Preferences):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zj5Y_9zl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.12.53-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zj5Y_9zl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.12.53-AM.png" alt="Screen Shot 2021-04-06 at 6.12.53 AM" width="872" height="460" class="aligncenter size-full wp-image-587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once there, I select "Device Settings" &amp;gt; "iOS" &amp;gt; "Certificate Wizard" from the navigation menu on the left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gAPOLMc9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.13.55-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gAPOLMc9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.13.55-AM.png" alt="Screen Shot 2021-04-06 at 6.13.55 AM" width="207" height="530" class="aligncenter size-full wp-image-588"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This displays the login form for the certificate wizard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qyPc20VI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.15.40-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qyPc20VI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.15.40-AM.png" alt="Screen Shot 2021-04-06 at 6.15.40 AM" width="644" height="330" class="aligncenter size-full wp-image-589"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IMPORTANT: You need to use your Apple Developer account to login to this form. NOT your Codename One account.&lt;/p&gt;

&lt;p&gt;In the video I spliced out some of the waiting time. The login can take a little while, so be patient. Once logged in, it shows me a list of my registered development devices, and I can select which ones I want to be able to deploy this app to for testing and debugging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lOtbgQiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.17.06-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lOtbgQiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.17.06-AM.png" alt="Screen Shot 2021-04-06 at 6.17.06 AM" width="653" height="506" class="aligncenter size-full wp-image-590"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above screenshot has all of the rows greyed out. When you log in, you'll see device names and UDIDs listed on this form.&lt;/p&gt;

&lt;p&gt;Generally I select all of them. If this is your first time building an iOS app, then you may not have any devices listed yet, and you'll need to click on the "Manage Devices" button and follow the instructions there.&lt;/p&gt;

&lt;p&gt;Next, it asks me to confirm that I want to regenerate my certificates, as it has detected that I already have certificates generated in my Apple account. In my case, I say "yes", I'd like to regenerate them, but in most cases, you would select "no", to just use your existing certificates.&lt;/p&gt;

&lt;p&gt;TIP: If your certificates were generated by the certificate wizard, then a copy of them has been stored inside the &lt;em&gt;$HOME/.codenameone/iosCerts&lt;/em&gt; directory, and the wizard will use them automatically. If they weren't generated by the certificate wizard, and you choose &lt;em&gt;not&lt;/em&gt; to regenerate them, then you may need to specify the location of your certificates in the iOS Settings section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oh-raszm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.25.52-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oh-raszm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.25.52-AM.png" alt="Screen Shot 2021-04-06 at 6.25.52 AM" width="648" height="290" class="aligncenter size-full wp-image-592"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, it asks whether we want to generate push certificates. In this case, since this is just a basic &lt;em&gt;Hello World&lt;/em&gt; app, we don't need push, so I leave these options OFF.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SQ-BTo56--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.27.38-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SQ-BTo56--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.27.38-AM.png" alt="Screen Shot 2021-04-06 at 6.27.38 AM" width="653" height="282" class="aligncenter size-full wp-image-595"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking next, it will churn for a bit, and if all goes well, it will show us the message that our certificates were generated and installed successfully.&lt;/p&gt;

&lt;p&gt;Just to be sure that my settings are saved. I click on the &lt;em&gt;hamburger&lt;/em&gt; menu in the upper right, and select "Save".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i_sv3neU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.29.40-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i_sv3neU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.29.40-AM.png" alt="Screen Shot 2021-04-06 at 6.29.40 AM" width="198" height="330" class="aligncenter size-full wp-image-596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sending-the-build" class="anchor"&gt;
  &lt;/a&gt;
  Sending the Build
&lt;/h4&gt;

&lt;p&gt;Now that the certificates are generated, we can send the build. Back in IntelliJ, I select "Build Server" &amp;gt; "iOS Debug Build"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5fH7iaXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.32.38-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5fH7iaXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.32.38-AM.png" alt="Screen Shot 2021-04-06 at 6.32.38 AM" width="384" height="193" class="aligncenter size-full wp-image-597"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NOTE: If this is your first time building with the build server, you may be prompted for your Codename One username and password.&lt;/p&gt;

&lt;p&gt;I then follow the progress of the build on the Codename One website.&lt;/p&gt;

&lt;p&gt;When it's finished, I get a set of links to do things like download the .ipa, or install the app on device.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YodDaSy8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.34.32-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YodDaSy8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sjhannah.com/blog/wp-content/uploads/2021/04/Screen-Shot-2021-04-06-at-6.34.32-AM.png" alt="Screen Shot 2021-04-06 at 6.34.32 AM" width="378" height="348" class="aligncenter size-full wp-image-598"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started" class="anchor"&gt;
  &lt;/a&gt;
  Get Started
&lt;/h2&gt;

&lt;p&gt;Getting started with your own native app is really easy. Just go to the &lt;a href="https://start.codenameone.com"&gt;Codename One initializr&lt;/a&gt;, enter your app details, and press "Download".&lt;/p&gt;

&lt;p&gt;For more information about Codename One, see &lt;a href="https://www.codenameone.com"&gt;the Codename One website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ios</category>
      <category>java</category>
      <category>kotlin</category>
      <category>mobile</category>
    </item>
    <item>
      <title>GN Tours and Services!</title>
      <author>Gaurav Singh</author>
      <pubDate>Wed, 07 Apr 2021 10:30:05 +0000</pubDate>
      <link>https://dev.to/gauravsingh9356/gn-tours-and-services-22o2</link>
      <guid>https://dev.to/gauravsingh9356/gn-tours-and-services-22o2</guid>
      <description>&lt;p&gt;Finally, I have completed our project. This was my first Java project on this scale. Seriously, I had no idea about how far I will make it after I decided on this idea to implement. But at last, I am happy to share that I implemented more utilities than I initially thought!&lt;/p&gt;

&lt;p&gt;𝓖𝓝 𝓣𝓸𝓾𝓻𝓼 𝓪𝓷𝓭 𝓢𝓮𝓻𝓿𝓲𝓬𝓮𝓼&lt;/p&gt;

&lt;p&gt;𝐅𝐮𝐥𝐥𝐲 𝐋𝐨𝐚𝐝𝐞𝐝 𝐑𝐞𝐚𝐥 𝐖𝐨𝐫𝐥𝐝 𝐀𝐩𝐩𝐥𝐢𝐜𝐚𝐭𝐢𝐨𝐧 𝐭𝐨 𝐝𝐞𝐯𝐞𝐥𝐨𝐩 𝐚 𝐬𝐲𝐬𝐭𝐞𝐦 𝐭𝐡𝐚𝐭 𝐚𝐮𝐭𝐨𝐦𝐚𝐭𝐞𝐬 𝐭𝐡𝐞 𝐩𝐫𝐨𝐜𝐞𝐬𝐬𝐞𝐬 𝐚𝐧𝐝 𝐚𝐜𝐭𝐢𝐯𝐢𝐭𝐢𝐞𝐬 𝐨𝐟 𝐚 𝐭𝐫𝐚𝐯𝐞𝐥.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functionalities" class="anchor"&gt;
  &lt;/a&gt;
  Functionalities:
&lt;/h2&gt;


&lt;li&gt;Fully Secured Authentication i.e. SignUp, Login, logout,Forget Password utilities. Encryption and Decryption of user passwords&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Loading Welcome Screen to user&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Registration&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;OTP Email Sending utility.&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Confimation Email Sending utility after successfull registration&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Update Details if user wants to update&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View User Details&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Different Packages with different prices and offerings&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View Hotels&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Book Package Utility&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Dynamic Hotels Integration with Database&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Book Hotel Utility&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View booked Package and Hotel&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;No of person, AC/Non AC room, food/No food etc all utilities offerings and then dynamically calculation of prices&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View Destination&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Payment with Stripe&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Chat Bot for answering FAQs&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Review Us utility includes user rating out of 5 and their comments about our services&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;About Us&lt;/li&gt;
&lt;h2&gt;
  &lt;a href="#used-tech" class="anchor"&gt;
  &lt;/a&gt;
  Used Tech:
&lt;/h2&gt;


&lt;li&gt;Java Swing for UI&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;MySQL for Database&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;AES Algorithm for encryption/decryption of passwords&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;JavaMail for sending email OTP&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Stripe API Payment Gateway &lt;/li&gt;
&lt;h2&gt;
  &lt;a href="#database-records" class="anchor"&gt;
  &lt;/a&gt;
  Database Records
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#database-travel" class="anchor"&gt;
  &lt;/a&gt;
  Database == Travel
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#tables" class="anchor"&gt;
  &lt;/a&gt;
  Tables:
&lt;/h4&gt;


&lt;li&gt;account for auth&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;customer for registration&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;bookpackage for booking of package&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;hotel for adding hotels in table and dynamically fetching them in UI&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;bookhotel for booking hotels&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;review for reviewing our services&lt;/li&gt;
&lt;h2&gt;
  &lt;a href="#some-glimpses" class="anchor"&gt;
  &lt;/a&gt;
  Some Glimpses
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8bC0hDkI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwpjvguogaittqq21oc9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8bC0hDkI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwpjvguogaittqq21oc9.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qW1liKEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf1ktkmsaoqkaf3sgew2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qW1liKEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf1ktkmsaoqkaf3sgew2.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xUUts0dX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wt3vet5901a84dhclzs7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xUUts0dX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wt3vet5901a84dhclzs7.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3SbkIwMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jhsj7k40pwq2490z33h.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3SbkIwMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jhsj7k40pwq2490z33h.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fqU5IF1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vig1tk4b0e6k762j7kax.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqU5IF1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vig1tk4b0e6k762j7kax.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/GauravSingh9356/GN_Tours_Services/tree/master"&gt;Link to GitHub &lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-liked-feel-free-to-star-it-starstruck" class="anchor"&gt;
  &lt;/a&gt;
  If liked, feel free to star it! 🤩
&lt;/h4&gt;

</description>
      <category>java</category>
      <category>github</category>
      <category>devops</category>
      <category>programming</category>
    </item>
    <item>
      <title>Is Medium still a good platform for new writers in 2021? Discussing the pros and cons</title>
      <author>Nityesh Agarwal</author>
      <pubDate>Wed, 07 Apr 2021 10:02:20 +0000</pubDate>
      <link>https://dev.to/nityeshaga/is-medium-still-a-good-platform-for-new-writers-in-2021-discussing-the-pros-and-cons-559e</link>
      <guid>https://dev.to/nityeshaga/is-medium-still-a-good-platform-for-new-writers-in-2021-discussing-the-pros-and-cons-559e</guid>
      <description>&lt;p&gt;In the past 4 years, I have published 13 articles on Medium and have got to &lt;a href="https://medium.com/@nityeshagarwal"&gt;3k+ followers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are the key lessons and tips I've learnt:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-medium-is-great-place-for-early-writers-to-reach-more-people" class="anchor"&gt;
  &lt;/a&gt;
  1. Medium is great place for early writers to reach more people.
&lt;/h3&gt;

&lt;p&gt;I was a nobody on the Internet. And Medium still boosted my articles, allowing me to reach hundreds of thousands of readers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-this-is-especially-true-if-you-publish-with-a-popular-medium-publication" class="anchor"&gt;
  &lt;/a&gt;
  2. This is especially true if you publish with a popular Medium publication.
&lt;/h3&gt;

&lt;p&gt;A lot of pubs accept articles from new writers and share it with their followers. &lt;/p&gt;

&lt;p&gt;I started by publishing with 3 large programming-focused publications and they were a large part of my early success.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-but-it-has-a-big-con-you-dont-own-your-audience-you-are-at-the-whims-of-the-medium-platform" class="anchor"&gt;
  &lt;/a&gt;
  3. But it has a big con - you don't own your audience. You are at the whims of the Medium platform.
&lt;/h3&gt;

&lt;p&gt;In the past 2 yrs, they've decided to clamp down the distribution of non-paywalled articles. &lt;/p&gt;

&lt;p&gt;This has made my 3k followers worth ~nothing for me. I have no way to reach them.&lt;/p&gt;

&lt;p&gt;This is also the reason why some of Medium's biggest publications have exited the platform in the past couple of yrs:&lt;/p&gt;

&lt;p&gt;• Signal v. Noise&lt;br&gt;
• FreeCodeCamp&lt;br&gt;
• HackerNoon&lt;/p&gt;

&lt;p&gt;(Read: &lt;a href="https://medium.com/signal-v-noise/signal-v-noise-exits-medium-56c483d827fc"&gt;Signal v. Noise exits Medium&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-you-should-also-beware-of-publishing-for-a-publication" class="anchor"&gt;
  &lt;/a&gt;
  4. You should also beware of publishing for a publication.
&lt;/h3&gt;

&lt;p&gt;When one of the publications that I had published with, decided to leave the Medium platform, they took my most popular articles (and all their SEO value) to their new website - leaving me high and dry.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-but-there-is-a-way-to-capture-the-upside-mediums-distribution-while-securing-yourself-from-the-downside-mediums-whims" class="anchor"&gt;
  &lt;/a&gt;
  5. But there is a way to capture the upside (Medium's distribution) while securing yourself from the downside (Medium's whims):
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Publish articles on your domain on your own website&lt;/li&gt;
&lt;li&gt;Republish them on Medium by &lt;a href="https://help.medium.com/hc/en-us/articles/360033930293-Set-a-canonical-link"&gt;setting a canonical URL&lt;/a&gt; to your version&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Search engines use canonical links to determine and prioritize the ultimate source of content, removing confusion when there are multiple copies of the same document in different locations. Sites that publish an overabundance of duplicate content without indicating a canonical link may be penalized in search engine rankings.&lt;/p&gt;




&lt;p&gt;I now publish articles on my own website under my domain - &lt;a href="https://www.nityesh.com/"&gt;nityesh.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But then, I also also republish them on Medium by adding a canonical URL pointing to my website's version of the article.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Lessons from the Gilded Rose refactoring Kata</title>
      <author>Alexandre Ruban</author>
      <pubDate>Wed, 07 Apr 2021 09:59:56 +0000</pubDate>
      <link>https://dev.to/alexandreruban/lessons-from-the-gilded-rose-refactoring-kata-pgh</link>
      <guid>https://dev.to/alexandreruban/lessons-from-the-gilded-rose-refactoring-kata-pgh</guid>
      <description>&lt;p&gt;The &lt;a href="https://github.com/emilybache/GildedRose-Refactoring-Kata"&gt;Gilded Rose refactoring Kata&lt;/a&gt; is a famous exercise used to teach some principles of Object Oriented design. In addition to finding this Kata really fun, I think it illustrates perfectly 3 very important aspects of real world software development: the &lt;strong&gt;need for a robust test suite&lt;/strong&gt;, &lt;strong&gt;when to refactor your code&lt;/strong&gt; and &lt;strong&gt;how to refactor your code&lt;/strong&gt;. Are you ready? Let's dive in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-requirements-of-the-gilded-rose-kata" class="anchor"&gt;
  &lt;/a&gt;
  The requirements of the Gilded Rose Kata
&lt;/h2&gt;

&lt;p&gt;The owner of the Gilded Rose inn, Allison, sells some of the finest goods (aged bries, backstage passes, sulfuras and normal goods). Those goods have 3 attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The name of the good&lt;/li&gt;
&lt;li&gt;A quality integer which denotes how valuable the good is&lt;/li&gt;
&lt;li&gt;A sell in integer which represents the number of days before the sell by date&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, the goods are constantly degrading in quality as they approach their sell by date and of course, the rules of the quality changes per day are different for each type of good.&lt;/p&gt;

&lt;p&gt;To keep track of her inventory, Allison uses a legacy software that is in charge of keeping track of the quality and number of days before the sell by date. She was really happy with it until now, because she needs a new feature. She hires you as a developer to add a new type of "conjured" goods to her inventory management tool.&lt;/p&gt;

&lt;p&gt;If you want to read the full description of the Kata, you will find the &lt;a href="https://github.com/emilybache/GildedRose-Refactoring-Kata/blob/main/GildedRoseRequirements.txt"&gt;complete set of requirements here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-need-a-robust-test-suite" class="anchor"&gt;
  &lt;/a&gt;
  You need a robust test suite
&lt;/h2&gt;

&lt;p&gt;Well there are 2 things you should know about Allison's inventory management tool:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The application is almost only composed of a &lt;a href="https://github.com/emilybache/GildedRose-Refactoring-Kata/blob/main/ruby/gilded_rose.rb#L7"&gt;single 46 lines method&lt;/a&gt; full of conditionals&lt;/li&gt;
&lt;li&gt;There are no tests&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now I want you to have a look at this method and imagine having to add a new set of rules for a new good here. How does it make you feel? The answer is probably terrified of breaking everything without even knowing it and you are right! The first part if you want to solve this Kata is to write good tests.&lt;/p&gt;

&lt;p&gt;In real applications, the complexity naturally grows just like in the Gilded Rose Kata. Without a robust test suite, you will inevitably break things, get a lot of errors in production and frustrate your users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-should-not-refactor-your-code-when-it-doesnt-have-to-change" class="anchor"&gt;
  &lt;/a&gt;
  You should not refactor your code when it doesn't have to change
&lt;/h2&gt;

&lt;p&gt;Before she needed this new feature, Allison was really happy with her inventory management tool. Refactoring was not needed, in fact, there was no need to change anything before the new requirement. At this point, you should not refactor your code because you only risk making things worse by breaking a tool Allison is happy working with. If you as the developer are not working on this part of the application, all you need to do is safely ignore this ugly code even if you could "improve" it.&lt;/p&gt;

&lt;p&gt;The new requirement however changes everything. Should you start by a refactoring or should you add the new feature while keeping the old "architecture"? Here, you really have two ways to go. You &lt;em&gt;could&lt;/em&gt;, as Kent Beck said "make the change easy then make the easy change" and refactor the code first or you &lt;em&gt;could&lt;/em&gt; just add the new feature in a quick and dirty way. &lt;/p&gt;

&lt;p&gt;There are no absolute rules here. &lt;/p&gt;

&lt;p&gt;What is the cost of refactoring? Maybe it's not worth your time if the code almost never changes. Maybe the code isn't that clean but still manageable. What is the cost of not refactoring? Will I lose even more time trying to add my new feature in poorly designed code than refactoring and then adding the new feature? What is the long term impact of not refactoring? Am I likely to pay a small cost frequently that will compound and become much bigger than to refactor now?&lt;/p&gt;

&lt;p&gt;In our Gilded Rose Kata however the answer is obvious. You will really struggle to add the new feature in this untangled mess of conditionals. It will be even longer than to add a reliable test suite, make the change easy by applying refactoring techniques to the legacy code and only then make the easy change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-refactor" class="anchor"&gt;
  &lt;/a&gt;
  How to refactor?
&lt;/h2&gt;

&lt;p&gt;The main ideas in Object Oriented design are always the same. You want to have small objects with a single responsibility that knows as little as possible about one another. The refactoring technique you should use here is called &lt;a href="https://www.refactoring.com/catalog/replaceConditionalWithPolymorphism.html"&gt;replace conditional with polymorphism&lt;/a&gt;. The main idea here is that instead of having conditionals everywhere, you will have one factory method centralizing the conditions and in charge of generating an instance of the right type of good, where each type of good has its own class implementing the same interface.&lt;/p&gt;

&lt;p&gt;If you want to learn more about refactoring techniques, here is the link to the &lt;a href="https://www.youtube.com/watch?v=8bZh5LMaSmE&amp;amp;t=593s"&gt;amazing talk of Sandi Metz&lt;/a&gt; during RailsConf 2014 that inspired this article. If you like this kind of refactoring Katas, you should definitely check her great book &lt;a href="https://sandimetz.com/99bottles"&gt;99 bottles of OOP&lt;/a&gt;, it is almost the same exercise and it's really fun to read!&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you liked this article, you can &lt;a href="https://world.hey.com/alexandre"&gt;subscribe to my newsletter&lt;/a&gt;, I try to write an article once a month!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>testing</category>
      <category>codequality</category>
      <category>programming</category>
    </item>
    <item>
      <title>Bitwise &amp; Bitshift in Java</title>
      <author>Simon Aust</author>
      <pubDate>Wed, 07 Apr 2021 09:56:46 +0000</pubDate>
      <link>https://dev.to/siaust/bitwise-bitshift-in-java-4cjb</link>
      <guid>https://dev.to/siaust/bitwise-bitshift-in-java-4cjb</guid>
      <description>&lt;p&gt;In programming we use control flow statements to change the execution of our code. If &lt;em&gt;this&lt;/em&gt; then &lt;em&gt;that&lt;/em&gt;, sort of thing. I'm sure we all know the standard keywords, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;. When we use &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;else if&lt;/code&gt; we put a condition in the parenthesis, which will return a boolean, essentially a yes do this, or a no skip this bit of code and move on. &lt;/p&gt;

&lt;p&gt;Here's a (simple) example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (1 &amp;lt; 2) {
    System.out.println("One is less than two, well played.");
} else {
    System.out.println("Why am I here? No one listens to me.");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conditional-relational-equality-operators" class="anchor"&gt;
  &lt;/a&gt;
  Conditional, Relational, Equality Operators
&lt;/h2&gt;

&lt;p&gt;In the snippet of code above you can see the &lt;strong&gt;less than&lt;/strong&gt; operator &lt;code&gt;&amp;lt;&lt;/code&gt; evaluating the two operands. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An operand is a object which the operator provides a function&lt;br&gt;
on. In our example above, &lt;code&gt;1 &amp;lt; 2&lt;/code&gt;, 1 and 2 would be operands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Other operators we know and love are -&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#relatioinal" class="anchor"&gt;
  &lt;/a&gt;
  Relatioinal
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;=&lt;/code&gt; less than or equal to&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt;&lt;/code&gt; greater than, &lt;code&gt;&amp;gt;=&lt;/code&gt; greater than or equal to&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#equality" class="anchor"&gt;
  &lt;/a&gt;
  Equality
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;==&lt;/code&gt; equal to&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;!=&lt;/code&gt; not equal to&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conditional" class="anchor"&gt;
  &lt;/a&gt;
  Conditional
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;||&lt;/code&gt; or&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last two are interesting, have you ever seen them on their own, like &lt;code&gt;|&lt;/code&gt; or &lt;code&gt;&amp;amp;&lt;/code&gt;? Well these are the bitwise version of those conditional operators, bitwise &lt;strong&gt;or&lt;/strong&gt; and bitwise &lt;strong&gt;and&lt;/strong&gt;. The difference being conditional operators work by evaluating two boolean values, while bitwise operators can evaluate two booleans, or two integer types (whole numbers) by evaluating the binary representation. Lets explore them in more depth.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Integral types in Java are &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt; and &lt;br&gt;
&lt;code&gt;char&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#bitwise-operators" class="anchor"&gt;
  &lt;/a&gt;
  Bitwise Operators
&lt;/h2&gt;

&lt;p&gt;Firstly lets have a little look at what an integer looks like in binary. We can use the handy static method &lt;code&gt;Integer.toBinaryString(int)&lt;/code&gt; and output to console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int twenty = 20;
System.out.println(Integer.toBinaryString(twenty)); // 10100

// the bits are one in position 2^2 (which equals 4) and 2^4 (16)
// 10100
// ^ ^ 
// 16 + 4 = 20
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Important note: &lt;code&gt;Integer.toBinaryString()&lt;/code&gt; does not return &lt;br&gt;
extra leading zeroes. An &lt;code&gt;int&lt;/code&gt; is 32 bits, but only the largest&lt;br&gt;
bit of the value to smallest bit is shown in the returned &lt;br&gt;
string. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#-raw-endraw-inclusive-or" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;|&lt;/code&gt; inclusive OR
&lt;/h3&gt;

&lt;p&gt;The inclusive &lt;strong&gt;or&lt;/strong&gt; operator will check the binary digits of two integer types, one column at a time, if either is binary 1, then the result is binary 1. Here's an example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int five = 5;  // 0101
int nine = 9;  // 1001
System.out.println(Integer.toBinaryString(five | nine)); // 1101
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is happening here? Lets break it down -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// each bit in each column is compared, from left to right -
// 0 or 1, 1 or 0, 0 or 0 and finally 1 or 1

// 0101
// 1001
// ----
// 1101 == decimal 13
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So you could say when a smaller integer is being compared with a bitwise &lt;strong&gt;or&lt;/strong&gt; statement with a larger integer, the result will always at least the value of the bigger number.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#-raw-amp-endraw-and" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;amp;&lt;/code&gt; AND
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;and&lt;/strong&gt; operator will only result in binary one when both bits are binary one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int three = 3; // 011
int five = 5; //  101
System.out.println(Integer.toBinaryString(three &amp;amp; five)); // 1 

// from right to left, 0 &amp;amp; 1 = 0, 1 &amp;amp; 0 = 0, 1 &amp;amp; 1 = 1
// 011
// 101
// ---
// 001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use &lt;code&gt;&amp;amp;&lt;/code&gt; to discover whether a number is odd or even. As &lt;br&gt;
the only odd digit in a binary pattern is 

&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;202^0&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 , the rightmost bit, we can &lt;br&gt;
use a bit mask to return the first bit, 1 or 0, odd or even, when comparing a number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int nine = 9; // 1001
int six = 6; //  0110
//                  ^ rightmost bit
int bitMask = 1; // 0001
System.out.println(1 == (six &amp;amp; bitMask) ? "Odd" : "Even"); // Odd
System.out.println(1 == (nine &amp;amp; bitMask) ? "Odd" : "Even");// Even
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;A bitmask is a binary pattern which will allow us to use bitwise&lt;br&gt;
operators to choose which bits of another pattern to operate on&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A common way to check if a number is odd or even is using the modulus operator &lt;code&gt;%&lt;/code&gt;, which will return the remainder between two numbers. When using modulus 2, any even number will return zero, any odd number one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;System.out.println(11 % 2); // 1, we know it's odd
System.out.println(10 % 2); // 0, we know it's even
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#-raw-endraw-exclusive-or-xor" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;^&lt;/code&gt; exclusive or XOR
&lt;/h3&gt;

&lt;p&gt;When evaluating two bits it will return 1 only when a single operand is 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int five = 5; // 101
int six = 6; // 110
System.out.println(Integer.toBinaryString(five ^ six)); // 11
// 101 
// 110 
// ----
// 011, decimal 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#-raw-endraw-unary-complement-not" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;~&lt;/code&gt; unary complement / NOT
&lt;/h3&gt;

&lt;p&gt;Inverts all binary one bits to zero, and all binary zero bits to one. In essence &lt;code&gt;NOT 1 == 0&lt;/code&gt;, &lt;code&gt;NOT 0 == 1&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int five = 5; // 101b
System.out.println(~five); //  
// 101
// --- NOT
// 11111111111111111111111111111010 == -6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hold on, why is &lt;code&gt;~5&lt;/code&gt;, &lt;code&gt;101&lt;/code&gt; in binary, inverted with a bitwise NOT &lt;code&gt;~&lt;/code&gt;, &lt;em&gt;not&lt;/em&gt; &lt;code&gt;010&lt;/code&gt;, i.e. decimal 2? Well, computers use binary to represent numbers, both positive &lt;em&gt;and&lt;/em&gt; negative. One way to represent negative numbers is a numbering scheme called &lt;strong&gt;twos complement&lt;/strong&gt;. What this means is the leftmost bit in a binary pattern, or the most significant bit (as it's the largest number), is used to signify whether the number is positive or negative, &lt;code&gt;1&lt;/code&gt; is for a negative number, &lt;code&gt;0&lt;/code&gt;positive. As we are using a integer primitive with our bitwise NOT here, an int is 32 bit, or 4 bytes, in size. As mentioned earlier, the method &lt;code&gt;Integer.toBinaryString()&lt;/code&gt; omits preceeding zeroes in a pattern by default, but the rest of the int is infact filled with zeroes to the MSB on the left. &lt;/p&gt;

&lt;p&gt;So, all those zeroes have now been inverted to ones, but how does that calculate to negative six? Binary is a summation of all bit values which are 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// 0111
// ^^^^
// ||||_ 2^0 == 1
// |||_ 2^1 == 2
// ||_ 2^2 == 4
// |_ 2^3 == 8
// 
// So summing the bits which are 1 gives us, 4 + 2 + 1 == 7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the MSB is negative if it is 1, and remember our NOT operator inverted it to 1, that value is our base value before we sum the rest of the binary digits from left to right.&lt;/p&gt;

&lt;p&gt;Lets do a example with a smaller integer type, &lt;code&gt;byte&lt;/code&gt; which is 8 bits or, not surprisingly, one byte.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;byte five = 5;
// 0x00FF is a bitmask in hexadecimal, it means we only see 8 
// bits, representing our byte primitive
System.out.println(Integer.toBinaryString(0x00FF &amp;amp; ~five));
// 11111010
// ||||| |
// ||||| |_ 2^1 == 2
// ||||| 
// |||||_ 2^3 == 8
// ||||_ 2^4 == 16
// |||_ 2^5 == 32
// ||_ 2^6 == 64 
// |_ -2^7 == -128 (Most significant bit)

// Doing the sum;
// -256 + 64 + 32 + 16 + 8 + 2 == -6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope that helps you understand quickly how we got to negative six as our bitwise NOT result, but do please check &lt;a href="https://www.bbc.co.uk/bitesize/guides/zjfgjxs/revision/5"&gt;this BBC guide on twos complement&lt;/a&gt; for some more help if you need it as I won't go into it any deeper.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unary means the operator works on only one &lt;br&gt;
operand. For example as seen in &lt;code&gt;for&lt;/code&gt; loops frequently, &lt;code&gt;i++&lt;/code&gt; &lt;br&gt;
unary postfix operator, increments &lt;code&gt;i&lt;/code&gt; by one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#bitshift" class="anchor"&gt;
  &lt;/a&gt;
  Bitshift
&lt;/h2&gt;

&lt;p&gt;There is also some other operators known as bitshift. These move the bits left or right in a binary pattern.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#-raw-ltlt-endraw-left-shift" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; left shift
&lt;/h3&gt;

&lt;p&gt;Moves the bits in a binary pattern to &lt;em&gt;n&lt;/em&gt; times to the left. It is represented as &lt;code&gt;number &amp;lt;&amp;lt; placesToShift&lt;/code&gt;, for example &lt;code&gt;1 &amp;lt;&amp;lt; 2&lt;/code&gt;, moves the bits in integer one two places to the left. The effect of moving the bits multiplies the number by 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;2n2^n&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathdefault mtight"&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
. That is to say, one left shift will multiply the number by 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;21=22^1 = 2&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
. A shift two places left would be the number multiplied by 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;22=42^2 = 4&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;System.out.println(2 &amp;lt;&amp;lt; 1); // 4
// 0010 == decimal 2
// 0010 &amp;lt;&amp;lt; 1 == 0100 == 4
                 ^- 
System.out.println(2 &amp;lt;&amp;lt; 2) // 8
// 0010 &amp;lt;&amp;lt; 2 == 1000 == 8
                ^--  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#-raw-gtgt-endraw-right-shift" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; right shift
&lt;/h3&gt;

&lt;p&gt;As above, the right shift uses the format &lt;code&gt;number &amp;gt;&amp;gt; timesToShift&lt;/code&gt;, but it shifts the bits to the right. In effect dividing the number by 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;2n2^n&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathdefault mtight"&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int eight = 8; // 1000 
System.out.println(8 &amp;gt;&amp;gt; 1); // 2^1 == 2. 8 / 2 == 4
// 1000 &amp;gt;&amp;gt; 1 == 0100 == 4
System.out.println(8 &amp;gt;&amp;gt; 2); // 2^2 == 4. 8 / 4 == 2
// 1000 &amp;gt;&amp;gt; 2 == 0010 == 2
System.out.println(8 &amp;gt;&amp;gt; 3); // 2^3 == 8. 8 / 8 == 1
// 1000 &amp;gt;&amp;gt; 4 == 0001 == 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you've read this blog you can do this quick trick to impress your coding friends, to divide any number in half &lt;code&gt;integer &amp;gt;&amp;gt; 1&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;With negative numbers things get a little more interesting. Remember twos compliment uses the most significant bit to declare the number positive or negative, for a positive number bits will be filled with zeroes, for a negative number bits will be filled with ones. The same method applies from the bitwise NOT example above, the binary is summed to find the resulting number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;byte negativeFour = -4;
System.out.println(Integer.toBinaryString(0x00FF &amp;amp; 
    negativeFour));      // 11111100
System.out.println(Integer.toBinaryString(0x00FF &amp;amp; 
    negativeFour &amp;gt;&amp;gt; 1)); // 11111110
//                          ^ 1 filled to the left
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#-raw-gtgtgt-endraw-unsigned-right-shift" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; unsigned right shift
&lt;/h3&gt;

&lt;p&gt;Twos complement is a signed representation of a number in binary form. That is to say it can represent positive and negative numbers. An unsigned number has no bit that declares it one or the other, so they are always positive. In the case of the unsigned right shift, space after a shift is filled with zeroes, so any negative number will become a positive number as the MSB will no longer be 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int negativeFour = -4;
System.out.println(Integer.toBinaryString(negativeFour));
System.out.println(Integer.toBinaryString(negativeFour &amp;gt;&amp;gt;&amp;gt; 2));
System.out.println(negativeFour &amp;gt;&amp;gt;&amp;gt; 2);

// Output
// 11111111111111111111111111111100
// ^ MSB is 1, the number is negative
// 00111111111111111111111111111111*
// ^^ shifted two places right and filled with zeroes 
// The final output is the sum of the resulting binary,
// without a sign bit it is a positive number
// 1073741823
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;* I had to amend the zeroes here for example purposes. The actual output will be without the zeroes.&lt;/p&gt;

&lt;p&gt;I hope that is clear for you, it's a little tricky to calculate these long binary patterns just looking at them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-use-case-of-bitshift-with-booleans" class="anchor"&gt;
  &lt;/a&gt;
  Example use case of bitshift with booleans
&lt;/h2&gt;

&lt;p&gt;There is really only one bitwise operator which isn't directly translatable with a single conditional operator and that is XOR, exclusive &lt;strong&gt;or&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Say you are have a staff rota application. It has employee objects, with a method that returns if they are scheduled to be at work for a given shift. You only need one worker per shift, so you have a method which checks that only one worker is scheduled on a shift at a time, using the &lt;code&gt;^&lt;/code&gt; operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// atWork(Date) returns true if employee scheduled for work on 
// that date. Both employees are scheduled for work today.
LocalDate today = LocalDate.now();
if(emplyee1.atWork(today) ^ employee2.atWork(today) {
    // we save the rota if only one employee is working
    workRota.save();
} else {
   // reschedule one of the employees, amend the rota
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can make the same statement with conditional operators but it is a bit more long winded -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (!employee.atWork(today) &amp;amp;&amp;amp; employee.atWork(today) 
   || employee.atWork(today) &amp;amp;&amp;amp; !employee.atWork(today))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It may be a convoluted example that you probably won't have to put in to practice yourself, but it's another tool for your toolbelt, which is never a bad thing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Bitwise and bitshift can be confusing at first, possibly you've not seen them often, and you may wonder why you would use them. In fact they can be very useful in algorithms, where manipulating binary bits efficiently is very important. Mainly though, it's good that if you see these in someone else's code you can understand what is happening.&lt;/p&gt;




&lt;p&gt;Cover image by &lt;a href="https://pixabay.com/users/geralt-9301/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=5180477"&gt;Gerd Altmann&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=5180477"&gt;Pixabay&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>java</category>
      <category>beginners</category>
      <category>binary</category>
    </item>
    <item>
      <title>Removing sensitive data from your Git history with BFG</title>
      <author>Touré Holder</author>
      <pubDate>Wed, 07 Apr 2021 09:55:20 +0000</pubDate>
      <link>https://dev.to/toureholder/removing-sensitive-data-from-your-git-history-with-bfg-4ni4</link>
      <guid>https://dev.to/toureholder/removing-sensitive-data-from-your-git-history-with-bfg-4ni4</guid>
      <description>&lt;p&gt;Here's how to remove sensitive data, like certificate files or passwords in your files, from your git repo and history with &lt;a href="https://rtyley.github.io/bfg-repo-cleaner/"&gt;BFG Repo-Cleaner&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-remove-the-sensitive-files-and-secrets-from-your-code-and-commit-changes" class="anchor"&gt;
  &lt;/a&gt;
  1. Remove the sensitive files and secrets from your code and commit changes
&lt;/h2&gt;

&lt;p&gt;Note that, by default, BFG doesn't modify the contents of your latest commit. So, remove the sensitive files and secrets from your code, commit the changes and ensure that your latest commit is clean with none of the undesired data in it before proceeding. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-install-bfg" class="anchor"&gt;
  &lt;/a&gt;
  2. Install BFG
&lt;/h2&gt;

&lt;p&gt;You can download a JAR from the &lt;a href="https://rtyley.github.io/bfg-repo-cleaner/"&gt;site&lt;/a&gt;. If you're on Mac, &lt;code&gt;brew install bfg&lt;/code&gt; should suffice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-clone-a-fresh-copy-of-your-repo-using-the-mirror-flag" class="anchor"&gt;
  &lt;/a&gt;
  3. Clone a fresh copy of your repo, using the --mirror flag:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Example&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone &lt;span class="nt"&gt;--mirror&lt;/span&gt; git://example.com/my-repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-clean-sensitive-files" class="anchor"&gt;
  &lt;/a&gt;
  4. Clean sensitive files
&lt;/h2&gt;

&lt;p&gt;Use &lt;code&gt;--delete-files&lt;/code&gt; to nuke files in your repo history.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Examples&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;bfg &lt;span class="nt"&gt;--delete-files&lt;/span&gt; certificate.p12 my-repo.git
&lt;span class="nv"&gt;$ &lt;/span&gt;bfg &lt;span class="nt"&gt;--delete-files&lt;/span&gt; keystore.jks my-repo.git
&lt;span class="nv"&gt;$ &lt;/span&gt;bfg &lt;span class="nt"&gt;--delete-files&lt;/span&gt; id_&lt;span class="o"&gt;{&lt;/span&gt;dsa,rsa&lt;span class="o"&gt;}&lt;/span&gt; my-repo.git
&lt;span class="nv"&gt;$ &lt;/span&gt;bfg &lt;span class="nt"&gt;--delete-files&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;.&lt;span class="o"&gt;{&lt;/span&gt;txt,log&lt;span class="o"&gt;}&lt;/span&gt; my-repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the specified name matches on file name, not on path within repo. So &lt;code&gt;$ bfg --delete-files path/to/certificate.p12 my-repo.git&lt;/code&gt; won't work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-clean-sensitive-strings" class="anchor"&gt;
  &lt;/a&gt;
  5. Clean sensitive strings
&lt;/h2&gt;

&lt;p&gt;Use &lt;code&gt;--replace-text&lt;/code&gt; to clean strings from your repo history. Each string will be rewritten as "***REMOVED***" by default. This is a two-step process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#51-create-a-file-with-a-new-line-for-each-string-you-want-to-remove" class="anchor"&gt;
  &lt;/a&gt;
  5.1 Create a file with a new line for each string you want to remove
&lt;/h3&gt;

&lt;p&gt;Create a simple text file however you'd like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Example&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"password123"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; passwords.txt
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"123password"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; passwords.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#52-run-the-command" class="anchor"&gt;
  &lt;/a&gt;
  5.2 Run the command
&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;bfg --replace-text&lt;/code&gt; referencing the file you just created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Example&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;bfg &lt;span class="nt"&gt;--replace-text&lt;/span&gt; passwords.txt my-repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-take-a-look-at-your-new-history" class="anchor"&gt;
  &lt;/a&gt;
  6. Take a look at your new history
&lt;/h2&gt;

&lt;p&gt;Enter the folder of the git repo and make sure your history has been updated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Example&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-repo.git

&lt;span class="c"&gt;# Use git commands to examine the history&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git log
&lt;span class="nv"&gt;$ &lt;/span&gt;git show HEAD
&lt;span class="nv"&gt;$ &lt;/span&gt;git show HEAD~1
&lt;span class="nv"&gt;$ &lt;/span&gt;git show d89bb58
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(You won't see the physical files of your working tree if you list files in this directory, since we did a bare/mirror clone, in case you were wondering.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-strip-out-the-unwanted-dirty-data" class="anchor"&gt;
  &lt;/a&gt;
  7. Strip out the unwanted dirty data
&lt;/h2&gt;

&lt;p&gt;Once satisfied with the state of the history, clean up those sensitive files, which git now considers unnecessary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git reflog expire &lt;span class="nt"&gt;--expire&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;now &lt;span class="nt"&gt;--all&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git gc &lt;span class="nt"&gt;--prune&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;now &lt;span class="nt"&gt;--aggressive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-push" class="anchor"&gt;
  &lt;/a&gt;
  8. Push
&lt;/h2&gt;

&lt;p&gt;Finally, once you're happy with the updated state of your repo, push it back up and you're done!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're with a team have everyone ditch their old copies of the repo and do fresh clones.&lt;/p&gt;

&lt;p&gt;Thanks for following along. Cheers!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Show off your Workspace 👩🏻‍💻💯</title>
      <author>Sarthak Sharma</author>
      <pubDate>Wed, 07 Apr 2021 08:57:16 +0000</pubDate>
      <link>https://dev.to/sarthology/show-off-your-workspace-2iol</link>
      <guid>https://dev.to/sarthology/show-off-your-workspace-2iol</guid>
      <description>&lt;p&gt;After launching a beta version of my new side hustle, &lt;strong&gt;&lt;em&gt;&lt;a href="https://prototion.com/"&gt;Prototion&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;, a marketplace for Template makers to sell their Notion Templates, I decided to leave my office and go remote for few weeks.  &lt;/p&gt;

&lt;p&gt;So I selected my favourite place on earth, Himalayas, to work from the hills 🏔. Found a decent hostel in Mcleodganj, Himachal and cafe with high-speed internet, where one can sit and work. Here is a glance at my workspace for time being.&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wuP9LcGA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EyW7wVUUcAIc85c.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLARNBwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1357550397120868352/C0-T9dBU_normal.jpg" alt="𝙎𝙖𝙧𝙩𝙝𝙖𝙠 𝙎𝙝𝙖𝙧𝙢𝙖 🚀 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        𝙎𝙖𝙧𝙩𝙝𝙖𝙠 𝙎𝙝𝙖𝙧𝙢𝙖 🚀
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/sarthology"&gt;@sarthology&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Travel and hustle, perks of being in tech. &lt;br&gt;&lt;br&gt;My workspace for this week. 💯✨👨🏻‍💻🔥&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/remotework"&gt;#remotework&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/digitalnomad"&gt;#digitalnomad&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:39 AM - 07 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1379715348547522560" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1379715348547522560" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1379715348547522560" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;making new friends as well 😅&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7f1U2UZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EyW8cH0VcAQ_lUT.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLARNBwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1357550397120868352/C0-T9dBU_normal.jpg" alt="𝙎𝙖𝙧𝙩𝙝𝙖𝙠 𝙎𝙝𝙖𝙧𝙢𝙖 🚀 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        𝙎𝙖𝙧𝙩𝙝𝙖𝙠 𝙎𝙝𝙖𝙧𝙢𝙖 🚀
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/sarthology"&gt;@sarthology&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Sharing with a friend 😅🤷🏻‍♂️ 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:42 AM - 07 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1379716100414304256" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1379716100414304256" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1379716100414304256" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Enough of my stuff. I'm excited to see your workspaces. What changes have you made?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/qAkvnjpXqpIUvkxpG0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/qAkvnjpXqpIUvkxpG0/giphy.gif" alt=""&gt;&lt;/a&gt; &lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Solution: Determine if String Halves Are Alike</title>
      <author>seanpgallivan</author>
      <pubDate>Wed, 07 Apr 2021 08:36:37 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-determine-if-string-halves-are-alike-pid</link>
      <guid>https://dev.to/seanpgallivan/solution-determine-if-string-halves-are-alike-pid</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/determine-if-string-halves-are-alike/discuss/1146651"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1704-easy-determine-if-string-halves-are-alike" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/determine-if-string-halves-are-alike/"&gt;Leetcode Problem #1704 (&lt;em&gt;Easy&lt;/em&gt;): Determine if String Halves Are Alike&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are given a string &lt;code&gt;s&lt;/code&gt; of even length. Split this string into two halves of equal lengths, and let &lt;code&gt;a&lt;/code&gt; be the first half and &lt;code&gt;b&lt;/code&gt; be the second half.&lt;/p&gt;

&lt;p&gt;Two strings are &lt;strong&gt;alike&lt;/strong&gt; if they have the same number of vowels (&lt;code&gt;'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'&lt;/code&gt;). Notice that &lt;code&gt;s&lt;/code&gt; contains uppercase and lowercase letters.&lt;/p&gt;

&lt;p&gt;Return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are &lt;strong&gt;alike&lt;/strong&gt;. Otherwise, return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;s = "book"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;a = "bo" and b = "ok". a has 1 vowel and b has 1 vowel. Therefore, they are alike.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;s = "textbook"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;a = "text" and b = "book". a has 1 vowel whereas b has 2. Therefore, they are not alike.&lt;br&gt;Notice that the vowel o is counted twice.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;s = "MerryChristmas"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 4:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;s = "AbCdEfGh"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= s.length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;s.length&lt;/code&gt; is even.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;s&lt;/code&gt; consists of &lt;strong&gt;uppercase and lowercase&lt;/strong&gt; letters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This problem is pretty straightforward. The first issue is being able to identify vowels. There are obviously many ways to do this, but this seems like a good place to use some kind of vowel lookup data structure (&lt;strong&gt;vowels&lt;/strong&gt;). Depending on the language, it can be a string, a dictionary, a map, a set, etc.&lt;/p&gt;

&lt;p&gt;Then we just need to keep a balance counter (&lt;strong&gt;ans&lt;/strong&gt;) and iterate through both halves of the input string (&lt;strong&gt;S&lt;/strong&gt;) and increment &lt;strong&gt;ans&lt;/strong&gt; whenever the first half has a vowel and decrement &lt;strong&gt;ans&lt;/strong&gt; whenever the second half has a vowel.&lt;/p&gt;

&lt;p&gt;Once we're done, we can just &lt;strong&gt;return ans == 0&lt;/strong&gt; to determine if the two string halves are balanced.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vowels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aeiouAEIOU&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;halvesAreAlike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;vowels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"aeiouAEIOU"&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;halvesAreAlike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;vowels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"aeiouAEIOU"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;halvesAreAlike&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;indexOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;indexOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;--;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;vowels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"aeiouAEIOU"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;halvesAreAlike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
  </channel>
</rss>
