<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Flexbox Properties Explained</title>
      <author>SnowBit</author>
      <pubDate>Sun, 07 Nov 2021 14:55:30 +0000</pubDate>
      <link>https://dev.to/snowbit/flexbox-properties-3nd3</link>
      <guid>https://dev.to/snowbit/flexbox-properties-3nd3</guid>
      <description>&lt;p&gt;In the past, CSS layouts have been a huge pain point for web designers. In order to create a responsive layout, multiple divs have to be used throughout the HTML, and then the CSS needs to be modified to accommodate that. Flexbox is a way to create responsive layouts without this problem. Here's an intro on what flexbox is and how it works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#display"&gt;
  &lt;/a&gt;
  display
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This states a flex container.&lt;/li&gt;
&lt;li&gt;It enables flex context of all it's children.&lt;/li&gt;
&lt;li&gt;It can be inline or block
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.div&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#flexdirection"&gt;
  &lt;/a&gt;
  flex-direction
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It defines the direction of flex, items placed in a flex container.&lt;/li&gt;
&lt;li&gt;It is a single-direction layout concept.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;row-reverse&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;column-reverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;row (default): left to right in ltr; right to left&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;row-reverse: right to left in ltr; left to right&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;column: same as row but top to bottom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;column-reverse: same as row-reverse but bottom to top&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#flexwrap"&gt;
  &lt;/a&gt;
  flex-wrap
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;By default, items will try to be fit in one line.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;wrap-reverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;nowrap&lt;/strong&gt; - all flex items will be on one line&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;wrap&lt;/strong&gt; - flex items will wrap onto multiple lines, from top to bottom.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;wrap-reverse&lt;/strong&gt; - flex items will wrap onto multiple lines from bottom to top.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#flexflow"&gt;
  &lt;/a&gt;
  flex-flow
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It is a shorthand for &lt;strong&gt;flex-wrap&lt;/strong&gt; and &lt;strong&gt;flex-direction&lt;/strong&gt; properties and they together defines the cross axes of the main container
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#flexshrink"&gt;
  &lt;/a&gt;
  flex-shrink
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It defines the ability for flex item to shrink accordingly
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-shrink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* default 1 */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure &lt;em&gt;negative numbers are invalid&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alignself"&gt;
  &lt;/a&gt;
  align-self
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It allows the default alignment needs to be overridden for a flex item
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;align-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;flex-end&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;baseline&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;stretch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#aligncontent"&gt;
  &lt;/a&gt;
  align-content
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This aligns a flex container’s lines within when there is extra space in the cross-axis.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;align-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;flex-end&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;space-around&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;space-evenly&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;stretch&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;baseline&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="nb"&gt;baseline&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="nb"&gt;baseline&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;safe&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="n"&gt;unsafe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#order"&gt;
  &lt;/a&gt;
  order
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* default is 0 */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>How to Update Node.js to the latest version on Ubuntu</title>
      <author>Md. Maruf Sarker</author>
      <pubDate>Sun, 07 Nov 2021 14:51:14 +0000</pubDate>
      <link>https://dev.to/mdmarufsarker/how-to-update-nodejs-to-the-latest-version-on-ubuntu-3md6</link>
      <guid>https://dev.to/mdmarufsarker/how-to-update-nodejs-to-the-latest-version-on-ubuntu-3md6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUz7lueP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujxgme2xgt491sbe257i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUz7lueP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujxgme2xgt491sbe257i.png" alt="Nodejs Official Website" width="835" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step - 1:
&lt;/h2&gt;

&lt;p&gt;1st of all you need to download the latest version of Nodejs from the official &lt;a href="https://nodejs.org/en/"&gt;Nodejs website&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step - 2:
&lt;/h2&gt;

&lt;p&gt;Go to the correct path using command line or GUI.&lt;br&gt;
Using Command line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd Downloads/node-v17.0.1-linux-x64.tar.xz/
tar -xf node-v17.0.1-linux-x64.tar.xz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check Current Node version&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node --version
v14.17.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To upgrade&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo n latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check Updated Node version&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node --version
v17.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RQ0AoT_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ovxldoqmjmjihouse2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RQ0AoT_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ovxldoqmjmjihouse2l.png" alt="Nodejs version Updated" width="880" height="170"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are using graphical interface then go to the destination path. Click right button and select extract here. Open the bin folder.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2d5vmYEu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqk4xmcl4iwowbvx6uk8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2d5vmYEu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqk4xmcl4iwowbvx6uk8.png" alt="Directories and files" width="392" height="137"&gt;&lt;/a&gt;&lt;br&gt;
right click and select open in terminal&lt;br&gt;
To upgrade&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo n latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check Updated Node version&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node --version
v17.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RQ0AoT_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ovxldoqmjmjihouse2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RQ0AoT_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ovxldoqmjmjihouse2l.png" alt="Nodejs version Updated" width="880" height="170"&gt;&lt;/a&gt;&lt;br&gt;
Thanks, if you like this article useful then smash the like button. Share it with your friends. Stay Tuned.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-you-want-to-learn-more-about-linux-command-line-then-you-watch-my-playlist"&gt;
  &lt;/a&gt;
  If you want to learn more about Linux Command Line then you watch my &lt;a href="https://youtube.com/playlist?list=PLldSzdV-qgykjEEzvw_fYK56F2w-5kfV5"&gt;Playlist&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>npm</category>
      <category>linux</category>
    </item>
    <item>
      <title>The power of problem solving in a team</title>
      <author>Sarah Mottram</author>
      <pubDate>Sun, 07 Nov 2021 14:21:15 +0000</pubDate>
      <link>https://dev.to/smelbows/the-power-of-problem-solving-in-a-team-3848</link>
      <guid>https://dev.to/smelbows/the-power-of-problem-solving-in-a-team-3848</guid>
      <description>&lt;p&gt;&lt;strong&gt;I’m a problem solver. You’re a problem solver. We often work in teams of multiple problem solvers. But are we all the same?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, you’ve guessed it; clearly I’m suggesting the answer is “No”. No need to read any further, good job everyone, you can all go home!&lt;/p&gt;

&lt;p&gt;But, in case you’re interested, let’s dive a bit deeper into what it really means to be a problem solver, since so many companies add it to their list of ‘desirable qualities’, and so many of us describe ourselves as ‘a problem solver’ when we’re adding to our CVs.&lt;/p&gt;

&lt;p&gt;The term ‘problem solving’ really focuses on the end goal, or on having achieved it, but what I’m interested in is &lt;em&gt;how&lt;/em&gt; we all solve these problems, on how &lt;em&gt;differently&lt;/em&gt; we solve them, and what that means when problem solving with others in a team.&lt;/p&gt;

&lt;p&gt;I am currently studying on a 24 week intensive front-end development bootcamp with &lt;a href="https://www.technigo.io/"&gt;Technigo&lt;/a&gt; (who are amazing, btw), and throughout the course we get the chance to try out our pair and mob-programming skills. I knew that this bootcamp was going to be an intense experience, but I had thought that the real learning for me would be around the new programming skills. I’ve worked in teams before, I’ve lead teams before. This part, I thought, would be nothing new. How wrong I was!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I’m a problem solver&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s start with how I problem solve myself. I’m in familiar territory here, I’ve known myself a long time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Just type something, &lt;em&gt;anything&lt;/em&gt;!!”&lt;/strong&gt; Is the advice I get one day, while pairing.&lt;/p&gt;

&lt;p&gt;But no! I can’t type &lt;em&gt;anything&lt;/em&gt;. When I encounter a problem, I like to try to break it down. I deconstruct it. I analyse it. I like to figure out what is happening, what I think &lt;em&gt;should&lt;/em&gt; be happening, and then I like to join the dots between these two with knowledge. So I think, I read, I go away, think some more, research (let’s be transparent; I Google stuff). Only when I feel like I’ve understood the problem, can I feel secure in fixing it. This is methodical. This is slow. But I like to think that it’s worth the time, because when I encounter a similar problem further down the line (which I inevitably will) I should have the depth of knowledge to be able to solve it instantly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You’re a problem solver&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Working on group Technigo projects (it’s the &lt;a href="https://tiger-weather-app.netlify.app/"&gt;Weather App&lt;/a&gt; that really sticks with me) has given me a much deeper insight into the ways in which other people might problem solve, and how those differences can actually benefit teamwork rather than hinder it. We were five different problem solvers on that team, but it’s one amazing team member in particular that I’m thinking about now, (she probably knows who she is!) because her problem solving methods are so completely the opposite of mine! She &lt;em&gt;does&lt;/em&gt; type something, she &lt;em&gt;does&lt;/em&gt; type &lt;strong&gt;&lt;em&gt;anything&lt;/em&gt;&lt;/strong&gt;! She still researches (Googles) - we all do - but she looks something up, adds it in, sees what happens. Doesn’t work? Tries something else. Still doesn’t work? No problem, tries something else again. Sometimes, something &lt;em&gt;does&lt;/em&gt; work, and we all cheer and high five because our problem is fixed. But, of course, her problem solving (I think) doesn’t actually stop once the problem is fixed. Now (or maybe later) she’ll have a look at that little bit of code that works but none of us understand, and understand it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’re a team of problem solvers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This was difficult for me. Everything went so fast, so how could I analyse what was on the screen before it was gone again, replaced with something new? But it was amazing too, because sometimes the advice is right, and I really do just need to try something, &lt;em&gt;anything&lt;/em&gt;, so that I have more information to go on. For us, the way to problem solve together was to take it in turns. I would let the code come and go on the screen without trying to figure it all out, but try to see what was happening at each change and find the answer within that. Later, when there was time, I’d go away and do my reading so that I could understand the problem in depth. In some ways I think it’s slightly harder for ‘trial-and-error’ problem solvers to work around my more methodical approach, because it involves waiting while I’m analyzing to see what I come back with. But it’s possible, and when you know your team well, very doable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So here is the point:&lt;/strong&gt; Yes, it’s fascinating to me that not everyone solves problems in the same way. But being aware of it also has hugely positive impacts on teamwork. There are many ways to problem solve, and when you’re working on a team, it’s not about how an individual solves a problem, it’s about how the whole team comes together, uses the various different problem solving skills of everybody, and makes sure that &lt;em&gt;everyone gets heard&lt;/em&gt; (that’s so important it should probably be a whole other blog post). And when you come out victorious on the other side, it’s not because one way of problem solving was superior to another, it’s because you took the time to understand each other, what you all can bring, and how to use those problem solving skills together.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Coroutine Vs Subroutine [ VBA Programming ]</title>
      <author>Bek Brace</author>
      <pubDate>Sun, 07 Nov 2021 14:07:10 +0000</pubDate>
      <link>https://dev.to/bekbrace/coroutine-vs-subroutine-526b</link>
      <guid>https://dev.to/bekbrace/coroutine-vs-subroutine-526b</guid>
      <description>&lt;p&gt;While I was preparing a new tutorial - intro to VBA programming with a project - I stumbled upon the concept of subroutine and how can I explain it, in my mind a subroutine is a function .. and I thought to keep it simple .. but again, this is an oversimplification and not simplification .. so here it is ..&lt;/p&gt;

&lt;p&gt;A subroutine and a function are essentially the same thing, with one difference: A function returns some sort of value (usually via the stack or CPU register), while a subroutine does not. Whether subroutine or function, it is a block of executable code, having exactly one point of entry. A co-routine is also a block of executable code, and, just like a subroutine, it has one point of entry. However, it also has one or more points of re-entry.&lt;/p&gt;

&lt;p&gt;Before getting to threads, let's review: A computer program, also known as a process, will generally have its allocation of memory organized into a code space, a heap, and a stack. The code space stores the one or more blocks of its executable code. The stack stores the parameters, automatic variables, and return addresses of subroutines, functions, and co-routines (and other things too). The heap is the wide-open memory space available to the process for whatever its purposes. In addition to these memory spaces are the CPU registers, each of which stores a set of bits. These bits could be an integer value, a memory address, a bunch of status flags, or whatever. Most programmers don't need to know much about them, but they're there and essential to the operation of the CPU. Probably the ones worth knowing about are the Program Counter, Stack Pointer, and Status Register, but we're not going to get into them here.&lt;/p&gt;

&lt;p&gt;A thread is a single logical flow of execution. In a primitive computing system, there is only one thread available to a process. In modern computing systems, a process is composed of one or more threads. Each thread gets its own stack and set of CPU registers (which is usually physically impossible, but made virtual logically - a detail we'll skip on here). However, while each thread of a process has its own stack and registers, they will all share the same heap and code space. They are also (presumably) running simultaneously; something that can truly happen in a multi-core CPU. So two or more parts of your program can run at the same time.&lt;/p&gt;

&lt;p&gt;Back to the co-routine: As mentioned before, it has one or more points of re-entry. A point of re-entry means that the co-routine can allow for some other block of code outside of itself to have some execution time, and then at some future time have execution time resume back within its own block of code. This implies that the parameters and automatic variables of the co-routine are preserved (and restored if need be) whenever execution is yielded to an external block of code and then returns to that of the co-routine. A co-routine is something that is not directly implemented in every programming language, although it is common to many assembly languages. In any case, it is possible to implement a co-routine in a conceptual way. There is a good article on co-routines at &lt;a href="http://en.wikipedia.org/wiki/Coroutine"&gt;http://en.wikipedia.org/wiki/Coroutine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It seems to me there are two principal motivations in implementing a co-routine design pattern: (1) overcoming the limitations of a single-threaded process; and (2) hoping to achieve better computational performance. Motivation (1) is clear to understand when the process must address many things at once where a single thread is a must. Motivation (2) may not be as clear to understand, since that is tied to a lot of particulars about the system hardware, compiler design, and language design. I can only imagine that computational effort might be reduced by cutting-back on stack manipulations, avoidance of redoing initializations in a subroutine, or relieving some of the overhead of maintaining a multi-threaded process.&lt;/p&gt;

&lt;p&gt;Hope this useful in any way, and I'll catch you on the other side of the Sub ;)&lt;/p&gt;

</description>
      <category>vba</category>
      <category>programming</category>
      <category>functional</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to configure PHP logs for Docker</title>
      <author>Mateusz Cholewka</author>
      <pubDate>Sun, 07 Nov 2021 14:06:06 +0000</pubDate>
      <link>https://dev.to/mtk3d/how-to-configure-php-logs-for-docker-2384</link>
      <guid>https://dev.to/mtk3d/how-to-configure-php-logs-for-docker-2384</guid>
      <description>&lt;p&gt;If you are using docker and cloud services to run your application live, you should manage your logs.&lt;br&gt;&lt;br&gt;
The most common method to store them is to put them in the text file. It's the default configuration for most backend frameworks. This option is ok if you run your application locally or on the VPS server for test.&lt;br&gt;&lt;br&gt;
When you run your application in a production environment, you should choose a better option to manage your logs. Almost every cloud has a tool for rotating logs or if not, you can use for example Grafana Loki or ELK stack. Those solutions are better because give you interfaces to rotate and search your logs. Also, you have easy access to them, you no need to connect to your server to review them.&lt;br&gt;&lt;br&gt;
If you are using Docker containers, and you running your application in cloud services, often they will be automatically writing the logs of your containers to tools like AWS CloudWatch or GCloud Stackdriver.  &lt;/p&gt;

&lt;p&gt;But first, you need to redirect your log streams to the output of the Docker container to be able to use them.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#linux-streams"&gt;
  &lt;/a&gt;
  Linux streams
&lt;/h2&gt;

&lt;p&gt;Docker containers are running the Linux processes. In linux every running process has 3 streams, &lt;code&gt;STDIN&lt;/code&gt;, &lt;code&gt;STDOUT&lt;/code&gt;, &lt;code&gt;STDERR&lt;/code&gt;. &lt;code&gt;STDIN&lt;/code&gt; it's command input stream, that you can provide for ex. by your keyboard. &lt;code&gt;STDOUT&lt;/code&gt; is the stream where the running command may print the output. &lt;code&gt;STDERR&lt;/code&gt; is the standard error stream, but the name I think is a bit confusing, because it is basically intended for diagnostic output.  &lt;/p&gt;

&lt;p&gt;When you run the &lt;code&gt;docker logs [container]&lt;/code&gt; command in your terminal, you will see the output of &lt;code&gt;STDOUT&lt;/code&gt; and &lt;code&gt;STDERR&lt;/code&gt; streams. So our goal is to redirect our logs to one of those streams.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/config/containers/logging/"&gt;Official docker documentation page&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#phpfpm"&gt;
  &lt;/a&gt;
  PHP-FPM
&lt;/h2&gt;

&lt;p&gt;In PHP we are often running our application using the PHP-FPM (Process Manager). If you run your docker with FPM inside a docker container, and you run the &lt;code&gt;docker logs&lt;/code&gt; command, you should see the output with processed requests, or errors.  &lt;/p&gt;

&lt;p&gt;So the PHP-FPM is already writing its output to &lt;code&gt;STDOUT&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
The PHP-FPM allow us to catch workers output and forward them to the &lt;code&gt;STDOUT&lt;/code&gt;. To do that we need to make sure that the FPM is configured properly. You can create new config file, and push it for example to the &lt;code&gt;/usr/local/etc/php-fpm.d/logging.conf&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[global]
error_log = /proc/self/fd/2

[www]
access.log = /proc/self/fd/2

catch_workers_output = yes
decorate_workers_output = no
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;error_log&lt;/code&gt; and &lt;code&gt;access.log&lt;/code&gt; parameters are configuration of streams of logs output.&lt;br&gt;&lt;br&gt;
The &lt;code&gt;catch_workers_output&lt;/code&gt; option is turning on the worker's output caching. The &lt;code&gt;decorate_workers_output&lt;/code&gt; is the option that turns off the output decoration. If you leave this option turned on, FPM will decorate your application output like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[21-Mar-2016 14:10:02] WARNING: [pool www] child 12 said into stdout: "[your log line]"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember that &lt;code&gt;decorate_workers_output&lt;/code&gt; option is available only for &lt;a href="https://www.php.net/manual/en/install.fpm.configuration.php#decorate-workers-output"&gt;PHP 7.3.0 and higher&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;If you are using official docker php-fpm image, this configuration is already set in the &lt;code&gt;/usr/local/etc/php-fpm.d/docker.conf&lt;/code&gt; file, so you no need to do anything more 😎&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#php-application-configuration"&gt;
  &lt;/a&gt;
  PHP application configuration
&lt;/h2&gt;

&lt;p&gt;Right now everything that will be put to the stdout from PHP workers will be shown in our docker logs. But when logs are forwarded to that stream in PHP?  &lt;/p&gt;

&lt;p&gt;To write something to &lt;code&gt;STDIN&lt;/code&gt; on PHP level, we need to just write to the &lt;code&gt;php://stdout&lt;/code&gt; stream.  &lt;/p&gt;

&lt;p&gt;In the simplest way you can do this like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'php://stdout'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Hello world'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you execute this code in php cli, you will get the &lt;code&gt;Hello world&lt;/code&gt; text on the output.&lt;/p&gt;

&lt;p&gt;But it's not the optimal way to push your logs to the &lt;code&gt;STDOUT&lt;/code&gt;. Every modern framework should have a PSR-3 Logger. I think that the most popular now is the monolog, so I will show you how to configure it in Symfony, Laravel, and in pure usage.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monolog"&gt;
  &lt;/a&gt;
  Monolog
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/Seldaek/monolog"&gt;Monolog&lt;/a&gt; is great library to handle logs in your application. It's easy and elastic in configuration.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-monolog-configuration"&gt;
  &lt;/a&gt;
  Basic monolog configuration
&lt;/h3&gt;

&lt;p&gt;If you are using monolog in your project with manual configuration, you need to configure handler in this way:&lt;/p&gt;

&lt;p&gt;(Modified documentation example)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Monolog\Logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Monolog\Handler\StreamHandler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'stdout'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$log&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;pushHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;StreamHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'php://stdout'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nv"&gt;$log&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Foo'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You just need to configure StreamHandler, to write to the &lt;code&gt;php://stdout&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#symfony"&gt;
  &lt;/a&gt;
  Symfony
&lt;/h3&gt;

&lt;p&gt;Symfony Kernel since the Flex was provided, &lt;a href="https://symfony.com/blog/new-in-symfony-3-4-minimalist-psr-3-logger"&gt;is using minimalist PSR-3 logger&lt;/a&gt;, that logs everything to &lt;code&gt;php://stderr&lt;/code&gt; by default.  &lt;/p&gt;

&lt;p&gt;In Symfony, monolog as other components is configured in YAML files. So the same configuration will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/packages/monolog.yaml&lt;/span&gt;
&lt;span class="na"&gt;monolog&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handlers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;stdout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stream&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;php://stdout"&lt;/span&gt;
            &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;debug&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#laravel"&gt;
  &lt;/a&gt;
  Laravel
&lt;/h3&gt;

&lt;p&gt;Laravel use the arrays for configuration so the same thing will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;# config/logging.php
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Monolog\Handler\StreamHandler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'channels'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="s1"&gt;'stdout'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'driver'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'monolog'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'handler'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;StreamHandler&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'level'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'LOG_LEVEL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'debug'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;'with'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'stream'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'php://stdout'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#stderr-or-stdout"&gt;
  &lt;/a&gt;
  STDERR or STDOUT
&lt;/h2&gt;

&lt;p&gt;In some articles on the internet, you can read that someone uses stderr, and someone uses stdout streams to write logs there. Right now I cannot fin any reasons to choose one of them which is better.&lt;br&gt;&lt;br&gt;
The only information that I found on this topic is &lt;a href="https://stackoverflow.com/questions/4919093/should-i-log-messages-to-stderr-or-stdout"&gt;that post&lt;/a&gt;.&lt;br&gt;&lt;br&gt;
I think that stderr is more popular in some examples, also Fabien Potencier set it as default in his minimalistic logger, so I think we can assume that this one is better.  &lt;/p&gt;

&lt;p&gt;Personally, I always used the stdout, so that's the reason why I use it in this post's examples.  If I will find a great reason for using one of them over another I will update this post.  &lt;/p&gt;

&lt;p&gt;Originally posted on &lt;a href="https://mateuszcholewka.com/post/php-logs-in-docker/"&gt;https://mateuszcholewka.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>docker</category>
      <category>laravel</category>
      <category>symfony</category>
    </item>
    <item>
      <title>Ini Pentingnya Bahasa Pemrogramman Java bagi Pemasar Digital </title>
      <author>The Newbie</author>
      <pubDate>Sun, 07 Nov 2021 13:21:27 +0000</pubDate>
      <link>https://dev.to/blogbebasapaaja/ini-pentingnya-bahasa-pemrogramman-java-bagi-pemasar-digital-2gj0</link>
      <guid>https://dev.to/blogbebasapaaja/ini-pentingnya-bahasa-pemrogramman-java-bagi-pemasar-digital-2gj0</guid>
      <description>&lt;p&gt;Setiap orang mungkin memiliki ekspresi dan kesan yang muncul di benak mereka dalam sebuah aktivitas rumit setiap kali mendengar istilah 'coding' dan 'bahasa pemrograman'.&lt;/p&gt;

&lt;p&gt;Di era modern di mana globalisasi meningkat dan teknologi perlahan menjadi pusat pengembangan, pemrograman adalah salah satu pengetahuan yang populer dan diminati di dunia. Demikian juga, pemasaran digital telah menjadi salah satu metode pemasaran paling populer dan efektif di industri apa pun. &lt;/p&gt;

&lt;p&gt;Lantas, bagaimana jika seorang digital marketer juga memiliki kemampuan pemrograman? Kamu dapat berpikir bahwa pemrograman dan pemasaran tidak memiliki hubungan dan dampak yang signifikan satu sama lain, tetapi sebenarnya tidak demikian.&lt;/p&gt;

&lt;p&gt;Meskipun Coding dan pemasaran sama sekali tidak mirip, keduanya memiliki kesamaan. Kedua keterampilan ini didorong oleh data. Pemasaran, khususnya pemasaran online atau digital, berpusat pada data perusahaan atau bisnis tentang penjualan, periklanan, dan data vital lainnya yang akan sangat mempengaruhi kinerja bisnis.&lt;/p&gt;

&lt;p&gt;Sementara itu, Coding atau pemrograman berfokus pada pengembangan dan merupakan keterampilan yang kuat yang dapat membawa Kamu ke mana saja. Hal ini dapat membawa implikasi dimana penyampaian dan penyajian data pemasaran dapat ditingkatkan melalui coding.&lt;/p&gt;

&lt;p&gt;Ada berbagai bahasa pemrograman yang memiliki fokus, tujuan, komplikasi, dan tingkat kesulitan yang berbeda. Salah satu bahasa pemrograman yang paling terkenal oleh para ahli di Java. Belajar Java membawa banyak manfaat bagi pemasar digital seperti Kamu. Itu bisa meningkatkan kinerja dan strategi pemasaran Kamu dengan pesat setelah dipelajari.&lt;/p&gt;

&lt;p&gt;Apa bahasa pemrogramannya, Java?&lt;/p&gt;

&lt;p&gt;Java adalah salah satu bahasa pemrograman yang paling populer. Bahasa ini kemungkinan besar merupakan bahasa paling umum dan dasar yang digunakan oleh sebagian besar programmer. Banyak pengembang perangkat lunak masih mendukung penggunaan Java sebagai bahasa pemrograman karena fleksibilitasnya. Para programmer ahli dalam menggunakan Java sebagai bahasa pemrograman yang disebut Java developer juga biasa direkrut oleh beberapa digital marketer dan perusahaan untuk mendongkrak kinerjanya. &lt;/p&gt;

&lt;p&gt;Banyak programmer menggunakan Java terutama untuk pengembangan perangkat lunak, pengembangan web, dan membuat dan mengembangkan aplikasi sederhana. Java adalah alat yang ampuh untuk digunakan karena alasan ini karena mereka memiliki fitur dan keunggulan tertentu. Keunggulan ini juga bermanfaat bagi digital marketer dan perusahaan lain yang ingin memberikan dampak signifikan dan mendongkrak kinerja pemasaran dan penjualan mereka.&lt;/p&gt;

&lt;p&gt;Mengapa Java Penting untuk Pemasar Digital?&lt;/p&gt;

&lt;p&gt;Java dapat berjalan di beberapa perangkat&lt;/p&gt;

&lt;p&gt;Meskipun lama, Java masih merupakan bahasa pemrograman yang kuat dan signifikan bagi banyak pengembang dan pemrogram. Tidak seperti bahasa pemrograman lainnya, Java memiliki kekuatan untuk berjalan di banyak perangkat yang berbeda.&lt;/p&gt;

&lt;p&gt;Menulis program menggunakan Java atau mengembangkan perangkat lunak atau aplikasi yang berpusat pada bahasa ini akan dapat berfungsi dengan perangkat lain. Jika Kamu membuat aplikasi web atau program pemantauan, Kamu dapat mengaksesnya secara bersamaan menggunakan komputer, tablet, atau ponsel cerdas. &lt;/p&gt;

&lt;p&gt;Baca Juga : Cara Membuat Aplikasi GUI Menggunakan Java Swing&lt;/p&gt;

&lt;p&gt;Ini sangat bermanfaat bagi pemasar digital yang bertujuan untuk meningkatkan kinerja pemasaran perusahaan atau bisnis masing-masing melalui pembuatan aplikasi dan perangkat lunak sederhana. Selain itu, Java, sebagai bahasa pemrograman yang dikenal dengan fleksibilitasnya di berbagai perangkat, dapat berjalan dan bekerja dengan baik di berbagai sistem operasi seperti Mac, Windows, iOS, dan android.&lt;/p&gt;

&lt;p&gt;Sebuah Alat hebat untuk pengembangan perangkat lunak&lt;/p&gt;

&lt;p&gt;Programmer dan developer masih sangat menghargai Java sebagai bahasa pemrograman yang masih terus berkembang peminatnya. Pemasaran digital adalah metode pemasaran baru yang mempromosikan bisnis, produk, perusahaan, dan aspek lain yang diperlukan melalui penggunaan internet dan media sosial. Aplikasi yang dijalankan melalui sistem berbeda yang diperlukan untuk strategi pemasaran digital memiliki sentuhan bahasa pemrograman Java. &lt;/p&gt;

&lt;p&gt;Java adalah alat yang sangat baik untuk pengembangan perangkat lunak. Namun, itu juga dapat digunakan dalam pengembangan web yang juga penting untuk pemasaran digital. Hasilnya bisa mobile-friendly karena aplikasinya fleksibel untuk dijalankan di berbagai perangkat. Keramahan situs web dan perangkat lunak adalah faktor penting yang perlu dipertimbangkan oleh pemasar digital.&lt;/p&gt;

&lt;p&gt;Java adalah bahasa pemrograman berorientasi objek&lt;/p&gt;

&lt;p&gt;Pemasar digital selalu sibuk memantau, membuat, dan menilai data dan strategi pemasaran untuk dibaca dan diterapkan. Mempelajari Java sebagai keterampilan lain selain keterampilan pemasaran mereka bisa menjadi perjuangan. Meningkatkan dan mempelajari keterampilan coding sudah cukup untuk disebut perjuangan, tetapi apa lagi jika Kamu harus menambahkan bahasa pemrograman baru?&lt;/p&gt;

&lt;p&gt;Namun, Java dapat dianggap sebagai salah satu bahasa pemrograman yang paling mudah dipelajari . Ini sempurna untuk pemula seperti pemasar digital sambil tetap menuai manfaat besar. Menjadi bahasa berorientasi objek, Java relatif lebih mudah dibandingkan dengan bahasa pemrograman lain seperti C dan C++ untuk dipelajari. &lt;/p&gt;

&lt;p&gt;Ini juga merupakan metode praktis terbaik dalam membuat desain perangkat lunak. Bahasa pemrograman berorientasi objek membuat masalah rumit mudah dipahami dan dipecahkan. Ini juga memungkinkan Kamu untuk menggunakan kembali kode tanpa merusak dan membuat komplikasi lebih lanjut untuk pengujian dan pemecahan masalah perangkat lunak dan aplikasi.&lt;/p&gt;

&lt;p&gt;Google Source : the newbie blogbebasapaaja.&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>beginners</category>
      <category>job</category>
    </item>
    <item>
      <title>Strapi,Nextjs and Tailwind setup</title>
      <author>Bishal Neupane</author>
      <pubDate>Sun, 07 Nov 2021 13:16:14 +0000</pubDate>
      <link>https://dev.to/bishaln/strapinextjs-and-tailwind-setup-50nk</link>
      <guid>https://dev.to/bishaln/strapinextjs-and-tailwind-setup-50nk</guid>
      <description>&lt;p&gt;This is the first blog post on the series of a blog posts I will be posting about strapi,nextjs, and tailwind. We will be recreating my portfolio/blogpost website and along the way, we'll learn the fundamentals of strapi,nextjs and tailwind. You can check my &lt;a href="https://myportfolioandblog.vercel.app/"&gt;myportfolio&lt;/a&gt; If you know the basics of javascript and react then you should be good to follow this blog post and coming blog post on the series. I hope you'll get something out of this series.&lt;/p&gt;

&lt;p&gt;I am assuming that you have nodejs installed in your machine and I will be using yarn instead of npm you don't have to use yarn if you want then make sure to install yarn globally as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -g yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#strapi"&gt;
  &lt;/a&gt;
  Strapi
&lt;/h1&gt;

&lt;p&gt;It is a headless content management system. Headless means it only serves data and not HTML and CSS. This is very powerful since we will just be getting the data that we care about and we can write the UI logic to display it nicely. We can use the same API endpoint in all the platforms to request the data be it web, mobile, or desktop.&lt;br&gt;
It comes with an admin UI that helps us to manage the content easily. Enough talk now let's see it in action;&lt;/p&gt;

&lt;p&gt;To create a brand new strapi app run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; yarn create strapi-app nameofyourapp
 or
 npx create-strapi-app my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will ask for the installation type select custom and no for template choose sqlite as the development database we'll use postgres in production. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pE_JoP5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qztxikwi9cn4418ufcz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pE_JoP5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qztxikwi9cn4418ufcz.png" alt="Image description" width="403" height="147"&gt;&lt;/a&gt;&lt;br&gt;
It will create a bunch of files for us we don't have to worry about any of the files created for now;&lt;br&gt;
So go ahead and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; yarn develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will first build the admin UI and spin up the server by default at &lt;a href="http://localhost:1337"&gt;http://localhost:1337&lt;/a&gt; &lt;br&gt;
 Now go ahead and open that link in a browser and for the first time, it will ask you for your credentials that we will use to login to the admin. After all that we should see an admin interface;&lt;br&gt;
 In strapi we first create the content-type think of it is a data structure or table schema. Now let's create a simple content-type say an Author with username, bio and image.&lt;/p&gt;

&lt;p&gt;Go to the content-types builder and click on create new collection type and Name your collection type Author and add some fields to it. Hit the save button it will restart the server and add Author as your new collection type alongside the users which is the default collection type used for authentication purposes.&lt;/p&gt;

&lt;p&gt;Now let's add some dummy author data so that we can query them with an HTTP request to do that go to the author collection data and click the add new authors button. Fill in the data save it and publish it then we should be able to see the newly added author in the author's collection type. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QWx4YOlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hkxr0an9b2u57jvxjbr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QWx4YOlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hkxr0an9b2u57jvxjbr.png" alt="Image description" width="880" height="150"&gt;&lt;/a&gt;&lt;br&gt;
 To get this data first we have to make this content publicly available to do that let's go to&lt;br&gt;
 settings -&amp;gt; roles -&amp;gt; public and check the find and findone permissions and hit save.&lt;br&gt;
 Now let's make a simple get request to &lt;a href="http://localhost:1337/authors"&gt;http://localhost:1337/authors&lt;/a&gt; you should get something like this &lt;br&gt;
   &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yxOQNg4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zo10p2whqf40cwo1sdwr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yxOQNg4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zo10p2whqf40cwo1sdwr.png" alt="Image description" width="731" height="585"&gt;&lt;/a&gt;&lt;br&gt;
 Strapi by default processes the image that we upload to the media library but we can change the setting, for now, let's keep things simple. For this project, I want to make use of graphql instead of rest. If you have never made use of graphql then don't worry it is very simple. It provides several advantages that you can look up on the internet, for now, let's install a strapi plugin that will allow us to make graphql requests to our strapi server.&lt;/p&gt;

&lt;p&gt;Go ahead and run;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; yarn strapi install graphql
 or
 npm run strapi install graphql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After successful installation, we should be able to open up graphql playground at &lt;a href="http://localhost:1337/graphql"&gt;http://localhost:1337/graphql&lt;/a&gt;&lt;br&gt;
 In graphql for get request we use query and for others mutation. Let's write a simple query to get all the authors.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bzBkmwqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6vzcaanfw8bmiqmenov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzBkmwqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6vzcaanfw8bmiqmenov.png" alt="Image description" width="880" height="430"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; query {
  authors {
    id
    created_at
    username
    bio
    avatar {
      url
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll talk more about the strapi content-types and relation in another blog post for now let's focus on setting up Nextjs and Tailwind.&lt;/p&gt;

&lt;p&gt;# Nextjs&lt;br&gt;
 It is a react framework that makes server-side rendering(SSR) and static site generation(SSG) super simple. In a normal create react app everything is computed client-side the user browser which is not good for performance as well as SEO. So we're going to make use of static site generation since the portfolio and blog site does not change that much.&lt;br&gt;
&lt;strong&gt;The difference between SSR and SSG is that in SSG nextjs pulls all the data during the build process and creates all pages that you have. When someone requests to access your page they will be served the pages which were built during the build process and without making any backend calls. This improves the performance of your website as well as decreases the load to your backend server whereas in SSR nextjs makes requests to your backend server for every request from the clients creates the page on the server and then serves it to the client.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's setup nextjs with typescript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create next-app --typescript
or
npx create-next-app@latest --typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IC7X6ps_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drhp5ts30u8jh9sksc67.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IC7X6ps_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drhp5ts30u8jh9sksc67.png" alt="Image description" width="190" height="297"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will install all the dependencies and setup a simple page&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn dev
or 
npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This starts the next server in dev goto &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tailwindcss"&gt;
  &lt;/a&gt;
  Tailwindcss
&lt;/h1&gt;

&lt;p&gt;It is a utility-first CSS framework that makes building UI simple and faster.&lt;br&gt;
Now let's add tailwindcss into the mix&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add -D tailwindcss@latest postcss@latest autoprefixer@latest
or
npm install -D tailwindcss@latest postcss@latest autoprefixer@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx tailwindcss init -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add this code snippet to the global CSS file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* ./styles/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using vs code then you can install the tailwindcss extension that will give you cool autocompletion so that you don't have to remember the class names;&lt;/p&gt;

&lt;p&gt;Now let's remove all the markup from the index.tsx file and test simple class from tailwind to make the text bold and italic;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import type { NextPage } from 'next';

const Home: NextPage = () =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;p className='font-bold italic'&amp;gt;This is tailwindcss&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default Home;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aUZXXl20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r57yla7pvjitf6ryq52m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUZXXl20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r57yla7pvjitf6ryq52m.png" alt="Image description" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That is it for this blog post in the coming blog post we will discuss more about strapi content-types and add all the necessary content types for the portfolio/blog page Till then stay tuned if you have any questions about the current setup the let me know in the discussions&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>nextjs</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>How I structured my first Express App</title>
      <author>Fazlul Kabir</author>
      <pubDate>Sun, 07 Nov 2021 13:14:27 +0000</pubDate>
      <link>https://dev.to/zisan34/how-i-structured-my-first-express-app-20ik</link>
      <guid>https://dev.to/zisan34/how-i-structured-my-first-express-app-20ik</guid>
      <description>&lt;p&gt;I’m pretty much a beginner dev, working for 2years as a developer. During this period most of the time, I’ve used PHP as backend but recently my company assigned me to a project in which I had to use Node(Express) as backend. So here’s the story about my first MERN stack app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-rRTHQp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2zzgdz8wx21xhtjviw8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-rRTHQp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2zzgdz8wx21xhtjviw8.png" alt="Final Directory Structure of the App" width="880" height="792"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-background-story"&gt;
  &lt;/a&gt;
  Some background story
&lt;/h3&gt;

&lt;p&gt;During this short period of my career, I got the opportunity to work with several technologies. As I’m working as a Full-Stack dev so previously I had hands-on experience with Laravel, React, Vue, Mysql other related techs. I was very excited when my company assigned me to a MERN stack app. That was a huge transition. I took that as a challenge and decided that I’d prepare myself for larger apps built with the MERN stack. So that’s why even the purpose of the app is simple but the structure is not. Basically, this is a custom &lt;a href="https://shopify.dev/apps"&gt;Shopify app&lt;/a&gt; that will maintain shipping service(&lt;a href="https://shopify.dev/api/admin/rest/reference/shipping-and-fulfillment/carrierservice"&gt;carrier service&lt;/a&gt;) including tons of conditions for a Shopify store.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-dive-into-it"&gt;
  &lt;/a&gt;
  Let’s Dive into it
&lt;/h3&gt;

&lt;p&gt;It’s true that my project structure is pretty much inspired by &lt;a href="https://laravel.com"&gt;Laravel&lt;/a&gt; because I’m familiar with that &amp;amp; I love the structure. So my project has two main directories “&lt;strong&gt;&lt;em&gt;backend&lt;/em&gt;&lt;/strong&gt;” &amp;amp; “&lt;strong&gt;&lt;em&gt;frontend&lt;/em&gt;&lt;/strong&gt;”. In the &lt;strong&gt;&lt;em&gt;backend&lt;/em&gt;&lt;/strong&gt; directory lies the express app &amp;amp; in the &lt;strong&gt;&lt;em&gt;frontend&lt;/em&gt;&lt;/strong&gt; directory lies the react app. The reason for this is I wanted to reduce the deployment complexity. So for the &lt;strong&gt;&lt;em&gt;frontend&lt;/em&gt;&lt;/strong&gt; Webpack is used to compile the react app &amp;amp; export it to a single file which I later include as a script in the backend(in an ejs file). Yes, pretty much what Laravel-mix does. The weird thing is project has one package.json file which holds both frontend and backend dependencies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Backend Directory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the root of the &lt;strong&gt;&lt;em&gt;backend&lt;/em&gt;&lt;/strong&gt; directory, there are two files one is &lt;em&gt;index.js&lt;/em&gt; which is responsible for serving the app to a specific port &amp;amp; connecting to MongoDB, Redis etc. another one is &lt;em&gt;app.js&lt;/em&gt; which is responsible for booting the express app, top-level middlewares, including the route files etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfhZsSKQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7dnch5hk81jbh8109xo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfhZsSKQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7dnch5hk81jbh8109xo.png" alt="The index.js file" width="880" height="1212"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZNWcgd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvuutbn1jbet3d378jtg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZNWcgd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvuutbn1jbet3d378jtg.png" alt="The app.js file" width="880" height="1445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Subdirectories in backend&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--APl4mxxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm99wb6cjwzqsmygsuc7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--APl4mxxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm99wb6cjwzqsmygsuc7.png" alt="All the subdirectories of the backend" width="880" height="510"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think most of the things are self-explanatory so I won’t discuss them all. In the &lt;strong&gt;&lt;em&gt;config&lt;/em&gt;&lt;/strong&gt; directory, I’ve got a few config files that hold configuration variables, next the &lt;strong&gt;&lt;em&gt;controllers&lt;/em&gt;&lt;/strong&gt; directory have 3 subdirectories that are responsible for responding to different kind of requests. I hate to write business logic at the controller level, so I’ve got service classes in the &lt;strong&gt;&lt;em&gt;services&lt;/em&gt;&lt;/strong&gt; directory, where lies all the business logic. The &lt;strong&gt;&lt;em&gt;views&lt;/em&gt;&lt;/strong&gt; directory holds ejs files which will be responded to web routes. Also one of the ejs files is responsible to serve the compiled react app.&lt;/p&gt;

&lt;p&gt;Next, I wanna say what I’m missing from Laravel, which is the Laravel &lt;a href="https://laravel.com/docs/8.x/queues#introduction"&gt;job queue&lt;/a&gt;. So I managed to find almost something similar named &lt;a href="https://github.com/OptimalBits/bull"&gt;bull&lt;/a&gt; for node.js but I want more features like retrying the jobs, scheduling them etc. which I couldn’t find. I would be grateful if someone can suggest something.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Frontend Directory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eq6xTLJu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bwsq3v153i23p2ofqr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eq6xTLJu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bwsq3v153i23p2ofqr7.png" alt="All the subdirectories of the frontend" width="880" height="283"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;frontend&lt;/em&gt;&lt;/strong&gt; directory is pretty simple it has an entry point which holds the root react component. There are 3 subdirectories named &lt;strong&gt;&lt;em&gt;components&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Helpers&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;sass&lt;/em&gt;&lt;/strong&gt;. The components directory holds pages level components in &lt;strong&gt;&lt;em&gt;pages&lt;/em&gt;&lt;/strong&gt; sub dir &amp;amp; other reusable components in &lt;strong&gt;&lt;em&gt;utils&lt;/em&gt;&lt;/strong&gt; sub dir. Next, the &lt;strong&gt;&lt;em&gt;Helpers&lt;/em&gt;&lt;/strong&gt; directory contains some helper functions &amp;amp; classes &amp;amp; the &lt;strong&gt;&lt;em&gt;sass&lt;/em&gt;&lt;/strong&gt; directory holds sass files for styling.&lt;/p&gt;

&lt;p&gt;The frontend is later compiled via the Webpack, babel and exported to the &lt;strong&gt;&lt;em&gt;public/assets&lt;/em&gt;&lt;/strong&gt; directory. Which I later include in an ejs file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;If any experienced developer reads this post first reaction will be “your package.json must be messed up”. Yeah, I know that, but within that short period of time, it was the most practical approach I found for faster development &amp;amp; easy deployment.&lt;/p&gt;

&lt;p&gt;Oh, I forgot to mention that this is my first tech blog post. So please pardon my lack of knowledge &amp;amp; experience. And I’d be very much grateful if I could have some suggestions about how things could be done in a better way. Also, I’m still looking for a job-queue package which is similar to Laravel so, suggestions are appreciated.&lt;/p&gt;

</description>
      <category>node</category>
      <category>expressjs</category>
      <category>mongodb</category>
      <category>react</category>
    </item>
    <item>
      <title>But why do we need Blockchain, anyway? And why does it need us just as much? </title>
      <author>Manbir Singh Marwah</author>
      <pubDate>Sun, 07 Nov 2021 12:49:27 +0000</pubDate>
      <link>https://dev.to/manbir/but-why-do-we-need-blockchain-anyway-and-why-does-it-need-us-just-as-much-115p</link>
      <guid>https://dev.to/manbir/but-why-do-we-need-blockchain-anyway-and-why-does-it-need-us-just-as-much-115p</guid>
      <description>&lt;p&gt;Out of all the cult surrounding Bitcoin, many people think of blockchain as the technology that powers it. While it's true and that was its original purpose, blockchain is capable of a lot more, thanks to all the innovation happening. Also, we don't hear the term 'blockchains' quite often, but that's a term, because there are a whole bunch of them.&lt;/p&gt;

&lt;p&gt;Blockchain is, in-fact, a shorthand for a whole suite of distributed ledger technologies that can be programmed to record and track any type of value; for example, from financial transactions and medical records, to property/land titles. You might be thinking that we already have processes to track and store data, then what's so special about blockchain?  &lt;/p&gt;

&lt;p&gt;Let's dive into the reasons why blockchain technology is here to revolutionize the way we store and interact with data, along with why blockchain needs us just as much we need it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x4ODJxyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tg7spo3lncwgrxlbnw5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x4ODJxyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tg7spo3lncwgrxlbnw5.gif" alt="blockchain" width="269" height="269"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-storing-and-tracking-data"&gt;
  &lt;/a&gt;
  1. Storing and Tracking Data
&lt;/h2&gt;

&lt;p&gt;While many people relate blockchain with cryptocurrencies, it has more to do with how we store and manage data. Blockchain stores information in batches, called &lt;em&gt;'blocks'&lt;/em&gt;. There are multiple of them, that are linked together in a chronological order that can not be modified, forming a continuous line: metaphorically, a chain of blocks. &lt;/p&gt;

&lt;p&gt;If we want to make a change in the information in a particular block in-between the chain, we can not do that simply by rewriting the data in that block. Instead, the change is stored in a new block after the most recently created block, depicting that 'x' changed 'y' at a particular date and time. To software engineers, this might sound familiar (reference: &lt;a href="https://git-scm.com/"&gt;git&lt;/a&gt;).  &lt;/p&gt;

&lt;p&gt;Leaving even git aside, it might still feel familiar to you because blockchain is based on the centuries-old method of the &lt;a href="https://www.investopedia.com/terms/g/generalledger.asp"&gt;general financial ledger&lt;/a&gt;, making it a non-destructive way to track data over time. &lt;/p&gt;

&lt;p&gt;As an example, say there are two siblings, Anne and Harry, in a dispute over who owns a piece of land that has been there in the family for centuries. Now, since blockchain technology uses the ledger method, it would hold an entry in the ledger showing that Josh, one of Anne and Harry's ancestor owned the property first, say from 1990 to 1925, then transferred it to Bill - another ancestor (forming a new entry in the ledger), and so on, until it got transferred to Anne in 2015 by her father, making Anne the current owner. We'll be able to see that history of transfer of ownership for the piece of land in the ledger along with date and time. Unlike the old-age ledger method being on a notebook or a computer, all that data can never be tampered or deleted over blockchain because of its decentralized nature, which brings us to its second unique property... &lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qNTtnG4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/WelllitSpicyConure-size_restricted.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qNTtnG4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/WelllitSpicyConure-size_restricted.gif" alt="decentralization" width="640" height="360"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-distributed-and-decentralized"&gt;
  &lt;/a&gt;
  2. Distributed and Decentralized
&lt;/h2&gt;

&lt;p&gt;Blockchain is designed to be decentralized, meaning that it can not be controlled by any individual, organization or government institution. The data is distributed over a large network of computers. So if any entity wants to change the data, they'll need to change it on all the computers that hold that data—which is nowhere near feasible; thus making blockchain tamper-proof. All this creates trust in the network of blockchain users. &lt;/p&gt;

&lt;p&gt;Before a block gets added to the chain, an algorithmic problem must be solved to validate an action over the network, for example, a transaction. The computer that solves the problem (called nodes), shares the solution with all the other computers over the network. This is called Proof-of-Work (PoW). The network then works on verifying this PoW thereby reaching a consensus, and if it's correct, the block gets added to the chain. One of the major benefits of having a decentralized and distributed network is that, in case one of the nodes go down, there would still be multiple up and running, to validate the transactions and share data with rest of the nodes (represented in the GIF above).&lt;/p&gt;

&lt;p&gt;The combination of these complex computational problems, along with verification by a large number of computers collectively ensures that we can trust every single block on the chain. Because the network does the trust building for us, it brings us the opportunity to interact with the data in real-time, also bringing us to the third major property of blockchain...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-no-requirement-for-intermediaries"&gt;
  &lt;/a&gt;
  3. No Requirement for Intermediaries
&lt;/h2&gt;

&lt;p&gt;Currently, when dealing in business, we don't show the other party our financial or business records. We instead, rely on a trusted intermediary such as a broker, bank or lawyer. We also trust them to keep our information confidential. For example, Uber connects a passenger with a driver and ensures that the ride is carried out efficiently. In the process, additional time and money is involved, and we also give out our personal information like contact, address, etc. to Uber—which has nothing to do with the data after a ride. They may or may not hold your sensitive data after the ride. Now, what if a passenger could get in touch with one of the nearby drivers directly? &lt;/p&gt;

&lt;p&gt;Taking an example of voting in elections; how do we make sure that the count of votes going to a particular political party is genuine? How do we make sure that every citizen in a country gets an equal opportunity to vote just by being a part of it without requiring any additional document? How do we make sure that there's no human error in the counting of votes (in case of ballot casting)? By relying on algorithms that can be audited anytime, by anyone in the world. Blockchain works to solve such type of problems. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/bwh3XIO9aql0uZiWzn/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/bwh3XIO9aql0uZiWzn/giphy.gif" alt="gif3" width="480" height="296"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now, going back to the example of Anne and Harry; in real world, a lawyer would have to sort out the dispute to verify that Anne is the rightful owner of the land by looking at the records, thus data getting exposed to the middleman. If Anne's ownership information was stored in the blockchain, she could independently retrieve the information about her property from there. Now since the data on blockchain is verified to be true (by multiple computers instead of a single human intermediary), Anne could simply show that data to Harry, thus saving a considerable amount of time and money that would've been invested while dealing with a lawyer. &lt;/p&gt;

&lt;p&gt;This type of trusted, peer-to-peer interaction with data can revolutionize the way we access, verify and transact with each other by leveraging the power of algorithmic computations. Since blockchain is a type of technology and not a single network, it can be implemented in many different ways. While some blockchains can be completely public for anyone to view and access at any time, others can be closed to a select group of authorized users, such as an organization, group, agency or government institution like banks. There can be hybrid public-private blockchains too; where anyone can see the public data, but only authorized parties can see the sensitive data. &lt;/p&gt;

&lt;p&gt;All the three properties above collectively contribute to allow groups of people who are anonymous and don't know each other to establish trust between each other. This develops a democratization in the data, which can significantly reduce fraud and mismanagement due to human errors. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-that-we-know-why-we-need-blockchain-how-does-the-inverse-hold"&gt;
  &lt;/a&gt;
  Now that we know why we need blockchain, how does the inverse hold?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VyM17PF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99o7qttju2m3hldtye1d.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyM17PF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99o7qttju2m3hldtye1d.gif" alt="gif4" width="312" height="312"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Blockchain needs us, users and early adopters just as much we need it; in the form of developers, miners, investors, validators, liquidity providers, educators and other form of contributors, because the power of a blockchain is in its community. The bigger the community of a blockchain network becomes, the more trust is established, not just because we'll have more computational power to validate transactions, but also because we're building an ecosystem in which the use cases are linked together between products that can co-exist to form a workflow, each providing a separate solution to a real-world problem that gets solved on-chain. &lt;/p&gt;






&lt;center&gt;&lt;sup&gt;✍🏻 with ❤️ by &lt;a href="https://twitter.com/manbirmarwah"&gt;Manbir&lt;/a&gt;&lt;/sup&gt;&lt;/center&gt;

</description>
      <category>blockchain</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Finding factors of a number, Identify Prime and Composite number</title>
      <author>Anees Kodappana</author>
      <pubDate>Sun, 07 Nov 2021 12:39:07 +0000</pubDate>
      <link>https://dev.to/aneeskodappana/finding-factors-of-a-number-identify-prime-and-composite-number-11n0</link>
      <guid>https://dev.to/aneeskodappana/finding-factors-of-a-number-identify-prime-and-composite-number-11n0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Let’s define the terms first&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#prime-number"&gt;
  &lt;/a&gt;
  Prime number
&lt;/h3&gt;

&lt;p&gt;A prime number is a number that has only two factors, 1 and the number itself&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#composite-number"&gt;
  &lt;/a&gt;
  Composite number
&lt;/h3&gt;

&lt;p&gt;A composite number is a number which is not prime, e.g 72 have 12 factors &lt;code&gt;(1,2,3,4,6,8,9,12,18,24,36,72)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;findFactors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dividend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;factors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dividend&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;quotient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;quotient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;quotient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dividend&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;divisor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;quotient&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;quotient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;divisor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;divisor&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isPrime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;findFactors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;factors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findFactors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; factors found (&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isPrime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;It's a prime number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;It's a composite number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;factors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findFactors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; factors found (&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isPrime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;It's a prime number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;It's a composite number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>math</category>
      <category>prime</category>
      <category>factors</category>
    </item>
    <item>
      <title>Responsive Navigation Bar with mobile menu using HTML &amp; CSS</title>
      <author>Adam Nagy</author>
      <pubDate>Sun, 07 Nov 2021 12:35:56 +0000</pubDate>
      <link>https://dev.to/javascriptacademy/responsive-navigation-bar-with-mobile-menu-using-html-css-2hpd</link>
      <guid>https://dev.to/javascriptacademy/responsive-navigation-bar-with-mobile-menu-using-html-css-2hpd</guid>
      <description>&lt;p&gt;Any website on the web should be responsive in the modern web era. One of the must-do task is to create a navigation bar which is usable on both huge 4K monitors and small mobile devices. And this is exatly what we'll create in this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video tutorial
&lt;/h2&gt;

&lt;p&gt;If you prefer to watch a a &lt;strong&gt;step-by-step, beginner friendly&lt;/strong&gt; video instead, you can check out the video that I made &lt;a href="https://www.youtube.com/c/JavaScriptAcademyOfficial"&gt;on my YouTube channel:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OjQP7rPwJyE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-the-html"&gt;
  &lt;/a&gt;
  Implementing the HTML
&lt;/h2&gt;

&lt;p&gt;The HTMl markup will be really simple and will consist of two separate sections. We'll first create the markup that will be used for the desktop version, and after that we will implement the markup required for the mobile menu.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-markup-for-the-desktop-version"&gt;
  &lt;/a&gt;
  HTML markup for the desktop version
&lt;/h3&gt;

&lt;p&gt;We wrap everything inside of &lt;code&gt;header&lt;/code&gt; tags, and it will make our site more accessible as it helps screen readers. Inside the header we'll place a logo. For the sake of this example this will be a simple text wrapped inside an &lt;code&gt;a&lt;/code&gt; tag, which navigates to the homepage. Below the brand div, we will have a &lt;code&gt;nav&lt;/code&gt; wrapper. It also helps screen readers to understand the page. Inside our &lt;code&gt;nav&lt;/code&gt; we'll have an unordered list, which will hold all of our navigation links. Every navigation link will have the same basic structure. Each of them will be a list item (&lt;code&gt;li&lt;/code&gt;), and inside that we will have an &lt;code&gt;a&lt;/code&gt; tag which links to separate pages. I'll also give an id to the login and signup navigation for further styling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"brand"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;MyCompany&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/products"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Products&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"login"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/login"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Login&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"signup"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/signup"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Signup&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#html-markup-for-the-mobile-version"&gt;
  &lt;/a&gt;
  HTML markup for the mobile version
&lt;/h3&gt;

&lt;p&gt;At small screen sizes, we will use a hamburger menu to toggle the navigation menu. For the hamburger icon you can use any external icon libraries, like &lt;a href="https://fontawesome.com/"&gt;FontAwesome&lt;/a&gt;, but in this tutorial, I'll create my own hamburger icon using HTML and CSS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-hamburger-icon"&gt;
  &lt;/a&gt;
  The hamburger icon 🍔
&lt;/h4&gt;

&lt;p&gt;The html structure of the icon will be really simple. First we'll add a container div with the id of &lt;code&gt;hamburger-icon&lt;/code&gt;. We will use this wrapper div to style and positions the bars inside the hamburger icon. We'll also add an &lt;code&gt;onclick&lt;/code&gt; event handler, which will toggle our mobile menu. We'll implement this later in javascript. Inside our container we'll add three divs. They have separate classnames, and we'll use those for makeing our micro animation which will fade away the middle bar and form an &lt;code&gt;X&lt;/code&gt; from the bottom and top one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hamburger-icon"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"toggleMobileMenu(this)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In CSS, we'll center the icon vertically using &lt;code&gt;margin: auto 0&lt;/code&gt;, and hide it by default using &lt;code&gt;display: none&lt;/code&gt;. We'll make it visible through a media query if the screen is less than 600px wide. (You can also do it in a mobile first approach and show it by default and hide it if the screen is wider than 600px). We'Ll give the divs inside the wrapper a fixed width and height and give them a little vertical spacing with margin. When the mobile menu is open (&lt;code&gt;open&lt;/code&gt; class is added to the mobile menu), we'll rotate the first bar by -45 degrees and adjust it with translate. We'll hide the second bar by setting the opacity to zero, and we'll also do the same transformations to the last element as we did for the first, but in the opposite direction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#hamburger-icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#hamburger-icon&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.open&lt;/span&gt; &lt;span class="nc"&gt;.bar1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-45deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-6px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-45deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-6px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.open&lt;/span&gt; &lt;span class="nc"&gt;.bar2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.open&lt;/span&gt; &lt;span class="nc"&gt;.bar3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-6px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-8px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-6px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-8px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mobile-html-markup"&gt;
  &lt;/a&gt;
  Mobile HTML markup
&lt;/h4&gt;

&lt;p&gt;Below the bars that we created for the hamburger icon in the previous section, we'll add the same navigation menu that we had in the desktop HTML markup section. The only important difference is that the unordered list has a class &lt;code&gt;mobile-menu&lt;/code&gt;. We will use this class to apply all the mobile related styles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hamburger-icon"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"toggleMobileMenu(this)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mobile-menu"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/products"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Products&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"login"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/login"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Login&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"signup"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/signup"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Signup&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#finishing-up-the-html"&gt;
  &lt;/a&gt;
  Finishing up the HTML.
&lt;/h3&gt;

&lt;p&gt;There is two things we have to add:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A link to the css stylesheet in the head section that we'll create:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"styles.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Importing our javascript file at the end of the body:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implement-the-css-part"&gt;
  &lt;/a&gt;
  Implement the CSS part
&lt;/h2&gt;

&lt;p&gt;First I'll import a Google font called Poppins, then reset every browser default margins and paddings and also set the box-siting to border-box. Then for the body we'll set out brand new font and set a dark background and white text color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&amp;amp;display=swap")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#353836&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Poppins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we'll focus on the header wrapper and the logo. We'll remove all text decoration (underline) from any links inside the header. For the header we'll set a little bit of left and right padding, give it a dark background color, and a fixed height. We'll also set the display to flex, and to have the logo on the right and the navigation links on the left we'll add &lt;code&gt;justify-content: space-between;&lt;/code&gt;. For the brand, we'll set the desired font size and weight, and also center it vertically using flexbox.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1d1f1d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#brand&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#brand&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#09c372&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Regarding the navigation links we'll remove any bullet points from the list, make the container full width and center it vertically using flexbox. We'll set a white color for the links and add some spacing using paddings and margins to the list items. I'll also add a hover effect to scale the links up a bit when they are hovered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-around&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The login and signup links will have a different button-like styling. We'll give them more spacing and round borders and use blue and red colors to differentiate them from the other links.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#login&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nf"&gt;#signup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#login&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#498afb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#signup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ff3860&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#signup&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff3860&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#login&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#498afb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to implement the styles for the mobile menu. By default the menu will be hidden so we'll apply &lt;code&gt;display: none;&lt;/code&gt;. We'll position the mobile menu absolutely, and place it right below the header, to do that we have to set a top offset of 50px, as it is the fixed height of the header. We want the mobile menu to take the full remaning space of the site (besides the header), so will make it full width, and we'll set the high to be 100% and substract the height of the header from it.&lt;/p&gt;

&lt;p&gt;When the mobile menu is open, we want to display it, and we'll use flexbox to overrode the &lt;code&gt;display:none&lt;/code&gt;. We'll use flex-direction column to stack the links below each other, center them horizontally and make them start from the beginning of the flex container. We'll also add a little bottom margin to the links to amke them a little space to breath.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.mobile-menu&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100vh&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.open&lt;/span&gt; &lt;span class="nc"&gt;.mobile-menu&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.mobile-menu&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly we have to add the media query to hide the desktop menu, when we are on mobile size and display the hamburger icon when we are on mobile screen size. I'll use 600px as the breakpoint for mobile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;#hamburger-icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-little-bit-of-javascript"&gt;
  &lt;/a&gt;
  A little bit of javascript
&lt;/h2&gt;

&lt;p&gt;We will have one lonely javascript function in our index.js file that will toggle the mobile menu between open and closed states. We already added this event handler in the HTML section. We will use the reference that we passed from the HTML and modify its classList using it. The toggle function will check wether the provided class is present on the element and if it is then it will remove it and if it's not then it will add it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toggleMobileMenu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#links-for-the-full-source-code"&gt;
  &lt;/a&gt;
  Links for the full source code
&lt;/h2&gt;

&lt;p&gt;You can check the full source code here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codesandbox.io/s/agitated-tu-97n1i?file=/index.js:0-70"&gt;Codesandbox link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/javascriptacademy-stash/responsive-navbar"&gt;GitHub repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#where-you-can-learn-more-from-me"&gt;
  &lt;/a&gt;
  Where you can learn more from me?
&lt;/h2&gt;

&lt;p&gt;I create education content covering web-development on several platforms, feel free to 👀 check them out.&lt;/p&gt;

&lt;p&gt;I also create a newsletter where I share the week's or 2 week's educational content that I created. No bull💩 just educational content.&lt;/p&gt;

&lt;p&gt;🔗 Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;☕️ Support free education and my work, &lt;a href="https://ko-fi.com/adamnagy"&gt;buy me a coffee&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💬 Join our &lt;a href="https://discord.gg/GuxmcEgAjB"&gt;community on Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📧 Newsletter &lt;a href="https://www.getrevue.co/profile/dev_adamnagy"&gt;Subscribe here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🎥 YouTube &lt;a href="https://www.youtube.com/channel/UCicOwFWkuMX0ddFaKCc_E5Q"&gt;Javascript Academy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🐦 Twitter: &lt;a href="https://twitter.com/dev_adamnagy"&gt;@dev_adamnagy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📷 Instagram &lt;a href="https://www.instagram.com/javascriptacademy/"&gt;@javascriptacademy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Cara Membuat Aplikasi GUI Menggunakan Java Swing</title>
      <author>The Newbie</author>
      <pubDate>Sun, 07 Nov 2021 11:54:01 +0000</pubDate>
      <link>https://dev.to/blogbebasapaaja/cara-membuat-aplikasi-gui-menggunakan-java-swing-4gc8</link>
      <guid>https://dev.to/blogbebasapaaja/cara-membuat-aplikasi-gui-menggunakan-java-swing-4gc8</guid>
      <description>&lt;p&gt;Apa itu Swing di JAVA&lt;/p&gt;

&lt;p&gt;Swing di Java adalah toolkit Graphical User Interface atau GUI yang mencakup komponen GUI. Swing menyediakan serangkaian widget dan paket yang kaya akan komponen GUI yang canggih untuk aplikasi Java. Swing merupakan bagian dari Java Foundation Classes yang disingkat JFC, yang merupakan API untuk pemrograman Java GUI yang menyediakan GUI.&lt;/p&gt;

&lt;p&gt;Library Java Swing dibangun diatas Java Abstrack Widget Toolkit (AWT), toolkit GUI yang lebih lama dan bergantung pada platform.&lt;/p&gt;

&lt;p&gt;Kamu dapat menggunakan komponen pemrogramman GUI Java sederhana seperti button , textbox , dll.,dari perpustakaan dan nggak perlu lagi kamu membuat komponen dari awal&lt;/p&gt;

&lt;p&gt;Dalam Tutorial yang admin berikan ini kamu akan mempelajari dasar dasar Java GUI seperti&lt;/p&gt;

&lt;p&gt;Diagram Hirarki Java Swing Class&lt;/p&gt;

&lt;p&gt;Semua komponen di Java Swing adalah JComponent yang dapat ditambahkan ke container class.&lt;/p&gt;

&lt;p&gt;Apa itu Container Class ?&lt;/p&gt;

&lt;p&gt;Container class adalah kelas yang dapat memiliki komponen lain di dalamnya . Jadi untuk membuat Java Swing GUI, kita membutuhkan setidaknya satu objek container. Ada 3 jenis container Java Swing.&lt;/p&gt;

&lt;p&gt;1 . Panel : Panel merupakan wadah murni dan bukan jendela itu sendiri. Tujuannya yaitu untuk mengatur komponen ke jendela.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Bingkai atau Frame : Ini adalah jendela yang berfungsi penuh dengan judul dan ikonnya.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dialog : Ini juga dapat dianggap seperti jendela pop up yang muncul ketika sebuah pesan harus ditampilkan &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Apa itu GUI di Java?&lt;/p&gt;

&lt;p&gt;GUI (Graphical User Interface) di Java adalah pembangun pengalaman visual yang mudah digunakan untuk aplikasi Java. Hal ini terutama terbuat dari komponen grafis seperti tombol, label, jendela, dll di mana pengguna dapat berinteraksi dengan aplikasi. GUI memainkan peran penting untuk membangun antarmuka yang mudah untuk aplikasi Java. &lt;/p&gt;

&lt;p&gt;Cara Membuat GUI di Java dengan Contoh Dibawah&lt;/p&gt;

&lt;p&gt;Sekarang di Tutorial Java GUI ini, mari kita pahami cara membuat GUI di Java dengan contoh Swings in Java.&lt;/p&gt;

&lt;p&gt;Langkah 1) Salin kode ke editor&lt;/p&gt;

&lt;p&gt;Pada langkah pertama Salin kode berikut ke dalam editor. &lt;/p&gt;

&lt;p&gt;=========================================&lt;/p&gt;

&lt;p&gt;import javax.swing.*;&lt;/p&gt;

&lt;p&gt;class gui{&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public static void main(String args[]){

   JFrame frame = new JFrame("My First GUI");

   frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

   frame.setSize(300,300);

   JButton button = new JButton("Press");

   frame.getContentPane().add(button); // Adds Button to content pane of frame

   frame.setVisible(true);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Link tidak bisa dicopas ? Klik disini&lt;/p&gt;

&lt;p&gt;=========================================&lt;/p&gt;

&lt;p&gt;Langkah 2) Run kode&lt;/p&gt;

&lt;p&gt;Langkah selanjutnya, Simpan, Compile, dan Run kodenya&lt;/p&gt;

&lt;p&gt;Langkah 3) Salin kode berikut ke dalam editor&lt;/p&gt;

&lt;p&gt;Sekarang mari Tambahkan Tombol ke bingkai kita. Salin kode berikut ke editor dari Contoh UI Java yang diberikan &lt;/p&gt;

&lt;p&gt;=========================================&lt;/p&gt;

&lt;p&gt;import javax.swing.*;&lt;/p&gt;

&lt;p&gt;class gui{&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  public static void main(String args[]){

    JFrame frame = new JFrame("My First GUI");

    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    frame.setSize(300,300);

   JButton button1 = new JButton("Press");

   frame.getContentPane().add(button1);

   frame.setVisible(true);

 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Link tidak bisa dicopas ? Klik disini&lt;/p&gt;

&lt;p&gt;Langkah 4) Jalankan kode&lt;/p&gt;

&lt;p&gt;Selanjutnya, Jalankan kodenya. Anda akan melihat sebuah tombol yang besar. &lt;/p&gt;

&lt;p&gt;Langkah 5) Tambahkan dua buah button&lt;/p&gt;

&lt;p&gt;Bagaimana cara menambahkan dua buah button? Salin kode berikut ke dalam editor. &lt;/p&gt;

&lt;p&gt;import javax.swing.*;&lt;/p&gt;

&lt;p&gt;class gui{&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  public static void main(String args[]){

       JFrame frame = new JFrame("My First GUI");

       frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

       frame.setSize(300,300);

      JButton button1 = new JButton("Button 1");

      JButton button2 = new JButton("Button 2");

      frame.getContentPane().add(button1);

      frame.getContentPane().add(button2);

      frame.setVisible(true);

 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Link tidak bisa dicopas ? Klik disini&lt;/p&gt;

&lt;p&gt;Langkah 6) Simpan &amp;amp; Jalankan program&lt;/p&gt;

&lt;p&gt;Selanjutnya, Simpan, Kompilasi, dan Jalankan program.&lt;/p&gt;

&lt;p&gt;Langkah 7) Periksa output&lt;/p&gt;

&lt;p&gt;Output tak terduga =? Tombol saling tumpang tindih. &lt;/p&gt;

&lt;p&gt;Manajer Tata Letak Java&lt;/p&gt;

&lt;p&gt;Manajer Layout digunakan untuk menata (atau mengatur) komponen Java GUI di dalam wadah.&lt;/p&gt;

&lt;p&gt;Java BorderLayout / Tata Letak Perbatasan&lt;/p&gt;

&lt;p&gt;A BorderLayoutmenempatkan komponen di hingga lima area: atas, bawah, kiri, kanan, dan tengah. Ini adalah manajer tata letak default untuk setiap Java JFrame &lt;/p&gt;

&lt;p&gt;Java FlowLayout&lt;/p&gt;

&lt;p&gt;FlowLayoutadalah pengelola tata letak default untuk setiap JPanel. Ini hanya menjabarkan komponen dalam satu baris satu demi satu. &lt;br&gt;
Java GridBagLayout&lt;/p&gt;

&lt;p&gt;Ini adalah tata letak yang lebih canggih dari semua tata letak. Ini menyelaraskan komponen dengan menempatkannya di dalam kotak sel, memungkinkan komponen menjangkau lebih dari satu cell. &lt;br&gt;
Langkah 8) Buat chat frame&lt;br&gt;
Bagaimana dengan membuat chat frame seperti di bawah ini?&lt;br&gt;
Silahkan Copas Code dibawah .&lt;/p&gt;

&lt;p&gt;//Usually you will require both swing and awt packages&lt;/p&gt;

&lt;p&gt;// even if you are working with just swings.&lt;/p&gt;

&lt;p&gt;import javax.swing.*;&lt;/p&gt;

&lt;p&gt;import java.awt.*;&lt;/p&gt;

&lt;p&gt;class gui {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public static void main(String args[]) {


    //Creating the Frame

    JFrame frame = new JFrame("Chat Frame");

    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    frame.setSize(400, 400);


    //Creating the MenuBar and adding components

    JMenuBar mb = new JMenuBar();

    JMenu m1 = new JMenu("FILE");

    JMenu m2 = new JMenu("Help");

    mb.add(m1);

    mb.add(m2);

    JMenuItem m11 = new JMenuItem("Open");

    JMenuItem m22 = new JMenuItem("Save as");

    m1.add(m11);

    m1.add(m22);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Baca Juga : Cara Mendapatkan Kode Redeem Minecraft Java Edition Gratis 2021&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    //Creating the panel at bottom and adding components

    JPanel panel = new JPanel(); // the panel is not visible in output

    JLabel label = new JLabel("Enter Text");

    JTextField tf = new JTextField(10); // accepts upto 10 characters

    JButton send = new JButton("Send");

    JButton reset = new JButton("Reset");

    panel.add(label); // Components Added using Flow Layout

    panel.add(tf);

    panel.add(send);

    panel.add(reset);


    // Text Area at the Center

    JTextArea ta = new JTextArea();


    //Adding Components to the frame.

    frame.getContentPane().add(BorderLayout.SOUTH, panel);

    frame.getContentPane().add(BorderLayout.NORTH, mb);

    frame.getContentPane().add(BorderLayout.CENTER, ta);

    frame.setVisible(true);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Link tidak bisa dicopas ? Klik disini&lt;/p&gt;

&lt;p&gt;Jangan lupa baca artikel terus dari the newbie blogbebasapaaja agar kamu tidak ketinggalan artikel menarik lainnya.&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
