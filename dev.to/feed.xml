<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Clean Architecture on Frontend</title>
      <author>Alex</author>
      <pubDate>Wed, 01 Sep 2021 16:40:11 +0000</pubDate>
      <link>https://dev.to/bespoyasov/clean-architecture-on-frontend-4311</link>
      <guid>https://dev.to/bespoyasov/clean-architecture-on-frontend-4311</guid>
      <description>&lt;p&gt;Not very long ago I gave a talk about the clean architecture on frontend. In this post I'm outlining that talk and expanding it a bit.&lt;/p&gt;

&lt;p&gt;I'll put links here to all sorts of useful stuff that will come in handy as you read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bespoyasov/frontend-clean-architecture"&gt;The source code for the application we're going to design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bespoyasov.ru/showcase/frontend-clean-architecture/en/"&gt;Sample of a working application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-plan"&gt;
  &lt;/a&gt;
  What's the Plan
&lt;/h2&gt;

&lt;p&gt;First, we'll talk about what the clean architecture is in general and get familiar with such concepts as domain, use case and application layers. Then we'll discuss how this applies to the frontend and whether it's worth it at all.&lt;/p&gt;

&lt;p&gt;Next, we'll design the frontend for a cookie store following the rules of the clean architecture. This store will use React as its UI framework. Then we'll implement one of the use cases from scratch to see if it's usable.&lt;/p&gt;

&lt;p&gt;There will be a little TypeScript in the code, but only to show how to use types and interfaces to describe entities. Everything we'll look at today can be used without TypeScript, except the code won't be as expressive.&lt;/p&gt;

&lt;p&gt;We will hardly talk about OOP today, so this post should not cause any severe allergies. We will only mention OOP once at the end, but it won't stop us from designing an application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architecture-and-design"&gt;
  &lt;/a&gt;
  Architecture and Design
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Designing is fundamentally about taking things apart... in such a way that they can be put back together. ...Separating things into things that can be composed that's what design is.&lt;br&gt;&lt;br&gt;
— Rich Hickey. &lt;a href="https://www.infoq.com/presentations/Design-Composition-Performance/"&gt;Design Composition and Performance&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;System design, says the quote in the epigraph, is the system separation so that it can be reassembled later. And most importantly, be assembled easily, without too much work.&lt;/p&gt;

&lt;p&gt;I agree. But I consider another goal of an architecture to be the extensibility of the system. The demands on the program are constantly changing. We want the program to be easy to update and modify to meet new requirements. The clean architecture can help achieve this goal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-clean-architecture"&gt;
  &lt;/a&gt;
  The Clean Architecture
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;The clean architecture&lt;/a&gt; is a way of separating responsibilities and parts of functionality according to their proximity to the application domain.&lt;/p&gt;

&lt;p&gt;By &lt;a href="https://en.wikipedia.org/wiki/Domain_knowledge"&gt;the domain&lt;/a&gt;, we mean the part of the real world that we model with a program. This is the data transformations that reflect transformations in the real world. For example, if we updated the name of a product, replacing the old name with the new one is a domain transformation.&lt;/p&gt;

&lt;p&gt;The Clean Architecture is often referred to as a three-layer architecture, because the functionality in it is divided into layers. The original post about &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;The Clean Architecture&lt;/a&gt; provides a diagram with the layers highlighted:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UMYkExQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UMYkExQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg" alt="Layer diagram: the domain is in the center, the application layer around it, and the adapters layer on the outside"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Image credits: &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;cleancoder.com&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#domain-layer"&gt;
  &lt;/a&gt;
  Domain Layer
&lt;/h3&gt;

&lt;p&gt;At the center is &lt;a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/#domain-layer"&gt;the domain layer&lt;/a&gt;. It is the entities and data that describe the subject area of the application, as well as the code to transform that data. The domain is the core that distinguishes one application from another.&lt;/p&gt;

&lt;p&gt;You can think of the domain as something that won't change if we move from React to Angular, or if we change some use case. In the case of the store, these are products, orders, users, cart, and functions to update their data.&lt;/p&gt;

&lt;p&gt;The data structure of domain entities and the essence of their transformations are independent from the outer world. External events &lt;em&gt;trigger domain transformations&lt;/em&gt;, but &lt;em&gt;do not determine&lt;/em&gt; how they will occur.&lt;/p&gt;

&lt;p&gt;The function of adding an item to cart doesn't care how exactly the item was added: by the user himself through the “Buy” button or automatically with a promo code. It will in both cases accept the item and return an updated cart with the added item.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application-layer"&gt;
  &lt;/a&gt;
  Application Layer
&lt;/h3&gt;

&lt;p&gt;Around the domain is &lt;a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/#application-layer"&gt;the application layer&lt;/a&gt;. This layer describes &lt;a href="https://en.wikipedia.org/wiki/Use_case"&gt;use cases&lt;/a&gt;, i.e. user scenarios. They are responsible for what happens after some event occurs.&lt;/p&gt;

&lt;p&gt;For example, the “Add to cart” scenario is a use case. It describes the actions that are should be taken after the button is clicked. It's the kind of “orchestrator” that says:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;go to the server, send a request;&lt;/li&gt;
&lt;li&gt;now perform this a domain transformation;&lt;/li&gt;
&lt;li&gt;now redraw the UI using the response data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, in the application layer theree are &lt;a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/#ports"&gt;ports&lt;/a&gt;—the specifications of how &lt;em&gt;our application wants&lt;/em&gt; the outside world to communicate with it. Usually a port is an &lt;a href="https://en.wikipedia.org/wiki/Interface_(computing)#Software_interfaces"&gt;interface&lt;/a&gt;, a behavior contract.&lt;/p&gt;

&lt;p&gt;Ports serve as a “buffer zone” between our application's wishes and the reality. Input Ports tell us how the application &lt;em&gt;wants&lt;/em&gt; to be contacted by the outside world. Output Ports say how the application &lt;em&gt;is going to&lt;/em&gt; communicate with the outside world to make it ready.&lt;/p&gt;

&lt;p&gt;We will look at ports in more detail later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adapters-layer"&gt;
  &lt;/a&gt;
  Adapters Layer
&lt;/h3&gt;

&lt;p&gt;The outermost layer contains the &lt;a href="https://herbertograca.com/2017/09/14/ports-adapters-architecture/"&gt;adapters&lt;/a&gt; to external services. Adapters are needed to turn incompatible APIs of external services into those compatible with our application's wishes.&lt;/p&gt;

&lt;p&gt;Adapters are a great way to lower the &lt;a href="https://en.wikipedia.org/wiki/Coupling_(computer_programming)"&gt;coupling&lt;/a&gt; between our code and the code of third-party services. Low coupling reduces needs to change one module when others are changed.&lt;/p&gt;

&lt;p&gt;Adapters are often divided into:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;driving—which &lt;em&gt;send signals to&lt;/em&gt; our application;&lt;/li&gt;
&lt;li&gt;driven—which &lt;em&gt;receive the signals from&lt;/em&gt; our application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;The user&lt;/em&gt; interacts most often with driving adapters. For example, the UI framework's handling of a button click is the work of a driving adapter. It works with the browser API (basically a third-party service) and converts the event into a signal that our application can understand.&lt;/p&gt;

&lt;p&gt;Driven adapters interact with the &lt;em&gt;infrastructure&lt;/em&gt;. In the frontend, most of the infrastructure is the backend server, but sometimes we may interact with some other services directly, such as a search engine.&lt;/p&gt;

&lt;p&gt;Note that the farther we are from the center, the more “service-oriented” the code functionality is, the &lt;em&gt;farther it is from the domain knowledge&lt;/em&gt; of our application. This will be important later on, when we decide which layer any module should belong to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dependency-rule"&gt;
  &lt;/a&gt;
  Dependency Rule
&lt;/h3&gt;

&lt;p&gt;The three-layer architecture has a dependency rule: &lt;em&gt;only the outer layers can depend on the inner layers&lt;/em&gt;. This means that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the domain must be independent;&lt;/li&gt;
&lt;li&gt;the application layer can depend on the domain;&lt;/li&gt;
&lt;li&gt;the outer layers can depend on anything.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NyuIr5mN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://herbertograca.files.wordpress.com/2018/11/080-explicit-architecture-svg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NyuIr5mN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://herbertograca.files.wordpress.com/2018/11/080-explicit-architecture-svg.png" alt="Only the outer layers can depend on the inner layers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Image credits: &lt;a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/"&gt;herbertograca.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes this rule can be violated, although it is better not to abuse it. For example, it is sometimes convenient to use some “library-like” code in a domain, even though there should be no dependencies. We'll look at an example of this when we get to the source code.&lt;/p&gt;

&lt;p&gt;An uncontrolled direction of dependencies can lead to complicated and confusing code. For example, breaking a dependency rule can lead to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cyclic dependencies, where module A depends on B, B depends on C, and C depends on A.&lt;/li&gt;
&lt;li&gt;Poor testability, where you have to simulate the whole system to test a small part.&lt;/li&gt;
&lt;li&gt;Too high coupling, and as a consequence, brittle interaction between modules.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-clean-architecture"&gt;
  &lt;/a&gt;
  Advantages of Clean Architecture
&lt;/h2&gt;

&lt;p&gt;Now let's talk about what this separation of code gives us. It has several advantages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#separate-domain"&gt;
  &lt;/a&gt;
  Separate domain
&lt;/h3&gt;

&lt;p&gt;All the main application functionality is &lt;em&gt;isolated and collected&lt;/em&gt; in one place—in the domain.&lt;/p&gt;

&lt;p&gt;Functionality in the domain is independent, which means that it is easier to test. The less dependencies the module has, the less infrastructure is needed for testing, the less mocks and stubs are needed.&lt;/p&gt;

&lt;p&gt;A stand-alone domain is also easier to test against business expectations. This helps new developers to grasp on what the application should do. In addition, a stand-alone domain helps look for errors and inaccuracies in the “translation” from the business language to the programming language more quickly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#independent-use-cases"&gt;
  &lt;/a&gt;
  Independent Use Cases
&lt;/h3&gt;

&lt;p&gt;Application scenarios, use cases are described separately. They dictate what third-party services we will need. We &lt;em&gt;adapt the outside world&lt;/em&gt; to our needs, not the other way around. This gives us more freedom to choose third-party services. For example, we can quickly change the payment system if the current one starts charging too much.&lt;/p&gt;

&lt;p&gt;The use case code also becomes flat, testable and extensible. We will see this in an example later on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#replaceable-thirdparty-services"&gt;
  &lt;/a&gt;
  Replaceable Third-Party Services
&lt;/h3&gt;

&lt;p&gt;External services become replaceable because of adapters. As long as we don't change the interface, it doesn't matter which external service implements the interface.&lt;/p&gt;

&lt;p&gt;This way, we create a barrier to change propagation: changes in someone else's code do not directly affect our own. Adapters also &lt;a href="https://www.amazon.com/Patterns-Tolerant-Software-Robert-Hanmer/dp/0470319798"&gt;limit the propagation of bugs&lt;/a&gt; in the application runtime.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#costs-of-clean-architecture"&gt;
  &lt;/a&gt;
  Costs of Clean Architecture
&lt;/h2&gt;

&lt;p&gt;Architecture is first of all a tool. Like any tool, the clean architecture has its costs besides its benefits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#takes-time"&gt;
  &lt;/a&gt;
  Takes Time
&lt;/h3&gt;

&lt;p&gt;The main cost is time. It is required not only for design, but also for implementation, because it is always easier to call a third-party service directly than to write adapters.&lt;/p&gt;

&lt;p&gt;It is also difficult to think through the interaction of all the modules of the system in advance, because we may not know all the requirements and constraints beforehand. When designing, we need to keep in mind how the system can change, and leave room for expansion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sometimes-overly-verbose"&gt;
  &lt;/a&gt;
  Sometimes Overly Verbose
&lt;/h3&gt;

&lt;p&gt;In general, a canonical implementation of the clean architecture is not always convenient, and sometimes even harmful. If the project is small, a full implementation will be an overkill that will increase the entry threshold for newcomers.&lt;/p&gt;

&lt;p&gt;You may need to make design tradeoffs to stay within budget or deadline. I'll show you by example exactly what I mean by such tradeoffs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-make-onboarding-more-difficult"&gt;
  &lt;/a&gt;
  Can Make Onboarding More Difficult
&lt;/h2&gt;

&lt;p&gt;Full implementation of the clean architecture can make the onboarding more difficult because any tool requires the knowledge on how to use it.&lt;/p&gt;

&lt;p&gt;If you over-engineer at the beginning of a project, it will be harder to onboard new developers later. You have to keep this in mind and keep your code simple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-increase-the-amount-of-code"&gt;
  &lt;/a&gt;
  Can Increase the Amount of Code
&lt;/h2&gt;

&lt;p&gt;A problem specific for frontend is that the clean architecture can increase the amount of code in the final bundle. The more code we give to the browser, the more it has to download, parse and interpret.&lt;/p&gt;

&lt;p&gt;The amount of code will have to be watched and decisions will have to be made about where to cut corners:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;maybe describe the use case a little simpler;&lt;/li&gt;
&lt;li&gt;maybe access the domain functionality directly from the adapter, bypassing the use case;&lt;/li&gt;
&lt;li&gt;maybe we'll have to tweak the code splitting, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-reduce-costs"&gt;
  &lt;/a&gt;
  How to reduce costs
&lt;/h2&gt;

&lt;p&gt;You can reduce the amount of time and code by cutting corners and sacrificing the “cleanliness” of the architecture. I'm generally not a fan of radical approaches: if it's more pragmatic (e.g. benefits will be higher than potential costs) to break a rule, I'll break it.&lt;/p&gt;

&lt;p&gt;So, you can balk at some aspects of the clean architecture for a while with no problem at all. The &lt;em&gt;minimum required&lt;/em&gt; amount of resources, however, that are definitely worth devoting to are two things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extract-domain"&gt;
  &lt;/a&gt;
  Extract Domain
&lt;/h3&gt;

&lt;p&gt;The extracted domain helps to understand &lt;em&gt;what&lt;/em&gt; we are designing in general and how it should work. The extracted domain makes it easier for new developers to understand the application, its entities and relationships between them.&lt;/p&gt;

&lt;p&gt;Even if we skip the other layers, it still will be easier to work and refactor with the extracted domain which is not spread over the code base. Other layers can be added as needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#obey-dependency-rule"&gt;
  &lt;/a&gt;
  Obey Dependency Rule
&lt;/h3&gt;

&lt;p&gt;The second rule not to be discarded is the rule of dependencies, or rather their &lt;em&gt;direction&lt;/em&gt;. External services must adapt to our need and never otherwise.&lt;/p&gt;

&lt;p&gt;If you feel that you are "fine-tuning" your code so that it can call the search API, something is wrong. Better write an adapter before the problem spreads.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#designing-the-application"&gt;
  &lt;/a&gt;
  Designing the application
&lt;/h2&gt;

&lt;p&gt;Now that we've talked about theory, we can get down to practice. Let's design the architecture of a cookie store.&lt;/p&gt;

&lt;p&gt;The store will sell different kinds of cookies, which may have different ingredients. Users will choose cookies and order them, and pay for the orders in a third-party payment service.&lt;/p&gt;

&lt;p&gt;There will be a showcase of cookies that we can buy on the home page. We will only be able to buy cookies if we are authenticated. The login button will take us to a login page where we can log in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oSRac7mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sscc2fmramfzrmydh613.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oSRac7mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sscc2fmramfzrmydh613.png" alt="Store main page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a successful login we will be able to put some cookies in the cart.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqmD3Mt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnnkdxvi0r19a98wvibu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqmD3Mt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnnkdxvi0r19a98wvibu.png" alt="Cart with cookies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we've put the cookies in the cart, we can place the order. After payment, we get a new order in the list and a cleared shopping cart.&lt;/p&gt;

&lt;p&gt;We'll implement the checkout use case. You can find the rest use cases in &lt;a href="https://github.com/bespoyasov/frontend-clean-architecture/tree/master/src/application"&gt;the source code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First we'll define what kind of entities, use cases and functionality in the broad sense we'll have at all. Then let's decide which layer they should belong to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#designing-domain"&gt;
  &lt;/a&gt;
  Designing Domain
&lt;/h3&gt;

&lt;p&gt;The most important thing in an application is the domain. It is where the main entities of the application and their data transformations are. I suggest that you start with the domain in order to accurately represent the domain knowledge of the app in your code.&lt;/p&gt;

&lt;p&gt;The store domain may include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the data types of each entity: user, cookie, cart, and order;&lt;/li&gt;
&lt;li&gt;the factories for creating each entity, or classes if you write in OOP;&lt;/li&gt;
&lt;li&gt;and transformation functions for that data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The transformation functions in the domain should depend only on the rules of the domain and nothing else. Such functions would be, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a function for calculating the total cost;&lt;/li&gt;
&lt;li&gt;user's taste preference detection&lt;/li&gt;
&lt;li&gt;determining whether an item is in the shopping cart, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bi_jsyaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w80eqwx56gkysu8xvmwx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bi_jsyaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w80eqwx56gkysu8xvmwx.png" alt="Domain entities diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#designing-application-layer"&gt;
  &lt;/a&gt;
  Designing Application Layer
&lt;/h3&gt;

&lt;p&gt;The application layer contains the use cases. A use case always has an actor, an action, and a result.&lt;/p&gt;

&lt;p&gt;In the store, we can distinguish:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A product purchase scenario;&lt;/li&gt;
&lt;li&gt;payment, calling third-party payment systems;&lt;/li&gt;
&lt;li&gt;interaction with products and orders: updating, browsing;&lt;/li&gt;
&lt;li&gt;access to pages depending on roles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use cases are usually described in terms of the subject area. For example, the “checkout” scenario actually consists of several steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;retrieve items from the shopping cart and create a new order;&lt;/li&gt;
&lt;li&gt;pay for the order;&lt;/li&gt;
&lt;li&gt;notify the user if the payment fails;&lt;/li&gt;
&lt;li&gt;clear the cart and show the order.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The use case function will be the code that describes this scenario.&lt;/p&gt;

&lt;p&gt;Also, in the application layer there are ports—interfaces for communicating with the outside world.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t19sgljV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zv130gzznwblz736zpv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t19sgljV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zv130gzznwblz736zpv.png" alt="Use cases and ports diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#designing-adapters-layer"&gt;
  &lt;/a&gt;
  Designing Adapters Layer
&lt;/h3&gt;

&lt;p&gt;In the adapters layer, we declare adapters to external services. Adapters make incompatible APIs of third-party services compatible to our system.&lt;/p&gt;

&lt;p&gt;On the frontend, adapters are usually the UI framework and the API server request module. In our case we will use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UI-framework;&lt;/li&gt;
&lt;li&gt;API request module;&lt;/li&gt;
&lt;li&gt;Adapter for local storage;&lt;/li&gt;
&lt;li&gt;Adapters and converters of API answers to the application layer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C20i-QC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6dnsn2z05yulf4t5qls.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C20i-QC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6dnsn2z05yulf4t5qls.png" alt="Adapters diagram with splitting by driving and driven adapters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that the more functionality is “service-like”, the farther away it is from the center of the diagram.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-mvc-analogy"&gt;
  &lt;/a&gt;
  Using MVC Analogy
&lt;/h3&gt;

&lt;p&gt;Sometimes it's hard to know which layer some data belongs to. A small (and incomplete!) analogy with &lt;a href="https://en.wikipedia.org/wiki/Model-view-controller"&gt;MVC&lt;/a&gt; may help here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;models are usually domain entities,&lt;/li&gt;
&lt;li&gt;controllers are domain transformations and application layer,&lt;/li&gt;
&lt;li&gt;view is driving adapters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The concepts are different in detail but quite similar, and this analogy can be used to define domain and application code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#into-details-domain"&gt;
  &lt;/a&gt;
  Into Details: Domain
&lt;/h2&gt;

&lt;p&gt;Once we've determined what entities we'll need, we can start defining how they behave.&lt;/p&gt;

&lt;p&gt;I'll show you the code structure in &lt;a href="https://github.com/bespoyasov/frontend-clean-architecture/"&gt;project&lt;/a&gt; right away. For clarity, I divide the code into folders-layers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/
|_domain/
  |_user.ts
  |_product.ts
  |_order.ts
  |_cart.ts
|_application/
  |_addToCart.ts
  |_authenticate.ts
  |_orderProducts.ts
  |_ports.ts
|_services/
  |_authAdapter.ts
  |_notificationAdapter.ts
  |_paymentAdapter.ts
  |_storageAdapter.ts
  |_api.ts
  |_store.tsx
|_lib/
|_ui/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The domain is in the &lt;code&gt;domain/&lt;/code&gt; directory, the application layer is in &lt;code&gt;application/&lt;/code&gt;, and the adapters are in &lt;code&gt;services/&lt;/code&gt;. We will discuss alternatives to this code structure at the end.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-domain-entities"&gt;
  &lt;/a&gt;
  Creating Domain Entities
&lt;/h3&gt;

&lt;p&gt;We will have 4 modules in the domain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;product;&lt;/li&gt;
&lt;li&gt;user;&lt;/li&gt;
&lt;li&gt;order;&lt;/li&gt;
&lt;li&gt;shopping cart.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main actor is the user. We will store data about the user in the storage during the session. We want to type this data, so we will create a domain user type.&lt;/p&gt;

&lt;p&gt;The user type will contain ID, name, mail and lists of preferences and allergies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// domain/user.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UserName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UniqueId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Ingredient&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;allergies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Ingredient&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Users will put cookies in the cart. Let's add types for the cart and the product. The item will contain ID, name, price in pennies and list of ingredients.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// domain/product.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ProductTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UniqueId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ProductTitle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PriceCents&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;toppings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Ingredient&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the shopping cart, we will only keep a list of the products that the user has put in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// domain/cart.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a successful payment an new order is created. Let's add an order entity type.&lt;/p&gt;

&lt;p&gt;The order type will contain the user ID, the list of ordered products, the date and time of creation, the status and the total price for the entire order.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// domain/order.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;OrderStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delivery&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UniqueId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DateTimeString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;OrderStatus&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PriceCents&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#checking-relationship-between-entities"&gt;
  &lt;/a&gt;
  Checking Relationship Between Entities
&lt;/h3&gt;

&lt;p&gt;The benefit of designing entity types in such a way is that we can already check whether their relationship diagram corresponds to reality:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QxSYy5Zr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu4mgkgalvl20m2udcr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QxSYy5Zr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu4mgkgalvl20m2udcr7.png" alt="Entity Relationship Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see and check:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if the main actor is really a user,&lt;/li&gt;
&lt;li&gt;if there is enough information in the order,&lt;/li&gt;
&lt;li&gt;if some entity needs to be extended,&lt;/li&gt;
&lt;li&gt;if there will be problems with extensibility in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, already at this stage, types will help highlight errors with the compatibility of entities with each other and the direction of signals between them.&lt;/p&gt;

&lt;p&gt;If everything meets our expectations, we can start designing domain transformations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-data-transformations"&gt;
  &lt;/a&gt;
  Creating Data Transformations
&lt;/h3&gt;

&lt;p&gt;All sorts of things will happen to the data whose types we've just designed. We will be adding items to the cart, clearing it, updating items and user names, and so on. We will create separate functions for all these transformations.&lt;/p&gt;

&lt;p&gt;For example, to determine if a user is allergic to some ingredient or preference, we can write functions &lt;code&gt;hasAllergy&lt;/code&gt; and &lt;code&gt;hasPreference&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// domain/user.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hasAllergy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ingredient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Ingredient&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allergies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ingredient&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hasPreference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ingredient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Ingredient&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ingredient&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The functions &lt;code&gt;addProduct&lt;/code&gt; and &lt;code&gt;contains&lt;/code&gt; are used to add items to cart and check if an item is in cart:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// domain/cart.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to calculate the total price of the list of products—for this we will write the function &lt;code&gt;totalPrice&lt;/code&gt;. If required, we can add to this function to account for various conditions, such as promo codes or seasonal discounts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// domain/product.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;PriceCents&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To allow users to create orders, we will add the function &lt;code&gt;createOrder&lt;/code&gt;. It will return a new order associated with a specified user and a list of transferred products.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// domain/order.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;Order&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that in every function we build the API so that &lt;em&gt;we&lt;/em&gt; can comfortably transform the data. We take arguments and give the result as we want.&lt;/p&gt;

&lt;p&gt;At the design stage, there are no external constraints yet. This allows us to reflect data transformations as close to the subject domain as possible. And the closer the transformations are to reality, the easier it will be to check their work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#detailed-design-shared-kernel"&gt;
  &lt;/a&gt;
  Detailed design: Shared Kernel
&lt;/h2&gt;

&lt;p&gt;You may have noticed some of the types we used when describing domain types. For example, &lt;code&gt;Email&lt;/code&gt;, &lt;code&gt;UniqueId&lt;/code&gt; or &lt;code&gt;DateTimeString&lt;/code&gt;. These are &lt;a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-aliases"&gt;type-alias&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// shared-kernel.d.ts&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UniqueId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;DateTimeString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;PriceCents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I usually use type-alias to get rid of &lt;a href="https://refactoring.guru/smells/primitive-obsession"&gt;primitive obsession&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I use &lt;code&gt;DateTimeString&lt;/code&gt; instead of just &lt;code&gt;string&lt;/code&gt;, to make it clearer what kind of string is used. The closer the type is to the subject area, the easier it will be to deal with errors when they occur.&lt;/p&gt;

&lt;p&gt;The specified types are in the file &lt;code&gt;shared-kernel.d.ts&lt;/code&gt;. &lt;a href="http://ddd.fed.wiki.org/view/welcome-visitors/view/domain-driven-design/view/shared-kernel"&gt;&lt;em&gt;Shared kernel&lt;/em&gt;&lt;/a&gt; is the code and the data, dependency on which doesn't increase coupling between modules. More about this concept you can find in &lt;a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/"&gt;"DDD, Hexagonal, Onion, Clean, CQRS, ...How I put it all together"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In practice, the shared kernel can be explained like this. We use TypeScript, we use its standard type library, but we don't consider them as &lt;em&gt;dependencies&lt;/em&gt;. This is because the modules that use them may not know anything about each other and remain decoupled.&lt;/p&gt;

&lt;p&gt;Not all code can be classified as shared kernel. The main and most important limitation is that such code must be compatible with &lt;em&gt;any part of the system&lt;/em&gt;. If a part of the application is written in TypeScript and another part in another language, the shared kernel may contain only code that can be used in both parts. For example, entity specifications in JSON format are fine, TypeScript helpers are not.&lt;/p&gt;

&lt;p&gt;In our case, the entire application is written in TypeScript, so type-alias over built-in types can also be classified as shared kernel. Such globally available types do not increase coupling between modules and can be used in any part of the application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#into-detail-application-layer"&gt;
  &lt;/a&gt;
  Into Detail: Application Layer
&lt;/h2&gt;

&lt;p&gt;Now that we have the domain figured out, we can move on to the application layer. This layer contains &lt;a href="https://en.wikipedia.org/wiki/Use_case"&gt;use cases&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the code we describe the technical details of scenarios. A use case is a description of what should happen to the data after adding an item to cart or proceeding to checkout.&lt;/p&gt;

&lt;p&gt;Use cases involve interaction with the outer world, and thus, the use of external services. Interactions with the outside world are side-effects. We know that it is easier to work with and debug functions and systems without side-effects. And most of our domain functions are already written as pure functions.&lt;/p&gt;

&lt;p&gt;To combine clean transformations and interaction with the impure world, we can use the application layer as an impure context.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#impure-context-for-pure-transformations"&gt;
  &lt;/a&gt;
  Impure Context For Pure Transformations
&lt;/h3&gt;

&lt;p&gt;An impure context for pure transformations is a code organization in which:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we first perform a side-effect to get some data;&lt;/li&gt;
&lt;li&gt;then we do a pure transformation on that data;&lt;/li&gt;
&lt;li&gt;and then do a side-effect again to store or pass the result.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the “Put item in cart” use case, this would look like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first, the handler would retrieve the cart state from the store;&lt;/li&gt;
&lt;li&gt;then it would call the cart update function, passing the item to be added;&lt;/li&gt;
&lt;li&gt;and then it would save the updated cart in the storage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The whole process is a “sandwich”: side-effect, pure function, side-effect. The main logic is reflected in data transformation, and all communication with the world is isolated in an imperative shell.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--brLibNv4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e260ezvlhx39blxjs7hs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--brLibNv4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e260ezvlhx39blxjs7hs.png" alt="Functional architecture: side-effect, pure function, side-effect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Impure context is sometimes called a functional core in an imperative shell. Mark Seemann &lt;a href="https://blog.ploeh.dk/2020/03/02/impureim-sandwich/"&gt;wrote about this in his blog&lt;/a&gt;. This is the approach we will use when writing use case functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#designing-use-case"&gt;
  &lt;/a&gt;
  Designing Use Case
&lt;/h3&gt;

&lt;p&gt;We will select and design the checkout use case. It is the most representative one because it is asynchronous and interacts with a lot of third-party services. The rest of the scenarios and the code of the whole application you can find on &lt;a href="https://github.com/bespoyasov/frontend-clean-architecture"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's think about what we want to achieve in this use case. The user has a cart with cookies, when the user clicks the checkout button:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we want to create a new order;&lt;/li&gt;
&lt;li&gt;pay for it in a third-party payment system;&lt;/li&gt;
&lt;li&gt;if the payment failed, notify the user about it;&lt;/li&gt;
&lt;li&gt;if it passed, save the order on the server;&lt;/li&gt;
&lt;li&gt;add the order to the local data store to show on the screen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In terms of API and function signature, we want to pass the user and the cart as arguments, and have the function do everything else by itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;OrderProducts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ideally, of course, the use case should not take two separate arguments, but a command that will encapsulate all the input data inside itself. But we don't want to bloat the amount of code, so we'll leave it that way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-application-layer-ports"&gt;
  &lt;/a&gt;
  Writing Application Layer Ports
&lt;/h3&gt;

&lt;p&gt;Let's take a closer look at the steps of the use case: the order creation itself is a domain function. Everything else is external services that we want to use.&lt;/p&gt;

&lt;p&gt;It's important to remember that it's the external services that have to adapt to our needs and not otherwise. So, in the application layer, we'll describe not only the use case itself, but also the interfaces to these external services—the ports.&lt;/p&gt;

&lt;p&gt;The ports should be, first of all, convenient for our application. If the API of external services isn't compatible with our needs, we'll write an adapter.&lt;/p&gt;

&lt;p&gt;Let's think of the services we will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a payment system;&lt;/li&gt;
&lt;li&gt;a service to notify users about events and errors;&lt;/li&gt;
&lt;li&gt;a service to save data to the local storage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0zP1wh__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2bqvflrk5np7js8f20g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0zP1wh__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2bqvflrk5np7js8f20g.png" alt="Service we're going to need"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that we are now talking about the &lt;em&gt;interfaces&lt;/em&gt; of these services, not their implementation. At this stage, it is important for us to describe the required behavior, because this is the behavior we will rely on in the application layer when describing the scenario.&lt;/p&gt;

&lt;p&gt;How exactly this behavior will be implemented is &lt;em&gt;not important&lt;/em&gt; yet. This allows us to postpone the decision about which external services to use until the very last moment—this makes the code &lt;a href="https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29"&gt;minimally coupled&lt;/a&gt;. We'll deal with the implementation later.&lt;/p&gt;

&lt;p&gt;Also note that we &lt;a href="https://en.wikipedia.org/wiki/Interface_segregation_principle"&gt;split the interfaces by features&lt;/a&gt;. Everything payment-related is in one module, storage-related in another. This way it will be easier to ensure that the functionality of different third party services are not mixed up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#payment-system-interface"&gt;
  &lt;/a&gt;
  Payment System Interface
&lt;/h3&gt;

&lt;p&gt;The cookie store is a sample application, so the payment system will be very simple. It will have a &lt;code&gt;tryPay&lt;/code&gt; method, which will accept the amount of money that needs to be paid, and in response will send a confirmation that everything is OK.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// application/ports.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;PaymentService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;tryPay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PriceCents&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We won't handle errors, because error handling is a topic for a whole separate big post 😃&lt;/p&gt;

&lt;p&gt;Yes, usually the payment is done on the server, but this is a sample-example, let's do everything on the client. We could easily communicate with our API instead of directly with the payment system. This change, by the way, would only affect this use case, the rest of the code would remain untouched.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notification-service-interface"&gt;
  &lt;/a&gt;
  Notification Service Interface
&lt;/h3&gt;

&lt;p&gt;If something goes wrong, we have to tell the user about it.&lt;/p&gt;

&lt;p&gt;The user can be notified in different ways. We can use the UI, we can send letters, we can user's phone to vibrate (please, don't).&lt;/p&gt;

&lt;p&gt;In general, the notification service would also be better to be abstract, so that now we don't have to think about the implementation.&lt;/p&gt;

&lt;p&gt;Let it take a message and &lt;em&gt;somehow&lt;/em&gt; notify the user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// application/ports.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;NotificationService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#local-storage-interface"&gt;
  &lt;/a&gt;
  Local Storage Interface
&lt;/h3&gt;

&lt;p&gt;We will save the new order in a local repository.&lt;/p&gt;

&lt;p&gt;This storage can be anything: Redux, MobX, whatever-floats-your-boat-js. The repository can be divided into micro-stores for different entities or be one big repository for all the application data. It's not important right now either, because these are implementation details.&lt;/p&gt;

&lt;p&gt;I like to divide the storage interfaces into separate ones for each entity. A separate interface for the user data store, a separate one for the shopping cart, a separate one for the order store:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// application/ports.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;OrdersStorageService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nx"&gt;updateOrders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example here I make only the order store interface, all the rest you can see in &lt;a href="https://github.com/bespoyasov/frontend-clean-architecture/blob/master/src/application/ports.ts#L5"&gt;source code&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-case-function"&gt;
  &lt;/a&gt;
  Use Case Function
&lt;/h3&gt;

&lt;p&gt;Let's see if we can build the use case using the created interfaces and the existing domain functionality. As we described earlier, the script will consist of the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;verify the data;&lt;/li&gt;
&lt;li&gt;create an order;&lt;/li&gt;
&lt;li&gt;pay for the order;&lt;/li&gt;
&lt;li&gt;notify about problems;&lt;/li&gt;
&lt;li&gt;save the result.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--If-NCkoq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jqr5xv8wr3mguci7ro9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--If-NCkoq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jqr5xv8wr3mguci7ro9.png" alt="All steps of the custom script in the diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, let's declare the stubs of the services we're going to use. TypeScript will swear that we haven't implemented the interfaces in the appropriate variables, but for now it doesn't matter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// application/orderProducts.ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PaymentService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NotificationService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;orderStorage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;OrdersStorageService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now use these stubs as if they were real services. We can access their fields, call their methods. This comes in handy when “translating” a use case from the business language to software language.&lt;/p&gt;

&lt;p&gt;Now, create a function called &lt;code&gt;orderProducts&lt;/code&gt;. Inside, the first thing we do is create a new order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// application/orderProducts.ts&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;orderProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we take advantage of the fact that the interface is a contract for behavior. This means that in the future the stubs will actually perform the actions we now expect:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// application/orderProducts.ts&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;orderProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Try to pay for the order;&lt;/span&gt;
  &lt;span class="c1"&gt;// Notify the user if something is wrong:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;payment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tryPay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;paid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oops! 🤷&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Save the result and clear the cart:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;orders&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;orderStorage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;orderStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateOrders&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="nx"&gt;cartStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emptyCart&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the use case does not call third-party services directly. It relies on the behavior described in the interfaces, so as long as the interface remains the same, we don't care which module implements it and how. This makes the modules replaceable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#into-detail-adapters-layer"&gt;
  &lt;/a&gt;
  Into Detail: Adapters Layer
&lt;/h2&gt;

&lt;p&gt;We have “translated” the use case into TypeScript. Now we have to check if the reality matches our needs.&lt;/p&gt;

&lt;p&gt;Usually it doesn't. So we tweak the outside world to suit our needs with &lt;a href="https://en.wikipedia.org/wiki/Adapter_pattern"&gt;adapters&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#binding-ui-and-usecase"&gt;
  &lt;/a&gt;
  Binding UI and Usecase
&lt;/h3&gt;

&lt;p&gt;The first adapter is a UI framework. It connects the native browser API with the application. In the case of the order creation, it is the “Checkout” button and the click handler, which will launch the use case function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ui/components/Buy.tsx&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Buy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Get access to the use case in the component:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;orderProducts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useOrderProducts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FormEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Call the use case function:&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;orderProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Checkout&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's provide the use case through a hook. We'll get all the services inside, and as a result, we'll return the use case function itself from the hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// application/orderProducts.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useOrderProducts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNotifier&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePayment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;orderStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useOrdersStorage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;orderProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Cookie&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// …&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;orderProducts&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use hooks as a “crooked dependency injection”. First we use the hooks &lt;code&gt;useNotifier&lt;/code&gt;, &lt;code&gt;usePayment&lt;/code&gt;, &lt;code&gt;useOrdersStorage&lt;/code&gt; to get the service instances, and then we use &lt;a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)"&gt;closure&lt;/a&gt; of the &lt;code&gt;useOrderProducts&lt;/code&gt; function to make them available inside the &lt;code&gt;orderProducts&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;It's important to note that the use case function is still separated from the rest of the code, which is important for testing. We'll pull it out completely and make it even more testable at the end of the article, when we do the review and refactoring.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#payment-service-implementation"&gt;
  &lt;/a&gt;
  Payment Service Implementation
&lt;/h3&gt;

&lt;p&gt;The use case uses the &lt;code&gt;PaymentService&lt;/code&gt; interface. Let's implement it.&lt;/p&gt;

&lt;p&gt;For payment, we will use the fake API stub. Again, we are not forced to write the whole service now, we can write it later, the main thing—to implement the specified behavior:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// services/paymentAdapter.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fakeApi&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PaymentService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../application/ports&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;usePayment&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;PaymentService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tryPay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PriceCents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fakeApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;fakeApi&lt;/code&gt; function is a timeout which is triggered after 450ms, simulating a delayed response from the server. It returns what we pass to it as an argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// services/api.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fakeApi&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We explicitly type the return value of &lt;code&gt;usePayment&lt;/code&gt;. This way TypeScript will check that the function actually returns an object that contains all the methods declared in the interface.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notification-service-implementation"&gt;
  &lt;/a&gt;
  Notification Service Implementation
&lt;/h3&gt;

&lt;p&gt;Let the notifications be a simple &lt;code&gt;alert&lt;/code&gt;. Since the code is decoupled, it won't be a problem to rewrite this service later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// services/notificationAdapter.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NotificationService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../application/ports&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useNotifier&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;NotificationService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#local-storage-implementation"&gt;
  &lt;/a&gt;
  Local Storage Implementation
&lt;/h3&gt;

&lt;p&gt;Let the local storage be React.Context and hooks. We create a new context, pass the value to provider, export the provider and access the store via hooks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// store.tsx&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StoreContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StoreContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...Other entities...&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOrders&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="nx"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;updateOrders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;setOrders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StoreContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StoreContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will write a hook for for each feature. This way we won't break ISP, and the stores, at least in terms of interfaces, they will be atomic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// services/storageAdapter.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useOrdersStorage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;OrdersStorageService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, this approach will give us the ability to customize additional optimizations for each store: we can create selectors, memoization, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#validate-data-flow-diagram"&gt;
  &lt;/a&gt;
  Validate Data Flow Diagram
&lt;/h2&gt;

&lt;p&gt;Let's now validate how the user will communicate with the application during the created use case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wi-VaCrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d37i43fxxgf3ezg32t9c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wi-VaCrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d37i43fxxgf3ezg32t9c.png" alt="Use case data flow diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The user interacts with the UI layer, which can only access the application through ports. That is, we can change the UI if we want to.&lt;/p&gt;

&lt;p&gt;Use cases are handled in the application layer, which tells us exactly what external services are required. All the main logic and data is in the domain.&lt;/p&gt;

&lt;p&gt;All external services are hidden in the infrastructure and are subject to our specifications. If we need to change the service of sending messages, the only thing we will have to fix in the code is an adapter for the new service.&lt;/p&gt;

&lt;p&gt;This scheme makes the code replaceable, testable and extensible to changing requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-can-be-improved"&gt;
  &lt;/a&gt;
  What Can Be Improved
&lt;/h2&gt;

&lt;p&gt;All in all, this is enough to get you started and gain an initial understanding of the clean architecture. But I want to point out things that I have simplified to make the example easier.&lt;/p&gt;

&lt;p&gt;This section is optional, but it will give an expanded understanding of what clean architecture “with no cut corners” might look like.&lt;/p&gt;

&lt;p&gt;I would highlight a few things that can be done.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-object-instead-of-number-for-the-price"&gt;
  &lt;/a&gt;
  Use Object Instead of Number For the Price
&lt;/h3&gt;

&lt;p&gt;You may have noticed that I use a number to describe the price. This is not a good practice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// shared-kernel.d.ts&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;PriceCents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A number only indicates the quantity but not the currency, and a price without currency is meaningless. Ideally, price should be made as an object with two fields: value and currency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Currency&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RUB&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;EUR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SEK&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AmountCents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AmountCents&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Currency&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will solve the problem of storing currencies and save a lot of effort and nerves when changing or adding currencies to the store. I didn't use this type in the examples so as not to complicate it. In the real code, however, the price would be more similar to this type.&lt;/p&gt;

&lt;p&gt;Separately, it's worth mentioning the value of the price. I always keep the amount of money in the smallest fraction of the currency in circulation. For example, for the dollar it is cents.&lt;/p&gt;

&lt;p&gt;Displaying the price in this way allows me not to think about division and fractional values. With money this is especially important if we want to avoid &lt;a href="https://0.30000000000000004.com"&gt;problems with floating point math&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#split-code-by-features-not-layers"&gt;
  &lt;/a&gt;
  Split Code by Features, not Layers
&lt;/h3&gt;

&lt;p&gt;The code can be split in folders not “by layers” but “by features”. One feature would be a piece of the pie from the schematic below.&lt;/p&gt;

&lt;p&gt;This structure is even more preferable, because it allows you to deploy certain features separately, which is often useful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NyuIr5mN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://herbertograca.files.wordpress.com/2018/11/080-explicit-architecture-svg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NyuIr5mN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://herbertograca.files.wordpress.com/2018/11/080-explicit-architecture-svg.png" alt="Component is a piece of a hex pie"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Image credits &lt;a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/#components"&gt;herbertograca.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I recommend reading about it in &lt;a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/#components"&gt;"DDD, Hexagonal, Onion, Clean, CQRS, ... How I put it all together"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also suggest to look at &lt;a href="https://feature-sliced.design"&gt;Feature Sliced&lt;/a&gt;, which is conceptually very similar to component code division, but easier to understand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pay-attention-to-crosscomponent-usage"&gt;
  &lt;/a&gt;
  Pay Attention to Cross-Component Usage
&lt;/h3&gt;

&lt;p&gt;If we're talking about splitting system into components, it's worth mentioning the cross-component use of code as well. Let's remember the order creation function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;Order&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function uses &lt;code&gt;totalPrice&lt;/code&gt; from another component—the product. Such usage is fine by itself, but if we want to divide the code into independent features, we can't directly access the functionality of the other feature.&lt;/p&gt;

&lt;p&gt;You can also see a way around this restriction in &lt;a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/#components"&gt;"DDD, Hexagonal, Onion, Clean, CQRS, ... How I put it all together"&lt;/a&gt; and &lt;a href="https://feature-sliced.design"&gt;Feature Sliced&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-branded-types-not-aliases"&gt;
  &lt;/a&gt;
  Use Branded Types, not Aliases
&lt;/h3&gt;

&lt;p&gt;For the shared kernel I used type-aliases. They are easy to operate with: you just have to create a new type and reference e.g. a string. But their disadvantage is that TypeScript has no mechanism to monitor their use and enforce it.&lt;/p&gt;

&lt;p&gt;This doesn't seem to be a problem: so someone uses &lt;code&gt;string&lt;/code&gt; instead of &lt;code&gt;DateTimeString&lt;/code&gt;—so what? The code will compile.&lt;/p&gt;

&lt;p&gt;The problem is exactly that the code will compile even though a broader type is used (in clever words &lt;a href="https://en.wikipedia.org/wiki/Design_by_contract"&gt;precondition is weakened&lt;/a&gt;). This first of all makes the code more fragile because it allows you to use &lt;em&gt;any strings&lt;/em&gt;, not just strings of &lt;em&gt;special quality&lt;/em&gt;, which can lead to errors.&lt;/p&gt;

&lt;p&gt;Secondly it's confusing to read, because it creates two sources of truth. It's unclear if you really only need to use the date there, or if you can basically use any string.&lt;/p&gt;

&lt;p&gt;There is a way to make TypeScript understand that we want a particular type—use &lt;a href="https://github.com/kourge/ts-brand"&gt;branding&lt;/a&gt;, branded types. Branding &lt;a href="https://medium.com/@KevinBGreene/surviving-the-typescript-ecosystem-branding-and-type-tagging-6cf6e516523d"&gt;enables&lt;/a&gt; to keep track of exactly how types are used, but makes the code a little more complicated.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pay-attention-to-possible-dependency-in-domain"&gt;
  &lt;/a&gt;
  Pay Attention to Possible Dependency in Domain
&lt;/h3&gt;

&lt;p&gt;The next thing that stings is the creation of a date in the domain in the &lt;code&gt;createOrder&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;Order&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;// Вот эта строка:&lt;/span&gt;
    &lt;span class="na"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;

    &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can suspect that &lt;code&gt;new Date().toISOString()&lt;/code&gt; will be repeated quite often in the project and would like to put it in some kind of a helper:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/datetime.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;currentDatetime&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;DateTimeString&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...And then use it in the domain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// domain/order.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;currentDatetime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../lib/datetime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;Order&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;currentDatetime&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we immediately remember that we can't depend on anything in the domain—so what should we do? It's a good idea that &lt;code&gt;createOrder&lt;/code&gt; should take all the data for the order in a complete form. The date can be passed as the last argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// domain/order.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DateTimeString&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Order&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also allows us not to break the dependency rule in cases where creating a date &lt;em&gt;depends on libraries&lt;/em&gt;. If we create a date outside a domain function, it is likely that the date will be created inside the use case and passed as an argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;someUserCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use the `dateTimeSource` adapter,&lt;/span&gt;
  &lt;span class="c1"&gt;// to get the current date in the desired format:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createdOn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dateTimeSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentDatetime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// Pass already created date to the domain function:&lt;/span&gt;
  &lt;span class="nx"&gt;createOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createdOn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will keep the domain independent and also make it easier to test.&lt;/p&gt;

&lt;p&gt;In the examples I chose not to focus on this for two reasons: it would distract from the main point, and I see nothing wrong with depending on your own helper if it uses &lt;em&gt;only&lt;/em&gt; language features. Such helpers can even be considered as the shared kernel, because they only reduce code duplication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-the-user-case-more-testable"&gt;
  &lt;/a&gt;
  Make the user case more testable
&lt;/h3&gt;

&lt;p&gt;The use case has a lot to discuss as well. Right now, the &lt;code&gt;orderProducts&lt;/code&gt; function is hard to test in isolation from React—that's bad. Ideally, it should be possible to test it with minimal effort.&lt;/p&gt;

&lt;p&gt;The problem with the current implementation is the hook that provides use case access to the UI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// application/orderProducts.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useOrderProducts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNotifier&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePayment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;orderStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useOrdersStorage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cartStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCartStorage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;orderProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;payment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tryPay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;paid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oops! 🤷&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;orders&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;orderStorage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;orderStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateOrders&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="nx"&gt;cartStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emptyCart&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;orderProducts&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a canonical implementation, the use case function would be located outside the hook, and the services would be passed to the use case via the last argument or via a DI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;NotificationService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;payment&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;PaymentService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;orderStorage&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;OrderStorageService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;orderProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultDependencies&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;orderStorage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The hook would then become an adapter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useOrderProducts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNotifier&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePayment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;orderStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useOrdersStorage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;orderProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;payment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;orderStorage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then the hook code could be considered an adapter, and only the use case would remain in the application layer. The &lt;code&gt;orderProducts&lt;/code&gt; function could be tested by passing the required service mochas as dependencies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-automatic-dependency-injection"&gt;
  &lt;/a&gt;
  Configure Automatic Dependency Injection
&lt;/h3&gt;

&lt;p&gt;There, in the application layer, we now inject services by hand:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useOrderProducts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Here we use hooks to get the instances of each service,&lt;/span&gt;
  &lt;span class="c1"&gt;// which will be used inside the orderProducts use case:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNotifier&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePayment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;orderStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useOrdersStorage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cartStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCartStorage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;orderProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...Inside the use case we use those services.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;orderProducts&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But in general, this can be automated and done with &lt;a href="https://www.newline.co/@bespoyasov/setting-up-dependency-injection-with-typescript-in-an-object-oriented-way--f5125283"&gt;dependency injection&lt;/a&gt;. We already looked at the simplest version of injection through the last argument, but you can go further and configure automatic injection.&lt;/p&gt;

&lt;p&gt;In this particular application, I didn't think it made much sense to set up a DI. It would distract from the point and overcomplicate the code. And in the case of React and hooks, we can use them as a “container” that returns an implementation of the specified interface. Yes, it's manual work, but it doesn't increase the entry threshold and is quicker to read for new developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-in-real-projects-could-be-more-complicated"&gt;
  &lt;/a&gt;
  What in real projects could be more complicated
&lt;/h2&gt;

&lt;p&gt;The example in the post is refined and intentionally simple. It is clear that life is much more surprising and complicated than this example. So I also want to talk about common problems that can arise when working with the clean architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#branching-business-logic"&gt;
  &lt;/a&gt;
  Branching Business Logic
&lt;/h3&gt;

&lt;p&gt;The most important problem is the subject area that we lack knowledge about. Imagine a store has a product, a discounted product, and a write-off product. How do we properly describe these entities?&lt;/p&gt;

&lt;p&gt;Should there be a “base” entity that will be expanded? How exactly should this entity be expanded? Should there be additional fields? Should these entities be mutually exclusive? How should user cases behave if there's another entity instead of a simple one? Should the duplication be reduced immediately?&lt;/p&gt;

&lt;p&gt;There may be too many questions and too many answers, because neither the team nor the stakeholders know yet how the system should actually behave. If there are only assumptions, you can find yourself in an &lt;a href="https://en.wikipedia.org/wiki/Analysis_paralysis"&gt;analysis paralysis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Specific solutions depend on the specific situation, I can only recommend a few general things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't use inheritance&lt;/strong&gt;, even if it's called “extension”. Even if it looks like the interface is really inherited. Even if it looks like “well, there's clearly a hierarchy here”. Just wait.&lt;/p&gt;

&lt;p&gt;Copypaste in code is not always evil, it's a tool. Make two almost identical entities, see how they behave in reality, observe them. At some point you'll notice that they've either become very different, or they really only differ in one field. It's easier to merge two similar entities into one than it is to create checks for every possible condition and variant.&lt;/p&gt;

&lt;p&gt;If you still have to extend something...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remember &lt;a href="https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)"&gt;covariance, contravariance, and invariance&lt;/a&gt;&lt;/strong&gt; so you don't accidentally come up with more work than you should.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use the analogy with &lt;a href="https://en.bem.info"&gt;blocks and modifiers from BEM&lt;/a&gt;&lt;/strong&gt; when choosing between different entities and extensions. It helps me a lot to determine if I have a separate entity or a “modifier-extension” the code, if I think of it in the context of BEM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interdependent-use-cases"&gt;
  &lt;/a&gt;
  Interdependent Use Cases
&lt;/h3&gt;

&lt;p&gt;The second big problem is related use cases, where an event from one use case triggers another.&lt;/p&gt;

&lt;p&gt;The only way to handle this, which I know and which helps me, is to break up the use cases into smaller, atomic use cases. They will be easier to put together.&lt;/p&gt;

&lt;p&gt;In general, the problem with such scripts, is a consequence of another big problem in programming, entities composition.&lt;/p&gt;

&lt;p&gt;There's &lt;a href="https://en.wikipedia.org/wiki/Law_of_Demeter"&gt;a lot&lt;/a&gt; already written about how to efficiently compose entities, and there's even a whole &lt;a href="https://en.wikipedia.org/wiki/Set_theory"&gt;mathematics section&lt;/a&gt;. We won't go far there, that's a topic for a separate post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;In this post, I've outlined and expanded a bit on my talk on the clean architecture on the frontend.&lt;/p&gt;

&lt;p&gt;It's not a gold standard, but rather a compilation of experience with different projects, paradigms, and languages. I find it a convenient scheme that allows you to decouple code and make independent layers, modules, services, which not only can be deployed and published separately, but also transferred from project to project if needed.&lt;/p&gt;

&lt;p&gt;We haven't touched on OOP because architecture and OOP are orthogonal. Yes, architecture talks about entity composition, but it doesn't dictate what should be the unit of composition: object or function. You can work with this in different paradigms, as we've seen in the examples.&lt;/p&gt;

&lt;p&gt;As for OOP, I recently wrote a post about &lt;a href="https://dev.to/bespoyasov/series/12558"&gt;how to use the clean architecture with OOP&lt;/a&gt;. In this post, we write a tree picture generator on canvas.&lt;/p&gt;

&lt;p&gt;To see how exactly you can combine this approach with other stuff like chip slicing, hexagonal architecture, CQS and other stuff, I recommend reading &lt;a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/"&gt;DDD, Hexagonal, Onion, Clean, CQRS, ... How I put it all together&lt;/a&gt; and the whole series of articles from this blog. Very insightful, concise, and to the point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h2&gt;

&lt;p&gt;Talk and sources from it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bespoyasov/frontend-clean-architecture"&gt;The source code for the application we're going to design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bespoyasov.ru/showcase/frontend-clean-architecture/en/"&gt;Sample of a working application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Design in Practice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;Model-View-Controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/#domain-layer"&gt;DDD, Hexagonal, Onion, Clean, CQRS, … How I put it all together&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://herbertograca.com/2017/09/14/ports-adapters-architecture/"&gt;Ports &amp;amp; Adapters Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://herbertograca.com/2018/07/07/more-than-concentric-layers/"&gt;More than Concentric Layers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/bespoyasov/series/12558"&gt;Generating Trees Using L-Systems, TypeScript, and OOP Series' Articles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;System design:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Domain_knowledge"&gt;Domain Knowledge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Use_case"&gt;Use Case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://en.wikipedia.org/wiki/Coupling_(computer_programming)"&gt;Coupling&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Cohesion_(computer_science)"&gt;cohesion&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ddd.fed.wiki.org/view/welcome-visitors/view/domain-driven-design/view/shared-kernel"&gt;Shared Kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Analysis_paralysis"&gt;Analysis Paralysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Books about design and coding:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.infoq.com/presentations/Design-Composition-Performance/"&gt;Design Composition and Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;Clean Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Patterns-Tolerant-Software-Robert-Hanmer/dp/0470319798"&gt;Patterns for Fault Tolerant Software&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Concepts from TypeScript, C# and other languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Protocol_(object-oriented_programming)"&gt;Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)"&gt;Closure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Set_theory"&gt;Set Theory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-aliases"&gt;Type Aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://refactoring.guru/smells/primitive-obsession"&gt;Primitive Obsession&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://0.30000000000000004.com"&gt;Floating Point Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kourge/ts-brand"&gt;Branded Types&lt;/a&gt; и &lt;a href="https://medium.com/@KevinBGreene/surviving-the-typescript-ecosystem-branding-and-type-tagging-6cf6e516523d"&gt;How to Use It&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Patterns, methodologies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Adapter_pattern"&gt;Adapter, pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.ploeh.dk/2020/03/02/impureim-sandwich/"&gt;Impureim Sandwich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Design_by_contract"&gt;Design by Contract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)"&gt;Covariance and contravariance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Law_of_Demeter"&gt;Law of Demeter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.bem.info/methodology/"&gt;BEM Methodology&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>react</category>
      <category>architecture</category>
    </item>
    <item>
      <title>How to download CSV and JSON files in React</title>
      <author>Thomas Findlay</author>
      <pubDate>Wed, 01 Sep 2021 16:30:09 +0000</pubDate>
      <link>https://dev.to/thomasfindlay/how-to-download-csv-and-json-files-in-react-18m6</link>
      <guid>https://dev.to/thomasfindlay/how-to-download-csv-and-json-files-in-react-18m6</guid>
      <description>&lt;p&gt;This article was originally published on &lt;a href="https://theroadtoenterprise.com/blog/how-to-download-csv-and-json-files-in-react"&gt;The Road To Enterprise&lt;/a&gt; blog. Read it there for the best reading experience.&lt;/p&gt;




&lt;p&gt;There are websites that let users download CSV or JSON data as a file. This functionality can be quite useful, as users can download the data for further processing or to share it. In this article, you will learn how to add the functionality that will allow users to export a table in React and download it in JSON and CSV formats.&lt;/p&gt;

&lt;p&gt;You can find the full code example in the &lt;a href="https://github.com/ThomasFindlay/csv-json-files-download-in-react"&gt;GitHub repo&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h2&gt;

&lt;p&gt;First, let's create a new React project using &lt;a href="https://vitejs.dev"&gt;Vite&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init vite@latest csv-json-files-download &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;--template&lt;/span&gt; react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the project is created, &lt;em&gt;cd&lt;/em&gt; into it to install dependencies by running &lt;code&gt;npm install&lt;/code&gt; and then start the dev server with &lt;code&gt;npm run dev&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we need to modify the &lt;code&gt;App.jsx&lt;/code&gt; and &lt;code&gt;App.css&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/App.jsx&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'App'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;How to download CSV and JSON files in React&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;src/App.css&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's enough for the initial setup. Let's start by adding functionality to export to JSON.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#export-to-json"&gt;
  &lt;/a&gt;
  Export to JSON
&lt;/h2&gt;

&lt;p&gt;Let's start by creating a file with users data that will be used for downloading a file and rendering a table.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/users.json&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Caitlyn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"surname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Kerluke"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Rowan "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"surname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Nikolaus"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Kassandra"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"surname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Haley"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Rusty"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"surname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Arne"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we need to update the &lt;code&gt;App&lt;/code&gt; component to utilise the &lt;code&gt;users&lt;/code&gt; data and display it in a table. Besides that, we will add a button to trigger the download. Below you can see the code for the &lt;code&gt;App.jsx&lt;/code&gt; component. Besides the component. we have two functions: &lt;code&gt;exportToJson&lt;/code&gt; and &lt;code&gt;downloadFile&lt;/code&gt;. The former one calls the latter with appropriate arguments. The &lt;code&gt;downloadFile&lt;/code&gt; function accepts an object as a parameter and expects three properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;li&gt;fileName&lt;/li&gt;
&lt;li&gt;fileType&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;fileType&lt;/code&gt; are used to create a &lt;code&gt;blob&lt;/code&gt; that is downloaded. After that, we create an anchor element and dispatch a &lt;code&gt;click&lt;/code&gt; event on it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/App.jsx&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;usersData&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./users.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;downloadFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fileType&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create a blob with the data we want to download as a file&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Blob&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fileType&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="c1"&gt;// Create an anchor element and dispatch a click event on it&lt;/span&gt;
  &lt;span class="c1"&gt;// to trigger a download&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;download&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickEvt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MouseEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;bubbles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cancelable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clickEvt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exportToJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;downloadFile&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usersData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fileType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'App'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;How to download CSV and JSON files in React&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'usersTable'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;thead&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ID&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Surname&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Age&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;thead&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tbody&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;usersData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tbody&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'actionBtns'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'button'&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;exportToJson&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Export to JSON
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can add a few styles, so the table looks a bit nicer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/App.css&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.usersTable&lt;/span&gt; &lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.usersTable&lt;/span&gt; &lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4rem&lt;/span&gt; &lt;span class="m"&gt;0.6rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.actionBtns&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.actionBtns&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, now you should be able to download the &lt;code&gt;users&lt;/code&gt; data as a JSON file by clicking on the &lt;code&gt;Export to JSON&lt;/code&gt; button. Next, we will add &lt;code&gt;Export to CSV&lt;/code&gt; functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#export-to-csv"&gt;
  &lt;/a&gt;
  Export to CSV
&lt;/h2&gt;

&lt;p&gt;We need another button that will be used to export data to a CSV file. Besides that, we also need a handler for it. The &lt;code&gt;usersData&lt;/code&gt; is in the JSON format, so we will need to convert it to the CSV format, before passing it to the &lt;code&gt;downloadFile&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/App.jsx&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;usersData&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./users.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;downloadFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fileType&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Blob&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fileType&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;download&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickEvt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MouseEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;bubbles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cancelable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clickEvt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exportToJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;downloadFile&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usersData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fileType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exportToCsv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;// Headers for each column&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Id,Name,Surname,Age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="c1"&gt;// Convert users data to a csv&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;usersCsv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usersData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;
    &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="nx"&gt;downloadFile&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;usersCsv&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users.csv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fileType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/csv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'App'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;How to download CSV and JSON files in React&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'usersTable'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;thead&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ID&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Surname&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Age&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;thead&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tbody&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;usersData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tbody&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'actionBtns'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'button'&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;exportToJson&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Export to JSON
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'button'&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;exportToCsv&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Export to CSV
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;There we have it. I hope you enjoyed this article. Now you should be well equipped with knowledge on how to add download files functionality to your own projects. Remember that even though I used React to demonstrate the download examples, you can use the download logic in other frameworks like Vue, Svelte, or Angular.&lt;/p&gt;




&lt;p&gt;Want to stay up to date and learn more programming tips? Make sure to follow me on &lt;a href="https://twitter.com/thomasfindlay94"&gt;Twitter&lt;/a&gt; and subscribe to the &lt;a href="https://theroadtoenterprise.com/blog/subscribe"&gt;newsletter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>json</category>
      <category>webdev</category>
    </item>
    <item>
      <title>For Myself: Explaining Actions</title>
      <author>Adriana DiPietro</author>
      <pubDate>Wed, 01 Sep 2021 16:25:35 +0000</pubDate>
      <link>https://dev.to/am20dipi/for-myself-explaining-actions-4f8d</link>
      <guid>https://dev.to/am20dipi/for-myself-explaining-actions-4f8d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#actions-for-my-bookmark-resource"&gt;
  &lt;/a&gt;
  Actions for My Bookmark Resource
&lt;/h2&gt;

&lt;p&gt;Today I will be explaining my actions/bookmarks.js file of my React-Redux frontend application.&lt;/p&gt;

&lt;p&gt;I utilize actions to portray CRUD functionality, Fetch requests to my Rails API backend, and the resolving or rejecting of Fetch Promises.&lt;/p&gt;

&lt;p&gt;🌱☁️This is really for myself, but if you want to read along then come join me!☁️🌱&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#actions"&gt;
  &lt;/a&gt;
  Actions
&lt;/h2&gt;

&lt;p&gt;Actions are JavaScript objects that tell us how to and/or what we want to change to the state. Since it is a JavaScript object, an action will have key-value pairs as properties. Specifically, for an action to do its job, it must have a "type" property and a "payload" property. (The payload property can go by any name; such as "person" or "data".)&lt;/p&gt;

&lt;p&gt;A simple example of an action object is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD_TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Buy milk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have our action object "addTodo" and it has a type property of 'ADD_TODO' and a payload property of 'Buy milk'. It clearly describes how and what it wants to change to the state; the action wants to add a todo with the data 'Buy milk'. Although this is a simple example, actions can get very complex. For example, an action might be a nested object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD_TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;todo_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Buy milk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Groceries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a payload object inside an action object. This can continue for many levels as we know that data reflects the complexity of an application. &lt;/p&gt;

&lt;p&gt;As complexity ensues, Redux introduced the concept of "action creators". Action creators are JS functions that return an action object. Its primary purpose is to bind our action object to dispatch. Dispatch takes in an action object and passes it to the reducer to invoke the reducer to make the change and return the new state. By binding our action to dispatch we can ultimately connect or bridge our actions to our reducers to make the change. &lt;/p&gt;

&lt;p&gt;I used action creators in my actions/bookmarks.js file to connect to the reducers and to ensure the ability to make fetch requests to my Rails API backend. &lt;/p&gt;

&lt;p&gt;☁️☁️Let's take a look at some code!☁️☁️&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// actions/bookmarks.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CREATE_BOOKMARK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GET_BOOKMARKS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;DELETE_BOOKMARK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FAVORITE_BOOKMARK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LOADING_BOOKMARKS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UPDATE_QUERY&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;span class="c1"&gt;// actions/users.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, I import my action types from a types folder I built to store them all. As we now know, an action type is the first key-value pair of an action object and essential to an action's purpose. &lt;/p&gt;

&lt;p&gt;I also import a function "getToken" from my actions/users.js file because I have Devise-JWT Authentication. I listed the function above as well just for reference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createBookmark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LOADING_BOOKMARKS&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/bookmarks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CREATE_BOOKMARK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
               &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My first action creator is a function called "createBookmark". It takes in an argument of data (which reflects the input from the bookmark form on the frontend). I initiate a return statement that passes in dispatch as to be used with action objects within my return statement. I first dispatch an action of "LOADING_BOOKMARKS". This tells me that my Redux store is loading the current bookmarks of my current user and then I can see the action occur in my Redux devTools. This is a point of organization for me; it lets me know what is occurring in the store. &lt;/p&gt;

&lt;p&gt;I then dispatch a fetch request to 'localhost:3000/bookmarks'. Since I am creating a bookmark, I need to post my fetch data to '/bookmarks' as if my Promise is resolved the new bookmark will be added to the bookmarks object in my backend. Within fetch, I use a "post" method to tell my request I am adding something. I use headers to accept a content-type of JSON since my backend bookmarks object is serialized and written in JSON. My second header "Authorization: getToken()" touches upon my user authentication. I use the imported function "getToken()" to say I want to associate this created bookmark with my current user reflected by the token. &lt;/p&gt;

&lt;p&gt;To finish my fetch request, I use JSON.stringify() method to convert a JavaScript object or value to a JSON string and I pass it the data. I utilize a series of Promise instance methods ".then()" to check if the response is "ok" and if the Promise is resolved. If so, I take the JSON from the response and use it as my payload key's value to be dispatched to my action object "CREATE_BOOKMARK". If the response is not ok, the Promise is rejected. &lt;/p&gt;

&lt;p&gt;** A Note on Promises:  A Promise is begins as pending and its result value is undefined. A fulfilled Promise is 'resolved' and results in a value (the payload) and a successful callback. Meanwhile, a rejected (or failed) Promise results in an error which is usually a failure callback. These three Promise statuses: fulfilled, pending and rejected determine the behavior and the result of the fetch request.** &lt;/p&gt;

&lt;p&gt;Only if the Promise is reject is the .catch() instance method invoked and dispatches an action object of ERROR.  &lt;/p&gt;

&lt;p&gt;Let's take a look at another action creator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;favoriteBookmark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;favorite&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bookmark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;bookmarks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bookmarks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bookmark&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;bookmark&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bookmark&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;web_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bookmark&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;web_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bookmark&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="na"&gt;favorite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;favorite&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;configObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PATCH&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;Accepts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`http://localhost:3000/bookmarks/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;configObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                   &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FAVORITE_BOOKMARK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
                   &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This action creator, "favoriteBookmark" takes in two (2) arguments: 'id' and 'favorite'. I initiate a return statement with two (2) arguments as well: 'dispatch' and 'getState'. We learned about dispatch already, so what is getState? getState is a function given to us from the Redux store. It returns the current state of my application. Using getState, I search through current state of the my bookmarks data and use a find method to check if the id I passed into our action creator matches the id of the bookmark I am trying to favorite. I set this value to a constant "bookmark".&lt;/p&gt;

&lt;p&gt;I declare and assign another constant "data" to the attributes of the bookmark I am trying to favorite. As the "headline", "web_url" and "description" attributes of my bookmark will not be changed, I set them to their current value. I assign the attributes 'id' and 'favorite' to the params I passed into our action creator. &lt;/p&gt;

&lt;p&gt;I optionally created another constant "configObject" to declare my method "PATCH" (as I am updating an already existing bookmark), my headers (including Authorization) and my body which I pass my data constant to be stringified into a JSON string from a JSON object. &lt;/p&gt;

&lt;p&gt;I pass my configObject into my fetch request and specify the "id" attribute of the bookmark I am trying to favorite in my localhost endpoint. Similarly to my createBookmark action creator, I check if the response is ok and dispatch my action object with a payload of json. If my response is not ok, my Promise is rejected and I dispatch an ERROR action object in my .catch() instance method.&lt;/p&gt;

&lt;p&gt;🌱🌱 🌱 🌱 🌱 &lt;/p&gt;

&lt;p&gt;Again, this is just for my own amusement + studying. Yet, if you do find yourself reading over this and you would like to suggest something, ask a question or continue the discussion, please feel free! &lt;/p&gt;

</description>
      <category>redux</category>
      <category>react</category>
      <category>javascript</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Responsive Social Media Card Built With React | Part One</title>
      <author>Chris Hansen </author>
      <pubDate>Wed, 01 Sep 2021 16:17:38 +0000</pubDate>
      <link>https://dev.to/hyggedev/responsive-social-media-card-built-with-react-part-one-ckj</link>
      <guid>https://dev.to/hyggedev/responsive-social-media-card-built-with-react-part-one-ckj</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Hey devs 👋&lt;/p&gt;

&lt;p&gt;I am starting a small React &amp;amp; styled-components UI series, and this project will act as its introduction! I have set a goal for myself to create at least 5 small react projects utilizing styled-components, and they'll all be available via CodeSandBox. So no excuses... here we go! 💯&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#preface-and-introduction"&gt;
  &lt;/a&gt;
  Preface and Introduction
&lt;/h2&gt;

&lt;p&gt;As I am hoping to reach as many &lt;strong&gt;beginner&lt;/strong&gt; to &lt;strong&gt;Jr. level web developers&lt;/strong&gt; as possible, for the sake of time and simplicity, this won't be a step by step tutorial, &lt;strong&gt;nor just a Github repo&lt;/strong&gt;. Instead I will share my codesandbox so you can immediately look and tinker with the code! This hopefully removes any barrier to entry for beginners who have not yet made the jump to Github. &lt;br&gt;
As a selfish bonus 🙃 this also allows me to quickly prototype ideas and get new projects added to the series! I sincerely hope you guys dig it!  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://csb-5c5xd.netlify.app/"&gt;DEMO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codesandbox.io/"&gt;CodeSandBox.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The Project ⬇️
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/5c5xd"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#hit-me-up"&gt;
  &lt;/a&gt;
  Hit me up ⬇️
&lt;/h2&gt;

&lt;p&gt;If you end up loving codesandbox and you made an account, hit me up on &lt;a href="https://www.twitter.com/hyggedev"&gt;Twitter&lt;/a&gt; to link up and we can collab, go over any code that may need clarifying, or just shoot the shit. Either way, Happy coding! ✌️&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#related-posts-also-written-by-me"&gt;
  &lt;/a&gt;
  Related posts also written by me 😎
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/filter-your-react-data-with-basic-javascript-4i9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Filter Your React Data With Basic Javascript 🤘&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  ・ Aug 27 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/how-to-build-a-responsive-react-navigation-menu-with-styled-components-3682" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to build a Responsive 📱 React Navigation Menu with Styled-Components 💻&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  ・ Aug 3 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/no-fuss-dark-mode-toggle-with-react-styled-components-3nd4" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;No Fuss Dark-Mode Toggle with React &amp;amp; Styled-Components! 🌞↔️🌖&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  ・ Aug 18 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/easiest-way-to-add-icons-to-your-react-apps-5cgd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Easiest Way To Add Icons To Your React Apps 😎&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  ・ Aug 10 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>react</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Mitigating Conflicts In Pull Requests</title>
      <author>Marcelo Sousa</author>
      <pubDate>Wed, 01 Sep 2021 16:13:13 +0000</pubDate>
      <link>https://dev.to/reviewpad/mitigating-conflicts-in-pull-requests-35g2</link>
      <guid>https://dev.to/reviewpad/mitigating-conflicts-in-pull-requests-35g2</guid>
      <description>&lt;p&gt;&lt;em&gt;One of the most annoying tasks for a developer is to fix git conflicts. You open a pull request, ace the code review process, all checks are passing&lt;/em&gt;, &lt;em&gt;and when you go for that merge button you find out that it is blocked because of git conflicts. Wouldn’t it be nice if you could avoid this situation?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Developers that use a &lt;a href="https://reviewpad.com/blog/github-flow-trunk-based-development-and-code-reviews/"&gt;git flow&lt;/a&gt; branching model rely on 3-way merge tools (like &lt;em&gt;git-merge&lt;/em&gt; or &lt;em&gt;kdiff3&lt;/em&gt;) to automatically merge their changes.&lt;/p&gt;

&lt;p&gt;Unfortunately, these tools are unable to resolve all concurrent changes made to files in the branches involved in the merge. As developers, we experience these &lt;em&gt;unresolved&lt;/em&gt; concurrent changes as &lt;strong&gt;git merge conflicts&lt;/strong&gt;. As the name suggests, the existence of a git merge conflict prevents the merge action.&lt;/p&gt;

&lt;p&gt;The exact definition of a git merge conflict depends on the algorithm used to compute the merge commit. The most widely used algorithms are textual in nature – a conflict in a file means that the branches involved in the merge have both made modifications to the same line in a file. Nowadays, there are much more sophisticated algorithms to compute merge commits than what is offered in GitHub, Gitlab, or Bitbucket. For an overview check out the article &lt;a href="https://dl.acm.org/doi/pdf/10.1145/3276535"&gt;Verified Three-Way Program Merge&lt;/a&gt; – we do plan to incorporate some of them soon into Reviewpad.&lt;/p&gt;

&lt;p&gt;However, a merge is and always will be a sensitive operation. That is, some concurrent changes really do conflict and require human intervention.&lt;/p&gt;

&lt;p&gt;The reality is that git merge conflicts are relatively common in highly collaborative teams.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f9eEDJXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49v94pob82mhqoou9lpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f9eEDJXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49v94pob82mhqoou9lpm.png" alt="Guava Board"&gt;&lt;/a&gt;&lt;/p&gt;
There are currently 27 pull requests blocked in the &lt;a href="https://github.com/google/guava/pulls" rel="noreferrer noopener"&gt;google/guava&lt;/a&gt; project because of git conflicts.



&lt;p&gt;While some conflicts are unavoidable, it is possible to create awareness of their future existence so that you can mitigate their effects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reviewpads-concurrent-pull-request-analysis"&gt;
  &lt;/a&gt;
  Reviewpad’s Concurrent Pull Request Analysis
&lt;/h2&gt;

&lt;p&gt;At Reviewpad, we believe that git conflicts are being discovered at a very late stage in the review process. That is very annoying because sometimes after you have gone through the entire review process you find out that a recently merged PR just introduced git conflicts. Now, you need to restart the entire process.&lt;/p&gt;

&lt;p&gt;So, to reduce this effort we have built into Reviewpad a concurrent pull request analysis that provides information about future git conflicts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EBWddZZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlbovjiy298vtfbv974i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EBWddZZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlbovjiy298vtfbv974i.png" alt="Open PR"&gt;&lt;/a&gt;&lt;/p&gt;
Information about conflicting changes with ongoing reviews at &lt;a href="https://github.com/google" rel="noreferrer noopener"&gt;google&lt;/a&gt; / &lt;a href="https://github.com/google/guava" rel="noreferrer noopener"&gt;guava&lt;/a&gt; – &lt;a rel="noreferrer noopener" href="https://github.com/google/guava/pull/5654"&gt;&lt;/a&gt;&lt;a rel="noreferrer noopener" href="https://github.com/google/guava/pull/5654"&gt;#5654&lt;/a&gt; &lt;a rel="noreferrer noopener" href="https://github.com/google/guava/pull/5654"&gt;Remove redundant bit masking&lt;/a&gt;.



&lt;p&gt;The way Reviewpad keeps track of potential future git conflicts is by checking if modified files in a particular pull request are also modified in other open pull requests that share the base branch.&lt;/p&gt;

&lt;p&gt;We have been using this check in two use cases that improve the review process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improve-reviewer-selection"&gt;
  &lt;/a&gt;
  Improve reviewer selection
&lt;/h3&gt;

&lt;p&gt;Finding the right reviewer can be difficult at times in highly collaborative projects. Who better to review than a developer who is also changing the same parts of the code, or a reviewer of such PR?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jNLEL_GFfGY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
Example of pull request without reviewers that has conflicts with concurrent PRs.



&lt;p&gt;In the video, we can see that there is another open PR that is also changing the &lt;code&gt;ci.yml&lt;/code&gt;. The author of that pull request could be a great candidate to review this pull request. Ideally, both developers could collaborate so that all conflicts could be avoided once one of the PRs is merged.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improve-merge-strategy"&gt;
  &lt;/a&gt;
  Improve merge strategy
&lt;/h3&gt;

&lt;p&gt;As we mentioned in the beginning of this article, there is nothing more annoying than a pull request that is ready to merge but will be blocked by the merge of another PR. Although we can’t completely avoid this situation, we have integrated this check into &lt;a href="https://reviewpad.com/blog/a-board-to-rule-all-pull-requests/"&gt;Reviewpad’s Release Board&lt;/a&gt; so that it becomes evident.&lt;/p&gt;

&lt;p&gt;In this first version, we have decided to restrict this information to pull requests that are ready to merge. Here’s what a PR card with conflicts in concurrent PRs looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tVwB1Xik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/najtffegw1fa65613d7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tVwB1Xik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/najtffegw1fa65613d7k.png" alt="Pull Request Card"&gt;&lt;/a&gt;&lt;/p&gt;
Pull request card that is ready to merge and that has conflicts with another PR that is also ready to merge.



&lt;p&gt;In the following video, we go over the simple flow of approving a PR, seeing the conflicts in the &lt;strong&gt;Ready to Merge&lt;/strong&gt; column and also the effect of merging this PR which moves the conflicting PR back to the &lt;strong&gt;Git conflicts&lt;/strong&gt; column.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6Z22wHxW7_M"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
Integration of concurrent PR check with Review Board in the &lt;strong&gt;Ready to Merge&lt;/strong&gt; column.






&lt;h2&gt;
  &lt;a href="#cool-how-do-i-check-this-out-by-myself"&gt;
  &lt;/a&gt;
  Cool. How do I check this out by myself?
&lt;/h2&gt;

&lt;p&gt;We have a public beta version of Reviewpad available at &lt;a href="https://reviewpad.com/get-started/"&gt;reviewpad.com/get-started&lt;/a&gt;. You will need to create a new account and once you log in for the first time, you will see the following page to connect to a code host:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sLJOhzah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct76he1fpvv6awocl191.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sLJOhzah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct76he1fpvv6awocl191.png" alt="Connect to code host page"&gt;&lt;/a&gt;&lt;/p&gt;
Connect to code host page on Reviewpad.



&lt;p&gt;You can connect to GitHub through our OAuth app or manually &lt;a href="https://docs.reviewpad.com/github"&gt;add a personal access token&lt;/a&gt;. The OAuth requires minimal scopes to be able to read and comment on public repositories.&lt;/p&gt;

&lt;p&gt;And voilà – you are ready to get started with Reviewpad!&lt;/p&gt;

&lt;p&gt;We are just getting started with incorporating features that improve the merge experience in pull requests. Feel free to reach us on our &lt;a href="https://reviewpad.com/slack"&gt;community Slack&lt;/a&gt; with requests!&lt;/p&gt;

</description>
      <category>git</category>
      <category>pullrequest</category>
      <category>conflict</category>
    </item>
    <item>
      <title>Find out what's new in my portfolio website</title>
      <author>Muhammad  Ahmad</author>
      <pubDate>Wed, 01 Sep 2021 16:04:56 +0000</pubDate>
      <link>https://dev.to/m_ahmad/find-out-what-s-new-in-my-portfolio-website-1il7</link>
      <guid>https://dev.to/m_ahmad/find-out-what-s-new-in-my-portfolio-website-1il7</guid>
      <description>&lt;p&gt;I want to share new updated version of my portfolio website.&lt;br&gt;
Here is the list of new features and changes that I made in my portfolio website.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Color Mode Switcher for links and tags&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Search feature for articles&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updated website color mode switcher icons and added animation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fixed outline issue of links and buttons&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Website link: &lt;a href="https://my-portfolio-ma-ahmad.vercel.app"&gt;ma-ahmad&lt;/a&gt;&lt;br&gt;
Github repo: &lt;a href="https://github.com/MA-Ahmad/myPortfolio"&gt;https://github.com/MA-Ahmad/myPortfolio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6IM4JadE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg7q5zs44g2u18uwimzo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6IM4JadE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg7q5zs44g2u18uwimzo.png" alt="open-source-page"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Software Dev Weekly Update #6: "With our combined powers!"</title>
      <author>Ethan Goddard</author>
      <pubDate>Wed, 01 Sep 2021 15:52:59 +0000</pubDate>
      <link>https://dev.to/realnerdethan/software-dev-weekly-update-6-with-our-combined-powers-4hph</link>
      <guid>https://dev.to/realnerdethan/software-dev-weekly-update-6-with-our-combined-powers-4hph</guid>
      <description>&lt;p&gt;I don't know it anyone remembers that old show Captain Planet and the Planeteers, but much like our planet saving heroes and with their powers combined we used MongoDB, Mongoose &amp;amp; Express to build a fully functioning CRUD (Create, Read, Update, Delete) web app!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Meet the most fully functional and inspired roadside farm stand application we've seen yet.&lt;/em&gt; -Trendy News Today&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ayNguBma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/poDNK0O.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayNguBma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/poDNK0O.gif" alt="Farm Stand Web App Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok... it's not so pretty to look at and it is probably missing some functionality &lt;em&gt;but&lt;/em&gt; it successfully combines those technologies into a great example of something more complex than static HTML and the fake JSON database files that we've been working with so far.&lt;/p&gt;

&lt;p&gt;To make this project happen, we learned about a few key topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/RealNerdEthan/web-dev-bootcamp-2021/blob/master/Section%2036%20-%20Our%20First%20Database%20MongoDB/commands.txt"&gt;MongoDB Common Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mongoosejs.com/docs/index.html"&gt;Connecting Mongoose to MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mongoose &lt;a href="https://mongoosejs.com/docs/api/schema.html"&gt;Schema&lt;/a&gt; &amp;amp; &lt;a href="https://mongoosejs.com/docs/api/model.html"&gt;Model&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those combined with the HTML templating we spoke about in &lt;a href="https://dev.to/realnerdethan/software-dev-weekly-update-4-new-tools-new-community-1kbl"&gt;update #4&lt;/a&gt;, gives us the bones to build something more complex.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-the-heck-is-mongoose"&gt;
  &lt;/a&gt;
  What the heck is Mongoose?
&lt;/h2&gt;

&lt;p&gt;Nick Karnik over at FreeCodeCamp has a great writeup about Mongoose and he says: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node.js. It manages relationships between data, provides schema validation, and is used to translate between objects in code and the representation of those objects in MongoDB.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dNhJHbGP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-media-1.freecodecamp.org/images/0%2Ab5piDNW1dqlkJWKe." class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dNhJHbGP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-media-1.freecodecamp.org/images/0%2Ab5piDNW1dqlkJWKe." alt="Technology Flowchart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I &lt;strong&gt;highly&lt;/strong&gt; recommend you &lt;a href="https://www.freecodecamp.org/news/introduction-to-mongoose-for-mongodb-d2a7aa593c57/"&gt;check out his writeup&lt;/a&gt; if you want to know more about Mongoose and how it connects with MongoDB and NodeJS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#week-in-review"&gt;
  &lt;/a&gt;
  Week In Review
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R1bBzLsB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/OOiWrWk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R1bBzLsB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/OOiWrWk.jpg" alt="Trees and a Path"&gt;&lt;/a&gt;&lt;br&gt;
This week was about combining past knowledge with the last missing piece of the pie, MongoDB. We finally made something that can persist data across sessions and from here on out we'll be refining our knowledge of the basics to build better web applications.&lt;/p&gt;

&lt;p&gt;Our next major focus is to expand on existing knowledge and start building the capstone project, something called YelpCamp. I will share more on that over the next few weeks.&lt;/p&gt;

&lt;p&gt;I'm no where near out of the woods yet, but I'm on a good path.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Education is the key, and perseverance opens the door."&lt;/em&gt; - &lt;a href="https://www.linkedin.com/in/zach-al-kharusy-7850a612a/"&gt;Zach Al-Kharusy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;I hope you enjoyed the read!&lt;/p&gt;

&lt;p&gt;Feel free to follow me on &lt;a href="https://github.com/RealNerdEthan"&gt;GitHub&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/ethan-goddard-a4376952/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://dev.to/realnerdethan"&gt;DEV&lt;/a&gt; for more!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>⚡️ 30 Day Vanilla JS ⚡️</title>
      <author>fentybit</author>
      <pubDate>Wed, 01 Sep 2021 15:49:19 +0000</pubDate>
      <link>https://dev.to/fentybit/30-day-vanilla-js-1nmp</link>
      <guid>https://dev.to/fentybit/30-day-vanilla-js-1nmp</guid>
      <description>&lt;p&gt;I have been meaning to take on &lt;a href="https://javascript30.com/"&gt;Wes Bos' JavaScript30 challenge&lt;/a&gt;, but had no time to spare during my bootcamp regime at Flatiron School. At this moment as I am writing this blog, I already had exposure to Vanilla JS and worked on a &lt;a href="https://dev.to/fentybit/know-it-all-2kpp"&gt;simple trivia app&lt;/a&gt;, &lt;em&gt;Know It All.&lt;/em&gt; There are more to JavaScript that I decided to embark on this #JavaScript30. This blog concludes my journey of 30 Day Vanilla JS Challenge. I had much fun! Thank you Wes Bos. 🙌🏼&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#day-1-javascript-drum-kit"&gt;
  &lt;/a&gt;
  🥁  Day 1 JavaScript Drum Kit
&lt;/h3&gt;

&lt;p&gt;The goal is to press any of the displayed keys, and it will give you its assigned sound. &lt;code&gt;.wav&lt;/code&gt; sound files are already provided in the starter files. By utilizing &lt;code&gt;querySelector&lt;/code&gt; on &lt;code&gt;event.keyCode&lt;/code&gt;, I was able to adjust the selected element's &lt;code&gt;classList&lt;/code&gt; and attached an &lt;code&gt;addEventListener&lt;/code&gt; on &lt;code&gt;keydown&lt;/code&gt; to trigger the sound.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8P_Y_DRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/akm8cfi95sjjetnjso6g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8P_Y_DRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/akm8cfi95sjjetnjso6g.gif" alt="JavaScript Drum Kit"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#day-2-css-js-clock"&gt;
  &lt;/a&gt;
  ⏰  Day 2 CSS + JS Clock
&lt;/h3&gt;

&lt;p&gt;I learned a few new JS prototype methods on &lt;code&gt;getHours()&lt;/code&gt;, &lt;code&gt;getMinutes()&lt;/code&gt; and &lt;code&gt;getSeconds()&lt;/code&gt;. A bit of mathematical calculations required when trying to update the &lt;code&gt;style&lt;/code&gt; in order to &lt;code&gt;transform&lt;/code&gt; the &lt;code&gt;rotate&lt;/code&gt; degree attributes. The &lt;code&gt;setInterval&lt;/code&gt; function will trigger updates every second (or 1000 millisecond).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ew-jyE7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf071l88i73khlxbkqoz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ew-jyE7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf071l88i73khlxbkqoz.gif" alt="CSS + JS Clock"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#day-3-playing-with-css-variables-and-js"&gt;
  &lt;/a&gt;
  🎨  Day 3 Playing with CSS Variables and JS
&lt;/h3&gt;

&lt;p&gt;Updating CSS variables with JavaScript is pretty cool! Now I know how to declare &lt;code&gt;--base&lt;/code&gt;, &lt;code&gt;--spacing&lt;/code&gt; and &lt;code&gt;--blur&lt;/code&gt; CSS variables and default values under &lt;code&gt;:root&lt;/code&gt; in &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element. &lt;code&gt;change&lt;/code&gt; and &lt;code&gt;mousemove&lt;/code&gt; event listeners are being utilized to handle changes and update event display.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BN4pYrtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c736d5xpj9ldt8ws6sll.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BN4pYrtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c736d5xpj9ldt8ws6sll.gif" alt="Playing with CSS Variables and JS"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#day-4-array-cardio-day-1"&gt;
  &lt;/a&gt;
  🫀  Day 4 Array Cardio Day 1
&lt;/h3&gt;

&lt;p&gt;This is a good overview on JS &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;sort()&lt;/code&gt; and &lt;code&gt;reduce()&lt;/code&gt; functions. De-structuring assignment was also introduced, and a bit of refactoring exercise on &lt;code&gt;if else&lt;/code&gt; statement to ternary operator syntax.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f7PPxyw2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6e6yszbb9ljnkitjb70.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f7PPxyw2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6e6yszbb9ljnkitjb70.gif" alt="Array Cardio Day 1"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#day-5-flex-panel-gallery"&gt;
  &lt;/a&gt;
  🌁  Day 5 Flex Panel Gallery
&lt;/h3&gt;

&lt;p&gt;FlexBox CSS has personally been a total nightmare for me, but Wes Bos made it so much fun. 😆&lt;br&gt;
I learned a few new CSS attributes such as &lt;code&gt;display: flex&lt;/code&gt;, &lt;code&gt;transform: translateY(-100%)&lt;/code&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/toggle"&gt;DOMTokenList&lt;/a&gt; &lt;code&gt;toggle()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3G3dPc8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neiywupqgr6yylptmn5i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3G3dPc8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neiywupqgr6yylptmn5i.gif" alt="Flex Panel Gallery"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-day-6-ajax-type-ahead"&gt;
  &lt;/a&gt;
  ⚡️  Day 6 AJAX Type Ahead
&lt;/h3&gt;

&lt;p&gt;I had previously done extensive &lt;code&gt;fetch()&lt;/code&gt; requests on my ReactJS/Redux app, &lt;a href="https://dev.to/fentybit/storybook-4p2g"&gt;Storybook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What's new for me in this lesson would be to implement &lt;code&gt;RegExp&lt;/code&gt; when typing matching words, and adding both &lt;code&gt;change&lt;/code&gt; and &lt;code&gt;keyup&lt;/code&gt; add event listeners on the search input.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--te0mt4lR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojjhxk0bxrn5spu72p6p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--te0mt4lR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojjhxk0bxrn5spu72p6p.gif" alt="AJAX Type Ahead"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#day-7-array-cardio-day-2"&gt;
  &lt;/a&gt;
  🏃🏻‍♀️  Day 7 Array Cardio Day 2
&lt;/h3&gt;

&lt;p&gt;Good brush up on JavaScript methods &lt;code&gt;some()&lt;/code&gt;, &lt;code&gt;every()&lt;/code&gt;, &lt;code&gt;findIndex()&lt;/code&gt;. I have used &lt;code&gt;new Date()&lt;/code&gt;, but &lt;code&gt;getFullYear()&lt;/code&gt; was new to me. I have been programming with JavaScript for 4 months, and have to admit their prototype methods are endless. 😱&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ANOsTxjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xzuzioy56286gamq1htw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ANOsTxjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xzuzioy56286gamq1htw.gif" alt="Array Cardio Day 2"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#day-8-fun-with-html5-canvas"&gt;
  &lt;/a&gt;
  👩🏻‍🎨  Day 8 Fun with HTML5 Canvas
&lt;/h3&gt;

&lt;p&gt;I really love this canvas mouse play with varying line width and &lt;a href="https://www.w3schools.com/colors/colors_hsl.asp"&gt;HSL (Hue, Saturation and Lightness)&lt;/a&gt;. The add event listeners include &lt;code&gt;mousemove&lt;/code&gt;, &lt;code&gt;mouseup&lt;/code&gt;, &lt;code&gt;mouseout&lt;/code&gt; and &lt;code&gt;mousedown&lt;/code&gt; with mouse event attributes defining &lt;code&gt;offsetX&lt;/code&gt; and &lt;code&gt;offsetY&lt;/code&gt;. As a start, I had to define the canvas with its &lt;code&gt;getContext&lt;/code&gt; in &lt;code&gt;2d&lt;/code&gt; and assign its &lt;code&gt;strokeStyle&lt;/code&gt;, &lt;code&gt;lineJoin&lt;/code&gt;, &lt;code&gt;lineCap&lt;/code&gt; and &lt;code&gt;lineWidth&lt;/code&gt;. A &lt;code&gt;draw&lt;/code&gt; function with &lt;code&gt;event&lt;/code&gt; argument triggers hue changes, &lt;code&gt;moveTo&lt;/code&gt;, &lt;code&gt;lineTo&lt;/code&gt;, &lt;code&gt;stroke()&lt;/code&gt; and &lt;code&gt;[lastX, lastY]&lt;/code&gt;. 🖌&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u9ae56L3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8wq88e6mwlrqoxkl8z8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u9ae56L3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8wq88e6mwlrqoxkl8z8.gif" alt="Fun with HTML5 Canvas"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#%F0%9F%9B%A0-day-9-dev-tools-domination"&gt;
  &lt;/a&gt;
  🛠  Day 9 Dev Tools Domination
&lt;/h3&gt;

&lt;p&gt;I am very used to &lt;code&gt;console.log&lt;/code&gt;, maybe &lt;code&gt;console.dir&lt;/code&gt; and sometimes &lt;code&gt;console.table&lt;/code&gt;. It's good to know that there are others including &lt;code&gt;console.count&lt;/code&gt;, &lt;code&gt;console.warn&lt;/code&gt;, &lt;code&gt;console.error&lt;/code&gt;, &lt;code&gt;console.info&lt;/code&gt; and &lt;code&gt;console.assert&lt;/code&gt;. &lt;code&gt;console.groupCollapsed&lt;/code&gt; and &lt;code&gt;console.groupEnd&lt;/code&gt; are useful when iterating and grouping each instance independently.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iKahSrKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ek0fyu1ipyt2xbn0f2qw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iKahSrKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ek0fyu1ipyt2xbn0f2qw.png" alt="Dev Tools Domination"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#day-10-hold-shift-and-check-checkboxes"&gt;
  &lt;/a&gt;
  ✔️  Day 10 Hold Shift and Check Checkboxes
&lt;/h3&gt;

&lt;p&gt;I had once done a basic To-Do List app. This one includes a &lt;code&gt;shift&lt;/code&gt; key feature on which it will allow to check all tasks in-between lists. Pretty neat. There are two main variables; one for &lt;code&gt;boolean&lt;/code&gt; value and one for &lt;code&gt;lastItemChecked&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3WLze1FQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxjamro6dukfkcl82zff.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3WLze1FQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxjamro6dukfkcl82zff.gif" alt="Hold Shift and Check Checkboxes"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#day-11-custom-video-player"&gt;
  &lt;/a&gt;
  🎥  Day 11 Custom Video Player
&lt;/h3&gt;

&lt;p&gt;I would say that I am very new to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement"&gt;HTMLMediaElement&lt;/a&gt; interface, to be specific the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement"&gt;HTMLVideoElement&lt;/a&gt; elements. The task is to create a basic video player where you can trigger &lt;code&gt;play&lt;/code&gt; / &lt;code&gt;pause&lt;/code&gt; button, adjust &lt;code&gt;volume&lt;/code&gt;, slow / fast &lt;code&gt;motion&lt;/code&gt; and rewind / forward &lt;code&gt;progress&lt;/code&gt; bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cImnSUiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47wchhrguvc2kz6gjj3n.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cImnSUiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47wchhrguvc2kz6gjj3n.gif" alt="Custom Video Player"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#day-12-key-sequence-detection-konami-code"&gt;
  &lt;/a&gt;
  ⌨️  Day 12 Key Sequence Detection (KONAMI CODE)
&lt;/h3&gt;

&lt;p&gt;If you grew up in the 80s and 90s, you are probably familiar with pressing &lt;code&gt;up&lt;/code&gt; &lt;code&gt;up&lt;/code&gt; &lt;code&gt;down&lt;/code&gt; &lt;code&gt;down&lt;/code&gt; &lt;code&gt;left&lt;/code&gt; &lt;code&gt;right&lt;/code&gt; &lt;code&gt;left&lt;/code&gt; &lt;code&gt;right&lt;/code&gt; &lt;code&gt;B&lt;/code&gt; &lt;code&gt;A&lt;/code&gt; and the &lt;code&gt;start&lt;/code&gt; button on the controller is a cheat code in the video gaming industry. I am creating something similar! The &lt;code&gt;secretCode&lt;/code&gt; could be anything, and I utilized &lt;code&gt;window.addEventListener&lt;/code&gt; on &lt;code&gt;keyup&lt;/code&gt; to get a matching keypress sequence. Every time a keypress array combination matches the &lt;code&gt;secretCode&lt;/code&gt;, it will display a &lt;a href="https://www.cornify.com/js/cornify.js"&gt;unicorn&lt;/a&gt; image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6nXFzMju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8acfdtm87o5itmdo9bz5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6nXFzMju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8acfdtm87o5itmdo9bz5.gif" alt="Key Sequence Detection (KONAMI CODE)"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#day-13-slide-in-on-scroll"&gt;
  &lt;/a&gt;
  ⏬  Day 13 Slide In on Scroll
&lt;/h3&gt;

&lt;p&gt;The goal is as you are scrolling down the page, an image to slide in. A &lt;code&gt;debounce&lt;/code&gt; function is defined to delay milliseconds upon invocation when I have an add event listener, &lt;code&gt;scroll&lt;/code&gt;. Original state of the images are currently hidden, and as I am scrolling down, I can &lt;code&gt;add&lt;/code&gt; the &lt;code&gt;active&lt;/code&gt; class style. The solution can be as simple as selecting all of the images in a variable, and loop over each one in order to check its &lt;em&gt;truthy&lt;/em&gt; or &lt;em&gt;falsey&lt;/em&gt;. The condition is &lt;em&gt;truthy&lt;/em&gt; as I am reaching half image height in pixel for the image to scroll in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bbeuGbIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfwrxio3830ekhnzij9l.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bbeuGbIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfwrxio3830ekhnzij9l.gif" alt="Slide In on Scroll"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#day-14-object-and-arrays-reference-vs-copy"&gt;
  &lt;/a&gt;
  💬  Day 14 Object and Arrays - Reference vs. Copy
&lt;/h3&gt;

&lt;p&gt;Another good JS reminder on reference versus copy, &lt;code&gt;Object.assign&lt;/code&gt; and spread operator implementation. I guess that's all I have to say. 😆&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p7ZXuZoJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ab2uml0adl6x6qpol0z.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p7ZXuZoJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ab2uml0adl6x6qpol0z.gif" alt="Object and Arrays - Reference vs. Copy"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#day-15-localstorage-and-event-delegation"&gt;
  &lt;/a&gt;
  🌮  Day 15 LocalStorage and Event Delegation
&lt;/h3&gt;

&lt;p&gt;Our web browser has a built-in &lt;code&gt;localStorage&lt;/code&gt;, and is capable to retain lightweight data inputs including page refresh. I can send each input with &lt;code&gt;localStorage.setItem&lt;/code&gt;. In order to avoid losing &lt;code&gt;items&lt;/code&gt; as page refreshes, I can set &lt;code&gt;items&lt;/code&gt; to &lt;code&gt;localStorage.getItem&lt;/code&gt;. The toggle actions can be triggered with an add event listener, &lt;code&gt;click&lt;/code&gt;, and boolean &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iyo9sSBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pos9dbp7e8dkwjpbw20a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iyo9sSBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pos9dbp7e8dkwjpbw20a.gif" alt="LocalStorage and Event Delegation"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#day-16-css-text-shadow-mouse-move-effect"&gt;
  &lt;/a&gt;
  🔥  Day 16 CSS Text Shadow Mouse Move Effect
&lt;/h3&gt;

&lt;p&gt;You can play a lot with CSS on &lt;code&gt;offsetWidth&lt;/code&gt; and &lt;code&gt;offsetHeight&lt;/code&gt;. I can set the &lt;code&gt;text.style.textShadow&lt;/code&gt; of various &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; setbacks with various &lt;code&gt;rgba&lt;/code&gt; values. Fairly simple, yet fun!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fAn-JFWu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrdsrafgfepfjshtmmem.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fAn-JFWu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrdsrafgfepfjshtmmem.gif" alt="CSS Text Shadow Mouse Move Effect"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#day-17-sorting-band-names-without-articles"&gt;
  &lt;/a&gt;
  🎸  Day 17 Sorting Band Names without Articles
&lt;/h3&gt;

&lt;p&gt;An array of bands are provided in the &lt;code&gt;bands&lt;/code&gt; array, and the goal is to sort alphabetically while ignoring &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;the&lt;/code&gt; and &lt;code&gt;an&lt;/code&gt;. That means &lt;code&gt;Counterparts&lt;/code&gt; will come before &lt;code&gt;A Skylit Drive&lt;/code&gt; since &lt;code&gt;S&lt;/code&gt; comes after &lt;code&gt;C&lt;/code&gt;. With simple Regex trick, I can utilize matching groups of &lt;code&gt;(a |the |an )/i&lt;/code&gt;. The global &lt;code&gt;-i&lt;/code&gt; denotes insensitive case, and I can iterate each band with a &lt;code&gt;sort&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--whWa30-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqzyji7tjqhc12t3aa62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--whWa30-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqzyji7tjqhc12t3aa62.png" alt="Sorting Band Names without Articles"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-day-18-tally-string-times-with-reduce"&gt;
  &lt;/a&gt;
  ⌛️  Day 18 Tally String Times with Reduce
&lt;/h3&gt;

&lt;p&gt;Given a collection of &lt;code&gt;data-time&lt;/code&gt; with minutes and seconds attributes, I want to add all of the given time duration with a &lt;code&gt;reduce&lt;/code&gt; function. For a start, create an array of &lt;code&gt;data-time&lt;/code&gt; collection, iterate each to extract its &lt;code&gt;.dataset.time&lt;/code&gt; and convert it from string type to integer with &lt;code&gt;parseFloat&lt;/code&gt; function. With &lt;code&gt;reduce&lt;/code&gt; function and modulo &lt;code&gt;%&lt;/code&gt; operator, I should be able to retrieve total seconds, and convert it back to hours, minutes and seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O230TwbS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5k28pj9n9pd28j1qtaq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O230TwbS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5k28pj9n9pd28j1qtaq.gif" alt="Tally String Times with Reduce"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#day-19-unreal-webcam-fun"&gt;
  &lt;/a&gt;
  📸  Day 19 Unreal Webcam Fun
&lt;/h3&gt;

&lt;p&gt;This whole exercise is new to me. I learned there is an add event listener, &lt;code&gt;canplay&lt;/code&gt;. A variable &lt;code&gt;pixels&lt;/code&gt; is retrieved from &lt;code&gt;.getContext('2d')&lt;/code&gt; and &lt;code&gt;.getImageData(0, 0, width, height)&lt;/code&gt;. Later on I can play with the RGB value by adjusting the pixels data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mKr05mxx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ar7hzeiglvjhhekg1p3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mKr05mxx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ar7hzeiglvjhhekg1p3.gif" alt="Unreal Webcam Fun"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#day-20-native-speech-recognition"&gt;
  &lt;/a&gt;
  🎤  Day 20 Native Speech Recognition
&lt;/h3&gt;

&lt;p&gt;While it is not perfect, I am in awe that we can do a speech recognition in the browser without any libraries or external API. I triggered a &lt;code&gt;new SpeechRecognition()&lt;/code&gt;, and set the &lt;code&gt;.interimResults&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in order to accept more inputs. This allows moving on to the next paragraph when a speaker pauses their speech.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6_bAI5wO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1enuu1j39bf4utkboosr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6_bAI5wO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1enuu1j39bf4utkboosr.gif" alt="Native Speech Recognition"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#day-21-geolocation-based-speedometer-and-compass"&gt;
  &lt;/a&gt;
  🧭  Day 21 Geolocation based Speedometer and Compass
&lt;/h3&gt;

&lt;p&gt;This application would need an iOS Simulator, and it has a built-in speed and compass automation. For example use case, the speed displayed mimics the behavior of a city bicycle ride. &lt;code&gt;navigator.geolocation.watchPosition&lt;/code&gt; is invoked to update the arrow and speed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.arrow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.speed-value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geolocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;watchPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;arrow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--px_Uirp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf96sl189k7npzkus09q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--px_Uirp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf96sl189k7npzkus09q.gif" alt="Geolocation based Speedometer and Compass"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#day-22-follow-along-links"&gt;
  &lt;/a&gt;
  🔗  Day 22 Follow Along Links
&lt;/h3&gt;

&lt;p&gt;The goal would be to highlight all of the links as I hover over the page. First thing I used &lt;code&gt;querySelectorAll&lt;/code&gt; on &lt;code&gt;"a"&lt;/code&gt; link attributes. I can add an event listener &lt;code&gt;mouseenter&lt;/code&gt; and invoke a function to highlight a link. Inside this function, I can utilize &lt;code&gt;getBoundingClientRect()&lt;/code&gt; and it provides &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; properties. With all of these coordinate elements, I can assign each &lt;code&gt;style.width&lt;/code&gt;, &lt;code&gt;style.height&lt;/code&gt; and &lt;code&gt;style.transform&lt;/code&gt; pixels accordingly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xARJdqqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydukekulpyaq7z3j4yuj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xARJdqqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydukekulpyaq7z3j4yuj.gif" alt="Follow Along Links"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#%F0%9F%97%A3-day-23-speech-synthesis"&gt;
  &lt;/a&gt;
  🗣  Day 23 Speech Synthesis
&lt;/h3&gt;

&lt;p&gt;This is akin to building a simple screen reader. &lt;code&gt;SpeechSynthesisUtterance&lt;/code&gt; carries language, text, voice, volume, pitch and other attributes. I can add an event listener &lt;code&gt;voiceschanged&lt;/code&gt; on &lt;code&gt;speechSynthesis&lt;/code&gt; and add a function in order to select a voice. For this lesson, I will limit our voices selections strictly to english language. A &lt;code&gt;boolean&lt;/code&gt; truthy and falsey value can be utilized on a toggle function on the &lt;code&gt;stop&lt;/code&gt; and &lt;code&gt;speak&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J35ZQw9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygoj3iwqtrk5ajecvm6h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J35ZQw9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygoj3iwqtrk5ajecvm6h.gif" alt="Speech Synthesis"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#%F0%9F%97%92-day-24-sticky-nav"&gt;
  &lt;/a&gt;
  🗒  Day 24 Sticky Nav
&lt;/h3&gt;

&lt;p&gt;It would be nice to have the top nav bar to stay as a user scrolling down the page. The effort is less on setting the script aside from checking a condition when &lt;code&gt;window.scrollY&lt;/code&gt; is more than top of the nav bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mX27S-ip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izp4aa3nse6g9rqttmh0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mX27S-ip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izp4aa3nse6g9rqttmh0.gif" alt="Sticky Nav"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#day-25-event-capture-propagation-bubbling-and-once"&gt;
  &lt;/a&gt;
  🥍  Day 25 Event Capture, Propagation, Bubbling and Once
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;addEventListener&lt;/code&gt; has edge cases. The event bubbling can occur when I capture a selected element. If it happens to be a child element, it should also invoke its parent elements. I can apply similar behavior from parent element to its children elements by adding a key value, &lt;code&gt;capture: true&lt;/code&gt;. When I select a parent element, it will run the function all the way down calling all of its children elements. &lt;code&gt;e.stopPropagation()&lt;/code&gt; can stop this event bubbling. Once implemented, when I select the child element, it will not trigger its parent elements. The &lt;code&gt;once: true&lt;/code&gt; only allows a one-time add event listener.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k5-HaPrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ns1c0x63ch6nbngyr494.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k5-HaPrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ns1c0x63ch6nbngyr494.gif" alt="Event Capture, Propagation, Bubbling and Once"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#day-26-stripe-follow-along-dropdown"&gt;
  &lt;/a&gt;
  🪢  Day 26 Stripe Follow Along Dropdown
&lt;/h3&gt;

&lt;p&gt;This is a creative way to set up a div element where each dropdown follows its respective links sizes. A function can be invoked along with &lt;code&gt;mouseenter&lt;/code&gt; and &lt;code&gt;mouseleave&lt;/code&gt; add event listeners. It is as simple as adding &lt;code&gt;css&lt;/code&gt; class as I click (or hover above) the link, and remove the class as I move away (or hover away from) the link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--16OA1KNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul3wxegq0yo5y6m9p32v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--16OA1KNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul3wxegq0yo5y6m9p32v.gif" alt="Stripe Follow Along Dropdown"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#day-27-click-and-drag-to-scroll"&gt;
  &lt;/a&gt;
  🥍  Day 27 Click and Drag to Scroll
&lt;/h3&gt;

&lt;p&gt;There will be four add event listeners, &lt;code&gt;mousedown&lt;/code&gt;, &lt;code&gt;mouseleave&lt;/code&gt;, &lt;code&gt;mouseup&lt;/code&gt; and &lt;code&gt;mousemove&lt;/code&gt;. I can set the &lt;code&gt;isDown&lt;/code&gt; variable as boolean, and set it as &lt;code&gt;false&lt;/code&gt; on both &lt;code&gt;mouseleave&lt;/code&gt; and &lt;code&gt;mouseup&lt;/code&gt; when it is no longer on the clicked state. For the &lt;code&gt;mousemove&lt;/code&gt; add event listener, if the &lt;code&gt;isDown&lt;/code&gt; is false, I can stop the function from running. I had to extract the &lt;code&gt;event.pageX&lt;/code&gt; value in order to do a bit of math calculations as sliding horizontally with the &lt;code&gt;.offsetLeft&lt;/code&gt; and &lt;code&gt;.scrollLeft&lt;/code&gt; attributes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--El3blLFL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw0k9pepq5undl8alm45.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--El3blLFL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw0k9pepq5undl8alm45.gif" alt="Click and Drag to Scroll"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#%F0%9F%8F%8E-day-28-video-speed-controller-ui"&gt;
  &lt;/a&gt;
  🏎  Day 28 Video Speed Controller UI
&lt;/h3&gt;

&lt;p&gt;This challenge is an extension of day 11 task on custom video player. When I am watching a youtube video, it's normal to adjust the video speed. This is exactly that! There is a lot more on playing around with math calculations in order to set the playback rate, and I can encapsulate this behavior through a function which would be invoked through an add event listener, &lt;code&gt;mousemove&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NT0zFfEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ibv0g1354n2c7pw1ezq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NT0zFfEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ibv0g1354n2c7pw1ezq.gif" alt="Video Speed Controller UI"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-day-29-countdown-clock"&gt;
  &lt;/a&gt;
  ⌚️  Day 29 Countdown Clock
&lt;/h3&gt;

&lt;p&gt;Similar approach to day 2 challenge. Convert the seconds available to minutes and hours, and set a &lt;code&gt;.reset()&lt;/code&gt; function whenever the add event listener &lt;code&gt;click&lt;/code&gt; or &lt;code&gt;submit&lt;/code&gt; a new selection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YEgZjqtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixgqqfrfizwv26px6rxa.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YEgZjqtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixgqqfrfizwv26px6rxa.gif" alt="Countdown Clock"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#day-30-whack-a-mole-game"&gt;
  &lt;/a&gt;
  🐰  Day 30 Whack A Mole Game
&lt;/h3&gt;

&lt;p&gt;This is probably my most favorable one, and of course it's a game with plain JS. 😆&lt;/p&gt;

&lt;p&gt;There are a few functions providing random time, random holes where the mole showing up, and adding score when user successfully whack the mole.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OllVtTzv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xuouz8ckf9yzbuo6mfwc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OllVtTzv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xuouz8ckf9yzbuo6mfwc.gif" alt="Whack A Mole Game"&gt;&lt;/a&gt;&lt;/p&gt;






&lt;center&gt;
&lt;br&gt;
&lt;a href="https://fentybit.me/"&gt;&lt;strong&gt;fentybit&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://github.com/fentybit"&gt;GitHub&lt;/a&gt; | &lt;a href="https://twitter.com/fentybit"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/fentybit/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;

</description>
      <category>javascript</category>
      <category>firstyearincode</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>cURL Tips for Performance Engineers 💫</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Wed, 01 Sep 2021 15:46:36 +0000</pubDate>
      <link>https://dev.to/qainsights/curl-tips-for-performance-engineers-1j0f</link>
      <guid>https://dev.to/qainsights/curl-tips-for-performance-engineers-1j0f</guid>
      <description>&lt;p&gt;In this blog post, we are going to see about CURL tips for performance engineers. I have already published a YouTube video about &lt;a href="https://www.youtube.com/watch?v=kH84nvC8qOk" rel="noreferrer noopener"&gt;cURL for Performance Engineers&lt;/a&gt;. We are going to see a few more tips about cURL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/kH84nvC8qOk"&gt;https://youtu.be/kH84nvC8qOk&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Headers to cURL&lt;/h2&gt;

&lt;p&gt;If you want to convert the headers to cURL command, there are a couple of ways you can do it. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clone this repository https://github.com/curl/h2c&lt;/li&gt;
&lt;li&gt;Launch WSL for Windows terminal.&lt;/li&gt;
&lt;li&gt;Store your headers in a file, e.g. example.com&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;GET / HTTP/1.1
Host: example.com&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, issue the command &lt;code&gt;./h2c &amp;lt; example.com&lt;/code&gt;. Here is the output you will get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl --http1.1 --header Accept: --header User-Agent: https://example.com/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you prefer the online version, you can check this URL https://curl.se/h2c/&lt;/p&gt;

&lt;p&gt;The online version will send your crunched data and converted on the curl server.&lt;/p&gt;

&lt;p&gt;If you want to see more options for ./h2c, issue &lt;code&gt;./h2c -h&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;h2c.pl [options] &amp;lt; file
 -a   Allow curl's default headers
 -d   Output man page HTML links after command line
 -h   Show short help
 -H   Output HTTP generated URLs instead
 -i   Ignore HTTP version
 --libcurl Output libcurl code instead
 -n   Output notes after command line
 -s   Use short command line options
 -v   Add a verbose option to the command line&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Where do you get the valid headers?&lt;/h2&gt;

&lt;p&gt;You can copy and paste the request headers from the browser. Open your favorite browser and launch the &lt;strong&gt;Developer Tools &lt;/strong&gt;and go to &lt;strong&gt;Network &lt;/strong&gt;tab.&lt;/p&gt;

&lt;p&gt;Select the request and navigate to the &lt;strong&gt;Request Headers&lt;/strong&gt; section to copy the source format of the headers as shown below, and then save it as a file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/08/image-13.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sreMi9ny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/08/image-13.png" alt="cURL Tips for Performance Engineers - Copy the request headers"&gt;&lt;/a&gt;cURL Tips for Performance Engineers - Copy the request headers&lt;/p&gt;

&lt;p&gt;If you would like to copy the cURL command directly from the browser, you can right-click on the request where you can see the cURL options as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/08/image-14.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5f_s2K6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/08/image-14.png" alt="Copy options for cURL"&gt;&lt;/a&gt;Copy options for cURL&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;copy as cURL(cmd)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you would like to create a JMeter test plan, launch JMeter, go to &lt;strong&gt;Tool &amp;gt; Import from cURL&lt;/strong&gt; and enter the command as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/08/image-15.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3OC1UEEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/08/image-15.png" alt="Create Test Plan from cURL in JMeter"&gt;&lt;/a&gt;Create Test Plan from cURL in JMeter&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create Test Plan&lt;/strong&gt; which will create an &lt;strong&gt;HTTP Request Sampler&lt;/strong&gt; and the &lt;strong&gt;HTTP Header Manager&lt;/strong&gt; element.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;cURL is a great utility for a quick smoke test and for automating stuffs. In performance testing, you can create cURL commands directly from the browser, or from the request headers. In JMeter, you can createa test plan directly from the cURL command.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>performance</category>
      <category>webperf</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Relational Data Services in Azure</title>
      <author>geetcloud</author>
      <pubDate>Wed, 01 Sep 2021 15:26:43 +0000</pubDate>
      <link>https://dev.to/geetcloud/relational-data-services-in-azure-151f</link>
      <guid>https://dev.to/geetcloud/relational-data-services-in-azure-151f</guid>
      <description>&lt;p&gt;&lt;strong&gt;In this article&lt;/strong&gt;, we are going to see all of the Relational Data Services that are available in Azure&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Infrastructure as a service (IaaS) - SQL Server on VMs&lt;/p&gt;

&lt;p&gt;Platform as a Service (PaaS) - Azure SQL Database , Azure SQL Managed&lt;br&gt;
Instance, Azure Database for MySQL, PostgreSQL &amp;amp; MariaDB.&lt;/p&gt;

&lt;p&gt;For Hybrid On-Premise extension - SQL Stretch Database&lt;/p&gt;

&lt;p&gt;For IoT - Azure SQL Edge&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#sql-server-on-azure-vm"&gt;
  &lt;/a&gt;
  SQL Server on Azure VM
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--saYcRp5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Fk4UtQIf0ew/YRm2YRH0xsI/AAAAAAAAAIM/9D9v1FDBq_sI-B1YXB5V7rrtwFSOUGk7ACLcBGAsYHQ/w200-h200/sqlonvm.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--saYcRp5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Fk4UtQIf0ew/YRm2YRH0xsI/AAAAAAAAAIM/9D9v1FDBq_sI-B1YXB5V7rrtwFSOUGk7ACLcBGAsYHQ/w200-h200/sqlonvm.jpeg" alt="SQL Server on Azure VM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With SQL Server on Azure VM, on-premise SQL workloads can be easily shifted to Azure while maintaining complete SQL Server compatibility and operating system-level access.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Infrastructure as Service (IaaS) with a complete set of features.&lt;/li&gt;
&lt;li&gt;  Requires no code changes except the connection string.&lt;/li&gt;
&lt;li&gt;  Full control over the server in the cloud as similar to on-premise server.&lt;/li&gt;
&lt;li&gt;  Leverage existing expertise in SQL Server and continue working the same way as on the on-premise server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#azure-sql-database"&gt;
  &lt;/a&gt;
  Azure SQL Database
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6n7djrk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-YKWOsdHAttQ/YRm4MtRKalI/AAAAAAAAAIk/6VIYOrZ8t7Qv80pLHqw1dpmspMKeg8ZQgCLcBGAsYHQ/w200-h200/Azure%252BSQL%252BDatabase.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6n7djrk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-YKWOsdHAttQ/YRm4MtRKalI/AAAAAAAAAIk/6VIYOrZ8t7Qv80pLHqw1dpmspMKeg8ZQgCLcBGAsYHQ/w200-h200/Azure%252BSQL%252BDatabase.png" alt="Azure SQL Database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Azure SQL Database is the most preferred solution for normal relational and transactional databases. Azure provides the option to create a database server and deploy our databases to the cloud. A SQL Database server is a logical construct that acts as a central administrative point for multiple single or pooled databases, logins, firewall rules, auditing rules, threat detection policies, and failover groups. Azure SQL Database is available with several options: Single Database, Elastic Pool, and Managed Instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.blogger.com/u/1/blog/post/edit/7467356195560229083/2964710571868763031#"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e8MVL62N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-A7_BCuswNxE/YRm5hMmBZlI/AAAAAAAAAI4/GKMcMHWvBSsbAuniK6ozw0NxNk5PNqAaACLcBGAsYHQ/w640-h301/Screen%252BShot%252B2021-08-15%252Bat%252B5.30.30%252BPM.png" alt="Azure SQL Managed Instance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#azure-sql-managed-instance"&gt;
  &lt;/a&gt;
  Azure SQL Managed Instance
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eLMV8w04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Zao380bPz-Q/YRm4xkI_JLI/AAAAAAAAAIw/molZ0pGPZbQ9uO8FGeJKLcdX0n5ztsWEwCLcBGAsYHQ/w198-h200/sqlmanagedinstance.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eLMV8w04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Zao380bPz-Q/YRm4xkI_JLI/AAAAAAAAAIw/molZ0pGPZbQ9uO8FGeJKLcdX0n5ztsWEwCLcBGAsYHQ/w198-h200/sqlmanagedinstance.png" alt="Azure SQL Managed Instance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Azure SQL Database restricts some of the administrative features available in SQL Server. Within Azure SQL Managed Instance, we have full control over the instance, as much as you would for an on-premises server. We can deploy as many as databases we want in the server.&lt;/p&gt;

&lt;p&gt;With the support of other Azure Services, managed instance automates backups, software updates, monitoring etc., it is always up-to-date.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy lift and shift - Fully-fledged SQL instance with 100%
compatibility with on-premise instance.

&lt;ul&gt;
&lt;li&gt;  Fully Managed PaaS service with a complete set of features.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; Enhanced Security and isolation with VNet and a private IP address.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#azure-database-for-mysql"&gt;
  &lt;/a&gt;
  Azure Database for MySQL
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.blogger.com/u/1/blog/post/edit/7467356195560229083/2964710571868763031#"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OAdqSUML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-TGSqkhqE-58/YRnHvpFMpPI/AAAAAAAAAJQ/dDYTHXy5NvEStDJPUm2WDdDLQmcb80CzQCLcBGAsYHQ/w200-h200/mysql.jpeg" alt="Azure Database for MySQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MySQL is the leading open source relational database for Linux, Apache, MySQL, and PHP (LAMP) stack apps.&lt;/p&gt;

&lt;p&gt;Azure Database for MySQL based on the MySQL free community edition offers high availability and elastic scaling to open-source mobile and web apps or migrate MySQL workloads to the cloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Built-in high availability features&lt;/li&gt;
&lt;li&gt;  Enhanced security with compliance&lt;/li&gt;
&lt;li&gt;  Automatic backups and point-in-time restore for up to 35 days&lt;/li&gt;
&lt;li&gt;  Easy scaling option&lt;/li&gt;
&lt;li&gt;  Pay-as-you-go pricing - only pay for what you use.&lt;/li&gt;
&lt;li&gt;  Offers integration with Azure App Services and Azure Kubernete Services for simplified development&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#azure-database-for-postgresql"&gt;
  &lt;/a&gt;
  Azure Database for PostgreSQL
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-rmjuZ_1mvHg/YRnLJ1SVvXI/AAAAAAAAAJY/CmVOVPLE_RQifZ-_rcny1zSJOvwpuzEFgCLcBGAsYHQ/s161/postgresql.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nU8AvDDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-rmjuZ_1mvHg/YRnLJ1SVvXI/AAAAAAAAAJY/CmVOVPLE_RQifZ-_rcny1zSJOvwpuzEFgCLcBGAsYHQ/w180-h200/postgresql.png" alt="Azure Database for PostgreSQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Azure PostgreSQL helps in building scalable, secure, and fully managed enterprise-ready apps on open-source PostgreSQL, scale out single-node PostgreSQL with high performance, or migrate PostgreSQL and Oracle workloads to the cloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Offers extensions which MySQL does not have&lt;/li&gt;
&lt;li&gt;  PostgreSQL Extensions provides additional custom data types, functions, JSONB, full text-search, index types, language-types, caching, geospatial support etc.,&lt;/li&gt;
&lt;li&gt;  Supports geometric data such as lines, circles and polygons&lt;/li&gt;
&lt;li&gt;  Supports both relational and non-relational data&lt;/li&gt;
&lt;li&gt;  Provides high performance horizontal scaling using Hyperscale (Citus)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Similarities with MySQL&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Both are Open Source, and support relational database and fully managed services.&lt;/li&gt;
&lt;li&gt;  Makes it easier to lift and shift your applications to Azure&lt;/li&gt;
&lt;li&gt;  No need to convert your datastore to SQL Server or SQL Database&lt;/li&gt;
&lt;li&gt;  Use the same tools as SQL Database for scaling and monitoring&lt;/li&gt;
&lt;li&gt;  Intelligent Performance Recommendations&lt;/li&gt;
&lt;li&gt;  Enhanced Security Capabilities&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#azure-maria-db"&gt;
  &lt;/a&gt;
  Azure Maria DB
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-FOz1A0EhMeI/YRnLdo5SrZI/AAAAAAAAAJg/JywNIKAGvukvgRjcsHEL_cLCgUjt1sEcQCLcBGAsYHQ/s225/azuremariadb.jpeg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ena1pbm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-FOz1A0EhMeI/YRnLdo5SrZI/AAAAAAAAAJg/JywNIKAGvukvgRjcsHEL_cLCgUjt1sEcQCLcBGAsYHQ/w200-h200/azuremariadb.jpeg" alt="Azure Maria DB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MariaDB&lt;/strong&gt; is a newer database management system, created by the original developers of MySQL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Built-in support for temporal data. A table can hold several versions of data, enabling an application to query the data as it appeared at some point in the past&lt;/li&gt;
&lt;li&gt;  Offers compatibility with Oracle Database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Azure MariaDB&lt;/strong&gt; based on free community edition offers high availability and elastic scaling to open-source mobile and web apps with a managed community MariaDB database service&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features of Azure MariaDB&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Relational Database as a fully managed service&lt;/li&gt;
&lt;li&gt;  High Availability&lt;/li&gt;
&lt;li&gt;  Scaling as needed within seconds&lt;/li&gt;
&lt;li&gt;  Automatic backups and point-in-time restore for up to 35 days&lt;/li&gt;
&lt;li&gt;  Support for many languages and frameworks&lt;/li&gt;
&lt;li&gt;  Enhanced Security Capabilities with Azure IP Advantage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hybrid-database-using-sql-server-stretch-db"&gt;
  &lt;/a&gt;
  Hybrid Database using SQL Server Stretch DB
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-BFQX_Ja3y7s/YRnL3XgNPYI/AAAAAAAAAJo/8v_Te3AV-68Ny69QJ3KKycWNvJ2K2RcfwCLcBGAsYHQ/s270/Sqlstretch.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5plLxo8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-BFQX_Ja3y7s/YRnL3XgNPYI/AAAAAAAAAJo/8v_Te3AV-68Ny69QJ3KKycWNvJ2K2RcfwCLcBGAsYHQ/w200-h139/Sqlstretch.png" alt="SQL Server Stretch DB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenarios where we choose to go for the hybrid option&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  When you have an existing database that is running out of space&lt;/li&gt;
&lt;li&gt;  When you have an on premise server with large database running lot of applications&lt;/li&gt;
&lt;li&gt;  To retain existing Traditional Architecture of Legacy system. The hardest option out of the rest.&lt;/li&gt;
&lt;li&gt;  For these scenarios, upgrading to a new server might be difficult and painful. One option would be to extend "cool" data to the cloud, so we can extend the life of the on premise server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using Stretch Database, data can be split between on-premises storage and cloud storage. We can push the cold, historical data to the cloud (which will be accessed rarely) and warm active data can be retained on-premises to boost the performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#azure-sql-edge"&gt;
  &lt;/a&gt;
  Azure SQL Edge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-jvan2s6c8L4/YRnNKmOaruI/AAAAAAAAAJw/wI1bc7y2PJ0ER84jxRv9uFbPgj7SZ9NVwCLcBGAsYHQ/s272/sqledge.jpeg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R2HW3nnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-jvan2s6c8L4/YRnNKmOaruI/AAAAAAAAAJw/wI1bc7y2PJ0ER84jxRv9uFbPgj7SZ9NVwCLcBGAsYHQ/w200-h193/sqledge.jpeg" alt="Azure SQL Edge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Azure SQL Edge is an optimized relational database engine that is specially designed for IoT and IoT Edge deployments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Able to create excellent data storage and processing layer for different IoT applications.&lt;/li&gt;
&lt;li&gt;  Since it is built on top of the SQL Server database engine, we can use the same T-SQL programming in SQL Server&lt;/li&gt;
&lt;li&gt;  Provides the most demanding machine learning and artificial intelligence capabilities&lt;/li&gt;
&lt;li&gt;  Its built-in streaming capability helps you with complex event processing and realtime analytics&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This time, we covered the Relational data store related services that are available in Azure. Stay tuned to learn more about other types of data stores in Azure, as this is just the beginning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/en-ca/product-categories/databases/"&gt;https://azure.microsoft.com/en-ca/product-categories/databases/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/modules/explore-relational-data-offerings/2-azure-data-services"&gt;https://docs.microsoft.com/en-us/learn/modules/explore-relational-data-offerings/2-azure-data-services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/architecture/guide/technology-choices/data-store-overview"&gt;https://docs.microsoft.com/en-us/azure/architecture/guide/technology-choices/data-store-overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading-this-post"&gt;
  &lt;/a&gt;
  Thanks for reading this post!
&lt;/h2&gt;

&lt;p&gt;I hope this article is informative and helpful in some way. If it is, please like and share this article. Follow me on &lt;a href="https://twitter.com/geetcloud"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/sangeetha-karthik/"&gt;LinkedIn&lt;/a&gt; for more related tips and posts.&lt;/p&gt;

&lt;p&gt;Happy learning! &lt;/p&gt;

</description>
      <category>azure</category>
      <category>mysql</category>
      <category>postgres</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Developing for the web with Flask; creating a web application.</title>
      <author>Billy</author>
      <pubDate>Wed, 01 Sep 2021 15:09:17 +0000</pubDate>
      <link>https://dev.to/billyndirangu/developing-for-the-web-with-flask-creating-a-web-application-2257</link>
      <guid>https://dev.to/billyndirangu/developing-for-the-web-with-flask-creating-a-web-application-2257</guid>
      <description>&lt;p&gt;Hey there, In this tutorial i will be showing you how to develop your first fullstack web-app project with flask-python.&lt;br&gt;
In this tutorial or rather a documentation of how i did it, buckle up dev, and may the ride begin!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic python language skills.&lt;/li&gt;
&lt;li&gt;Basic command line commands.(linux)&lt;/li&gt;
&lt;li&gt;PIP( a package manager for python)
&lt;a href="https://pip.pypa.io/en/stable/installation/"&gt;Installation&lt;/a&gt;
allows you to install required libraries for a specific project, i.e: Flask&lt;/li&gt;
&lt;li&gt;IDE(vscode, atom, sublime)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.python.org/downloads/"&gt;Python&lt;/a&gt; installed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#launch"&gt;Launch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inst"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#temp"&gt;Templating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#statements"&gt;Conditionals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#loops"&gt;Looping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#forms"&gt;Web Forms&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#configure"&gt;Configurations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#form-templates"&gt;Templating forms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#db"&gt;Database&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#migrations"&gt;Database migrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#models"&gt;Database models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrate"&gt;Migrating Data to the DB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#update-db"&gt;Adding data to the database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#posts"&gt;Viewing Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#launch"&gt;
  &lt;/a&gt;
  Launch &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now setup up your project structure.&lt;br&gt;
launch your code editor and create a directory in it.&lt;br&gt;
&lt;code&gt;mkdir blogger &amp;amp;&amp;amp; cd blogger&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now create your starting files:
&lt;code&gt;mkdir app &amp;amp;&amp;amp; cd app&lt;/code&gt;
&lt;code&gt;touch app.py routes.py models.py&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;While in the app directory create two directories
&lt;code&gt;mkdir templates static&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Navigate to the root directory &lt;code&gt;blogger&lt;/code&gt; and create the following files
&lt;code&gt;touch blog.py config.py&lt;/code&gt;
all is set and your project structure should be looking like this:-
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
     &lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt; &lt;span class="c1"&gt;#html files directory
&lt;/span&gt;     &lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="c1"&gt;#css&amp;amp; images directory
&lt;/span&gt;     &lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
     &lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="c1"&gt;#site navigation capability
&lt;/span&gt;     &lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="c1"&gt;#db logic goes here
&lt;/span&gt;&lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="c1"&gt;# main apprunning module
&lt;/span&gt;&lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="c1"&gt;#tip: identation shows file location, eg; templates is in app dir
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When working with external libraries it is good to run your project in a virtual environment, go ahead and install virtualenv via the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt;
&lt;span class="c1"&gt;#create a virtual environment 
&lt;/span&gt;&lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="n"&gt;bloggerenv&lt;/span&gt;
&lt;span class="c1"&gt;# you can name your env any name
# activating 
# windows
&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;bloggerenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;span class="c1"&gt;# linux
&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;bloggerenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;

&lt;span class="c1"&gt;#deactivating the env
&lt;/span&gt;&lt;span class="n"&gt;deactivate&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#installing-libraries"&gt;
  &lt;/a&gt;
  Installing libraries &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We use the PIP to install the required libraries&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bloggerenv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt; 
&lt;span class="c1"&gt;# this are the underlying packages to start a project
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;open the &lt;strong&gt;init&lt;/strong&gt;.py in app directory type this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#__init__.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#flask object instance
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;first we import the Flask class from the flask module.&lt;/li&gt;
&lt;li&gt;next we create the app object as an instance of the Flask class.&lt;/li&gt;
&lt;li&gt;then import the &lt;code&gt;routes&lt;/code&gt; module, to be created later&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open the &lt;strong&gt;routes.py&lt;/strong&gt; file and we create the first route and test if everything is working.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/index'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line imports the application instance.&lt;br&gt;
This is a view function, what it does it returns the string Hello World, to the browser when the app is run.&lt;br&gt;
The two first lines &lt;code&gt;@app.route&lt;/code&gt; are called &lt;strong&gt;decorators&lt;/strong&gt;, they create urls for the web-app.&lt;/p&gt;

&lt;p&gt;Head over to the blog.py file and create the app running logic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#blog.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__:
    app.run()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this our app is done and can be previewed in the browser.But before running Flask needs to be told how to import it, through the &lt;code&gt;FLASK_APP&lt;/code&gt; environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bloggerenv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using a windows OS use the keyword &lt;code&gt;set&lt;/code&gt; instead of &lt;code&gt;export&lt;/code&gt;.&lt;br&gt;
You can run your app in the terminal now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bloggerenv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Serving&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="s"&gt;'blog.py'&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lazy&lt;/span&gt; &lt;span class="n"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;production&lt;/span&gt;
   &lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;development&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;production&lt;/span&gt; &lt;span class="n"&gt;deployment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
   &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;production&lt;/span&gt; &lt;span class="n"&gt;WSGI&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Debug&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Press&lt;/span&gt; &lt;span class="n"&gt;CTRL&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the url &lt;code&gt;http://127.0.0.1:5000/&lt;/code&gt; in the browser.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yY8G0Eul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.miguelgrinberg.com/static/images/mega-tutorial/ch01-hello-world.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yY8G0Eul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.miguelgrinberg.com/static/images/mega-tutorial/ch01-hello-world.png" alt="App preview"&gt;&lt;/a&gt;&lt;br&gt;
Voila! app running and good.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#templating"&gt;
  &lt;/a&gt;
  Templating &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In this section i'll show how to work with templates to generate more elaborate web pages with more complex structures. &lt;br&gt;
We are going to use Jinja2, it is a templating engine for &lt;br&gt;
flask.&lt;br&gt;
We are going to store the template/html files in the templates folder.&lt;br&gt;
Create an &lt;code&gt;index.html&lt;/code&gt; file and open it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; 
               &lt;span class="o"&gt;|-&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I want the homepage to display a custom welcome message to the user&lt;br&gt;
In the routes file create a python dictionary that holds our mock user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/index'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Developer'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Home'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we import the &lt;code&gt;render_template&lt;/code&gt; function from the &lt;code&gt;flask&lt;/code&gt; module. It handles &lt;code&gt;html&lt;/code&gt; rendering in python&lt;br&gt;
Then we create mock data as a python dictionary for a user, this will change henceforth as we include a database.&lt;/p&gt;

&lt;p&gt;Let's code the &lt;code&gt;index.html&lt;/code&gt; file:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ title }} - blogger&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello, {{ user.username }}!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run this version of the app, we get a nice preview with the username printed out. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vcY-0NDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jinja.palletsprojects.com/en/3.0.x/templates/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vcY-0NDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jinja.palletsprojects.com/en/3.0.x/templates/" alt="Jinja2"&gt;&lt;/a&gt;substitutes &lt;code&gt;{{ ... }}&lt;/code&gt; blocks with corresponding values, given by the arguments provided in the &lt;code&gt;render_template()&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JDOCh6Dm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ys86v10pwdxq9d0jlgy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JDOCh6Dm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ys86v10pwdxq9d0jlgy.png" alt="App in browser preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conditional-statements-in-jinja2"&gt;
  &lt;/a&gt;
  Conditional statements in jinja2 &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Jinja2 supports control statements given inside &lt;code&gt;{%..%}&lt;/code&gt;&lt;br&gt;
Add a conditional statement to the &lt;code&gt;index.html&lt;/code&gt; that will print the documents title when provided in the &lt;code&gt;render_template()&lt;/code&gt; call and prints out a default title if None is provided.&lt;br&gt;
Put this block in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% if title %}
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ title }}&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
{% else %}
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;App | blogger&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;And yes jinja2 also supports looping, what did you expect!😂&lt;br&gt;
lets add a mock data in our &lt;code&gt;routes.py&lt;/code&gt; file for posts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/index'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Developer'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'author'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Guido'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'I designed python language'&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="s"&gt;'author'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Jack'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Blue is a cool color'&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Homer'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;I create a list &lt;code&gt;posts&lt;/code&gt; with nested dictionaries, where each element is a dictionary that has &lt;code&gt;author&lt;/code&gt; &amp;amp; &lt;code&gt;body&lt;/code&gt; fields.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now head on to &lt;code&gt;index.html&lt;/code&gt; and handle the rendering of posts in the browser, posts can be of any number and we need to tell the temlate how to render them all, for that case we use a &lt;code&gt;for&lt;/code&gt; loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ title }} - blogger&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    {% if user.username %}
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello, {{ user.username }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% else %}
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello, World!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endif %}

    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;My posts!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {% for post in posts %}
        &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;{{ post.author.username }}&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ post.body }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endfor %}
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Give this new version a try and voila!!🤯🤯&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nL99iB-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgxp6my041evvt259unk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nL99iB-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgxp6my041evvt259unk.png" alt="app posts preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the structure of the app gets bigger and bigger we need to separate some preferences, for example, when linking css files or having a navbar in our website, its needed anyway.😊  we ought to do it in a separate template file.&lt;br&gt;
We call this template inheritance:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go ahead and create; &lt;code&gt;base.html&lt;/code&gt; in the templates directory.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- base.html --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ url_for('static', filename='style.css') }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {% block title %} 
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    {% endblock %}
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    {% block content %}

    {% endblock %}
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With this we can now simplify our &lt;code&gt;index.html&lt;/code&gt; file:-&lt;br&gt;
to inherit a template file we use the &lt;code&gt;{% extends %}&lt;/code&gt; tag, at the top of the child template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% extends 'base.html' %}
{% block title %}
    {% if user.username %}
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ title }}- blogger&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    {% else %}
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Blogger&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endif %}
{% endblock %}
{% block content %}
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;My posts!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {% for post in posts %}
        &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;{{ post.author.username }}&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ post.body }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endfor %}
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Template inheritance allows us to have the same look in every page without duplication.&lt;br&gt;
Hence enabling us to be 'DRY'.&lt;br&gt;
If you go and run this the results will be the same as above.&lt;/p&gt;

&lt;p&gt;As the application growsn it will require more functionality and features; like web forms, etc.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#web-forms"&gt;
  &lt;/a&gt;
  Web forms. &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In this chapter I'll show you how to create web forms to take user input via the browser.&lt;br&gt;
We use an extension called &lt;strong&gt;Flask-WTF&lt;/strong&gt;, it is a wrapper found in the package WTForms, that integrates well with Flask.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bloggerenv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wtf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#configurations"&gt;
  &lt;/a&gt;
  Configurations &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;For tutorial purposes I am going to create just a simple form.&lt;br&gt;
But before that, I am going to set some configuration variables, for &lt;em&gt;separation of concerns&lt;/em&gt; i am going to define my app configs in the &lt;code&gt;config.py&lt;/code&gt; module in the top most directory.&lt;br&gt;
I'll use a class to store any config variables and new configuration variables can be added here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config.py
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'SECRET_KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;'you-will-never-guess'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the &lt;code&gt;SECRET_KEY&lt;/code&gt; configuration variable is an important config in most flask apps, it is used by the Flask-WTF to protect web forms against the &lt;a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery"&gt;Cross Site Request Forgery&lt;/a&gt;(CSRF) attack.&lt;br&gt;
The value of the secret key is set as an expression with two terms, joined by the or operator. The first term looks for the value of an environment variable, also called &lt;code&gt;SECRET_KEY&lt;/code&gt;. The second term, is just a hardcoded string. &lt;br&gt;
For now the app is small and doesn't require much security, i'll just use the hardcoded string, but when deploying it needs to be replaced with a unique key, can be generated in the python shell using the &lt;code&gt;urandom&lt;/code&gt; module&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urandom&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;urandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\x1d\x00\x08\x8b&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="se"&gt;\xd8\xae\xe9&lt;/span&gt;&lt;span class="s"&gt;....
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that i have the config set up, i have to tell Flask to read and apply it. This can be done right after the flask app instance in the &lt;code&gt;__init__.py&lt;/code&gt; using the &lt;code&gt;app.config.from_object()&lt;/code&gt; method:.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Creating&lt;/strong&gt; the first form, once again having the separation of concerns in mind, in the &lt;code&gt;app directory&lt;/code&gt; create a file &lt;code&gt;forms.py&lt;/code&gt;&lt;br&gt;
The Flask-WTF extension uses Python classes to represent web forms. A form class simply defines the fields of the form as class variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#app/forms.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_wtf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FlaskForm&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextAreaField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SubmitField&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms.validators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DataRequired&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FlaskForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'User name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TextAreaField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
    &lt;span class="n"&gt;submit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SubmitField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Submit'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Import the FlaskForm base class.&lt;/li&gt;
&lt;li&gt;For each form you will need you create a separate class variable, each field is given a label as the first argument.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;validators&lt;/code&gt; field is used to attach validation behaviors to form fields.
-The &lt;code&gt;DataRequired&lt;/code&gt; validator checks that a field is not submitted empty.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#form-templates"&gt;
  &lt;/a&gt;
  Form Templates &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Next is to add the form to a HTML template, so it gets rendered to the web page.&lt;br&gt;
The &lt;code&gt;LoginForm&lt;/code&gt; class knows how to render itself as HTML, this makes the next part fairly simple.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a file &lt;code&gt;new_post.html&lt;/code&gt; in &lt;code&gt;app/template/new_post.html&lt;/code&gt;
N/B:For uniformity inherit the &lt;code&gt;base.html&lt;/code&gt; template inside the new template.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% extends 'base.html' %}
{% block title %}
    {% if title %}
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ title }}- blogger&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    {% else %}
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Blogger&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endif %}
{% endblock %}
{% block content %}
    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt; &lt;span class="na"&gt;novalidate&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {{ form.hidden_tag() }}
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
            {{ form.username.label }} &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
            {{ form.username(size=32) }}
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
            {{ form.post.label }} &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
            {{ form.post(size=120) }}
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
            {{ form.submit() }}
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This template expects a form object be instantiated in the &lt;code&gt;PostForm&lt;/code&gt; class to be given as an argument.Which is referenced as &lt;code&gt;form&lt;/code&gt;, the argument will be sent by the &lt;code&gt;post&lt;/code&gt; view function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the html &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element is used as  the container for the web form.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;action&lt;/code&gt; attribute tells the browser the url to use when the form data is submitted. when set to an empty string the form is submitted to the current URL in the browser.&lt;/li&gt;
&lt;li&gt;The method attribute specifies the HTTP request method to be used when submitting the form to the server.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;novalidate&lt;/code&gt; tells the browser not to validate the forms as that is the work of Flask application running in the server.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;form.hidden_tag()&lt;/code&gt; template argument generates a hidden field that includes a token that is used to protect the form against CSRF attacks.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;{{ form.&amp;lt;field_name&amp;gt;.label }}&lt;/code&gt; replaces the label element, and the &lt;code&gt;{{ form.&amp;lt;field_name&amp;gt;() }}&lt;/code&gt; goes where the form field is needed.
&lt;a href="https://jinja.palletsprojects.com/en/3.0.x/templates/"&gt;Read more&lt;/a&gt; on the jinja2 documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#form-view-function"&gt;
  &lt;/a&gt;
  Form view function.
&lt;/h4&gt;

&lt;p&gt;In order to render the Form to the web page a route functionality is needed, In the routes.py module add the following view function at the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#....
&lt;/span&gt;
&lt;span class="c1"&gt;# route to the post form
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/post'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_post.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Add post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Here i imported the &lt;code&gt;PostForm&lt;/code&gt; class from &lt;em&gt;forms.py&lt;/em&gt;, instantiated an  object &lt;code&gt;form = PostForm()&lt;/code&gt; from it and sent the object down to the template &lt;code&gt;form=form&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;form=form&lt;/code&gt; parses the form object to the template form, it is what's required to render the form fields.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you run the app and navigate to &lt;code&gt;http://127.0.0.1:5000/post&lt;/code&gt; a html form is displayed. But when you try to submit it a &lt;code&gt;method not allowed&lt;/code&gt; is thrown. I'll fix that in a minute.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qVaT0-Nb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl0u5oddt8ztgextbrjy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qVaT0-Nb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl0u5oddt8ztgextbrjy.png" alt="app form fields jinja2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next I'm going to create the navigation links inside the &lt;code&gt;base.html&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- .... --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;Blogger:&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ url_for('index') }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ url_for('post') }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Add Post&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- .... --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the above block just below the &lt;code&gt;body&lt;/code&gt; tag, when the app is run we get a simple navbar at the top. That actually works 😉.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As you noticed when i created the navbar links i used a different method, the &lt;code&gt;url_for()&lt;/code&gt; function from Flask. which generates URLs using iternal mapping of urls to view functions.&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iii-web-forms"&gt;Read&lt;/a&gt; ahead and practice working with forms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cEGYtobG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5afyw1bs6wodmc6t9yc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cEGYtobG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5afyw1bs6wodmc6t9yc.png" alt="App navbar preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember when you tried running the app and an error came shouting, that was because the &lt;code&gt;post&lt;/code&gt; view function didn't understand what to do.&lt;br&gt;
To fix it we add the &lt;code&gt;methods=['POST', 'GET']&lt;/code&gt; in the &lt;code&gt;route decorator&lt;/code&gt;.&lt;br&gt;
The new updated route should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# route to the post form
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hey, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;! Your post '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'  was successfully submitted! "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/index'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_post.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Add post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Here we use an &lt;code&gt;if&lt;/code&gt; statement to validate the &lt;code&gt;form&lt;/code&gt; data in the view function.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;validated_on_submit()&lt;/code&gt; runs validation of a form, Call validate only if the form is submitted. This is a shortcut for form.is_submitted() and form.validate().&lt;/li&gt;
&lt;li&gt;Here I use the &lt;code&gt;print()&lt;/code&gt; function to print a custom message in the terminal, later I will be using the Flask &lt;code&gt;flash()&lt;/code&gt; function to flash messages in the web page.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;redirect&lt;/code&gt;: this function redirects to a specified url.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;flash&lt;/code&gt;: it flashes a message to the web page after an action has been carried. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database. &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Flask doesn't support databases natively, it isn't opinionated in this field, so it gives you the freedom to choose across a variety of database options that best fits your application.&lt;/p&gt;

&lt;p&gt;Databases can be separated into two, those that follow &lt;a href="https://en.wikipedia.org/wiki/Relational_model#:~:text=The%20relational%20model%20(RM)%20for,of%20tuples%2C%20grouped%20into%20relations."&gt;&lt;em&gt;relational models&lt;/em&gt;&lt;/a&gt; and those that do not. referred as &lt;em&gt;NoSQL&lt;/em&gt; dbs.&lt;/p&gt;

&lt;p&gt;We are going to use Flask-sqlalchemy, an extension that provides a Flask-friendly wrapper to the popular &lt;a href="https://docs.sqlalchemy.org/en/14/"&gt;&lt;strong&gt;SQLAlchemy&lt;/strong&gt;&lt;/a&gt; package, &lt;strong&gt;SQLAlchemy&lt;/strong&gt; is an ORM&lt;a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping"&gt;Object Relational Mapper&lt;/a&gt;.&lt;br&gt;
An ORM allows applications to manage databases using high level entities such as classes, objects &amp;amp; methods instead of tables and SQL. The work of an ORM is to convert high-level operations into database commands.&lt;br&gt;
Installing &lt;em&gt;flask-sqlalchemy&lt;/em&gt; run this in the terminal.&lt;br&gt;
&lt;code&gt;(blogger) $ pip install flask-sqlalchemy&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#database-migrations"&gt;
  &lt;/a&gt;
  Database Migrations &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;As the application continues to grow, it might need changes or updates, also the database needs be updated. This is done through migrations and the flask extension that handles this is : &lt;code&gt;Flask-migrate&lt;/code&gt;.&lt;br&gt;
This extension is a Flask wrapper for Alembic a flask database migration framework for SQLAlchemy. Install the extension;&lt;br&gt;
&lt;code&gt;(blogger) $ pip install flask-migrate&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#flasksqlalchemy-configuration"&gt;
  &lt;/a&gt;
  Flask-SQLalchemy configuration
&lt;/h4&gt;

&lt;p&gt;In the development phase I will be using SQLite database. It saves each database file on disk.&lt;br&gt;
When the app reaches production, I will use a database server: PostgreSQL or MySQL.&lt;br&gt;
Two configurations are required in the &lt;code&gt;config.py&lt;/code&gt; module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;basedir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'SECRET_KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;'you-will-never-guess'&lt;/span&gt;
    &lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DATABASE_URL'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;'sqlite:///'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'app.db'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;SQLALCHEMY_TRACK_MODIFICATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Flask extension gets the location of the apps database from the &lt;code&gt;SQLALCHEMY_DATABASE_URI&lt;/code&gt; configuration variable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As I did with the &lt;code&gt;SECRET_KEY&lt;/code&gt; variable fallback, I also provide a fallback value if the config variable doesn't define the &lt;em&gt;database url&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;SQLALCHEMY_TRACK_MODIFICATIONS&lt;/code&gt; configuration if set to &lt;code&gt;False&lt;/code&gt; disables a &lt;code&gt;Flask-SQLAlchemy&lt;/code&gt; feature that sends a signal to the application every time a change is about to be made to the database. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The database is represented in the application by a &lt;em&gt;database instance&lt;/em&gt;. This is done in the &lt;code&gt;app/__init__.py&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_migrate&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Migrate&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#configuration 
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#database instance
&lt;/span&gt;&lt;span class="n"&gt;migrate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Migrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In this change of the &lt;strong&gt;init&lt;/strong&gt; file, I imported two new extensions: SQLAlchemy &amp;amp; flask_migrate.&lt;/li&gt;
&lt;li&gt;I have added a &lt;em&gt;db&lt;/em&gt; object, it represents the database.&lt;/li&gt;
&lt;li&gt;The migrate variable handles the migration engine.&lt;/li&gt;
&lt;li&gt;At the bottom I've imported a new module &lt;code&gt;models&lt;/code&gt; , This module defines the structure of the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#database-models"&gt;
  &lt;/a&gt;
  Database models. &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Data stored in the database will be represented by a collection of classes, usually known as &lt;em&gt;database models&lt;/em&gt;. The ORM layer will handle the translastions required for mapping objects created from this classes to the correct rows in the database tables. &lt;br&gt;
Let's create a database model, create a new file &lt;code&gt;app/models.py&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;User&amp;gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &amp;lt;Post&amp;gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;id&lt;/code&gt; field is usually in all models, and is used as the &lt;em&gt;primary key&lt;/em&gt;. Each user is assigned a new &lt;code&gt;id&lt;/code&gt; and is stored in this field.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;username&lt;/code&gt; &amp;amp; &lt;code&gt;post&lt;/code&gt; field are defined as strings(in database is known as &lt;code&gt;VARCHAR&lt;/code&gt;) and their maximum lengths specified.&lt;/li&gt;
&lt;li&gt;The Post class created above inherits from db.Model, a base class for all models from Flask-SQLAlchemy.&lt;/li&gt;
&lt;li&gt;Fields are created as instances of the &lt;code&gt;db.Column&lt;/code&gt; class, whih takes field type as arguments.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;__repr__&lt;/code&gt; tells python how to print objects of this class. It is useful for debugging.
Open python in a terminal try to assign some data to our class objects.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The model created above defines the initial database structure or &lt;em&gt;schema&lt;/em&gt; of this application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-a-migration-repository"&gt;
  &lt;/a&gt;
  Create a migration repository. &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;When the app continues to grow, we need to handle the changes such as adding new things, modifying or removing items.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Alembic extension takes care of this schema changes.
It maintains the &lt;em&gt;migration repository&lt;/em&gt;, a directory in which it stores the migration scripts.&lt;/li&gt;
&lt;li&gt;Each a change is made to the database schema, a migration script is added to the repository with the details of the change.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To apply the migrations to a database, these migration scripts are executed in the sequence they were created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;flask db&lt;/code&gt; sub-command is added by flask-migrate to manage everything related to database migrations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To create a migration repository :&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;span class="n"&gt;Creating&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;code&lt;/span&gt;\&lt;span class="n"&gt;projects&lt;/span&gt;\&lt;span class="n"&gt;blogger&lt;/span&gt;\&lt;span class="n"&gt;migrations&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;
&lt;span class="n"&gt;Creating&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;code&lt;/span&gt;\&lt;span class="n"&gt;projects&lt;/span&gt;\&lt;span class="n"&gt;blogger&lt;/span&gt;\&lt;span class="n"&gt;migrations&lt;/span&gt;\&lt;span class="n"&gt;versions&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;
&lt;span class="n"&gt;Generating&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;code&lt;/span&gt;\&lt;span class="n"&gt;projects&lt;/span&gt;\&lt;span class="n"&gt;blogger&lt;/span&gt;\&lt;span class="n"&gt;migrations&lt;/span&gt;\&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ini&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;
&lt;span class="n"&gt;Generating&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;code&lt;/span&gt;\&lt;span class="n"&gt;projects&lt;/span&gt;\&lt;span class="n"&gt;blogger&lt;/span&gt;\&lt;span class="n"&gt;migrations&lt;/span&gt;\&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;
&lt;span class="n"&gt;Generating&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;code&lt;/span&gt;\&lt;span class="n"&gt;projects&lt;/span&gt;\&lt;span class="n"&gt;blogger&lt;/span&gt;\&lt;span class="n"&gt;migrations&lt;/span&gt;\&lt;span class="n"&gt;README&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;
&lt;span class="n"&gt;Generating&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;code&lt;/span&gt;\&lt;span class="n"&gt;projects&lt;/span&gt;\&lt;span class="n"&gt;blogger&lt;/span&gt;\&lt;span class="n"&gt;migrations&lt;/span&gt;\&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mako&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;
&lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;edit&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;'E:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;code&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;projects&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;blogger&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;migrations&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;alembic.ini'&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;proceeding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;flask&lt;/code&gt; command relies on the &lt;code&gt;FLASK_APP&lt;/code&gt; environment variable, after a successful run a new &lt;code&gt;migrations&lt;/code&gt; directory is added.&lt;br&gt;
Now we need to create our fist database migration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;migrate&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="s"&gt;'posts table'&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;SQLiteImpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Will&lt;/span&gt; &lt;span class="n"&gt;assume&lt;/span&gt; &lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;transactional&lt;/span&gt; &lt;span class="n"&gt;DDL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autogenerate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Detected&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="s"&gt;'post'&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autogenerate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Detected&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="s"&gt;'ix_post_post'&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;'['&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="s"&gt;']'&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autogenerate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Detected&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="s"&gt;'ix_post_username'&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s"&gt;'['&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="s"&gt;']'&lt;/span&gt;
&lt;span class="n"&gt;Generating&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;code&lt;/span&gt;\&lt;span class="n"&gt;projects&lt;/span&gt;\&lt;span class="n"&gt;blogger&lt;/span&gt;\&lt;span class="n"&gt;migrations&lt;/span&gt;\&lt;span class="n"&gt;versions&lt;/span&gt;\&lt;span class="mi"&gt;549&lt;/span&gt;&lt;span class="n"&gt;b927398fe_posts_table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running this, no change has been made to the database it just generates a migration script. Now we need to make changes to the database, To do that we use a &lt;code&gt;flask&lt;/code&gt; sub-command &lt;code&gt;flask db upgrade&lt;/code&gt; in the python shell context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;upgrade&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;SQLiteImpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Will&lt;/span&gt; &lt;span class="n"&gt;assume&lt;/span&gt; &lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;transactional&lt;/span&gt; &lt;span class="n"&gt;DDL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="n"&gt;upgrade&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;549&lt;/span&gt;&lt;span class="n"&gt;b927398fe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point you can play with the database a little, Let's try to add the previous post to the database.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;db&lt;/code&gt; changes are done in a database session context.&lt;/li&gt;
&lt;li&gt;To add data to the db we use &lt;code&gt;db.session.add(p)&lt;/code&gt;, &lt;em&gt;p&lt;/em&gt; is the object created for the corresponding database table.&lt;/li&gt;
&lt;li&gt;To write the changes use: &lt;code&gt;db.session.commit()&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ariana&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;first import the database object from the app module&lt;/li&gt;
&lt;li&gt;Import the Post class from the &lt;code&gt;models&lt;/code&gt; module.&lt;/li&gt;
&lt;li&gt;Create a Post object name it &lt;em&gt;p&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;use the db session context to &lt;em&gt;add&lt;/em&gt; and &lt;em&gt;push&lt;/em&gt; the change to the db.&lt;/li&gt;
&lt;li&gt;The last command &lt;code&gt;Post.query.all()&lt;/code&gt; answers queries and returns all posts in the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#adding-data-to-the-database"&gt;
  &lt;/a&gt;
  Adding data to the database &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;When a user types their data in the forms, and hits submit button the form data needs to be written in the database. &lt;br&gt;
To do that I shall add the db session commands in the view function &lt;code&gt;/post&lt;/code&gt;.&lt;br&gt;
Your new changed &lt;code&gt;app/routes.py&lt;/code&gt; should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# route to the post form
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hey, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;! Your post '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'  was successfully submitted! "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/index'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_post.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Add post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when a user enters data in the web forms and hits submit the data gets written to the database, we can view the data in a browser.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#viewing-posts-in-the-webpage"&gt;
  &lt;/a&gt;
  Viewing Posts in the Web-page &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;This part is rather simple, I just need to create a template that renders the posts in the database I will just use a &lt;code&gt;for&lt;/code&gt; loop to loop through the available posts in the database.&lt;/p&gt;

&lt;p&gt;Head over to the IDE and create a new template file, name it whatever you prefer. &lt;code&gt;app/templates/all_posts.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% extends 'base.html' %}
{% block title %}
    {% if title %}
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ title }}- blogger&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    {% else %}
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Blogger&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        {% endif %}
{% endblock %}

{% block content %} 
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Published Posts.&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {% for post in posts %}
        &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;{{ post.username }}&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ post.post }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endfor %}
{% endblock %}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run the application and navigate to &lt;code&gt;http://127.0.0.1:5000/view&lt;/code&gt; all our posts are displayed in the web-page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9HJ8g5EF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v65qj5rowr5htwf2q80g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9HJ8g5EF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v65qj5rowr5htwf2q80g.png" alt="app preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can head and add a nav link for viewing all our posts, this is will be added in the &lt;code&gt;base.html&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{{ url_for('view') }}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add this line of code in the div inside the &lt;code&gt;base&lt;/code&gt; template file. Preview the app in the browser and a new a navbar link has been added.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In this article I took you through working with flask to create a minimal web application that takes user input via a web form and saves it in a database and retrieves it and displays it in a web-page.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I worked you on using the Flask-SQLAlchemy and integrating a flask app with a database.&lt;/li&gt;
&lt;li&gt;Creating a database and managing the database modifications.&lt;/li&gt;
&lt;li&gt;Templating and rendering web-pages.
Go ahead and play with the UI by changing the &lt;code&gt;style.css&lt;/code&gt; inside the &lt;code&gt;app/static&lt;/code&gt; directory
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7fffd4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rrAPZzoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at27fnxwgvrlzufmpl37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rrAPZzoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at27fnxwgvrlzufmpl37.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I add a the background color property the web page color changed, I shall write more on this in another article.&lt;/p&gt;

&lt;p&gt;Thank you for taking your time to go through this article, Any feedback, advice or help is appreciated. Drop me a comment for any issue with running the code or improvement suggestions ;-)&lt;/p&gt;

&lt;p&gt;In the next article i'll cover on deploying this flask app to heroku.&lt;br&gt;
&lt;strong&gt;References:&lt;/strong&gt; [&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;The whole code is available on &lt;a href="https://github.com/Willbeckh/flask-app-tutorial"&gt;Github&lt;/a&gt;, go ahead and star the repo or clone it for your practice.&lt;/p&gt;

&lt;p&gt;Thank you &lt;a class="mentioned-user" href="https://dev.to/grayhat"&gt;@grayhat&lt;/a&gt;
 and Lux Tech Academy.&lt;/p&gt;

&lt;p&gt;Be cool and Keep coding! mic drop...dev out&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>beginners</category>
      <category>database</category>
    </item>
    <item>
      <title>Tips For Aspiring Artists - 3 Must Know Tips for Aspiring Artists</title>
      <author>AWs Architektur</author>
      <pubDate>Wed, 01 Sep 2021 15:00:52 +0000</pubDate>
      <link>https://dev.to/awsarchitektur/tips-for-aspiring-artists-3-must-know-tips-for-aspiring-artists-2nde</link>
      <guid>https://dev.to/awsarchitektur/tips-for-aspiring-artists-3-must-know-tips-for-aspiring-artists-2nde</guid>
      <description>&lt;p&gt;As a budding artist, I'd like to share with you a few tips and advice that I hope can be helpful in your artistic journey. Whether you are a painter or a budding artist, these tips would help you learn how to paint better and earn more money in your art form. So, please indulge me as I show you what you need to know:&lt;/p&gt;

&lt;p&gt;If you are a beginner, I would suggest investing in a good paint program. This would give you step-by-step instructions on the whole painting process &lt;a href="https://www.wboc.com/story/44639795/7-essential-spotify-tips-for-aspiring-artists"&gt;&lt;/a&gt;&lt;a href="https://www.wboc.com/story/44639795/7-essential-spotify-tips-for-aspiring-artists"&gt;https://www.wboc.com/story/44639795/7-essential-spotify-tips-for-aspiring-artists&lt;/a&gt; . And, best of all, you would get step-by-step visual guidance on the product second by step instruction on how you will apply the paint. &lt;/p&gt;

&lt;p&gt;Tips For Aspiring Artists Overview&lt;/p&gt;

&lt;p&gt;It's like having a professional painter with you all the time, explaining to you each and every step of the process. And, since you will follow the instructions and the visual cues right on your computer screen, this wouldn't just save you money buying materials and having someone else do all the laborious work for you - this would also save you time in terms of workload and preparation.&lt;/p&gt;

&lt;p&gt;Another thing to consider is purchasing art supplies. This step is important and should be your first priority if you are serious about being a successful painter. Buying art supplies early on will save you from spending more money later on. For example, you should always invest in oil paints, canvases and brushes. &lt;/p&gt;

&lt;p&gt;This is because when you see other painters working on their paintings, you can easily tell that those who invested in good art supplies and tools, have spent more time and effort making that masterpiece.&lt;/p&gt;

&lt;p&gt;One very effective way to become better at your daily painting and earn more money from it is by joining a painting group. Painting groups are usually a weekly meeting that you can join wherein you meet other artists with similar interests &lt;a href="https://en.wikipedia.org/wiki/Artist"&gt;artist&lt;/a&gt; . Through this, you will be able to learn more strategies in painting and apply those tips in your own paintings. These tips will help you bring out your best works and build on your confidence in painting abstractly.&lt;/p&gt;

&lt;p&gt;Painting groups also offer classes where you can learn from professionals and other painters how to bring out your best works. This is a great way of enhancing your skills as an artist and practicing your painting techniques every day. Another benefit that you can get from joining these groups is that they offer art supplies and you can buy them from them. &lt;/p&gt;

&lt;p&gt;So, instead of buying from a local artist or store, you can buy your art supplies from them. This will cost you less and will be a more convenient way of starting your own art supplies business.&lt;/p&gt;

&lt;p&gt;Here's another tip for aspiring artists: Don't stop painting. Most artists say that there is a need to keep practicing, so don't think that once you start painting, it's all over for you. Continue making your 30-paintings-in-30-days challenge or follow up with other painting activities. &lt;/p&gt;

&lt;p&gt;This will be your constant creative practice and it will help sharpen your painting skills. Another benefit of continuing your daily painting activities is that, it will help you make more money. So, it's not just a matter of how much you paint but how much you earn from it.&lt;/p&gt;

&lt;p&gt;The last tip for aspiring artists is to not let the process of painting overwhelm you. Painting should be something fun and interesting. If you get caught up in the creative process, you may tend to paint the same thing day after day. So, instead of doing this, it's better to do different colors every day or try your hand at creating different textures and effects.&lt;/p&gt;

&lt;p&gt;Final Words&lt;/p&gt;

&lt;p&gt;So, there you have it. I hope these tips for painting would help you become more excited about painting. Painting is not as difficult as you might have thought. It's actually quite easy if you just remember to stay focus and just have fun while painting.&lt;/p&gt;

</description>
      <category>artists</category>
      <category>aspiringartist</category>
      <category>architecture</category>
    </item>
  </channel>
</rss>
