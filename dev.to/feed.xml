<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 steps to build a crypto exchange like WazirX- WazirX clone script</title>
      <author>reyhanas</author>
      <pubDate>Mon, 06 Sep 2021 11:57:07 +0000</pubDate>
      <link>https://dev.to/reyhanas007/5-steps-to-build-a-crypto-exchange-like-wazirx-wazirx-clone-script-2ljc</link>
      <guid>https://dev.to/reyhanas007/5-steps-to-build-a-crypto-exchange-like-wazirx-wazirx-clone-script-2ljc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-quick-glance-at-wazirx"&gt;
  &lt;/a&gt;
  A Quick Glance at WazirX
&lt;/h2&gt;

&lt;p&gt;Recently, WazirX is one such cryptocurrency exchange which has been very much liked by Indians. This is because in a very short time, it’s amazing features have made everyone’s interest and together it is very easy to use it or its services. The basic objective of this company is how it can become India’s most trusted Bitcoin exchange. most of companies like to launch &lt;strong&gt;&lt;a href="https://radindev.com/wazirx-clone-script/"&gt;wazirx clone script&lt;/a&gt;&lt;/strong&gt; similar to wazirx.&lt;br&gt;
WazirX has now started its own token, which they named WRX Coin. Is kept, and which can be used by users in their platform. &lt;br&gt;
So today I thought that why should you be provided information about what Wazirx is and how it works so that you too can get some information about it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-nj6YcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhi5s7zre4t5jykn2616.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-nj6YcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhi5s7zre4t5jykn2616.png" alt="features of wazirx exchange clone software"&gt;&lt;/a&gt;&lt;br&gt;
Part of the Malta-based Binance group, which has users in 180 countries, WazirX claimed $2.3 billion monthly volume and 1.75 million registered users on its platform. As per CoinMarketCap, WazirX was the 27th top crypto exchange globally based on traffic, liquidity, trading volumes, and confidence in the legitimacy of trading volumes. Its 24-hour trading volume stood at $218 million with 137 coins available for trading to customers.&lt;br&gt;
Global bitcoin exchange Binance-owned Indian cryptocurrency exchange WazirX has crossed $200 million in daily trading volume since its launch in March 2018. This is the highest trading volume by any crypto exchange in the Indian market, according to the company, amid the regulatory uncertainty over the use and adoption of cryptos by businesses and individuals in the country. “Daily trading volume shows the scale at which an exchange is operating. More volume leads to more liquidity and more liquidity ensures that traders get the best prices with the minimum spread between buying and selling. WazirX has the highest liquidity and trading volume in the INR market in India,” Nischal Shetty, Founder, WazirX told Financial Express Online. &lt;br&gt;
The startup had last year in March launched a $50 million ‘Blockchain for India’ fund to invest in crypto/blockchain startups in India. According to WazirX, there are more than 7 million people associated with over 7,500 crore crypto assets whose fate hangs in the balance until India regulates the crypto market. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bLPu2SYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d71cqmnvdalxeo0a40ff.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bLPu2SYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d71cqmnvdalxeo0a40ff.jpeg" alt="wazirx exchange stats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-wazirx-exchange-platform"&gt;
  &lt;/a&gt;
  Features of Wazirx exchange platform
&lt;/h2&gt;

&lt;p&gt;Here are some of the noticeable features of the WazirX exchange that must be considered by those who want to build a crypto exchange like Wazirx.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;WazirX uses a real-time open order book system that equivalents the exchange of cryptocurrencies between buyers and sellers.&lt;/li&gt;
&lt;li&gt;WazirX has a crypto coin named WRX which can be used by traders for buying or selling other cryptocurrencies.&lt;/li&gt;
&lt;li&gt;The value of WRX has increased considerably over time just like Bitcoin or other altcoins.&lt;/li&gt;
&lt;li&gt;WazirX provides the feature for exchanging or selling of USDT (Tether) for INR with other traders. Tether being a stable coin equalizes its value with fiat currencies.&lt;/li&gt;
&lt;li&gt;The deposit and withdrawal rates provided by WazirX are super amazing with very little input of efforts.&lt;/li&gt;
&lt;li&gt;WazirX provides a facility of a digital wallet wherein you can store your digital assets with safety and protection.&lt;/li&gt;
&lt;li&gt;WazirX inherits the bitcoin escrow trading concept and it also regularly invests in the security audits which make it the most secure exchange in India.&lt;/li&gt;
&lt;li&gt;The KYC verification process takes a limited time but WazirX is further focusing to make it minimal to develop their service base.&lt;/li&gt;
&lt;li&gt;The system infrastructure of WazirX can handle millions of trading transactions per second, which makes it a faster trading network tool.&lt;/li&gt;
&lt;li&gt;There is also a native mobile app for crypto trading named “WazirX clone App development” which assists the traders to trade through their mobile devices.&lt;/li&gt;
&lt;li&gt;WazirX has presence across all platforms such as web, iOS, and Android with a fast and safe trading experience.&lt;/li&gt;
&lt;li&gt;The model of WazirX is based on Maker-Taker Model where the maker gets a bonus.
Maker — 0.20% bonus
Taker — 0.25% transaction fees&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-use-clone-scripts-and-what-are-the-benefits-made-by-clone-scripts"&gt;
  &lt;/a&gt;
  Why do we use clone scripts and what are the benefits made by clone scripts?
&lt;/h2&gt;

&lt;p&gt;Clone scripts help the business bloomers to start their own venture easily, quickly. A non-techie entrepreneur can survive in this digital business world with it. Clone script is used to copying or alternated an existing website and app or otherwise, a script is a new software to create a website and app. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-clone-scripts-are"&gt;
  &lt;/a&gt;
  Benefits of Clone scripts are:
&lt;/h3&gt;

&lt;p&gt;• Cost-effective&lt;br&gt;
• Easy to use&lt;br&gt;
• Come with core features of popular business modules&lt;br&gt;
• Well familiar with the market&lt;br&gt;
• Customizable or scalable, that can incorporate your business ideas&lt;br&gt;
• Lesser your source and energy&lt;br&gt;
• High chances to be succeeding easily&lt;br&gt;
• Face the competitive market with well-known design &amp;amp; workable functions&lt;br&gt;
• Currently updated to the market&lt;br&gt;
• Free and Paid Add-ons&lt;br&gt;
• Free Support &amp;amp; Service.&lt;br&gt;
• Exclusive offers&lt;br&gt;
• White labeling&lt;br&gt;
• Technical support of all forms.&lt;/p&gt;

&lt;p&gt;Now that we know the benefits of wazirx and clone scripts ... it's time to learn about the wazirx clone script and its structure, features, functions, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-buying-white-label-wazirx-clone-script"&gt;
  &lt;/a&gt;
  Benefits of buying white label wazirx clone script
&lt;/h2&gt;

&lt;p&gt;The popularity of cryptocurrency is unending these days. Crypto trading has evolved itself unexpectedly in a short duration of time. A few years ago, only technicians were aware of its practical benefits. Nowadays most people are aware of this tremendous technology and wish to invest in cryptocurrencies. &lt;br&gt;
The day would come soon when the market cap of the crypto market will outperform the entire market cap of various eminent banks in the world. According to various reports published from time to time, it has been pronounced that cryptocurrency has an unbeatable potential to navigate the whole digital market.&lt;br&gt;
The white label cryptocurrency exchange like WazirX is expanding globally and it offers over 40 cryptocurrencies available for trading in all the major countries. &lt;br&gt;
 WazirX launched a P2P trading platform that allows traders to buy and sell crypto directly from each other. It is the expanding popularity of WazirX that has encouraged many people across the globe to build a crypto exchange platform like WazirX.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-develop-a-crypto-exchange-like-wazirx"&gt;
  &lt;/a&gt;
  How to develop a crypto exchange like WazirX?
&lt;/h2&gt;

&lt;p&gt;To build an exchange platform like WazirX, you need to have a WazirX clone script that portrays all the features of the exchange.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-steps-to-start-a-business-from-clone-script-are"&gt;
  &lt;/a&gt;
  The steps to start a business from clone script are:
&lt;/h3&gt;

&lt;p&gt;1.Form a business plan according to the regional needs&lt;br&gt;
Wazirx is an online marketplace where people buy and sell each other bitcoins, ether, dash and other virtual money. The platform acts as the only intermediary that brings the buyer and seller together and provides tools for an honest exchange or chat, where you can arrange a personal meeting.&lt;br&gt;
To search for counterparties, Wazirx users publish ads in which they indicate the amount of the exchange, rate (course) and acceptable (available) payment methods: cryptocurrency, PayPal, bank transfers, cash and more. Anyone can respond to such an announcement, provided that the transaction does not imply restrictions on location.&lt;br&gt;
The crypto buying and selling process is quite simple:&lt;br&gt;
A.We are looking for an ad with the right cryptocurrency and an acceptable rate.&lt;br&gt;
B.We contact the counterparty and agree on the transaction amount and method of payment. There is a possibility of escrow funds.&lt;br&gt;
C.We are making a deal. Write a comment about the second side. &lt;/p&gt;

&lt;p&gt;To guarantee an honest exchange on the website, smart contracts with escrow are used. To reduce fraud, with other methods of exchange on the site, a system of reviews and reputation ratings has been introduced.&lt;/p&gt;

&lt;p&gt;2.Look for the perfect clone script providers with good reviews&lt;br&gt;
To give wings to your dream of developing your desired business platform at an affordable price within a short while, you have to opt for clone scripts instead of building an app from scratch. All you need to know first is the significance of these Clone scripts. Once you have understood the significance of such clone scripts, the next step is to look for the exact place to find a clone script that stands out from the rest available online. Only a ready-made solution that's carefully developed would have been through a rigorous testing process and its adaptable nature can help you to modify it to fit as per your business plan. Thus, this satisfies the prime need of developing an efficiently performing website for being successful in your online business venture. To find an authentic clone script, you have to approach a notable and trustworthy app development company. This is because only a company that's committed, driven, and the one that is aware of its clientele demands can help you with materializing your business dreams. Another prime reason why you should look for an authentic clone script from a renowned and trustworthy web and mobile app development company is, you aren’t looking for a typical clone script.&lt;/p&gt;

&lt;p&gt;3.Talk with them and share the business details&lt;br&gt;
Ask your clone script developer how many parallel users can the app handle before becoming too slow. It is considered a good solution if it can handle at least 100 simultaneous users. That is if hundred people are using it at any point of time.&lt;br&gt;
4.Get the consultation from the experienced clone script providers&lt;br&gt;
The script is usually developed by well-experienced and qualified experts. They take care of everything from development, design, testing, and deployment, allowing you to focus on just the customization part. There are many advantages involved with purchasing and deploying a Wazirx clone script for your business. Let’s find out what they are:&lt;br&gt;
1.A Wazirx clone script relieves you from the long, tedious development process and the costs and resources incurred for development. It comes readily-available, enabling a quick launch at a cost-effective price. &lt;br&gt;
2.A Wazirx clone script supports multiple cryptocurrencies and multiple languages that will help you broaden your user base just like the original Wazirx model. &lt;br&gt;
3.A Wazirx clone script comes with similar advanced trading tools, technology implementations, exchange infrastructure, and features that fit both experienced and new traders. &lt;br&gt;
4.Transactions will be of low costs similar to Wazirx, therefore more trades, which means more profits for both traders and the exchange owner. &lt;br&gt;
5.Wazirx clone script will bring in more liquidity and the high capacity of handling multiple transactions per second. &lt;br&gt;
6.A Wazirx clone script offers a wide range of customization options for the users, in terms of name, logo, brand, UX/UI, color themes, etc. Also, it is completely pre-tested before being delivered hence it assures bug-free operations, more reliability, security, and sustainability. &lt;/p&gt;

&lt;p&gt;5.Tie-up after the analysis of price estimates and compare with them.&lt;br&gt;
This is how a Wazirx clone script works. With the intensely growing demand and competition, several companies around the world have started offering a Wazirx clone script for businesses. To choose the right one for yours, look if the script comprises the following features. &lt;/p&gt;

&lt;p&gt;There are a lot of remarkable and advanced security features in order to build Wazirx clone software. These features are:&lt;br&gt;
Accessible with multiple Platforms&lt;br&gt;
A wide range of cryptocurrency&lt;br&gt;
Advanced trading tools&lt;br&gt;
Fast transaction&lt;br&gt;
Advanced UI/UX &lt;br&gt;
Payment gateway integration&lt;br&gt;
Trading bot&lt;br&gt;
KYC/AML Verification&lt;br&gt;
IEO Launchpad&lt;br&gt;
Support Multiple wallets&lt;/p&gt;

&lt;p&gt;Pros and Cons of Wazirx Clone Script:&lt;/p&gt;

&lt;p&gt;Pros of Wazirx Clone Script&lt;br&gt;
• User Friendly UI&lt;br&gt;
• Flexible Payment gateways&lt;br&gt;
• Multi-lingual support&lt;br&gt;
• Reviews and Ratings&lt;br&gt;
• Security and Trustable exchange&lt;br&gt;
• Bypass the middleman &lt;br&gt;
• Probably the lowest price of all coins in India&lt;br&gt;
• Speedy transactions&lt;br&gt;
• WRX tokens&lt;br&gt;
• Cutting Edge Technology&lt;br&gt;
• QR Code Scanner&lt;br&gt;
• Operating System&lt;/p&gt;

&lt;p&gt;Cons&lt;br&gt;
The transaction fee is a little bit high.&lt;br&gt;
If you want to know further details regarding the exchange here is a link to Wazirx’s White paper.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-process-of-wazirx-clone-software-as-per-the-section"&gt;
  &lt;/a&gt;
  The process of Wazirx clone software as per the section.
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;User Registration: Users have to register their necessities details like email id, phone number, a password for signup. Once registered, they will be assigned specific wallets.&lt;/li&gt;
&lt;li&gt;Explore offer: Sellers should post their offers like cryptocurrency type, rate, and payment method for the transaction.&lt;/li&gt;
&lt;li&gt;Notify the offers: Buyers will receive notification from those selling offerings and select the suitable things as per their needs.&lt;/li&gt;
&lt;li&gt;Secure Authentication: Once the buyer confirms their transfer, a chat popup appears and negotiations between two parties.&lt;/li&gt;
&lt;li&gt;Payment option: The buyers can pay through various payment options that are available on this platform.&lt;/li&gt;
&lt;li&gt;Transfer: In time, the seller can verify the transaction, and admin escrows release the requested payment of the cryptos from their wallet to the buyer wallet.&lt;/li&gt;
&lt;li&gt;If you are a seller - Wazirx clone will not release your USDT to the buyer until you make a confirmation on the receipt of payment. &lt;/li&gt;
&lt;li&gt;If you are a buyer - Wazirx clone software will hold the seller's USDT until you make a payment to the seller. The System will detect and resolves any dispute that occurs between the buyer and a seller. KYC details can be verified for every user before allowing them to trade on the platform and thus keeps a record on each and every transaction that occurs on the exchange.&lt;/li&gt;
&lt;li&gt;Cash In - If you want to bring fiat money to trade cryptocurrencies, Buy USDT via P2P and then use that Usdt to buy other cryptocurrencies on Wazirx.&lt;/li&gt;
&lt;li&gt;Cash Out - In case you want to move Fiat money to your bank account, sell your cryptocurrencies for USDT and then sell that USDT for fiat.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rq9Jo0sP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntn1oo5t0dtnusp3w409.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rq9Jo0sP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntn1oo5t0dtnusp3w409.png" alt="wazirx p2p clone software"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wazirx-p2p"&gt;
  &lt;/a&gt;
  WazirX P2P
&lt;/h2&gt;

&lt;p&gt;Traditionally, peer-to-peer systems are classified listings where you need to go through the following steps to purchase cryptocurrencies with fiat money:&lt;br&gt;
Scroll through each order listing&lt;br&gt;
Analyse each order volume, price, and payment method to figure if it aligns with your requirements&lt;br&gt;
Choose multiple orders depending on your trade size&lt;br&gt;
Figure out the legitimacy of each trader before you deal with them&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---9kE80yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hhefyxnpnlt8ygkvpeu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---9kE80yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hhefyxnpnlt8ygkvpeu.png" alt="wazirx p2p exchange development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heres-how-wazirx-p2p-works"&gt;
  &lt;/a&gt;
  Here’s how WazirX P2P works:
&lt;/h3&gt;

&lt;p&gt;Buyer places USDT buy order, gets instantly auto-matched with a seller&lt;br&gt;
Pays directly to the seller’s bank account&lt;br&gt;
Both buyer and seller confirm sending and receiving payment respectively&lt;br&gt;
WazirX transfers the escrowed USDT to the buyer’s wallet&lt;/p&gt;

&lt;p&gt;Moreover, the &lt;strong&gt;&lt;a href="https://radindev.com/p2p-crypto-exchange-script/"&gt;p2p crypto exchange software development&lt;/a&gt;&lt;/strong&gt; has been designed in a way that matching and order-completion happen in record time. It’s hassle-free with zero learning curve, and available 24x7.&lt;/p&gt;

&lt;p&gt;Since its inception, WazirX P2P has been a game changer in the Indian cryptocurrency ecosystem. In 2018, when traditional P2P options launched in India, WazirX P2P emerged as the top choice for users.&lt;br&gt;
Multiple P2P trade matches happen every minute, and 90% of P2P trades complete within 10 minutes. P2P is growing at a rate of over 9.5% every month.&lt;br&gt;
Total P2P trades: 1.3 Million Average execution, time taken: 15 minutes&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wazirx-exchange-clone-script-security-features"&gt;
  &lt;/a&gt;
  WazirX exchange clone script Security features
&lt;/h2&gt;

&lt;p&gt;Major chunk of funds in cold storage&lt;br&gt;
Multi-signature wallet system&lt;br&gt;
Each fund withdrawal request needs a two-factor authentication&lt;br&gt;
Strong KYC/AML guidelines&lt;br&gt;
Regular security audits&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>webdev</category>
      <category>cryptocurrency</category>
      <category>p2p</category>
    </item>
    <item>
      <title>How to convert Python string to bytes?</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 06 Sep 2021 11:50:38 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-convert-python-string-to-bytes-2d9g</link>
      <guid>https://dev.to/hrishikesh1990/how-to-convert-python-string-to-bytes-2d9g</guid>
      <description>&lt;p&gt;In this tutorial, we look at how to convert Python string to bytes. We look at all the various methods along with their limitations and caveats. &lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-python-string-to-byte"&gt;
  &lt;/a&gt;
  Table of Contents - Python String to Byte
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-string-to-bytes"&gt;Python String to Bytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#method-to-convert-strings-to-bytes"&gt;Method to convert strings to bytes&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#using-bytes"&gt;Using bytes()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-encode"&gt;Using encode()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#limitations-and-caveats-python-string-to-byte"&gt;Limitations and Caveats - Python String to Byte&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#python-string-to-bytes"&gt;
  &lt;/a&gt;
  Python String to Bytes:
&lt;/h2&gt;

&lt;p&gt;Converting Python strings to Bytes has become quite popular after the release of Python 3. This is largely because a lot of file handling and Machine learning methods require you to convert them. Before we dive into how to convert them let us first understand what they are and how they are different. &lt;/p&gt;

&lt;p&gt;In Python 2, string and bytes were the same typeByte objects; however after the introduction of Python 3 Byte objects are considered as a sequence of bytes, and strings are considered as a sequence of characters. In essence, strings are human-readable and in order for them to become machine-readable, they must be converted to byte objects. This conversion also enables the data to be directly stored on the disk. &lt;/p&gt;

&lt;p&gt;The process of converting string objects to byte objects is called encoding and the inverse is called decoding. We look at methods to achieve this below. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#method-to-convert-strings-to-bytes"&gt;
  &lt;/a&gt;
  Method to convert strings to bytes:
&lt;/h2&gt;

&lt;p&gt;There are many methods that can be used to convert Python string to bytes, however, we look at the most common and simple methods that can be used. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-bytes"&gt;
  &lt;/a&gt;
  Using bytes():
&lt;/h3&gt;

&lt;p&gt;The bytes() method is an inbuilt function that can be used to convert objects to byte objects. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#syntax-of-bytes"&gt;
  &lt;/a&gt;
  Syntax of bytes():
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The bytes take in an object (a string in our case), the required encoding method, and convert it into a byte object. The bytes() method accepts a third argument on how to handle errors. &lt;/p&gt;

&lt;p&gt;Let us look at the code to convert a Python string to bytes. The encoding type we use here is “UTF-8”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Using the byte() method
&lt;/span&gt;
&lt;span class="c1"&gt;# initializing string 
&lt;/span&gt;&lt;span class="n"&gt;str_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Join our freelance network"&lt;/span&gt;

&lt;span class="n"&gt;str_1_encoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'UTF-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#printing the encode string 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_1_encoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#printing individual bytes
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;str_1_encoded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;'Join our freelance network'&lt;/span&gt;
&lt;span class="mi"&gt;74&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="mi"&gt;117&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;102&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;108&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;116&lt;/span&gt; &lt;span class="mi"&gt;119&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt; &lt;span class="mi"&gt;107&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see this method has converted the string into a sequence of bytes. &lt;/p&gt;

&lt;p&gt;Note: This method converts objects into immutable bytes, if you are looking for a mutable method you can use the bytearray() method. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-encode"&gt;
  &lt;/a&gt;
  Using encode():
&lt;/h3&gt;

&lt;p&gt;The encode() method is the most commonly used and recommended method to convert Python strings to bytes. A major reason is that it is more readable. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#syntax-of-encode"&gt;
  &lt;/a&gt;
  Syntax of encode():
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, string refers to the string you are looking to convert. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Encoding - Optional. The encoding method you are looking to use. After Python 3, UTF-8 has become the default. &lt;/li&gt;
&lt;li&gt;Error - Optional, A string containing the error message. &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#code-to-convert-a-python-string-to-bytes"&gt;
  &lt;/a&gt;
  Code to convert a python string to bytes:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Using the encode method
&lt;/span&gt;
&lt;span class="c1"&gt;# initializing string 
&lt;/span&gt;&lt;span class="n"&gt;str_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Join our freelance network"&lt;/span&gt;

&lt;span class="n"&gt;str_1_encoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'UTF-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#printing the encode string 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_1_encoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#printing individual bytes
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;str_1_encoded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output is the same as above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;'Join our freelance network'&lt;/span&gt;
&lt;span class="mi"&gt;74&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="mi"&gt;117&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;102&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;108&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;116&lt;/span&gt; &lt;span class="mi"&gt;119&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt; &lt;span class="mi"&gt;107&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to the &lt;code&gt;encode()&lt;/code&gt; method, the &lt;code&gt;decode()&lt;/code&gt; method can be used to convert bytes to strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Using the encode method
&lt;/span&gt;
&lt;span class="c1"&gt;#initializing string 
&lt;/span&gt;&lt;span class="n"&gt;str_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Join our freelance network"&lt;/span&gt;

&lt;span class="n"&gt;str_1_encoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'UTF-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#printing the encode string 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_1_encoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#decoding the string
&lt;/span&gt;&lt;span class="n"&gt;str_1_decoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str_1_encoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_1_decoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;'Join our freelance network'&lt;/span&gt;
&lt;span class="n"&gt;Join&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;freelance&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#limitations-and-caveats-python-string-to-byte"&gt;
  &lt;/a&gt;
  Limitations and Caveats - Python String to Byte
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Both the methods solve the same problem efficiently and choosing a particular method would boil down to one’s personal choice. However, I would recommend the second method for beginners. &lt;/li&gt;
&lt;li&gt;The byte() method returns an immutable object. Hence, consider using the bytearray() if you are looking for a mutable object.&lt;/li&gt;
&lt;li&gt;While using the byte() methods the object must have a size 0 &amp;lt;=x &amp;lt; 256.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Django REST framework introduction Part 2: Auth, Token and Permissions</title>
      <author>Eric The Coder</author>
      <pubDate>Mon, 06 Sep 2021 11:43:29 +0000</pubDate>
      <link>https://dev.to/ericchapman/django-rest-framework-introduction-part-2-auth-token-and-permissions-4aad</link>
      <guid>https://dev.to/ericchapman/django-rest-framework-introduction-part-2-auth-token-and-permissions-4aad</guid>
      <description>&lt;p&gt;A web developer worthy of the name must be able to create a REST API. &lt;/p&gt;

&lt;p&gt;In part 1 we help you understand everything there is to know to build your first API using the Python language and the Django REST Framework.&lt;/p&gt;

&lt;p&gt;In part 2 we will secure our API. After all, not every action (ex. DELETE) can be authorized. We will add REST Framework authentication, token and permissions to our API.&lt;/p&gt;

&lt;p&gt;To not miss anything, click Follow and/or follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-the-next-step-"&gt;
  &lt;/a&gt;
  What is the next step ?
&lt;/h1&gt;

&lt;p&gt;The next step is to secure our API.&lt;/p&gt;

&lt;p&gt;Until now, anyone who knows our URL can send a read, create, update, and delete request to our API. Not good!&lt;/p&gt;

&lt;p&gt;So the goal being to allow create, update and the deletion of&lt;br&gt;
a post only for authenticated user and only allow those to update and delete their own posts&lt;/p&gt;

&lt;p&gt;In order to determine what the identity of the request user is, we will also have to add an authentication (login) to our API&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#how-authentication-work-in-rest-framework"&gt;
  &lt;/a&gt;
  How authentication work in REST Framework?
&lt;/h1&gt;

&lt;p&gt;There are several ways to manage authentication with REST-Framework.&lt;/p&gt;

&lt;p&gt;In this article, I will show you one that is often used: Token Authentication&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-token-authentication"&gt;
  &lt;/a&gt;
  What is Token Authentication?
&lt;/h2&gt;

&lt;p&gt;Token authentication allows users to verify their identity, and in return receive a unique access token. During the life of the token, users then access the API that the token has been issued for, rather than having to re-enter credentials each time they go back to the same API.&lt;/p&gt;

&lt;p&gt;Auth tokens work like a stamped ticket. The user retains access as long as the token remains valid. &lt;/p&gt;

&lt;p&gt;Token-based authentication is different from traditional password-based or server-based authentication techniques. Tokens offer a second layer of security, and administrators have detailed control over each action and transaction. &lt;/p&gt;

&lt;p&gt;In short, it means that when you will make a login request (ex: api/login), our API will give you back a Token.&lt;/p&gt;

&lt;p&gt;It will then be possible to use this Token to have access to certain action protected by the API (ex: DELETE api/posts/1)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-use-the-token"&gt;
  &lt;/a&gt;
  How to use the Token?
&lt;/h3&gt;

&lt;p&gt;To use the Token, In the request header, you need to add an 'Authorization' key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'Authorization' : 'Token 622af924b5e828dd35dd6'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here a JavaScript fetch() example to delete post no 3&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR_TOKEN_HERE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;api/posts/3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DELETE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Token &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#implement-a-token-base-auth-in-restframework"&gt;
  &lt;/a&gt;
  Implement a Token base auth in REST-Framework
&lt;/h1&gt;

&lt;p&gt;To implement this pattern in our API we need 2 things:&lt;/p&gt;

&lt;p&gt;First, we need to create a login API endpoint (ex: api/login). That login will authenticate users and return the Token.&lt;/p&gt;

&lt;p&gt;Second, we need to modify our update and delete API endpoint to allow only an authenticated user to perform those actions on their own posts. This will be implemented with the Authorization  and Permissions class in REST-Framework&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-login-endpoint"&gt;
  &lt;/a&gt;
  Create a Login endpoint
&lt;/h2&gt;

&lt;p&gt;That part will be pretty easy because REST-Framework already have a login view pre-created for us.&lt;/p&gt;

&lt;p&gt;In posts application folder, open views.py and add this code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.authtoken.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ObtainAuthToken&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;api_settings&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserLoginApiView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObtainAuthToken&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;renderer_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api_settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_RENDERER_CLASSES&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Noted, for simplicity, I only show code related to the Login view. &lt;/p&gt;

&lt;p&gt;This UserLoginAPIView inherit from ObtainAuthToken that contain all the code to create the login view and all the methods to authenticate a user and return a Token.&lt;/p&gt;

&lt;p&gt;Next we need to create a URL that point to this login view&lt;/p&gt;

&lt;p&gt;Open posts application urls.py and add this URL path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.routers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DefaultRouter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PostViewSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UserLoginApiView&lt;/span&gt;

&lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DefaultRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'posts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PostViewSet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'login/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UserLoginApiView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, in order to use the REST-Framework auth libraries, we need to add a reference to 'rest_framework.authtoken' to our project settings.py files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.auth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.contenttypes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.sessions'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.messages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.staticfiles'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'rest_framework'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'posts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'rest_framework.authtoken'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And re-run the 'migrate' terminal command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That action will create the database table to support authtoken functionalities&lt;/p&gt;

&lt;p&gt;If everything code right, you can start your server and visit api/login&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---kQSUaIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630685480035/dM8ByXLl8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---kQSUaIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630685480035/dM8ByXLl8.png" alt="Screen Shot 2021-09-03 at 12.09.10 PM.png"&gt;&lt;/a&gt;&lt;br&gt;
You can use your superuser credentials (we create in part one) to login.&lt;/p&gt;

&lt;p&gt;You can also add users with the admin panel if needed.&lt;/p&gt;

&lt;p&gt;Once logged in, the API will return you a Token&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jA0j0aGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630685525396/6QWezrTyP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jA0j0aGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630685525396/6QWezrTyP.png" alt="Screen Shot 2021-09-03 at 12.11.01 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#add-authorization-and-permissions-to-update-and-delete-api-endpoint"&gt;
  &lt;/a&gt;
  Add Authorization and Permissions to Update and Delete API endpoint
&lt;/h2&gt;

&lt;p&gt;Here the objective is to limit access to our API. In particular, the Update and Delete actions. So only users who are authenticated will be able to perform these actions.&lt;/p&gt;

&lt;p&gt;But we also need to check if the authenticated user is the author of the post. Only author of their own posts will be able to do Update and Delete request.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#permissions-class"&gt;
  &lt;/a&gt;
  Permissions class
&lt;/h2&gt;

&lt;p&gt;REST-Framework has a class to manage permissions. We can create one and associated the permissions class to our API view&lt;/p&gt;

&lt;p&gt;Create a new file under posts application folder and name it permissions.py. Inside that file add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UpdateOwnProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BasePermission&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_object_permission&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SAFE_METHODS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the action to be executed is considered "safe" (request.method in permissions.SAFE_METHODS), it can be executed (return True)&lt;/p&gt;

&lt;p&gt;If on the other hand, the action is not safe (Create, Update and Delete action) then it checks that the authenticated user and are the author of the post are the same (obj.user.id == request.user.id) &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bind-permissions-to-our-api"&gt;
  &lt;/a&gt;
  Bind permissions to our API
&lt;/h2&gt;

&lt;p&gt;Now that our Permission object is created, we can bind it to our API.&lt;/p&gt;

&lt;p&gt;In posts application folder, open views.py and add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;viewsets&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.authentication&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TokenAuthentication&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.permissions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IsAuthenticatedOrReadOnly&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PostSerializer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.permissions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UpdateOwnProfile&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostViewSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewsets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelViewSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostSerializer&lt;/span&gt;
    &lt;span class="n"&gt;authentication_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TokenAuthentication&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;UpdateOwnProfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;IsAuthenticatedOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We add 2 thing here. First we set the authetification_classes to TokenAuthetification and then we set our permissions_classes to our custom permission class. The isAuthenticatedOrReadOnly will allow authenticated users to perform any request. Requests for unauthorised users will only be permitted if the request method is one of the "safe" methods like GET (read post).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#test-your-api"&gt;
  &lt;/a&gt;
  Test your API
&lt;/h1&gt;

&lt;p&gt;Our API is now secure, it's time to give it a try.&lt;/p&gt;

&lt;p&gt;This time we cannot test our API in the browser because for auth we need a way to send the Token with the request.&lt;/p&gt;

&lt;p&gt;We will use an API testing application.  Postman is one of the most use app but today I will use a VSCode extension call Thunder Client. It's a light version of Postman easy to install and use&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-thunder-client"&gt;
  &lt;/a&gt;
  Install Thunder Client
&lt;/h2&gt;

&lt;p&gt;From VSCode, go to extension, find and then install the Thunder Client application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QG9U36w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630700311629/p3C5ldzD2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QG9U36w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630700311629/p3C5ldzD2.png" alt="Screen Shot 2021-09-03 at 1.23.35 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once install, open the app and click on 'New Request' button and type the API URL you want to test (ex: api/posts) then click 'Send' and the response would appear in the right portion of the screen&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFxnSi0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630700423487/fs7Kk-aar.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFxnSi0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630700423487/fs7Kk-aar.png" alt="Screen Shot 2021-09-03 at 1.26.11 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#login-and-token-example"&gt;
  &lt;/a&gt;
  Login and Token example
&lt;/h2&gt;

&lt;p&gt;To login you need to do a POST request with credentials to api/login. First, click the 'New Request' button, choose POST from the request type dropdown, type the request URL (ex: api/login/), click the Body tab and add the credential in JSON format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ericthecoder"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"yourpassword"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click 'Send' and the response section on the right should display the received Token&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iUmty7xs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630700564087/41uFQpwhn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iUmty7xs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630700564087/41uFQpwhn.png" alt="Screen Shot 2021-09-03 at 1.43.40 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-a-new-post"&gt;
  &lt;/a&gt;
  Create a new Post
&lt;/h2&gt;

&lt;p&gt;Now that we have our Token, we can do action that required permissions. So let's create a new Post.&lt;/p&gt;

&lt;p&gt;Click 'New Request', choose POST from dropdown and type the create post URL (ex: api/posts/). Click the Body tab and enter the create post JSON Content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"My First Blog Title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"My first Blog body Content"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click send, and the API will return a 401 Unauthorized message. That's normal, since we did not send the Token with the request.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qm2ALMB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630701932795/EKLef-iqc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qm2ALMB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630701932795/EKLef-iqc.png" alt="Screen Shot 2021-09-03 at 4.45.20 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do so, click on Headers tab and add the Authorization key and Token&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ihTlEaQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630701832037/ApHnuluJu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ihTlEaQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630701832037/ApHnuluJu.png" alt="Screen Shot 2021-09-03 at 1.54.49 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click 'Send' and now the Post should be created with success&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HlX9rink--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630701977930/vZLDaygrG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HlX9rink--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630701977930/vZLDaygrG.png" alt="Screen Shot 2021-09-03 at 1.54.36 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#test-all-api-endpoints"&gt;
  &lt;/a&gt;
  Test all API endpoints
&lt;/h1&gt;

&lt;p&gt;With your Token now in hand, you can now test all our API endpoint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;POST api/login/ &lt;span class="o"&gt;(&lt;/span&gt;login with credentials&lt;span class="o"&gt;)&lt;/span&gt;

GET api/posts &lt;span class="o"&gt;(&lt;/span&gt;Read all post&lt;span class="o"&gt;)&lt;/span&gt;
POST api/posts/ &lt;span class="o"&gt;(&lt;/span&gt;Create a new post&lt;span class="o"&gt;)&lt;/span&gt;

GET api/posts/1/ &lt;span class="o"&gt;(&lt;/span&gt;Read a specific Post&lt;span class="o"&gt;)&lt;/span&gt;
PUT api/posts/1/ &lt;span class="o"&gt;(&lt;/span&gt;Update a specific Post&lt;span class="o"&gt;)&lt;/span&gt;
PATCH api/posts/1/ &lt;span class="o"&gt;(&lt;/span&gt;Partial Update a specific Post&lt;span class="o"&gt;)&lt;/span&gt;
DELETE api/posts/1/ &lt;span class="o"&gt;(&lt;/span&gt;Delete a specific Post&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#end-of-part-2"&gt;
  &lt;/a&gt;
  End of part 2
&lt;/h3&gt;

&lt;p&gt;That's all for today. You now have a secure API, in the next part, we will discuss search, pagination and image upload.&lt;/p&gt;

&lt;p&gt;To not miss anything, click Follow and/or also follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>beginners</category>
      <category>turorial</category>
    </item>
    <item>
      <title>Appwrite, Android and Realtime</title>
      <author>Jake Barnby</author>
      <pubDate>Mon, 06 Sep 2021 11:32:07 +0000</pubDate>
      <link>https://dev.to/appwrite/appwrite-android-and-realtime-42jd</link>
      <guid>https://dev.to/appwrite/appwrite-android-and-realtime-42jd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-appwrite"&gt;
  &lt;/a&gt;
  🤔 What is Appwrite?
&lt;/h2&gt;

&lt;p&gt;Appwrite is a new open-source, end-to-end, backend server for web and mobile developers that allows you to build apps much faster. It abstracts and simplifies common development tasks behind REST APIs and tools, helping you build advanced apps faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urjHK2-R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxb9c2wc0o8k4y0vbfzn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urjHK2-R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxb9c2wc0o8k4y0vbfzn.gif" alt="Social Media posts (7)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appwrite-for-android"&gt;
  &lt;/a&gt;
  🤖 Appwrite for Android
&lt;/h2&gt;

&lt;p&gt;Appwrite provides &lt;strong&gt;sleek REST APIs&lt;/strong&gt; for various common features that are required for web and mobile application development such as &lt;strong&gt;cloud functions&lt;/strong&gt;, &lt;strong&gt;database&lt;/strong&gt;, &lt;strong&gt;storage&lt;/strong&gt;, as well as &lt;strong&gt;realtime&lt;/strong&gt; support for each service so that we as developers can focus on our applications rather than on backend implementations. This makes Appwrite very suitable for those of us who want to build Android applications. In this tutorial we'll build an Android realtime product application using Appwrite and the new &lt;strong&gt;realtime&lt;/strong&gt; API, let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  📝 Prerequisites
&lt;/h2&gt;

&lt;p&gt;In order to continue with this tutorial, you need to have access to an Appwrite console, and either an existing project, or permission to create one. If you have not already installed Appwrite, please do so. Installing Appwrite is really simple following Appwrite's official &lt;a href="https://appwrite.io/docs/installation"&gt;installation docs&lt;/a&gt;. Installation should only take around 2 minutes. Once installed, login to your console and &lt;strong&gt;create a new Project&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-setup"&gt;
  &lt;/a&gt;
  💾 Database Setup
&lt;/h2&gt;

&lt;p&gt;In the Appwrite console, let's select the project that we will be using for our Android app. If you don't have a project yet, you can easily create one by clicking on the &lt;strong&gt;Create Project&lt;/strong&gt; button. Once inside, select &lt;strong&gt;Database&lt;/strong&gt; from the left sidebar. On the database page:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on the &lt;strong&gt;Add Collection&lt;/strong&gt; button&lt;/li&gt;
&lt;li&gt;Inside the dialog:

&lt;ol&gt;
&lt;li&gt;Set the collection name to &lt;strong&gt;Products&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Create&lt;/strong&gt; button&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will then create a collection, and you will be redirected to the new collection's page where we can define its rules. Define the following rules, then click the &lt;strong&gt;Update&lt;/strong&gt; button.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Name&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;label: Name&lt;/li&gt;
&lt;li&gt;Key: name&lt;/li&gt;
&lt;li&gt;Rule Type: Text&lt;/li&gt;
&lt;li&gt;Required: true&lt;/li&gt;
&lt;li&gt;Array: false&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Description&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;label: Description&lt;/li&gt;
&lt;li&gt;Key: description&lt;/li&gt;
&lt;li&gt;Rule Type: Text&lt;/li&gt;
&lt;li&gt;Required: true&lt;/li&gt;
&lt;li&gt;Array: false&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SKU&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;label: SKU&lt;/li&gt;
&lt;li&gt;Key: sku&lt;/li&gt;
&lt;li&gt;Rule Type: Text&lt;/li&gt;
&lt;li&gt;Required: true&lt;/li&gt;
&lt;li&gt;Array: false&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Price&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;label: Price&lt;/li&gt;
&lt;li&gt;Key: price&lt;/li&gt;
&lt;li&gt;Rule Type: Numeric&lt;/li&gt;
&lt;li&gt;Required: true&lt;/li&gt;
&lt;li&gt;Array: false&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Image URL&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;label: Image URL&lt;/li&gt;
&lt;li&gt;Key: imageUrl&lt;/li&gt;
&lt;li&gt;Rule Type: Text&lt;/li&gt;
&lt;li&gt;Required: true&lt;/li&gt;
&lt;li&gt;Array: false&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UiNuMbn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guf4hngrqboiabzkba2g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UiNuMbn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guf4hngrqboiabzkba2g.png" alt="Products Collection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that the collection is created, we can move on to setting up the Android application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-android-project-and-dependencies"&gt;
  &lt;/a&gt;
  ⚙️ Setup Android Project and Dependencies
&lt;/h2&gt;

&lt;p&gt;Using Android Studio, create a new Android Application project choosing the &lt;strong&gt;Empty Activity&lt;/strong&gt; template. Once the project is created, add the following dependencies to your app's &lt;code&gt;build.gradle(.kts)&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// Appwrite&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"io.appwrite:sdk-for-android:0.2.0"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Appcompat, LiveData, ViewModel and Activity extensions&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'androidx.appcompat:appcompat:1.3.0'&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'androidx.activity:activity-ktx:1.3.1'&lt;/span&gt;

    &lt;span class="c1"&gt;// JSON&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'com.google.code.gson:gson:2.8.7'&lt;/span&gt;

    &lt;span class="c1"&gt;// Image loading&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'com.github.bumptech.glide:glide:4.12.0'&lt;/span&gt;
    &lt;span class="n"&gt;kapt&lt;/span&gt; &lt;span class="s1"&gt;'com.github.bumptech.glide:compiler:4.12.0'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-add-android-platform"&gt;
  &lt;/a&gt;
  ➕️ Add Android Platform
&lt;/h2&gt;

&lt;p&gt;To initialize the Appwrite SDK and start interacting with Appwrite services, you first need to add a new Android platform to your project. To add a new platform, go to your Appwrite console, select your project (or create one if you haven't already), and click the &lt;strong&gt;Add Platform&lt;/strong&gt; button on the project Dashboard.&lt;/p&gt;

&lt;p&gt;From the options, choose to add a new Android platform and add your app credentials.&lt;/p&gt;

&lt;p&gt;Add your app name and package name. Your package name is generally the &lt;code&gt;applicationId&lt;/code&gt; in your app-level &lt;a href="https://github.com/abnegate/android-realtime-starter/blob/main/app/build.gradle"&gt;&lt;code&gt;build.gradle&lt;/code&gt;&lt;/a&gt; file. You may also find your package name in your &lt;a href="https://github.com/abnegate/android-realtime-starter/blob/main/app/src/main/AndroidManifest.xml"&gt;&lt;code&gt;AndroidManifest.xml&lt;/code&gt;&lt;/a&gt; file. By registering a new platform, you are allowing your app to communicate with the Appwrite API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-product-model"&gt;
  &lt;/a&gt;
  🧱 Create the Product Model
&lt;/h2&gt;

&lt;p&gt;We now need to create a model to represent a product on the Android side. Create a new Kotlin file &lt;code&gt;Product.kt&lt;/code&gt; and declare a simple data class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;sku&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;imageUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-views"&gt;
  &lt;/a&gt;
  ⚒️ Building Views
&lt;/h2&gt;

&lt;p&gt;Now, open your &lt;code&gt;app/src/main/res/layout/activity_main.xml&lt;/code&gt; and update the layout as following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;androidx.constraintlayout.widget.ConstraintLayout&lt;/span&gt;
        &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
        &lt;span class="na"&gt;xmlns:app=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;
        &lt;span class="na"&gt;xmlns:tools=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/tools"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="na"&gt;tools:context=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;androidx.recyclerview.widget.RecyclerView&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/recyclerProducts"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"0dp"&lt;/span&gt;
            &lt;span class="na"&gt;app:layoutManager=&lt;/span&gt;&lt;span class="s"&gt;"androidx.recyclerview.widget.GridLayoutManager"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintBottom_toTopOf=&lt;/span&gt;&lt;span class="s"&gt;"@id/btnSubscribe"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintEnd_toEndOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintStart_toStartOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintTop_toTopOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:spanCount=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/btnSubscribe"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_margin=&lt;/span&gt;&lt;span class="s"&gt;"16dp"&lt;/span&gt;
            &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"Subscribe to products"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintBottom_toBottomOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintLeft_toLeftOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintRight_toRightOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintTop_toBottomOf=&lt;/span&gt;&lt;span class="s"&gt;"@id/recyclerProducts"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/androidx.constraintlayout.widget.ConstraintLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice that the activity is quite simple; we only have a &lt;code&gt;Button&lt;/code&gt; to subscribe and a &lt;code&gt;RecyclerView&lt;/code&gt;. The &lt;code&gt;RecyclerView&lt;/code&gt; will be used to display the product collection in realtime as we add new products. We'll now need to define a separate view that will be used to represent each of the individual products.&lt;/p&gt;

&lt;p&gt;Create a new layout from &lt;code&gt;File &amp;gt; New &amp;gt; Layout Resource File&lt;/code&gt;, name it &lt;code&gt;item_product.xml&lt;/code&gt; and add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;androidx.constraintlayout.widget.ConstraintLayout&lt;/span&gt;
        &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
        &lt;span class="na"&gt;xmlns:app=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"120dp"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_margin=&lt;/span&gt;&lt;span class="s"&gt;"2dp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;ImageView&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/imgProduct"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"120dp"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintBottom_toBottomOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintEnd_toEndOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintStart_toStartOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintTop_toTopOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;View&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"34dp"&lt;/span&gt;
            &lt;span class="na"&gt;android:alpha=&lt;/span&gt;&lt;span class="s"&gt;"0.6"&lt;/span&gt;
            &lt;span class="na"&gt;android:background=&lt;/span&gt;&lt;span class="s"&gt;"@color/black"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintBottom_toBottomOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintEnd_toEndOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintStart_toStartOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/txtName"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_margin=&lt;/span&gt;&lt;span class="s"&gt;"8dp"&lt;/span&gt;
            &lt;span class="na"&gt;android:textColor=&lt;/span&gt;&lt;span class="s"&gt;"@color/white"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintBottom_toBottomOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintStart_toStartOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/txtPrice"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_margin=&lt;/span&gt;&lt;span class="s"&gt;"8dp"&lt;/span&gt;
            &lt;span class="na"&gt;android:textColor=&lt;/span&gt;&lt;span class="s"&gt;"@color/white"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintBottom_toBottomOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintEnd_toEndOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/androidx.constraintlayout.widget.ConstraintLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the pieces of our &lt;code&gt;RecyclerView&lt;/code&gt; are in place, and we can move on to setting up the &lt;code&gt;ViewModel&lt;/code&gt;, where most of the heavy lifting happens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-view-model"&gt;
  &lt;/a&gt;
  👩‍🔧 Create View Model
&lt;/h2&gt;

&lt;p&gt;Create &lt;code&gt;app/src/main/java/com/example/realtimestarter/RealtimeViewModel.kt&lt;/code&gt; and update it with following code. Make sure to replace all the property values near the top of the file with your own values which can be found in your Appwrite console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.realtimestarter&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.content.Context&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.util.Log&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.lifecycle.*&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.Client&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.extensions.toJson&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.models.RealtimeResponseEvent&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.models.RealtimeSubscription&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.services.Account&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.services.Database&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.services.Realtime&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.launch&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RealtimeViewModel&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewModel&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nc"&gt;LifecycleObserver&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;endpoint&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR_ENDPOINT"&lt;/span&gt;          &lt;span class="c1"&gt;// Replace with your endpoint&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;projectId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR_PROJECT_ID"&lt;/span&gt;       &lt;span class="c1"&gt;// Replace with your project ID&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;collectionId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR_COLLECTION_ID"&lt;/span&gt; &lt;span class="c1"&gt;// Replace with your product collection ID&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;realtime&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;lazy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Realtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;account&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;lazy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;db&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;lazy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;_productStream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MutableLiveData&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;productStream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;LiveData&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_productStream&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;_productDeleted&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MutableLiveData&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;productDeleted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;LiveData&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_productDeleted&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;RealtimeSubscription&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;subscribeToProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;buildClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;viewModelScope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Create a session so that we are authorized for realtime&lt;/span&gt;
            &lt;span class="nf"&gt;createSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="c1"&gt;// Attach an error logger to our realtime instance&lt;/span&gt;
            &lt;span class="n"&gt;realtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doOnError&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// Subscribe to document events for our collection and attach the handle product callback&lt;/span&gt;
            &lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;realtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;"collections.${collectionId}.documents"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;payloadType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;handleProductMessage&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;//createDummyProducts()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;handleProductMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;RealtimeResponseEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="s"&gt;"database.documents.create"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"database.documents.update"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;_productStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;postValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="s"&gt;"database.documents.delete"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;_productDeleted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;postValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;createDummyProducts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// For testing; insert 100 products while subscribed&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://dummyimage.com/600x400/cde/fff"&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;until&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createDocument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;collectionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone $i"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"sku-$i"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;buildClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;createSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createAnonymousSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@OnLifecycleEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Lifecycle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ON_STOP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;closeSocket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Activity is being destroyed; close our socket connection if it's open&lt;/span&gt;
        &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;ViewModel&lt;/code&gt; contains a function to call the realtime API and subscribe to notifications for create/update/delete events relating to any documents within the collection with id &lt;code&gt;collectionId&lt;/code&gt;, that is also visible to our user.&lt;/p&gt;

&lt;p&gt;To allow observing the incoming realtime updates from outside itself, the &lt;code&gt;ViewModel&lt;/code&gt; also exposes the &lt;code&gt;LiveData&lt;/code&gt; property &lt;code&gt;productStream&lt;/code&gt;, which we'll utilize in our &lt;code&gt;Activity&lt;/code&gt; later on to get realtime updates in our &lt;code&gt;RecyclerView&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recycler-view"&gt;
  &lt;/a&gt;
  ♻️ Recycler View
&lt;/h2&gt;

&lt;p&gt;There's 2 more files we need to add to get our &lt;code&gt;RecyclerView&lt;/code&gt; working:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;ProductAdapter&lt;/code&gt;, which will handle creating and binding a view for each &lt;code&gt;Product&lt;/code&gt; as they're added to the database. The &lt;code&gt;DiffUtil.ItemCallback&lt;/code&gt; provided in the constructor will be used to calculate list update diffs on a background thread, then post any changes on the UI thread, perfect for realtime! You can find more information on &lt;code&gt;DiffUtil&lt;/code&gt; &lt;a href="https://developer.android.com/reference/androidx/recyclerview/widget/DiffUtil"&gt;here&lt;/a&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.realtimestarter&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.LayoutInflater&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.ViewGroup&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.recyclerview.widget.DiffUtil&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.recyclerview.widget.ListAdapter&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductAdapter&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nc"&gt;ListAdapter&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;ProductViewHolder&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;DiffUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ItemCallback&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;areItemsTheSame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oldItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="n"&gt;oldItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sku&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;newItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sku&lt;/span&gt;

        &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;areContentsTheSame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oldItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="n"&gt;oldItem&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;newItem&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreateViewHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;viewType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;ProductViewHolder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;view&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;LayoutInflater&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inflate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item_product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;ProductViewHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onBindViewHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ProductViewHolder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;item&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProductImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imageUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;submitNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;current&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toMutableList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;index&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;indexOfFirst&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sku&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sku&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nf"&gt;submitList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;submitDeleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;submitList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;currentList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toMutableList&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;ProductViewHolder&lt;/code&gt; which describes a single &lt;code&gt;Product&lt;/code&gt; view and metadata about it's position in the &lt;code&gt;RecyclerView&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.realtimestarter&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.View&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.widget.ImageView&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.widget.TextView&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.recyclerview.widget.RecyclerView&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.bumptech.glide.Glide&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductViewHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;RecyclerView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ViewHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;nameView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;TextView&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txtName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;priceView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;TextView&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txtPrice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ImageView&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imgProduct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;nameView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;priceView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"\$$price"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setProductImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Glide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;centerCrop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;into&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#activity"&gt;
  &lt;/a&gt;
  💆 Activity
&lt;/h2&gt;

&lt;p&gt;With everything else in place, lets tie it all together in our &lt;code&gt;MainActivity&lt;/code&gt;. Open &lt;code&gt;app/src/main/java/com/example/realtimestarter/MainActivity.kt&lt;/code&gt; and update like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.realtimestarter&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.os.Bundle&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.widget.Button&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.activity.viewModels&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.appcompat.app.AppCompatActivity&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.recyclerview.widget.RecyclerView&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RealtimeActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;viewModel&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;viewModels&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RealtimeViewModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activity_realtime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;button&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;btnSubscribe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscribeToProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;adapter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ProductAdapter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;recycler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RecyclerView&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recyclerProducts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;recycler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt;

        &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;submitNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productDeleted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;submitDeleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;lifecycle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onStop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onStop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;lifecycle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;removeObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-get-realtime"&gt;
  &lt;/a&gt;
  🏎️ Let's Get Realtime
&lt;/h2&gt;

&lt;p&gt;That's it, all that's left is to run the application, then add some documents. When running on your emulator or device, click &lt;strong&gt;Subscribe&lt;/strong&gt; to start listening for realtime updates.&lt;/p&gt;

&lt;p&gt;Head back to your Appwrite console and navigate to the &lt;code&gt;Products&lt;/code&gt; collection we created earlier. From here, we can start adding new documents and see them appear in our app.&lt;/p&gt;

&lt;p&gt;As soon you add a product in the console, you'll see them appear in the UI of your app! That's the real beauty of Appwrite Realtime, as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tX7FdcC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s9.gifyu.com/images/products-realtime90a165133e674618.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tX7FdcC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s9.gifyu.com/images/products-realtime90a165133e674618.gif" alt="Products GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🥂 Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed building this Realtime Application with Appwrite and Android. The full source for this application is available in the &lt;a href="https://github.com/abnegate/android-realtime-starter"&gt;Demo Realtime Application&lt;/a&gt; repository. Let us know if you have any feedback or suggestions. Looking forward to seeing what the community can create with Appwrite Realtime and Android!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  🎓 Learn More
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/getting-started-with-android"&gt;Getting Started With Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/playground-for-android"&gt;Android Playground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;Appwrite Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>android</category>
      <category>opensource</category>
      <category>news</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Programming For Hours- 5 Tips To Stay Productive</title>
      <author>Jaskirat Singh</author>
      <pubDate>Mon, 06 Sep 2021 10:24:33 +0000</pubDate>
      <link>https://dev.to/jaskirat1325/programming-for-hours-5-tips-to-stay-productive-2cfk</link>
      <guid>https://dev.to/jaskirat1325/programming-for-hours-5-tips-to-stay-productive-2cfk</guid>
      <description>&lt;p&gt;There are times when you have to code like straight for hours. But is it actually practically possible to work effectively on something on which you need both Mental focus and Thought process. If you ask me I would say yes it is possible to do so. But, You do need to involve some hacks and tricks to stay productive. Here are a few very common ways to stay focused and attentive while your hands are on keyboard for a code.&lt;br&gt;&lt;br&gt;
    ## Table Of Contents&lt;br&gt;
        * &lt;a href="#Music"&gt;Use of music&lt;/a&gt;&lt;br&gt;
        * &lt;a href="#drink"&gt;Always Have Something To Drink&lt;/a&gt;&lt;br&gt;
        * &lt;a href="#desk"&gt;Have Everything On Desk&lt;/a&gt;&lt;br&gt;
        * &lt;a href="#Time"&gt;No Time Peeking&lt;/a&gt;&lt;br&gt;
        * &lt;a href="#sanitizer"&gt;carry hand sanitizer&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-music"&gt;
  &lt;/a&gt;
  1) Music&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Generally speaking this is one of the most effective methods to stay focused in long hours of continuous programming. I have seen and tried this method myself. Even if your code is not running &lt;a href="https://goscreen.in/benefits-of-music/"&gt;Music&lt;/a&gt; will make you stay calm and not lose your cool. You won't get frustrated quickly and you will just keep on trying. Every time I use to code, I carried one earpiece along with me always.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-always-have-something-to-drink"&gt;
  &lt;/a&gt;
  2) Always Have Something To Drink&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r-JtspMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbpjoggfhjyvuyquusgs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r-JtspMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbpjoggfhjyvuyquusgs.jpg" alt="A drink while we work"&gt;&lt;/a&gt;&lt;br&gt;
   Many might be thinking that If we indulge in drinking something. Eventually we need to go to the bathroom. Well the thing is I am not saying you to drink a whole bottle or soft drink or something. But, Drink when you start feeling exhausted. This will give you a sense of relaxation and freshness. Again one thing I must make clear here these are not something scientifically proven facts. They just work for me as well as many others I know. That is why I am suggesting this to you.When I code I always have my water bottle along with me. This is just how I stick with my work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-have-everything-on-desk"&gt;
  &lt;/a&gt;
  3) Have Everything On Desk&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is something which is not just applicable to those who write programs, But is for everyone around who have long sitting hours. You want to study whole sunday for test? this is how we do it. Having everything on your desk is just not good but a great practice. Because if you have to stand up from your seat after every few minutes it will eventually break the momentum you created for hours of sitting. I don't think anyone want to do that right.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-no-time-peeking"&gt;
  &lt;/a&gt;
  4) No Time Peeking&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xabES1fL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://goscreen.in/wp-content/uploads/2021/08/Confused-e1630254124717.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xabES1fL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://goscreen.in/wp-content/uploads/2021/08/Confused-e1630254124717.png" alt="girl confused"&gt;&lt;/a&gt;&lt;br&gt;
    You probably might be thinking that what do I mean with this time peeking think. It actually means that when you are Programming, Don't look at the time any way. What you should do is buy a watch in which you can set it to beep after every one hour. This will surely be very efficient way of stay up with the time. You just need to remember that with every beep that hear time is passing. You also have to do other stuff right so wind it up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-carry-a-hand-sanitizer-or-wet-wipes"&gt;
  &lt;/a&gt;
  5) carry a Hand sanitizer or wet wipes&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Now you know this already that you need to use the bathroom before you start your programming or study. But you should carry a hand sanitizer too. Sometimes you just need your hands clean for any reason. This is when hand sanitizer comes to play. Also it is suggested to have wet wipes with you. Why let's suppose you got some glue on your hands and sanitizer can't do much but wipes can.&lt;/p&gt;

&lt;p&gt;Which one of these interest you. I can't wait to see your response in the comment section. Make sure to ask questions which you have. I will love to answer them all. Or maybe you just want to share an experience that is also welcomed. With that said see you later CODERS!&lt;br&gt;
Image credits - &lt;a href="https://Goscreen.in"&gt;GoScreen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Angular reusable resolvers</title>
      <author>Igor Filippov</author>
      <pubDate>Mon, 06 Sep 2021 10:16:33 +0000</pubDate>
      <link>https://dev.to/igorfilippov3/angular-reusable-resolvers-3i94</link>
      <guid>https://dev.to/igorfilippov3/angular-reusable-resolvers-3i94</guid>
      <description>&lt;p&gt;Hello!&lt;/p&gt;

&lt;p&gt;At the moment, I am working at my new project - &lt;a href="https://pagehealth.me/about"&gt;Page Health&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;It is a SaaS platform which provides a page performance monitoring on the long run. &lt;/p&gt;

&lt;p&gt;In this application I had a lot of cases, where I had to duplicate the code of my resolvers to make very, very similar things.&lt;/p&gt;

&lt;p&gt;That's why I took thought about how to implement the DRY coding principle in my app.&lt;/p&gt;

&lt;p&gt;First, I take a glance at official angular &lt;a href="https://angular.io/api/router/Resolve"&gt;documentation&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;And here I found an interesting way to implement resolvers with in-line functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myHero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;RouterModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;detail/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HeroComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heroResolver&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heroResolver&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RouterStateSnapshot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myHero&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, I decided to create a function which will return a reusable provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createPageResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;redirectRoute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pageResolver&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;NotificationsService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PagesApiService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;useFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NotificationsService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PagesApiService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PageResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;redirectRoute&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's explain it step by step:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;provide&lt;/em&gt; - it is the name of my provider.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;deps&lt;/em&gt; - is shorten for the word - dependencies. In my case I need some services to do my stuff and Router from &lt;strong&gt;@angular/router&lt;/strong&gt; to redirect user if condition in resolve function is not match.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;useFactory&lt;/em&gt; - unlike the example in the official docs, I need it, because in my case I need to return a new instance of resolver, not a simple value.&lt;/p&gt;

&lt;p&gt;And actually code of my resolver.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;imports&lt;/span&gt; &lt;span class="nx"&gt;here&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PageResolver&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Resolve&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PageDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="na"&gt;notificationsService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NotificationsService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="na"&gt;pagesApiService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PagesApiService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="na"&gt;router&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redirectRoute&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="na"&gt;redirectRoute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PageDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;param&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;pageId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageId&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notificationsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Invalid page id.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirectRoute&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pagesApiService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notificationsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unable to get this page.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirectRoute&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By the way, the code can be extended with custom error message, depending on situation, but in my case a static message is completely enough.&lt;/p&gt;

&lt;p&gt;Also, please note, that I did not add an &lt;strong&gt;@Injecable()&lt;/strong&gt; decorator for my resolver class, because, injection happens in useFactory method.&lt;/p&gt;

&lt;p&gt;If you do not fully understand how to use it, here is an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;imports&lt;/span&gt; &lt;span class="nx"&gt;here&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PageSpeedComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt; &lt;span class="nx"&gt;other&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PageSpeedMetricsComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Chrome User Experience Report&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pageResolver&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;RouterModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
  &lt;span class="na"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;RouterModule&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;createPageResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/user-experience&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PageSpeedRoutingModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope, this small technick will be useful for somebody :)&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Implement traditional auth system in Symfony with less code than ever</title>
      <author>Goran Hrženjak</author>
      <pubDate>Mon, 06 Sep 2021 10:16:16 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/implement-traditional-auth-system-in-symfony-with-less-code-than-ever-5h25</link>
      <guid>https://dev.to/bornfightcompany/implement-traditional-auth-system-in-symfony-with-less-code-than-ever-5h25</guid>
      <description>&lt;p&gt;PHP 8 introduced some new concepts and really helpful syntax features. &lt;br&gt;
To significantly reduce the boilerplate code, whenever possible, we can use &lt;a href="https://stitcher.io/blog/constructor-promotion-in-php-8"&gt;Constructor property promotion&lt;/a&gt;. Another thing I'll focus on in this guide is replacing annotations with &lt;a href="https://stitcher.io/blog/attributes-in-php-8"&gt;PHP attributes&lt;/a&gt;. This will also reduce the number of lines of code in our classes every now and then.&lt;br&gt;
As of version &lt;a href="https://www.doctrine-project.org/2021/05/24/orm2.9.html"&gt;2.9&lt;/a&gt;, Doctrine supports using PHP 8 Attributes as a new driver for mapping entities. &lt;/p&gt;

&lt;p&gt;Not only will we need fewer lines of code than ever for this project, but also we will need to write less of that code ourselves than ever. I’m emphasizing this because we’ll heavily rely on the &lt;a href="https://symfony.com/bundles/SymfonyMakerBundle/current/index.html"&gt;Maker bundle&lt;/a&gt; which will generate the majority of files and actual app logic for the project.&lt;br&gt;
At the time of writing this post, Maker bundle still didn’t fully adopt all new PHP possibilities and some adjustments will be done manually. &lt;/p&gt;

&lt;p&gt;The goal of the app is to provide a basic traditional authentication system with registration and login features and email verification.&lt;br&gt;
App will have 3 sections: &lt;em&gt;public&lt;/em&gt; section accessible by everyone, &lt;em&gt;profile&lt;/em&gt; section available to all logged in users, and &lt;em&gt;content&lt;/em&gt; section available only to verified users.&lt;br&gt;
Account verification will be done by simply clicking a link in the verification email. &lt;/p&gt;

&lt;p&gt;Create a new project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;composer create-project symfony/website-skeleton my_new_app
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(or use Symfony CLI). I’m using Symfony 5.3.7.&lt;br&gt;
Make sure to update required PHP version in &lt;code&gt;composer.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;{&lt;/span&gt;
    "require": {
&lt;span class="gd"&gt;-       "php": "&amp;gt;=7.2.5",
&lt;/span&gt;&lt;span class="gi"&gt;+       "php": "^8.0",
&lt;/span&gt;    }
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update Doctrine configuration - use attributes instead of annotations! Without this, generation migrations will not work. &lt;br&gt;
&lt;code&gt;config/packages/doctrine.yaml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;doctrine:
&lt;/span&gt;    orm:
        mappings:
            App:
&lt;span class="gd"&gt;-               type: annotation
&lt;/span&gt;&lt;span class="gi"&gt;+               type: attribute
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's make initial &lt;code&gt;User&lt;/code&gt; entity:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;php bin/console make:user
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Answer &lt;code&gt;[yes]&lt;/code&gt; or select defaults for all questions in the wizard.&lt;br&gt;
This should create &lt;code&gt;src/Entity/User.php&lt;/code&gt; and &lt;code&gt;src/Repository/UserRepository.php&lt;/code&gt; and update &lt;code&gt;config/packages/security.yaml&lt;/code&gt; files. &lt;/p&gt;

&lt;p&gt;Symfony Maker bundle still doesn’t support attributes, but generated entities will still save us a lot of time. We can replace annotations with attributes ourselves.&lt;br&gt;
Use attributes and property types to reduce the amount of code. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/Entity/User.php&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- /**
-  * @ORM\Entity(repositoryClass=UserRepository::class)
-  */
&lt;/span&gt;&lt;span class="gi"&gt;+ #[ORM\Entity(repositoryClass: UserRepository::class)]
&lt;/span&gt;&lt;span class="p"&gt;class User implements UserInterface, PasswordAuthenticatedUserInterface
&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt; 
&lt;span class="gd"&gt;-   /**
-    * @ORM\Id
-    * @ORM\GeneratedValue
-    * @ORM\Column(type="integer")
-    */
-   private $id;
&lt;/span&gt;&lt;span class="gi"&gt;+   #[ORM\Id, ORM\GeneratedValue, ORM\Column]
+   private int $id;
&lt;/span&gt;&lt;span class="gd"&gt;-   /**
-    * @ORM\Column(type="string", length=180, unique=true)
-    */
-   private $email;
&lt;/span&gt;&lt;span class="gi"&gt;+   #[ORM\Column(length: 180, unique: true)]
+   private string $email;
&lt;/span&gt;&lt;span class="gd"&gt;-   /**
-    * @ORM\Column(type="json")
-    */
&lt;/span&gt;&lt;span class="gi"&gt;+   #[ORM\Column(type: 'json)]
&lt;/span&gt;    private $roles = [];
&lt;span class="gd"&gt;-   /**
-    * @var string The hashed password
-    * @ORM\Column(type="string")
-    */
-   private $password;
&lt;/span&gt;&lt;span class="gi"&gt;+   #[ORM\Column]
+   private string $password;
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make migration and execute it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;php bin/console make:migration
php bin/console doctrine:migration:migrate
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generate simple controllers: &lt;code&gt;PublicController&lt;/code&gt;, &lt;code&gt;ProfileController&lt;/code&gt;, &lt;code&gt;ContentController&lt;/code&gt;. This will add routes &lt;code&gt;/public&lt;/code&gt;, &lt;code&gt;/profile&lt;/code&gt; and &lt;code&gt;/content&lt;/code&gt;. You can do this with Maker as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;php bin/console make:controller
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rename route names for consistency by prefixing them with: &lt;code&gt;app_&lt;/code&gt;.&lt;br&gt;
All 3 routes should be available to anyone at this stage. &lt;/p&gt;

&lt;p&gt;Add role hierarchy and access rules to &lt;code&gt;config/packages/security.yaml&lt;/code&gt; to achieve what's explained above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;security:
&lt;/span&gt;&lt;span class="gi"&gt;+   role_hierarchy:
+       ROLE_VERIFIED_USER: [ ROLE_USER ]
&lt;/span&gt;    access_control:
&lt;span class="gi"&gt;+       - { path: ^/content, roles: ROLE_VERIFIED_USER }
+       - { path: ^/profile, roles: ROLE_USER }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you should be getting &lt;em&gt;401 Unauthorized&lt;/em&gt; error if you try to access &lt;code&gt;/profile&lt;/code&gt; or &lt;code&gt;/content&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Make the login authentication:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;php bin/console make:auth
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select &lt;code&gt;[1] Login form authenticator&lt;/code&gt;, call it &lt;code&gt;LoginFormAuthenticator&lt;/code&gt;, confirm the controller name: &lt;code&gt;SecurityController&lt;/code&gt; and accept adding the logout route. &lt;/p&gt;

&lt;p&gt;This will update the &lt;code&gt;config/packages/security.yaml&lt;/code&gt; file by adding a logout route and create authenticator, controller and login form files.&lt;/p&gt;

&lt;p&gt;First of all, in login form Twig template, replace deprecated &lt;code&gt;user.username&lt;/code&gt; with &lt;code&gt;user.userIdentifier&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- You are logged in as {{ app.user.username }}, &amp;lt;a href="{{ path('app_logout') }}"&amp;gt;Logout&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span class="gi"&gt;+ You are logged in as {{ app.user.userIdentifier }}, &amp;lt;a href="{{ path('app_logout') }}"&amp;gt;Logout&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;src/Controller/SecurityController.php&lt;/code&gt; we can replace routes defined by annotations with those defined by attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;class SecurityController extends AbstractController
&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt; 
&lt;span class="gd"&gt;-   /**
-    * @Route("/login", name="app_login")
-    */
&lt;/span&gt;&lt;span class="gi"&gt;+   #[Route('/login', name: 'app_login')]
&lt;/span&gt;    public function login(AuthenticationUtils $authenticationUtils): Response
&lt;span class="gd"&gt;-   /**
-    * @Route("/logout", name="app_logout")
-    */
&lt;/span&gt;&lt;span class="gi"&gt;+   #[Route('/logout', name: 'app_logout')]
&lt;/span&gt;    public function logout()
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to constructor property promotion in PHP 8, we can rewrite the constructor in &lt;code&gt;src/Security/LoginFormAuthenticator.php&lt;/code&gt;. While at it, add proper response in &lt;code&gt;onAuthenticationSuccess&lt;/code&gt; method:&lt;br&gt;
after successful login, redirect to &lt;code&gt;app_profile&lt;/code&gt; route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;class LoginFormAuthenticator extends AbstractLoginFormAuthenticator
&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt; 
&lt;span class="gd"&gt;-   private UrlGeneratorInterface $urlGenerator;
-
-   public function __construct(UrlGeneratorInterface $urlGenerator)
-   {
-       $this-&amp;gt;urlGenerator = $urlGenerator;
-   }
&lt;/span&gt;&lt;span class="gi"&gt;+   public function __construct(private UrlGeneratorInterface $urlGenerator)
+   {
+   }
&lt;/span&gt;
    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
    {
&lt;span class="gd"&gt;-       throw new \Exception('TODO: provide a valid redirect inside '.__FILE__);
&lt;/span&gt;&lt;span class="gi"&gt;+       return new RedirectResponse($this-&amp;gt;urlGenerator-&amp;gt;generate('app_profile'));
&lt;/span&gt;    }
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: If you're using a Symfony plugin in your code editor and it's complaining it can't find the route with the given name, make sure you've prefixed those routes in controllers as suggested above.&lt;/p&gt;

&lt;p&gt;Notice how slim this authenticator became in comparison to what it used to look in older versions of Symfony. &lt;/p&gt;

&lt;p&gt;Let’s implement registration logic.&lt;br&gt;
Should we write all of this ourselves? Nope. Maker bundle to the rescue again. &lt;br&gt;
First of all, let’s require another bundle, one for handling email verification logic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;composer require symfonycasts/verify-email-bundle
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;php bin/console make:registration-form
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select defaults except the one for including user ID in the link - answer &lt;code&gt;yes&lt;/code&gt; on that prompt; and select &lt;code&gt;app_profile&lt;/code&gt; as a route to redirect to after registration. &lt;br&gt;
It's possible that Maker will warn you no Guard authenticators were found and users won't be automatically authenticated after registering. Ignore this for now, we'll implement a solution for this at the end.&lt;br&gt;
The command will change &lt;code&gt;User&lt;/code&gt; entity and create confirmation email and registration form Twig templates as well as create a &lt;code&gt;RegistrationController&lt;/code&gt;, &lt;code&gt;RegistrationFormType&lt;/code&gt; and &lt;code&gt;EmailVerifier&lt;/code&gt; helper.&lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;src/Entity/User.php&lt;/code&gt; first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- /**
-  * @UniqueEntity(fields={"email"}, message="There is already an account with this email")
-  */
&lt;/span&gt;&lt;span class="gi"&gt;+ #[UniqueEntity(fields: ['email'], message: 'There is already an account with this email')]
&lt;/span&gt;&lt;span class="p"&gt;class User implements UserInterface, PasswordAuthenticatedUserInterface
&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt; 
&lt;span class="gd"&gt;-   /**
-    * @ORM\Column(type="boolean")
-    */
-   private $isVerified = false;
&lt;/span&gt;&lt;span class="gi"&gt;+   #[ORM\Column(options: ['default' =&amp;gt; false])]
+   private bool $isVerified = false;
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generate a migration for adding this new flag and execute it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;php bin/console make:migration
php bin/console doctrine:migration:migrate
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Symfony recommends putting as little logic as possible in controllers. That’s why complex forms will be moved to dedicated classes instead of defining them in controller actions. Maker did that for us. &lt;br&gt;
There are few things to change in &lt;code&gt;RegistrationController&lt;/code&gt; - use constructor property promotion and replace deprecated &lt;code&gt;UserPasswordEncoderInterface&lt;/code&gt; with &lt;code&gt;UserPasswordHasherInterface&lt;/code&gt;. &lt;br&gt;
At the end of the verification process, redirect to the content page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gi"&gt;+ use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
&lt;/span&gt;&lt;span class="gd"&gt;- use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
&lt;/span&gt;
class RegistrationController extends AbstractController
&lt;span class="err"&gt;{&lt;/span&gt; 
&lt;span class="gd"&gt;-   private $emailVerifier;
-
-   public function __construct(EmailVerifier $emailVerifier)
-   {
-       $this-&amp;gt;emailVerifier = $emailVerifier;
-   }
&lt;/span&gt;&lt;span class="gi"&gt;+   public function __construct(private EmailVerifier $emailVerifier)
+   {
+   } 
&lt;/span&gt;&lt;span class="gd"&gt;-   public function register(Request $request, UserPasswordEncoderInterface $passwordEncoder): Response
&lt;/span&gt;&lt;span class="gi"&gt;+   public function register(Request $request, UserPasswordHasherInterface $passwordHasher): Response
&lt;/span&gt;    {
        $user-&amp;gt;setPassword(
&lt;span class="gd"&gt;-           $passwordEncoder-&amp;gt;encodePassword(
-               $user,
-               $form-&amp;gt;get('plainPassword')-&amp;gt;getData()
-           )
&lt;/span&gt;&lt;span class="gi"&gt;+           $passwordHasher-&amp;gt;hashPassword($user, $form-&amp;gt;get('plainPassword')-&amp;gt;getData())
&lt;/span&gt;        );
    }

    public function verifyUserEmail(Request $request, UserRepository $userRepository): Response
    {
&lt;span class="gd"&gt;-       return $this-&amp;gt;redirectToRoute('app_register');
&lt;/span&gt;&lt;span class="gi"&gt;+       return $this-&amp;gt;redirectToRoute('app_content');
&lt;/span&gt;    }
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to shorten that constructor in the EmailVerifier class and also add proper user roles after email verification:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;class EmailVerifier
&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt; 
&lt;span class="gd"&gt;-   private $verifyEmailHelper;
-   private $mailer;
-   private $entityManager;
-
-   public function __construct(VerifyEmailHelperInterface $helper, MailerInterface $mailer, EntityManagerInterface $manager)
-   {
-       $this-&amp;gt;verifyEmailHelper = $helper;
-       $this-&amp;gt;mailer = $mailer;
-       $this-&amp;gt;entityManager = $manager;
-   }
&lt;/span&gt;&lt;span class="gi"&gt;+   public function __construct(
+       private VerifyEmailHelperInterface $verifyEmailHelper,
+       private MailerInterface $mailer,
+       private EntityManagerInterface $entityManager
+   ) {
+   }
&lt;/span&gt;
    public function handleEmailConfirmation(Request $request, UserInterface $user): void
    { 
        $user-&amp;gt;setIsVerified(true);
&lt;span class="gi"&gt;+       $user-&amp;gt;setRoles(['ROLE_VERIFIED_USER']);
&lt;/span&gt;    }
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In later versions of Maker bundle where dependency to Guards will be dropped, this might be resolved, but for now we have to implement logging user in after registration manually.&lt;br&gt;
Not a huge deal really. Just inject the &lt;code&gt;UserAuthenticatorInterface&lt;/code&gt; and our authenticator in the &lt;code&gt;register&lt;/code&gt; method and authenticate the user before returning the redirect response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gi"&gt;+ use App\Security\LoginFormAuthenticator;
+ use Symfony\Component\Security\Http\Authentication\UserAuthenticatorInterface;
&lt;/span&gt;
class RegistrationController extends AbstractController
&lt;span class="err"&gt;{&lt;/span&gt; 
&lt;span class="gd"&gt;-   public function register(Request $request, UserPasswordHasherInterface $passwordHasher): Response
-   {
&lt;/span&gt;&lt;span class="gi"&gt;+   public function register(
+       Request $request,
+       UserPasswordHasherInterface $passwordHasher,
+       UserAuthenticatorInterface $authenticator,
+       LoginFormAuthenticator $formAuthenticator
+   ): Response {
&lt;/span&gt;        if ($form-&amp;gt;isSubmitted() &amp;amp;&amp;amp; $form-&amp;gt;isValid()) {
            // ...
&lt;span class="gi"&gt;+           $authenticator-&amp;gt;authenticateUser($user, $formAuthenticator, $request);
&lt;/span&gt;
            return $this-&amp;gt;redirectToRoute('app_profile');
        }
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's basically it for the scope of this guide 🤓  &lt;/p&gt;

&lt;p&gt;Try accessing &lt;code&gt;/profile&lt;/code&gt; or &lt;code&gt;/content&lt;/code&gt; route. You should be redirected to the login page. If you still haven't, it's time to register as a new user.&lt;br&gt;
Go to &lt;code&gt;/register&lt;/code&gt; and enter the desired email and password. You should be logged in automatically and redirected to &lt;code&gt;/profile&lt;/code&gt;. Accessing &lt;code&gt;/content&lt;/code&gt; is still not possible.&lt;br&gt;
You should have received a verification email. For this to work out of the box, you only need to set up the &lt;code&gt;MAILER_DSN&lt;/code&gt; environmental variable according to your mailing server. &lt;br&gt;
After clicking the confirmation link, flag &lt;code&gt;is_verified&lt;/code&gt; will be set, user role &lt;code&gt;ROLE_VERIFIED_USER&lt;/code&gt; added and you'll be able to access &lt;code&gt;/content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can render flash messages or add password reset feature (by including another great bundle: &lt;code&gt;symfonycasts/reset-password-bundle&lt;/code&gt;) or maybe implement social logins as the next step.&lt;/p&gt;

&lt;p&gt;Let me know in the comments if code snippets with diffs weren't clear enough or if you have any other questions.&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>symfony</category>
      <category>php</category>
      <category>doctrine</category>
    </item>
    <item>
      <title>Data Structures: Bidirectional Map</title>
      <author>Maksim</author>
      <pubDate>Mon, 06 Sep 2021 10:13:14 +0000</pubDate>
      <link>https://dev.to/pretaporter/data-structures-bidirectional-map-3f73</link>
      <guid>https://dev.to/pretaporter/data-structures-bidirectional-map-3f73</guid>
      <description>&lt;p&gt;In computer science, a bidirectional map is an associative data structure in which the &lt;em&gt;(key,value)&lt;/em&gt; pairs form a one-to-one correspondence. Also known as bijective map. &lt;a href="https://en.wikipedia.org/wiki/Bidirectional_map"&gt;Article on Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is not widely used data structure in web development, but in some cases really quite useful, for instance in encryption.&lt;/p&gt;

&lt;p&gt;Let's describe our goal. Implement data structure, where following operations are performed in constant time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get value by key&lt;/li&gt;
&lt;li&gt;Get key by value&lt;/li&gt;
&lt;li&gt;Remove record by key&lt;/li&gt;
&lt;li&gt;Remove record by value&lt;/li&gt;
&lt;li&gt;Check for the existence of key&lt;/li&gt;
&lt;li&gt;Check for the existence of value&lt;/li&gt;
&lt;li&gt;Get the size of the map&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Implementation below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BidirectionalMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="na"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;deleteKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;deleteValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;IterableIterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;hasKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;hasValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;IterableIterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;IterableIterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically we can consider this data structure as extending of Map class. Current implementation could be improved by adding &lt;code&gt;forEach&lt;/code&gt; method and iterable protocol, which will allow to define iteration behavior of Bidirectional Map. Let me know in comments if your interesting to know, how to do it exactly.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>programming</category>
    </item>
    <item>
      <title>100 blog topic ideas for your next article - No more writers block</title>
      <author>Andrew Baisden</author>
      <pubDate>Mon, 06 Sep 2021 09:42:59 +0000</pubDate>
      <link>https://dev.to/andrewbaisden/100-blog-topic-ideas-for-your-next-article-no-more-writers-block-2e0j</link>
      <guid>https://dev.to/andrewbaisden/100-blog-topic-ideas-for-your-next-article-no-more-writers-block-2e0j</guid>
      <description>&lt;p&gt;A stumbling block for almost all aspiring writers is what should I write about? Writers block prevents a lot of writers from creating articles because they just can't think of something good to write about. I have put together a list of 100 blog topics that you could write about. You can use this list as inspiration to come up with ideas for your own articles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are 100 blog topics to inspire you to write!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-framework-x-vs-framework-y"&gt;
  &lt;/a&gt;
  1. Framework X vs Framework Y
&lt;/h3&gt;

&lt;p&gt;You could compare the differences between React and Vue for example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-why-i-decided-to-become-a-developer"&gt;
  &lt;/a&gt;
  2. Why I decided to become a developer
&lt;/h3&gt;

&lt;p&gt;Talk about your transition into the tech world&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-frontend-vs-backend"&gt;
  &lt;/a&gt;
  3. Front-End vs Back-End
&lt;/h3&gt;

&lt;p&gt;The difference between the two&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-why-you-should-become-a-writer"&gt;
  &lt;/a&gt;
  4. Why you should become a writer
&lt;/h3&gt;

&lt;p&gt;Reasons for becoming a blogger/writer&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-what-i-learned-from-looking-for-a-developer-job"&gt;
  &lt;/a&gt;
  5. What I learned from looking for a developer job
&lt;/h3&gt;

&lt;p&gt;Talk about your personal experience when you were looking for work&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-how-to-grow-fast-on-twitter"&gt;
  &lt;/a&gt;
  6. How to grow fast on Twitter
&lt;/h3&gt;

&lt;p&gt;Talk about your recent fast growth and what you learned about marketing&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-how-to-build-mobile-apps-using-language-x"&gt;
  &lt;/a&gt;
  7. How to build mobile apps using language X
&lt;/h3&gt;

&lt;p&gt;Building mobile apps using flutter/react native/swift/kotlin/java etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-how-to-deal-with-imposter-syndrome"&gt;
  &lt;/a&gt;
  8. How to deal with imposter syndrome
&lt;/h3&gt;

&lt;p&gt;Tips on dealing with imposter syndrome&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-tips-for-building-a-strong-brand"&gt;
  &lt;/a&gt;
  9. Tips for building a strong brand
&lt;/h3&gt;

&lt;p&gt;Examples and personal experience on building a brand&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-why-you-should-join-a-bootcamp"&gt;
  &lt;/a&gt;
  10. Why you should join a bootcamp
&lt;/h3&gt;

&lt;p&gt;Personal experiences on how it worked out for you&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-top-x-ways-to-become-a-self-taught-developer"&gt;
  &lt;/a&gt;
  11. Top X ways to become a self taught developer
&lt;/h3&gt;

&lt;p&gt;A list of items on how to learn and become a developer&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-how-to-build-an-api-using-language-x"&gt;
  &lt;/a&gt;
  12. How to build an API using language X
&lt;/h3&gt;

&lt;p&gt;You could write a guide for creating an API using Node.js&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-a-beginners-guide-to-building-an-app-using-framework-x"&gt;
  &lt;/a&gt;
  13. A beginners guide to building an app using framework X
&lt;/h3&gt;

&lt;p&gt;A guide for building apps using a framework like Next.js, Gatsby, React, Vue etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-here-are-x-courses-for-learning-language-y"&gt;
  &lt;/a&gt;
  14. Here are X courses for learning language Y
&lt;/h3&gt;

&lt;p&gt;For example 10 courses for learning Python&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-x-best-approaches-for-learning-a-programming-language"&gt;
  &lt;/a&gt;
  15. X best approaches for learning a programming language
&lt;/h3&gt;

&lt;p&gt;For example 5 best approaches for learning JavaScript&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#16-why-you-should-be-using-database-x"&gt;
  &lt;/a&gt;
  16. Why you should be using database X
&lt;/h3&gt;

&lt;p&gt;A detailed article on why you should be using MongoDB for storage for example etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#17-what-i-learned-after-failing-x-interviews"&gt;
  &lt;/a&gt;
  17. What I learned after failing X interviews
&lt;/h3&gt;

&lt;p&gt;Talk about what you learned after failing 15 interviews for example&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#18-what-i-plan-on-learning-and-who-i-am"&gt;
  &lt;/a&gt;
  18. What I plan on learning and who I am
&lt;/h3&gt;

&lt;p&gt;An introduction on who you are and what you are learning&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#19-fundamentals-all-developers-should-know-about-language-x"&gt;
  &lt;/a&gt;
  19. Fundamentals all developers should know about language X
&lt;/h3&gt;

&lt;p&gt;Talk about JavaScript, Python or another language and the fundamentals&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#20-what-i-realised-after-learning-language-x-language-y-and-language-z"&gt;
  &lt;/a&gt;
  20. What I realised after learning language X, language Y and language Z
&lt;/h3&gt;

&lt;p&gt;For example JavaScript, Python and C# talk about your findings after you played around with them for the first time &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#21-x-good-traits-top-developers-have-and-how-to-be-like-them"&gt;
  &lt;/a&gt;
  21. X good traits top developers have and how to be like them
&lt;/h3&gt;

&lt;p&gt;For example you could talk about 10 good traits and how to use them to your advantage&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-what-i-learned-from-hackathons"&gt;
  &lt;/a&gt;
  22. What I learned from hackathons
&lt;/h3&gt;

&lt;p&gt;Talk about your experience&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#23-how-to-use-x-css-framework-with-y-javascript-framework"&gt;
  &lt;/a&gt;
  23. How to use X CSS framework with Y JavaScript framework
&lt;/h3&gt;

&lt;p&gt;In this example you could talk about using Tailwind CSS with React&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#24-how-to-make-a-passive-income-on-gumroad"&gt;
  &lt;/a&gt;
  24. How to make a passive income on GumRoad
&lt;/h3&gt;

&lt;p&gt;Talk about your success and experience on GumRoad&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#25-how-to-make-a-passive-income-on-producthunt"&gt;
  &lt;/a&gt;
  25. How to make a passive income on ProductHunt
&lt;/h3&gt;

&lt;p&gt;Talk about your success and experience on ProductHunt&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#26-freelancing-vs-full-time-employment"&gt;
  &lt;/a&gt;
  26. Freelancing vs Full Time employment
&lt;/h3&gt;

&lt;p&gt;The difference between the two&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#27-the-difference-between-static-site-generators-and-which-one-to-use"&gt;
  &lt;/a&gt;
  27. The difference between static site generators and which one to use
&lt;/h3&gt;

&lt;p&gt;Talk about the differences &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#28-a-day-in-the-life-of-a-software-developer"&gt;
  &lt;/a&gt;
  28. A day in the life of a software developer
&lt;/h3&gt;

&lt;p&gt;Talk about what its really like to work in the industry&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#29-how-to-become-productive-as-a-developer"&gt;
  &lt;/a&gt;
  29. How to become productive as a developer
&lt;/h3&gt;

&lt;p&gt;Tips, tricks and tools that you use day to day&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#30-x-time-management-strategies-to-become-more-productive"&gt;
  &lt;/a&gt;
  30. X time management strategies to become more productive
&lt;/h3&gt;

&lt;p&gt;For example 20 time management strategies&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-remote-vs-office-work"&gt;
  &lt;/a&gt;
  31. Remote vs Office Work
&lt;/h3&gt;

&lt;p&gt;The difference between the two from your experience&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-how-to-persist-your-data"&gt;
  &lt;/a&gt;
  32. How to persist your data
&lt;/h3&gt;

&lt;p&gt;Talk about using databases, local storage, session state etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#33-what-you-love-about-working-as-a-developer"&gt;
  &lt;/a&gt;
  33. What you love about working as a developer
&lt;/h3&gt;

&lt;p&gt;Talk about your experiences&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#34-what-you-dont-love-about-working-as-a-developer"&gt;
  &lt;/a&gt;
  34. What you don't love about working as a developer
&lt;/h3&gt;

&lt;p&gt;Talk about your experiences&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#35-the-best-soft-skills-to-have-as-a-developer"&gt;
  &lt;/a&gt;
  35. The best soft skills to have as a developer
&lt;/h3&gt;

&lt;p&gt;Use examples to back up what you are saying&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#36-how-to-deal-with-burnout"&gt;
  &lt;/a&gt;
  36. How to deal with burnout
&lt;/h3&gt;

&lt;p&gt;Talk about your experiences&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#37-why-you-should-be-active-on-social-media"&gt;
  &lt;/a&gt;
  37. Why you should be active on social media
&lt;/h3&gt;

&lt;p&gt;Talk about your personal experiences and reasoning&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#38-where-you-see-yourself-in-the-next-x-years"&gt;
  &lt;/a&gt;
  38. Where you see yourself in the next X years
&lt;/h3&gt;

&lt;p&gt;Talk about your career growth&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#39-how-to-monetise-your-products"&gt;
  &lt;/a&gt;
  39. How to monetise your products
&lt;/h3&gt;

&lt;p&gt;Talk about strategies that worked for you&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#40-strategies-for-getting-good-at-data-structures"&gt;
  &lt;/a&gt;
  40. Strategies for getting good at data structures
&lt;/h3&gt;

&lt;p&gt;Give examples and maybe link to articles or courses etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#41-how-you-deal-with-indecisive-clients"&gt;
  &lt;/a&gt;
  41. How you deal with indecisive clients
&lt;/h3&gt;

&lt;p&gt;Talk about your experiences&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#42-how-to-go-from-unemployed-to-employed-as-a-developer"&gt;
  &lt;/a&gt;
  42. How to go from unemployed to employed as a developer
&lt;/h3&gt;

&lt;p&gt;Strategies to get employed and into the tech industry&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#43-how-i-stay-up-to-date-in-the-industry"&gt;
  &lt;/a&gt;
  43. How I stay up to date in the industry
&lt;/h3&gt;

&lt;p&gt;Stories from your life&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#44-people-that-inspire-me-in-the-industry"&gt;
  &lt;/a&gt;
  44. People that inspire me in the industry
&lt;/h3&gt;

&lt;p&gt;You could do some case studies on other successful developers and how they inspired you&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#45-why-you-dont-do-overtime-work"&gt;
  &lt;/a&gt;
  45. Why you don't do overtime work
&lt;/h3&gt;

&lt;p&gt;Talk about your experiences&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#46-comparing-web-development-to-wix-and-squarespace"&gt;
  &lt;/a&gt;
  46. Comparing web development to Wix and Squarespace
&lt;/h3&gt;

&lt;p&gt;Talk about the differences between them&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#47-x-npm-packages-that-you-should-be-using"&gt;
  &lt;/a&gt;
  47. X NPM packages that you should be using
&lt;/h3&gt;

&lt;p&gt;For example 12 useful packages&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#48-netlifyvercel-serverless-functions"&gt;
  &lt;/a&gt;
  48. Netlify/Vercel serverless functions
&lt;/h3&gt;

&lt;p&gt;A guide on how to use them&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#49-how-to-setup-a-cicd-workflow-with-testing"&gt;
  &lt;/a&gt;
  49. How to setup a CI/CD workflow with testing
&lt;/h3&gt;

&lt;p&gt;A tutorial on how to set it all up&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#50-getting-into-open-source-and-how-to-be-a-good-contributor"&gt;
  &lt;/a&gt;
  50. Getting into open source and how to be a good contributor
&lt;/h3&gt;

&lt;p&gt;A guide on how you did it and what you learned from it&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#51-best-design-resources-for-aspiring-designers"&gt;
  &lt;/a&gt;
  51. Best design resources for aspiring designers
&lt;/h3&gt;

&lt;p&gt;A list of great resources to use&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#52-best-developer-resources-for-aspiring-developers"&gt;
  &lt;/a&gt;
  52. Best developer resources for aspiring developers
&lt;/h3&gt;

&lt;p&gt;A list of great resources to use&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#53-how-to-deal-with-difficult-interview-questions"&gt;
  &lt;/a&gt;
  53. How to deal with difficult interview questions
&lt;/h3&gt;

&lt;p&gt;Give examples on how to do well&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#54-x-tools-every-developer-should-use"&gt;
  &lt;/a&gt;
  54. X tools every developer should use
&lt;/h3&gt;

&lt;p&gt;For example 10 tools&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#55-x-github-repos-that-you-should-know-about"&gt;
  &lt;/a&gt;
  55. X GitHub repos that you should know about
&lt;/h3&gt;

&lt;p&gt;Do some research on GitHub repos and evaluate them&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#56-i-have-x-years-working-as-a-developer-what-i-have-learned-so-far"&gt;
  &lt;/a&gt;
  56. I have X years working as a developer what I have learned so far
&lt;/h3&gt;

&lt;p&gt;Talk about your experience&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#57-how-to-improve-your-apps-performance-using-database-x"&gt;
  &lt;/a&gt;
  57. How to improve your apps performance using database X
&lt;/h3&gt;

&lt;p&gt;A detailed review on how to boost performance using PostgreSQL for example&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#58-best-developers-to-follow-if-you-are-a-x-developer"&gt;
  &lt;/a&gt;
  58. Best developers to follow if you are a X developer
&lt;/h3&gt;

&lt;p&gt;If you are a JavaScript, Python, PHP, C# etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#59-what-are-code-reviews-and-why-you-should-get-better-at-them"&gt;
  &lt;/a&gt;
  59. What are code reviews and why you should get better at them
&lt;/h3&gt;

&lt;p&gt;Talk about your experiences and how you improved&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#60-what-is-the-best-laptop-for-a-developer"&gt;
  &lt;/a&gt;
  60. What is the best laptop for a developer
&lt;/h3&gt;

&lt;p&gt;Do a detailed deep dive on different laptops and how they compare&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#61-macos-vs-windows-vs-linux"&gt;
  &lt;/a&gt;
  61. macOs vs Windows vs Linux
&lt;/h3&gt;

&lt;p&gt;How all 3 compare for developers and your preference&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#62-how-to-boost-your-memory"&gt;
  &lt;/a&gt;
  62. How to boost your memory
&lt;/h3&gt;

&lt;p&gt;Personal experiences from learning&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#63-how-to-build-2d-games-using-language-x"&gt;
  &lt;/a&gt;
  63. How to build 2D games using language X
&lt;/h3&gt;

&lt;p&gt;Building games using JavaScript, Python, C# etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#64-building-pwa-apps-using-framework-x"&gt;
  &lt;/a&gt;
  64. Building PWA apps using framework X
&lt;/h3&gt;

&lt;p&gt;How to build games using Flutter, React etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#65-static-vs-dynamically-typed-languages"&gt;
  &lt;/a&gt;
  65. Static vs Dynamically typed languages
&lt;/h3&gt;

&lt;p&gt;Comparing JavaScript to Dart for example&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#66-standing-desk-vs-normal-desk"&gt;
  &lt;/a&gt;
  66. Standing desk vs normal desk
&lt;/h3&gt;

&lt;p&gt;The difference between the two and your experience&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#67-why-you-chose-to-use-database-x-instead-of-database-y-for-a-project"&gt;
  &lt;/a&gt;
  67. Why you chose to use database X instead of database Y for a project
&lt;/h3&gt;

&lt;p&gt;Comparing a Sql and noSQL database for usage in a project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#68-the-best-social-media-platforms-for-developers"&gt;
  &lt;/a&gt;
  68. The best social media platforms for developers
&lt;/h3&gt;

&lt;p&gt;Talk about the platforms that you think are great&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#69-how-i-created-my-personal-brand"&gt;
  &lt;/a&gt;
  69. How I created my personal brand
&lt;/h3&gt;

&lt;p&gt;Talk about your success and experience&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#69-how-i-made-x-amount-of-money-with-a-product-i-made"&gt;
  &lt;/a&gt;
  69. How I made X amount of money with a product I made
&lt;/h3&gt;

&lt;p&gt;Talk about your success and how you did it&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#70-how-i-became-successful-on-platform-x"&gt;
  &lt;/a&gt;
  70. How I became successful on platform X
&lt;/h3&gt;

&lt;p&gt;Your experience on gaining a huge following on twitter, YouTube, Hashnode, DEV etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#71-learning-how-to-do-web-scraping-using-python"&gt;
  &lt;/a&gt;
  71. Learning how to do web scraping using Python
&lt;/h3&gt;

&lt;p&gt;A tutorial on how to do it&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#72-how-to-build-a-chatbot-using-language-x"&gt;
  &lt;/a&gt;
  72. How to build a chatbot using language X
&lt;/h3&gt;

&lt;p&gt;A  guide on making a chatbot using JavaScript, Python etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#73-how-to-get-into-freelancing"&gt;
  &lt;/a&gt;
  73. How to get into freelancing
&lt;/h3&gt;

&lt;p&gt;Talk about how you did it and how others can do the same&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#74-a-tutorial-on-how-to-use-aws-for-cloud-storage"&gt;
  &lt;/a&gt;
  74. A tutorial on how to use AWS for cloud storage
&lt;/h3&gt;

&lt;p&gt;Creating a tutorial about AWS&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#75-how-to-create-css-art-from-scratch"&gt;
  &lt;/a&gt;
  75. How to create CSS Art from scratch
&lt;/h3&gt;

&lt;p&gt;A detailed guide on how to make CSS Art&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#76-the-best-developer-browser-extensions-to-use"&gt;
  &lt;/a&gt;
  76. The best developer browser extensions to use
&lt;/h3&gt;

&lt;p&gt;A list of browser extensions for chrome or Firefox&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#77-how-you-debug-your-applications"&gt;
  &lt;/a&gt;
  77. How you debug your applications
&lt;/h3&gt;

&lt;p&gt;A guide for doing debugging&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#78-how-to-create-cool-buttons-using-css"&gt;
  &lt;/a&gt;
  78. How to create cool buttons using CSS
&lt;/h3&gt;

&lt;p&gt;A guide for creating cool styled buttons&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#79-the-difference-between-promises-and-async-await"&gt;
  &lt;/a&gt;
  79. The difference between promises and async await
&lt;/h3&gt;

&lt;p&gt;Your thoughts on the subject&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#80-a-roadmap-for-learning-a-technical-stack-and-getting-hired"&gt;
  &lt;/a&gt;
  80. A roadmap for learning a technical stack and getting hired
&lt;/h3&gt;

&lt;p&gt;An roadmap article for learning programming languages&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#81-your-progress-on-doing-the-100-days-of-code-challenge-so-far"&gt;
  &lt;/a&gt;
  81. Your progress on doing the 100 days of code challenge so far
&lt;/h3&gt;

&lt;p&gt;A progress update on what you have accomplished so far&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#82-how-to-build-an-ecommerce-website-using-framework-x"&gt;
  &lt;/a&gt;
  82. How to build an e-commerce website using framework X
&lt;/h3&gt;

&lt;p&gt;A tutorial for building a website using the MERN stack&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#83-the-top-x-visual-studio-code-extensions-you-use"&gt;
  &lt;/a&gt;
  83. The top X Visual Studio Code Extensions you use
&lt;/h3&gt;

&lt;p&gt;The top 10 extensions etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#84-how-to-network-when-you-dont-have-a-big-social-circle"&gt;
  &lt;/a&gt;
  84. How to network when you don't have a big social circle
&lt;/h3&gt;

&lt;p&gt;Tips for connecting with new people&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#85-what-you-learned-from-a-failed-product-launch"&gt;
  &lt;/a&gt;
  85. What you learned from a failed product launch
&lt;/h3&gt;

&lt;p&gt;A story about your experiences&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#86-what-you-learned-from-a-successful-product-launch"&gt;
  &lt;/a&gt;
  86. What you learned from a successful product launch
&lt;/h3&gt;

&lt;p&gt;A story about your experiences&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#87-x-steps-to-succeeding-in-a-new-job-role"&gt;
  &lt;/a&gt;
  87. X steps to succeeding in a new job role
&lt;/h3&gt;

&lt;p&gt;Talk about your experience from past jobs&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#88-the-best-company-you-have-ever-worked-for-and-what-you-learned"&gt;
  &lt;/a&gt;
  88. The best company you have ever worked for and what you learned
&lt;/h3&gt;

&lt;p&gt;Talk about a previous/current job you had&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#89-the-worst-company-you-have-ever-worked-for-and-what-you-learned"&gt;
  &lt;/a&gt;
  89. The worst company you have ever worked for and what you learned
&lt;/h3&gt;

&lt;p&gt;Talk about a previous/current job you had&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#90-what-you-learned-after-using-github-copilot"&gt;
  &lt;/a&gt;
  90. What you learned after using GitHub Copilot
&lt;/h3&gt;

&lt;p&gt;Talk about your experience using it in a project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#91-what-it-was-like-when-you-first-started-bloggingyoutube-as-an-introvert"&gt;
  &lt;/a&gt;
  91. What it was like when you first started blogging/YouTube as an introvert
&lt;/h3&gt;

&lt;p&gt;What your personal experience was like on the subject&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#92-how-to-add-a-cms-to-your-website"&gt;
  &lt;/a&gt;
  92. How to add a CMS to your website
&lt;/h3&gt;

&lt;p&gt;A tutorial for using a CMS like Strapi, Gatsby or Sanity.io.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#93-a-cheatsheet-for-language-x"&gt;
  &lt;/a&gt;
  93. A cheatsheet for language X
&lt;/h3&gt;

&lt;p&gt;A detailed cheatsheet for using flex box, css grid, JavaScript, Python etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#94-how-to-negotiate-when-getting-a-job-offer"&gt;
  &lt;/a&gt;
  94. How to negotiate when getting a job offer
&lt;/h3&gt;

&lt;p&gt;A guide for managing job offers&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#95-how-to-collaborate-with-other-developers"&gt;
  &lt;/a&gt;
  95. How to collaborate with other developers
&lt;/h3&gt;

&lt;p&gt;A strategy for collaborating with other developers on projects&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#96-how-to-explain-a-technical-subject-to-a-non-tech-person"&gt;
  &lt;/a&gt;
  96. How to explain a technical subject to a non tech person
&lt;/h3&gt;

&lt;p&gt;Talk about an experience you had and how to apply it to other scenarios&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#97-how-to-setup-a-development-environment"&gt;
  &lt;/a&gt;
  97. How to setup a development environment
&lt;/h3&gt;

&lt;p&gt;A guide for setting up a development environment&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#98-how-you-stay-fit-as-a-developer"&gt;
  &lt;/a&gt;
  98. How you stay fit as a developer
&lt;/h3&gt;

&lt;p&gt;Talk about your work out routine and how you schedule it in-between coding sessions&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#99-tips-for-staying-consistent-as-a-writer"&gt;
  &lt;/a&gt;
  99. Tips for staying consistent as a writer
&lt;/h3&gt;

&lt;p&gt;Tips on how you stay consistent&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#100-how-to-use-social-media-to-find-work"&gt;
  &lt;/a&gt;
  100. How to use social media to find work
&lt;/h3&gt;

&lt;p&gt;How you can utilise Twitter and LinkedIn to get your next job role&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;I really hope that you enjoyed reading this article and learned something from it. As a content creator and technical writer I am passionate about sharing my knowledge and helping other people reach their goals. Let's connect across social media you can find all of my social media profiles and blogs on &lt;a href="https://linktr.ee/andrewbaisden"&gt;linktree&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Peace ✌️&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Getting Started With Hackerrank Using Python | For Absolute Beginners</title>
      <author>Chinmaya Bisoi</author>
      <pubDate>Mon, 06 Sep 2021 09:09:16 +0000</pubDate>
      <link>https://dev.to/chinmayabisoi/getting-started-with-hackerrank-using-python-for-absolute-beginners-347h</link>
      <guid>https://dev.to/chinmayabisoi/getting-started-with-hackerrank-using-python-for-absolute-beginners-347h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-intro"&gt;
  &lt;/a&gt;
  The Intro
&lt;/h2&gt;

&lt;p&gt;Data Structures and Algorithms(DSA) are a necessity to land a Good ass Technical job. And when it comes to DSA, people turn to popular websites like &lt;code&gt;Leetcode&lt;/code&gt;, &lt;code&gt;Hackerrank&lt;/code&gt;, &lt;code&gt;Hackerearth&lt;/code&gt; and many more. &lt;/p&gt;

&lt;p&gt;That being said, Starting anew can be difficult and sometimes overwhelming and newbies can find it difficult to figure out the ins and outs of the platform they use (How to take Input(s), how to produce the proper Output(s)  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hackerrank-with-python"&gt;
  &lt;/a&gt;
  Hackerrank with Python
&lt;/h2&gt;

&lt;p&gt;Let's say you come across &lt;a href="https://www.hackerrank.com/challenges/list-comprehensions/problem"&gt;this&lt;/a&gt; kind of question, where you have input &lt;br&gt;
and output like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rKUjJQEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8foqxdr0vsx8chqwn7w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rKUjJQEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8foqxdr0vsx8chqwn7w.PNG" alt="SampleInput"&gt;&lt;/a&gt;&lt;br&gt;
Then the output would be given using &lt;code&gt;print&lt;/code&gt; and one way to take in inputs would be individually take all four inputs like x,y,z,n as given below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    print ([[a,b,c] for a in range(0,x+1) for b in range(0,y+1) for c in range(0,z+1) if a + b + c != n ])

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The other way to take in four inputs would be to use a for loop to store the inputs in a list.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Let's see another&lt;/strong&gt; &lt;a href="https://www.hackerrank.com/challenges/find-second-maximum-number-in-a-list/problem"&gt;example&lt;/a&gt; &lt;br&gt;
Consider the given inputs and the following code: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDqjpp_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0249k2wtgbzugi95ac2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDqjpp_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0249k2wtgbzugi95ac2.PNG" alt="Case2SampleInput"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What the above code does is it assigns 5 to n ; then checks the second line to find &lt;code&gt;2 3 6 6 5&lt;/code&gt; where the input().split() splits the string &lt;code&gt;2 3 6 6 5&lt;/code&gt; to a list with the following items :&lt;br&gt;
&lt;code&gt;2&lt;/code&gt; &lt;code&gt;3&lt;/code&gt; &lt;code&gt;6&lt;/code&gt; &lt;code&gt;6&lt;/code&gt; &lt;code&gt;5&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;The map function then converts the items to integer type and we get a list arr = [2,3,6,6,5] where each item is an integer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hope-this-was-helpful"&gt;
  &lt;/a&gt;
  Hope this was helpful~
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#thats-all-for-now-until-next-time-bros"&gt;
  &lt;/a&gt;
  Thats all for now, Until Next Time Bros
&lt;/h4&gt;

</description>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How Laravel Website Development Services Helps Organizations To Grow In 2021</title>
      <author>Aditya Goswami</author>
      <pubDate>Mon, 06 Sep 2021 08:45:42 +0000</pubDate>
      <link>https://dev.to/aditya_g_2212/how-laravel-website-development-services-helps-organizations-to-grow-in-2021-326h</link>
      <guid>https://dev.to/aditya_g_2212/how-laravel-website-development-services-helps-organizations-to-grow-in-2021-326h</guid>
      <description>&lt;p&gt;We all know how popular the PHP web framework is for developing web applications. Just like that, With its Model-view-controller architectural pattern. Laravel app development is equally important for web development. Laravel develops websites around the world, organizations like to &lt;em&gt;Hire php Laravel developer&lt;/em&gt; or &lt;em&gt;Laravel experts&lt;/em&gt; for Laravel app development. You will get flawless syntax coding experience with Laravel development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#many-uses-for-laravel-web-development"&gt;
  &lt;/a&gt;
  Many Uses for Laravel Web Development
&lt;/h3&gt;

&lt;p&gt;Being a website development company, if you are offering quality Laravel website development services, then you surely end up meeting lots of web development projects based on Laravel development. Being a Laravel app development company, you delivered specific requirements for partners.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laravel-emerge-as-best-php-web-framework"&gt;
  &lt;/a&gt;
  Laravel emerge as Best PHP Web Framework
&lt;/h3&gt;

&lt;p&gt;Being one of the leading PHP development frameworks, Laravel has the potential to deliver well in the website development field. Laravel development is gaining popularity in the community of Laravel web development for its conciseness and simplicity. Community continuously improves the work and quality of Laravel development.&lt;/p&gt;

&lt;p&gt;Being a Laravel development company, the company has experience and understanding of how complexity of code makes a negative impact on the performance of a website. Even sometimes, websites with complex code take lots of time in loading and users leave the platform in frustration. Here I must want to thank MVC architecture for lessened code complexity in Laravel.&lt;/p&gt;

&lt;p&gt;Moreover, one you have crafted the website with Laravel development: you will get the perfect code, quicker development and even code that is cleaner and more efficient. You will get versatility and quality with &lt;a href="https://www.bacancytechnology.com/laravel-development"&gt;Laravel website development services&lt;/a&gt;. hire Laravel programmers and do wonders.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technical-insight-into-laravel"&gt;
  &lt;/a&gt;
  Technical Insight into Laravel
&lt;/h3&gt;

&lt;p&gt;Caching systems in Laravel are one of the reasons behind the high performance of Laravel development. It can store the numerous caches in the file system and because of that, you can develop the application promptly.&lt;/p&gt;

&lt;p&gt;We all know how competitive the world is right at the moment, you need to be quick in the development process with all the implementation, otherwise anyone can take over your services with high quality services. Laravel website development services offer the most simplified process of user verification to the consumers.&lt;/p&gt;

&lt;p&gt;What if you can do the authentication process with more quality output and lesser complexity and that's exactly what Laravel is offering. Laravel even prevents unauthorized users from accessing your services.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security-is-top-priority-for-laravel"&gt;
  &lt;/a&gt;
  Security is Top Priority for Laravel
&lt;/h3&gt;

&lt;p&gt;Being Laravel developer, you must know what security matters to business and users. If you have an ecommerce business, security must be your top priority and you must protect the client’s details. &lt;/p&gt;

&lt;p&gt;While developing your dream business, you must choose the platform that offers extensive security. You will get lots of code based benefits in Laravel development with almost zero threats. You must hire expert Laravel developer for your Laravel application development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#future-of-laravel"&gt;
  &lt;/a&gt;
  Future of Laravel
&lt;/h3&gt;

&lt;p&gt;Laravel is at top right now and will keep itself at top and be the most famous and useful PHP frameworks. One of the main reasons behind the demand of the Laravel website development services is its functionality, features, clarity and simplicity. Even the Laravel developers community continuously focus on improving the development that secure the quality of future Laravel development.&lt;/p&gt;

&lt;p&gt;You can use Laravel for any kind of web development, small or bigger, complex or simple, any industries, organizations or startups. Laravel is the perfect choice for your development work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-remarks"&gt;
  &lt;/a&gt;
  Final Remarks
&lt;/h2&gt;

&lt;p&gt;One of the reasons behind the unlimited success of Laravel is - flawless architecture of Laravel. Laravel can do the overall operations of the project without any interruption with accuracy and efficiency. If you want to put your idea into implementation, it's time for you to connect a &lt;strong&gt;Laravel development company&lt;/strong&gt; or &lt;a href="https://www.bacancytechnology.com/hire-laravel-developer"&gt;Hire Laravel expert&lt;/a&gt; with expert-level capabilities in the domain.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>webdev</category>
      <category>devops</category>
      <category>php</category>
    </item>
    <item>
      <title>How and when to override Android Activity's Lifecycle methods?</title>
      <author>Gourav Khunger</author>
      <pubDate>Mon, 06 Sep 2021 08:23:50 +0000</pubDate>
      <link>https://dev.to/gouravkhunger/how-and-when-to-override-android-activity-s-lifecycle-methods-28b</link>
      <guid>https://dev.to/gouravkhunger/how-and-when-to-override-android-activity-s-lifecycle-methods-28b</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Read this article on &lt;a href="https://genicsblog.com/how-and-when-to-override-android-activity-lifecycle-methods"&gt;my blog&lt;/a&gt; for a better experience :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yesterday, I came across a &lt;a href="https://stackoverflow.com/questions/69064102/how-can-i-stop-the-progressdialog-after-returning-to-the-activity"&gt;StackOverflow question&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The OP(original poster) of the article had a scenario like this:&lt;/p&gt;

&lt;p&gt;He made a &lt;code&gt;ProgressDialog&lt;/code&gt; in an activity. After pressing a &lt;code&gt;CardView&lt;/code&gt; in that activity corresponding to a meditation session, a &lt;code&gt;ProgressDialog&lt;/code&gt; should appear for 3 seconds, and then the other activity would open - the &lt;code&gt;m1&lt;/code&gt; activity. &lt;/p&gt;

&lt;p&gt;The problem he faced was - After returning to &lt;code&gt;MeditationActivity&lt;/code&gt;, the &lt;code&gt;ProgressDialog&lt;/code&gt; continued to show up and never stopped.&lt;/p&gt;

&lt;p&gt;He wanted that the progress dialog is closed once the user comes back from the &lt;code&gt;m1&lt;/code&gt; activity to the &lt;code&gt;MeditationActivity&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just after reading the question, it should strike to the mind that one can override the default methods present in an Activity's Lifecycle and dismiss the dialog from there!&lt;/p&gt;

&lt;p&gt;Here's how the lifecycle of an Android Activity looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yxje01ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630915330208/6F9zSmseW2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yxje01ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630915330208/6F9zSmseW2.png" alt="activity_lifecycle.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is an image from the official &lt;a href="https://developer.android.com/guide/components/activities/activity-lifecycle"&gt;android documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From the flowchart, we can see that it is the &lt;code&gt;onResume()&lt;/code&gt; method that is called whenever a person comes back to the activity from another screen. So it seems to be the place where we should place the logic for dismissing the dialog!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b0zdsn9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630915509631/Eq9kO4b_9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b0zdsn9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630915509631/Eq9kO4b_9.png" alt="activity_lifecycle.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's how we can do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onResume&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onResume&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;progressDialog&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;progressDialog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dismiss&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The null check is placed because the &lt;code&gt;progressDialog&lt;/code&gt; was initialized only when the person presses the &lt;code&gt;CardView&lt;/code&gt;. And if it is initialized earlier, then there would be redundant dismissals of the &lt;code&gt;progressDialog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This was a perfect example where we could override the default lifecycle methods provided by an Android &lt;code&gt;Activity&lt;/code&gt; to perform actions pertaining to lifecycle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/a/69064294/9819031"&gt;Here's my answer&lt;/a&gt; to the original question on StackOverflow! I'll be writing more explanations to StackOverflow Questions, so consider following me on hashnode.&lt;/p&gt;

&lt;p&gt;I hope you find this article helpful :)&lt;/p&gt;

</description>
      <category>android</category>
    </item>
  </channel>
</rss>
