<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Using the WordPress in_category() function</title>
      <author>Andy Stitt</author>
      <pubDate>Thu, 15 Apr 2021 12:28:26 +0000</pubDate>
      <link>https://dev.to/andystitt829/using-the-wordpress-incategory-function-2cji</link>
      <guid>https://dev.to/andystitt829/using-the-wordpress-incategory-function-2cji</guid>
      <description>&lt;p&gt;My biggest project at work is the &lt;a href="https://coronavirus.delaware.gov/"&gt;Delaware COVID-19 information website&lt;/a&gt;. It is built in WordPress. &lt;/p&gt;

&lt;p&gt;I recently had a problem to solve where I wanted alert boxes to automatically display in the language that the page was translated into. We have pages in the three most spoken languages in Delaware: English, Spanish, and Haitian Creole.&lt;/p&gt;

&lt;p&gt;I decided to approach it by assigning specific categories to the Spanish and Haitian Creole pages. I was then able to use the WordPress &lt;a href="https://developer.wordpress.org/reference/functions/in_category/"&gt;in_category()&lt;/a&gt; function to identify which categories that page belonged to.&lt;/p&gt;

&lt;p&gt;This applied to single pages, so in page.php, my code looked something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php
   if(in_category('spanish')) {
      include 'includes/spanish-file.php';
   } elseif(in_category('haitian-creole')) {
      include 'includes/haitian-creole-file.php';
   } else {
      include 'english-file.php';
   }
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This if statement first looks to see if the category assigned to the page is "spanish", and if it is, then the &lt;a href="https://www.php.net/manual/en/function.include.php"&gt;PHP include&lt;/a&gt; function displays the content within spanish-file.php.&lt;/p&gt;

&lt;p&gt;If the category is not "spanish", then it looks to see if it is "haitian-creole", and if it is, then it displays the contents of haitian-creole-file.php.&lt;/p&gt;

&lt;p&gt;If the category doesn't match either of those, then it displays english-file.php.&lt;/p&gt;

&lt;p&gt;The majority of pages on the website are in English, so I didn't feel the need to assign an English category and simply included it in the "else" condition for all pages that had neither "spanish" or "haitian-creole" assigned to it.&lt;/p&gt;

&lt;p&gt;I wrote this function in the page.php file. I'm sure there are arguments against doing that. If you wanted to, you could also define it as a function in the functions.php file and then call the function in page.php. If you did it that way, it would look something like this:&lt;/p&gt;

&lt;p&gt;In functions.php:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php
   function multi_language_page_files() {
      if(in_category('spanish')) {
         include 'includes/spanish-file.php';
      } elseif(in_category('haitian-creole')) {
         include 'includes/haitian-creole-file.php';
      } else {
         include 'english-file.php';
      }
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No closing PHP ?&amp;gt; tag needed in the functions.php file.&lt;/p&gt;

&lt;p&gt;Then, you would call the function in page.php:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;?php multi_language_page_files() ?&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I hope this helps. I was not previously aware of the in_category() function before I found it yesterday. It is extremely helpful in this case!&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>webdev</category>
      <category>php</category>
    </item>
    <item>
      <title>Getting Started With Your First three.js Project: Part One — The Setup</title>
      <author>waldowred5</author>
      <pubDate>Thu, 15 Apr 2021 12:15:38 +0000</pubDate>
      <link>https://dev.to/waldowred5/getting-started-with-your-first-three-js-project-part-one-the-setup-147k</link>
      <guid>https://dev.to/waldowred5/getting-started-with-your-first-three-js-project-part-one-the-setup-147k</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/waldowred5/embed/QWdNVqY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;sup&gt;Press ‘Run Pen’ to see a live demo of what we will be building&lt;/sup&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-is-threejs"&gt;
  &lt;/a&gt;
  What is three.js?
&lt;/h1&gt;

&lt;p&gt;three.js is a powerful JavaScript library and API allowing developers to create incredible 2D and 3D graphics that are animated in the browser without plugins (using &lt;a href="https://get.webgl.org/"&gt;WebGL&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To check out some of the amazing projects created by talented developers, you can check them out at the &lt;a href="https://threejs.org/"&gt;three.js&lt;/a&gt; homepage, as well as many advanced guides on getting the most out of the library.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-are-we-building"&gt;
  &lt;/a&gt;
  What are we building?
&lt;/h1&gt;

&lt;p&gt;In the header above (after clicking ‘Run Pen’), you can see a live demo of the animation we will be building in this tutorial. It is a cube that spins slowly, with four small spheres orbiting it at a much faster pace, each on its own orbital path. It is also brightly coloured because monochrome is drab.&lt;/p&gt;

&lt;p&gt;Users also have the ability to spin the cube and spheres in any direction they want!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h1&gt;

&lt;p&gt;Before we start, lets get our project setup first. Create a project directory somewhere that is easy to reach with your terminal. The way I’ve structured my directory looks like this (important so the import paths work properly):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/first_threejs_project
|__ /css
|__ |__ main.css
|__ /js
|__ |__ main.js
|__ index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type the following commands in your terminal to get your project directory setup correctly (don’t forget to press the ‘Enter’ key between each line):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir first_threejs_project
cd first_threejs_project
mkdir css js
touch index.html
cd css
touch main.css
cd ../js
touch main.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPq41lhO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x61rjircv7dpdw82lp18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPq41lhO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x61rjircv7dpdw82lp18.png" alt="Directory Structure"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Your directory should now look something like this&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;You can setup your HTML and CSS any way you prefer, or you can use the following code as templates to work from:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;”en”&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;    
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My First three.js Project&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"css/main.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    // This line imports our javascript code from our /js directory
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./js/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;main.css&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;canvas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our initial files ready to go, we need to import the three.js library into our project. There are a few ways to do this, all of which can be found in the three.js &lt;a href="https://threejs.org/docs/#manual/en/introduction/Installation"&gt;installation guide&lt;/a&gt;, but the best way takes a few steps:but the best way takes a few steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open your terminal and navigate to your main project directory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you are using node package manager (npm) enter the following into your terminal:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;npm install --save three&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, if you are using yarn, enter:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add three&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(If neither of these commands work or make sense to you, you will probably need to download &lt;a href="https://www.npmjs.com/get-npm"&gt;npm&lt;/a&gt; or &lt;a href="https://classic.yarnpkg.com/en/docs/install/#windows-stable"&gt;yarn&lt;/a&gt; here).&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This should have added a series of directories to your main project directory. Inside the /&lt;strong&gt;node_modules&lt;/strong&gt; directory is the /&lt;strong&gt;three&lt;/strong&gt; directory. If you open this, you will see the /&lt;strong&gt;build&lt;/strong&gt; directory which includes the core library files you need to import into your code. The core library files include only the most important parts of the library, so to include other useful three.js features we will need to import them from another directory (which has already been downloaded for us during installation). These can be found in the sub-directory /&lt;strong&gt;examples&lt;/strong&gt;/&lt;strong&gt;jsm&lt;/strong&gt;, which includes controls, loaders and some post-processing effects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Only one step left to finalise before creating our first scene. Head to your favourite code editor and open up the &lt;strong&gt;main.js&lt;/strong&gt; file. At the top of the file, you will want to write the following two lines of code:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;main.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../node_modules/three/build/three.module.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TrackballControls&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../node_modules/three/examples/jsm/controls/TrackballControls.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two import statements above give our &lt;strong&gt;main.jss&lt;/strong&gt; file access to the:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;three.js core library&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trackball controls module which will allow us to use our mouse to click and drag to spin our animation in any direction&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#creating-your-first-scene"&gt;
  &lt;/a&gt;
  Creating Your First Scene
&lt;/h1&gt;

&lt;p&gt;Everything is now set up and ready to go for our first lines of three.js code! Every animation (or ‘scene’) we create needs three crucial objects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Scene: A parent object where we place all of our rendered objects, lights and cameras&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Camera: An object that allows us to see our other objects. There are a few types of cameras, but the one that we want for standard perspective rendering is the &lt;strong&gt;PerspectiveCamera&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Renderer: An object that renders our scene for us with the WebGL API&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The code for these three objects looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGLRenderer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;antialias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let’s take a deeper dive into these three lines of code so we can understand what is going on under the hood:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Scene: Pretty simple, we are creating a new three.js scene object to place everything&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Camera: As mentioned before, we have created a &lt;strong&gt;PerspectiveCamera&lt;/strong&gt;, which takes four parameters (in order):&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i2CnuBGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nodkpc8xqclrumeu6u3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i2CnuBGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nodkpc8xqclrumeu6u3s.png" alt="Field of View Diagram"&gt;&lt;/a&gt;&lt;br&gt;
&lt;sup&gt;Source: &lt;a href="https://www.researchgate.net/figure/Camera-perspective-To-illustrate-the-camera-frustum-manipulation-we-create-two-separated_fig5_216127594"&gt;ResearchGate&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Field of View (FOV): This is a number (in degrees) which represents the vertical FOV (see diagram left)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Aspect Ratio: This is the ratio between the width and height of the scene (width divided by height). Most of the time we want to set this to the width and height of our window so we don’t ‘squish’ the objects in our scene. In this case, we use the &lt;strong&gt;.innerWidth&lt;/strong&gt; and &lt;strong&gt;.innerHeight&lt;/strong&gt; properties of the window object (the window that contains the main DOM document element of our HTML)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Near Clipping Plane: The boundary plane closest to the camera. Anything closer to the camera than this value won’t be rendered&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Far Clipping Plane: The boundary plane furthest from the camera. Anything further from the camera than this value won’t be rendered&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Tip: If you set the Far Clipping Plane to be equal or less than the Near Clipping Plane, nothing will be rendered. Don’t be that dev.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Renderer: Here we create a WebGL renderer object to render our objects. While this function can be called without any arguments, we can also pass an object with any settings we want to change from the default behaviour.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPb-amwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nm3xsspwmhdivp55z9jy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPb-amwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nm3xsspwmhdivp55z9jy.gif" alt="Antialiasing Diagram"&gt;&lt;/a&gt;&lt;br&gt;
&lt;sup&gt;Source: &lt;a href="https://3dprint.com/253260/what-is-metrology-part-17-antialiasing/"&gt;3dPrint.com&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In our case, we have changed the antialias property from false to true. See diagram (left) for an example of what our scene will look like with or without anti aliasing&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;The last three lines of code we need for the initial scene creation are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setClearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#233143&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;.setClearColor:&lt;/strong&gt; Our first line sets the colour of the scene background (in this case a HEX value passed as a string). You can optionally pass a float between 0 and 1 to the second parameter (known as the alpha) to set the opacity&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;.setSize:&lt;/strong&gt; This sets the size of our app, in our case we want to fill the whole window so we set the width and height to the &lt;strong&gt;.innerWidth&lt;/strong&gt; and &lt;strong&gt;.innerHeight&lt;/strong&gt; properties of the window object again. You can use smaller values if you only want your app to take up part of the window. For example, &lt;strong&gt;renderer.setSize(window.innerWidth/2, window.innerHeight/2)&lt;/strong&gt; would display our app at 50% of the size of our window&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;.appendChild:&lt;/strong&gt; This line adds the renderer to our HTML document as a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element which is responsible for drawing our objects and animations with the WebGL API.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#a-note-on-responsive-design"&gt;
  &lt;/a&gt;
  A note on responsive design:
&lt;/h3&gt;

&lt;p&gt;When creating web applications it is important to develop for all devices, from smartphones to tablets and 4K desktop monitors. This is already taken care of for us by the &lt;strong&gt;.setSize()&lt;/strong&gt; function for the native screen size of the device.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What if the user changes the size of their window on a desktop or laptop?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9tKFvCOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kta2xhy1yo6u7mxedb53.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9tKFvCOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kta2xhy1yo6u7mxedb53.PNG" alt="Rendering Error"&gt;&lt;/a&gt;&lt;br&gt;
&lt;sup&gt;Our cube gets cut off when the window size changes&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Our render will be stuck in the center of the screen and become covered, instead of matching the new size of the window. To solve this problem, we need to add an event listener to the window for ‘resizing’ so that we can recalculate the window size for our canvas if a user changes the size of their window.&lt;/p&gt;

&lt;p&gt;We can get around this problem with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aspect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateProjectionMatrix&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we change the size of the canvas back to the size of the window, as well as resetting the aspect ratio to match. Finally we call the &lt;strong&gt;.updateProjectionMatrix()&lt;/strong&gt; function to apply the new changes.&lt;/p&gt;

&lt;p&gt;With all of the code we have added so far, you should have something like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;main.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../node_modules/three/build/three.module.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TrackballControls&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../node_modules/three/examples/jsm/controls/TrackballControls.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Scene&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Camera&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Renderer&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGLRenderer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;antialias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setClearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#233143&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Make Canvas Responsive&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aspect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateProjectionMatrix&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have our environment completely set up, including a scene, a camera and a renderer to draw everything for us. Don’t panic if you can’t see anything, we haven’t built anything to be rendered yet.&lt;/p&gt;

&lt;p&gt;To see how we go about building the rest of the animation, head over to the &lt;a href="https://medium.com/nerd-for-tech/getting-started-with-your-first-three-js-project-part-two-the-build-3fd9a2f21418"&gt;second part of this tutorial&lt;/a&gt;. See you there!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gPRcWvBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnl0od8uzpf0ccbodci3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gPRcWvBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnl0od8uzpf0ccbodci3.png" alt="Cube"&gt;&lt;/a&gt;&lt;br&gt;
&lt;sup&gt;We will be building these objects very soon!&lt;/sup&gt;&lt;/p&gt;

</description>
      <category>threejs</category>
      <category>animation</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to design almost any UI element. A curated list of 58 articles.</title>
      <author>Victor</author>
      <pubDate>Thu, 15 Apr 2021 11:55:01 +0000</pubDate>
      <link>https://dev.to/vponamariov/how-to-design-almost-any-ui-element-a-curated-list-of-58-articles-1m49</link>
      <guid>https://dev.to/vponamariov/how-to-design-almost-any-ui-element-a-curated-list-of-58-articles-1m49</guid>
      <description>&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;Recently I posted &lt;a href="https://twitter.com/vponamariov/status/1381584285300359169"&gt;on Twitter&lt;/a&gt; a list of 58 links related to different UI elements. It turned out that the tweet was very helpful, but it's not very convenient to read the links as a thread.&lt;/p&gt;

&lt;p&gt;So I wanted to share them here, on dev.to, in a single list.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#buttons"&gt;
  &lt;/a&gt;
  Buttons
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://uxplanet.org/7-basic-rules-for-button-design-63dcdf5676b4"&gt;7 Basic Rules for Button Design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxdesign.cc/button-design-user-interface-components-series-85243b6736c7"&gt;Button Design — UI component series&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxdesign.cc/ui-cheat-sheets-buttons-7329ed9d6112"&gt;UI cheat sheet: buttons&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#text-fields"&gt;
  &lt;/a&gt;
  Text fields
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://uxdesign.cc/ui-cheat-sheet-text-fields-2152112615f8"&gt;UI cheat sheet: text fields&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxdesign.cc/text-fields-forms-design-ui-components-series-2b32b2beebd0"&gt;Text fields &amp;amp; Forms design — UI components series&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxplanet.org/the-anatomy-of-input-field-c3ef863e01d7"&gt;The Anatomy of Input Field&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checkboxes-amp-toggles"&gt;
  &lt;/a&gt;
  Checkboxes &amp;amp; Toggles
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://uxplanet.org/checkbox-vs-toggle-switch-7fc6e83f10b8"&gt;Checkbox vs Toggle Switch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nngroup.com/articles/toggle-switch-guidelines/"&gt;Toggle-Switch Guidelines&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.justinmind.com/blog/toggle-design-patterns-examples/"&gt;Toggle switch design: the full run through&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uicookies.com/css-checkbox/"&gt;38 Checkbox Designs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#radio-buttons"&gt;
  &lt;/a&gt;
  Radio Buttons
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://uxdesign.cc/selection-controls-ui-component-series-3badc0bdb546"&gt;Selection controls — UI component series&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxplanet.org/radio-buttons-ux-design-588e5c0a50dc"&gt;Radio Buttons UX Design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.justinmind.com/blog/radio-button-design-examples/"&gt;Radio button design: easy selection and decision-making&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tables"&gt;
  &lt;/a&gt;
  Tables
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://medium.com/nextux/design-better-data-tables-4ecc99d23356"&gt;Design better data tables&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/design-with-figma/the-ultimate-guide-to-designing-data-tables-7db29713a85a"&gt;The Ultimate Guide to Designing Data Tables&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxdesign.cc/data-table-for-enterprise-ux-cb48fb9fdf1e"&gt;Designing better data tables for enterprise UX&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#datepickers"&gt;
  &lt;/a&gt;
  Datepickers
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://uxplanet.org/how-to-design-a-perfect-date-picker-control-7f47d1290c3a"&gt;How to Design a Perfect Date Picker Control?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxplanet.org/date-picker-design-best-practices-41bd522f10a5"&gt;Date Picker Design Best Practices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxdesign.cc/date-picker-design-5c5ef8f35286"&gt;A hunt for the perfect date picker UI&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sliders"&gt;
  &lt;/a&gt;
  Sliders
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2017/07/designing-perfect-slider/"&gt;Designing The Perfect Slider&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.justinmind.com/blog/slider-design-web/"&gt;Slider design UI patterns and examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nngroup.com/articles/gui-slider-controls/"&gt;Slider Design: Rules of Thumb&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tabs"&gt;
  &lt;/a&gt;
  Tabs
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2009/06/module-tabs-in-web-design-best-practices-and-solutions/"&gt;Module Tabs in Web Design: Best Practices and Solutions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nngroup.com/articles/tabs-used-right/"&gt;12 Tabs Design guidelines&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dropdowns"&gt;
  &lt;/a&gt;
  Dropdowns
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://uxdesign.cc/ui-cheat-sheet-dropdown-field-a30025c0f432"&gt;UI cheat sheet: dropdown field&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nngroup.com/articles/drop-down-menus/"&gt;Dropdowns: Design Guidelines&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.justinmind.com/blog/drop-down-list-design/"&gt;Drop down list design: the complete guide&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pagination"&gt;
  &lt;/a&gt;
  Pagination
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.uxmatters.com/mt/archives/2018/11/paging-scrolling-and-infinite-scroll.php"&gt;Paging, Scrolling, and Infinite Scroll&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxplanet.org/ux-infinite-scrolling-vs-pagination-1030d29376f1"&gt;UX: Infinite Scrolling vs. Pagination&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nngroup.com/articles/item-list-view-all/"&gt;Users' Pagination Preferences and "View All"&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#search-inputs"&gt;
  &lt;/a&gt;
  Search inputs
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://uxdesign.cc/best-ux-practices-for-search-inputs-c44dba565448"&gt;Best UX practices for search inputs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxplanet.org/design-a-perfect-search-box-b6baaf9599c"&gt;Design a Perfect Search Box&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nngroup.com/articles/site-search-suggestions/"&gt;Site Search Suggestions&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breadcrumbs"&gt;
  &lt;/a&gt;
  Breadcrumbs
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.nngroup.com/articles/breadcrumbs/"&gt;Breadcrumbs: 11 Design Guidelines for Desktop and Mobile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/madison-ave-collective/are-breadcrumbs-still-fresh-for-ux-6e72b0f96e9b"&gt;Are breadcrumbs still fresh for UX?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.justinmind.com/blog/breadcrumb-examples/"&gt;Breadcrumb examples for inspiration&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#carousels"&gt;
  &lt;/a&gt;
  Carousels
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://webflow.com/blog/carousel-slider-design-best-practices"&gt;Carousel/slider design best practices (with examples)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nngroup.com/articles/designing-effective-carousels/"&gt;Carousel Usability: Designing an Effective UI for Websites with Content Overload&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxplanet.org/designing-a-user-friendly-homepage-carousel-f664c9f2b50e"&gt;Designing a User-Friendly Homepage Carousel&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modals"&gt;
  &lt;/a&gt;
  Modals
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://xd.adobe.com/ideas/process/ui-design/best-practices-for-designing-overlays/"&gt;Best Practices for Designing UI Overlays&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.appcues.com/blog/modal-dialog-windows"&gt;Big, bold UX—using modal windows for in-app user engagement&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nngroup.com/articles/modal-nonmodal-dialog/"&gt;Modal &amp;amp; Nonmodal Dialogs: When (&amp;amp; When Not) to Use Them&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/pulsar/modern-enterprise-ui-design-part-2-modal-dialogs-2ccd3cc33c92"&gt;Modal dialogs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cards"&gt;
  &lt;/a&gt;
  Cards
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.justinmind.com/blog/cards-ui-design/"&gt;Card UI design: fundamentals and examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxplanet.org/simple-design-tips-for-crafting-better-ui-cards-19c1ac31a44e"&gt;Simple Design Tips for Crafting Better UI Cards&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxdesign.cc/designing-cards-for-beginners-9ed9454d27f6"&gt;Designing cards&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tooltips"&gt;
  &lt;/a&gt;
  Tooltips
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.nngroup.com/articles/tooltip-guidelines/"&gt;Tooltip Guidelines&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2021/02/designing-tooltips-mobile-user-interfaces/"&gt;Designing Better Tooltips For Mobile User Interfaces&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxdesign.cc/tooltips-your-secret-weapon-for-improving-deature-discovery-e1c380562f2e"&gt;Tooltips: your secret weapon for improving feature discovery&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#navigation"&gt;
  &lt;/a&gt;
  Navigation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.justinmind.com/blog/navigation-design-almost-everything-you-need-to-know/"&gt;Navigation design: Almost everything you need to know&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.prototypr.io/ux-design-for-navigation-menus-d9875c91a7ea"&gt;UX Design for Navigation Menu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxmovement.medium.com/the-fastest-navigation-layout-for-a-three-level-menu-b0480e2f11a2"&gt;The Fastest Navigation Layout for a Three-Level Menu&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loaders"&gt;
  &lt;/a&gt;
  Loaders
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.nngroup.com/articles/progress-indicators/"&gt;Progress Indicators Make a Slow System Less Insufferable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxdesign.cc/stop-using-a-loading-spinner-theres-something-better-d186194f771e"&gt;Stop Using A Loading Spinner, There’s Something Better&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2016/12/best-practices-for-animated-progress-indicators/"&gt;Best Practices For Animated Progress Indicators&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forms"&gt;
  &lt;/a&gt;
  Forms
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://medium.com/nextux/design-better-forms-96fadca0f49c"&gt;Design Better Forms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cxl.com/blog/form-design-best-practices/"&gt;Form Design: 13 Empirically Backed Best Practices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxdesign.cc/the-ux-behind-designing-better-forms-d6ebe7a817d2"&gt;The UX behind designing better forms&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;That's it. Hopefully, it'll be useful for web devs. If you wish, &lt;a href="https://twitter.com/vponamariov"&gt;follow me on Twitter&lt;/a&gt;, I post a lot about UI/UX there.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>ux</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Markdown Preview in Vim</title>
      <author>Rittik Dasgupta</author>
      <pubDate>Thu, 15 Apr 2021 11:53:53 +0000</pubDate>
      <link>https://dev.to/hrk2023/markdown-preview-in-vim-44bl</link>
      <guid>https://dev.to/hrk2023/markdown-preview-in-vim-44bl</guid>
      <description>&lt;p&gt;When we edit a markdown file in vim, we are not able to preview the markdown file simultaneously. I have also faced this situation, so I decided why not make one.&lt;/p&gt;

&lt;p&gt;To be able to preview a markdown, first, we need a &lt;code&gt;markdown parser&lt;/code&gt;.&lt;br&gt;
I got to know about &lt;a href="https://github.com/charmbracelet/glow"&gt;Glow&lt;/a&gt;, which renders markdown on the Command Line Interface(CLI).&lt;/p&gt;

&lt;p&gt;To install glow, you can follow the instructions given in the Github repo of &lt;a href="https://github.com/charmbracelet/glow"&gt;Glow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After installing Glow I added a few lines to my vimrc&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3Kep_Z7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktsv8vwvcf09im8efwvs.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3Kep_Z7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktsv8vwvcf09im8efwvs.PNG" alt="Vim Function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This function finds the path of the current file and adds it in the &lt;code&gt;.lastpreview.log&lt;/code&gt; file. After that &lt;code&gt;bel vert terminal&lt;/code&gt; command is executed, which opens up the terminal buffer in vim, side by side.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F4&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; PreviewerMarkdown&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;clear&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;glo $&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cat&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;/&lt;span class="p"&gt;.&lt;/span&gt;lastpreview&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, I made this custom mapping in vimrc. I bound my &lt;code&gt;F4&lt;/code&gt; key to the &lt;code&gt;PreviewerMarkdown()&lt;/code&gt;. After PreviewerMarkdown is executed the &lt;code&gt;clear&lt;/code&gt; command runs which clears the terminal buffer, and after this &lt;code&gt;glo&lt;/code&gt; command runs, which is basically an alias I made for &lt;code&gt;glow -s dark | less&lt;/code&gt;. The &lt;code&gt;glo&lt;/code&gt; command opens the file path present in the &lt;code&gt;lastpreview.log&lt;/code&gt; file with a &lt;code&gt;pager (here less)&lt;/code&gt; and a suitable color scheme, and boom our markdown preview is now ready to be used.&lt;/p&gt;

&lt;p&gt;There is room for adding more functionality to the &lt;code&gt;PreviewerMarkdown()&lt;/code&gt;, but for this post, I chose to keep only the core functionality.  &lt;/p&gt;

</description>
      <category>productivity</category>
      <category>vim</category>
      <category>markdown</category>
      <category>linux</category>
    </item>
    <item>
      <title>Iconic developers | part 2 🤓🦄🚫</title>
      <author>Jasper de Jager</author>
      <pubDate>Thu, 15 Apr 2021 11:52:38 +0000</pubDate>
      <link>https://dev.to/jmdejager/iconic-developers-part-2-250j</link>
      <guid>https://dev.to/jmdejager/iconic-developers-part-2-250j</guid>
      <description>&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  🤓🦄🚫
&lt;/h1&gt;

&lt;p&gt;Three more developer types! Thnx &lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/annervisser"&gt;@annervisser&lt;/a&gt;
 and &lt;a class="mentioned-user" href="https://dev.to/keyboardsamurai"&gt;@keyboardsamurai&lt;/a&gt;
&lt;br&gt;
Please keep it going and make it even longer! 😁 &lt;/p&gt;

&lt;p&gt;Leave your iconic developer type in the comments!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## 💻 [name]

#### Habitat

#### Best to ask for

#### Needs works on
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#the-perfectionist"&gt;
  &lt;/a&gt;
  🤓 The perfectionist
&lt;/h2&gt;

&lt;p&gt;Spends their time making everything perfect, re-usable and beautiful. Sometimes forgets what they were actually supposed to be making.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#habitat"&gt;
  &lt;/a&gt;
  Habitat
&lt;/h4&gt;

&lt;p&gt;Can be seen staring at the same code file for hours. Usually has a perfect development environment with all the best tools.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#best-to-ask-for"&gt;
  &lt;/a&gt;
  Best to ask for
&lt;/h4&gt;

&lt;p&gt;Advice on how to clean up or generalize your code. Can also help you get the best development setup available.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#needs-works-on"&gt;
  &lt;/a&gt;
  Needs works on
&lt;/h4&gt;

&lt;p&gt;Keeping it simple and getting sh*t done.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-unicorn"&gt;
  &lt;/a&gt;
  🦄 The Unicorn
&lt;/h2&gt;

&lt;p&gt;Do they really exist? It is told that some of them are in possession of the very rare early bird medal 🥇&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#habitat"&gt;
  &lt;/a&gt;
  Habitat
&lt;/h4&gt;

&lt;p&gt;Rarely seen, some people seem to believe the unicorn developer hides somewhere on dev.to.. who knows&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#best-to-ask-for"&gt;
  &lt;/a&gt;
  Best to ask for
&lt;/h4&gt;

&lt;p&gt;Whatever, they are awesome all the way&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#needs-works-on"&gt;
  &lt;/a&gt;
  Needs works on
&lt;/h4&gt;

&lt;p&gt;Stage fright, please show yourself unicorn developers!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#doctor-no"&gt;
  &lt;/a&gt;
  🚫 Doctor no
&lt;/h2&gt;

&lt;p&gt;Doctor no, not the villain you'd expect.. They sometimes seem evil but really, they have a good heart!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#habitat"&gt;
  &lt;/a&gt;
  Habitat
&lt;/h4&gt;

&lt;p&gt;Are always sure there's a better way of doing things. If you come up with an idea they disagree by default and force their own view on the matter.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#best-to-ask-for"&gt;
  &lt;/a&gt;
  Best to ask for
&lt;/h4&gt;

&lt;p&gt;For getting different perspectives on the problem or if you need a good NO!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#needs-works-on"&gt;
  &lt;/a&gt;
  Needs works on
&lt;/h4&gt;

&lt;p&gt;Listening to others and try to collaborate.&lt;/p&gt;

</description>
      <category>development</category>
      <category>discuss</category>
      <category>webdev</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Sudoku Solver - Solve Any Sudoku Puzzle Instantly</title>
      <author>Dhruv Panchal</author>
      <pubDate>Thu, 15 Apr 2021 11:20:56 +0000</pubDate>
      <link>https://dev.to/dhhruv/sudoku-solver-solve-any-sudoku-puzzle-instantly-91h</link>
      <guid>https://dev.to/dhhruv/sudoku-solver-solve-any-sudoku-puzzle-instantly-91h</guid>
      <description>&lt;p&gt;&lt;strong&gt;Why solve Sudoku by hand, when you can write script to solve them for ya ?!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sudoku is one of the most popular logic-based number-placement puzzle game. The literal meaning of "Su-doku" in Japanese is "the number that is single".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The objective is to fill a nine-by-nine (9x9) grid with digits so that each row, column and 3x3 section contain number between 1 and 9, with each number used once and only once in each section. The Sudoku game players are provided with partially filled grid meant to be solved.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To solve sudoku one doesn't require the knowledge of mathematics but require the logic and reasoning. Solving Sudoku Puzzles daily helps with your brain. It improves the concentration and logical thinking. One can look for sudoku puzzles given in Newspapers or can play them online provided by many websites. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About:
&lt;/h2&gt;

&lt;p&gt;This Script is a Sudoku Solver that solves almost any Sudoku Puzzle by visualizing through the Backtracking Algorithm which is made using the PyGame Library in Python. Ever tried but stucked on Sudoku Puzzles given in newspapers, magazines and online. You can use this script to get its solution instantly and move further.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dhhruv"&gt;
        dhhruv
      &lt;/a&gt; / &lt;a href="https://github.com/dhhruv/Sudoku-Solver"&gt;
        Sudoku-Solver
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🎯 A Sudoku Solver implemented using Python and PyGame Library by visualizing the Sudoku Board using Backtracking Algorithm.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#working"&gt;
  &lt;/a&gt;
  Working:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Every time this Script is executed, a Random Solvable board is created.&lt;/li&gt;
&lt;li&gt;  Now, the user can first try to attempt solving it by clicking on the cells and entering values manually. Check the Input Section for the same.&lt;/li&gt;
&lt;li&gt;  Once the the user finalizes that the inputted number is the correct entry, pressing the enter key will attempt to input the number onto the board. &lt;/li&gt;
&lt;li&gt;  Correct answers will be permanently displayed while incorrect answers will be removed. &lt;/li&gt;
&lt;li&gt;  Likewise, values can be removed by pressing on the backspace or delete keys.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DSaWMCzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdf37yv1e3mcn0aat5ip.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DSaWMCzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdf37yv1e3mcn0aat5ip.gif" alt="Entering Values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If at any point the player decides to solve the board, the Spacebar key can be pressed.&lt;/li&gt;
&lt;li&gt;  This will commence a visual which will demonstrate how the backtracking algorithm works and how it is being applied in order to solve the board.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MQrqxbiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afttou4aho4ok6s4ftt4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MQrqxbiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afttou4aho4ok6s4ftt4.gif" alt="Visualizer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#input"&gt;
  &lt;/a&gt;
  Input:
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Keys&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Left Click&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Selects the Box to enter a value into that cell.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Enter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Confirms the Value written on the board.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Backspace/Delete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Deletes the value in that cell.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Space&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Solves the Board using the Algorithm.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Gives a Hint. Displays a random correct value on the board.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;In order to run the Script, the require &lt;strong&gt;Python &amp;amp; PyGame&lt;/strong&gt; and you can install the requirements using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#execution"&gt;
  &lt;/a&gt;
  Execution:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Clone this repository using
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/dhhruv/Sudoku-Solver.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;br&gt;
Zip Download the Repository and Extract it's contents.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Now run the &lt;a href="https://github.com/dhhruv/Sudoku-Solver/blob/master/SudokuGUI.py"&gt;SudokuGUI&lt;/a&gt; file directly in your Terminal using
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python SudokuGUI.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 SudokuGUI.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can get more information about Sudoku Solver on: &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dhhruv"&gt;
        dhhruv
      &lt;/a&gt; / &lt;a href="https://github.com/dhhruv/Sudoku-Solver"&gt;
        Sudoku-Solver
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🎯 A Sudoku Solver implemented using Python and PyGame Library by visualizing the Sudoku Board using Backtracking Algorithm.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>python</category>
      <category>git</category>
    </item>
    <item>
      <title>Array Methods</title>
      <author>Etulan</author>
      <pubDate>Thu, 15 Apr 2021 10:50:35 +0000</pubDate>
      <link>https://dev.to/etulan/array-methods-4a2h</link>
      <guid>https://dev.to/etulan/array-methods-4a2h</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;An array is a special variable that can hold more than one value at the same time. That is, they are used in Javascript to store multiple values in one variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a programmer, you'll need to adjust/remove/add/replace/count etc elements in an array therefore you need to know the right method to use for any manipulation. There are different methods of manipulating an array and I will be showing some of them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#concat"&gt;
  &lt;/a&gt;
  concat()
&lt;/h1&gt;

&lt;p&gt;This method is used to merge (concatenate) existing arrays. It returns the new array by combining previously declared array variables.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xWdgyNGz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me4ly25y9tbbfjqte0xv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xWdgyNGz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me4ly25y9tbbfjqte0xv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#splice"&gt;
  &lt;/a&gt;
  splice()
&lt;/h1&gt;

&lt;p&gt;This method changes the content of an array by adding and/or removing or replacing elements in an array.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7rVGO8O_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc665gcmj65rvz9fqaza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7rVGO8O_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc665gcmj65rvz9fqaza.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#every"&gt;
  &lt;/a&gt;
  every()
&lt;/h1&gt;

&lt;p&gt;This method returns true or false if every element in the specified array satisfies a condition specified in the callback function. Returns false even if a single element does not satisfy the condition.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YptIgYh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh7gn3ycto1bihyff5rh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YptIgYh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh7gn3ycto1bihyff5rh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#filter"&gt;
  &lt;/a&gt;
  filter()
&lt;/h1&gt;

&lt;p&gt;This method returns a new array of all elements that satisfy a given condition.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QXYgcjen--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfy8l3lmifo9eqmdetu8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QXYgcjen--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfy8l3lmifo9eqmdetu8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#shift"&gt;
  &lt;/a&gt;
  shift()
&lt;/h1&gt;

&lt;p&gt;This method removes the first element of the array. Its return value is the removed element.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AUswEZJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is99escxqzjld8y9cmbn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AUswEZJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is99escxqzjld8y9cmbn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pop"&gt;
  &lt;/a&gt;
  pop()
&lt;/h1&gt;

&lt;p&gt;Unlike shift above, the pop() method removes the last element from an array and returns that element.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7daT2O83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc154rjrk20qli3wt47a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7daT2O83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc154rjrk20qli3wt47a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other methods include but not limited to:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Methods&lt;/th&gt;
&lt;th&gt;Methods&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;forEach&lt;/td&gt;
&lt;td&gt;map()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;indexOf&lt;/td&gt;
&lt;td&gt;reverse()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;join()&lt;/td&gt;
&lt;td&gt;lastIndexOf()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fill()&lt;/td&gt;
&lt;td&gt;fine()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unshift()&lt;/td&gt;
&lt;td&gt;toString()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
    </item>
    <item>
      <title>Go project structures</title>
      <author>Permpoon Chaowanaphunphon</author>
      <pubDate>Thu, 15 Apr 2021 10:30:18 +0000</pubDate>
      <link>https://dev.to/mossnana/go-project-structures-o3p</link>
      <guid>https://dev.to/mossnana/go-project-structures-o3p</guid>
      <description>&lt;p&gt;source &amp;amp; credit : thank you &lt;strong&gt;Kat Zień&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Qtk9FFOoT5M&amp;amp;t"&gt;video&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/katzien/go-structure-examples"&gt;repository&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Consistent
เพื่อให้โครงสร้างทุกส่วนของไปในทิศทางเดียวกัน&lt;/li&gt;
&lt;li&gt;Easy to understand&lt;/li&gt;
&lt;li&gt;Easy to change, loosely-coupled
แก้ไขง่าย โดยไม่กระทบส่วนอื่น ๆ&lt;/li&gt;
&lt;li&gt;East to test&lt;/li&gt;
&lt;li&gt;Structure reflects the design exactly&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#beer-reviewing-service"&gt;
  &lt;/a&gt;
  Beer reviewing service
&lt;/h3&gt;

&lt;p&gt;Requirements&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Users can add a beer&lt;/li&gt;
&lt;li&gt;Users can add a review for a beer&lt;/li&gt;
&lt;li&gt;Users can list all beers&lt;/li&gt;
&lt;li&gt;Users can list all reviews for a selected beer.&lt;/li&gt;
&lt;li&gt;Option to store data either in memory or JSON file&lt;/li&gt;
&lt;li&gt;Ability to add some sample data&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#flat-structure"&gt;
  &lt;/a&gt;
  Flat structure
&lt;/h2&gt;

&lt;p&gt;📦/&lt;br&gt;
 ┣ 📜data.go&lt;br&gt;
 ┣ 📜handlers.go&lt;br&gt;
 ┣ 📜main.go&lt;br&gt;
 ┣ 📜model.go&lt;br&gt;
 ┣ 📜storage.go&lt;br&gt;
 ┣ 📜storage_json.go&lt;br&gt;
 ┣ 📜storage_mem.go&lt;br&gt;
 ┗ 📜[file name]_test.go&lt;/p&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get storage [&lt;strong&gt;Requirement 5&lt;/strong&gt;]&lt;/li&gt;
&lt;li&gt;Call for routes to get service&lt;/li&gt;
&lt;li&gt;Mock data [&lt;strong&gt;Requirement 6&lt;/strong&gt;]&lt;/li&gt;
&lt;li&gt;HTTP server listener&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;handlers.go&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manage with request (header, body, params,etc...)&lt;/li&gt;
&lt;li&gt;Call data from storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;model.go&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Entities struct
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  graph LR
    main.go --&amp;gt;|get routes| handlers.go
    main.go --&amp;gt;|get sample data| data.go
    main.go --&amp;gt;|get storage| storage.go

    handlers.go --&amp;gt;|get data| storage.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#group-by-function-layered-archetecture"&gt;
  &lt;/a&gt;
  Group by function (Layered archetecture)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;presentation / ui&lt;/li&gt;
&lt;li&gt;business logic&lt;/li&gt;
&lt;li&gt;external deps / infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📦/&lt;br&gt;
 ┣ 📜data.go&lt;br&gt;
 ┣ 📂handlers&lt;br&gt;
 ┃ ┣ 📜beers.go&lt;br&gt;
 ┃ ┗ 📜reviews.go&lt;br&gt;
 ┣ 📂models&lt;br&gt;
 ┃ ┣ 📜beer.go&lt;br&gt;
 ┃ ┣ 📜review.go&lt;br&gt;
 ┃ ┗ 📜storage.go&lt;br&gt;
 ┗ 📂storage&lt;br&gt;
   ┣ 📜json.go&lt;br&gt;
   ┗ 📜memory.go&lt;/p&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Call for routes to get service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;handlers&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;request / response manage&lt;/li&gt;
&lt;li&gt;get storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;storage&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;database services

&lt;ul&gt;
&lt;li&gt;struct&lt;/li&gt;
&lt;li&gt;methods [ CRUD ]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;p&gt;เสี่ยงต่อการเกิด Circular dependencies สูง เช่น layer models ต้องถูกใช้งานจากทั้ง layer บน และ ล่าง&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#group-by-module"&gt;
  &lt;/a&gt;
  Group by module
&lt;/h2&gt;

&lt;p&gt;📦/&lt;br&gt;
 ┣ 📜main.go&lt;br&gt;
 ┣ 📂beers&lt;br&gt;
 ┃ ┣ 📜beer.go&lt;br&gt;
 ┃ ┗ 📜handler.go&lt;br&gt;
 ┣ 📂reviews&lt;br&gt;
 ┃ ┣ 📜review.go&lt;br&gt;
 ┃ ┣ 📜handler.go&lt;br&gt;
 ┗ 📂storage&lt;br&gt;
   ┣ 📜json.go&lt;br&gt;
   ┣ 📜data.go&lt;br&gt;
   ┣ 📜memory.go&lt;br&gt;
   ┗ 📜storage.go&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;p&gt;เสี่ยงต่อการเกิด Circular dependencies เนื่องจาก ข้อมูลมีการเชื่อมโยงกัน [&lt;strong&gt;Requirement 2, 4&lt;/strong&gt;]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Beer ก็ใช้งาน Review &lt;/li&gt;
&lt;li&gt;Review ก็ใช้งาน Beer&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#group-by-context"&gt;
  &lt;/a&gt;
  Group by context
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#domain-driven-design"&gt;
  &lt;/a&gt;
  Domain Driven Design
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Estalish your domain and business logic&lt;/li&gt;
&lt;li&gt;Define your bounded contexts, the models within each context and the ubiquitous language&lt;/li&gt;
&lt;li&gt;Catagorising the building blocks of your system&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#building-blocks"&gt;
  &lt;/a&gt;
  Building blocks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Context
&lt;code&gt;beer tasting&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Language 
&lt;code&gt;beer&lt;/code&gt;, &lt;code&gt;review&lt;/code&gt;, &lt;code&gt;storage&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Entities
&lt;code&gt;Beer&lt;/code&gt;, &lt;code&gt;Review&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Value Objects
&lt;code&gt;Brewery&lt;/code&gt;, &lt;code&gt;Author&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Aggregate
&lt;code&gt;Beer Reviewer&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Service
&lt;code&gt;Beer adder / adding&lt;/code&gt;, &lt;code&gt;Beer lister / listing&lt;/code&gt;, &lt;code&gt;Review lister&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Events
&lt;code&gt;Beer added&lt;/code&gt;, &lt;code&gt;Review added&lt;/code&gt;, &lt;code&gt;Beer already exists&lt;/code&gt;, &lt;code&gt;Beer not found&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Repository
&lt;code&gt;Beer repository&lt;/code&gt;, &lt;code&gt;Review repository&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📦/&lt;br&gt;
 ┣ 📂adding&lt;br&gt;
 ┃ ┣ 📜endpoint.go&lt;br&gt;
 ┃ ┗ 📜service.go&lt;br&gt;
 ┣ 📂beers&lt;br&gt;
 ┃ ┣ 📜beer.go&lt;br&gt;
 ┃ ┗ 📜sample_beers.go&lt;br&gt;
 ┣ 📂listing&lt;br&gt;
 ┃ ┣ 📜endpoint.go&lt;br&gt;
 ┃ ┗ 📜service.go&lt;br&gt;
 ┣ 📂reviewing&lt;br&gt;
 ┃ ┣ 📜endpoint.go&lt;br&gt;
 ┃ ┗ 📜service.go&lt;br&gt;
 ┣ 📂reviews&lt;br&gt;
 ┃ ┣ 📜review.go&lt;br&gt;
 ┃ ┗ 📜sample_reviews.go&lt;br&gt;
 ┣ 📂storage&lt;br&gt;
 ┃ ┣ 📜json.go&lt;br&gt;
 ┃ ┣ 📜type.go&lt;br&gt;
 ┃ ┗ 📜memory.go&lt;br&gt;
 ┗ 📜main.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;graph LR
  main.go --&amp;gt;|get repository| beers_package
  main.go --&amp;gt;|get repository| reviews_package
  main.go --&amp;gt;|get storage| storage_package
  main.go --&amp;gt;|send storage service| listing_package
  main.go --&amp;gt;|get beers and beers review| listing_package
  main.go --&amp;gt;|send storage service| adding_package
  main.go --&amp;gt;|add beer and beer review| adding_package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#hexagonal-architecture"&gt;
  &lt;/a&gt;
  Hexagonal Architecture
&lt;/h2&gt;

&lt;p&gt;📦/&lt;br&gt;
 ┣ 📂cmd&lt;br&gt;
 ┃ ┣ 📂beer-server&lt;br&gt;
 ┃ ┃ ┗ 📜main.go&lt;br&gt;
 ┃ ┗ 📂sample-data&lt;br&gt;
 ┃   ┗ 📜main.go&lt;br&gt;
 ┗ 📂pkg&lt;br&gt;
   ┣ 📂adding&lt;br&gt;
   ┃ ┣ 📜endpoint.go&lt;br&gt;
   ┃ ┗ 📜service.go&lt;br&gt;
   ┣ 📂beers&lt;br&gt;
   ┃ ┗ 📜beer.go&lt;br&gt;
   ┣ 📂listing&lt;br&gt;
   ┃ ┣ 📜endpoint.go&lt;br&gt;
   ┃ ┗ 📜service.go&lt;br&gt;
   ┣ 📂reviewing&lt;br&gt;
   ┃ ┣ 📜endpoint.go&lt;br&gt;
   ┃ ┗ 📜service.go&lt;br&gt;
   ┣ 📂reviews&lt;br&gt;
   ┃ ┗ 📜review.go&lt;br&gt;
   ┣ 📂storage&lt;br&gt;
   ┃ ┣ 📜json.go&lt;br&gt;
   ┃ ┣ 📜type.go&lt;br&gt;
   ┃ ┗ 📜memory.go&lt;br&gt;
   ┣ 📂http&lt;br&gt;
   ┃ ┣ 📂rest&lt;br&gt;
   ┃ ┃ ┗ 📜handler.go&lt;br&gt;
   ┃ ┣ 📂soap&lt;br&gt;
   ┃ ┗ 📂rpc&lt;br&gt;
   ┗ 📂resources&lt;br&gt;
     ┗ 📂sample-data&lt;br&gt;
       ┣ 📜sample_beers.go&lt;br&gt;
       ┗ 📜sample_reviews.go&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cmd&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;commands to use service

&lt;ul&gt;
&lt;li&gt;use by request http protocal&lt;/li&gt;
&lt;li&gt;use by using command line&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;resources/sample-data&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;seperate sample data to individual folder&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>projectstructure</category>
      <category>structure</category>
    </item>
    <item>
      <title>Build a highly available Node.js application using Docker, NGINX and AWS ELB</title>
      <author>Sowmen Rahman</author>
      <pubDate>Thu, 15 Apr 2021 09:40:57 +0000</pubDate>
      <link>https://dev.to/sowmenappd/build-a-highly-available-node-js-application-using-docker-nginx-and-aws-elb-3cjp</link>
      <guid>https://dev.to/sowmenappd/build-a-highly-available-node-js-application-using-docker-nginx-and-aws-elb-3cjp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-load-balancing"&gt;
  &lt;/a&gt;
  What is load balancing?
&lt;/h1&gt;

&lt;p&gt;Load balancing is a technique(algorithm) used to distribute incoming network traffic onto a group of servers. It provides a single entry point for all public users to a service hosted by a server. Production-grade servers are generally run behind load balancers because they can “&lt;strong&gt;even-out&lt;/strong&gt;” the incoming load across the servers, thus preventing server overloads. Load balancers also provide a secondary functionality to the servers they are routing traffic to: they act as a &lt;strong&gt;reverse proxy&lt;/strong&gt;. A reverse proxy is like a middle-man between the group of servers and the users. All requests handled by the reverse-proxy are forwarded to the appropriate server based on the request conditions. The server then responds back with its data, which is then directed to the users from the reverse proxy. In this way, r-proxies keep the identity of servers anonymous alongside preventing access to the main servers where sensitive data like configuration files, tokens, secrets, etc. are stored.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YCG9IUwS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzrviivtuvpoestzuqdp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YCG9IUwS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzrviivtuvpoestzuqdp.png" alt="Load balancing diagram"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#nginx-and-aws-elb-as-load-balancers"&gt;
  &lt;/a&gt;
  NGINX and AWS ELB as load balancers
&lt;/h1&gt;

&lt;p&gt;NGINX is a fast and free open-source load balancer that can also act as a reverse proxy. On the other hand, ELB is a load-balancing service provide by Amazon AWS. ELB can further be of 3 main types: (1) ALB, (2) CLB and (3) NLB. A newer class of load-balancers called the gateway load-balancers have also been add into the family of cloud services AWS provides. The idea for this tutorial is to form a cascading multi load-balancer architecture that can provide a highly available Node.js server running on multiple ports.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note to users&lt;/strong&gt; : There are many ways of implementing infrastructure for Node.js applications on AWS, including ones that utilize AWS’s own ECS and ECR ecosystem for docker applications. However, this tutorial doesn’t focus on that, and aims to better understand the mechanism behind EC2 instances, load balancers and how they interact with docker over load-balanced and proxied ports.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#overview-of-the-architecture"&gt;
  &lt;/a&gt;
  Overview of the architecture
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EouNr-ih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0w57kfrno5e623m4gpi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EouNr-ih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0w57kfrno5e623m4gpi.png" alt="Architecture diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the architecture that we’re aiming for. Multi-level load balancers managed by AWS and NGINX which will help us maintain multiple ports on each EC2 instance for our node apps. The good thing about this architecture is that the 2 instances are in different availability zones (AZ1 and AZ2), as a result, even if one zone goes down, the other zone remains functional. And our application doesn’t crash.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-nodejs-app"&gt;
  &lt;/a&gt;
  The Node.js app
&lt;/h1&gt;

&lt;p&gt;For the sake of simplicity, we use a standard starter Express node app, which looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MD9SuGU8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx2df1qkaw3blim8vrwp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MD9SuGU8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx2df1qkaw3blim8vrwp.png" alt="index.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ports are provided to the express app via the &lt;strong&gt;PORT&lt;/strong&gt; environment variable. We will feed these port values via Docker. This is a very simple task thanks to &lt;strong&gt;docker-compose&lt;/strong&gt;. There’s another environment variable &lt;strong&gt;SERVER_ID&lt;/strong&gt;, however don’t worry, as it’s only for demonstration purposes only. Once the whole setup is ready, the &lt;strong&gt;SERVER_ID&lt;/strong&gt; will let us know which server the load balancers are pulling the response from. This will help us to validate that our infrastructure configuration using the multi-level load-balancer/r-proxy is running the way it should be.&lt;/p&gt;

&lt;p&gt;These type of configurations are common in production pipelines. Generally the main app servers are placed in a VPC in such cases. One informational point about the load balancers is that, level 1 load balancers are often categorized as &lt;strong&gt;public-facing&lt;/strong&gt;, as they deal with the actual client requests, while those at level 2 are &lt;strong&gt;internal&lt;/strong&gt; load-balancers, whose job is to route requests between sources.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#launching-ec2-servers"&gt;
  &lt;/a&gt;
  Launching EC2 servers
&lt;/h1&gt;

&lt;p&gt;Log in to your AWS account and go to EC2 dashboard. We will be following these steps to setup new servers and get them ready for Docker:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From the dashboard, click on &lt;strong&gt;Launch instances&lt;/strong&gt; at the top-right corner.&lt;/li&gt;
&lt;li&gt;From the quick start section, select &lt;strong&gt;Amazon Linux 2 AMI&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Choose instance type &lt;strong&gt;t2.micro&lt;/strong&gt; (you can avail the free tier on this instance type if its still available on your account). You may also choose any other type you like instead.&lt;/li&gt;
&lt;li&gt;For this demonstration only, we’ll launch the 2 instances separately, since we want these two instances in different availability zones. In my case, the region is &lt;strong&gt;us-east-1&lt;/strong&gt;, so I selected the default subnet under &lt;strong&gt;us-east-1a&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under &lt;strong&gt;User data&lt;/strong&gt; section, paste code from this script below. This will install the prerequisite software for running our node.js docker apps. &lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For &lt;strong&gt;Add Storage&lt;/strong&gt; and &lt;strong&gt;Add Tags&lt;/strong&gt; sections, keep the defaults and skip.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For &lt;strong&gt;Configure Security Group&lt;/strong&gt;, create a new security group with ports 22(SSH) and 80(HTTP) open. For IP range you may select &lt;strong&gt;Anywhere&lt;/strong&gt; or &lt;strong&gt;My IP*8. Since this is for testing only, you may choose either one. I went with **Anywhere&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Review and Launch&lt;/strong&gt; and then &lt;strong&gt;Launch&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new keypair to SSH into this instances. We will need this later to build the docker images for the app and the internal load balancer.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first of the 2 instances have been launched now. Follow the same steps for launching the next instance, only changing the subnet to some other value than the previous one, and using the SSH keypair you created a while ago.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#containerizing-the-app-and-nginx-configuration"&gt;
  &lt;/a&gt;
  Containerizing the app and NGINX configuration
&lt;/h1&gt;

&lt;p&gt;For this tutorial, we will use this repo for the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Link: https://github.com/sowmenappd/load_balanced_nodejs_app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will help us speed the process through. The hierarchical view of the repo is given below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pcc_KTyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/320/1%2Art2Qr3QlEdFtvHML7ekGsw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pcc_KTyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/320/1%2Art2Qr3QlEdFtvHML7ekGsw.png" alt="Folder structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;app&lt;/strong&gt; folder contains the node server source code along with the Dockerfile. In the &lt;strong&gt;nginx&lt;/strong&gt; folder, there is a configuration file &lt;strong&gt;nginx.conf&lt;/strong&gt; that defines the upstream server port configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http{    
    upstream lb {        
        server 172.17.0.1:1000 weight=1;        
        server 172.17.0.1:2000 weight=1;        
        server 172.17.0.1:3000 weight=1;    
    }     
    server {        
        listen 80;        
        location / {            
            proxy_pass http://lb;        
        }    
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;e configuration files specifies that the main NGINX server should listen to port 80, the &lt;strong&gt;root location&lt;/strong&gt; “/” will relay the request(proxy pass) to an upstream defined in this file named &lt;strong&gt;lb&lt;/strong&gt;. This is an upstream object that specifies how many servers will be included(these are the express servers that we mount via docker-compose, more on that in a later section), and what ports these servers will be internally running on, while the reverse proxy load balances the traffic from port 80.&lt;br&gt;
In our case, the upstream proxy will direct traffic to ports 1000, 2000, and 3000. These port numbers must match the internal PORT value that is sent to each express server instance as an env-var, which we will define in the docker-compose YAML file.&lt;br&gt;
For each of the launched instances, we do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SSH into the instance using created keypair&lt;/li&gt;
&lt;li&gt;Run the following terminal commands to build the app image from its Dockerfile
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/sowmenappd/load_balanced_nodejs_app.git
cd load_balanced_nodejs_app/app
docker build -t app .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Next build the nginx server docker image
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ../nginx
docker build -t nginx-s .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;docker images&lt;/code&gt; and you should see something like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OttUX2NM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AFj36IiczX2Z9TXyTvS9yqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OttUX2NM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AFj36IiczX2Z9TXyTvS9yqw.png" alt="Terminal output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For the second server, we need to change the docker-compose.yml file. The env-var &lt;strong&gt;SERVER_ID&lt;/strong&gt; should be changed to 2 for all apps (app1, app2, app3). This is definitely nothing to be concerned about, and no production server will ever have something like that. We’re doing this only for the sake of demonstration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the final commands:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ..
docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your isolated servers should now be running three process of the express app in the background. All we need now is to mount this system using the load-balancer AWS gives us, AWS ALB.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mounting-the-system-with-aws-alb"&gt;
  &lt;/a&gt;
  Mounting the system with AWS ALB
&lt;/h1&gt;

&lt;p&gt;At this point, both the instances are ready for mounting. We are going to set up an application load balancer in AWS by following these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to &lt;strong&gt;EC2 Dashboard&lt;/strong&gt; and click on &lt;strong&gt;Target Groups&lt;/strong&gt;. Click &lt;strong&gt;Create target group&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Choose target type: &lt;strong&gt;Instances&lt;/strong&gt; and provide a valid target group name, and click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Select the two running instances and click &lt;strong&gt;Include as pending below&lt;/strong&gt;, with the port as 80.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Create target group&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Next, click on &lt;strong&gt;Load balancer&lt;/strong&gt; from the side menu (left).&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Create load balancer&lt;/strong&gt; and click &lt;strong&gt;Create&lt;/strong&gt; on Application Load Balancer card.&lt;/li&gt;
&lt;li&gt;In the next screen, select the availability zones you had chosen earlier while launching the instances, and proceed.&lt;/li&gt;
&lt;li&gt;Create a new security group with port 80 open to all IP range, and then click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Existing target group&lt;/strong&gt;, and point it to the target group you created.&lt;/li&gt;
&lt;li&gt;Rest of the settings are fine, you can click on &lt;strong&gt;Create&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The load balancer should be up and running within minutes after registering the instances and getting health checks running. Now, we grab the DNS name of the load balancer from &lt;strong&gt;EC2 Dashboard &amp;gt; Load balancers&lt;/strong&gt;, copy the DNS name attribute of the load balancer.&lt;/p&gt;

&lt;p&gt;Paste the DNS name into the browser, and hit Enter. You will see that every time you refresh your browser page, the response sends back different PORT and SERVER_ID values. This validates the system because by default, NGINX and AWS load balancers use Round Robin algorithm for load balancing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aMAcl9oj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2ASVhkmrpyS1dOAsJfXUj6-Q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMAcl9oj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2ASVhkmrpyS1dOAsJfXUj6-Q.gif" alt="App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Our system is now guaranteed to be very highly available and able to withstand spiky and massive amount of traffic over prolonged durations of operation, given the multi-load balancer configuration we have deployed. As a follow up to this tutorial, I shall also post another article showing how to create and maintain a deployment pipeline that integrates with source control and deploys our changes to the servers upon commits to the GitHub repo.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/builder/"&gt;Dockerfile reference | Docker Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/compose-file/"&gt;Compose file | Docker Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/introduction.html"&gt;What is an Application Load Balancer? — Elastic Load Balancing (amazon.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html"&gt;Target groups for your Application Load Balancers — Elastic Load Balancing (amazon.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://faun.pub/basics-of-configuring-nginx-b38c78eb113"&gt;Basics of configuring NGINX. This article contains how to do the… | by Nethmini Romina | FAUN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>docker</category>
      <category>nginx</category>
    </item>
    <item>
      <title>Thoughts on Designing</title>
      <author>Zack Webster</author>
      <pubDate>Thu, 15 Apr 2021 09:19:52 +0000</pubDate>
      <link>https://dev.to/zaxwebs/thoughts-on-designing-1cek</link>
      <guid>https://dev.to/zaxwebs/thoughts-on-designing-1cek</guid>
      <description>&lt;p&gt;Learning to design can teach you so much more about so many other subjects. You get to learn about psychology (one of my favourite subjects), organization, culture, you name it.&lt;/p&gt;

&lt;p&gt;There's so much science to it and yet it's also so subjective. It is a never-ending quest given this nature.&lt;/p&gt;

&lt;p&gt;It can be fun and yet frustrating because well, it's not always easy. Like with everything, you have to learn the tools of trade and tricks to bring your vision into reality. But if you keep at it, you will eventually be able to spin some tasty visual treats that you can get paid for as well (Cough.. cough... NFTs seem good).&lt;/p&gt;

&lt;p&gt;"Practice makes perf... you better" or so people say. Perfection is an illusion when something is subjective. So go out there, create whatever. The good, the ugly... just create.&lt;/p&gt;

&lt;p&gt;And in that light, here are some random pieces I have. Hopefully, they will inspire you to make some of your own.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zxGeh5VK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g4q80dxe8fy9pkpeeyi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zxGeh5VK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g4q80dxe8fy9pkpeeyi.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--avykLHal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jiksjfbnzrph5sir2ent.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--avykLHal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jiksjfbnzrph5sir2ent.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IUZiPzEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpo2xk7y8vjos8asu4f3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUZiPzEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpo2xk7y8vjos8asu4f3.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>design</category>
    </item>
    <item>
      <title>4 Sessions not to miss on the Global AI Student Conference</title>
      <author>Henk Boelman</author>
      <pubDate>Thu, 15 Apr 2021 09:15:24 +0000</pubDate>
      <link>https://dev.to/azure/4-sessions-not-to-miss-on-the-global-ai-student-conference-42a</link>
      <guid>https://dev.to/azure/4-sessions-not-to-miss-on-the-global-ai-student-conference-42a</guid>
      <description>&lt;p&gt;&lt;strong&gt;On April 24th, the Global AI Student Conference takes place. An 8-hour conference with 16 sessions. 14 sessions are given by our Microsoft Student Ambassadors and there are 2 panels.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Date:  &lt;strong&gt;24 April 2021&lt;/strong&gt;&lt;br&gt;
Time:  &lt;strong&gt;10:00 - 18:00 UTC&lt;/strong&gt;&lt;br&gt;
Registration &amp;amp; full program:  &lt;strong&gt;&lt;a href="https://aiconf.education"&gt;https://aiconf.education&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;During the full duration of the conference interpretation into international sign will be provided&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Below our Student Speakers have provided some details of what you will learn if you attend their session, as well as some useful links if you want to get started right now with the technologies they will talk about.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X9Ysxga3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kg3u0jj9tv9b4r0l6hl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X9Ysxga3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kg3u0jj9tv9b4r0l6hl2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#machine-learning-in-fluid-mechanics"&gt;
  &lt;/a&gt;
  Machine Learning In Fluid Mechanics
&lt;/h3&gt;

&lt;p&gt;By &lt;a href="https://aiconf.education/speakers/nigama-vajjula/"&gt;Nigama Vajjula&lt;/a&gt;&lt;br&gt;
Time: 15:00 - 15:30 UTC&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will learn in this session:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How ML relates to fluid mechanics.&lt;/li&gt;
&lt;li&gt;Related research areas.&lt;/li&gt;
&lt;li&gt;The current state of ML research in fluid mechanics with some case studies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Learn more:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://link.springer.com/article/10.1007/s00162-020-00542-y"&gt;Special issue on machine learning and data-driven methods in fluid dynamics&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q0X61PwP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ey7k3o7ozjftt8u3fidu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q0X61PwP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ey7k3o7ozjftt8u3fidu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-nocode-ml-models-with-azure-machine-learning-and-microsoft-learn"&gt;
  &lt;/a&gt;
  Create no-code ML Models with Azure Machine Learning and Microsoft Learn
&lt;/h3&gt;

&lt;p&gt;By &lt;a href="https://aiconf.education/speakers/foteini-savvidou/"&gt;Foteini Savvidou&lt;/a&gt;&lt;br&gt;
Time: 12:30-13:00 UTC&lt;/p&gt;

&lt;p&gt;In this session, I will explain the concept of Machine Learning and Regression and show how to build a no-code regression model that predicts the price of an automobile in Azure Machine Learning Designer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will learn in this session:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create an Azure Machine Learning workspace.

&lt;ul&gt;
&lt;li&gt;Build and train a regression model in Azure Machine Learning Designer.&lt;/li&gt;
&lt;li&gt;Evaluate and publish that model.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Learn more:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://docs.microsoft.com/learn/modules/create-regression-model-azure-machine-learning-designer/?WT.mc_id=aiml-16127-cxa"&gt;Self-Paced Learning: Microsoft Learn – Create a Regression Model with Azure Machine Learning designer&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i4tl37Zh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq64fs7uxxy8zxsd2k64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i4tl37Zh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq64fs7uxxy8zxsd2k64.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ai-as-easy-as-creating-a-powerpoint"&gt;
  &lt;/a&gt;
  AI as easy as creating a PowerPoint
&lt;/h3&gt;

&lt;p&gt;By: &lt;a href="https://aiconf.education/speakers/malte-reimann/"&gt;Malte Reimann&lt;/a&gt;&lt;br&gt;
Time: 13:00 - 13:30 UTC&lt;/p&gt;

&lt;p&gt;&lt;em&gt;'AI as easy as creating a PowerPoint' covers how to use image classification with zero math and near no computer science expertise needed by using Lobe.ai.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will learn in this session:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you know how to use a mouse, keyboard, and your smartphone camera, after this session you are guaranteed to be able to realize your own ideas involving machine learning.&lt;/li&gt;
&lt;li&gt;You will learn image classification without all the complexity of statistics.&lt;/li&gt;
&lt;li&gt;Often companies talk about the benefits of Ai in board rooms. You will be able to be the one to materialize these benefits by starting small and iterating quickly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Learn more:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.lobe.ai"&gt;www.lobe.ai&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sLuxI2Ad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/or65529hjbb5ap0iftr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sLuxI2Ad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/or65529hjbb5ap0iftr0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#azure-health-bot"&gt;
  &lt;/a&gt;
  Azure Health Bot
&lt;/h3&gt;

&lt;p&gt;By: &lt;a href="https://aiconf.education/speakers/christina-pardali/"&gt;Christine Pardali&lt;/a&gt;&lt;br&gt;
Time: 10:300-11:00 UTC&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will learn in this session:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understand what is a healthcare assistant
&lt;/li&gt;
&lt;li&gt;Get to know Azure Health Bot Service and the management portal
&lt;/li&gt;
&lt;li&gt;Learn how to build your own customized assistant in 15 minutes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Learn more:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://docs.microsoft.com/azure/health-bot/?WT.mc_id=aiml-16127-cxa"&gt;Azure Health Bot&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you want to learn more go to &lt;a href="https://aiconf.education"&gt;https://aiconf.education&lt;/a&gt; to view the full program and register.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>azure</category>
      <category>ai</category>
    </item>
    <item>
      <title>Things I Wished I Knew About DevOps Practices and Cloud Technologies When I Started my First Role in Tech</title>
      <author>Kim Diep</author>
      <pubDate>Thu, 15 Apr 2021 08:54:57 +0000</pubDate>
      <link>https://dev.to/thekimmykola/things-i-wished-i-knew-about-devops-practices-and-cloud-technologies-when-i-started-my-first-role-in-tech-160o</link>
      <guid>https://dev.to/thekimmykola/things-i-wished-i-knew-about-devops-practices-and-cloud-technologies-when-i-started-my-first-role-in-tech-160o</guid>
      <description>&lt;p&gt;It’s 2021 and I’m just over a month into my third role as a Software Engineer &amp;amp; Tech Coach. It’s been a whirlwind of a journey so far! Here’s some things I wished I knew about DevOps practices and cloud technologies when I started my first role in tech.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-role-wasnt-just-about-fullstack-software-engineering-in-c-but-also-involved-devops-practices-and-cloud-technologies"&gt;
  &lt;/a&gt;
  My role wasn’t just about full-stack Software Engineering in C#, but also involved DevOps practices and Cloud technologies
&lt;/h3&gt;

&lt;p&gt;During my career switch into tech, I thought that DevOps practices and Cloud technologies were utilised solely by DevOps Engineers and Cloud Engineers. I under appreciated how much of my role involved DevOps practices and Cloud.&lt;/p&gt;

&lt;p&gt;When I spoke to people in my network and especially those who have recently started their first roles in technology; it seemed like there was a mixed bag. Some people were not involved in DevOps and Cloud at all, though they mentioned some of their colleagues were. Others, like myself had more of a hybrid role and some people were doing DevOps and Cloud every single day!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-devops-in-a-nutshell"&gt;
  &lt;/a&gt;
  What is DevOps in a nutshell?
&lt;/h3&gt;

&lt;p&gt;AWS states, "DevOps is the combination of...philosophies, practices, and tools that increases an organisation's ability to deliver applications and services…". The infrastructure and process that sits behind software ensures a smoother experience for building code, testing it, shipping it out and monitoring it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devops-and-cloud-is-there-to-help-developers"&gt;
  &lt;/a&gt;
  DevOps and Cloud is there to help Developers
&lt;/h3&gt;

&lt;p&gt;Some Software Engineers would say that DevOps and Cloud is not part of their role, so why should they bother; they do have a point there. It’s a massive world, recently, product offerings like AWS Amplify for example, help those who major on the front-end and API domains build mobile/web apps quickly. However, there's value in learning some of the key concepts on how DevOps and cloud is helpful.&lt;/p&gt;

&lt;p&gt;In my first role in tech, I wanted to learn some fundamentals of DevOps and Cloud that would support me in my role as a C# Full-Stack Software Engineer.&lt;/p&gt;

&lt;p&gt;In my team at the time, one of the projects we were tasked with was re-writing a legacy Excel application into a .NET Core 3.1 C# web application (at the time of writing this post, it’s .NET 5). I really liked the way my team worked together on this, all the developers/testers, business analysts, our product owner and scrum master mobbed on this.&lt;/p&gt;

&lt;p&gt;Something popped into my head at the time: “Why can’t we just build the web application and then just deploy it to production for the users, easy right? I can just click around on the Azure Portal and just manually make my resources there and then manually deploy.”&lt;/p&gt;

&lt;p&gt;Well, when we started mob programming on the cloud infrastructure process, I realised there was more to just ‘making something work’.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automated-continuous-integration-amp-continuous-deployments-using-azure-repos-amp-pipelines"&gt;
  &lt;/a&gt;
  Automated Continuous Integration &amp;amp; Continuous Deployments Using Azure Repos &amp;amp; Pipelines
&lt;/h3&gt;

&lt;p&gt;One of the things that stuck with me was CI/CD (Continuous Integration / Continuous Deployment). According to the AWS DevOps &lt;a href="https://aws.amazon.com/blogs/devops/complete-ci-cd-with-aws-codecommit-aws-codebuild-aws-codedeploy-and-aws-codepipeline/#:~:text=An%20integral%20part%20of%20DevOps,from%20development%20to%20production%20environments."&gt;blog&lt;/a&gt;, “An integral part of DevOps is adopting the culture of continuous integration and continuous delivery/deployment (CI/CD), where a commit or change to code passes through various automated stage gates, all the way from building and testing to deploying applications, from development to production environments.”&lt;/p&gt;

&lt;p&gt;I got to appreciate this by learning about git, git repositories on Azure repos, managing branches and creating pipelines to build and deploy our C# solution.&lt;/p&gt;

&lt;p&gt;During my learning process, I had a sneak peak at how different teams were utilising Azure Pipelines. At first I was hard-coding things in and this sort of worked, but then I found myself copying and pasting all the time. I then realised parameterisation was helpful to ensure I could supply different values for the same pipeline variables. This helped me as a developer and for other developers on my team because it meant we could replicate the same setup across the development environments, testing environments, pre-production and production environments of the pipeline. We could configure things to be switched ‘on’ and ‘off’ through code.&lt;/p&gt;

&lt;p&gt;Separation of concerns was important here. We decided to go with an infrastructure pipeline and an app pipeline. If there were changes to the web application on a branch, CI/CD will automatically detect this and trigger a build and deploy onto the relevant environments using the relevant pipelines. Test suites would also run automatically too. Once the Pull Request (PR) for the branch has been approved and merged, the CI/CD pipeline will build and deploy to the environments. No more arduous manual deployments that we had to deal with for the original Excel application! Great!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#infrastructureascode"&gt;
  &lt;/a&gt;
  Infrastructure-as-Code
&lt;/h3&gt;

&lt;p&gt;During my first role, I realised that clicking around the settings on the Azure Portal to create and configure resources was helpful for me, but not helpful for others. It wasn’t repeatable. We had to think as a team how we can define the infrastructure and configure it using a better approach. This was where the Azure Resource Manager (ARM) templates came in handy. It enabled the definition of what infrastructure we wanted to make, how we wanted to make it and configure it.&lt;/p&gt;

&lt;p&gt;The ARM templates were useful as they could be version controlled through git as well; just like we would version control code. There were also helpful extensions on Visual Studio for structuring and validating these templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most importantly, it enabled a repeatable and testable process for our infrastructure.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logging-amp-monitoring"&gt;
  &lt;/a&gt;
  Logging &amp;amp; Monitoring
&lt;/h3&gt;

&lt;p&gt;So why do we need logging &amp;amp; monitoring? Let me put it this way, when you release a new feature for your product, that's just the start. Just as a plane has a suite of telemetry to record readings from instruments; it is the same concept for software to ensure everything is operating as it should. Try to think where logging and monitoring makes sense for you.&lt;/p&gt;

&lt;p&gt;We used Azure Monitor to add observability into our applications, infrastructure and network.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h3&gt;

&lt;p&gt;This is just the surface of what DevOps and Cloud technologies can offer to developers, of course there are specialists who go a bit deeper into more concepts that those I've covered here. If you are working in tech, there is some benefit to learning some of the fundamentals about the infrastructure and process that sits behind software to ensure smoother experiences for building code, testing it, shipping it out and monitoring it.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>career</category>
      <category>learning</category>
      <category>cloud</category>
    </item>
  </channel>
</rss>
