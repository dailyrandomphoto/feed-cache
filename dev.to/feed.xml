<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Code an API Call with React!</title>
      <author>Ustariz Enzo</author>
      <pubDate>Sat, 18 Dec 2021 08:16:11 +0000</pubDate>
      <link>https://dev.to/ziratsu/how-to-code-an-api-call-with-react-59kf</link>
      <guid>https://dev.to/ziratsu/how-to-code-an-api-call-with-react-59kf</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's code an &lt;em&gt;API Call&lt;/em&gt; with React. &lt;br&gt;
This is pretty common and you need to master it if you want to use React.&lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bBjsFmagQXc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-hooks-you-need"&gt;
  &lt;/a&gt;
  1. The hooks you need!
&lt;/h2&gt;

&lt;p&gt;You need to import two hooks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;React API Call&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create your state which will start at false since at first you don't have any data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;imgURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setImgURL&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;React API Call&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-fetch-an-api"&gt;
  &lt;/a&gt;
  2. Fetch an API
&lt;/h2&gt;

&lt;p&gt;Find a random image API and do a fetch when the component is mounted, using the hook &lt;em&gt;useEffect()&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Let's start by simply logging the response of the fetch to check if it's working:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://source.unsplash.com/random/600x800&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will be triggered after the first render of the component!&lt;/p&gt;

&lt;p&gt;Since the response is not JSON, you don't need to parse it, you can just extract the URL from it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://source.unsplash.com/random/600x800&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setImgURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can add the image to your JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;React API Call&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;imgURL&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;imgURL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You're using the short circuit operator, meaning that it'll only render the image if &lt;em&gt;imgUrl&lt;/em&gt; is true.&lt;/p&gt;

&lt;p&gt;If you refresh the page, you'll see that you have a different image each time!&lt;/p&gt;

&lt;p&gt;This is how you can do a pretty &lt;em&gt;basic API call with React&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo. &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How we upload File with some data to nodeJS using Simple Form </title>
      <author>Deepak</author>
      <pubDate>Sat, 18 Dec 2021 07:50:27 +0000</pubDate>
      <link>https://dev.to/deepakjaiswal/how-we-upload-file-with-some-data-to-nodejs-using-simple-form-1he2</link>
      <guid>https://dev.to/deepakjaiswal/how-we-upload-file-with-some-data-to-nodejs-using-simple-form-1he2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h2&gt;

&lt;p&gt;first you have to install some libraray to your to your project&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npm i express multer mongoose&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#indexjs"&gt;
  &lt;/a&gt;
  index.js
&lt;/h2&gt;

&lt;p&gt;app.use(express.static(__dirname('/public'))&lt;br&gt;
//set folder as static folder&lt;br&gt;
app.use(express.urlencoded({extended:false}))&lt;br&gt;
//set req.body of data are accessible from index.html&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;form action="/api/post" method="post" enctype="multipart/form-data" &amp;gt;&lt;br&gt;
&amp;lt;input type="text" name="name"/&amp;gt;&lt;br&gt;
&amp;lt;input type="email" name="email"/&amp;gt;&lt;br&gt;
&amp;lt;input type="file" name="file" id="file" /&amp;gt;&lt;br&gt;
&amp;lt;nput type="submit" /&amp;gt;&lt;br&gt;
&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#indexjs"&gt;
  &lt;/a&gt;
  index.js
&lt;/h2&gt;

&lt;p&gt;`const upload = multer({ dest: 'uploads/' })&lt;/p&gt;

&lt;p&gt;const app = express()&lt;br&gt;
//this code for single file upload&lt;br&gt;
app.post('/api/post', upload.single('file'), function (req, res, next) {&lt;br&gt;
  const {name,email}=req.body&lt;br&gt;
  // req.file is the &lt;code&gt;file&lt;/code&gt; file&lt;br&gt;
     res.send({name,email,filename:req.file.filename})&lt;br&gt;
  // req.body will hold the text fields, if there were any&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>database</category>
    </item>
    <item>
      <title>Learn SQL: Microsoft SQL Server - Episode 12: Finding the length of a String</title>
      <author>Goran Kortjie</author>
      <pubDate>Sat, 18 Dec 2021 07:35:20 +0000</pubDate>
      <link>https://dev.to/ifierygod/learn-sql-microsoft-sql-server-episode-12-finding-the-length-of-a-string-2h8l</link>
      <guid>https://dev.to/ifierygod/learn-sql-microsoft-sql-server-episode-12-finding-the-length-of-a-string-2h8l</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PVcBtYGp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06tfwqtkcxfxd0kuqmee.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PVcBtYGp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06tfwqtkcxfxd0kuqmee.gif" alt="red-puppy" width="480" height="480"&gt;&lt;/a&gt;&lt;br&gt;
Many times we have to look at how many characters there are in a string. Sometimes we even need to find the position of a character or a set of characters in a particular string in a column.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BVcDb0Sz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isa66rjq0sym1ekmirfz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BVcDb0Sz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isa66rjq0sym1ekmirfz.png" alt="spread-1" width="880" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this episode, we will look at how we can accomplish this very exercise.&lt;/p&gt;

&lt;p&gt;In SMSS, for this example we will be using the &lt;strong&gt;Person.EmailAddress&lt;/strong&gt; table. We will start by writing a SQL statement to &lt;strong&gt;SELECT&lt;/strong&gt; everything from this table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bEEnu-YM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdpva4fnapab6xc9ig4c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bEEnu-YM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdpva4fnapab6xc9ig4c.gif" alt="skid-1" width="600" height="50"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We do this to get familiar with the columns and what data exist inside of them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wt1T-oGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puz7nb8i1t75hrqwfco5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wt1T-oGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puz7nb8i1t75hrqwfco5.gif" alt="select-person-emailaddress-table" width="600" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be using the &lt;strong&gt;EmailAddress&lt;/strong&gt; column in our SQL statement. The first thing we want to do is &lt;em&gt;count&lt;/em&gt; the number of characters in the &lt;strong&gt;EmailAddress&lt;/strong&gt; column for each row. To accomplish this we need to modify our SQL statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p7SMdCBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eokp2orfw4ldwp3mvj8j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p7SMdCBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eokp2orfw4ldwp3mvj8j.png" alt="spread-2" width="880" height="73"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#len"&gt;
  &lt;/a&gt;
  LEN
&lt;/h4&gt;

&lt;p&gt;We will first be replacing the * with &lt;strong&gt;EmailAddress&lt;/strong&gt;, this is to see which email address we are working with. We calculate the &lt;strong&gt;length&lt;/strong&gt; or the number of characters by using the &lt;strong&gt;LEN&lt;/strong&gt; function. &lt;strong&gt;LEN&lt;/strong&gt; measures the length of a column.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d0jnvLzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36r8g0zzsbdp6vd8i94r.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d0jnvLzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36r8g0zzsbdp6vd8i94r.gif" alt="skid-2" width="879" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets see this in practice in SMSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc4fHZmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trlz6ufv288vtuk8ro0f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc4fHZmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trlz6ufv288vtuk8ro0f.gif" alt="select-len-statement" width="600" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This sort of function comes in handy, when we need to determine if there are any empty columns, or to extract a certain number of characters from a column. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p7SMdCBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eokp2orfw4ldwp3mvj8j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p7SMdCBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eokp2orfw4ldwp3mvj8j.png" alt="spread-2" width="880" height="73"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#charindex"&gt;
  &lt;/a&gt;
  CHARINDEX
&lt;/h4&gt;

&lt;p&gt;Next we are going to use a another function called &lt;strong&gt;CharIndex&lt;/strong&gt;. The &lt;strong&gt;CharIndex&lt;/strong&gt; function allows you to find the &lt;em&gt;position/index&lt;/em&gt; of a given character or a set of characters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---giwiqgC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwqk9kcdgh2bbukbxqlm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---giwiqgC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwqk9kcdgh2bbukbxqlm.gif" alt="skid-3" width="879" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;CharIndex&lt;/strong&gt; function takes two parameters or arguments, the &lt;u&gt;first argument&lt;/u&gt; is the character or set of characters you hope to find; this is written inbetween quotation marks, since it will most likely be a string. The &lt;u&gt;second argument&lt;/u&gt; is the &lt;strong&gt;column-name&lt;/strong&gt; where you want to look for this value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CharIndex(firstArg, secondArg)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bEEnu-YM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdpva4fnapab6xc9ig4c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bEEnu-YM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdpva4fnapab6xc9ig4c.gif" alt="skid-1" width="600" height="50"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember, to enclose the value of the first argument in single quotation marks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To make it easier to identify we give the &lt;strong&gt;CharIndex&lt;/strong&gt; query an &lt;strong&gt;Alias&lt;/strong&gt;. In this example we will call it &lt;code&gt;@ Position&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---W9V3lAs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnrqjguumy88kngqnkhj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---W9V3lAs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnrqjguumy88kngqnkhj.gif" alt="find the position of a character" width="600" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There you have it, two new functions you can use to find the &lt;strong&gt;LEN&lt;/strong&gt;gth of a set of characters in a column and &lt;strong&gt;CharIndex&lt;/strong&gt; to find the &lt;u&gt;position&lt;/u&gt; or &lt;u&gt;index&lt;/u&gt; of a particular character or set of characters in a particular column.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BVcDb0Sz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isa66rjq0sym1ekmirfz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BVcDb0Sz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isa66rjq0sym1ekmirfz.png" alt="spread-1" width="880" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;😯 Now you have more tools added to your toolbelt 😯, don't forget to play around with them and think of some scenario's where they might be useful.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this episode and get excited about learning SQL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ScRzpetI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1n8ino79s1tme4x16l9h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ScRzpetI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1n8ino79s1tme4x16l9h.gif" alt="yoga" width="640" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>sql</category>
      <category>database</category>
      <category>programming</category>
    </item>
    <item>
      <title>How HTML attributes and CSS properties use name/value pairs.</title>
      <author>Jay Prakash</author>
      <pubDate>Sat, 18 Dec 2021 06:34:39 +0000</pubDate>
      <link>https://dev.to/jaysingh9518/how-html-attributes-and-css-properties-use-namevalue-pairs-40pj</link>
      <guid>https://dev.to/jaysingh9518/how-html-attributes-and-css-properties-use-namevalue-pairs-40pj</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nHnXlqKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vltnn6eiryr5lc6st4cq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nHnXlqKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vltnn6eiryr5lc6st4cq.jpg" alt="Image description" width="880" height="705"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>12 Types of Advanced CSS Selectors!! | (Part-1)</title>
      <author>Preethi</author>
      <pubDate>Sat, 18 Dec 2021 06:28:22 +0000</pubDate>
      <link>https://dev.to/preethi_dev/12-types-of-advanced-css-selectors-part-1-5b3d</link>
      <guid>https://dev.to/preethi_dev/12-types-of-advanced-css-selectors-part-1-5b3d</guid>
      <description>&lt;p&gt;Hey Gang, Really glad to see your Curiosity about learning of advanced concept. So, I'm care to save your time and get this show on the road🎉.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don't worry, Today i&lt;b&gt; didn't explain about common CSS selectors like &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;Element&lt;/code&gt;.&lt;/b&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Start to exploring about&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt;&lt;/code&gt; Descendant children &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;+&lt;/code&gt; Adjacent sibling&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;~&lt;/code&gt; General Sibling&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;*&lt;/code&gt; Universal(&lt;em&gt;UnKnown behaviour&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;7 Different type of Attribute Selector&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[attr]&lt;/li&gt;
&lt;li&gt;[attr=value]&lt;/li&gt;
&lt;li&gt;[attr~=value]&lt;/li&gt;
&lt;li&gt;[attr|=value]&lt;/li&gt;
&lt;li&gt;[attr^=value]&lt;/li&gt;
&lt;li&gt;[attr$=value]&lt;/li&gt;
&lt;li&gt;[attr*=value]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seems a little bit weird😅. Uh, it's not much complex like you think about that. I'm here to make it easier for you😉. So, let's get started.&lt;/p&gt;

&lt;h2&gt;
&lt;code&gt;&amp;gt;&lt;/code&gt; Descendant children Selector&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&amp;gt; DIRECT CHILDREN&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I am the direct child of parent😁&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Oh no😣, I can't be the direct child of parent.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent-container&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff8847&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above HTML template, there is a two &lt;code&gt;p&lt;/code&gt;tag right. But, The 1st &lt;code&gt;p&lt;/code&gt; tag will be the direct child. unfortunately, 2nd &lt;code&gt;p&lt;/code&gt; tag will not be direct child. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Can you guess why??&lt;/b&gt; Hm, May be 2nd &lt;code&gt;p&lt;/code&gt; tag under child-container which is not directly under &lt;code&gt;.parent-container&lt;/code&gt;...&lt;/p&gt;

&lt;p&gt;But, That's the right answer🎉. 2nd &lt;code&gt;p&lt;/code&gt; tag is not directly under &lt;code&gt;.parent-container&lt;/code&gt; which is under &lt;code&gt;.child-container&lt;/code&gt;. If you feel not well, Just play around in codepen get clear with concept.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/preethi-dev/embed/YzrVYNL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Guess the difference below👇🏻👇🏻.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent-container&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff8847&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.parent-container&lt;/span&gt;  &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff8847&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you guessed, That's stunning. If can't, Not a big problem and we will sort it out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent-container&lt;/span&gt;  &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff8847&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above one will select all the &lt;code&gt;p&lt;/code&gt; tag inside the .parent-container, which doesn't care about the &lt;code&gt;p&lt;/code&gt; tag is direct child or indirect child. Just apply the styles if it's under the &lt;code&gt;.parent-container&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
&lt;code&gt;+&lt;/code&gt; Adjacent sibling&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The adjacent sibling combinator (&lt;code&gt;+&lt;/code&gt;) separates two selectors and &lt;b&gt;matches the second element only if it immediately follows the first element&lt;/b&gt;, and both are children of the same parent element.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;No one before me😭&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;hurray one before me🥰&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;hurray one before me🥰&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/*General sibling*/&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;lightgreen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lBckI0Ie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfps3ml9j76pk6nelcth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lBckI0Ie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfps3ml9j76pk6nelcth.png" alt="Image description" width="880" height="289"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Above Definition is the best one to define adjacent sibling. If you feel need some practice. Why wait, go ahead and practice in codepen below through tiny piece example.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/preethi-dev/embed/KKXmQyv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
&lt;code&gt;~&lt;/code&gt; General Sibling&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The general sibling combinator (~) separates two selectors and matches all iterations of the second element, that are following the first element (though not necessarily immediately), and are children of the same parent element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Seems little bit confusing. Don't worry, it's not a big deal. I will explain it through example below. Then, again read the above definition and i am sure you can understand what it means.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"panda"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Panda here🐼&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cat"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;No one before like me😾&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"panda"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;One before like me🐼&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"rat"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;no one before like me🐀&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"panda"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;one before like me🐼&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.panda&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.panda&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;lightgreen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above HTML Template, we use &lt;code&gt;~&lt;/code&gt; general sibling in &lt;code&gt;.panda&lt;/code&gt; class. Unlike adjusent sibling, The general sibling combinator (&lt;code&gt;~&lt;/code&gt;) separates two selectors and &lt;b&gt;matches the second element(&lt;code&gt;.panda&lt;/code&gt;), if it follows similar element(&lt;code&gt;.panda&lt;/code&gt;) before that (it's not necessary immediately before the element)&lt;/b&gt;, and both are children of the same parent element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--760DBH4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d485zkcy6zu45pogw876.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--760DBH4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d485zkcy6zu45pogw876.png" alt="Image description" width="880" height="319"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you feel need practice, feel relax and see below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/preethi-dev/embed/LYzydVE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
&lt;code&gt;*&lt;/code&gt; Universal(&lt;em&gt;UnKnown behaviour&lt;/em&gt;)&lt;/h2&gt;

&lt;p&gt;The CSS universal selector (&lt;code&gt;*&lt;/code&gt;) matches elements of any type.&lt;/p&gt;

&lt;p&gt;For instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nc"&gt;.success&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is exactly same as,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.success&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In CSS world, Both are same which both guys are doing the same job.&lt;br&gt;
&lt;b&gt;(The asterisk is optional with simple selectors)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Hey still travel with me, Really your accountability is unbelievable😍. So, I wish to give a special info for you😉.&lt;/p&gt;

&lt;h3&gt;UnKnown Behaviour&lt;/h3&gt;

&lt;p&gt;You have probably already seen&lt;code&gt;*&lt;/code&gt; are used for resetting things like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;*&lt;/code&gt; selects EVERYTHING. Every single thing&lt;br&gt;
&lt;b&gt;(except ::before and ::after...)&lt;/b&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Above note is surprising right. Which means you can't apply those resetting things in &lt;code&gt;::before&lt;/code&gt; content and &lt;code&gt;::after&lt;/code&gt; content. Hey why get frowned up for this behavior. Chill, There is a solution for every problem. Trust me and see below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I already promised you, I will explain 12 different types of advanced CSS selectors. still, I explained the 5 selectors. I can understand your feeling If I continue this blog which makes you feel overwhelmed. So, Hope I do not leave you with an empty hand and we will continue remaining selectors in &lt;b&gt;part-2&lt;/b&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you loved this blog, Then give a endearing heart💝 which really lot to me. I love the discussion with you, If you feel not good at styling concept or any doubts.&lt;/p&gt;

&lt;p&gt;Thanks for Reading!!&lt;br&gt;
&lt;b&gt;Preethi&lt;/b&gt;&lt;br&gt;
&lt;em&gt;- Make your CSS life easier&lt;/em&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>html</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Path aliases in Nextjs</title>
      <author>Alexander Kim</author>
      <pubDate>Sat, 18 Dec 2021 05:31:45 +0000</pubDate>
      <link>https://dev.to/avxkim/path-aliases-in-nextjs-4pio</link>
      <guid>https://dev.to/avxkim/path-aliases-in-nextjs-4pio</guid>
      <description>&lt;p&gt;Tired of writing such imports?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../../components/Test.tsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're using a typescript, you can create a path alias instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"baseUrl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"paths"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"@/*"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"./*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can import more conveniently:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/Test.tsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Don't forget to restart your running task to affect changes.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Deploy your Deep Learning model with Flask, on AWS EC2 Instance</title>
      <author>Dishant</author>
      <pubDate>Sat, 18 Dec 2021 05:08:45 +0000</pubDate>
      <link>https://dev.to/dishant2001/deploy-your-deep-learning-model-with-flask-on-aws-ec2-instance-5h34</link>
      <guid>https://dev.to/dishant2001/deploy-your-deep-learning-model-with-flask-on-aws-ec2-instance-5h34</guid>
      <description>&lt;p&gt;Amazon Elastic Compute Cloud (Amazon EC2) is a web service that provides secure, resizable compute capacity in the cloud. It is designed to make web-scale cloud computing easier for developers. AWS Free Tier provides 750 hours per month of Linux, RHEL, SLES t2.micro or t3.micro instances and 750 hours per month of Windows t2.micro or t3.micro instances. &lt;/p&gt;

&lt;p&gt;Any individual can Sign Up and use these services for free for 12 months. Your services will be activated after 24 hours of signing up.&lt;/p&gt;

&lt;p&gt;In this blog, I have demonstrated deployment of trained deep learning models with your Flask app, on AWS EC2 instances. &lt;/p&gt;

&lt;p&gt;I deployed a trained TensorFlow Deep Learning Flask API step by step, from scratch, along with setting up all the necessary resources and packages. &lt;/p&gt;

&lt;p&gt;The model is based on Transformer Neural Networks and was trained in Google Colab’s GPU runtime.&lt;/p&gt;

&lt;p&gt;So let’s get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-setting-up-your-aws-ec2-instance"&gt;
  &lt;/a&gt;
  Step 1: Setting Up your AWS EC2 instance
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--34gYJLs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/krjc4kwr1yrco25e8ml0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--34gYJLs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/krjc4kwr1yrco25e8ml0.png" alt="Image description" width="866" height="643"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the services dropdown, click “Compute”. This opens another right panel, as shown in the above pic. Click on the EC2 option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3mJCtTQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6h1o7s4ihy8qumgqjtnk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3mJCtTQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6h1o7s4ihy8qumgqjtnk.png" alt="Image description" width="880" height="296"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will see all your ec2 type instances running. Click “Launch Instances” to launch a new instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mSUu_6ug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ayhnzd1yz10bbo72kg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mSUu_6ug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ayhnzd1yz10bbo72kg.png" alt="Image description" width="880" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose your Ubuntu machine, here I have chosen Ubuntu Server 20.04 LTS, SSD Volume Type ,64-bit (x86).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D3ox_R2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h31pxww8e6pz9vvsqmws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D3ox_R2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h31pxww8e6pz9vvsqmws.png" alt="Image description" width="880" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose your instance type as t2.micro. Obviously, this is the only choice available for Free Tier. We’ll be modifying the memory partitions according to us, and increasing the internal storage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ey59baqK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2tx98mg15955y8h2rmy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ey59baqK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2tx98mg15955y8h2rmy.png" alt="Image description" width="880" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“Review and Launch” the instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AnfEJVoZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kohpxbny9zzcafwnuk5r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AnfEJVoZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kohpxbny9zzcafwnuk5r.png" alt="Image description" width="820" height="541"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“Create a new key pair” to connect to your instance securely and remotely with SSH protocol. Name it and download it to the same folder with your Flask app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fpSi8_12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8loh9wix04lnqj5r4kd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fpSi8_12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8loh9wix04lnqj5r4kd9.png" alt="Image description" width="818" height="656"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You’ll see your instance up and running. You can rename it as you want. I renamed it as “test_deploy”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lHodVPuR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6oaavdcv370wkl8tw2bm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lHodVPuR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6oaavdcv370wkl8tw2bm.png" alt="Image description" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we’ll be creating a security group for our instance.&lt;/p&gt;

&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. Here, in the instances, scroll right and you will see the current default security groups for your instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NKhsI4Mt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuuzr99i4snoikggeqcw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NKhsI4Mt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuuzr99i4snoikggeqcw.png" alt="Image description" width="880" height="235"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to the Security Groups from the left panel, you see all the currently available Security Groups. &lt;/p&gt;

&lt;p&gt;“Create security group”. Give it a name, a description and click on “Add rule” to add your inbound rule.&lt;/p&gt;

&lt;p&gt;In my instance, I have set the type to “All Traffic” to allow access to all the available ports, and Source to “Anywhere with IPv4” which sets the Classless IP as 0.0.0.0/0 to allow any address. You can set these according to your requirements and what ports you want to expose.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tpDzPd5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w817uro9ygpnzxx9p93d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tpDzPd5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w817uro9ygpnzxx9p93d.png" alt="Image description" width="880" height="379"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Going back to the instances, &lt;br&gt;
right-click on your instance → Security → Change Security Groups.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s-hhydJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i38p3vxukmj0o7gd78nq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-hhydJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i38p3vxukmj0o7gd78nq.png" alt="Image description" width="880" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the search bar, you would see your created security group. Click on your security group, click on “Add Security Group”, and finally click “Save”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5CUgcL2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2q20lveskvk4nzy4qcy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5CUgcL2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2q20lveskvk4nzy4qcy.png" alt="Image description" width="880" height="518"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, going back to the Instances, you will see your security group applied to your instance.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-installing-necessary-software-for-ssh-remote-connection"&gt;
  &lt;/a&gt;
  Step 2: Installing necessary software for SSH remote connection
&lt;/h2&gt;

&lt;p&gt;We’ll not be typing each command in the terminal, instead we will be using light software like PuTTY, PuTTYgen (for PEM to PPK conversion), and WinSCP to establish SSH (Secure Shell) remote control.&lt;/p&gt;

&lt;p&gt;Download Links: &lt;br&gt;
PuTTYgen: &lt;a href="https://the.earth.li/%7Esgtatham/putty/0.76/w64/puttygen.exe"&gt;https://the.earth.li/~sgtatham/putty/0.76/w64/puttygen.exe&lt;/a&gt;&lt;br&gt;
PuTTY: &lt;a href="https://the.earth.li/%7Esgtatham/putty/0.76/w64/putty.exe"&gt;https://the.earth.li/~sgtatham/putty/0.76/w64/putty.exe&lt;/a&gt;&lt;br&gt;
WinSCP: &lt;a href="https://winscp.net/download/WinSCP-5.19.5-Setup.exe"&gt;https://winscp.net/download/WinSCP-5.19.5-Setup.exe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Start the puttygen.exe and load the .pem file from your directory. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pso81NjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzpqrjxxthj5nbl2vddd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pso81NjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzpqrjxxthj5nbl2vddd.png" alt="Image description" width="738" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E_P7lzvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cotmnnb8tt1coylprs67.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E_P7lzvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cotmnnb8tt1coylprs67.png" alt="Image description" width="666" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Provide the generated .ppk (putty private key) file with a name and save it in the same directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a5My4BEK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7y0agdbjgwiueu3i5wz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a5My4BEK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7y0agdbjgwiueu3i5wz.png" alt="Image description" width="711" height="331"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, start WinSCP to establish SSH remote control.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Vk0Dwf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysww6tob2izwec5t6y90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Vk0Dwf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysww6tob2izwec5t6y90.png" alt="Image description" width="646" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the Public IP address for your instance and paste it in the “Host Name” field. Click the “Advanced” option, select Authentication beneath SSH and load the previously generated .ppk file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9OW7mjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlpbiafoj3piph635e7j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9OW7mjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlpbiafoj3piph635e7j.png" alt="Image description" width="880" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xddAvrkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3htm6p3nebx9xqjim09o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xddAvrkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3htm6p3nebx9xqjim09o.png" alt="Image description" width="880" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter User Name as “ubuntu”, click save, and then click login.&lt;/p&gt;

&lt;p&gt;Congo!! Now you have successfully remote controlled your AWS EC2 instance. &lt;/p&gt;

&lt;p&gt;The left panel now shows your local directory, and the right panel shows the ubuntu remote directory. &lt;br&gt;
Transfer your program files just by dragging and dropping them into the right panel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yipotLbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlc4m76lgemm5fx7csnz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yipotLbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlc4m76lgemm5fx7csnz.png" alt="Image description" width="880" height="565"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, it’s time to start the remote machine’s terminal. Start putty.exe.&lt;br&gt;
Paste your instance public IP in the “Host Name” field.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FlJqZAvu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imx4qafsqksapnaslp2f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FlJqZAvu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imx4qafsqksapnaslp2f.png" alt="Image description" width="509" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to SSH → Auth in the left panel, and load the .ppk file again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BV1TFLJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4s0yayhjgfd9m5hp9ek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BV1TFLJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4s0yayhjgfd9m5hp9ek.png" alt="Image description" width="500" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the “Session” option in the left panel to come back, enter a name for your session and click “Save”.&lt;br&gt;
I entered the name as “test_deploy”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpNaQmB0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3554jl7vzgachn2colxz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpNaQmB0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3554jl7vzgachn2colxz.png" alt="Image description" width="496" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Double-click the name or click “Open” to start the terminal.&lt;br&gt;
Login as “ubuntu”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WSx0MRhD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ft2nqyxmh4ticav56ph1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WSx0MRhD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ft2nqyxmh4ticav56ph1.png" alt="Image description" width="680" height="431"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-3-terminal"&gt;
  &lt;/a&gt;
  Step 3: Terminal
&lt;/h2&gt;

&lt;p&gt;To view the files, and directories present in the root directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7fykVpak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pb6ih8ycyfnjpypupx4c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7fykVpak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pb6ih8ycyfnjpypupx4c.png" alt="Image description" width="677" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are no dependencies already installed in the instance. Hence, we’ll be getting all the necessary updates followed by installation of python3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install python3-pip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A prompt asks for “Do you want to continue? (Y/n)”, press ‘y’ and continue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o88KeLQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6x1wcckw85gch8v2r7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o88KeLQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6x1wcckw85gch8v2r7c.png" alt="Image description" width="666" height="110"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had prepared a requirements.txt file with all the dependencies and packages my application required. &lt;br&gt;
To install those, simply run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo pip3 install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the installation of various libraries, we might not be left with enough space, needed for those heavy deep-learning models, or any other files. &lt;br&gt;
We go back to our AWS Management Console,&lt;br&gt;
 click checkbox near your instance → Storage tab → Click on volume id&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I15H8dNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yeplp3sbkcfw01wl4r2a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I15H8dNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yeplp3sbkcfw01wl4r2a.png" alt="Image description" width="880" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right click on volume → Modify Volume&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mvpPn9Zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm1w85cg53ck586k7qp2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mvpPn9Zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm1w85cg53ck586k7qp2.png" alt="Image description" width="880" height="379"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Change the volume as per your requirements. Here, I changed it to 20GB, maximum being 30GB. &lt;br&gt;
Click “Modify”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nbLCFTG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppl71u3j4x5tks0rlr0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nbLCFTG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppl71u3j4x5tks0rlr0d.png" alt="Image description" width="880" height="597"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! &lt;br&gt;
But wait, the partition hasn’t been extended. Let’s get back to the terminal…&lt;/p&gt;

&lt;p&gt;To check whether the volume has a partition that must be extended, use the lsblk command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lsblk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qeuaGTEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/308v62ojrxp8fwdgwglz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qeuaGTEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/308v62ojrxp8fwdgwglz.png" alt="Image description" width="680" height="165"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, notice that dsk space is 20GB but our instance is still utilizing the 8GB partition.&lt;br&gt;
Check Space usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df -h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_4z2VdAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56u68dp0y3wwn7z4vgan.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_4z2VdAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56u68dp0y3wwn7z4vgan.png" alt="Image description" width="666" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To extend the partition  :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo growpart /dev/xvda 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check again using lsblk&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jOgsBBDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap5hbea29agpa2fcv9sb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jOgsBBDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap5hbea29agpa2fcv9sb.png" alt="Image description" width="673" height="215"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the memory storage has been increased successfully!&lt;/p&gt;

&lt;p&gt;I had to install Tensorflow, but the “grpcio” package was causing some issues during Tensorflow's installation, so I installed “grpcio” independently.&lt;/p&gt;

&lt;p&gt;First update pip3:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo pip3 install -U pip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Installing grpcio==1.36.1&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo pip3 install grpcio==1.36.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--77imMfcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2pee0s670zg44c7rn82.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--77imMfcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2pee0s670zg44c7rn82.png" alt="Image description" width="683" height="161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now installing Tensorflow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo pip3 install tensorflow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2J-mrPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2ncb84oigk7114d7p12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2J-mrPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2ncb84oigk7114d7p12.png" alt="Image description" width="681" height="133"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ohh crap! Process killed!&lt;br&gt;
Possible reasons: might have to disable cache due to less space on the hard drive. Still?!!&lt;/p&gt;

&lt;p&gt;Thanks to StackOverflow! Execute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo pip3 install tensorflow --no-cache-dir
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4-running-the-flask-app"&gt;
  &lt;/a&gt;
  Step 4: Running the Flask App
&lt;/h2&gt;

&lt;p&gt;In your app, modify the app.run() as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if __name__=="__main__":
    app.run(host='0.0.0.0', port=80)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, host=’0.0.0.0’ means, any address would work, no such specification. &lt;br&gt;
And, port=80 (HTTP), anything works, 22 (SSH), 443 (HTTPS)...&lt;br&gt;
Remember how we modified the Inbound Rules for “All Traffic” while creating a security group. This is how it works!&lt;/p&gt;

&lt;p&gt;Run your app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo python3 app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you have your Standalone server running your API&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--udyMeI6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ehnp41tzsx3qcqidwp0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--udyMeI6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ehnp41tzsx3qcqidwp0.png" alt="Image description" width="681" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visit the Instance IP appended with the port number:&lt;br&gt;
Eg: 3.134.92.137:80 &lt;br&gt;
My instance IP&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n6oLi0xQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzj9hu3y0uzhcdjto73g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n6oLi0xQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzj9hu3y0uzhcdjto73g.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-4-session"&gt;
  &lt;/a&gt;
  Step 4: Session
&lt;/h2&gt;

&lt;p&gt;Now, we’ll implement terminal multiplexing, in simple words, to keep the current session running even after we close our terminal.&lt;/p&gt;

&lt;p&gt;Stop your currently running app: Ctrl+C&lt;br&gt;
Again, execute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux
sudo python3 app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wqdp2Riq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n53k5cxxgacp1jkehz1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wqdp2Riq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n53k5cxxgacp1jkehz1u.png" alt="Image description" width="683" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All done! Close your terminal, let your PC rest, and still flex your deployed Flask API from any device, any location.&lt;/p&gt;

&lt;p&gt;Remember this is a development server for testing/demonstration, and not a production deployment. You can use gunicorn for the same. Gunicorn is a Python WSGI HTTP server that many developers use to deploy their Python applications. This WSGI (Web Server Gateway Interface) is necessary because traditional web servers do not understand how to run Python applications.&lt;/p&gt;

&lt;p&gt;To end the terminal multiplexing, come back to your saved machine, using PuTTY.&lt;br&gt;
Run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux attach
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once inside the session:&lt;br&gt;
Stop the app and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux detach
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Terminal multiplexing has ended. Now you will not be able to run your app after closing the current session.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Kudos!! A Deep Learning Flask API deployed on your AWS EC2 instance!&lt;/em&gt;&lt;br&gt;
&lt;em&gt;That’s all for this lengthy blog.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;I hope you found this insightful!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Inputs, thoughts, improvements, suggestions are most welcomed!&lt;/em&gt;&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
Cover Image: &lt;a href="https://www.google.co.in/url?sa=i&amp;amp;url=https%3A%2F%2Fwww.brainvire.com%2Famazon-web-service%2F&amp;amp;psig=AOvVaw2xnyUGPMUMrb_mWlSXQzn5&amp;amp;ust=1639846510264000&amp;amp;source=images&amp;amp;cd=vfe&amp;amp;ved=0CAsQjRxqFwoTCICUsamm6_QCFQAAAAAdAAAAABAV"&gt;https://www.google.co.in/url?sa=i&amp;amp;url=https%3A%2F%2Fwww.brainvire.com%2Famazon-web-service%2F&amp;amp;psig=AOvVaw2xnyUGPMUMrb_mWlSXQzn5&amp;amp;ust=1639846510264000&amp;amp;source=images&amp;amp;cd=vfe&amp;amp;ved=0CAsQjRxqFwoTCICUsamm6_QCFQAAAAAdAAAAABAV&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>tutorial</category>
      <category>python</category>
      <category>deeplearning</category>
    </item>
    <item>
      <title>Download spotify music for no cost!</title>
      <author>C Vamshi Krishna</author>
      <pubDate>Sat, 18 Dec 2021 04:44:33 +0000</pubDate>
      <link>https://dev.to/insaiyancvk/download-spotify-music-for-no-cost-24aj</link>
      <guid>https://dev.to/insaiyancvk/download-spotify-music-for-no-cost-24aj</guid>
      <description>&lt;p&gt;Hey there!&lt;br&gt;
Check out this little project I worked on that you might find useful :)&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Download single song&lt;/li&gt;
&lt;li&gt;Download Youtube Playlist&lt;/li&gt;
&lt;li&gt;Download Spotify playlist/album (searches on youtube and downloads the top result)&lt;/li&gt;
&lt;li&gt;Convert downloaded songs to mp3 or flac&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#the-final-result"&gt;
  &lt;/a&gt;
  The final result
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B4WOWONa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/insaiyancvk/pymusicdl/raw/main/assets/downloads.jfif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B4WOWONa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/insaiyancvk/pymusicdl/raw/main/assets/downloads.jfif" alt="https://open.spotify.com/playlist/4WtqLI6gaRFaWB4g6mDnAX" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the demo, installation guide on YouTube or &lt;a href="https://github.com/insaiyancvk/pymusicdl"&gt;GitHub&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1_BmOtZoo1o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>python</category>
      <category>opensource</category>
      <category>spotify</category>
    </item>
    <item>
      <title>id() in python</title>
      <author>Siddhesh Agarwal</author>
      <pubDate>Sat, 18 Dec 2021 04:28:59 +0000</pubDate>
      <link>https://dev.to/siddhesh_agarwal/id-in-python-27b5</link>
      <guid>https://dev.to/siddhesh_agarwal/id-in-python-27b5</guid>
      <description>&lt;p&gt;In this post, I will try to improve your idea about memory in python using the in-built &lt;code&gt;id()&lt;/code&gt; function. For those of you who don't know what &lt;code&gt;id()&lt;/code&gt; is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;id()&lt;/code&gt; function returns a unique ID of the object. All objects in python have a unique ID and no 2 different values correspond to the same ID.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So let us begin with a small example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Fun fact:&lt;/strong&gt; In python, &lt;code&gt;id(a) == id(b)&lt;/code&gt; is analogous to &lt;code&gt;a is b&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above code prints &lt;code&gt;True&lt;/code&gt; because python creates the variable &lt;code&gt;b&lt;/code&gt; with the value &lt;code&gt;500&lt;/code&gt; and then creates a variable &lt;code&gt;a&lt;/code&gt; pointing to the value of &lt;code&gt;b&lt;/code&gt;. This implies that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are pointing towards the same memory location and hence the same ID.&lt;/p&gt;




&lt;p&gt;Now let us raise the bar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code prints &lt;code&gt;False&lt;/code&gt; because: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python creates a variable &lt;code&gt;a&lt;/code&gt; pointing to the value &lt;code&gt;500&lt;/code&gt; in the memory. &lt;/li&gt;
&lt;li&gt;Then it creates another variable &lt;code&gt;b&lt;/code&gt; pointing to another value &lt;code&gt;500&lt;/code&gt; (yeah, both 500 are different).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hence, both have different IDs because both point towards different memory locations.&lt;/p&gt;




&lt;p&gt;I hope this isn't confusing because there is more to come. Guess the output for this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some of you may think &lt;em&gt;"This is the previous question with different values. I know the answer is &lt;code&gt;False&lt;/code&gt;"&lt;/em&gt; but not so fast.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xy2VjLtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/zYO7NF-U234AAAAC/er-not-so-fast-hold-up.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xy2VjLtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/zYO7NF-U234AAAAC/er-not-so-fast-hold-up.gif" alt="Not so fast" width="498" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For small integers (The CPython range is -5 to 256, both inclusive), then integer objects (&lt;code&gt;&amp;lt;class 'int'&amp;gt;&lt;/code&gt;) are shared. This is done entirely to save space. The memory imprint of the console would be significantly larger if these objects weren’t sharing their memory.&lt;/p&gt;

&lt;p&gt;So the correct answer is &lt;code&gt;True&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;Okay, okay. Just one more to go. The last one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="n"&gt;id1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="n"&gt;id2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;id2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, even though I am re-declaring the same variable with the same value, the answer is &lt;strong&gt;most likely&lt;/strong&gt; to be &lt;code&gt;False&lt;/code&gt;. I'll explain to you why. When you re-declare a variable in python, the interpreter works in the same way as a declaration. i.e. It entirely deletes the before existing value and creates a variable with the new value. So when we give &lt;code&gt;a = 500&lt;/code&gt;, the second time the interpreter deletes the previously existing value of &lt;code&gt;a&lt;/code&gt; and create a new memory location for &lt;code&gt;500&lt;/code&gt; where &lt;code&gt;a&lt;/code&gt;  would point towards. Both these IDs are most likely to be different.&lt;/p&gt;

&lt;p&gt;SO, the answer is &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If the above example had a number belonging to the inclusive range -5 to 256, the answer would have been &lt;code&gt;True&lt;/code&gt;. this is because number belonging to the inclusive range have a fixed memory location.&lt;/p&gt;

</description>
      <category>python</category>
      <category>memorymanagement</category>
    </item>
    <item>
      <title>Our entrepreneur virtual coworking space setup</title>
      <author>Wannabe Entrepreneur 🎙️</author>
      <pubDate>Sat, 18 Dec 2021 04:13:40 +0000</pubDate>
      <link>https://dev.to/wbepodcast/our-entrepreneur-virtual-coworking-space-setup-3508</link>
      <guid>https://dev.to/wbepodcast/our-entrepreneur-virtual-coworking-space-setup-3508</guid>
      <description>&lt;p&gt;A virtual coworking space for entrepreneurs is a place where indie makers from all over the world can work together on their projects while supporting each other and feeling like part of a team.&lt;/p&gt;

&lt;p&gt;I have been growing the &lt;a href="https://wannabe-entrepreneur.com/coworking/"&gt;WBE space&lt;/a&gt; for the past 5 months to a community that has 40 members now and here is the setup that best works for us:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Slack Channel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This channel is the center of communication and the place where most of the indie makers hang out.  I have tried out multiple channels but here are the ones that have the most engagement:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- what-i-am-doing-today:&lt;/strong&gt; Everyday members write down their daily goals and support each other with encouraging words or relevant tips. I am quite surprised with the fact that people not only share their business-related tasks but also more personal ones... Really cool!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- victories-and-frustrations:&lt;/strong&gt; We celebrate each other victories and give support when needed. This channel is not used on a daily basis by every member but it's still very popular&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- introductions:&lt;/strong&gt; This is a classic but a must for every community. I set up an automatic message that asks every new member to introduce themselves in the channel. It works as an ice breaker for the newbie and the members are very welcoming.&lt;/p&gt;

&lt;p&gt;We have a couple of other popular channels like the &lt;strong&gt;looking-for-advice,&lt;/strong&gt; &lt;strong&gt;feedback&lt;/strong&gt;, and &lt;strong&gt;today-I-learned&lt;/strong&gt; which are used multiple times a week.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Virtual Office Rooms&lt;/strong&gt;&lt;br&gt;
Using jitsi and the slack API I created two virtual rooms that are available 24/7:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Work Room:&lt;/strong&gt; Entrepreneurs turn on the camera and work together in their individual tasks. Is like being in an office. I also implemented a shared Pomodoro timer 🍅 , so normally we work for 30min, have a 5min chat, and restart&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Break Room:&lt;/strong&gt; Just a place to chill and drink a coffee or beer and chat about our projects and life in general. Once a month we also do a community event that gathers most of the members.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entrepreneurs Wiki&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I put it together using netlify cms and it works great! Is a place where members can document their favorite tools together with how they use them. I also use it to document all the community-only discounts that I have been able to get from SaaS founders.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt;&lt;br&gt;
A member pays 4 euros per month to be part of the space, I use &lt;a href="https://www.buymeacoffee.com/"&gt;buymeacoffee&lt;/a&gt; to manage the subscriptions. To be honest I haven't played much around the pricing but from what I gathered the members seem quite happy with it. One cool thing I noticed is that the paying members are much more active and engaged than the guests...&lt;/p&gt;

&lt;p&gt;And here is what I have learned so far and how our setup looks like. If you have a community I would love to hear about your setup and let me know if you have any questions.&lt;/p&gt;

&lt;p&gt;Cheers&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 5 Soft Skill for Software Developer</title>
      <author>Manthan Bhatt</author>
      <pubDate>Sat, 18 Dec 2021 04:07:22 +0000</pubDate>
      <link>https://dev.to/manthanbhatt/top-5-soft-skill-for-software-developer-3a55</link>
      <guid>https://dev.to/manthanbhatt/top-5-soft-skill-for-software-developer-3a55</guid>
      <description>&lt;p&gt;Soft skills are essential for software developers because they enable them to communicate and interact with other people in a meaningful and harmonious way. Besides being a good coder, every developer needs soft skills in their toolbox. These skills help developers to thrive in their professional as well as personal life.&lt;/p&gt;

&lt;p&gt;Here are the most useful soft skills for software developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#communication"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Communication&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It is the most important soft skill for developers for any professional. However, effective communication is a two-way road and you not only need to be a great speaker but also a good listener. In the IT industry, you need to listen to your colleagues, customers, or target users to learn about new things, expand your horizons, and rank tasks and requirements. When it comes to speaking, make sure you are clear and confident.&lt;/p&gt;

&lt;p&gt;Communication is a very useful weapon and one should use it judiciously. However, there are a few things to be kept in mind while communicating, for example, one should always come out to be polite while conversing and also never interrupt while somebody is talking. In a communication, the participants should be patient, focused, and confident.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#empathy"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Empathy&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;While you might spend a lot of your time writing code for machines, you are interacting with other people. “Putting your self in other person’s shoes” is a way to describe empathy in straightforward terms. Understanding other people, their belief systems, their mental and personal characteristics will benefit you. You will be able to adjust your behavior, to address their needs, and make sure that you are taking them into account. This is something that is often overlooked. But, the best developers will try and understand their customers or colleagues since it will enable them to do their job . Again, empathy is your advantage – it will allow you to see things with their eyes. It will make you more sensible and approachable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#critical-and-creative-thinking"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Critical and Creative Thinking&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The main job of a developer is to fix problems and work with different developers and designers. Development is all about solving complex problems that belong to various domains like the operating systems in your desktops and mobile phones to a bookkeeping software an accountant uses to making an automated vehicle. At the core, all these tasks include solving problems with different scopes and complexities. Hence, if you want to become a good developer, you will have to inculcate critical as well as creativity thinking. Critical thinking involves challenging yourself to solve complex problems and think creatively to find out different unorthodox approaches to a problem. As a developer, you stir your creative juices to devise techniques that solve complex issues. A developer’s ability to critically think and creatively implement and assess solutions will enable the developer to expand and build various applications and grow as a problem-solver.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#confidence"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Confidence&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Building confidence on solid foundation takes time. It’s often connected with the number of years of experience you have. Solving a similar problem for the fifth time should be easier and more familiar for you than solving it for the first time. It should give you a feeling of control and competence. Confidence grows when it’s fed with control and competence.&lt;/p&gt;

&lt;p&gt;We often see a lack of confidence with our junior developers and designers. They are unsure of how to proceed. They can get to the point where they are stuck, and you witness “analysis paralysis.” At that point, we take a step back. Building confidence also needs a nurturing environment. Someone willing to help, educate, and explain. People who are confident enough so they can be humble. See how it ties with humility.&lt;/p&gt;

&lt;p&gt;While it is okay to make mistakes, learn, and build your confidence over time, you need to show that you are capable of doing so. Few things are sadder (in the software development) than seeing smart people afraid of trying. People who start Googling and go to StackOverflow before they even consider the task at hand. Give it a try. Don’t start every job with “I don’t know how to solve this!” – Or, even worse – “This is not for me!“.&lt;/p&gt;

&lt;p&gt;You are engineers and problem-solvers. Try it before you quit. I had to let go of people who are not able to display the ability to try and solve their dev tasks. Make mistakes, who cares. But, be confident enough that you can find a solution or at least attack the problem from several angles.&lt;/p&gt;

&lt;p&gt;With time you will see that you are getting better at this. You will have more wins, and your confidence will grow. Now, be smart and don’t let it drive you to the point where you become unrealistic and vain. Remember, self-confidence needs humility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-and-people-management"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Time and People Management&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Software development is all about working in a team on a project in a stipulated time period. More often than not, software developers are involved with managing people as well as different types of projects. Hence, management is the most prominent soft skill for software developers.&lt;/p&gt;

&lt;p&gt;Time management is important because more often than not there are deadlines to meet and estimates to give and hence as a software developer, one must be conscious of the time spent on a particular project. People management is also essential because as mentioned in the blog earlier that software developers rarely work in an isolated environment.&lt;/p&gt;

&lt;p&gt;Time and people management are one of the key characteristics that a recruiter looks for a potential software developer candidate. A software developer from all experience levels is expected to work well in a team and meet their time estimates. Hence, if you are aiming to become a successful software developer in a good company, one skill that you need to inculcate is successful management of time and good coordination of people.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>challenge</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Public Solving: Matching smudged names</title>
      <author>Chris Bongers</author>
      <pubDate>Sat, 18 Dec 2021 03:29:06 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/public-solving-matching-smudged-names-189g</link>
      <guid>https://dev.to/dailydevtips1/public-solving-matching-smudged-names-189g</guid>
      <description>&lt;p&gt;Oh no, some packages fell off the sled, and the names are only partially readable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/devadvent/puzzle-7"&gt;You can find the puzzle here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's up to us to predict which name is on each smudged package.&lt;/p&gt;

&lt;p&gt;We receive a list of all the children's names and a list of gifts with smudged names.&lt;/p&gt;

&lt;p&gt;Let's get right into thinking out the solution to help Santa as soon as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinking-about-the-solution"&gt;
  &lt;/a&gt;
  Thinking about the solution
&lt;/h2&gt;

&lt;p&gt;My initial thought is, great, we can use the filter method to filter the list of names with whatever name roughly matches the smudged name.&lt;/p&gt;

&lt;p&gt;To do the rough matching, we can actually use Regex and not a super-advanced one, as you might think!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-the-smudged-names"&gt;
  &lt;/a&gt;
  Finding the smudged names
&lt;/h2&gt;

&lt;p&gt;Alright, let's get right into it.&lt;/p&gt;

&lt;p&gt;First of all, we need to import all the kids names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../data/names.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can return the array of names using the &lt;a href="https://daily-dev-tips.com/posts/javascript-filter-method/"&gt;JavaScript &lt;code&gt;filter&lt;/code&gt; method&lt;/a&gt; to find the good ones.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Todo&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then inside this, we need to define a regex to match a part of the string.&lt;/p&gt;

&lt;p&gt;Let's take a look at how the smudging looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Some examples:&lt;/span&gt;

&lt;span class="nx"&gt;Fr&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;der&lt;/span&gt;&lt;span class="err"&gt;##&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;
&lt;span class="nx"&gt;Jo&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;ann&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="nx"&gt;Patt&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For &lt;code&gt;Patt#&lt;/code&gt;, we should get two potential hits: &lt;code&gt;Patti&lt;/code&gt;, and &lt;code&gt;Patty&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The cool part about this assignment is that it states a smudge is always one letter. &lt;br&gt;
And Regex comes with a great tool, the dot (&lt;code&gt;.&lt;/code&gt;), which says: ". matches any character (except for line terminators)"&lt;/p&gt;

&lt;p&gt;So we can replace all &lt;code&gt;#&lt;/code&gt; with &lt;code&gt;.&lt;/code&gt; and we should get pretty far already.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;smudgedName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This uses the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"&gt;&lt;code&gt;RegExp&lt;/code&gt; function&lt;/a&gt;, where inside, we replace all hashtags with dots.&lt;br&gt;
Then we return only if the name matches this regular expression.&lt;/p&gt;

&lt;p&gt;And the results look very promising, but not perfect!&lt;/p&gt;

&lt;p&gt;Remember &lt;code&gt;Patt#&lt;/code&gt; it also matches: &lt;code&gt;Patterson&lt;/code&gt;, which surely can't be right as it's too many characters!&lt;/p&gt;

&lt;p&gt;We can simply fix this by adding a &lt;code&gt;$&lt;/code&gt; sign at the end of our regular expression.&lt;br&gt;
The &lt;code&gt;$&lt;/code&gt; stands for the end of the line.&lt;/p&gt;

&lt;p&gt;Making our complete function look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;smudgedName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;$`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's run the test and see what happens:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ujDmIHXq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638879949599/-qiGC7tav.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ujDmIHXq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638879949599/-qiGC7tav.png" alt="Test running and succeeding" width="636" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There we go. We fixed it.&lt;/p&gt;

&lt;p&gt;I would love to hear your approach for this solution or what you would change.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
  </channel>
</rss>
