<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Deploy to Azure Kubernetes (AKS) from Azure DevOps with Azure Pipelines</title>
      <author>Davide 'CoderDave' Benvegn√π</author>
      <pubDate>Mon, 02 Aug 2021 01:24:32 +0000</pubDate>
      <link>https://dev.to/n3wt0n/deploy-to-azure-kubernetes-aks-from-azure-devops-with-azure-pipelines-37b2</link>
      <guid>https://dev.to/n3wt0n/deploy-to-azure-kubernetes-aks-from-azure-devops-with-azure-pipelines-37b2</guid>
      <description>&lt;p&gt;Do you want to &lt;strong&gt;Deploy to Azure Kubernetes (AKS) from Azure DevOps&lt;/strong&gt;, but you don;t know where to start? This is for you! &lt;/p&gt;

&lt;p&gt;In this live streaming, part of the "&lt;em&gt;Build Live with Me&lt;/em&gt;" series, I'm going to deploy an application to Azure Kubernetes Service (AKS) via Azure DevOps using Azure Pipelines from scratch, live!&lt;/p&gt;

&lt;p&gt;You will learn how to set up the &lt;strong&gt;integration with AKS&lt;/strong&gt;, and how to &lt;strong&gt;deploy everything&lt;/strong&gt; to Kubernetes in Microsoft Azure using Azure Pipelines.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4Oa5HneTuKs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/4Oa5HneTuKs"&gt;Link to the video: https://youtu.be/4Oa5HneTuKs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you there!&lt;/p&gt;

&lt;p&gt;TIME FOR THE LIVE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tuesday, August 3rd, 9.30 pm HKT&lt;/li&gt;
&lt;li&gt;Tuesday, August 3rd, 7.00 pm IST&lt;/li&gt;
&lt;li&gt;Tuesday, August 3rd, 1.30 pm UTC&lt;/li&gt;
&lt;li&gt;Tuesday, August 3rd, 9.30 am ET&lt;/li&gt;
&lt;li&gt;Tuesday, August 3rd, 6.30 am PT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>azure</category>
      <category>azuredevops</category>
      <category>aks</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>Youtube Courses, Projects To Master Javascript</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sun, 01 Aug 2021 23:33:45 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/youtube-courses-projects-to-master-javascript-3lhc</link>
      <guid>https://dev.to/ayabouchiha/youtube-courses-projects-to-master-javascript-3lhc</guid>
      <description>&lt;p&gt;Hello,&lt;br&gt;
I'm &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;,&lt;br&gt;
on this beautiful &amp;amp; amazing day,&lt;br&gt;
I'm going to share with you Youtube courses &amp;amp; projects to study and master Javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-courses-youtube"&gt;
  &lt;/a&gt;
  Javascript Courses (Youtube)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2Ji-clqUYnA"&gt;Javascript Fundamentals&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=jS4aFq5-91M"&gt;JavaScript Programming - Full Course (8h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Qqx_wzMmFeA"&gt;Javascript Tutorial for Beginners (8h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=EfAl9bwzVZk"&gt;Javascript course by Dave Gray (8h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg"&gt;Learn JavaScript - Full Course for Beginners (3h 30min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk"&gt;JavaScript Tutorial for Beginners (1h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=t9dEgHpCNJE"&gt;Javascript course (4h 30min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=dOnAC2Rr-6A"&gt;Javascript Full Course for Beginners to Advanced (4h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=hdI2bqOjy3c"&gt;Javascript Crash Course by Traversy Media (1h 30min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2qDywOS7VAc"&gt;Javascript Course by Academind (5h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=o1IaduQICO0"&gt;Javascript course by Edureka (3h 30min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#javascript-projects-youtube"&gt;
  &lt;/a&gt;
  Javascript Projects (Youtube)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=hdI2bqOjy3c&amp;amp;list=PLillGF-RfqbbnEGy3ROiLWk7JMCuSyQtX"&gt;Vanilla Js projects (playlist: 53 videos)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc"&gt;Learn Javascript by building 7 games (2h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4"&gt;building 10 Javscript projects (10h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=j59qQ7YWLxw"&gt;building a calculator using Javascript (40min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4"&gt;building 15 projects using vanilla Javascript (8h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=90PgFUPIybY"&gt;Javascript Projects - Shopping Cart (4h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Ttf3CEsEwMQ"&gt;To do list by dev ed (1h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=QTHRWGn_sJw"&gt;Music player (45min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=wPElVpR1rwA"&gt;Weather App (40min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Mz9COyHPVwA"&gt;Age Calculator (25min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=x8EY0BlhPGk"&gt;Food Recipe (1h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=CVClHLwv-4I"&gt;Face detection (12min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Y-GkMjUZsmM"&gt;Tic Tac Toe by web dev simplified (40 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=VjjZ2MaX0Ts"&gt;Tic tac to game by clever programmer (4h 30min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=weZFfrjF-k4"&gt;Javascript clock (6min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To Contact Me:&lt;/p&gt;

&lt;p&gt;email: &lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy codding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Cross-site Request Forgery Attacks (CSRF): What a frontend developer should know</title>
      <author>Mariam Reba Alexander</author>
      <pubDate>Sun, 01 Aug 2021 21:46:51 +0000</pubDate>
      <link>https://dev.to/ms_74/cross-site-request-forgery-attacks-csrf-what-a-frontend-developer-should-know-l5b</link>
      <guid>https://dev.to/ms_74/cross-site-request-forgery-attacks-csrf-what-a-frontend-developer-should-know-l5b</guid>
      <description>&lt;p&gt;After discussing about Cross Site Scripting Attacks (XSS) in the previous posts, I am going to explain now about another type of attack &lt;strong&gt;Cross-site Request Forgery Attack&lt;/strong&gt; (CSRF or XSRF), sometimes pronounced as &lt;em&gt;"sea-surf"&lt;/em&gt;. It has number of other names such as Session Riding, Cross-Site Reference Forgery, Hostile Linking and One-click attack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#csrf-attack-how-it-happens"&gt;
  &lt;/a&gt;
  CSRF attack, how it happens
&lt;/h2&gt;

&lt;p&gt;CSRF is a more common vulnerability in websites, and the attack sometimes goes unnoticed by the victim. The after effects can be damaging as it happens within an authenticated session, and can perform user actions without the user's knowledge. For example, change password of user, one-click purchase on Amazon, post obscene content in the users social platform, transfer funds and so on.&lt;/p&gt;

&lt;p&gt;The attacker may send a link via email or chat and trick the users of a web application into executing actions of the attacker‚Äôs choosing. These attacks can get serious, if the user's account is an administrative account, as the entire web application and its accounts are compromised. &lt;/p&gt;

&lt;p&gt;There are many ways in which this attack can occur&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1tampering-with-get-request"&gt;
  &lt;/a&gt;
  1.Tampering with GET request
&lt;/h3&gt;

&lt;p&gt;Suppose a website uses &lt;code&gt;GET&lt;/code&gt; request to change the state of web server, transfer parameters or execute logical actions. The attacker can exploit this vulnerability, for example by tricking the victim to click a hyperlink into the vulnerable site that performs unexpected actions. &lt;code&gt;GET&lt;/code&gt; is particularly susceptible to CSRF attacks as it exposes the all the request contents in the URL.&lt;/p&gt;

&lt;p&gt;Most forms of hyperlink on the web correspond with &lt;code&gt;HTTP GET&lt;/code&gt; requests. A basic example is &lt;code&gt;&amp;lt;a href="https://example-site.com"&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt; embedded in an HTML snippet. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qcTXmDTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrnfazbxoueq3vhrr066.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qcTXmDTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrnfazbxoueq3vhrr066.png" alt="CSRF techniques"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Suppose a bank website uses a &lt;code&gt;GET&lt;/code&gt; request to transfer funds like below&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET http://bank.com/transfer.do?acct=ANNA&amp;amp;amount=100 HTTP/1.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;an attacker , let's call the person &lt;code&gt;Jack&lt;/code&gt; can tamper with the query strings and make a link or an image or a script, send it to the user via an unsolicited email with HTML content or by planting it on pages that are likely to be visited by the victim while they are doing online banking.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="http://bank.com/transfer.do?acct= JACK&amp;amp;amount=10000"&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src="http://bank.com/transfer.do?acct=JACK&amp;amp;amount=100000" width="0" height="0" border="0"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- Videos typically load into the DOM immediately, depending on the browser's
configuration. Some mobile browsers will not load until the element is interacted
with. --&amp;gt;
&amp;lt;video width="1280" height="720" controls&amp;gt;
  &amp;lt;source src="https://www.bank.com/transfer.do?
  acct=JACK&amp;amp;amount=100000" type="video/mp4"&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case of image tag, the user does not see anything or does not require any action from user to make the request, it will simply trigger as the page or email with HTML content is visited.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F9G5yC31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szq02of5y9v1llodjqe8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F9G5yC31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szq02of5y9v1llodjqe8.jpg" alt="CSRF attack process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A real case example of CSRF attack was when an older iteration of Twitter, had allowed to create tweets via a &lt;code&gt;GET&lt;/code&gt; requests. The hacker used this loophole to create a viral work on Twitter, wherein a malicious link when clicked, would post a tweet containing an obscene message with the same link in it. When readers clicked the link that the first victim tweeted, they too were tricked into tweeting the same tweet. Tens of thousands of Twitter users were tricked and luckily the development team closed the security hole before the situation got worse. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-using-post-request"&gt;
  &lt;/a&gt;
  2. Using POST request
&lt;/h3&gt;

&lt;p&gt;Well, if you thought that using &lt;code&gt;POST&lt;/code&gt; requests are safer, it's not the case. Its just that delivering an attack through &lt;code&gt;POST&lt;/code&gt; require some more work than using a link or image tag for &lt;code&gt;GET&lt;/code&gt; request.  &lt;/p&gt;

&lt;p&gt;The attack happens typically via a &lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;/form&amp;gt;&lt;/code&gt; object in HTML, as it is possible to trigger a POST request on submit action without a script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form action="https://www.xxx-bank.com/transfer" method="POST"&amp;gt;
  &amp;lt;input type="hidden" name="to_user" value="hacker"&amp;gt;
  &amp;lt;input type="hidden" name="amount" value="10000"&amp;gt;
  &amp;lt;input type="text" name="username" value="username"&amp;gt;
  &amp;lt;input type="password" name="password" value="password"&amp;gt;
  &amp;lt;input type="submit" value="Submit"&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above HTML form object you can see some hidden input fields, these are used to seed data into the form without the user seeing them. &lt;/p&gt;

&lt;p&gt;In this case, the user will see a login form to a legitimate website, and after entering the username and password, the user submits the form. Upon submitting, a POST request will be made along with the hidden data to the bank, and the funds gets transferred to the attacker. There was no actual logging  in, but a request was made using the user's existing session with the bank from another web page.&lt;/p&gt;

&lt;p&gt;The below script will make the form submit on page load without requiring any user action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body onload="document.forms[0].submit()"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see how the attacker took advantage of the user's current application state with the bank even if they were on a different website. This technique can also be used to make requests on behalf of a user who has access to an internal network. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-using-other-http-methods-put-delete"&gt;
  &lt;/a&gt;
  3. Using other HTTP methods - PUT, DELETE
&lt;/h3&gt;

&lt;p&gt;Suppose a bank uses PUT that takes a JSON block as an argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PUT http://xxx-bank.com/transfer.do HTTP/1.1
{ "acct":"BOB", "amount":100 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These requests are executed by a script in the malicious website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
function put() {
    var x = new XMLHttpRequest();
    x.open("PUT","http://bank.com/transfer.do",true);
    x.setRequestHeader("Content-Type", "application/json");
    x.send(JSON.stringify({"acct":"BOB", "amount":100})); 
}
&amp;lt;/script&amp;gt;

&amp;lt;body onload="put()"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most of the mitigation against CSRF happens on the server side, even then it is important for a frontend developer to know about them, so that when you identify a vulnerability, you can notify and take necessary actions with your backend team. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defense-1-follow-rest-principles"&gt;
  &lt;/a&gt;
  Defense #1 - Follow REST principles
&lt;/h2&gt;

&lt;p&gt;REST states that you should map website operations to the appropriate HTTP method according to their intention. You should fetch data or pages with GET requests, create new objects on the server (such as comments, uploads, or messages) with PUT requests, modify objects on the server with POST requests, and delete objects with DELETE requests. So &lt;strong&gt;Do not use &lt;code&gt;GET&lt;/code&gt;requests to change the state of the server&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;If you use it for any reason, they will require a CSRF token header (this a bad practice). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defense-2-anticsrf-tokens"&gt;
  &lt;/a&gt;
  Defense #2 - Anti-CSRF tokens
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Anti-CSRF&lt;/em&gt; tokens prevent CSRF attacks by requiring the existence of a secret, unique, and unpredictable token that is generated by the server-side application and transmitted to the client in such a way that it is included in a subsequent HTTP request made by the client. &lt;br&gt;
When the later request is made, the server-side application validates that the request includes the expected token and rejects the request if the token is missing or invalid.&lt;br&gt;
These tokens can be set for an entire user session, rotated on a regular basis, or be created uniquely for each request.&lt;/p&gt;

&lt;p&gt;The CSRF tokens can be implemented multiple ways, the common examples are &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-hidden-input-field"&gt;
  &lt;/a&gt;
  #1 Hidden input field
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="hidden" name="csrftoken" value="1df93e1eafa42012f9a8aff062eeb1db0380b"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the above approach, the token is transmitted from the server to the client within a hidden field of an HTML form. The token will then be included as a request parameter when the form is submitted using POST method.&lt;/p&gt;

&lt;p&gt;To prevent the attacker manipulate the HTML document to capture its contents, the field containing the CSRF token should be inserted before any visible input fields or any locations where user-controllable data is embedded within the HTML. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-custom-request-header"&gt;
  &lt;/a&gt;
  #2 Custom Request Header
&lt;/h3&gt;

&lt;p&gt;On an initial visit, the web application sets a cookie which is scoped appropriately so that it should not be provided during cross-origin requests. The cookie typically contains a random token which may remain the same for up to the life of the web session.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Server-side: set an anti-CSRF cookie that JavaScript must send as an X header, which can't be done cross-origin
Set-Cookie: CSRFTOKEN=1df93e1eafa42012f9a8aff062eeb1db0380b; Path=/; Secure; SameSite=Strict
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript operating on the client side reads its value and copies it into a custom HTTP header sent with each transactional request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Client-side, have JavaScript add it as an X header to the XMLHttpRequest
var token = readCookie(CSRFTOKEN);                   // read the cookie
httpRequest.setRequestHeader('X-CSRF-Token', token); // add it as an X-CSRF-Token header
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On request, with this header, the server then validates presence and integrity of the token. &lt;/p&gt;

&lt;p&gt;The use of a custom request header is particularly used for AJAX or API endpoints. This defence relies on the same-origin policy (SOP) restriction that only JavaScript can be used to add a custom header, and only within its origin. By default, browsers do not allow JavaScript to make cross origin requests with custom headers, thereby protecting from an attacker performing CSRF attack from another origin. &lt;/p&gt;

&lt;p&gt;Note: The protection provided by this technique can be thwarted if the target website disables its same-origin policy. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#storing-csrf-token"&gt;
  &lt;/a&gt;
  Storing CSRF token
&lt;/h3&gt;

&lt;p&gt;Make sure that the CSRF token is not exposed any ways, not in server logs, in URL or in GET requests. It can be in hidden input fields, in javascript variable or anywhere in DOM.  &lt;/p&gt;

&lt;p&gt;A CSRF token can be also included in the &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag as shown below. All subsequent calls in the page can extract the CSRF token from this  tag.&lt;br&gt;
However, &lt;strong&gt;it is not recommended to store it in cookies or browser local storage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The following code snippet can be used to include a CSRF token as a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;meta name="csrf-token" content="{{ csrf_token() }}"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The exact syntax of populating the content attribute would depend on your web application's backend programming language.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#defence-3-using-samesite-cookie-attribute"&gt;
  &lt;/a&gt;
  Defence #3 - Using SameSite Cookie Attribute
&lt;/h2&gt;

&lt;p&gt;By default, a browser automatically adds the last known cookies to requests regardless of where they originate. If an attacker steals the security token from your HTML forms, and installs it in their own malicious forms, they can launch a CSRF attack, with any security cookies the server previously set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Set-Cookie: JSESSIONID=xxxxx; SameSite=Strict
Set-Cookie: JSESSIONID=xxxxx; SameSite=Lax
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The SameSite attribute can be used to control whether and how cookies are submitted in cross-site requests. Specifying a SameSite attribute &lt;code&gt;strict&lt;/code&gt;, when you set a cookie tells the browser to strip cookies on a request to your site when the request is coming from an external domain.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Strict&lt;/code&gt; value will prevent the cookie from being sent by the browser to the target site in all cross-site browsing context, even when following a regular link. Just imagine if you have login each time in Facebook when you return from seeing a video someone shared. The default &lt;code&gt;Lax&lt;/code&gt; value provides a reasonable balance between security and usability for websites that want to maintain user's logged-in session after the user arrives from an external link as it allows only GET requests from other sites to send cookies.&lt;/p&gt;

&lt;p&gt;As of now Chrome and other modern browsers has Same-site attribute set by default (Cookies without SameSite are treated as Lax by default, SameSite=None cookies without Secure are rejected.) &lt;a href="https://web.dev/samesite-cookies-explained/"&gt;Read more here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-defences"&gt;
  &lt;/a&gt;
  Other Defences
&lt;/h2&gt;

&lt;p&gt;There are various other defence techniques and one of them is by User interaction&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Re-Authentication - Authorization mechanism (password or stronger)&lt;/li&gt;
&lt;li&gt;One-time Token&lt;/li&gt;
&lt;li&gt;CAPTCHA (prefer newer CAPTCHA versions without user interaction or visual pattern matching)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To know more in depth about other defence techniques refer the &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#introduction"&gt;Cross-Site Request Forgery Prevention Cheat Sheet&lt;/a&gt; where I have taken a lot of reference from for this blog post. &lt;/p&gt;

&lt;p&gt;Hope you have a better understanding about CSRF attacks now. Please share your comments if you have any feedback or suggestions. In the next post I intend to discuss about vulnerabilities in Authentication process. Stay tuned!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>security</category>
    </item>
    <item>
      <title>Instrumenting AMIs for GPU monitoring on CloudWatch</title>
      <author>Daniel Kneipp</author>
      <pubDate>Sun, 01 Aug 2021 21:12:30 +0000</pubDate>
      <link>https://dev.to/aws-builders/instrumenting-amis-for-gpu-monitoring-on-cloudwatch-105m</link>
      <guid>https://dev.to/aws-builders/instrumenting-amis-for-gpu-monitoring-on-cloudwatch-105m</guid>
      <description>&lt;p&gt;If you have used provisioned instances on AWS before, you know that the default metrics monitored are kind of limited. You only have access to CPU utilization, network transfer rates and disk reads/writes. By default, you don't have the monitoring of some basic information, like RAM and filesystem usage (which ca be a very valuable information to prevent an instance malfunction due to lack of resources).&lt;/p&gt;

&lt;p&gt;In case of GPU-accelerated applications (like Machine Learning apps), this problem goes even further, since you also don't have any access to GPU metrics, which is critical to guarantee the reliability of the system (e.g. the total GPU memory consumption can lead to the crash of any application running on the GPU).&lt;/p&gt;

&lt;p&gt;I've created a project (available &lt;a href="https://github.com/DanielKneipp/aws-ami-gpu-monitoring"&gt;here&lt;/a&gt;) showing how we can create an AMI with CloudWatch agent for RAM and filesystem monitoring, and a custom service called &lt;code&gt;gpumon&lt;/code&gt; to gather GPU metrics and send them to AWS CloudWatch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project structure
&lt;/h2&gt;

&lt;p&gt;In the project we have two main directories like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
‚îú‚îÄ‚îÄ packer  ==&amp;gt; AMI creation
‚îî‚îÄ‚îÄ tf      ==&amp;gt; AMI usage example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first one contains all the necessary files to create the the AMI based on Amazon Linux 2 using a tool called &lt;code&gt;packer&lt;/code&gt;. The second one has infrastructure as code in &lt;code&gt;terraform&lt;/code&gt; to provision an instance using the new created AMI for testing purposes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ami-creation"&gt;
  &lt;/a&gt;
  AMI creation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; is a great tool to achieve Infrastructure as Code principles on AMI creation step. It has capabilities to provision an instance with the base AMI specified, run scripts through ssh, start the process of AMI creation, and clean everything up (e.g. instance, ebs volume, ssh key pair) afterwards.&lt;/p&gt;

&lt;p&gt;The file &lt;code&gt;packer/gpu.pkr.hcl&lt;/code&gt; contains the specification of the AMI. There we can find the base AMI, the instance used to create the AMI, the storage configuration, and the scripts used to configure the instance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#base-ami"&gt;
  &lt;/a&gt;
  Base AMI
&lt;/h3&gt;

&lt;p&gt;In order to make my life a bit easier, I tried to to look for AMIs that already have NVIDIA drivers installed, so that I don't have to install it my self. Looking through the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-nvidia-driver.html#preinstalled-nvidia-driver"&gt;AWS documentation about installing NVIDIA drivers&lt;/a&gt;, we can see that there are options already in the marketplace of AMIs with pre-shipped NVIDIA drivers. Among the options, we're going to use the &lt;a href="https://aws.amazon.com/marketplace/pp/prodview-64e4rx3h733ru?qid=1627738530182&amp;amp;sr=0-3&amp;amp;ref_=srh_res_product_title"&gt;Amazon Linux 2&lt;/a&gt;, because it already comes with the AWS Systems Manager agent, which se will use latter on.&lt;/p&gt;

&lt;p&gt;A couple of notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You don't need to subscribe to the marketplace product in order to have access to the AMI currently selected. However, you will need to subscribe to have access to the AMI id of new releases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will &lt;strong&gt;need a GPU-based instance&lt;/strong&gt; to build the AMI (as it's required by the marketplace product specifications). I've tested this project in a new AWS account and it seems that the default limits doesn't allow the provisioning og GPU-based instances (G family). &lt;code&gt;packer&lt;/code&gt; will show an error if that's your case as well. If it is, you can request a limit increase &lt;a href="http://aws.amazon.com/contact-us/ec2-request"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cloudwatch-agent"&gt;
  &lt;/a&gt;
  CloudWatch Agent
&lt;/h3&gt;

&lt;p&gt;The first addon that we're going to make to the base AMI is to install and configure the AWS CloudWatch Agent.&lt;/p&gt;

&lt;p&gt;The process of installation of the agent is well documented by AWS and you can see more details and methods of installation in other Linux distributions &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-commandline-fleet.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The agent configuration is made by &lt;code&gt;.json&lt;/code&gt; file that the agent reads in order to know what metrics to monitor and how to publish them on ClodWatch. You can also see more about it on the &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-Configuration-File-Details.html"&gt;documentation page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The process is automated by the script &lt;code&gt;packer/scripts/install-cloudwatch-agent.sh&lt;/code&gt;. It installs the agent and configure it with some relevant metrics like filesystem, RAM and swap usage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the agent is configured to publish metrics with a period of 60 seconds. This can incur &amp;gt; costs since it's considered and Detailed metric (go to &amp;gt; &lt;a href="https://aws.amazon.com/cloudwatch/pricing/"&gt;CloudWatch pricing page&lt;/a&gt; to know more).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#gathering-the-gpu-metrics"&gt;
  &lt;/a&gt;
  Gathering the GPU metrics
&lt;/h3&gt;

&lt;p&gt;AWS already have &lt;a href="https://docs.aws.amazon.com/dlami/latest/devguide/tutorial-gpu-monitoring.html"&gt;documentation&lt;/a&gt; talking about ways to monitor GPU usage. There is a &lt;a href="https://docs.aws.amazon.com/dlami/latest/devguide/tutorial-gpu-monitoring-gpumon.html"&gt;brief description&lt;/a&gt; about a tool called &lt;code&gt;gpumon&lt;/code&gt; and also a more extended &lt;a href="https://aws.amazon.com/blogs/machine-learning/monitoring-gpu-utilization-with-amazon-cloudwatch/"&gt;blog post&lt;/a&gt; about it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gpumon&lt;/code&gt; is a (kind of old) &lt;a href="https://s3.amazonaws.com/aws-bigdata-blog/artifacts/GPUMonitoring/gpumon.py"&gt;python script&lt;/a&gt; developed by AWS that makes use of a NVIDIA library called NVLM (NVIDIA Management Library) to gather metrics from the GPUs of the instance and publish them on CloudWatch. In this project the script was turned into a &lt;code&gt;systemd&lt;/code&gt; unit. The script itself was also modified to make the error handling more readable and to capture memory usage correctly.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;gpumon&lt;/code&gt; service resides in &lt;code&gt;packer/addons/gpumon&lt;/code&gt; and the &lt;code&gt;install-cloudwatch-gpumon.sh&lt;/code&gt; automates the installation process. The service is configured to start the python script at boot and restart it stops working for some reason. Since &lt;code&gt;systemd&lt;/code&gt; manages the service, its logs can be seen with &lt;code&gt;journalctl --unit gpumon&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: he python script has only be tested on python2, which &lt;a href="https://www.python.org/doc/sunset-python-2/"&gt;is deprecated&lt;/a&gt;. &amp;gt; &lt;code&gt;pip&lt;/code&gt; warns about that on the installation process while you create the AMI. You should &amp;gt; keep that in mind if you intend to use this script for any production workload.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#about-the-gpu-memory-usage-metric-gathering"&gt;
  &lt;/a&gt;
  About the GPU memory usage metric gathering
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://s3.amazonaws.com/aws-bigdata-blog/artifacts/GPUMonitoring/gpumon.py"&gt;original script&lt;/a&gt; get the GPU memory usage from the &lt;code&gt;nvmlDeviceGetUtilizationRates()&lt;/code&gt; function. I noticed through some tests that this metric was 0 even though I had data loaded into the GPU.&lt;/p&gt;

&lt;p&gt;From the &lt;a href="https://docs.nvidia.com/deploy/nvml-api/group__nvmlDeviceQueries.html#group__nvmlDeviceQueries_1g540824faa6cef45500e0d1dc2f50b321"&gt;NVIDIA documentation&lt;/a&gt; this function actually &lt;a href="https://docs.nvidia.com/deploy/nvml-api/structnvmlUtilization__t.html#structnvmlUtilization__t"&gt;returns&lt;/a&gt; the amount of memory that is being read/written, which isn't what I wanted. In order to get the amount of GPU memory allocated, &lt;a href="https://docs.nvidia.com/deploy/nvml-api/group__nvmlDeviceQueries.html#group__nvmlDeviceQueries_1g2dfeb1db82aa1de91aa6edf941c85ca8"&gt;&lt;code&gt;nvmlDeviceGetMemoryInfo()&lt;/code&gt;&lt;/a&gt; should be used instead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ami-usage-example"&gt;
  &lt;/a&gt;
  AMI Usage example
&lt;/h2&gt;

&lt;p&gt;As an example on how to use this AMI, there is also a terraform project that contains the necessary resources to provision an instance and monitor it using the CloudWatch interface.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;tf/main.tf&lt;/code&gt; is the root file containing the reference to the module &lt;code&gt;tf/module/monitored-gpu&lt;/code&gt;, which encapsulates the resources such as the instance and IAM permissions.&lt;/p&gt;

&lt;p&gt;This example doesn't required SSH capabilities from the instance. We will use AWS Systems Manager - Session Manager to access of the instance (the base AMI already comes with the SSM agent preinstalled). This method is better because the access is registered into AWS, allowing security auditions on the instance access. Also, there is no credentials nor keys stored in any machine to be leaked.&lt;/p&gt;

&lt;p&gt;The required AWS managed permissions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CloudWatchAgentServerPolicy&lt;/code&gt;: allow the instance to publish CloudWatch metrics;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;AmazonSSMManagedInstanceCore&lt;/code&gt; instance access through Session Manager.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-run-it"&gt;
  &lt;/a&gt;
  How to run it
&lt;/h2&gt;

&lt;p&gt;All right, let's go to the fun part! To play with this project we first need to install some dependencies (&lt;code&gt;packer&lt;/code&gt; and &lt;code&gt;terraform&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;A really handy tool that you can use to install and manage multiple versions of tools is &lt;code&gt;asdf&lt;/code&gt;. It helps you keep track use different versions of a variety of tools. With it there is no need for you to uninstall the versions of the tools you may already have. With some simple commands it install the versions needed and make them context aware (the tolling version change automatically after entering in a directory that has a &lt;code&gt;.tool-versions&lt;/code&gt; specified).&lt;/p&gt;

&lt;p&gt;You can go to &lt;a href="https://asdf-vm.com/guide/getting-started.html"&gt;this link&lt;/a&gt; to install &lt;code&gt;asdf&lt;/code&gt;. After that you can simply run the following to have the correct versions of &lt;code&gt;packer&lt;/code&gt; and &lt;code&gt;terraform&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;asdf plugin-add terraform https://github.com/asdf-community/asdf-hashicorp.git
asdf plugin-add packer https://github.com/asdf-community/asdf-hashicorp.git

asdf install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, it's time to build the AMI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd packer
packer init
packer build .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will start the process of building the AMI in the &lt;code&gt;us-east-1&lt;/code&gt; region. You can follow the terminal to see what is happening and the logs of the scripts. You can also see the snapshot being taken accessing the AWS console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjfsqafD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubm33n7lcpfyo85zpfi8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjfsqafD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubm33n7lcpfyo85zpfi8.png" alt="AMI page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And get a progress bar in the "Snapshots" page like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T1rcN9O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqemiuthrh7qz3qx9qon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T1rcN9O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqemiuthrh7qz3qx9qon.png" alt="EBS Snapshot page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The snapshot name tag will appear after the AMI has been created.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The AMI creation will be completed when you see something like this on your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
==&amp;gt; amazon-ebs.gpu: Terminating the source AWS instance...
==&amp;gt; amazon-ebs.gpu: Cleaning up any extra volumes...
==&amp;gt; amazon-ebs.gpu: No volumes to clean up, skipping
==&amp;gt; amazon-ebs.gpu: Deleting temporary security group...
==&amp;gt; amazon-ebs.gpu: Deleting temporary keypair...
Build 'amazon-ebs.gpu' finished after 9 minutes 38 seconds.

==&amp;gt; Wait completed after 9 minutes 38 seconds

==&amp;gt; Builds finished. The artifacts of successful builds are:
--&amp;gt; amazon-ebs.gpu: AMIs were created:
us-east-1: ami-09a9fd45137e9129e
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚úÖ At this point, you should have an AMI ready to be used!!&lt;/p&gt;

&lt;p&gt;Now it's time to test it! Grab the AMI id (&lt;code&gt;ami-09a9fd45137e9129e&lt;/code&gt; in this case) and paste it, replacing the text &lt;code&gt;"&amp;lt;your-ami-id&amp;gt;"&lt;/code&gt; in the &lt;code&gt;tf/main.tf&lt;/code&gt; file. After the modification, the section of the file that specifies the module should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s2"&gt;"gpu_vm"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"./modules/monitored-gpu"&lt;/span&gt;

  &lt;span class="nx"&gt;ami&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ami-09a9fd45137e9129e"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd tf
terraform init
terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;terraform&lt;/code&gt; will ask you if you want to perform the actions specified. If, right before the prompt, it shows that it will create 6 resources, like it's being shown right below, you can type &lt;code&gt;yes&lt;/code&gt; to start the resource provisioning.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
Plan: 6 to add, 0 to change, 0 to destroy.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a couple of minutes (roughly 5 minutes), go to the &lt;em&gt;All metrics&lt;/em&gt; page on CloudWatch. You should be able to see two new custom namespaces already: &lt;code&gt;CWAgent&lt;/code&gt; and &lt;code&gt;GPU&lt;/code&gt;. This is the newly created instance publishing its metrics in idle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pl2MGBWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zftyatlcwrfqnj9h6kj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pl2MGBWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zftyatlcwrfqnj9h6kj5.png" alt="CW main interface"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see more details about RAM and swap, for example, using the &lt;code&gt;CWAgent&lt;/code&gt; namespace, like the next figure shows. With that you can monitor the boot behavior of the AMI, assess its performance and verify if it's behaving as expected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qIY3xpI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5azcrr02cca54px3vuku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qIY3xpI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5azcrr02cca54px3vuku.png" alt="CW metrics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The swap usage is 0 because there is no swap configured in this AMI (you can follow &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/ec2-memory-swap-file/"&gt;this documentation&lt;/a&gt; in order to add it). The spike of RAM usage you see is a test that I was making üòÖ.&lt;/p&gt;

&lt;p&gt;Now, let's use this hardware a bit to see the metrics moving. Go to the &lt;em&gt;Instances&lt;/em&gt; tab on the EC2 page, like shown in the next figure. Right-click in the running instance and hit connect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bGZ7ZUGK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vassimnj4wxsmcc472ua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGZ7ZUGK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vassimnj4wxsmcc472ua.png" alt="SSM connect 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, go to the &lt;em&gt;Session Manager&lt;/em&gt; tab and hit &lt;em&gt;Connect&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BX2VELkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjkhgb83dtq0xv0sf775.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BX2VELkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjkhgb83dtq0xv0sf775.png" alt="SSM connect 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should now have a shell access through your browser. Running the commands below will clone and build an utility to stress-test the GPU for 5 minutes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo -s
yum install -y git

cd ~
git clone https://github.com/wilicc/gpu-burn.git
make CUDAPATH=/opt/nvidia/cuda

./gpu_burn 600
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can look at CLodWatch to see the impact of the resource usage while &lt;code&gt;gpu-burn&lt;/code&gt; does its thing, as shown in the figure below.&lt;/p&gt;

&lt;p&gt;With these metrics, now it's easy to create alarms to alert you when an anomaly is detected on the resource usage, or create autoscaling capabilities for a cluster using custom metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M46E1bod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkspyq8uaepwzk07q0bo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M46E1bod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkspyq8uaepwzk07q0bo.png" alt="GPU stress test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clean-up"&gt;
  &lt;/a&gt;
  Clean up
&lt;/h2&gt;

&lt;p&gt;To finish the party and turn off the lights, just:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;run &lt;code&gt;terraform destroy&lt;/code&gt; while at the &lt;code&gt;tf/&lt;/code&gt; directory;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;deregister ami;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zv8IUinn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q9bghbgaxjwfucv23fm4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zv8IUinn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q9bghbgaxjwfucv23fm4.png" alt="Deregister AMI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;and delete the EBS snapshot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r2BVfqId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzrd8oudreiofyysl6mp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r2BVfqId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzrd8oudreiofyysl6mp.png" alt="Delete snapshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you, guys! comments and feedback are much appreciated. &lt;/p&gt;

&lt;p&gt;Feel free to reach out to me on &lt;a href="https://www.linkedin.com/in/daniel-kneipp/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://github.com/DanielKneipp"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>aws</category>
      <category>machinelearning</category>
      <category>cloud</category>
    </item>
    <item>
      <title>JavaScript: Concept of  Promise</title>
      <author>Swarnali Roy</author>
      <pubDate>Sun, 01 Aug 2021 20:42:44 +0000</pubDate>
      <link>https://dev.to/swarnaliroy94/javascript-concept-of-promise-3ijb</link>
      <guid>https://dev.to/swarnaliroy94/javascript-concept-of-promise-3ijb</guid>
      <description>&lt;p&gt;Dear readers, this post is about a very useful and important concept of &lt;em&gt;JavaScript&lt;/em&gt;. I think every beginner should have this basic knowledge while developing any project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-promise"&gt;
  &lt;/a&gt;
  What is a Promise
&lt;/h3&gt;

&lt;p&gt;In JavaScript, &lt;code&gt;Promise&lt;/code&gt; is a very important concept.The &lt;em&gt;Promise&lt;/em&gt; object represents the eventual &lt;code&gt;completion&lt;/code&gt; or &lt;code&gt;failure&lt;/code&gt; of an &lt;em&gt;asynchronous operation&lt;/em&gt; and its &lt;em&gt;resulting value&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;üëâüèª A &lt;em&gt;Promise&lt;/em&gt; is a proxy with an &lt;em&gt;unknown value&lt;/em&gt; whenever a Promise is generated. &lt;br&gt;
üëâüèª This allows the controller to connect with the final &lt;em&gt;success value&lt;/em&gt; or reason for &lt;em&gt;failure&lt;/em&gt; of the asynchronous operation.&lt;br&gt;
üëâüèª This allows &lt;em&gt;asynchronous methods&lt;/em&gt; to return the same values ‚Äã‚Äãas &lt;em&gt;synchronous methods&lt;/em&gt;. &lt;br&gt;
üëâüèªInstead of returning the final value &lt;em&gt;immediately&lt;/em&gt;, the asynchronous method returns a promise to provide the value at a particular point in the &lt;em&gt;future&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basic-syntax"&gt;
  &lt;/a&gt;
  Basic Syntax
&lt;/h3&gt;

&lt;p&gt;Promise is a &lt;em&gt;constructor function&lt;/em&gt;, so we need a &lt;code&gt;new&lt;/code&gt; to create a Promise. It takes a &lt;em&gt;function&lt;/em&gt;, as it's &lt;em&gt;argument&lt;/em&gt;, with &lt;em&gt;two parameters&lt;/em&gt;: &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt;. &lt;br&gt;
The &lt;em&gt;syntax&lt;/em&gt; generally looks like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const myPromise = new Promise((resolve, reject) =&amp;gt; { } ) ;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#states-of-a-promise"&gt;
  &lt;/a&gt;
  States of a Promise
&lt;/h3&gt;

&lt;p&gt;A promise has &lt;em&gt;three&lt;/em&gt; states:&lt;/p&gt;

&lt;p&gt;i) &lt;code&gt;pending&lt;/code&gt;: It's the initial state, neither &lt;em&gt;successful&lt;/em&gt; nor &lt;em&gt;unsuccessful&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;ii) &lt;code&gt;fulfilled&lt;/code&gt;: It means that the operation was &lt;em&gt;completed successfully&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;iii) &lt;code&gt;rejected&lt;/code&gt;: It indicates that the operation has &lt;em&gt;failed&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#resolve-parameter"&gt;
  &lt;/a&gt;
  Resolve Parameter
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;resolve&lt;/code&gt; parameter is used when we want the promise to succeed. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#reject-parameter"&gt;
  &lt;/a&gt;
  Reject Parameter
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;reject&lt;/code&gt; is used when we want to catch the failure.&lt;/p&gt;

&lt;p&gt;The following is an &lt;em&gt;example&lt;/em&gt; of a &lt;em&gt;Promise&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const makeServerRequest = new Promise((resolve, reject1) =&amp;gt; {
  let responseFromServer;

  if (responseFromServer) {
    resolve("We got the Data");
  } else {
    reject("Data not Found");
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code snippet, &lt;em&gt;responseFromServer&lt;/em&gt; represents a response from the server.&lt;/p&gt;

&lt;p&gt;If &lt;em&gt;responseFromServer&lt;/em&gt; is &lt;em&gt;true&lt;/em&gt;, the &lt;code&gt;resolve&lt;/code&gt; method will be called to &lt;em&gt;successfully complete&lt;/em&gt; the promise and return the string as it's argument. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#generally-it-returns-data"&gt;
  &lt;/a&gt;
  (Generally, it returns data)
&lt;/h6&gt;

&lt;p&gt;Again, if &lt;em&gt;responseFromServer&lt;/em&gt; is &lt;em&gt;false&lt;/em&gt;, the promise will fail and call the &lt;code&gt;reject&lt;/code&gt; method.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#generally-it-catches-the-errors"&gt;
  &lt;/a&gt;
  (Generally it catches the errors).
&lt;/h6&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Website design ‚Äì how to start?</title>
      <author>shubham rathod</author>
      <pubDate>Sun, 01 Aug 2021 20:19:36 +0000</pubDate>
      <link>https://dev.to/shubhamrathod1/website-design-how-to-start-9fp</link>
      <guid>https://dev.to/shubhamrathod1/website-design-how-to-start-9fp</guid>
      <description>&lt;p&gt;Designing a website starts with defining the role the website is meant to serve, or its purpose.&lt;/p&gt;

&lt;p&gt;You‚Äôre guessing right ‚Äì there are different types of websites that are used for different purposes. The three most popular ones are: landing pages, one-pages and classic websites. Obviously, there are also large sites (portals and the like), but that‚Äôs a completely different topic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-purpose-of-your-website-this-is-where-web-design-begins"&gt;
  &lt;/a&gt;
  What is the purpose of your website ‚Äì this is where web design begins.
&lt;/h3&gt;

&lt;p&gt;You need to know what purpose your website is meant to have. That way the website you‚Äôre designing will be understandable to the users.&lt;/p&gt;

&lt;p&gt;If you run a business of some sort, the user needs to know right from the start what you have to offer.&lt;/p&gt;

&lt;p&gt;For example ‚Äì you own a car repair garage. The user needs to know they have entered a repair garage‚Äôs website and that they can use specific services.&lt;/p&gt;

&lt;p&gt;The purpose of such website is to inform about those services, and thus ‚Äì to gain new clients&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-design-define-your-audience"&gt;
  &lt;/a&gt;
  Web design ‚Äì define your audience.
&lt;/h3&gt;

&lt;p&gt;It‚Äôs not like your website is going to be viewed by search engine robots only ;). That‚Äôs why you need to think about who will be (and already is) the audience of your website.&lt;/p&gt;

&lt;p&gt;After all, they‚Äôre the ones you want to reach, aren‚Äôt they?&lt;/p&gt;

&lt;p&gt;Defining the audience of a website is directly related to the purpose of your website. They‚Äôre the ones to fulfill that purpose, after all.&lt;/p&gt;

&lt;p&gt;Web design defines such profiling as ‚Äúpersona creation‚Äù.&lt;/p&gt;

&lt;p&gt;Which means you need to think about what exactly the users are going to want from your website and who exactly they are going to be.&lt;/p&gt;

&lt;p&gt;You certainly have some profile of your website‚Äôs user in your head. You need to think about what exactly they need, what their preferences are, why they ended up on your website and what they should find on it for you to reach your goal.&lt;/p&gt;

&lt;p&gt;For example, a perfect user of a car repair garage‚Äôs website will be someone who needs to have their car repaired.&lt;/p&gt;

&lt;p&gt;They want to know what kind of services the garage offers, where it is located, what its operating hours are and how to contact it. That‚Äôs the kind of information they are going to be looking for on the website.&lt;/p&gt;

&lt;p&gt;Your job is to put it in a visible place.&lt;/p&gt;

&lt;p&gt;In other words: creating personae will let you better tailor your website to the needs of your users.&lt;/p&gt;

&lt;p&gt;Remember ‚Äì (good) web design is closely related to addressing the needs of specific personae. Which means your perfect users. Once you define your audience, it will be easier for you to define what the user wants to find on your website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paper-and-pencil-make-web-design-easier"&gt;
  &lt;/a&gt;
  Paper and pencil ‚Äì make web design easier.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bGmy3BhO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p39ws4rzlxx25eir5v8w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGmy3BhO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p39ws4rzlxx25eir5v8w.jpg" alt="website sketch image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs always nice to draw something. Especially if you have no idea on how to get to designing a website in terms of visuals, just remember: it‚Äôs always worth it to get inspired, which makes it a good idea to go through a few websites that you think are nice and draw some conclusions. That‚Äôs why it‚Äôs better to start designing a website with a piece of paper.&lt;/p&gt;

&lt;p&gt;Once you have the elements that should be featured on it, you can expand it onto subsequent subpages. Make one sheet of paper for each individual subpage.&lt;/p&gt;

&lt;p&gt;Place subsequent elements on each ‚Äúsubpage‚Äù (make sure to maintain the order of priority). You don‚Äôt have to be afraid to cross things out.&lt;/p&gt;

</description>
      <category>webdesign</category>
      <category>typesofwebdesign</category>
    </item>
    <item>
      <title>GraphQL and FastAPI Combination</title>
      <author>Bek Brace</author>
      <pubDate>Sun, 01 Aug 2021 20:08:07 +0000</pubDate>
      <link>https://dev.to/bekbrace/graphql-and-fastapi-combination-1c37</link>
      <guid>https://dev.to/bekbrace/graphql-and-fastapi-combination-1c37</guid>
      <description>&lt;p&gt;GraphQL is an abbreviation for Graph Query Language.&lt;br&gt;
So it's a Query Language for reading data from API. &lt;br&gt;
Unlike most query languages (such as SQL), you don‚Äôt use GraphQL to query a particular type of data store (such as a PostgreSQL database for example). &lt;br&gt;
Instead, you use GraphQL to query data from any number of different sources.&lt;/p&gt;

&lt;p&gt;So, to make things clearer , in traditional REST API, you consume apis using REST and we have done that so many times with Flask, Django and FastAPI by sending different HTTP request methods like GET, POST, PUT , and DELETE to the API using path or URLS &lt;/p&gt;

&lt;p&gt;Now the problem with HTTP requests is that when the request is received from the front-end user, &lt;br&gt;
the API responds with everything it has, a full payload that contains data that might not be useful to you as a developer&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2_puWfTK8bQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The other problem is the opposite, which means that you might want to fetch multiple data or get multiple resources simultaneously, and this is not possible, because there is no enough data per HTTP request.  &lt;/p&gt;

&lt;p&gt;And there comes the power of GraphQL&lt;br&gt;
GRAPHQL solved this problem by improving upon the idea of receiving a bulk of unnecessary data or fetching less than expected,  so instead of these request URLS or many endpoints for HTTP methods; graphql has a single entry point; ( slid 2 of code) so you can query data now very easily by specifying what type of data exactly you're looking for, and the response you'll get will exactly match your query, in JSON format of course.&lt;/p&gt;

&lt;p&gt;The way this works is by start defining  a schema with objects using type keyword, and a type can have multiple fields like an id, and if you want to make it non-nullable then add the exclamation mark after [ Analogist to NOT NULL in SQL ], you can also add integers, strings and boolean values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Author {
    id:ID!
    age: 56
    genre: "horror"
    american: True
    books: [Books]
    symbol: ‚úçÔ∏è
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can also create relationship with another type, so an author can have many books , which we can represent by wrapping the type in bracket , and on the other side, the books belong to an author&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Books{
    language: String!
    number: int
    author: Author
        symbol: üìö
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#graphql-and-fastapi"&gt;
  &lt;/a&gt;
  GraphQL and FastAPI
&lt;/h1&gt;

&lt;p&gt;Now, we are going to use GraphQL to fetch data from FASTAPI, and we could use something like Strawbery or Ariadne, but Starlette, and when I say Starlette, I implicitly mean FastAPI, so Starlette includes optional support for GraphQL, using the graphene library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install fastAPI  : pip install fastapi&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Install Graphene : pip install "graphene&amp;gt;=2.0"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://graphene-python.org"&gt;https://graphene-python.org&lt;/a&gt;&lt;br&gt;
Graphene is a library for building GraphQL APIs in Python easily, so it's a Server library, and its main goal is to provide a simple but extendable API for making developers' lives easier.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import graphene
from fastapi import FastAPI
from starlette.graphql import GraphQLApp

class Query(graphene.ObjectType):
    hello = graphene.String(name=graphene.String(default_value=", world üåé !"))

    def resolve_hello(self, info, name):
        return "Hello " + name

app = FastAPI()
app.add_route("/", GraphQLApp(schema=graphene.Schema(query=Query)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Here we are using .add_route, that is the way to add a route in Starlette (inherited by FastAPI) without declaring the specific operation (as would be with .get(), .post(), etc).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Run the file : uvicorn main:app --reload&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Now we will load up the page in the browser, we will be served the GraphiQL tool, which you can use to interact with  GraphQL API&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/BekBrace"&gt;
        BekBrace
      &lt;/a&gt; / &lt;a href="https://github.com/BekBrace/GraphQL-FastAPI-Code"&gt;
        GraphQL-FastAPI-Code
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is an introduction to GraphQL, and how to combine FastAPI code with GraphQL to run queries and receive data in GraphiQL Tool
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>graphql</category>
      <category>python</category>
      <category>programming</category>
      <category>database</category>
    </item>
    <item>
      <title>Kotlin monthly wrap-up: July 2021</title>
      <author>Jean-Michel Fayard üá´üá∑üá©üá™üá¨üáßüá™üá∏üá®üá¥</author>
      <pubDate>Sun, 01 Aug 2021 19:12:43 +0000</pubDate>
      <link>https://dev.to/jmfayard/kotlin-monthly-wrap-up-july-2021-53l9</link>
      <guid>https://dev.to/jmfayard/kotlin-monthly-wrap-up-july-2021-53l9</guid>
      <description>&lt;p&gt;Hi, I'm Jean-Michel, a Kotlin fan like you! At the end of each month, I'll be showcasing some great posts, projects and insights from the Kotlin community, right here on DEV.to.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__234"&gt;
  
    .ltag__tag__id__234 .follow-action-button{
      background-color: #1b1865 !important;
      color: #fdc791 !important;
      border-color: #1b1865 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/kotlin" class="ltag__tag__link"&gt;kotlin&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Among the popular articles of the months, here are those I've read and can recommend:&lt;/p&gt;




&lt;p&gt;How to get started with Android App Development? Rohit Kumar provides beginners with a roadmap of what to learn. Spoiler alert: there is a lot!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rohitk570" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46bzOWvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZJpAQ_UY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/644632/af4c3bd6-8ece-4383-a417-7f1fc3eaa7c1.jpg" alt="rohitk570"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rohitk570/what-to-learn-to-get-started-with-android-app-development-19il" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What to Learn to get started with Android App Development?&lt;/h2&gt;
      &lt;h3&gt;ROHIT KUMAR „Éª Jul 12 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next, there is my article who encourages you to write command-line tools to automate your workflow, but to make sure you use your favorite programming language, not Bash! Be sure to check my starter project for CLI tools in Kotlin multiplatform.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jmfayard" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjlhV-kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oLH1L0EP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/17066/64e291f5-65fd-452a-88d9-a2f0c071f807.jpg" alt="jmfayard"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmfayard/how-to-write-a-command-line-tool-with-kotlin-multiplatform-45g2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Write a Command-Line Tool with Kotlin Multiplatform&lt;/h2&gt;
      &lt;h3&gt;Jean-Michel Fayard üá´üá∑üá©üá™üá¨üáßüá™üá∏üá®üá¥ „Éª Jul 13 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Lists are the bread and butter of programming with Kotlin. Do you think you master them? &lt;a href="https://dev.to/sebastianaigner"&gt;Sebastian Aigner&lt;/a&gt; comes back with an article and YouTube episode to explore what you may not know yet.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kotlin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rcPUWxAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--UV4Pzb-m--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2485/80d41bc3-7f05-444c-a32e-ceb190e486b1.png" alt="Kotlin"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kSTlWat0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6FQVzg70--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/26006/58280da5-1e32-4986-be77-79297aaf1175.jpg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kotlin/exploring-kotlin-lists-in-2021-2gi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Exploring Kotlin Lists in 2021&lt;/h2&gt;
      &lt;h3&gt;Sebastian Aigner for Kotlin „Éª Jul 8 „Éª 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Finally, Christy Jacob presents what's new in Appwrite, an ambitious open-source alternative to Firebase in active development. That includes a Kotlin SDK both for Android and for server-side.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/appwrite" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W4bSIRV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7eMrR0VE--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2225/eb541cf9-84f4-4101-987c-c219cd4b34fc.png" alt="Appwrite"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TRLcIz2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XAe6V72F--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/119691/5be2bcad-e1ee-4ef8-928b-d71f4e355af6.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/appwrite/announcing-appwrite-0-9-the-open-source-firebase-alternative-53ho" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Announcing Appwrite 0.9: The open source Firebase alternative &lt;/h2&gt;
      &lt;h3&gt;Christy Jacob for Appwrite „Éª Jul 7 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#flutter&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;That's all for this month!&lt;/p&gt;

&lt;p&gt;Remember to follow the Kotlin tag&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__234"&gt;
  
    .ltag__tag__id__234 .follow-action-button{
      background-color: #1b1865 !important;
      color: #fdc791 !important;
      border-color: #1b1865 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/kotlin" class="ltag__tag__link"&gt;kotlin&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you want to contact me, there is a standing invitation at &lt;a href="https://jmfayard.dev/contact/"&gt;https://jmfayard.dev/contact/&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>android</category>
      <category>bestofdev</category>
      <category>icymi</category>
    </item>
    <item>
      <title>ES6 Modules and Application</title>
      <author>Abba Vincent Ihechikara</author>
      <pubDate>Sun, 01 Aug 2021 19:03:37 +0000</pubDate>
      <link>https://dev.to/ihechikara/es6-modules-and-application-4j4c</link>
      <guid>https://dev.to/ihechikara/es6-modules-and-application-4j4c</guid>
      <description>&lt;p&gt;Modules in JavaScript have been around for quite a while but were originally implemented in libraries. An example would be how we can import a React component and make use of it in different components without the need to rewrite the function or class from scratch. Modules help us to avoid reinventing the wheel by writing the same logic twice. It also aids in the separation of concerns; you can have a separate module just for adding numbers or another for fetching data from an API. This way, you know exactly where everything belongs. Imagine if all of Google‚Äôs code was in one single file and every time the team had to fix something in the search bar, they had to scroll through a billion lines of code just to get to that particular section, wouldn‚Äôt that be hectic? Modules help us separate each functionality and thereby tackle each problem or scale-up certain functionalities individually.&lt;/p&gt;

&lt;p&gt;Now here‚Äôs the good news (kinda old news), modules were introduced in vanilla JavaScript with the release of ECMAScript 2015, popularly known as ES6. The release came with a lot of features that took vanilla JS to a whole new level. These features included &lt;strong&gt;arrow functions&lt;/strong&gt;, &lt;strong&gt;rest and spread&lt;/strong&gt;, &lt;strong&gt;destructuring&lt;/strong&gt;, &lt;strong&gt;classes&lt;/strong&gt;, &lt;strong&gt;let and const&lt;/strong&gt;, &lt;strong&gt;modules&lt;/strong&gt;, etc. This article will focus only on modules and their application in vanilla JavaScript.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#application-of-es6-modules"&gt;
  &lt;/a&gt;
  Application of ES6 Modules
&lt;/h1&gt;

&lt;p&gt;To begin with, we‚Äôll create our folder which will have our main script and modules. One module will be used for addition while the other will be used for subtraction.&lt;br&gt;
This is what the folder structure looks like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;index.html&lt;br&gt;
script.js&lt;br&gt;
myModules/&lt;br&gt;
add.js&lt;br&gt;
sub.js&lt;/p&gt;

&lt;p&gt;Some resources may use the .mjs extension to note module files but we‚Äôll use a different approach by including type=‚Äùmodule‚Äù in our script tag. This is shown below:&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;ES6 Modules&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let‚Äôs create our functions ‚Äî one for addition and the other for subtraction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//add.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//sub.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#export-and-import"&gt;
  &lt;/a&gt;
  Export and Import
&lt;/h1&gt;

&lt;p&gt;All we have done is create regular scripts with functions. How then can we use these functions in other scripts? This is done using the &lt;strong&gt;export&lt;/strong&gt; and &lt;strong&gt;import keywords&lt;/strong&gt;.&lt;br&gt;
In other to access the functionality of a module, it has to be exported from where it was created and then imported into any file where it will be used.&lt;br&gt;
Let us export our add.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//add.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now by adding the &lt;strong&gt;export&lt;/strong&gt; before our function, it makes the script available for imports into other scripts where its function can be used.&lt;br&gt;
The same process is done for sub.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//sub.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have exported our scripts, let us then import them into our main script and make use of them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//script.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./myModules/add.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./myModules/sub.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The syntax is pretty easy to understand. Start with the &lt;strong&gt;import&lt;/strong&gt; keyword followed by the name of the function being imported which is nested inside curly brackets and then finally, the path from which the script was imported.&lt;br&gt;
Notice how we used the add and sub-function without creating a function with new parameters from scratch? This is the power of ES6 modules, our script is now reusable from anywhere as long as it has been exported on creation and imported before use. These scripts can now be imported into any other script we wish to use them in. This also eliminates the use of multiple script tags in our HTML file by creating one script that acts as the entry point for all other scripts.&lt;br&gt;
You can equally change the name of the function when importing to something different. For instance, you want to import the sub-function but you would rather call it ‚Äòminus‚Äô. This can be done by adding ‚Äúas‚Äù after the original name of the function while importing. Example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//script.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;minus&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./myModules/sub.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you for reading; I hope this article was worth your time. Follow me on Twitter &lt;a href="https://twitter.com/Ihechikara2"&gt;@ihechikara2&lt;/a&gt; My inbox is always open. See ya!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Electron Adventures: Episode 8: Terminal App Styling</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Sun, 01 Aug 2021 18:46:20 +0000</pubDate>
      <link>https://dev.to/taw/electron-adventures-episode-8-terminal-app-styling-4f87</link>
      <guid>https://dev.to/taw/electron-adventures-episode-8-terminal-app-styling-4f87</guid>
      <description>&lt;p&gt;This episode was created in collaboration with the amazing &lt;a href="https://www.amandacavallaro.com/"&gt;Amanda Cavallaro&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Over the next episodes we'll be working on a simple Terminal app.&lt;/p&gt;

&lt;p&gt;Modern terminals are very complex but a very minimal one just needs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a way to input commands&lt;/li&gt;
&lt;li&gt;run those commands&lt;/li&gt;
&lt;li&gt;show the output&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And in this episode, we'll ignore the pesky "run commands" part, and just start with styling.&lt;br&gt;
This way, by the time we get to complex subjects, we'll have all this side stuff out of the way.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  index.html
&lt;/h3&gt;

&lt;p&gt;Let's just think how we're going to represent the terminal. We need some input and some history.&lt;br&gt;
For lorem ipsum, I ran two random commands and copy-pasted them to the document:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Episode 8 - Terminal App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"app.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Very amazing terminal app&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"terminal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"history"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input-line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"prompt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;$&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;uname -a&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Darwin pallas 20.5.0 Darwin Kernel Version 20.5.0: Sat May 8 05:10:33 PDT 2021; root:xnu-7195.121.3~9/RELEASE_X86_64 x86_64&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input-line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"prompt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;$&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;date&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sun 1 Aug 2021 15:53:55 BST&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input-line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"prompt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;$&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;autofocus&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#typography"&gt;
  &lt;/a&gt;
  Typography
&lt;/h3&gt;

&lt;p&gt;First, obviously every terminal ever was always in dark mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And also in monospace font. Using &lt;code&gt;monospace&lt;/code&gt; and trusting the system usually works well enough:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#terminal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we also need to make the input follow this, as it doesn't inherit parent styling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#input-line-and-prompt"&gt;
  &lt;/a&gt;
  Input line and prompt
&lt;/h3&gt;

&lt;p&gt;Commands are traditionally preceded by &lt;code&gt;$&lt;/code&gt;. We put it into a separate element, as we might went to do custom prompts at some point.&lt;/p&gt;

&lt;p&gt;The easiest way to style this is to make the container a flexbox, with prompt being non-expanding, but the actual input being expanding.&lt;/p&gt;

&lt;p&gt;As &lt;code&gt;input&lt;/code&gt; is wrapped in a &lt;code&gt;form&lt;/code&gt;, we need to make that another flexbox too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.input-line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.input-line&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.input-line&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.prompt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.output&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#colors"&gt;
  &lt;/a&gt;
  Colors
&lt;/h3&gt;

&lt;p&gt;This is something terminals don't normally do, but I think it's helpful to clearly mark input and output with different colors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.output&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#afa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the final few tweaks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.output&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h3&gt;

&lt;p&gt;This looks close enough to a Terminal app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ytOJcTyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xuqxblu4yrkz9b62y85d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ytOJcTyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xuqxblu4yrkz9b62y85d.png" alt="Episode 8 Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next episode, we'll make it actually work.&lt;/p&gt;

&lt;p&gt;As usual, &lt;a href="https://github.com/taw/electron-adventures/tree/master/episode-08-terminal-app-styling"&gt;all the code for the episode is here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>electron</category>
    </item>
    <item>
      <title>
Python Image Handling Libraries</title>
      <author>Mansoor Ahmed</author>
      <pubDate>Sun, 01 Aug 2021 18:39:56 +0000</pubDate>
      <link>https://dev.to/ahmedmansoor012/python-image-handling-libraries-21m3</link>
      <guid>https://dev.to/ahmedmansoor012/python-image-handling-libraries-21m3</guid>
      <description>&lt;p&gt;Introduction&lt;br&gt;
Image Processing is the process of analyzing and controlling a digital image first and foremost aimed at improving its quality or for takeout some information from it which could then be put to some use. Common tasks in image processing comprise;&lt;/p&gt;

&lt;p&gt;Showing images&lt;br&gt;
Basic manipulations similar to cropping, flipping, rotating etc.&lt;br&gt;
Image Splitting up&lt;br&gt;
Grouping and feature drawing out&lt;br&gt;
Image rebuilding and Image recognition&lt;br&gt;
Python develops a suitable choice for such Image processing tasks. This is because of its emergent reputation as a scientific programming language and the allowed ease of use of various State of the Art Image Processing tools in its ecosystem.&lt;/p&gt;

&lt;p&gt;Description&lt;br&gt;
Best image processing and manipulation techniques may be carried out successfully using two libraries:&lt;/p&gt;

&lt;p&gt;Python Imaging Library (PIL)&lt;br&gt;
Open Source Computer Vision (OpenCV)&lt;br&gt;
Python Imaging Library (PIL)&lt;br&gt;
The Python Imaging Library (PIL) delivers overall image handling and many valuable simple image operations like resizing, cropping, rotating, color change and abundant more. This is one of the essential libraries for image manipulation in Python. There‚Äôs a keenly-developed fork of PIL called Pillow. This is an informal to install, runs on all most important operating systems, and supports Python 3. The library covers simple image processing functionality, together with point operations, filtering by a set of integral convolution kernels, and color space changes.&lt;/p&gt;

&lt;p&gt;How to install Pillow?&lt;br&gt;
We‚Äôll have to install Pillow‚Äôs prerequisites before installing Pillow. Find out the instructions for platform in the Pillow installation instructions.&lt;/p&gt;

&lt;p&gt;Next, it‚Äôs open:&lt;/p&gt;

&lt;p&gt;$ pip install Pillow&lt;br&gt;
Example&lt;/p&gt;

&lt;p&gt;from PIL import Image, ImageFilter&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#read-image"&gt;
  &lt;/a&gt;
  Read image
&lt;/h1&gt;

&lt;p&gt;im = Image.open( 'image.jpg' )&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#display-image"&gt;
  &lt;/a&gt;
  Display image
&lt;/h1&gt;

&lt;p&gt;im.show()&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#applying-a-filter-to-the-image"&gt;
  &lt;/a&gt;
  Applying a filter to the image
&lt;/h1&gt;

&lt;p&gt;im_sharp = im.filter( ImageFilter.SHARPEN )&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#saving-the-filtered-image-to-a-new-file"&gt;
  &lt;/a&gt;
  Saving the filtered image to a new file
&lt;/h1&gt;

&lt;p&gt;im_sharp.save( 'image_sharpened.jpg', 'JPEG' )&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#splitting-the-image-into-its-respective-bands-ie-red-green"&gt;
  &lt;/a&gt;
  Splitting the image into its respective bands, i.e. Red, Green,
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#and-blue-for-rgb"&gt;
  &lt;/a&gt;
  and Blue for RGB
&lt;/h1&gt;

&lt;p&gt;r,g,b = im_sharp.split()&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#viewing-exif-data-embedded-in-image"&gt;
  &lt;/a&gt;
  Viewing EXIF data embedded in image
&lt;/h1&gt;

&lt;p&gt;exif_data = im._getexif()&lt;/p&gt;

&lt;p&gt;exif_data&lt;br&gt;
Open Source Computer Vision (OpenCV)&lt;br&gt;
Open Source Computer Vision, usually known as OpenCV, is a more innovative image handling and processing software than PIL. It has been applied in a number of languages and widely used libraries for computer vision applications. OpenCV-Python is not only fast in the meantime the background contains of code written in C or C++ .This is similarly informal to code and deploy because of the Python wrapper in foreground. This brands it an unlimited select to perform computationally concentrated computer vision programs.&lt;/p&gt;

&lt;p&gt;How to install Open Source Computer Vision?&lt;br&gt;
By using the cv2 and NumPy modules in Python, we can implement image processing. The installation instructions for OpenCV  would guide us over and done with configuring the project for ourselves.&lt;/p&gt;

&lt;p&gt;NumPy may be downloaded from the Python Package Index(PyPI):&lt;/p&gt;

&lt;p&gt;$ pip install numpy&lt;br&gt;
Example&lt;/p&gt;

&lt;p&gt;import cv2&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#read-image"&gt;
  &lt;/a&gt;
  Read Image
&lt;/h1&gt;

&lt;p&gt;img = cv2.imread('testimg.jpg')&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#display-image"&gt;
  &lt;/a&gt;
  Display Image
&lt;/h1&gt;

&lt;p&gt;cv2.imshow('image',img)&lt;/p&gt;

&lt;p&gt;cv2.waitKey(0)&lt;/p&gt;

&lt;p&gt;cv2.destroyAllWindows()&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#applying-grayscale-filter-to-image"&gt;
  &lt;/a&gt;
  Applying Grayscale filter to image
&lt;/h1&gt;

&lt;p&gt;gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#saving-filtered-image-to-new-file"&gt;
  &lt;/a&gt;
  Saving filtered image to new file
&lt;/h1&gt;

&lt;p&gt;cv2.imwrite('graytest.jpg',gray)&lt;br&gt;
Python Image Handling Libraries&lt;br&gt;
Some Other Image Manipulation Tools&lt;br&gt;
Scikit-image&lt;br&gt;
Scikit-image is an open source Python package. It do work with NumPy arrays. It implements algorithms and utilities to be used in research, education, and industry applications. It‚Äôs a reasonably simple and easy library, even for those that are new Python‚Äôs ecosystem. The code is high-quality, peer-reviewed, and written by a lively community of volunteers.&lt;/p&gt;

&lt;p&gt;NumPy&lt;br&gt;
NumPy is one among the core libraries in Python programming. It gives support for arrays. A picture is actually a typical NumPy array containing pixels of knowledge points. Consequently, by using basic NumPy operations, similar slicing, masking, and fancy indexing, we‚Äôll modify the pixel values of a picture. The image is often loaded using skimage and displayed using Matplotlib.&lt;/p&gt;

&lt;p&gt;SciPy&lt;br&gt;
SciPy is a different of Python‚Äôs core scientific modules. It can be used for simple image handling and processing tasks. Particularly, the submodule scipy.ndimage (in SciPy v1.1.0) delivers functions operating on n-dimensional NumPy arrays. The package now comprises;&lt;/p&gt;

&lt;p&gt;Functions for linear and non-linear filtering,&lt;br&gt;
B-spline interpolation,&lt;br&gt;
Binary morphology&lt;br&gt;
Object measurements.&lt;br&gt;
SimpleCV&lt;br&gt;
SimpleCV is one more open source framework for building computer vision applications. It deals access to many high-powered computer vision libraries like OpenCV, but without having to understand about bit depths, file formats, color spaces, etc. A few points in favor of SimpleCV are:&lt;/p&gt;

&lt;p&gt;Even beginning programmers may write machine vision tests&lt;br&gt;
Video files, images, Cameras, and video streams are all interoperable&lt;br&gt;
Mahotas&lt;br&gt;
Mahotas is one more computer vision and image processing library for Python. It covers old-style image processing functions like filtering and morphological operations, similarly for example more modern computer vision functions for feature computation. That is including interest point detection and native descriptors. The interface is in Python that is acceptable for fast development. However the algorithms are implemented in C++ and tuned for speed. Mahotas‚Äô library is speedy with minimalistic code and even minimum dependencies.&lt;br&gt;
For more details visit:&lt;a href="https://www.technologiesinindustry4.com/2021/07/python-image-handling-libraries.html"&gt;https://www.technologiesinindustry4.com/2021/07/python-image-handling-libraries.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>How I double my salary package in a year, Web designer to Python Developer.</title>
      <author>Shivam Rohilla</author>
      <pubDate>Sun, 01 Aug 2021 18:23:47 +0000</pubDate>
      <link>https://dev.to/shivamrohilla/how-i-double-my-salary-package-in-a-year-web-designer-to-python-developer-3nm</link>
      <guid>https://dev.to/shivamrohilla/how-i-double-my-salary-package-in-a-year-web-designer-to-python-developer-3nm</guid>
      <description>&lt;p&gt;Hello guys, in this post I'll tell you about how I double my salary in a year.&lt;br&gt;
I started my career as a web designer, I learned HTML, CSS, Js and PHP and MySQL, I my got my first job as a web designer on January 2020, they gave me only 9k/mo, my first salary was 9k INR only, and I travelled daily for 3 hours and after job I took the metro and come to home and rest for 5-10 mints and go to gym, because gym is very important. It helps me to reduce my stress and all anger, and after 3 months Corona virus is came and everyone knows that how dangerous it is, and in lockdown I applied for a new job and I got a job in lockdown as a web designer and that company gave me 15k/MO INR, then I started learning Python from YouTube, I learned python in 4months and I practice python at full night's and after python I decided to learn Django framework from YouTube and I learned Django in 2 months, and I practiced this for 2 months, and after that I applied for a new job and in December 2020 a company hired me in 18k/mo INR, and after this, but that company was fraud, and after this company I got job offer as a Django Developer and that company hired me in 25k/Mo, I worked there only for one month, because my dad was passed away because of Corona, I ask them for money, for my father but they denied and I leave that company, and in that company there's no humanity they are very cruel, but after 2 weeks, I cleared a interview in an International company, and this company is a game changer for my career, they hired me as a Software Engineer and my package is 4.5 Lacs per annum, 32k/Mo. I just want to say one thing that always believe in God, God is everything ‚ù§Ô∏è.&lt;br&gt;
Always trying, do work hard&lt;br&gt;
and the most important thing be positive.&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>python</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
