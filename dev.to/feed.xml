<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Style your frontend with a engineering flavour by using JSS</title>
      <author>Damir Drempetiƒá</author>
      <pubDate>Mon, 10 May 2021 09:19:20 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/style-your-frontend-with-a-engineering-flavour-by-using-jss-4h06</link>
      <guid>https://dev.to/bornfightcompany/style-your-frontend-with-a-engineering-flavour-by-using-jss-4h06</guid>
      <description>&lt;p&gt;Choosing between numerous options for styling your app could be a project in and of itself. ü§Ø&lt;/p&gt;

&lt;p&gt;I've tried several styling solutions and approaches on frontend like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vanilla CSS&lt;/li&gt;
&lt;li&gt;CSS extensions like &lt;a href="https://sass-lang.com/"&gt;Sass&lt;/a&gt; or &lt;a href="https://lesscss.org/"&gt;Less&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/css-modules/css-modules"&gt;CSS modules&lt;/a&gt; (and Sass)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Projects which used them were written either with Vanilla JS or with some modern JavaScript frameworks like AngularJS, Angular 4, React ‚öõÔ∏è or even React Native.&lt;/p&gt;

&lt;p&gt;After all I have a huge favourite regarding styling options world which is not mentioned above. I would vote for it on new project anytime (sorry, there are local elections üó≥Ô∏è soon here in Croatia).&lt;/p&gt;

&lt;p&gt;To finally get closer to the point, I like to write my styles just as rest of the app. In JavaScript. Which means I use the same programming language and the same syntax both for logic and for styles. This is really cool, but it's not the main motive behind it. It's because I find JavaScript much more powerful üí™ and capable than CSS. &lt;/p&gt;

&lt;p&gt;JavaScript brings more of the engineering flavour into the app styling process. And it's possible with &lt;a href="https://cssinjs.org/"&gt;CSS-in-JS&lt;/a&gt; solutions, or shorter JSS.&lt;/p&gt;

&lt;p&gt;I used JSS for the first time while I was working on projects built with Material UI. In their &lt;a href="https://material-ui.com/styles/basics/#why-use-material-uis-styling-solution"&gt;docs&lt;/a&gt;, you can find out why they use such approach after abandoning Less and custom solution inline-styles. Actually they did some &lt;a href="https://github.com/oliviertassinari/a-journey-toward-better-style"&gt;pretty interesting comparison üìä when choosing styling solution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I've mentioned engineering flavour so let's show some examples of what I thought.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;You can simply keep any style in a variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;COLOR_PRIMARY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;COLOR_SECONDARY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#f0f0f0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also group them into a JS object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;baseTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;COLOR_PRIMARY&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could think now: nothing special, I can do that with extended CSS too. Be patient... üòÉ &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spreading-default-properties-and-overriding"&gt;
  &lt;/a&gt;
  Spreading, default properties and overriding
&lt;/h2&gt;

&lt;p&gt;Let's say we want to extend this basic title for some other use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sectionTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;baseTitle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;//override font weight from base title&lt;/span&gt;
  &lt;span class="nx"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="c1"&gt;//extend base title&lt;/span&gt;
  &lt;span class="nx"&gt;fontFamily&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;"Roboto", "Helvetica", "Arial", sans-serif&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;fontStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;italic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Notice that you don't need to learn any new syntax, you actually write CSS but you just use &lt;code&gt;camelCase&lt;/code&gt; instead of the &lt;code&gt;kebab-case&lt;/code&gt;: &lt;code&gt;font-size&lt;/code&gt; ‚û°Ô∏è &lt;code&gt;fontSize&lt;/code&gt;. And have JS power on top of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#themes"&gt;
  &lt;/a&gt;
  Themes
&lt;/h2&gt;

&lt;p&gt;Then, you could also keep all your &lt;strong&gt;reusable&lt;/strong&gt; styles in one place and build your whole theme - which is simply JS object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;COLOR_PRIMARY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;COLOR_SECONDARY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That theme could be considered a config file but for styles üíÖ. Use &lt;a href="https://material-ui.com/customization/default-theme/#explore"&gt;Material UI theme&lt;/a&gt; for inspiration. From breakpoints, typography to colour palette and spacings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrate-jss-with-react"&gt;
  &lt;/a&gt;
  Integrate JSS with React
&lt;/h2&gt;

&lt;p&gt;There is a &lt;a href="https://cssinjs.org/jss-api"&gt;JSS Core&lt;/a&gt; library which can be used in any Javascript app, but React developers will be more interested in &lt;a href="https://cssinjs.org/react-jss"&gt;React-JSS&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamic-values"&gt;
  &lt;/a&gt;
  Dynamic Values
&lt;/h3&gt;

&lt;p&gt;Give attention to &lt;a href="https://cssinjs.org/react-jss#dynamic-values"&gt;Dynamic values&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;JSS uses Hooks API where you can use hooks like &lt;code&gt;createUseStyles&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;There is a cool example I will borrow from JSS docs about how to start with it. I will just separate a style from components, because it is always a good practice not to make a big clutter in one file. Also, it reminds of the CSS modules approach which have a separate isolated style for each component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createUseStyles&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-jss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createUseStyles&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;myButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spacing&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;myLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;labelColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fontStyle&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how elegantly you can change the style depending on props values passed from the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStyles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myLabel&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;labelColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;fontStyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;italic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#theming"&gt;
  &lt;/a&gt;
  Theming
&lt;/h3&gt;

&lt;p&gt;Besides hook for creating style there is the &lt;code&gt;useTheme&lt;/code&gt; combined with a &lt;code&gt;ThemeProvider&lt;/code&gt; wrapper. It also provides a &lt;a href="https://cssinjs.org/react-jss/#theming"&gt;theming solution&lt;/a&gt; which makes it a lot easier to start writing themed apps with reusable styles, and to quick start your new project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#would-you-give-it-a-try"&gt;
  &lt;/a&gt;
  Would you give it a try?
&lt;/h2&gt;

&lt;p&gt;‚ùì What are you thoughts? &lt;br&gt;
‚ùì Which styling solution do you prefer?&lt;br&gt;
‚ùì How do you deal with theming and reusable styles?&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>javascript</category>
      <category>css</category>
      <category>react</category>
    </item>
    <item>
      <title>Solution: Count Primes</title>
      <author>seanpgallivan</author>
      <pubDate>Mon, 10 May 2021 09:17:45 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-count-primes-4ne8</link>
      <guid>https://dev.to/seanpgallivan/solution-count-primes-4ne8</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/count-primes/discuss/1200796"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-204-easy-count-primes"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/count-primes/"&gt;Leetcode Problem #204 (&lt;em&gt;Easy&lt;/em&gt;): Count Primes&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Count the number of prime numbers less than a non-negative number, &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;n = 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;There are 4 prime numbers less than 10, they are 2, 3, 5, 7.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;n = 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;n = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= n &amp;lt;= 5 * 10^6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;There are several ways to go about solving this problem, but the classic solution is known as the &lt;strong&gt;sieve of Eratosthenes&lt;/strong&gt;. For the sieve of Eratosthenes, we start by creating a boolean array (&lt;strong&gt;seen&lt;/strong&gt;) of size &lt;strong&gt;n&lt;/strong&gt; to represent each of the numbers less than &lt;strong&gt;n&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We start at &lt;strong&gt;2&lt;/strong&gt; and for each number processed (&lt;strong&gt;num&lt;/strong&gt;), we iterate through and mark each multiple (&lt;strong&gt;mult&lt;/strong&gt;) of &lt;strong&gt;num&lt;/strong&gt;, starting at &lt;strong&gt;num^2&lt;/strong&gt;, as seen. We start at &lt;strong&gt;num^2&lt;/strong&gt; because every multiple up to the &lt;strong&gt;num&lt;/strong&gt;'th multiple will have been guaranteed to have been seen before, since they're also a multiple of a smaller number. For example, when processing &lt;strong&gt;5&lt;/strong&gt;s, we can skip to &lt;strong&gt;25&lt;/strong&gt; because &lt;strong&gt;10&lt;/strong&gt; will have been seen when we processed &lt;strong&gt;2&lt;/strong&gt;s, &lt;strong&gt;15&lt;/strong&gt; when we processed &lt;strong&gt;3&lt;/strong&gt;s, and &lt;strong&gt;20&lt;/strong&gt; when we processed &lt;strong&gt;2&lt;/strong&gt;s.&lt;/p&gt;

&lt;p&gt;Then we move &lt;strong&gt;num&lt;/strong&gt; forward, skipping any numbers that have already been seen. By doing this, we will only stop on prime numbers, because they haven't been seen as a multiple of a previous iteration. We just have to update our count (&lt;strong&gt;ans&lt;/strong&gt;) each time we stop and then &lt;strong&gt;return ans&lt;/strong&gt; once we reach &lt;strong&gt;n&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WM7d1CX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WM7d1CX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif" alt="Visual 1"&gt;&lt;/a&gt;&lt;br&gt;
( visual from the &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes"&gt;wikipedia page on the sieve of Eratosthenes&lt;/a&gt;&lt;/strong&gt; )&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;countPrimes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;mult&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;mult&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mult&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;countPrimes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;countPrimes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;mult&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;mult&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mult&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;countPrimes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;mult&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;mult&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mult&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>4 Tips on How to Refactor Code in Visual Studio Code</title>
      <author>Alex Omeyer</author>
      <pubDate>Mon, 10 May 2021 08:12:55 +0000</pubDate>
      <link>https://dev.to/stepsize/how-to-refactor-code-in-visual-studio-code-2h9d</link>
      <guid>https://dev.to/stepsize/how-to-refactor-code-in-visual-studio-code-2h9d</guid>
      <description>&lt;p&gt;This article looks at how you can refactor your code using Visual Studio Code (VS Code) and Visual Studio Code plugins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.stepsize.com/blog/the-ultimate-engineers-guide-to-refactoring?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=1"&gt;Refactoring&lt;/a&gt; improves the code‚Äôs internal structure according to best practices or rules without altering the current behavior. You often see development teams plan a refactoring week to evaluate the code architecture and internal structure before starting a new development cycle. It's important for engineering teams to address technical issues continuously and have regular discussions about maintenance and code quality.&lt;/p&gt;

&lt;p&gt;Code refactoring is an important activity to improve the code‚Äôs quality and maintainability. It‚Äôs much easier to build new features on top of clean code, but it will also benefit you when writing tests.&lt;/p&gt;

&lt;p&gt;This article looks at how you can refactor your code using Visual Studio Code (VS Code) and Visual Studio Code plugins.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-refactoring-with-visual-studio-code-shortcuts"&gt;
  &lt;/a&gt;
  1. Refactoring with Visual Studio Code Shortcuts
&lt;/h2&gt;

&lt;p&gt;First of all, let‚Äôs use Visual Studio Code‚Äôs native shortcuts to do some basic code refactoring. We‚Äôve created a small code example using JavaScript to help you play around with these functionalities.&lt;/p&gt;

&lt;p&gt;There‚Äôs an index.js file that contains the business logic. We import a &lt;code&gt;userModule&lt;/code&gt;, retrieve a new user object, and convert the user‚Äôs name to uppercase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./modules/users/retrieve&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ben&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCaseUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Furthermore, here‚Äôs the implementation of the &lt;code&gt;userModule&lt;/code&gt;, which contains several exported functions that we use in our &lt;code&gt;index.js&lt;/code&gt; file. The file is nested in two folders. The resulting path is &lt;code&gt;/modules/users/retrieve.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;toLowerCaseUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
   &lt;span class="nx"&gt;age&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toUpperCaseUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toLowerCaseUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;toUpperCaseUser&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let‚Äôs right-click on the &lt;code&gt;getUser&lt;/code&gt; function in the &lt;code&gt;index.js&lt;/code&gt; file. You‚Äôll see different options that can help us with refactoring the code. Here‚Äôs a shortlist:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Go to definition&lt;/strong&gt;: Opens up a pane that shows you where the function has been defined&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Go to implementation&lt;/strong&gt;: Brings you to the function definition in the &lt;code&gt;modules/users/retrieve.js&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Find all references&lt;/strong&gt;: Shows you all locations where a function has been used, and it shows you every function usage within a file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above commands are most useful for quickly navigating and finding function definitions in Visual Studio Code. For instance, you want to figure out in which files a particular function has been used. Therefore, you can use the above commands to quickly solve such tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-automatically-fix-imports-and-filenames"&gt;
  &lt;/a&gt;
  2. Automatically Fix Imports and Filenames
&lt;/h2&gt;

&lt;p&gt;When refactoring code, developers often can‚Äôt resist criticizing poorly chosen filenames. On top of that, refactoring code means that you are shifting code between different files and changing the purpose of certain modules. Therefore, broken imports are all too common when code refactoring has finished. &lt;/p&gt;

&lt;p&gt;To save you from the trouble of manually scanning through all files to find spot broken imports, Visual Studio Code can help you with this. When you change a filename for the first time in Visual Studio Code, it will ask you to update imports automatically. Here, choose the ‚ÄúAlways automatically update imports‚Äù option. You can try this out by renaming the &lt;code&gt;retrieve.js&lt;/code&gt; file from the previous example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DKcMlOUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjmjoz4lmv0glos5rryy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DKcMlOUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjmjoz4lmv0glos5rryy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, create a new folder and move the &lt;code&gt;retrieve.js&lt;/code&gt; file to this folder. When doing so, VS Code will show you another pop-up message asking you if you want to automatically update imports when moving files. Again, select the ‚ÄúAlways automatically update imports‚Äù option. That‚Äôs it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-builtin-code-formatting-by-visual-studio-code"&gt;
  &lt;/a&gt;
  3. Built-in Code Formatting by Visual Studio Code
&lt;/h2&gt;

&lt;p&gt;From the &lt;a href="https://code.visualstudio.com/docs/editor/codebasics#_formatting"&gt;VS Code documentation&lt;/a&gt;, we can read how the built-in formatting option works.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;VS Code has default formatters for JavaScript, TypeScript, JSON, and HTML. Each language has specific formatting options (for example, &lt;code&gt;html.format.indentInnerHtml&lt;/code&gt;) which you can tune to your preference in your user or workspace settings. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To trigger the formatting option, you can open the Command Palette (shift + CMD + P) and look for the option ‚ÄúFormat Document‚Äù. Select this option to format your document. Most likely, this won‚Äôt change much to your code except for fixing some indentation issues. &lt;/p&gt;

&lt;p&gt;If you want Visual Studio Code to automatically trigger the ‚ÄúFormat Document‚Äù option whenever you make changes to a file, you can configure this via the &lt;a href="https://code.visualstudio.com/docs/getstarted/settings"&gt;user settings&lt;/a&gt;. We prefer to format the document whenever hitting the save button (CMD + S). To do so, open your user settings and look for the rule &lt;code&gt;editor.formatOnSave&lt;/code&gt;. Click the checkbox next to the rule to enable it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--txSA5kpp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlo8zlkiw89o63rbr6k0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--txSA5kpp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlo8zlkiw89o63rbr6k0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you can choose for &lt;code&gt;editor.formatOnType&lt;/code&gt;, which formats a line after typing, or &lt;code&gt;editor.formatOnPaste&lt;/code&gt;, which formats content when you paste it in your editor.&lt;/p&gt;

&lt;p&gt;When choosing a formatting rule, you don‚Äôt need to do anything else to enable this rule.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-custom-code-formatting-by-prettier-visual-studio-code-extension"&gt;
  &lt;/a&gt;
  4. Custom Code Formatting by Prettier Visual Studio Code Extension
&lt;/h2&gt;

&lt;p&gt;We don‚Äôt need to use the built-in code formatting tool provided by VS Code. We can disable the default language formatter and replace it with a custom language formatter or one provided by an extension like Prettier. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can also disable the default language formatter if you have another extension installed that provides formatting for the same language. (&lt;a href="https://code.visualstudio.com/docs/editor/codebasics#_formatting"&gt;Visual Studio Code documentation&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First of all, we need to find the Prettier extension in the extension pane. Make sure to select the official Prettier extension, which supports multiple languages. You can install the extension by hitting the ‚ÄúInstall‚Äù button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AB2kE9VV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtkkvbw72qj32721tc7n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AB2kE9VV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtkkvbw72qj32721tc7n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also select a specific &lt;a href="https://marketplace.visualstudio.com/items?itemName=rvest.vs-code-prettier-eslint"&gt;Prettier ESLint extension&lt;/a&gt;. However, it‚Äôs easier to use the official plugin as you can configure it for different file types. For instance, you might have CSS, JSON, and JavaScript files in a single project.&lt;/p&gt;

&lt;p&gt;To enable the Prettier formatter as our default formatter for all languages, we have to open the user settings again. Look for the following rule &lt;code&gt;editor.DefaultFormatter&lt;/code&gt; and pick the Prettier formatter called &lt;code&gt;esbenp.prettier-vscode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E04qIyrH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgaywrq1cb8luclfotfm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E04qIyrH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgaywrq1cb8luclfotfm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need to add Prettier configuration rules to tell Visual Studio Code how to format our document now. The easiest way to do so is by creating a &lt;code&gt;.prettierrc&lt;/code&gt;&lt;a href="https://prettier.io/docs/en/configuration.html"&gt;configuration file&lt;/a&gt; in the root of the project. This file will contain a JSON object which holds all the active rules. The advantage of this approach is that you can commit the configuration file to your repository to enforce the same coding standards across your team. This standardization will reduce refactoring work in the future.&lt;/p&gt;

&lt;p&gt;Here are some popular rules that can help you to refactor code quickly:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;tabWidth&lt;/strong&gt;: Specify the number of spaces per indentation-level&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;semi&lt;/strong&gt;: Print semicolons at the ends of statements&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;singleQuote&lt;/strong&gt;: Use single quotes instead of double quotes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;arrowParens&lt;/strong&gt;: Include parentheses around a sole arrow function parameter, which we want to avoid in this example.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"tabWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"semi"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"arrowParens"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"avoid"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can try out the settings by making a change in one of your files and saving it. Either, you can open the Command Palette again and choose the command ‚ÄúFormat Document‚Äù.&lt;/p&gt;

&lt;p&gt;If you want to take a look at all possible rules, you can find all options in the &lt;a href="https://prettier.io/docs/en/options.html"&gt;Prettier documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-refactoring-fun"&gt;
  &lt;/a&gt;
  Is Refactoring Fun?
&lt;/h2&gt;

&lt;p&gt;Yes, refactoring should be fun! First of all, it gives developers a break to evaluate their code, improve, and learn from their mistakes. On top of that, developers like to start from a clean codebase rather than developing new features on top of a messy codebase.&lt;/p&gt;

&lt;p&gt;When it comes to refactoring tools and plugins, you have many options to choose from. For instance, we didn‚Äôt cover the &lt;a href="https://marketplace.visualstudio.com/items?itemName=cmstead.jsrefactor"&gt;JS Refactor extension&lt;/a&gt; in the Visual Studio Code marketplace because it only offers basic refactoring options.&lt;/p&gt;

&lt;p&gt;If you want to make significant gains quickly, we recommend using Prettier. It‚Äôs a powerful refactoring tool that also helps to enforce coding style standards across your team using a Prettier configuration file. Not to mention that VSCode offers a couple of useful refactoring functions like finding all references for a function or automatically fixing imports.&lt;/p&gt;

&lt;p&gt;If you're working with a team of engineers and want to prioritise refactoring work properly, check out &lt;a href="//stepsize.com?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=1"&gt;Stepsize&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was written by &lt;a href="https://www.linkedin.com/in/michiel-mulders-013771151/"&gt;Michiel Mulders&lt;/a&gt;. Michiel is a passionate blockchain developer who loves writing technical content. Besides that, he loves learning about marketing, UX psychology, and entrepreneurship. When he‚Äôs not writing, he‚Äôs probably enjoying a Belgian beer!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>refactorit</category>
      <category>codequality</category>
      <category>vscode</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Why Tailwind? A long term user perspective</title>
      <author>Florentin / ÁèûËæ∞</author>
      <pubDate>Mon, 10 May 2021 07:37:11 +0000</pubDate>
      <link>https://dev.to/ecklf/why-tailwind-a-long-term-user-perspective-20o5</link>
      <guid>https://dev.to/ecklf/why-tailwind-a-long-term-user-perspective-20o5</guid>
      <description>&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I don't want to engage in the drama. I just think it's important to share experiences to help people make a choice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prelude"&gt;
  &lt;/a&gt;
  Prelude
&lt;/h3&gt;

&lt;p&gt;I've been using &lt;a href="https://tailwindcss.com"&gt;Tailwind CSS&lt;/a&gt; for roughly 3 years now, and it is currently my go-to solution for starting a new project.&lt;/p&gt;

&lt;p&gt;As for any of my favorite tools, I love recommending them to other fellow developers. Thus over the years, I've engaged in many conversations discussing the pros and cons of using it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The following is a collection of statements I've encountered and my stance on why I think they are not justified.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tailwind-is-for-people-who-dont-want-are-too-lazy-to-learn-css"&gt;
  &lt;/a&gt;
  ‚ÄúTailwind is for people who don't want / are too lazy to learn CSS‚Äù
&lt;/h3&gt;

&lt;p&gt;Let's start with my backstory of how I learned about Tailwind. In 2018 I decided to volunteer for a project to gain more experience building things for the web. My CSS knowledge back then was mediocre at best, and therefore I didn't enjoy participating in styling the frontend. Soon after, the project's management wanted a fresh look. One guy suggested: "Let's use Tailwind for the refresh. We use it at &lt;em&gt;(name of one of the biggest companies in Germany)&lt;/em&gt; and we love it". So I took this opportunity to learn to style for real this time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So what was the experience of learning CSS with Tailwind?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Spoiler:&lt;/strong&gt; It made me understand CSS more&lt;/p&gt;

&lt;p&gt;The reason why I didn't know much about CSS was that it just felt uncomfortable to learn. I would consider myself as a person who has a lot of grit when it comes to learning new things, but I kept getting frustrated about figuring out where to put which property to make things work. Utility classes just eliminated this issue for me because you directly see what styling affects which element. When it comes to learning new things, the initial step is the hardest, and I think utility-first played the leading role in making it &lt;em&gt;click&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Another point I would like to bring up is to figure out how to learn to make things look pretty. Most of the modern web has styling hidden behind hashed class names which may be more performant but are super intimidating for a beginner.&lt;/p&gt;

&lt;p&gt;Especially for Tailwind, there are tons of high-quality open-source projects like &lt;a href="https://github.com/vercel/commerce"&gt;Vercel's commerce&lt;/a&gt;, component platforms like &lt;a href="https://tailwindcomponents.com"&gt;tailwindcomponents&lt;/a&gt; or if you prefer videos the &lt;a href="https://www.youtube.com/tailwindlabs"&gt;Tailwind Labs YouTube&lt;/a&gt; channel. There are also tools like &lt;a href="https://usewindy.com"&gt;Windy&lt;/a&gt;, which allows you to transform page content into Tailwind-styled markup to get a better understanding.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-need-to-learn-the-syntax-and-neglect-vanilla-css"&gt;
  &lt;/a&gt;
  ‚ÄúYou need to learn the syntax and neglect vanilla CSS‚Äù
&lt;/h3&gt;

&lt;p&gt;Personally, readability has never been an issue for me to begin with, but starting from &lt;code&gt;v1&lt;/code&gt;, Tailwind has seen massive improvements in this regard. At this point, it feels like writing CSS properties in a &lt;code&gt;kebab-case&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;Some people have also raised concerns that switching to utility classes for too long will make their vanilla CSS suffer. From personal experience, I can say that I worked on projects that only use &lt;code&gt;CSS-in-JS&lt;/code&gt; libraries and I didn't face any issues transitioning over to writing regular syntax.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CSS-in-JS&lt;/code&gt; is often praised as the solution when I ask people what they are using instead. Whether or not to use &lt;code&gt;CSS-in-JS&lt;/code&gt; boils down to preference, but be aware you can use both with libraries like &lt;a href="https://github.com/ben-rogerson/twin.macro"&gt;twin.macro&lt;/a&gt; (see &lt;a href="#tailwind-adds-no-value-and-does-not-scale"&gt;Tailwind adds no value and does not scale&lt;/a&gt; on why you would still want it). As for my part, I find it easier to modify my styling without jumping around my component's file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#utility-classes-make-the-html-look-ugly-and-refactoring-harder"&gt;
  &lt;/a&gt;
  ‚ÄúUtility classes make the HTML look ugly and refactoring harder‚Äù
&lt;/h3&gt;

&lt;p&gt;Bloating the HTML by eliminating the separation of concerns is a trade-off. But what are the alternatives that work better? All I can say that I just &lt;em&gt;love&lt;/em&gt; to get an idea of how something looks by just looking at utility-flavored markup. Using components also makes this issue and the hassle of refactoring way less relevant than people make it out to be. It just takes a different approach that admittedly takes some time getting used to.&lt;/p&gt;

&lt;p&gt;I can suggest taking a look at &lt;a href="https://www.youtube.com/watch?v=J_7_mnFSLDg"&gt;Tailwind CSS Best Practice Patterns&lt;/a&gt; and Robin Malfait's &lt;a href="https://gist.github.com/RobinMalfait/490a0560a7cfde985d435ad93f8094c5"&gt;Good Example&lt;/a&gt; to get an idea of how that would look like.&lt;br&gt;
For consistency, I can also recommend having a convention for class ordering or using &lt;a href="https://github.com/ryanhhhh/headwind"&gt;headwind&lt;/a&gt; as an opinionated class sorter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-pixelperfect-designs-takes-longer"&gt;
  &lt;/a&gt;
  ‚ÄúBuilding pixel-perfect designs takes longer‚Äù
&lt;/h3&gt;

&lt;p&gt;Fortunately, this won't be an issue anymore, and you can already opt-in today! Tailwind Labs has released a &lt;a href="https://tailwindcss.com/docs/just-in-time-mode"&gt;Just-in-Time (JIT)&lt;/a&gt; preview, which allows you to inline arbitrary spacing and color values for "single-use-values". Don't overdo it though.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tailwind-builds-are-slow-and-require-extra-tooling"&gt;
  &lt;/a&gt;
  ‚ÄúTailwind builds are slow and require extra tooling‚Äù
&lt;/h3&gt;

&lt;p&gt;I mention this since JIT mode is still in preview but will eventually eliminate this issue as well. Tailwind generates lots of classes, so you need to strip out the unused ones for production builds. Back in older versions, this required setting up &lt;a href="https://github.com/FullHuman/purgecss"&gt;purgecss&lt;/a&gt;. Credit where credit's due it later was merged into Tailwind to make it even easier for people to get optimized production builds.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tailwind-does-not-provide-xyz"&gt;
  &lt;/a&gt;
  ‚ÄúTailwind does not provide XYZ‚Äù
&lt;/h3&gt;

&lt;p&gt;Tailwind was designed with customization in mind, and if you don't want to make a Plugin for it, nothing will stop you from adding a bit of custom CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tailwind-adds-no-value-and-does-not-scale"&gt;
  &lt;/a&gt;
  ‚ÄúTailwind adds no value and does not scale‚Äù
&lt;/h3&gt;

&lt;p&gt;I often hear this from people who presumably never gave the framework a proper try.&lt;/p&gt;

&lt;p&gt;The most value Tailwind adds to my projects can be summarized in two words: &lt;strong&gt;Design constraints&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using the ecosystem as a team will make you appreciate Tailwind in a scaling project as it's just so convenient to work with it. I think many people just get the wrong idea by looking at Tailwind's defaults. You can narrow down choices, or you can ditch them altogether. You don't need to keep names like &lt;code&gt;text-red-500&lt;/code&gt; and go with more generic terms. What &lt;em&gt;does&lt;/em&gt; matter is that developers can adhere to style choices from one single &lt;em&gt;Source of Truth&lt;/em&gt;. All that's left is to install autocompletion for the supported editors, and you will find yourself creating layouts at a huge pace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-should-i-use-it"&gt;
  &lt;/a&gt;
  So should I use it?
&lt;/h2&gt;

&lt;p&gt;Everything is a trade-off, and I won't force you to use Tailwind if you don't like it.&lt;/p&gt;

&lt;p&gt;Will / is there a better solution? Maybe, but I think the resources and tooling are great (if not the best) right now.&lt;/p&gt;

&lt;p&gt;Just give it a try. You can join the official Discord &lt;a href="https://discord.gg/BdzC2dWY"&gt;here&lt;/a&gt; if you have any questions.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>[Video] Manage configuration and multiple environments in Node.JS with Foal</title>
      <author>Lo√Øc Poullain</author>
      <pubDate>Mon, 10 May 2021 07:22:37 +0000</pubDate>
      <link>https://dev.to/loicpoullain/video-manage-configuration-and-multiple-environments-in-node-js-with-foal-j0m</link>
      <guid>https://dev.to/loicpoullain/video-manage-configuration-and-multiple-environments-in-node-js-with-foal-j0m</guid>
      <description>&lt;p&gt;This tutorial describes how to manage configuration with Foal across one or more environments using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON, YAML and JS files,&lt;/li&gt;
&lt;li&gt;.env files&lt;/li&gt;
&lt;li&gt;and environment variables.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also explains how to check and convert the types of configuration values.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/e_W8QnImazo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Introducing Codewell ‚Äî¬†Free Front End Coding Challenges!</title>
      <author>Moemin Mamdouh üë®‚Äçüíª</author>
      <pubDate>Mon, 10 May 2021 07:14:20 +0000</pubDate>
      <link>https://dev.to/codewell/introducing-codewell-free-front-end-coding-challenges-40ib</link>
      <guid>https://dev.to/codewell/introducing-codewell-free-front-end-coding-challenges-40ib</guid>
      <description>&lt;p&gt;Hi everyone! Can't believe about to show off something my friend and I have been working on for the past 3 months, it still doesn't feel real!&lt;/p&gt;

&lt;p&gt;I'm a Product Designer who's always been adamant about learning coding but never got around to actually doing it (I'm okay with HTML and CSS skills) but I have noticed that I always design and code the frontend just for fun and in the process, I learn a lot from Google and Youtube. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I'd like to introduce to you &lt;a href="https://codewell.cc"&gt;Codewell&lt;/a&gt;&lt;/strong&gt; ‚Äî improve your HTML and CSS skills by practicing on real design templates.&lt;/p&gt;

&lt;p&gt;We‚Äôre starting off the release with 9 free templates ‚Äî our goal is to build a growing community of developers eager to learn and share their solutions, and there‚Äôs no better way to do that but by making the templates accessible to everyone.&lt;/p&gt;

&lt;p&gt;We'd love it if you take a look at Codewell and jot down your thoughts!&lt;/p&gt;

&lt;p&gt;Looking forward to seeing you on Codewell!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Understanding Docker: part 32 ‚Äì Networks</title>
      <author>Aur√©lie Vache</author>
      <pubDate>Mon, 10 May 2021 07:12:48 +0000</pubDate>
      <link>https://dev.to/aurelievache/understanding-docker-part-32-networks-38gj</link>
      <guid>https://dev.to/aurelievache/understanding-docker-part-32-networks-38gj</guid>
      <description>&lt;p&gt;Understanding Docker can be difficult or time-consuming. In order to spread knowledge about Cloud technologies I started to create sketchnotes about Docker. I think it could be a good way, more visual, to explain Docker (and other technologies like Kubernetes and Istio).&lt;/p&gt;

&lt;p&gt;We continue the series of Docker sketchnotes with a focus about Docker networking.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TrtAVuqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th82459087ewajcdhdnb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TrtAVuqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th82459087ewajcdhdnb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QOi-8HYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtuekxbuewqa210c3brz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QOi-8HYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtuekxbuewqa210c3brz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wRpHatsE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvko9ozsv55zw3z5efda.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wRpHatsE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvko9ozsv55zw3z5efda.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9I5QwlR---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yn2hciyc6avt3pwug914.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9I5QwlR---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yn2hciyc6avt3pwug914.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YMQso4pU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv3t9zrub9g65k56tq8n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMQso4pU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv3t9zrub9g65k56tq8n.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hIhH8r2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6df0qb453rwtdxkrgg2i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hIhH8r2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6df0qb453rwtdxkrgg2i.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As usual, if you like theses sketchnotes, you can follow me, and tell me what do you think. I will publish others sketchs shortly :-).&lt;/p&gt;

&lt;p&gt;If you are interested, I published all the sketchnotes on Docker (and new ones!) to make a "book" of 93 pages: &lt;a href="https://gumroad.com/aurelievache#YTLzM"&gt;"Understanding Docker in a visual way"&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>beginners</category>
      <category>cloud</category>
    </item>
    <item>
      <title>AWS open source news and updates #67</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 10 May 2021 06:59:30 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-67-1jn0</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-67-1jn0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#may-10th-2021-instalment-67"&gt;
  &lt;/a&gt;
  May 10th, 2021 - Instalment #67
&lt;/h2&gt;

&lt;p&gt;Newsletter #67. &lt;/p&gt;

&lt;p&gt;This week more great open source projects for you to get stuck into. The big news last week was the release in alpha of the new Rust SDK for AWS, so make sure you check that out if you are exploring the world of Rust. We also have a couple of interesting new projects on awslabs, always a great place to explore if you have the time, awsclii a nice little tool that generates groovy ascii graphics as well as some significant updates to some projects I have covered in earlier newsletters. As always AWS and Community blog posts covering Apache Airflow, Apache Kafka, Pixie, Kubernetes, cdk8s and CDK and many more. If you missed out on AWS Container Day at Kubecon, check out the links to the sessions. To finish off we have the usual events and an interesting video on open source documentation.&lt;/p&gt;

&lt;p&gt;Before you dive in, a few short notices you should read.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python 2.7 in AWS Chalice&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On July 15, 2021, AWS will publish a minor version update for AWS Chalice that will require Python 3.6 or greater, formally ending our support for Python 2.7. You can read more in the post from James Saryerwinnie,&lt;br&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/hd"&gt;Announcing the end of support for Python 2.7 in AWS Chalice&lt;/a&gt; which provides more details as well as some options for what you can do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you want to write a blog on the AWS open source blog?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am always looking our for new content that we can share with readers of the AWS open source blog, so if you have some great content you would love to share, please get in touch. It has been really good over the past year to see many builders share their open source stories/projects/knowledge, and we can help you through the process, so don't worry if you have never done this before.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Give your project some love&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://aws-oss.beachgeek.co.uk/gz"&gt;this tweet from David Boyne&lt;/a&gt; if you have an open source project that you might want to benefit from this tool David is developing. From the short video, it looks really nice and one of the best ways to help raise awareness and get interest in your project is having clear documentation. This could be a great way to help with that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feedback please&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please let us know howe are doing by &lt;a href="https://eventbox.dev/survey/UZS3EF5"&gt;completing this very short survey&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: iliana etaoin, Jesse Butler, Matt Hansen, David Boyne, Jilles van Gurp, Matthew Lau, Heitor Lessa, Joshua McKiddy, Valter Silva, Brent Langston, Adam Keller, St√©phane Maarek, Manabu McCloskey, Nima Kaviani, Rob Hilton, Jeremy Schiefer, Fabio Nonato de Paula, Mahadevan Balasubramaniam, James Saryerwinnie, Colin Bookman, Mark Carter, Srihari Prabaharan, Rucha Deshpande, Jason Nichols, Ron Xing, Yudho Ahmad Diponegoro, Dirk Boekee, Matt Coulter, Anna Geller, Vu Dao and Noƒçnica Fee.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#latest-from-open-source-projects"&gt;
  &lt;/a&gt;
  Latest from open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;aws-sdk-rust&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hs"&gt;aws-sdk-rust&lt;/a&gt; last week we released the alpha of the new AWS SDK for Rust developers. During the alpha, you can install the SDK via a Git dependency and this will be published to crates.io when the SDK is Generally Available. You can read more about this from the launch blog post from iliana etaoin, &lt;a href="https://aws-oss.beachgeek.co.uk/ht"&gt;A New AWS SDK for Rust ‚Äì Alpha Launch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;awscii-cli&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h5"&gt;awscii-cli&lt;/a&gt; folks that know me understand how much I love retro/ascii art/graphics, so when I saw the latest project from the lovely folks at the MatHem tech team I got super excited. This is an open source tool that renders ASCII-art graphs from AWS resource metrics. The purpose of this tool is to give cloud engineers instant access to their resources' graphs without context switching into the AWS console. Check out this little animated gif demo to see more, then head over and check out the project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--paifeH1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/mhlabs/awscii-cli/main/images/demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--paifeH1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/mhlabs/awscii-cli/main/images/demo.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;node-go-live&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hu"&gt;node-go-live&lt;/a&gt; the folks at Eyevinn Technology released this node package that provides the functionality to build an API layer on top of AWS Media Services to automate and simplify setting up a media pipeline for live using RTMP as the video signal contribution protocol. If you work with AWS Media Services, this is going to come in real handy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-auto-inventory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h6"&gt;aws-auto-inventory&lt;/a&gt; this very handy new tool, AWS Auto Inventory, allows you to quickly and easily generate inventory reports of your AWS resources. Check out the repo to take a look at what those reports look like and how configurable this tool is. I think a lot of folks are going to find this tool very useful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MWT_ZFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/aws-samples/aws-auto-inventory/blob/master/clencli/terminalizer/run.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MWT_ZFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/aws-samples/aws-auto-inventory/blob/master/clencli/terminalizer/run.gif%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;assisted-log-enabler-for-aws&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h7"&gt;assisted-log-enabler-for-aws&lt;/a&gt; this is an interesting tool that is for customers who do not have logging turned on for various services, and lack knowledge of best practices and/or how to turn them on. Check out the README to find out more details as to which AWS service logs it can enable, and more about the typical use cases where this might be useful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3JnqJm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awslabs/assisted-log-enabler-for-aws/blob/main/diagrams/assisted_log_enabler.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3JnqJm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awslabs/assisted-log-enabler-for-aws/blob/main/diagrams/assisted_log_enabler.png%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-react-elasticsearch-terraform&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h3"&gt;aws-react-elasticsearch-terraform&lt;/a&gt; The right to study/modify/use that open source gives you is what this project is all about, and is a complete sample project/architecture from Matthew Lau that uses a number of open source technologies to build a sample todo application that is perhaps a little over-engineered but you can re-purpose potentially for your own needs. It uses Terraform to deploy, and this is on my todo list for the weekend..see what I did there :-)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PKdSqgNP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/MatthewCYLau/aws-react-elasticsearch-terraform/blob/master/img/aws-elasticsearch.JPG%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PKdSqgNP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/MatthewCYLau/aws-react-elasticsearch-terraform/blob/master/img/aws-elasticsearch.JPG%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, if you are a fan of Terraform then you should check out AWS Hero Anton Babenko's weekly Terraform newsletter which you can &lt;a href="https://aws-oss.beachgeek.co.uk/hq"&gt;sign up for here&lt;/a&gt;. The &lt;a href="https://aws-oss.beachgeek.co.uk/hr"&gt;latest edition, #40&lt;/a&gt; is jam packed with great Terrform resources and whilst not all the content covers AWS, there is plenty of relevant AWS content on a regular basis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tool-compare&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/iacsecurity/tool-compare"&gt;tool-compare&lt;/a&gt; a nice simple tool helps you compare various infrastructure as code (IaC) open source security tools. This allows you to see what the tool can do, and how it compares, before even installing it. Currently supporting Checkov, Indeni Cloudrail,Kics,   Snyk, Terrascan and Tfsec.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;AWSsert&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hv"&gt;AWSsert&lt;/a&gt; this Python library popped up on my radar over the weekend, and is a library providing declarative assertions about AWS resources to your tests. Installing the package will make AWSserts extra assertions available to all of your tests. Assertions are attached directly to boto3 resource objects, allowing you to write clean and declarative tests. Whilst only a subset of AWS Services is currently supported, one to watch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;other open source project updates&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h0"&gt;es-kotlin-client&lt;/a&gt; - es-kotlin-client is an open source tool from Jilles van Gurp that provides a friendly Kotlin API on top of the official Elastic Java client, that adds kotlin DSLs, support for co-routines, and more to the official Java client.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h1"&gt;aws-graviton-getting-started&lt;/a&gt; - updated last week, this project  helps new users start using the Arm-based AWS Graviton and Graviton2 processors and has been updated to include .NET/.NET Core &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h4"&gt;aws-lambda-powertools-python&lt;/a&gt; big release last week from one of the most loved projects that I know about, Lambda powertools. This release has three major goodies: 1/ Idempotency utility is now GA, 2/ New API Gateway and ALB event handler, and 3/ MANY enhancements to Logger. As AWS Community Builder Luc van Donkersgoed tweeted last week "Check out this new feature in Lambda Powertools for Python: fully managed event handling for ALB, REST and HTTP API Gateways. Just decorate your handler function with a route and boom, it works."&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, if you are a Terraform user and interested in using that to automate Amazon Lightsail deployments, then &lt;a href="https://aws-oss.beachgeek.co.uk/h2"&gt;check out this thread&lt;/a&gt; and think about supporting (up voting) some of these. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#community-open-source-posts"&gt;
  &lt;/a&gt;
  Community open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Magpie&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hg"&gt;Magpie&lt;/a&gt; is a free, open-source framework and a collection of community developed plugins that can be used to build complete end-to-end security tools such as a Cloud Security Posture Manager (CSPM). In this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/hf"&gt;Magpie RFC - Security Rules and Policies&lt;/a&gt; Jason Nichols describes the planned approach for how the open source Magpie framework will also be able to apply policies against the persisted discovery data from discovered information of your AWS resources that are persisted. To find out more about this project, check out their other blog posts including the origin story &lt;a href="https://aws-oss.beachgeek.co.uk/hh"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hm"&gt;How I Built CI/CD For Data Pipelines in Apache Airflow on AWS&lt;/a&gt; one of my favourite posts this week, Anna Geller puts together this detailed walkthrough of how you can create a CI/CD pipeline for your Apache Airflow environment, using Buddy as your CI/CD tool. Really nice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With CDK Day still fresh in my mind, it was amazing to see Matt Coulter put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/hn"&gt;CDK Day In Review&lt;/a&gt;. Consider this your essential companion when revisiting or checking out for the first time the sessions that ran over the two tracks. Great stuff.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CDK8s&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On a related note, Vu Dao put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/ho"&gt;CDK8S Example&lt;/a&gt;, that uses the CDK8s tool to generate Kubernetes YAML from code you write to describe your application using the same constructs approach that you will be familiar with in AWS CDK. This is a great primer into how this works, walking you through a sample application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#aws-open-source-posts"&gt;
  &lt;/a&gt;
  AWS open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pixie&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/he"&gt;Gathering insights on Kubernetes applications, services, and network traffic with Pixie&lt;/a&gt; Colin Bookman and Mark Carter share a great post on Pixie, an Extended Berkeley Packet Filter (eBPF) powered, open source, observability platform for Kubernetes that makes observability easily accessible to developers. The post provides more info on Pixie, how AWS is partnering with New Relic to contribute to this project and the announcement last week of AWS joining Pixies board to collaborate with New Relic on this open source project. The post provides some great links to getting started and tutorials so you should be able to try this out for yourself very quickly indeed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bwnjpeF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/28/bookman_f1_1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bwnjpeF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/28/bookman_f1_1000.png" alt="pixie"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also check out the post from Noƒçnica Fee at New Relic over on dev.to, &lt;a href="https://aws-oss.beachgeek.co.uk/hp"&gt;Pixie is now open source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Policy Agent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hj"&gt;Open Policy Agent&lt;/a&gt; (OPA) is an open source, general-purpose policy engine, which decouples policy decision-making from policy enforcement, which allows you to release, analyse, and review policies (which security and compliance teams love) without sacrificing availability or performance. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/hi"&gt;Creating a custom Lambda authorizer using Open Policy Agent&lt;/a&gt; Srihari Prabaharan and Rucha Deshpande demonstrate how you can create a custom Lambda authoriser to offload authorisation decisions by leveraging the OPA policy engine, showing how authorisation can be as straightforward as passing request headers to OPA to return a decision.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iyoJfl3G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/28/srihap_custom_lambda_f1_500.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iyoJfl3G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/28/srihap_custom_lambda_f1_500.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TiDB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hk"&gt;Achieve Better Price to Performance for TiDB on Amazon EKS with Graviton2 Processors&lt;/a&gt; Ron Xing from PingCAP, and Yudho Ahmad Diponegoro from AWS collaborate on a post that combines two of my favourite things: open source technology and AWS Graviton2 processors. In this post you will hear how TiDB benchmarking was undertaken using a number of different benchmarks to provide a much better price/performance result. I always recommend that customers look to use these kinds of posts as helpful illustrations only and that you should look to benchmark your own workloads, leveraging the how-to and other nuggets provided to help you with that effort.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AkHW69MM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/cb4e5208b4cd87268b208e49452ed6e89a68e0b8/2021/05/05/Pingcap-TIDB-Cluster-on-EKS-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AkHW69MM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/cb4e5208b4cd87268b208e49452ed6e89a68e0b8/2021/05/05/Pingcap-TIDB-Cluster-on-EKS-1.png" alt="benchmark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spinnaker Keel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ha"&gt;How to deploy Spinnaker Keel on Amazon EKS&lt;/a&gt; Manabu McCloskey, Nima Kaviani, and Rob Hilton look at the process of deploying Spinnaker core micro services and Keel to a Kubernetes cluster and then deploying a sample Kubernetes application using Keel. Spinnaker is a continuous delivery platform for releasing software changes rapidly and reliably that was open sourced by Netflix, and Keel is an optional micro service of Spinnaker that enables the GitOps experience. To find out more, read on...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PyTorch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hb"&gt;Achieve 12x higher throughput and lowest latency for PyTorch Natural Language Processing applications out-of-the-box on AWS Inferentia&lt;/a&gt; winner of this weeks longest blog post title, we have Fabio Nonato de Paula and Mahadevan Balasubramaniam who show you how to optimise running a NLP-based solution using HuggingFace Transformers pretrained BERT base models, with no modifications to the model and one-line code change at the PyTorch framework level that achieves 12 times higher throughput at 70% lower cost. This is done using AWS Inferentia instance types, leveraging the open source &lt;a href="https://aws-oss.beachgeek.co.uk/hc"&gt;Neuron SDK's&lt;/a&gt; capabilities for PyTorch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Miywx8U0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/04/29/topPicture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Miywx8U0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/04/29/topPicture.png" alt="graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ROS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/gu"&gt;AWS RoboMaker now supports ROS2 Foxy Fitzroy featuring Navigation2&lt;/a&gt; Matt Hansen provides an update on the latest ROS2 release,  Foxy Fitzroy, and how you can now use this when using AWS RoboMaker. In this post, Matt takes a look at Navigation2 (Nav2) which is the second generation of the ROS Navigation software stack, enabling robots to move autonomously from point A to B. He covers the main features and architecture as well as getting you started with Nav2 in AWS RoboMaker. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cWciLkrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/a9334987ece78b6fe8bf130ef00b74847c1d3da6/2021/05/03/figure-d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWciLkrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/a9334987ece78b6fe8bf130ef00b74847c1d3da6/2021/05/03/figure-d.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/gv"&gt;Planning Kubernetes Upgrades with Amazon EKS&lt;/a&gt; Jesse Butler kicks off what will be a new series of blog posts on the Containers blog covering new features as well as calling out specific changes that you should make note of when planning your cluster upgrades. Jesse kicks this series off with this post taking a look at Kubernetes version 1.19, and shares a broader perspective on versions and observations of running this version of Kubernetes. If you do containers, this is a must read this week.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---DiSmNZx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/05/01/EKS-Lifecycle-Management.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DiSmNZx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/05/01/EKS-Lifecycle-Management.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SimpleSAMLphp&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h9"&gt;Enabling Federation with SimpleSAMLphp and Amazon AppStream 2.0&lt;/a&gt; Jeremy Schiefer writes about an old favourite project of mine that I have used many times in the past, SimpleSAMLphp. This is an open-source project written in native PHP that deals with authentication for SAML 2.0 as a Service Provider and as an Identity Provider. In this post, Jeremy explains how to configure federated user access for Amazon AppStream 2.0 for customers already using SimpleSAMLphp.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SRT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Secure Reliable Transport (SRT) is an open source video transport protocol that optimises video streaming performance, and in this post, &lt;a href="https://aws-oss.beachgeek.co.uk/hl"&gt;Getting started with SRT inputs in AWS Elemental Live&lt;/a&gt;, Dirk Boekee dives deeper into SRT and then shows you how you can integrate this with AWS Elemental Live.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azs6EE5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fb644351560d8296fe6da332236b1f8d61b2828a/2021/05/05/Picture1-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azs6EE5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fb644351560d8296fe6da332236b1f8d61b2828a/2021/05/05/Picture1-1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h8"&gt;Securing Apache Kafka is easy and familiar with IAM Access Control for Amazon MSK&lt;/a&gt; this guest post from AWS Data Hero St√©phane Maarek takes a look at how easy it is to secure an Amazon MSK cluster and Apache Kafka with IAM Access Control, showing you how to configure access from your developer tooling. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4-fxTQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/05/06/bdb1447-access-control-msk-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4-fxTQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/05/06/bdb1447-access-control-msk-1.jpg" alt="arch"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Prometheus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you missed this last week, then this will be good news as we announced reducing the price of metric samples ingested by up to 84% for Amazon Managed Service for Prometheus (AMP). Amazon Managed Service for Prometheus (AMP) is a fully managed Prometheus-compatible monitoring service that makes it easy to monitor containerised applications at scale. With AMP, you can use the open source Prometheus Query Language (PromQL) to monitor the performance of containerised workloads on AWS or on-premises. AMP automatically scales the ingestion, storage, and querying of operational metrics (from, for example, your Amazon Kubernetes Service (Amazon EKS) clusters) as workloads grow or shrink, and is integrated with AWS security services such as AWS Identity and Access Management (IAM), AWS PrivateLink, and AWS CloudTrail to enable fast and secure access to data.&lt;/p&gt;

&lt;p&gt;Find out more by reading the post, &lt;a href="https://aws-oss.beachgeek.co.uk/gx"&gt;AWS announces a price reduction for Amazon Managed Service for Prometheus (AMP)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elasticsearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Elasticsearch Service now offers instances from the AWS Graviton2 instance family. Instance types include general purpose (M6g), compute optimized (C6g), and memory optimized (R6g, R6gd). Customers can enjoy up to 38% improvement in indexing throughput, 50% reduction in indexing latency, and 30% improvement in query performance when compared to the corresponding x86-based instances from the current generation (M5, C5, R5). &lt;/p&gt;

&lt;p&gt;Amazon Elasticsearch Service Graviton2 instances support Elasticsearch version 7.9 and above. The instances also include support for all recently launched features like encryption at rest and in-flight, role-based access control, cross-cluster search, Auto-Tune, Trace Analytics, Kibana Reporting, and UltraWarm.&lt;/p&gt;

&lt;p&gt;Amazon Elasticsearch Service Graviton2 instances provide up to 44% price/performance improvement over previous generation instances. Further savings are available via reserved instance (RI) pricing for these instances.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Porting Assistant for .NET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In case you missed this last week, Porting Assistant for .NET is now available as a Visual Studio IDE extension. With this release, developers can access Porting Assistant for .NET directly from the Visual Studio IDE to assess incompatibilities and be more productive with an integrated experience for porting their .NET applications. Along with rich source code editing features provided by the IDE, this extension provides developers with feedback on lines of code that need to be modified to make the source code compatible with .NET Core. Developers can now run automated porting and take advantage of continuous assessment of incompatibilities as they make updates to the code.&lt;/p&gt;

&lt;p&gt;Porting Assistant for .NET is an open source analysis tool that scans .NET Framework applications and generates a .NET Core or .NET 5 compatibility assessment, helping you port your applications to Linux faster. Porting .NET Framework applications to .NET Core or .NET 5 helps customers take advantage of the performance, cost savings, and the robust Linux ecosystem.&lt;/p&gt;

&lt;p&gt;The new Porting Assistant for .NET extension is available for download through the Visual Studio marketplace &lt;a href="https://aws-oss.beachgeek.co.uk/gw"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FreeRTOS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FreeRTOS version 202104.00 includes a new managed over-the-air update (OTA) library, coreMQTT-Agent library and the AWS IoT Device Defender custom metrics feature as generally available. Developers can use these libraries to update firmware, manage IoT device fleets, design multi-threaded applications, and monitor fleet metrics for their IoT devices.&lt;/p&gt;

&lt;p&gt;The OTA library makes it easier to download and perform cryptographic verification of firmware updates. You can use the OTA library with your preferred MQTT library, HTTP library, and underlying operating system (e.g. FreeRTOS, Linux). The coreMQTT-Agent library manages the MQTT connection by serializing the access to the coreMQTT library and reducing implementation overhead (e.g., the need for repeated calls to the process loop from the application). This allows your multi-threaded applications to share the same MQTT connection, and enables you to design an embedded application without having to worry about thread safety. See coreMQTT-Agent demo that uses OTA, Device Shadow, and Device Defender in multiple threads. The Device Defender library enables you to send device metrics to the AWS IoT Device Defender service. This library also supports custom metrics, a feature that helps you monitor operational health metrics that are unique to your fleet or use case. For example, you can define a new metric to monitor the memory usage or CPU load on your devices. These libraries have been optimized for modularity and memory usage for constrained microcontrollers, and have undergone code quality checks (e.g. MISRA-C compliance, Coverity static analysis), and memory safety validation with the C Bounded Model Checker (CBMC) automated reasoning tool.&lt;/p&gt;

&lt;p&gt;You can read more in the announcement, &lt;a href="https://aws-oss.beachgeek.co.uk/gy"&gt;FreeRTOS 202104.00 includes new managed OTA and MQTT capabilities for IoT applications&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#aws-container-day-at-kubecon"&gt;
  &lt;/a&gt;
  AWS Container Day at KubeCon
&lt;/h3&gt;

&lt;p&gt;If you missed it last week, then don't worry. You can now sit back and take in over the next eight hours all the content you need about Amazon EKS and Kubernetes at AWS, hosted by Brent Langston and Adam Keller of Containers from the Couch&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MZ-4HzOC_ac"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-of-the-week"&gt;
  &lt;/a&gt;
  Video of the week
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Benefits of Open-sourcing Content with Andrew Etter of Amazon Web Services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Andrew Etter, the Senior Technical Writer at Amazon Web Services, shares his journey in the field of technical writing in this video, looking at the documentation process at Amazon Web Services and how it is necessary to make the content accessible to users.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pcz6qGrLrn4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Building And Maintaining Your Own Secure Container OS&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 13th 9am PST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Curtis Rissi, a Principal Partner SA at AWS will walk attendees through the Bottlerocket (an open-source Linux-based operating system meant for hosting containers) build process, and provide some key use cases for customisation: how to add new configuration options; how to add new packages; how to configure your own update repositories; how to add security policy; and other common customisations. &lt;/p&gt;

&lt;p&gt;Find out more and to register, click &lt;a href="https://aws-oss.beachgeek.co.uk/ed"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ROS 2 Industrial Training (Europe)&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 18th - 21st&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you were looking to increase your knowledge of open source robotics, then this training event might be of interest. Being held over 4 days, this is an industry focused event, that teaches the basics of ROS 2&lt;br&gt;
and how to use ROS 2 for manipulation and for navigation. The class is completed by a session of best&lt;br&gt;
practices, with the goal of the training is to get you started in developing with ROS. This is not a free event, so check the prices in the links, which you can &lt;a href="https://www.eventbrite.de/e/ros-2-industrial-training-europe-may-2021-tickets-149655392307"&gt;find here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mobile and Front-End Live&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 25th, 9:00 - 15:00 PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a LIVE streamed event on Twitch  focused on accelerating full-stack mobile and web development. Learn about AWS Amplify, a set of purpose-built tools and services for front-end web and mobile developers that simplify app development. Deep dive into GraphQL and AWS AppSync, a fully-managed GraphQL service that improves app performance and developer productivity.&lt;/p&gt;

&lt;p&gt;You can read more about what you can expect in the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/f4"&gt;Mobile and Front-End Live, May 25&lt;/a&gt; and &lt;a href="https://aws-oss.beachgeek.co.uk/f3"&gt;register via this link&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>It's out now - Berry Free React Admin Template</title>
      <author>Rakesh S Nakrani</author>
      <pubDate>Mon, 10 May 2021 06:28:03 +0000</pubDate>
      <link>https://dev.to/rakesh_nakrani/it-s-out-now-berry-free-react-admin-template-hk3</link>
      <guid>https://dev.to/rakesh_nakrani/it-s-out-now-berry-free-react-admin-template-hk3</guid>
      <description>&lt;p&gt;It's finally here. Berry open-source react admin template is available to download. &lt;/p&gt;

&lt;p&gt;If you don't know about Berry - Here is my post on &lt;a href="https://dev.to/rakesh_nakrani/all-you-need-to-know-about-berry-react-li6"&gt;Everything about Berry&lt;/a&gt;. This product is minimal yet beautiful for your next React backend project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Berry is managed by team &lt;a class="mentioned-user" href="https://dev.to/codedthemes"&gt;@codedthemes&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have made lots of design Iteration and usability testing to overcome the customer‚Äôs pain points. Our customer-first approach gives us the motivation towards the Berry journey. You feel amazed after seeing the Berry User Interface.&lt;/p&gt;

&lt;p&gt;It is build using Material-UI a top-rated Material design React component library. For newcomers React is an open-source library, the most popular at this moment which actively supported by Facebook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-berry"&gt;Why Berry?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#technology-stack"&gt;Technology Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-berry"&gt;
  &lt;/a&gt;
  Why Berry?
&lt;/h3&gt;

&lt;p&gt;Berry brings everything you need for dashboard development. We have added the following features in the initial release.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modern aesthetics UI design&lt;/li&gt;
&lt;li&gt;Material UI components&lt;/li&gt;
&lt;li&gt;Fully Responsive, all modern browser supported&lt;/li&gt;
&lt;li&gt;Easy to use code structure&lt;/li&gt;
&lt;li&gt;Flexible &amp;amp; High-Performance code&lt;/li&gt;
&lt;li&gt;Easy Documentation Guide&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#free-version"&gt;
  &lt;/a&gt;
  Free version
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Preview&lt;/li&gt;
&lt;li&gt;Download from &lt;a href="https://github.com/codedthemes/berry-free-react-admin-template"&gt;Github&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#pro-version"&gt;
  &lt;/a&gt;
  Pro version
&lt;/h5&gt;

&lt;p&gt;Berry is soon available to purchase. Expected to launch on mid of May-2021&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berrydashboard.io"&gt;Preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Purchase from Material UI Store&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;Clone from GitHub&lt;br&gt;
&lt;code&gt;git clone https://github.com/codedthemes/berry-free-react-admin-template.git&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;Berry documentation helps you out in all aspects from installation to deployment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technology-stack"&gt;
  &lt;/a&gt;
  Technology Stack
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://material-ui.com"&gt;Material-UI&lt;/a&gt; Component library.&lt;/li&gt;
&lt;li&gt;Built with React Hooks API.&lt;/li&gt;
&lt;li&gt;Redux &amp;amp; React Context API for State Management.&lt;/li&gt;
&lt;li&gt;React Router for Navigation Routing.&lt;/li&gt;
&lt;li&gt;Support of react-script.&lt;/li&gt;
&lt;li&gt;Code Splitting.&lt;/li&gt;
&lt;li&gt;CSS-in-JS where CSS is composed using JavaScript instead of defined in external files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h3&gt;

&lt;p&gt;Please generate a &lt;a href="https://github.com/codedthemes/berry-free-react-admin-template/issues"&gt;GitHub issue&lt;/a&gt; if you found a bug in any version. We love to resolve any issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Free&lt;/strong&gt; version cover under &lt;a href="https://github.com/codedthemes/datta-able-bootstrap-dashboard/blob/master/LICENSE"&gt;MIT&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-us"&gt;
  &lt;/a&gt;
  Follow us
&lt;/h3&gt;

&lt;p&gt;Website &lt;a href="https://berrydashboard.io"&gt;https://berrydashboard.io&lt;/a&gt;&lt;br&gt;
Blog &lt;a href="https://blog.berrydashboard.io"&gt;https://blog.berrydashboard.io&lt;/a&gt;&lt;br&gt;
CodedThemes &lt;a href="https://codedthemes.com"&gt;https://codedthemes.com&lt;/a&gt;&lt;br&gt;
Dribbble &lt;a href="https://dribbble.com/codedthemes"&gt;https://dribbble.com/codedthemes&lt;/a&gt;&lt;br&gt;
Facebook &lt;a href="https://www.facebook.com/codedthemes"&gt;https://www.fb.com/codedthemes&lt;/a&gt;&lt;br&gt;
Twitter &lt;a href="https://twitter.com/codedthemes"&gt;https://twitter.com/codedthemes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Static Code Analyses - Terrascan, Terraform and Azure DevOps</title>
      <author>James Cook</author>
      <pubDate>Mon, 10 May 2021 06:27:17 +0000</pubDate>
      <link>https://dev.to/officialcookj/static-code-analyses-terrascan-terraform-and-azure-devops-3690</link>
      <guid>https://dev.to/officialcookj/static-code-analyses-terrascan-terraform-and-azure-devops-3690</guid>
      <description>&lt;p&gt;In my &lt;a href="https://jamescook.dev/codeanalyses-checkov-terraform-azuredevops"&gt;previous post&lt;/a&gt; I looked at Static Code Analyses with two of the three tools I am going to use in this post. We are now going to look at &lt;a href="https://github.com/accurics/terrascan"&gt;Terrascan&lt;/a&gt; as our analyses tool and have it running from CI/CD platform Azure DevOps which will also host the Terraform code we want to review.&lt;/p&gt;

&lt;p&gt;To follow with the post in configuring this setup, you will need the above mentioned tools with permissions on Azure DevOps to be able to create a Pipeline, add extensions from a marketplace and commit to a repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;As per my previous post, I will be reusing the example Terraform configuration file which contains bad practices like password in plain text. This will allow me to test the tool as it should flag some of these bad practices.&lt;/p&gt;

&lt;p&gt;This is the code example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5OJOo-MJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619359048086/_nMzNoobR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5OJOo-MJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619359048086/_nMzNoobR.png" alt="code.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my example, this is stored in a Azure DevOps repository but you can use a third party repository like GitHub as an alternative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pipeline-configuration"&gt;
  &lt;/a&gt;
  Pipeline Configuration
&lt;/h2&gt;

&lt;p&gt;We will create a separate pipeline within Azure DevOps rather than use the same one we used in the previous post (you can combine them but I will cover this later). This will be used to run Terrascan to analyse the code. You will want to open your project within Azure DevOps and go into &lt;strong&gt;Pipelines&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V2qLk6yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363601470/3IVJn3d6C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V2qLk6yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363601470/3IVJn3d6C.png" alt="1-pipelines.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you want to create a pipeline for this. Select the new pipeline option and within the new window select &lt;strong&gt;Use the classic editor&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H5Rx9LwE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363733896/_vfeOLXBz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H5Rx9LwE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363733896/_vfeOLXBz.png" alt="2-classiceditor.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you want to select the repository where the configuration file is stored. I have stored it in an Azure DevOps repository so will select this as my location.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fmqCKOeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363876562/LKhvYUEUo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fmqCKOeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363876562/LKhvYUEUo.png" alt="3-demorepo.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once selected, you will then need to select &lt;strong&gt;Empty job&lt;/strong&gt; as the template option for this pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rBE_mOlo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363999506/38kKmnKic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rBE_mOlo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363999506/38kKmnKic.png" alt="4-emptyjob.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first fields will appear asking you to give the pipeline a name and select the agent pools you want to use. For this demo, I have selected to use Hosted Agents where I will run Terrascan on an Ubuntu OS. Below are the configurations I set.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yBjxGB1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620457346436/3glSyAWc1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yBjxGB1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620457346436/3glSyAWc1.png" alt="devops_name.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After all fields are filled, you want to select the &lt;strong&gt;Run on agent&lt;/strong&gt; option and configure the agent job name. I opted to calling the agent &lt;strong&gt;Terrascan Analyses&lt;/strong&gt; as it seemed appropriate for what it is doing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qZtJ0BWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620457500596/KIm_E0CA0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qZtJ0BWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620457500596/KIm_E0CA0.png" alt="agent_name.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we are going to select the &lt;strong&gt;plus icon&lt;/strong&gt; on the run on agent field to add a job. You will be asked to select something from your currently installed extensions or from the marketplace. We will initially need to install Terraform as this is a prerequisite of Terrascan, so we will need to use the &lt;strong&gt;Terraform extension&lt;/strong&gt; from the marketplace (you may have this already so skip this step).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k1HzvMme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364620421/3xN2AXqZ9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k1HzvMme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364620421/3xN2AXqZ9.png" alt="7-terraformgetmarket.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once acquired from the marketplace you can then select to &lt;strong&gt;install Terraform&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pYNW-hI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364882704/3_XNaLmon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pYNW-hI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364882704/3_XNaLmon.png" alt="8-installterraform.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Within the Terraform configuration window of the extension, select the version of Terraform you want to run on the Hosted Agent (as of writing this, v0.15.0 of Terraform has a bug that stops the initialisation, this may cause Terrascan not to function so use an earlier version).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0-041XxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364981261/atDE04-A2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0-041XxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364981261/atDE04-A2.png" alt="terraformconfigversion.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;plus icon&lt;/strong&gt; on the &lt;strong&gt;Run on agent&lt;/strong&gt; and select the &lt;strong&gt;Bash&lt;/strong&gt; extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_trCmfqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619365206606/Hb3hZ4zKm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_trCmfqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619365206606/Hb3hZ4zKm.png" alt="9-bash.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you want to install Terrascan using the inline function. Here is what I used to install the software.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---4nrc57T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459155102/H4WpSzuXf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4nrc57T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459155102/H4WpSzuXf.png" alt="terrascan install.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repeat the process of adding another &lt;strong&gt;Bash&lt;/strong&gt; extension to the pipeline and this time we are configuring the inline so Terrascan can run the analyses and output the results into an xml file. Make sure to also tick under &lt;strong&gt;Control Options&lt;/strong&gt; heading the &lt;strong&gt;Continue on error&lt;/strong&gt; option or it will fail the pipeline run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XO-3ku3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459328127/oScV4vWyI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XO-3ku3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459328127/oScV4vWyI.png" alt="terrascan.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, select the &lt;strong&gt;plus icon&lt;/strong&gt; on &lt;strong&gt;Run on agent&lt;/strong&gt; and select the &lt;strong&gt;Publish Test Results&lt;/strong&gt; extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ekSeNcyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619365705659/EsZfM8LO7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ekSeNcyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619365705659/EsZfM8LO7.png" alt="11-publishtestresult.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we are importing the xml output from Terrascan into the test results feature in Azure DevOps. Here is the configurations I used to import.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oyAwu0AM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459414733/NEBbmSqNs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oyAwu0AM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459414733/NEBbmSqNs.png" alt="results config.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once all configured, select &lt;strong&gt;Save&lt;/strong&gt; on the Pipeline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pipeline-run"&gt;
  &lt;/a&gt;
  Pipeline Run
&lt;/h2&gt;

&lt;p&gt;You are now ready to run the pipeline. All you need to do is select the &lt;strong&gt;Run&lt;/strong&gt; option under the three dotted icon next to the pipeline name. The pipeline will report a failure if Terrascan flags something in its analyses, if nothing is flagged the pipeline will succeed.&lt;/p&gt;

&lt;p&gt;In my code, I have been flagged by Terrascan which has set the status of the pipeline build as failed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EksqImqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459759523/mwnD7Beq6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EksqImqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459759523/mwnD7Beq6.png" alt="status.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-analyses-report"&gt;
  &lt;/a&gt;
  Code Analyses Report
&lt;/h2&gt;

&lt;p&gt;Now we have the pipeline running and the report being published into the Azure DevOps test reports, we can review these reports in two location. The first is within the pipeline build, select the pipeline job and open the tab &lt;strong&gt;Tests&lt;/strong&gt;. Here you will see the tests than was ran by Terrascan, what passed and failed and reasons for this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Rwhn0vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459874390/YYoRycEzH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Rwhn0vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459874390/YYoRycEzH.png" alt="pipeline results.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the flagged test failure, you will see more details as to why it failed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KOgxuDcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459955423/PDNw1-No7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOgxuDcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459955423/PDNw1-No7.png" alt="results details.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you can view the test reports via the side menu under &lt;strong&gt;Test Plans&lt;/strong&gt; and &lt;strong&gt;Runs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q-MY_8Il--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620460084653/n_vVCe5xV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q-MY_8Il--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620460084653/n_vVCe5xV.png" alt="runs results.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can do more with Terrascan but this will not be covered in this post but future posts on the topic. In the meantime, checkout the &lt;a href="https://github.com/accurics/terrascan"&gt;Terrascan GitHub&lt;/a&gt; page for more information.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>devops</category>
      <category>security</category>
    </item>
    <item>
      <title>üß¢ Stefan's Web Weekly #18 </title>
      <author>Stefan Judis</author>
      <pubDate>Mon, 10 May 2021 06:18:47 +0000</pubDate>
      <link>https://dev.to/stefanjudis/stefan-s-web-weekly-18-2hal</link>
      <guid>https://dev.to/stefanjudis/stefan-s-web-weekly-18-2hal</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-to-web-weekly-18"&gt;
  &lt;/a&gt;
  Welcome to Web Weekly #18!
&lt;/h2&gt;

&lt;p&gt;Hello friends! The increasing number of vaccinations and today's 25¬∞C made it a perfect weekend. It slowly feels like we get a hold of all this madness here in Germany. &lt;/p&gt;

&lt;p&gt;Before we jump into web stuff, look at this badass gang of friends taking a selfie! üëá I had a good laugh about &lt;a href="https://twitter.com/JoaquimCampa/status/1386030529250832388"&gt;this Twitter thread&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fp2y519E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/lv0rwNvVdUmO9vmyGDleD/dea3f7efc10b268249cb3c2206bb9373/Screenshot_2021-05-09_at_22.30.16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fp2y519E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/lv0rwNvVdUmO9vmyGDleD/dea3f7efc10b268249cb3c2206bb9373/Screenshot_2021-05-09_at_22.30.16.png" alt="Badass animal selfie on Twitter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This week's Web Weekly includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Glue work in tech&lt;/li&gt;
&lt;li&gt;Facts about the &lt;code&gt;display&lt;/code&gt; CSS property&lt;/li&gt;
&lt;li&gt;"body-ok" in HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;... and, as always, GitHub repositories, a new Tiny Helper and some music.&lt;/p&gt;

&lt;p&gt;Ready? Steady. Go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-glue-work"&gt;
  &lt;/a&gt;
  What's "Glue work"?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8wHLr7ew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/nswSeWAZUgcYlxTn8f5ov/3e6e5a86d1a45e14d75c9a0c3f9f6621/Screenshot_2021-05-09_at_22.22.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8wHLr7ew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/nswSeWAZUgcYlxTn8f5ov/3e6e5a86d1a45e14d75c9a0c3f9f6621/Screenshot_2021-05-09_at_22.22.52.png" alt='Sketch note about Talk "being glue"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Glue work is activities that enable teams and make them successful. It can include coordinating activities, writing docs or helping out new team members. And while there's nothing wrong with glue work, people are often not recognized for their time-consuming work. Glue work can literally harm your career. &lt;/p&gt;

&lt;p&gt;If you're not familiar with the concept, check out Tanya Reilly's fantastic talk on the topic. üëá&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://noidea.dog/glue"&gt;Learn about "Glue work"&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-things-webperf-the-new-webpagetest-blog"&gt;
  &lt;/a&gt;
  All things #webperf ‚Äì the new WebPageTest blog
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ec49FR4O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/3FvI30zTgMPbBt7WF2WiCe/85c2f00210caf6280173124a6d91dc50/Screenshot_2021-05-09_at_20.25.32.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ec49FR4O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/3FvI30zTgMPbBt7WF2WiCe/85c2f00210caf6280173124a6d91dc50/Screenshot_2021-05-09_at_20.25.32.png" alt="WebPageTest Blog by Catchpoint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tim Kadlec recently joined the team working on the web performance monitoring service WebPageTest. And he didn't waste any time and published multiple excellent articles on the WebPageTest blog right away:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.webpagetest.org/posts/understanding-the-new-cumulative-layout-shift/"&gt;Diving Into the New Cumulative Layout Shift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.webpagetest.org/posts/why-first-contentful-paint-doesnt-work-as-a-cross-browser-metric/"&gt;Why First Contentful Paint Doesn't Work As a Cross-Browser Metric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.webpagetest.org/posts/extending-webpagetest-with-custom-metrics/"&gt;Extending WebPageTest with Custom Metrics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Luckily, &lt;a&gt;the blog has an RSS feed&lt;/a&gt; to keep up with all this web performance education.&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://blog.webpagetest.org/"&gt;Check the new WebPageTest blog&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bunch-of-handpicked-personal-websites"&gt;
  &lt;/a&gt;
  A bunch of handpicked personal websites
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IfWapa-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/5qFaSfqJCsFGzVELYO1nq5/35635298bc4cfeb2235ca51a517187b0/Screenshot_2021-05-09_at_22.12.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IfWapa-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/5qFaSfqJCsFGzVELYO1nq5/35635298bc4cfeb2235ca51a517187b0/Screenshot_2021-05-09_at_22.12.52.png" alt="A list of 100+ handpicked personal websites"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following resource is one for the bookmarks: if you're rebuilding your website and need some inspiration, &lt;code&gt;personalwebsites.top&lt;/code&gt; lists many good-looking sites.&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://www.personalwebsites.top/"&gt;Check personal websites&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-use-css-custom-properties"&gt;
  &lt;/a&gt;
  How do you use CSS custom properties?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w0UqzQTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/24cxg5zxuy2dCEYNHDCzX0/b8313cd959fcac3407ca8fd39711608f/Screenshot_2021-05-09_at_22.01.25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w0UqzQTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/24cxg5zxuy2dCEYNHDCzX0/b8313cd959fcac3407ca8fd39711608f/Screenshot_2021-05-09_at_22.01.25.png" alt="We had a period of a few minutes where we were talking past one another, because, as it turns out, we have completely opposite ideas about the use of CSS custom properties. I had never considered his approach, and I found it interesting enough to write this quick post."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I chatted with Peter-Paul Koch about CSS this week. He's working on a book that teaches CSS for JavaScript developers. It turned out that Peter and I approach and use CSS custom properties differently... üòÜ It's a very subtle difference and shows the power and flexibility of CSS! üí™&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://www.quirksmode.org/blog/archives/2021/05/two_options_for.html"&gt;Read about the two approaches&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#celebrate-what-you-learn"&gt;
  &lt;/a&gt;
  Celebrate what you learn!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pU7WuvLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/3LHzNg9NsdXwoGjeNkuMX/505a79575553d8025b5a673d12481f22/Screenshot_2021-05-09_at_20.39.41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pU7WuvLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/3LHzNg9NsdXwoGjeNkuMX/505a79575553d8025b5a673d12481f22/Screenshot_2021-05-09_at_20.39.41.png" alt="The bar for a TIL is literally ‚Äúdid I just learn something?‚Äù‚Äîthey effectively act as a public notebook."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A year ago, Simon Willison started publishing TIL ("Today I learned") posts. He looked back and shared his motivation for writing down all these short notes. If you want to start blogging, I highly recommend kicking it off with writing TIL posts. &lt;/p&gt;

&lt;p&gt;(&lt;a href="https://www.stefanjudis.com/today-i-learned/"&gt;I document my learnings since February 2017&lt;/a&gt;, too. üôà)&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://simonwillison.net/2021/May/2/one-year-of-tils/"&gt;Learn why TIL blogging is great&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-and-password-managers-when-input-names-matter"&gt;
  &lt;/a&gt;
  HTML and password managers ‚Äì when input names matter
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNPm8ImM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/5m9HtX1BiPkq5UqQLOMwSk/d37d0673119f1398be09833515e76287/Screenshot_2021-05-09_at_21.09.58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNPm8ImM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/5m9HtX1BiPkq5UqQLOMwSk/d37d0673119f1398be09833515e76287/Screenshot_2021-05-09_at_21.09.58.png" alt="Substack's UI and 1Password just cost me $2,023"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How do password manager browser extensions work? One might think that there's a standard to define what input fields should be filled, but often these extensions scan the DOM and try to populate the correct fields depending on their name. Timmy O'Mahony shared how an HTML input name led to a 2k$ charge he didn't even notice.&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://timmyomahony.com/blog/substacks-ui-and-1password-just-cost-me-2023-dollars"&gt;Find out what happened&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-big-benefits-of-little-changes"&gt;
  &lt;/a&gt;
  The big benefits of little changes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nsRrIrH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/1uQsgLSLNlN8Xioqa5GHIt/2ee7c19be0484397fb277ca35f1a80bb/Screenshot_2021-05-09_at_21.01.09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nsRrIrH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/1uQsgLSLNlN8Xioqa5GHIt/2ee7c19be0484397fb277ca35f1a80bb/Screenshot_2021-05-09_at_21.01.09.png" alt="I recently shipped two things at GitHub that had an impact beyond my wildest dreams. The amount of gratitude and love that spilled out of the community is like nothing I‚Äôve seen before. But the things I shipped weren‚Äôt these huge, meaty projects. They were tiny."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oldie but goldie: Joel Califa wrote a post about tiny feature releases and how they make a difference in product perception. Often it's not the "big bang release" but rather a tiny feature addition that gets people excited. Joel shares examples from GitHub and Netflix. The post is golden, not only for product managers.&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://joelcalifa.com/blog/tiny-wins/"&gt;Implement Tiny Wins in your product&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-bodyok-in-html"&gt;
  &lt;/a&gt;
  What's "body-ok" in HTML?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VfnUqv_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/46rlPAbU9oStmt3et3rXBn/957c6e3e0f54a5f0aac53114cf73a229/Screenshot_2021-05-09_at_21.27.21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VfnUqv_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/46rlPAbU9oStmt3et3rXBn/957c6e3e0f54a5f0aac53114cf73a229/Screenshot_2021-05-09_at_21.27.21.png" alt="Twitter Poll: #HTML quiz! What is ‚Äúbody-ok‚Äù? Content is king ‚Äì 20.6%, You may omit body tags ‚Äì 7.4% link's okay in body ‚Äì 10.9% There‚Äôs no such thing ‚Äì 61.1%"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jens Oliver Meiert asked the Twittersphere if the term "body-ok" is a thing in HTML. I haven't heard of it, and he explains what it's about on his blog.&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://meiert.com/en/blog/html-body-ok/"&gt;Learn about body-ok&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pro-tip-how-to-get-sites-you-use-daily-out-of-your-browser"&gt;
  &lt;/a&gt;
  Pro tip: how to get sites you use daily out of your browser
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CVwrUNy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/492LqakmgH6Ztko4woBqVv/ba5ad4564707818350139085ea5e76b5/Screenshot_2021-05-09_at_21.54.22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CVwrUNy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/492LqakmgH6Ztko4woBqVv/ba5ad4564707818350139085ea5e76b5/Screenshot_2021-05-09_at_21.54.22.png" alt='Chrome -&amp;gt; More Tools -&amp;gt; Create Shortcut " ‚òëÔ∏è  Open as Window" turns any website into a Desktop app and it is glorious! (Accessible via Dock/CMD+TAB or whatever your OS jam is) I have no idea why it is called "Create Shortcut".'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Malte Ubl shared a Chome trick that helps you deal with your most-used apps. In Chrome, you can create "Shortcuts" for a particular website (it doesn't need to be a PWA). I use separated Gmail and Google Calendar windows (shortcuts) for a while now and it works great. &lt;/p&gt;

&lt;p&gt;Give it a try!&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://twitter.com/cramforce/status/1385369724662403072"&gt;Check Malte's Tweet&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-css-display"&gt;
  &lt;/a&gt;
  Understanding CSS display
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HCGNRnr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/HzL2k1MHw0yid83xL85Qy/f3ca3be0b4366d3c628b6d6ccc52a6fe/Screenshot_2021-05-09_at_22.39.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HCGNRnr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/HzL2k1MHw0yid83xL85Qy/f3ca3be0b4366d3c628b6d6ccc52a6fe/Screenshot_2021-05-09_at_22.39.52.png" alt="Understanding Display ‚Äì Rachel Andrew"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rachel Andrew is one of these speakers that can teach you an incredible amount of knowledge in a single talk. I haven't had the time to go over all the 113 slides of Rachel Andrew's talk "Understanding Display" yet, but I'm sure it's fantastic!&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://noti.st/rachelandrew/VeraEX/understanding-display"&gt;Go over Rachel's slides&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reader-shout-out"&gt;
  &lt;/a&gt;
  Reader shout out üíô
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gyekii8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/25ZifSMNQHxZwuumAGjF6K/5076e5f15de5a2ceb413fa8f177f9e22/Screenshot_2021-05-09_at_22.43.25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gyekii8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/25ZifSMNQHxZwuumAGjF6K/5076e5f15de5a2ceb413fa8f177f9e22/Screenshot_2021-05-09_at_22.43.25.png" alt="If you‚Äôre looking for interesting newsletters, here‚Äôs one. I rarely read newsletters, but  @stefanjudis  here always seems to have a very interesting list of topics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Jules_K/status/1389176782549622785"&gt;Jules Kulcsar shared this newsletter on Twitter&lt;/a&gt;. When these Tweets enter my notifications, they make my day! &lt;/p&gt;

&lt;p&gt;Thank you, Jules! And thank you all for reading along. üíô&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-new-tiny-helper"&gt;
  &lt;/a&gt;
  A new Tiny Helper
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5BP0OcD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/4dNB9CfwaseMHzrTqmXgAp/bafd88fb4316d1e4b4ccacd127d6cfc8/Screenshot_2021-05-09_at_22.46.44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5BP0OcD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/4dNB9CfwaseMHzrTqmXgAp/bafd88fb4316d1e4b4ccacd127d6cfc8/Screenshot_2021-05-09_at_22.46.44.png" alt="grep.app screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;//grep.app&lt;/code&gt; searches code from over a half-million public repositories on GitHub. And it's very speedy!&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://grep.app/"&gt;Search GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find more single-purpose online tools on &lt;a href="https://tiny-helpers.dev/"&gt;tiny-helpers.dev&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#three-valuable-projects-to-have-a-look-at"&gt;
  &lt;/a&gt;
  Three valuable projects to have a look at
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/github/github-elements"&gt;github/github-elements&lt;/a&gt; ‚Äì  GitHub's Web Component collection.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/arzzen/git-quick-stats"&gt;arzzen/git-quick-stats&lt;/a&gt; ‚Äì A simple and efficient way to access various statistics in git repository. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/impressivewebs/frontend-feeds"&gt;impressivewebs/frontend-feeds&lt;/a&gt; ‚Äì An up to date list of RSS feeds for front-end developers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-quote-to-think-about"&gt;
  &lt;/a&gt;
  A quote to think about
&lt;/h2&gt;

&lt;p&gt;I read the news over my morning coffee usually, but there might be some truth in &lt;a href="https://twitter.com/shl/status/1384870434772946947"&gt;this week's quote from Sahil&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Read before sleeping, write after waking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#a-song-that-makes-you-stop-coding"&gt;
  &lt;/a&gt;
  A song that makes you stop coding
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQUrKZkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/XCwHDiwG5tIL6IRj3YSJG/c5cd797bc50188c56a78f0b73d06581e/Screenshot_2021-05-09_at_22.53.13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQUrKZkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/XCwHDiwG5tIL6IRj3YSJG/c5cd797bc50188c56a78f0b73d06581e/Screenshot_2021-05-09_at_22.53.13.png" alt="Cover: Mojjo, Meca, LUISAH - Love The Way"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I went out for a run today, and "Mojjo, Meca, LUISAH - Love The Way" entered my headphones. The funky house track sounds like friends, open-airs, and pure summer!&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://www.youtube.com/watch?v=d61zXt_TtQU"&gt;Listen to "Love the way"&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading!
&lt;/h2&gt;

&lt;p&gt;And that's a wrap for the eighteenth Web Weekly! If you enjoy my newsletter, I'd love you to tell others about it. ‚ô•Ô∏è&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/intent/tweet?text=I%20like%20@stefanjudis%20weekly%20newsletter&amp;amp;url=https://www.stefanjudis.com/blog/web-weekly-18/"&gt;Share it on Twitter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Forward it to someone who might like it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're not a subscriber, &lt;a href="https://www.stefanjudis.com/newsletter/"&gt;you can change that&lt;/a&gt;! üòâ&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Stay safe, and I'll talk to you next week!&lt;/strong&gt; üéâ üëã&lt;/p&gt;

&lt;p&gt;PS. I heard the cool kids use RSS. You can find &lt;a href="https://www.stefanjudis.com/feeds/"&gt;multiple feeds on my site&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Reacts useRef Hook: What It Is and How to Use It</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 10 May 2021 06:08:55 +0000</pubDate>
      <link>https://dev.to/alexdevero/reacts-useref-hook-what-it-is-and-how-to-use-it-fma</link>
      <guid>https://dev.to/alexdevero/reacts-useref-hook-what-it-is-and-how-to-use-it-fma</guid>
      <description>&lt;p&gt;React useRef hook can be helpful when you need to create mutable variables in your components without causing these components to re-render. For example, store references to elements or some other values. In this tutorial, you will learn about what React useRef hook is, how it works and how to use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-useref-hook-briefly"&gt;
  &lt;/a&gt;
  React useRef hook briefly
&lt;/h2&gt;

&lt;p&gt;The useRef hook may not be as popular as other hooks such as &lt;a href="https://blog.alexdevero.com/react-usestate-hook-in-action/"&gt;useState&lt;/a&gt;, &lt;a href="https://blog.alexdevero.com/react-useeffect-hook/"&gt;useEffect&lt;/a&gt; and &lt;a href="https://reactjs.org/docs/hooks-reference.html#usereducer"&gt;useReducer&lt;/a&gt;. Due to this, it may not be clear what is the purpose of this hook. Nonetheless, useRef hook can be very useful in certain situations. The ref, in useRef, is a shorthand for "reference".&lt;/p&gt;

&lt;p&gt;What this hook does is it allows you to store data, and persist them across renders. What's even more interesting and important, this hook does this without causing the component to re-render. This means that when you update the value stored by useRef, React will not re-render your component.&lt;/p&gt;

&lt;p&gt;The most common use case for the useRef hook is to store references to DOM nodes and React components. This then allows you to access these nodes directly and work with them as you need. This is similar to using JavaScript &lt;code&gt;querySelector()&lt;/code&gt; method to find DOM node and storing the node in a variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-useref-hook"&gt;
  &lt;/a&gt;
  Using the useRef hook
&lt;/h2&gt;

&lt;p&gt;Using the useRef hook requires few steps. The first step is about initializing the hook. You initialize the useRef hook by calling it and storing it in a variable. You can also pass some value to the hook as an argument. React will use this value as the initial value for the hook.&lt;/p&gt;

&lt;p&gt;When the useRef is used to store references to DOM nodes or React components, developers usually set the initial value to &lt;code&gt;null&lt;/code&gt;. When you initialize the hook, it will return an object. This object contains property called &lt;code&gt;current&lt;/code&gt;. The initial value you used for the hook will become the value of this property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useRef hook from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create function component:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Initialize the useRef hook&lt;/span&gt;
  &lt;span class="c1"&gt;// with null as initial value:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// Note:&lt;/span&gt;
  &lt;span class="c1"&gt;// The value of myRef now: { current: null }&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-wrapper"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello from the metaverse!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#storing-references-to-nodes-and-elements"&gt;
  &lt;/a&gt;
  Storing references to nodes and elements
&lt;/h3&gt;

&lt;p&gt;The next steps depend on what you want to do. You use the hook to store references to DOM node or React element. To do this, you find the node or element and add &lt;code&gt;ref&lt;/code&gt; attribute. The value for this attribute will be the initialized useRef hook. You will pass the variable name to this attribute.&lt;/p&gt;

&lt;p&gt;When you do this, the value of &lt;code&gt;current&lt;/code&gt; property returned by the ref object will be the element. From now, you will be able to access the element by using this &lt;code&gt;current&lt;/code&gt; property on the ref.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useRef hook from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create function component:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Initialize the useRef hook:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Create button click handler:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onButtonClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the value of input:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-wrapper"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;What's your name?&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*
          Add ref "attribute" to the input
          and pass in the created ref as a value:
        */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Create button */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onButtonClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Load text&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#useref-hook-and-storing-values"&gt;
  &lt;/a&gt;
  useRef hook and storing values
&lt;/h3&gt;

&lt;p&gt;Just as useRef can store references to nodes and elements it can also store values. This can be handy when you want to store values without triggering re-render. You can't do this with useState hook. Every update of a state value will cause re-render. That said, this is a feature, not a bug.&lt;/p&gt;

&lt;p&gt;You want to keep your component in sync with state. This is one thing useState was created to do. Using useRef hook allows you to bypass this by directly manipulating with the value of &lt;code&gt;current&lt;/code&gt; property. This property is not read-only. You can change its value manually. This allows you to use useRef to store anything you want.&lt;/p&gt;

&lt;p&gt;When you want to use useRef to store values and update them remember that these updates are side effects. As such, you should do these updates in the "layout" or "commit" phase. This is a phase when React applies any changes. To make updates to ref vales during this phase you can use &lt;code&gt;useLayoutEffect&lt;/code&gt; or &lt;code&gt;useEffect&lt;/code&gt; hooks.&lt;/p&gt;

&lt;p&gt;Aside to these two, another option for these updates are handler functions. You can create function to handle specific actions. Then, you can update ref values inside these functions. Whatever option you choose, avoid updating ref in the root of your React components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useEffect and useRef hooks from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create function component:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Initialize the useRef hook with 1 as initial value:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Don't do this - update values in root:&lt;/span&gt;
  &lt;span class="nx"&gt;renderCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Use useEffect to update "current" value&lt;/span&gt;
    &lt;span class="c1"&gt;// on every render of the component:&lt;/span&gt;
    &lt;span class="nx"&gt;renderCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="c1"&gt;// Using handler function:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onIncrementRenderCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Update "current" value manually:&lt;/span&gt;
    &lt;span class="nx"&gt;renderCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// NOTE: this log will not show up if you update&lt;/span&gt;
  &lt;span class="c1"&gt;// the value by clicking on the "Increment count" button.&lt;/span&gt;
  &lt;span class="c1"&gt;// useRef doesn't cause re-renders.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rendered!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-wrapper"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Show the number of renders: */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Number of renders: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Add button to ref's current value: */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onIncrementRenderCount&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment count&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#storing-previous-state-values-with-react-useref-hook"&gt;
  &lt;/a&gt;
  Storing previous state values with React useRef hook
&lt;/h3&gt;

&lt;p&gt;One interesting use case for useRef hook is storing previous state values. The useRef hook persists values between renders. With the help of &lt;code&gt;useEffect&lt;/code&gt; hook, you can store value of state in a ref before the value changes. This will make the old value available in the next render, through the ref.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useEffect, useRef and useState hooks from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create function component:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Add state for name:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Use useRef hook to store reference to input:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Use useRef hook to store previous name:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldNameRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// On re-render, store the old name in ref:&lt;/span&gt;
    &lt;span class="nx"&gt;oldNameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSaveNameButtonClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Update the value of name state,&lt;/span&gt;
    &lt;span class="c1"&gt;// and trigger re-render:&lt;/span&gt;
    &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// This will also trigger the useEffect which&lt;/span&gt;
    &lt;span class="c1"&gt;// will update the ref's value with the previous&lt;/span&gt;
    &lt;span class="c1"&gt;// value of "name" state.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-wrapper"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;New name: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Previous name: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;oldNameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Add button to save name: */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onSaveNameButtonClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Save name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#updating-values-rerenders-and-updating-ui"&gt;
  &lt;/a&gt;
  Updating values, re-renders and updating UI
&lt;/h2&gt;

&lt;p&gt;One thing to keep in mind. In the example with updating values manually, click on the button will update the value. However, change of the value will not cause re-render. So, you will still see the same value until something causes the component to re-render and the UI to update itself with the latest value.&lt;/p&gt;

&lt;p&gt;You can test that the ref value is really updated by triggering re-render manually. For example, you can add new state. When you update the state with new value it will also trigger re-render. The re-render will update the UI. After this update the UI will also show the latest value of ref.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useEffect, useRef and useState hooks from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create function component:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Initialize the useRef hook:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Add state to trigger re-render:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Use useEffect to update "current" value&lt;/span&gt;
    &lt;span class="c1"&gt;// on every render of the component:&lt;/span&gt;
    &lt;span class="nx"&gt;renderCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onIncrementRenderCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Update "current" value manually:&lt;/span&gt;
    &lt;span class="nx"&gt;renderCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onIncrementCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Update state value:&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevCount&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;// Note: this will trigger re-render.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-wrapper"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Show the number of renders: */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Number of renders: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Add button to ref's current value: */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onIncrementRenderCount&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment count&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Add button to increase state value (trigger re-render): */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onIncrementCount&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment state&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-word-of-caution"&gt;
  &lt;/a&gt;
  A word of caution
&lt;/h2&gt;

&lt;p&gt;The useRef hook makes it very easy to work with DOM nodes and React components. This can make it tempting to use it every time you want to communicate with your components or between them. This is generally not a good idea. It is usually better to create these communication bridges by using props and passing data through them.&lt;/p&gt;

&lt;p&gt;This is one of the things the system of props was designed for. It is also probably the most reliable way to establish this communication between components. So, use useRef when you really need to, when you need to work with components and props are not capable of doing the job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-reacts-useref-hook"&gt;
  &lt;/a&gt;
  Conclusion: Reacts useRef Hook
&lt;/h2&gt;

&lt;p&gt;The React useRef hook can be handy. It allows you to store data between renders and update this data without causing a re-renders. You can also use it to store references to DOM nodes and React components so you can work with them directly. I hope that this tutorial helped you understand what the useRef hook is and how to use it.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
