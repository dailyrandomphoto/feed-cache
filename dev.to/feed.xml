<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>An Introduction to Reinforcement Learning With OpenAI Gym’s ‘Taxi’</title>
      <author>Joy</author>
      <pubDate>Fri, 11 Jun 2021 06:54:28 +0000</pubDate>
      <link>https://dev.to/joooyz/an-introduction-to-reinforcement-learning-with-openai-gym-s-taxi-258c</link>
      <guid>https://dev.to/joooyz/an-introduction-to-reinforcement-learning-with-openai-gym-s-taxi-258c</guid>
      <description>&lt;p&gt;In this introductory tutorial, we'll apply reinforcement learning (RL) to train an agent to solve the &lt;a href="https://gym.openai.com/envs/Taxi-v3/"&gt;'Taxi' environment from OpenAI Gym&lt;/a&gt;. We'll cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A basic introduction to RL&lt;/li&gt;
&lt;li&gt;  Setting up OpenAI Gym &amp;amp; Taxi&lt;/li&gt;
&lt;li&gt;  Step-by-step tutorial on how to train a Taxi agent in Python3 using RL&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#before-we-start-whats%C2%A0taxi"&gt;
  &lt;/a&gt;
  Before we start, what's 'Taxi'?
&lt;/h2&gt;

&lt;p&gt;Taxi is one of many environments available on OpenAI Gym. These environments are used to develop and train reinforcement learning agents.&lt;/p&gt;

&lt;p&gt;The goal of Taxi is to pick-up passengers and drop them off at the destination in the least amount of moves. In this tutorial, you'll start with an agent that plays randomly:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0M2-Me9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsa5r2qpwyl5fjemsscq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0M2-Me9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsa5r2qpwyl5fjemsscq.gif" alt="Random Taxi Agent"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;…and successfully apply reinforcement learning to train an agent to solve the game:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I090QrPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smtupt4481e1mgbw462p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I090QrPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smtupt4481e1mgbw462p.gif" alt="Trained Taxi Agent"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-introduction-to-reinforcement-learning"&gt;
  &lt;/a&gt;
  💡 An introduction to Reinforcement Learning
&lt;/h2&gt;

&lt;p&gt;Think about how you might teach a dog a new trick, like telling it to sit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If it performs the trick correctly (it sits), you'll reward it with a treat (positive feedback) ✔️&lt;/li&gt;
&lt;li&gt;  If it doesn't sit correctly, it doesn't get a treat (negative feedback) ❌&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By continuing to do things that lead to positive outcomes, the dog will learn to sit when it hears the command in order to get its treat. Reinforcement learning is a subdomain of machine learning which involves training an 'agent' (the dog) to learn the correct sequences of actions to take (sitting) on its environment (in response to the command 'sit') in order to maximise its reward (getting a treat). This can be illustrated more formally as:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--us0J9GPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y91czfb199av8vhfy69d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--us0J9GPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y91czfb199av8vhfy69d.png" alt="Sutton Barton RL"&gt;&lt;/a&gt;  Source: &lt;a href="http://incompleteideas.net/book/bookdraft2017nov5.pdf"&gt;Sutton &amp;amp; Barto&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-openai-gym-and%C2%A0taxi"&gt;
  &lt;/a&gt;
  🏋️ Installing OpenAI Gym and Taxi
&lt;/h2&gt;

&lt;p&gt;We'll be using the 'Taxi-v3' environment for this tutorial.&lt;/p&gt;

&lt;p&gt;You'll need to install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  OpenAI Gym &lt;code&gt;pip install gym&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  NumPy &lt;code&gt;pip install numpy&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following snippet will import the necessary packages, and create the Taxi environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gym&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="c1"&gt;# create Taxi environment
&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Taxi-v3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#random%C2%A0agent"&gt;
  &lt;/a&gt;
  🎲 Random Agent
&lt;/h2&gt;

&lt;p&gt;We'll start by implementing an agent that doesn't learn at all. Instead, it will select actions at random. This will be our baseline.&lt;/p&gt;

&lt;p&gt;The first step is to give our agent the initial state. A state tells our agent what the current environment looks like. In Taxi, a state defines the current positions of the taxi, passenger, and pick-up and drop-off locations. Below are examples of three different states for Taxi:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GodPKslb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4o39llljgom4dtkchrh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GodPKslb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4o39llljgom4dtkchrh2.png" alt="Taxi States"&gt;&lt;/a&gt;&lt;br&gt;
Note: Yellow = taxi, Blue letter = pickup location, Purple letter = drop-off destination&lt;/p&gt;

&lt;p&gt;To get the initial state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# create a new instance of taxi, and get the initial state
&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we'll run a for-loop to cycle through the game. At each iteration, our agent will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make a random action from the action space (0 - south, 1 - north, 2 - east, 3 - west, 4 - pick-up, 5 - drop-off)&lt;/li&gt;
&lt;li&gt;Receive the new state&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's our random agent script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gym&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="c1"&gt;# create Taxi environment
&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Taxi-v3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# create a new instance of taxi, and get the initial state
&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;num_steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_steps&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"step: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; out of &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_steps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# sample a random action from the list of available actions
&lt;/span&gt;    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# perform this action on the environment
&lt;/span&gt;    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# print the new state
&lt;/span&gt;    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# end this instance of the taxi environment
&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can run this and watch your agent make random moves. Not super exciting, but hopefully this helped you get familiar with the OpenAI Gym toolkit.&lt;/p&gt;

&lt;p&gt;Next, we'll implement the key algorithm that will enable our agent to learn from the environment in order to solve Taxi.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qlearning-agent"&gt;
  &lt;/a&gt;
  📖 Q-Learning Agent
&lt;/h2&gt;

&lt;p&gt;Q-learning is a reinforcement learning algorithm that seeks to find the best possible next action given its current state, in order to maximise the reward it receives (the 'Q' in Q-learning stands for quality - i.e. how valuable an action is).&lt;/p&gt;

&lt;p&gt;Let's take the following starting state:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9q_q_zDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oby2le865dndm87s74uf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9q_q_zDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oby2le865dndm87s74uf.png" alt="Taxi state"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which action (up, down, left, right, pick-up or drop-off) should it take in order to maximise its reward? (&lt;em&gt;Note: blue = pick-up location and purple= drop-off destination&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;First, let's take a look at how our agent is 'rewarded' for its actions. &lt;strong&gt;Remember in reinforcement learning, we want our agent to take actions that will maximise the possible rewards it receives from its environment.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taxi-reward%C2%A0system"&gt;
  &lt;/a&gt;
  'Taxi' reward system
&lt;/h2&gt;

&lt;p&gt;According to the &lt;a href="https://gym.openai.com/envs/Taxi-v3/"&gt;Taxi documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"…you receive +20 points for a successful drop-off, and lose 1 point for every timestep it takes. There is also a 10 point penalty for illegal pick-up and drop-off actions."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Looking back at our original state, the possible actions it can take and the corresponding rewards it will receive are shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sfsvzv2D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6kpc1prk2kn321xn5ql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sfsvzv2D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6kpc1prk2kn321xn5ql.png" alt="Taxi rewards"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the image above, the agent loses 1 point per timestep it takes. It will also lose 10 points if it uses the pick-up or drop-off action here.&lt;/p&gt;

&lt;p&gt;We want our agent to go North towards the pick-up location denoted by a blue R- &lt;strong&gt;but how will it know which action to take if they are all equally punishing?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exploration"&gt;
  &lt;/a&gt;
  Exploration
&lt;/h2&gt;

&lt;p&gt;Our agent currently has no way of knowing which action will lead it closest to the blue R. This is where trial-and-error comes in - we'll have our agent take random actions, and observe what rewards it gets, i.e. our agent will do some exploration of the environment. This is what our random agent was doing earlier.&lt;/p&gt;

&lt;p&gt;Over many iterations, our agent will have observed that certain sequences of actions will be more rewarding than others. Along the way, our agent will need to keep track of which actions led to what rewards.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-qtables"&gt;
  &lt;/a&gt;
  Introducing… Q-tables
&lt;/h2&gt;

&lt;p&gt;A Q-table is simply a look-up table storing values representing the maximum expected future rewards our agent can expect for a certain action in a certain state (&lt;em&gt;known as Q-values&lt;/em&gt;). It will tell our agent that when it encounters a certain state, some actions are more likely than others to lead to higher rewards. It becomes a 'cheatsheet' telling our agent what the best action to take is.&lt;/p&gt;

&lt;p&gt;The image below illustrates what our 'Q-table' will look like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Each row corresponds to a unique state in the 'Taxi' environment&lt;/li&gt;
&lt;li&gt;  Each column corresponds to an action our agent can take&lt;/li&gt;
&lt;li&gt;  Each cell corresponds to the Q-value for that state-action pair - a higher Q-value means a higher maximum reward our agent can expect to get if it takes that action in that state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S8k_U-M0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wscoifj28sptuseceblv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S8k_U-M0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wscoifj28sptuseceblv.PNG" alt="Q-table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we begin training our agent, we'll need to initialize our Q-table as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;state_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;observation_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;  &lt;span class="c1"&gt;# total number of states (S)
&lt;/span&gt;&lt;span class="n"&gt;action_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;      &lt;span class="c1"&gt;# total number of actions (A)
&lt;/span&gt;
&lt;span class="c1"&gt;# initialize a qtable with 0's for all Q-values
&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;state_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action_size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As our agent explores, it will update the Q-table with the Q-values it finds. To calculate our Q-values, we'll introduce the Q-learning algorithm.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qlearning-algorithm"&gt;
  &lt;/a&gt;
  Q-Learning Algorithm
&lt;/h2&gt;

&lt;p&gt;The Q-learning algorithm is given below. We won't go into details, but you can read more about it in &lt;a href="http://www.incompleteideas.net/book/RLbook2018trimmed.pdf"&gt;Ch 6 of Sutton &amp;amp; Barto (2018)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gvpJYvbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stb04it12rbkmlezbbyd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gvpJYvbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stb04it12rbkmlezbbyd.PNG" alt="Q-learning algorithm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Q-learning algorithm will help our agent &lt;strong&gt;update the current Q-value (Q(St,At)) with its observations after taking an action.&lt;/strong&gt; I.e. increase Q if it encountered a positive reward, or decrease Q if it encountered a negative one.&lt;/p&gt;

&lt;p&gt;Note that in Taxi, our agent doesn't receive a positive reward until it successfully drops off a passenger (&lt;em&gt;+20 points&lt;/em&gt;). Hence even if our agent is heading in the correct direction, there will be a delay in the positive reward it should receive. The following term in the Q-learning equation addresses this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0NuVx92Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p4ey9l6hlzetzmcou2c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0NuVx92Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p4ey9l6hlzetzmcou2c.PNG" alt="Maximum Q"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This term adjusts our current Q-value to include a portion of the rewards it may receive sometime in the future (St+1). The 'a' term refers to all the possible actions available for that state. The equation also contains two hyperparameters which we can specify:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Learning rate (α): how easily the agent should accept new information over previously learnt information&lt;/li&gt;
&lt;li&gt;Discount factor (γ): how much the agent should take into consideration the rewards it could receive in the future versus its immediate reward&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's our code for implementing the Q-learning algorithm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# hyperparameters to tune
&lt;/span&gt;&lt;span class="n"&gt;learning_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;
&lt;span class="n"&gt;discount_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;

&lt;span class="c1"&gt;# dummy variables
&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;# R_(t+1)
&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;observation_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;      &lt;span class="c1"&gt;# S_t
&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;          &lt;span class="c1"&gt;# A_t
&lt;/span&gt;&lt;span class="n"&gt;new_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;observation_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# S_(t+1)
&lt;/span&gt;
&lt;span class="c1"&gt;# Qlearning algorithm: Q(s,a) := Q(s,a) + learning_rate * (reward + discount_rate * max Q(s',a') - Q(s,a))
&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;learning_rate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;discount_rate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_state&lt;/span&gt;&lt;span class="p"&gt;,:])&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exploration-vs-exploitation-tradeoff"&gt;
  &lt;/a&gt;
  Exploration vs Exploitation Trade-off
&lt;/h2&gt;

&lt;p&gt;Earlier, we let our agent explore the environment to update our Q-table. As our agent learns more about the environment, we can let it use this knowledge to take more optimal actions - known as &lt;strong&gt;exploitation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;During exploitation, our agent will look at its Q-table and select the action with the highest Q-value (instead of a random action). Over time, our agent will need to explore less, and start exploiting what it knows instead.&lt;/p&gt;

&lt;p&gt;There are many ways to implement an exploration-exploitation strategy. Here's just one example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# dummy variables
&lt;/span&gt;&lt;span class="n"&gt;episode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;qtable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;observation_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# exploration-exploitation tradeoff
&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;     &lt;span class="c1"&gt;# probability that our agent will explore
&lt;/span&gt;&lt;span class="n"&gt;decay_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt; &lt;span class="c1"&gt;# of epsilon
&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# explore
&lt;/span&gt;    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# exploit
&lt;/span&gt;    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,:])&lt;/span&gt;

&lt;span class="c1"&gt;# epsilon decreases exponentially --&amp;gt; our agent will explore less and less
&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;decay_rate&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, we set some value &lt;code&gt;epsilon&lt;/code&gt; between 0 and 1. If &lt;code&gt;epsilon&lt;/code&gt; is 0.7, there is a 70% chance that on this step our agent will explore instead of exploit. We've set &lt;code&gt;epsilon&lt;/code&gt; to exponentially decay with each step, so that our agent explores less and less over time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bringing-it-all%C2%A0together"&gt;
  &lt;/a&gt;
  Bringing it all together
&lt;/h2&gt;

&lt;p&gt;We're done with all the building blocks needed for our reinforcement learning agent. The process for training our agent will look like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initialising our Q-table with 0's for all Q-values&lt;/li&gt;
&lt;li&gt;Let our agent play Taxi over a large number of games&lt;/li&gt;
&lt;li&gt;Continuously update the Q-table using the Q-learning algorithm and an exploration-exploitation strategy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's the full implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gym&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="c1"&gt;# create Taxi environment
&lt;/span&gt;    &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Taxi-v3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# initialize q-table
&lt;/span&gt;    &lt;span class="n"&gt;state_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;observation_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="n"&gt;action_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="n"&gt;qtable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;state_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action_size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# hyperparameters
&lt;/span&gt;    &lt;span class="n"&gt;learning_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;
    &lt;span class="n"&gt;discount_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;
    &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
    &lt;span class="n"&gt;decay_rate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.005&lt;/span&gt;

    &lt;span class="c1"&gt;# training variables
&lt;/span&gt;    &lt;span class="n"&gt;num_episodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
    &lt;span class="n"&gt;max_steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt; &lt;span class="c1"&gt;# per episode
&lt;/span&gt;
    &lt;span class="c1"&gt;# training
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;episode&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_episodes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c1"&gt;# reset the environment
&lt;/span&gt;        &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_steps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

            &lt;span class="c1"&gt;# exploration-exploitation tradeoff
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# explore
&lt;/span&gt;                &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# exploit
&lt;/span&gt;                &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,:])&lt;/span&gt;

            &lt;span class="c1"&gt;# take action and observe reward
&lt;/span&gt;            &lt;span class="n"&gt;new_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# Q-learning algorithm
&lt;/span&gt;            &lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;learning_rate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;discount_rate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_state&lt;/span&gt;&lt;span class="p"&gt;,:])&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

            &lt;span class="c1"&gt;# Update to our new state
&lt;/span&gt;            &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_state&lt;/span&gt;

            &lt;span class="c1"&gt;# if done, finish episode
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;

        &lt;span class="c1"&gt;# Decrease epsilon
&lt;/span&gt;        &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;decay_rate&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Training completed over &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_episodes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; episodes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Press Enter to watch trained agent..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# watch trained agent
&lt;/span&gt;    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_steps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"TRAINED AGENT"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Step {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,:])&lt;/span&gt;
        &lt;span class="n"&gt;new_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;rewards&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"score: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_state&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#whats%C2%A0next"&gt;
  &lt;/a&gt;
  👏 What's next?
&lt;/h2&gt;

&lt;p&gt;There are many other environments available on OpenAI Gym for you to try (e.g. &lt;a href="https://gym.openai.com/envs/FrozenLake-v0/"&gt;Frozen Lake&lt;/a&gt;). You can also try optimising the implementation above to solve Taxi in fewer episodes.&lt;/p&gt;

&lt;p&gt;Some other useful resources include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.altexsoft.com/blog/datascience/reinforcement-learning-explained-overview-comparisons-and-applications-in-business/"&gt;A good article on RL and its real-world applications&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/@jonathan_hui/rl-deep-reinforcement-learning-series-833319a95530"&gt;Deep Reinforcement Learning Series&lt;/a&gt; by Jonathan Hui&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.youtube.com/watch?v=WXuK6gekU1Y"&gt;AlphaGo full documentary&lt;/a&gt; (on Youtube)&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.incompleteideas.net/book/RLbook2018trimmed.pdf"&gt;Reinforcement Learning&lt;/a&gt; by Sutton and Barto&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>datascience</category>
      <category>machinelearning</category>
      <category>programming</category>
    </item>
    <item>
      <title>Running WordPress locally on Mac OS X</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 11 Jun 2021 06:45:44 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/running-wordpress-locally-on-mac-os-x-2c6f</link>
      <guid>https://dev.to/dailydevtips1/running-wordpress-locally-on-mac-os-x-2c6f</guid>
      <description>&lt;p&gt;Today we'll learn how to run a WordPress installation on our Mac OS X system.&lt;/p&gt;

&lt;p&gt;I used to do a lot of WordPress development and always had to leverage MAMP/XAMP for this.&lt;br&gt;
However, in this article, I'll guide you on setting it up locally.&lt;/p&gt;

&lt;p&gt;The elements we need to run a WordPress installation locally are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enable PHP&lt;/li&gt;
&lt;li&gt;Apache vhost&lt;/li&gt;
&lt;li&gt;Rewrite and htaccess&lt;/li&gt;
&lt;li&gt;Localhost pointer&lt;/li&gt;
&lt;li&gt;MySQL setup&lt;/li&gt;
&lt;li&gt;WordPress installation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might be thinking, wow, that's a lot of stuff, but your Mac will come with most of this stuff pre-installed. We will just enable and tweak it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enable-php"&gt;
  &lt;/a&gt;
  Enable PHP
&lt;/h2&gt;

&lt;p&gt;Nowadays, your Mac will come with PHP installed. However, you might want to update the version.&lt;br&gt;
This is not a needed step, so check out my article on &lt;a href="https://daily-dev-tips.com/posts/installing-php-on-your-mac/"&gt;updating the PHP version on Mac OS X&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have a version you're happy with, we have to enable apache to use it.&lt;/p&gt;

&lt;p&gt;Open up the &lt;code&gt;httpd.conf&lt;/code&gt; file by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;nano /etc/apache2/httpd.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Search (&lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;W&lt;/code&gt;) and remove the &lt;code&gt;#&lt;/code&gt; before the php7_module line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;old: # LoadModule php7_module libexec/apache2/libphp7.so
new: LoadModule php7_module libexec/apache2/libphp7.so
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#apache-vhost"&gt;
  &lt;/a&gt;
  Apache vhost
&lt;/h2&gt;

&lt;p&gt;The next thing we need to set up is a virtual host.&lt;br&gt;
Firstly let's enable it in our &lt;code&gt;httpd.conf&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Look for the following line, and place the new line under it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Include /private/etc/apache2/extra/httpd-vhosts.conf
Include /private/etc/apache2/vhosts/*.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will make sure we can use a new config for this virtual host.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For more information, check out &lt;a href="https://daily-dev-tips.com/posts/mac-os-x-setting-up-virtual-hosts/"&gt;Mac OS X setting up Virtual Hosts&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's go ahead and create the config file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;nano /etc/apache2/vhosts/wordpress.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And place the following content in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
    DocumentRoot "/Users/chrisbongers/www/wordpress"
    ServerName wordpress.dev

    &amp;lt;Directory "/Users/chrisbongers/www/wordpress"&amp;gt;
        AllowOverride All
        Require all granted
    &amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You have to set the DocumentRoot to your own directory on your local machine. For me, it's a www folder at my user level.&lt;br&gt;
Next, set the ServerName to the URL you want to serve it on.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#localhost-pointer"&gt;
  &lt;/a&gt;
  Localhost pointer
&lt;/h2&gt;

&lt;p&gt;Now we have our domain setup, but nothing is pointing to it yet.&lt;br&gt;
So let's enable our localhost pointer.&lt;/p&gt;

&lt;p&gt;Open up the local host file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;nano /etc/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;127.0.0.1       wordpress.dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rewrite-and-htaccess"&gt;
  &lt;/a&gt;
  Rewrite and htaccess
&lt;/h2&gt;

&lt;p&gt;Now let's enable mod_rewrite, so our htaccess will work once we have that setup.&lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;httpd.conf&lt;/code&gt; again.&lt;br&gt;
And uncomment the following line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;old: #LoadModule rewrite_module libexec/apache2/mod_rewrite.so
new: LoadModule rewrite_module libexec/apache2/mod_rewrite.so
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we should also restart apache.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apachectl restart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To read more, check out &lt;a href="https://daily-dev-tips.com/posts/making-htaccess-work-on-mac-os-x/"&gt;Making htaccess work on Mac OS X&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mysql-setup"&gt;
  &lt;/a&gt;
  MySQL setup
&lt;/h2&gt;

&lt;p&gt;Of course, we'll also need a database, so let's make sure MySQL is installed or installed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Alternatively, you can download and install it manually: &lt;a href="https://daily-dev-tips.com/posts/mac-installing-mysql/"&gt;Mac installing MySQL&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, use your &lt;a href="https://daily-dev-tips.com/posts/top-5-mysql-clients-for-mac/"&gt;favorite Mac MySQL client&lt;/a&gt; and create a new table called &lt;code&gt;wordpress&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wordpress-installation"&gt;
  &lt;/a&gt;
  WordPress installation
&lt;/h2&gt;

&lt;p&gt;By this point, we should have all the building blocks to install WordPress.&lt;/p&gt;

&lt;p&gt;You can install it through homebrew, but I'm a bit old school and will install it by downloading it.&lt;/p&gt;

&lt;p&gt;Create the folder as you set it in your virtual host.&lt;/p&gt;

&lt;p&gt;Then, visit the WordPress download section and &lt;a href="https://wordpress.org/download/"&gt;download WordPress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unzip the folder, and move its contents to the folder you created.&lt;/p&gt;

&lt;p&gt;Now by visiting: &lt;code&gt;http://wordpress.dev&lt;/code&gt;, we should enter the WordPress setup wizard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5DL0_u8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623046881199/RBNl73Oov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5DL0_u8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623046881199/RBNl73Oov.png" alt="Mac OS X Local WordPress installation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow the setup wizard and complete the steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AxUxtlGG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623047065698/ZNLwqexXm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AxUxtlGG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623047065698/ZNLwqexXm.png" alt="Running WordPress locally on Mac OS X"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there you go, a local WordPress installation!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>mac</category>
    </item>
    <item>
      <title>250+ FREE Tutorials on Web Development, Machine Learning and more | Subscribe now 🔥</title>
      <author>The Nerdy Dev</author>
      <pubDate>Fri, 11 Jun 2021 06:43:09 +0000</pubDate>
      <link>https://dev.to/thenerdydev/250-free-tutorials-on-web-development-machine-learning-and-more-subscribe-now-40n</link>
      <guid>https://dev.to/thenerdydev/250-free-tutorials-on-web-development-machine-learning-and-more-subscribe-now-40n</guid>
      <description>&lt;p&gt;Hey guys,&lt;/p&gt;

&lt;p&gt;Check out more than 250+ tutorial videos on technologies like &lt;br&gt;
&lt;strong&gt;Machine Learning&lt;/strong&gt;, &lt;strong&gt;Web Development&lt;/strong&gt; and more. &lt;/p&gt;

&lt;p&gt;Here is a quick glance over all the videos that I have on my channel. So loads of awesome videos to get you started and more:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FpPVJB6DPkk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;⭐ Subscribe now here : &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉🏻 &lt;strong&gt;PS&lt;/strong&gt; : I am working on a &lt;strong&gt;BRAND&lt;/strong&gt; new &lt;strong&gt;FREE&lt;/strong&gt;- &lt;strong&gt;Web Developer Full Course&lt;/strong&gt; on YouTube , check the below article to know more about the topics that we cover in this course:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;👉🏻 Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Follow me on:&lt;br&gt;
👉 Twitter: &lt;a href="https://twitter.com/thenerdydev"&gt;https://twitter.com/thenerdydev&lt;/a&gt;&lt;br&gt;
👉 YouTube: &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you on the other side :)&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>machinelearning</category>
      <category>react</category>
    </item>
    <item>
      <title>Wireshark </title>
      <author>vishwasnarayanre</author>
      <pubDate>Fri, 11 Jun 2021 06:41:14 +0000</pubDate>
      <link>https://dev.to/vishwasnarayan5/wireshark-3jg</link>
      <guid>https://dev.to/vishwasnarayan5/wireshark-3jg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#wireshark-introduction"&gt;
  &lt;/a&gt;
  Wireshark introduction
&lt;/h1&gt;

&lt;p&gt;Wireshark is a network analyzer that allows you to see what is going on with your network. Wireshark allows you to dissect network packets at a microscopic level, including detailed information on individual packets.&lt;/p&gt;

&lt;p&gt;Wireshark was first made available in 1998. Back then, it was considered Ethereal. Wireshark is compatible with all major operating systems. Most businesses and government agencies also use Wireshark as a primary network analyzer.&lt;/p&gt;

&lt;p&gt;Wireshark is now fully open-source, thanks to the global network engineering ecosystem. While most security systems are command-line-based, Wireshark has an excellent user interface.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#osi-model"&gt;
  &lt;/a&gt;
  OSI Model
&lt;/h1&gt;

&lt;p&gt;The Open Systems Interconnection (OSI) paradigm standardises the manner in which two or more computers communicate with one another. The OSI Model classifies network architecture into seven layers:&lt;/p&gt;

&lt;p&gt;Application, Presentation, Session, Transport, Network, Datalink, and Physical.&lt;/p&gt;

&lt;p&gt;Here is what each layer does:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OSI Model Layers&lt;/strong&gt;&lt;br&gt;
If you want to read more about the OSI model, check out this &lt;a href="https://dev.to/vishwasnarayan5/cyber-secutiry-3c8a"&gt;comprehensive essay&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#packets"&gt;
  &lt;/a&gt;
  Packets
&lt;/h1&gt;

&lt;p&gt;Now that you understand the OSI model, let's look at network packets. When data is transmitted from one device to another, it is divided into smaller units known as packets.&lt;/p&gt;

&lt;p&gt;When you download a file from the internet, the data is transmitted as packets from the server. Your machine reassembles these packets to send you the original file.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ipv4-packet"&gt;
  &lt;/a&gt;
  IPV4 Packet
&lt;/h1&gt;

&lt;p&gt;A packet can contain the following data:&lt;br&gt;
*source and destination IP addresses&lt;br&gt;
protocol&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;source and destination ports&lt;/li&gt;
&lt;li&gt;Data&lt;/li&gt;
&lt;li&gt;Length, flags, TTL, etc.&lt;/li&gt;
&lt;li&gt;protocol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each packet includes important information about the devices involved in the packet transfer. Thousands, if not millions, of these data packets are transmitted between the source and destination devices for each data connection.&lt;/p&gt;

&lt;p&gt;You can now understand the significance of Wireshark. Wireshark allows you to catch and search each of these packets for details.&lt;/p&gt;

&lt;p&gt;A network engineer's equivalent of a biologist's microscope is Wireshark. Wireshark allows you to ‘listen' to a live network (after connecting to it), record, and inspect packets on the move.&lt;/p&gt;

&lt;p&gt;You may use Wireshark as a network engineer or ethical hacker to debug and protect the networks. As a bad guy (which I do not recommend), you can sniff network packets and grab information such as credit card purchases.&lt;/p&gt;

&lt;p&gt;This is why connecting to a public network such as Starbucks and doing financial transfers or accessing private data is risky. Even though HTTPS sites can encrypt the packets, they are still readable across the network.&lt;/p&gt;

&lt;p&gt;If someone is determined enough, they will be able to break it.&lt;br&gt;
Wireshark Fundamentals&lt;br&gt;
Let's take a look at how you can use Wireshark. Wireshark can be downloaded and installed from this page.&lt;br&gt;
Unlike other penetration testing software, Wireshark provides an excellent graphical user interface. This is how Wireshark appears when you launch it.&lt;/p&gt;

&lt;p&gt;Wireshark displays a list of the networks to which you are linked, and you can choose one of them to begin listening to the network.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wireshark UI&lt;/strong&gt;&lt;br&gt;
There are three panes in Wireshark.&lt;br&gt;
Packet List Pane&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DirD3bg1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1goim6suk41ewj9xuk0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DirD3bg1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1goim6suk41ewj9xuk0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The listing of packages in Wireshark is by default displayed using the following columns:&lt;br&gt;
Package Number&lt;br&gt;
Time&lt;br&gt;
Source IP (Your device IP when sending packages, see the following tutorial if you’re unfamiliar with IP’s: &lt;a href="https://youtu.be/oieIGwUPaKE"&gt;https://youtu.be/oieIGwUPaKE&lt;/a&gt;)&lt;br&gt;
Destination IP (Your device IP when receiving Packages)&lt;br&gt;
Network Protocol used (Typically TCP or UDP, see the following video if you’re in doubt of the difference between these: &lt;a href="https://youtu.be/0-MldfyhIuo"&gt;https://youtu.be/0-MldfyhIuo&lt;/a&gt;)&lt;br&gt;
Package Length&lt;br&gt;
Info (Information not listed in one of the above columns)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Packet List Pane&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This window shows the collected packets. Each line represents a separate packet, which you can click on and examine in greater depth using the other two panes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Packet Details Pane&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Selecting a packet allows you to examine the packet information in greater depth using the Packet Details pane. It shows information such as IP addresses, ports, and other data from the packet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Packet Bytes Pane&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This pane displays the raw data of the chosen packet in bytes. The data is presented as a hex dump, which is binary data in hexadecimal format.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Filters&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Filters in Wireshark assist you in narrowing down the kind of data you are searching for. Filters are classified into two types: capture filters and display filters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Traffic Filtering&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Wireshark supports filters based on a broad range of criteria to reduce the amount of information shown at the start. The filters can be applied directly in the search bar of the Wireshark programme, as seen below with a TCP protocol filter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Capture Filter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Until beginning to evaluate a network, you should apply a catch filter. When a catch filter is set, it only catches packets that fit the capture filter.&lt;/p&gt;

&lt;p&gt;For eg, if you only need to listen to the packets being sent and received from an IP address, you can set a capture filter as follows.&lt;br&gt;
host 192.168.0.1&lt;br&gt;
Once you set a capture filter, you cannot change it till the current capture session is completed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Display Filters&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To grab packets, display filters are used. For eg, if you just want to see requests coming from a certain IP address, you can do so. you can apply a display filter as follows:&lt;br&gt;
ip.src==192.168.0.1&lt;/p&gt;

&lt;p&gt;Show filters can be modified on the fly when they are added to collected data.&lt;br&gt;
In a nutshell, capture filters allow you to filter the traffic, while view filters add certain filters to the captured packets. Wireshark is good for debugging because it can catch hundreds of packets on a busy network.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wireshark's Main Features&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that you've mastered the fundamentals of Wireshark, let's take a look at some main features. You can do it with Wireshark.&lt;/p&gt;

&lt;p&gt;Recognize network security risks and malicious activities&lt;br&gt;
Debug dynamic networks by observing network traffic.&lt;br&gt;
Filter traffic according to protocols, ports, and other criteria.&lt;br&gt;
Capture packets and store them in a &lt;strong&gt;Pcap&lt;/strong&gt; file for later review.&lt;br&gt;
To improve research, apply coloring rules to the packet list.&lt;br&gt;
Captured data can be exported to an XML, CSV, or plain text format.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every year, Wireshark is ranked in the top ten network security software. Wireshark is simple to understand and use thanks to its simple but efficient user interface. It is an important weapon in the arsenal of any penetration tester.&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>computerscience</category>
      <category>programming</category>
    </item>
    <item>
      <title>Fre-2.1 has been pulished</title>
      <author>Yisar</author>
      <pubDate>Fri, 11 Jun 2021 06:10:36 +0000</pubDate>
      <link>https://dev.to/132/fre-2-1-and-react-18-have-been-pulished-what-s-the-difference-between-them-22o8</link>
      <guid>https://dev.to/132/fre-2-1-and-react-18-have-been-pulished-what-s-the-difference-between-them-22o8</guid>
      <description>&lt;p&gt;I announce that fre2 is officially released, which is a major breakthrough version. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#offscreen-rendering"&gt;
  &lt;/a&gt;
  Offscreen rendering
&lt;/h3&gt;

&lt;p&gt;The bigist breakthrough is offscreen rendering, a core algorithm refactor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yisar/fre/releases/tag/2.1.0-alpha"&gt;https://github.com/yisar/fre/releases/tag/2.1.0-alpha&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;before: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tXQBdAa5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9901lyz1u8jf3fdxjnnu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tXQBdAa5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9901lyz1u8jf3fdxjnnu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;after:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ww8PlvvG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4t64ak13u5epdhqmcal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ww8PlvvG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4t64ak13u5epdhqmcal.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Offscreen rendering is an algorithm level optimization, it traverses vdom in reverse order, from bottom to top, from right to left, to ensure that the front DOM pointer is in memory, and finally it is drawn to the screen at one time.&lt;/p&gt;

&lt;p&gt;With off screen rendering, fre has become the best performance frameworks in vdom world, not one of.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CIlxP6j6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x013ik3ur173xn41pu4q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CIlxP6j6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x013ik3ur173xn41pu4q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just as react 18 also released alpha version, fre 2.1 also tried to be compatible with them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#createroot"&gt;
  &lt;/a&gt;
  CreateRoot
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fre&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;createRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This API is more ergonomic, and for the callback, you can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;createRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;renderered&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#starttransiton"&gt;
  &lt;/a&gt;
  startTransiton
&lt;/h3&gt;

&lt;p&gt;This is an API for lowering priority, which is very useful, so I decide to build it in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1 2&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;startTransition&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works can be understood as &lt;code&gt;setTimeout (cb, 0)&lt;/code&gt;, but the callback function is executed synchronously, and the update is delayed asynchronously.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#autoupdates"&gt;
  &lt;/a&gt;
  auto-updates
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/yisar/fre/blob/master/demo/src/auto-batch.tsx"&gt;https://github.com/yisar/fre/blob/master/demo/src/auto-batch.tsx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fre has always been supportive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suspense-ssr"&gt;
  &lt;/a&gt;
  Suspense SSR
&lt;/h3&gt;

&lt;p&gt;This is the only breakthrough of react 18. I like it very much, but fre doesn't support it now. &lt;/p&gt;

&lt;p&gt;I need to spend some time to study it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Fre2 has also been released. If you are interested in the front-end framework, you can jump to GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yisar/fre"&gt;https://github.com/yisar/fre&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has all the advanced features of react 18, but only 400 lines of code, and its performance is much better than react.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>fre</category>
      <category>preact</category>
    </item>
    <item>
      <title>My Secret Design Resources</title>
      <author>Innocent Coder</author>
      <pubDate>Fri, 11 Jun 2021 05:47:35 +0000</pubDate>
      <link>https://dev.to/innocentcoder/my-secret-design-resources-27f4</link>
      <guid>https://dev.to/innocentcoder/my-secret-design-resources-27f4</guid>
      <description>&lt;p&gt;Hey Everyone! &lt;br&gt;
here i have awesome design resources i use in day-to-day life.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#colors"&gt;
  &lt;/a&gt;
  Colors
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n7fELXpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1lo9tb5dp4pzag6kgni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n7fELXpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1lo9tb5dp4pzag6kgni.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Color Hunt&lt;br&gt;
Link- &lt;a href="https://colorhunt.co/"&gt;https://colorhunt.co/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B2BJQXzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrlctj5wvgpxsz11tsgi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B2BJQXzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrlctj5wvgpxsz11tsgi.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Coolors&lt;br&gt;
Link- &lt;a href="https://coolors.co/"&gt;https://coolors.co/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LZr-Vb6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ejdxzrexknnh50icxu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LZr-Vb6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ejdxzrexknnh50icxu6.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Muzli Colors&lt;br&gt;
link- &lt;a href="https://colors.muz.li/"&gt;https://colors.muz.li/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wH3dEUDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw0kc7xc818ttqyod2ir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wH3dEUDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw0kc7xc818ttqyod2ir.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Ui.Colour&lt;br&gt;
link- &lt;a href="https://www.instagram.com/ui.colour"&gt;https://www.instagram.com/ui.colour&lt;/a&gt;   &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#fonts"&gt;
  &lt;/a&gt;
  Fonts
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p4oaq2TU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j491xan835rfladp2frx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p4oaq2TU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j491xan835rfladp2frx.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Google Fonts&lt;br&gt;
link- &lt;a href="https://fonts.google.com/"&gt;https://fonts.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SoLQH9SR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1y8y6li33268f7tkzk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SoLQH9SR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1y8y6li33268f7tkzk9.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fontshare&lt;br&gt;
link- &lt;a href="https://www.fontshare.com/"&gt;https://www.fontshare.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fvOnhxpT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ainxo5w59u27mtxjx4tt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fvOnhxpT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ainxo5w59u27mtxjx4tt.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fontspark&lt;br&gt;
link- &lt;a href="https://fontspark.app/"&gt;https://fontspark.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--snO9kF2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijdszrhrp4djfmylylwi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--snO9kF2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijdszrhrp4djfmylylwi.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fontesk&lt;br&gt;
link- &lt;a href="https://fontesk.com/"&gt;https://fontesk.com/&lt;/a&gt;    &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#icons"&gt;
  &lt;/a&gt;
  Icons
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UxCplDyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zklfnjtl6dgyllpjo2s2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UxCplDyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zklfnjtl6dgyllpjo2s2.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Flaticon&lt;br&gt;
link- &lt;a href="https://www.flaticon.com/"&gt;https://www.flaticon.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xeZI92a2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ecox8uq1tw8viplmhzw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xeZI92a2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ecox8uq1tw8viplmhzw.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Unicons&lt;br&gt;
link- &lt;a href="https://iconscout.com/unicons"&gt;https://iconscout.com/unicons&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HM9Uju7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5awz92j4ec6wc6l7sch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HM9Uju7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5awz92j4ec6wc6l7sch.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Feather Icons&lt;br&gt;
link- &lt;a href="https://feathericons.com/"&gt;https://feathericons.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RXQuSmcF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wcl59klji6oczf9n28y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RXQuSmcF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wcl59klji6oczf9n28y.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Material Icons&lt;br&gt;
link- &lt;a href="https://fonts.google.com/icons"&gt;https://fonts.google.com/icons&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#illustrations"&gt;
  &lt;/a&gt;
  Illustrations
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gzEIbcaY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kits982z70k6gzxwpzhi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gzEIbcaY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kits982z70k6gzxwpzhi.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Illu-Station&lt;br&gt;
link- &lt;a href="https://illustation.io/"&gt;https://illustation.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--udrqbrX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5i4x47s7r2ygfrqc60v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--udrqbrX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5i4x47s7r2ygfrqc60v.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Undraw&lt;br&gt;
link- &lt;a href="https://undraw.co/"&gt;https://undraw.co/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMfsWPfT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jztn62osf31w26kq0hw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMfsWPfT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jztn62osf31w26kq0hw.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
IRA Design&lt;br&gt;
link- &lt;a href="https://iradesign.io/"&gt;https://iradesign.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wfdn01-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxfubpajsdn66u3yuaz5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wfdn01-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxfubpajsdn66u3yuaz5.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Drawkit&lt;br&gt;
link- &lt;a href="https://www.drawkit.io/"&gt;https://www.drawkit.io/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#inspirations"&gt;
  &lt;/a&gt;
  Inspirations
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LQO51k8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld8gt0b0g5vs3zf45hh6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LQO51k8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld8gt0b0g5vs3zf45hh6.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Dribbble&lt;br&gt;
link- &lt;a href="https://dribbble.com/"&gt;https://dribbble.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHlY3X98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85v4nblvxlugr744e53b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHlY3X98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85v4nblvxlugr744e53b.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Behance&lt;br&gt;
link- &lt;a href="https://www.behance.net/"&gt;https://www.behance.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s8Unw8Hg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3wwvjxx7c5wcicwpykf2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8Unw8Hg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3wwvjxx7c5wcicwpykf2.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Awwwards&lt;br&gt;
link- &lt;a href="https://www.awwwards.com/"&gt;https://www.awwwards.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bihUSNjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muvncgtj12a0sv76zoc8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bihUSNjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muvncgtj12a0sv76zoc8.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Mobbin&lt;br&gt;
link- &lt;a href="https://mobbin.design/"&gt;https://mobbin.design/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#blog"&gt;
  &lt;/a&gt;
  Blog
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BU8PsiTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfplmmverk0o3of3q2ir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BU8PsiTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfplmmverk0o3of3q2ir.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Blogger&lt;br&gt;
link- &lt;a href="https://www.blogger.com/"&gt;https://www.blogger.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k7Om4MGt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fyj6hr738aob26w10qfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k7Om4MGt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fyj6hr738aob26w10qfl.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Dev.To&lt;br&gt;
link- &lt;a href="https://dev.to/"&gt;https://dev.to/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kFDYIDuC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpc1u6w2ji17aji3lf97.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kFDYIDuC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpc1u6w2ji17aji3lf97.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Medium&lt;br&gt;
link- &lt;a href="https://medium.com/"&gt;https://medium.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mGnf474o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z83tbzedberiht20t2n8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mGnf474o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z83tbzedberiht20t2n8.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Hashnode&lt;br&gt;
link- &lt;a href="https://hashnode.com/"&gt;https://hashnode.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:-&lt;/strong&gt; visit my youtube channel for frontend tutorials&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/innocentcoder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGJ5NE5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ICZsIDfS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620705/764eb964-ecd2-4875-90c2-142dfc2f639c.jpg" alt="innocentcoder image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/innocentcoder/call-screen-glass-ui-using-html-css-1ifl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Call Screen Glass UI Using HTML &amp;amp; CSS&lt;/h2&gt;
      &lt;h3&gt;Innocent Coder ・ May 17 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
       

</description>
      <category>webdev</category>
      <category>design</category>
      <category>javascript</category>
      <category>discuss</category>
    </item>
    <item>
      <title>7 JavaScript Projects For Beginners</title>
      <author>fahim kabir</author>
      <pubDate>Fri, 11 Jun 2021 05:35:51 +0000</pubDate>
      <link>https://dev.to/fahimkabir/7-javascript-projects-for-beginners-d3m</link>
      <guid>https://dev.to/fahimkabir/7-javascript-projects-for-beginners-d3m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#javascript-projects-for-beginners"&gt;
  &lt;/a&gt;
  JavaScript Projects for Beginners
&lt;/h2&gt;

&lt;p&gt;This is the best way to learn a new &lt;strong&gt;programming language&lt;/strong&gt; is to &lt;strong&gt;build projects&lt;/strong&gt;.&lt;br&gt;
Want to become a &lt;strong&gt;web developer&lt;/strong&gt;? Then you need to start practicing your &lt;strong&gt;JavaScript skills&lt;/strong&gt; as soon as possible. Once you finish your first tutorial or online course, you are ready to start with your &lt;strong&gt;first small project&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That's why I have selected &lt;strong&gt;7 beginner friendly JavaScript Projects&lt;/strong&gt; for you.&lt;/p&gt;

&lt;p&gt;For this projects I have used these libraries,&lt;br&gt;
▶️ HTML&lt;br&gt;
▶️ CSS&lt;br&gt;
▶️ JavaScript&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-change-background-color-project"&gt;
  &lt;/a&gt;
  1. Change Background Color Project
&lt;/h2&gt;

&lt;p&gt;It took me only a few minutes to finish this background color changing program. All I had to do was make a color palette and then attach a 'click' event listener to the button. A different background color would display once the button was pressed.&lt;/p&gt;

&lt;p&gt;Here is the tutorial for You:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tuNbKVVDk-0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-pass-the-message-project"&gt;
  &lt;/a&gt;
  2. Pass the Message Project
&lt;/h2&gt;

&lt;p&gt;This project requires you to choose the value of the input element from the DOM. When you click the "Submit" button, the message you typed into inputted field will appear in the "Last Message Delivered" section. This project was rather simple for me.&lt;/p&gt;

&lt;p&gt;Here is the tutorial for You:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zQeV9ZPT1lU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-counter-project"&gt;
  &lt;/a&gt;
  3. Counter Project
&lt;/h2&gt;

&lt;p&gt;This project was quite simple for me. It is, after all, a beginner's program. The concept was to click on one of two buttons to count the number of elements on the page.&lt;/p&gt;

&lt;p&gt;Here is the tutorial for You:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IPHOFK1rUA0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-background-image-slider-project"&gt;
  &lt;/a&gt;
  4. Background Image Slider Project
&lt;/h2&gt;

&lt;p&gt;This project is quite similar to the JavaScript Project for Testimonials. It was, however, a lot simpler for me. When an arrow is clicked on this picture slider, the next picture in the array appears.&lt;/p&gt;

&lt;p&gt;Here is the tutorial for You:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sxq-8qv2i1Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-testimonials-project"&gt;
  &lt;/a&gt;
  5. Testimonials Project
&lt;/h2&gt;

&lt;p&gt;This project might simply be performed with an array of objects, but I have to add a layer of complication (for beginners) by utilizing a Constructor function.&lt;/p&gt;

&lt;p&gt;Here is the tutorial for You:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5cO5Xf4QVPY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-filter-project"&gt;
  &lt;/a&gt;
  6. Filter Project
&lt;/h2&gt;

&lt;p&gt;The HTML5 &lt;code&gt;dataset&lt;/code&gt; attribute was used to pick items from the project's store in this project. This was only my second use of it here, and I now have a better knowledge of how to use it to obtain data from HTML components. “The &lt;code&gt;dataset&lt;/code&gt; field on the &lt;code&gt;HTMLElement&lt;/code&gt; interface gives you read/write access to all of the element's custom data attributes &lt;code&gt;(data-*)&lt;/code&gt;.”&lt;br&gt;
To put it another way, to obtain HTML elements with a &lt;code&gt;data-user = "hello"&lt;/code&gt; property using JavaScript, you must use &lt;code&gt;HTMLElement.dataset.user&lt;/code&gt; to return the string "hello". I also learnt how to use the &lt;code&gt;event.PreventDefault()&lt;/code&gt; function to prevent in-page links from defaulting to their default behavior.&lt;br&gt;
When a link lower on the page is clicked, the normal action brings the visitor to the top of the page. Previously, I just used &lt;code&gt;event.PreventDefault()&lt;/code&gt; to prevent form submissions from defaulting to their default behavior.&lt;/p&gt;

&lt;p&gt;Here is the tutorial for You:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VZ07OjhdJlc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-javascript-cursor-animation"&gt;
  &lt;/a&gt;
  7. JavaScript Cursor Animation
&lt;/h2&gt;

&lt;p&gt;Here we will create a glowing custom cursor using JavaScript. Which will change its color after a fix amount of time.&lt;/p&gt;

&lt;p&gt;Here is the tutorial for You:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BfWZmBzVxlw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can use this projects to learn, improve your skills or for your portfolio.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feel free to visit my YouTube channel:&lt;br&gt;
&lt;a href="//www.youtube.com/tech2etc"&gt;@Tech2etc&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow me on Instagram where I'm sharing lot's of useful resources!&lt;br&gt;
&lt;a href="https://www.instagram.com/fahimkabir.hamim"&gt;@fahimkabir.hamim&lt;/a&gt; 😉&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>useDialog - Vue.js snippets</title>
      <author>Mykolas Mankevicius</author>
      <pubDate>Fri, 11 Jun 2021 05:27:47 +0000</pubDate>
      <link>https://dev.to/neophen/usedialog-vue-js-snippets-20j0</link>
      <guid>https://dev.to/neophen/usedialog-vue-js-snippets-20j0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR;
&lt;/h2&gt;

&lt;p&gt;Here's the &lt;a href="https://gist.github.com/Neophen/877f8662cfe46f39cfb6f6393a6fff4a"&gt;link to the gist&lt;/a&gt; use/change/modify it.&lt;/p&gt;

&lt;p&gt;Have you ever wanted a simple dialog, which is completely custom, but you didn't want to pull in a package.&lt;/p&gt;

&lt;p&gt;But it always looks like a mess to make?&lt;/p&gt;

&lt;p&gt;Well worry no more! In todays Vue.js snippets post we'll make just that! Don't believe me? Have a look at the finished result!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FdG0zBa6Sj4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And this is the API for it:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ia34Upus--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2stxmb88k5ot9j63840.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ia34Upus--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2stxmb88k5ot9j63840.png" alt="the api of using dialogs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like it here's the explanation on how to write one yourself.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-raw-usedialogjs-endraw-"&gt;
  &lt;/a&gt;
  The &lt;code&gt;useDialog.js&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The basic premise is, we want a nice api to use dialogs right?&lt;/p&gt;

&lt;p&gt;Something that has an expresive api with autocompletion if possible. Something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myCustomType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onConfirm&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//do something })&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a bit of a whopper of a class, but it's easy to write test for. I've written the basic api. You can change/modify this to your liking.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thing-to-improve"&gt;
  &lt;/a&gt;
  Thing to improve?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Allow multiple onConfirm/onCancel callbacks
Quite simple just change the &lt;code&gt;onConfirmCallback&lt;/code&gt; to &lt;code&gt;onConfirmCallbacks = []&lt;/code&gt;
And then on each call of &lt;code&gt;onConfirm&lt;/code&gt;, just push the callback into the stack, and &lt;code&gt;onResolve&lt;/code&gt; await all of the callbacks&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vue</category>
      <category>compositionapi</category>
      <category>hooks</category>
    </item>
    <item>
      <title>Create dreamy fused-glass overlay effect with Yogurt CSS</title>
      <author>Loouis Low</author>
      <pubDate>Fri, 11 Jun 2021 05:15:57 +0000</pubDate>
      <link>https://dev.to/loouislow/create-dreamy-fused-glass-overlay-effect-with-yogurt-css-54jj</link>
      <guid>https://dev.to/loouislow/create-dreamy-fused-glass-overlay-effect-with-yogurt-css-54jj</guid>
      <description>&lt;p&gt;&lt;a href="https://yogurtcss.netlify.app"&gt;Full Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/loouislow81/embed/XWMPZXG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h2&gt;

&lt;p&gt;Create a two empty elements stacked together with &lt;a href="https://yogurtcss.netlify.app/position/"&gt;Position&lt;/a&gt; and &lt;a href="https://yogurtcss.netlify.app/top-bottom-left-right/"&gt;Top/Bottom/Left/Right&lt;/a&gt; utilities.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Background Layer --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute top-0 left-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Foreground Layer --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set up &lt;code&gt;Background Layer&lt;/code&gt; image to spread across the screen with &lt;a href="https://yogurtcss.netlify.app/height/"&gt;Height&lt;/a&gt; and &lt;a href="https://yogurtcss.netlify.app/width/"&gt;Width&lt;/a&gt; utilities. &lt;/p&gt;

&lt;p&gt;Set focus on the center of the image with &lt;a href="https://yogurtcss.netlify.app/object-fit/"&gt;Object Fit&lt;/a&gt; and set the alignment to top (optional) with &lt;a href="https://yogurtcss.netlify.app/object-position/"&gt;Object Position&lt;/a&gt; utilities.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Background Layer --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute top-0 left-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-screen w-screen ... object-cover object-top"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Foreground Layer --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use &lt;a href="https://yogurtcss.netlify.app/overflow/"&gt;Overflow&lt;/a&gt; utilities to prevent any element overflowing the screen edge to hide the scrollbars.&lt;/p&gt;

&lt;p&gt;Center for the &lt;code&gt;Foreground Layer&lt;/code&gt; with &lt;a href="https://yogurtcss.netlify.app/flex/"&gt;Flex&lt;/a&gt;, &lt;a href="https://yogurtcss.netlify.app/justify-content/"&gt;Justify-Content&lt;/a&gt; and &lt;a href="https://yogurtcss.netlify.app/align-items/"&gt;Align Items&lt;/a&gt; utilities.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative ... h-screen ... flex justify-center items-center ... overflow-hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Background Layer --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute top-0 left-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-screen w-screen ... object-cover object-top"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Foreground Layer --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At &lt;code&gt;Foreground Layer&lt;/code&gt;, set the element to &lt;code&gt;bg-transparent&lt;/code&gt; with &lt;a href="https://yogurtcss.netlify.app/background-color/"&gt;Background Color&lt;/a&gt; and add blur effect with &lt;a href="https://yogurtcss.netlify.app/filter-backdrop-blur/"&gt;Backdrop Blur&lt;/a&gt; utilities. Final touch up to add a dreamy shadow with &lt;a href="https://yogurtcss.netlify.app/box-shadow/"&gt;Box Shadow&lt;/a&gt; utilities.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative ... h-screen ... flex justify-center items-center ... overflow-hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Background Layer --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute top-0 left-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-screen w-screen ... object-cover object-top"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Foreground Layer --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-72 w-72 ... bg-transparent ... backdrop-filter blur-6 ... shadow-dreamy-md"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Visit &lt;a href="https://yogurtcss.netlify.app/playground/"&gt;Yogurt Playground&lt;/a&gt; to have experience of the Yogurt CSS with fullness.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enjoy then!&lt;/p&gt;

</description>
      <category>css</category>
      <category>yogurtcss</category>
    </item>
    <item>
      <title>How to install ImageMagick?</title>
      <author>Lucia Stanley</author>
      <pubDate>Fri, 11 Jun 2021 05:08:05 +0000</pubDate>
      <link>https://dev.to/luciastanley/top-5-cua-hang-mua-son-ysl-chinh-hang-o-ha-noi-uy-tin-3p6h</link>
      <guid>https://dev.to/luciastanley/top-5-cua-hang-mua-son-ysl-chinh-hang-o-ha-noi-uy-tin-3p6h</guid>
      <description>&lt;p&gt;I've recently picked up interest in contributing to this platform (forem/dev.to) so I've been reading the documentation.&lt;/p&gt;

&lt;p&gt;I'm now stuck on the installation of ImageMagick. I run on Windows OS so im not sure if i'm to install ImageMagick on WSL or on my machine itself.&lt;/p&gt;

&lt;p&gt;Please help clarify. Thanks!&lt;/p&gt;

</description>
      <category>help</category>
    </item>
    <item>
      <title>The Best Python Libraries for Data Science in 2021</title>
      <author>Le Truong</author>
      <pubDate>Fri, 11 Jun 2021 04:39:03 +0000</pubDate>
      <link>https://dev.to/letruong/the-best-python-libraries-for-data-science-in-2021-4am3</link>
      <guid>https://dev.to/letruong/the-best-python-libraries-for-data-science-in-2021-4am3</guid>
      <description>&lt;p&gt;Python is a high-level programming language that is interpreted, interactive, portable, and object-oriented. This free and open-source general-purpose language is compatible with a wide variety of Unix variants, including Linux and macOS, and Windows.&lt;/p&gt;

&lt;p&gt;Python is used in hacking, computer vision, data visualization, 3D machine learning, and robotics and is a popular programming language among developers worldwide.&lt;br&gt;&lt;br&gt;The following table summarizes the ten most frequently used Python libraries for data science:&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;TensorFlow&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;TensorFlow is an open-source library for deep learning applications developed by the Google Brain Team.&lt;/p&gt;

&lt;p&gt;Initially designed for numerical compilations, it now includes a robust and flexible ecosystem of tools, libraries, and community resources that enables developers to build and deploy machine learning-based applications.&lt;/p&gt;

&lt;p&gt;TensorFlow was initially released in 2015, but the Google Brain team recently released its latest version, TensorFlow 2.5.0, which includes additional features. It is Python 3.9 compatible.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;NumPy&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;NumPy, or Numerical Python, was created in 2015 by Travis Oliphant. It is a foundational library for mathematical and scientific computations.&lt;/p&gt;

&lt;p&gt;The open-source software includes linear algebra, Fourier transform, and matrix computation functions and is primarily used for applications that require high performance and resource efficiency. NumPy aims to provide 50x faster array objects than traditional Python lists.&lt;/p&gt;

&lt;p&gt;NumPy is the foundation for data science libraries such as SciPy, Matplotlib, Pandas, Scikit-Learn, and Statsmodels.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;SciPy&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;SciPy, or Scientific Python, is a programming language used to solve complex mathematics, science, and engineering problems. It is based on the NumPy extension and enables data manipulation and visualization.&lt;br&gt;&lt;br&gt;SciPy is a Python package that contains user-friendly and efficient numerical routines for linear algebra, statistics, integration, and optimization. Its applications include the processing of multidimensional images, the solution of Fourier transforms, and the solution of differential equations.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Matplotlib&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Matplotlib, created by John Hunter, is one of the most widely used libraries in the Python community. It can generate static, animated, and interactive data visualizations. Matplotlib enables a plethora of customizations and charts.&lt;/p&gt;

&lt;p&gt;It enables developers to scatter, customize, and configure plots using histograms. The open-source library incorporates plots into applications via an object-oriented API.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Pandas&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Pandas were created by Wes McKinney and are used to manipulate and analyze data. It provides fast, flexible, and expressive data structures and features such as data alignment and handling of missing data.&lt;/p&gt;

&lt;p&gt;Pandas provide fast, flexible, and expressive data structures for working with labeled and relational data. It is built on the foundation of two primary data structures: Series and Frames.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Keras&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Keras is a free and open-source software library. Keras provides an interface to the TensorFlow library, allowing for rapid prototyping of deep neural networks. It was created by Francois Chollet and debuted in 2015.&lt;/p&gt;

&lt;p&gt;Keras includes utilities for model compilation, graph visualization, and data analysis. Additionally, it provides prelabeled datasets that can be directly imported and loaded. It is user-friendly, adaptable, and well-suited for exploratory research.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;SciKit-Learn&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;SciKit-Learn incorporates algorithms for classification, regression, and clusterings, such as DBSCAN, gradient boosting, support vector machines, and random forests.&lt;/p&gt;

&lt;p&gt;David Cournapeau developed the library on top of SciPy, NumPy, and Matplotlib to handle everyday machine learning and data mining tasks.&lt;/p&gt;

&lt;p&gt;SciKit-Learn is a powerful tool for analyzing predictive data.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Statsmodels&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Statsmodels is a Python scientific library that focuses on data science, data analysis, and statistics. It is based on NumPy and SciPy and integrates data handling with Pandas. Statsmodels enables users to perform data exploration, statistical model estimation, and statistical testing.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Plotly&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Plotly is collaborative analytics and graphing platform built on the web. It is one of the most potent libraries available for machine learning, data science, and AI operations. Plotly is a publication-ready and immersive data visualization tool.&lt;/p&gt;

&lt;p&gt;Plotly makes it simple to import data into charts, allowing developers to create slide decks and dashboards quickly. It is used to create tools such as Dash and Chart Studio.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Seaborn&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Seaborn is the most frequently used statistical data visualization library in Python, used to create heatmaps and other visualizations that summarize data and depict distributions. It is built on top of Matplotlib and supports both data frames and arrays.&lt;/p&gt;

&lt;p&gt;Seaborn is used to creating simple plots such as bar graphs, line graphs, and pie charts.&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Crack Software 2021 Free Download</title>
      <author>Angel</author>
      <pubDate>Fri, 11 Jun 2021 04:32:52 +0000</pubDate>
      <link>https://dev.to/angel70900297/crack-software-2021-free-download-5g0h</link>
      <guid>https://dev.to/angel70900297/crack-software-2021-free-download-5g0h</guid>
      <description>&lt;p&gt;&lt;a href="https://wellscrack.com/"&gt;https://wellscrack.com/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
