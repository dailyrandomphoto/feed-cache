<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Enable Together Mode in Microsoft Teams</title>
      <author>Stacksjar</author>
      <pubDate>Mon, 06 Sep 2021 07:10:02 +0000</pubDate>
      <link>https://dev.to/stacksjar/enable-together-mode-in-microsoft-teams-1c4n</link>
      <guid>https://dev.to/stacksjar/enable-together-mode-in-microsoft-teams-1c4n</guid>
      <description>&lt;p&gt;Microsoft has launched a new feature for their teams application. Together mode is one of the feature of new meeting experience in Teams app. The together mode uses AI segmentation technology to digitally place participants in a shared background. This makes you feel like you’re sitting in the same room with everyone else in the meeting or class as shown in image above. Below is the difference between the normal meeting experience and together mode meeting experience.&lt;/p&gt;

&lt;p&gt;Who Can Use Together Mode in Teams?&lt;br&gt;
The Together Mode feature is available to all users. As of now, it is available for the desktop version only but will be extended to the Android/iOS Teams application soon mentioned by Microsoft Teams. As seen in the picture above, the Together Mode feature will be launched with an auditorium view. This view provides a semblance to people gathered in an auditorium, while you watch the audience as a speaker. More views are expected to be launched as the feature evolves.&lt;/p&gt;

&lt;p&gt;How do you get team mode together?&lt;br&gt;
Open Microsoft Teams, Click on profile icon &amp;gt; About &amp;gt; Version – Now you can see the current version of MS-Teams make sure you are updated to latest version.&lt;/p&gt;

&lt;p&gt;Now Click on profile icon &amp;gt; Settings &amp;gt; Put a check mark in “Turn on New Meeting Experience” &lt;/p&gt;

&lt;p&gt;Then In Teams Go-to your calendar, Click on Meet Now &amp;gt; if the new meeting experience is enabled, user find the meeting controls at top of the window.&lt;/p&gt;

&lt;p&gt;Microsoft ensures that the Teams app will now segment the faces using Artificial Intelligense (AI) and bring everyone together. This feature requires at least need 4 participants from same tenant to enable Together Mode in Microsoft Teams. Together mode stays greyed out until the 4th participant joins the call. Microsoft states that the gallery view can fit up to 49 users max at present.&lt;/p&gt;

&lt;p&gt;In addition - Dynamic View, Large gallery view, Live reactions, video filters are also features of new meeting experience &lt;/p&gt;

&lt;p&gt;Advantages of Together Mode&lt;br&gt;
The primary benefit of Together Mode in Microsoft Teams is being able to see all the members of the meeting together as if they are one room or class and sitting together. It can discard the old classic video call feature where you can see one people at a time with a boxed view which nullifies to see just a restricted number of people at a time is eased. When you make a normal Teams video conference, the person who is talking frequently appears on the meeting screen with the boxed view. The rest of the persons in the meeting are in the background and are virtually ignored until they start talking in the meeting. This new feature ‘Together Mode’ acknowledges this issue. You can easily view all the people present on the call as well as read their body language and reactions during the meeting, just like we do can in physically with ease of our homes. Also this advantage is otherwise very difficult in their home environments or different backgrounds.&lt;/p&gt;

&lt;p&gt;Read Complete Article Here:- &lt;a href="https://stacksjar.com/post/enable-together-mode-in-microsoft-teams"&gt;Enable Together Mode in Microsoft Teams&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>tooling</category>
    </item>
    <item>
      <title>JavaScript Library and Resources</title>
      <author>ZigRazor</author>
      <pubDate>Mon, 06 Sep 2021 07:00:41 +0000</pubDate>
      <link>https://dev.to/zigrazor/javascript-library-and-resources-202k</link>
      <guid>https://dev.to/zigrazor/javascript-library-and-resources-202k</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLiuGO1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ng6yfq7x72vxhhpylr5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLiuGO1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ng6yfq7x72vxhhpylr5.png" alt="JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A collection of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"&gt;JavaScript&lt;/a&gt; libraries, resources and shiny things.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#package-managers"&gt;
  &lt;/a&gt;
  Package Managers
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Host the JavaScript libraries and provide tools for fetching and packaging them.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; - npm is the package manager for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bower/bower"&gt;Bower&lt;/a&gt; - A package manager for the web.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/componentjs/component"&gt;component&lt;/a&gt; - Client package management for building better web applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/spmjs/spm"&gt;spm&lt;/a&gt; - Brand new static package manager.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/caolan/jam"&gt;jam&lt;/a&gt; - A package manager using a browser-focused and RequireJS compatible repository.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jspm/jspm-cli"&gt;jspm&lt;/a&gt; - Frictionless browser package management.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ender-js/Ender"&gt;Ender&lt;/a&gt; - The no-library library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/volojs/volo"&gt;volo&lt;/a&gt; - Create front end projects from templates, add dependencies, and automate the resulting projects.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/duojs/duo"&gt;Duo&lt;/a&gt; - Next-generation package manager that blends the best ideas from Component, Browserify and Go to make organizing and writing front-end code quick and painless.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://yarnpkg.com/"&gt;yarn&lt;/a&gt; - Fast, reliable, and secure dependency management.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pnpm.js.org/"&gt;pnpm&lt;/a&gt; - Fast, disk space efficient package manager.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#component-management"&gt;
  &lt;/a&gt;
  Component Management
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/teambit/bit"&gt;Bit&lt;/a&gt; - Create, find and reuse components (React, Angular, Node etc.) across applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#loaders"&gt;
  &lt;/a&gt;
  Loaders
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Module or loading system for JavaScript.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/requirejs/requirejs"&gt;RequireJS&lt;/a&gt; - A file and module loader for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/substack/node-browserify"&gt;browserify&lt;/a&gt; - Browser-side require() the node.js way.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/seajs/seajs"&gt;SeaJS&lt;/a&gt; - A Module Loader for the Web.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/headjs/headjs"&gt;HeadJS&lt;/a&gt; - The only script in your HEAD.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cujojs/curl"&gt;curl&lt;/a&gt; - A small, fast, extensible module loader that handles AMD, CommonJS Modules/1.1, CSS, HTML/text, and legacy scripts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rgrove/lazyload/"&gt;lazyload&lt;/a&gt; - Tiny, dependency-free async JavaScript and CSS loader.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ded/script.js"&gt;script.js&lt;/a&gt; - Asynchronous JavaScript loader and dependency manager.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/systemjs/systemjs"&gt;systemjs&lt;/a&gt; - AMD, CJS &amp;amp; ES6 spec-compliant module loader.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/yanhaijing/lodjs"&gt;LodJS&lt;/a&gt; - Module loader based on AMD.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ecomfe/esl"&gt;ESL&lt;/a&gt; - Module loader browser first, support lazy define and AMD.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lrsjng/modulejs"&gt;modulejs&lt;/a&gt; - Lightweight JavaScript module system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#bundlers"&gt;
  &lt;/a&gt;
  Bundlers
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/webpack/webpack"&gt;webpack&lt;/a&gt; - Packs CommonJs/AMD modules for the browser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rollup/rollup"&gt;Rollup&lt;/a&gt; - Next-generation ES6 module bundler.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/brunch/brunch"&gt;Brunch&lt;/a&gt; - Fast front-end web app build tool with simple declarative config.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/parcel-bundler/parcel"&gt;Parcel&lt;/a&gt; - Blazing fast, zero configuration web application bundler.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/developit/microbundle"&gt;Microbundle&lt;/a&gt; - Zero-configuration bundler for tiny modules.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fuse-box/fuse-box"&gt;FuseBox&lt;/a&gt; - A bundler that does it right&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.snowpack.dev/"&gt;Snowpack&lt;/a&gt; - A lightning-fast frontend build tool, designed for the modern web.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#type-checkers"&gt;
  &lt;/a&gt;
  Type Checkers
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; - A typed superset of JavaScript that compiles to plain JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flow.org/en/"&gt;Flow.js&lt;/a&gt; - A static type checker for JavaScript from Facebook.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jsmonk.github.io/hegel/"&gt;Hegel&lt;/a&gt; -  A static type checker for JavaScript with a bias on type inference an strong type system.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/getify/TypL"&gt;TypL&lt;/a&gt; - the JavaScript Type Linter with a bias on type inference.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/xodio/hm-def"&gt;Hindley Milner Definitions&lt;/a&gt; - runtime type checking for JavaScript functions using Haskell-alike Hindley Milner type signatures.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#testing-frameworks"&gt;
  &lt;/a&gt;
  Testing Frameworks
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#frameworks"&gt;
  &lt;/a&gt;
  Frameworks
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/mochajs/mocha"&gt;mocha&lt;/a&gt; - Simple, flexible, fun JavaScript test framework for node.js &amp;amp; the browser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jasmine/jasmine"&gt;jasmine&lt;/a&gt; - DOM-less simple JavaScript testing framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jquery/qunit"&gt;qunit&lt;/a&gt; - An easy-to-use JavaScript Unit Testing framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/jest"&gt;jest&lt;/a&gt; - Painless JavaScript Unit Testing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/azer/prova"&gt;prova&lt;/a&gt; - Node &amp;amp; Browser test runner based on Tape and Browserify&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dalekjs/dalek"&gt;DalekJS&lt;/a&gt; - Automated cross browser functional testing with JavaScript&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/angular/protractor"&gt;Protractor&lt;/a&gt; - Protractor is an end-to-end test framework for AngularJS applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/substack/tape"&gt;tape&lt;/a&gt; - Tap-producing test harness for node and browsers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/DevExpress/testcafe"&gt;TestCafe&lt;/a&gt; - Automated browser testing for the modern web development stack.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/avajs/ava"&gt;ava&lt;/a&gt; - 🚀 Futuristic JavaScript test runner&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt; - Complete end-to-end testing framework for anything that runs in a browser and beyond.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#assertion"&gt;
  &lt;/a&gt;
  Assertion
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/chaijs/chai"&gt;chai&lt;/a&gt; - BDD / TDD assertion framework for node.js and the browser that can be paired with any testing framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://airbnb.io/enzyme/index.html"&gt;Enzyme&lt;/a&gt; - Enzyme is a JavaScript Testing utility for React that makes it easier to assert, manipulate, and traverse your React Components' output.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kentcdodds/react-testing-library"&gt;react testing library&lt;/a&gt; - Simple and complete React DOM testing utilities that encourage good testing practices.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sinonjs/sinon"&gt;Sinon.JS&lt;/a&gt; - Test spies, stubs, and mocks for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Automattic/expect.js"&gt;expect.js&lt;/a&gt; - Minimalistic BDD-style assertions for Node.JS and the browser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/thlorenz/proxyquire"&gt;proxyquire&lt;/a&gt; - Stub nodejs's require.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#coverage"&gt;
  &lt;/a&gt;
  Coverage
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/gotwarlost/istanbul"&gt;istanbul&lt;/a&gt; - Yet another JS code coverage tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alex-seville/blanket"&gt;blanket&lt;/a&gt; - A simple code coverage library for JavaScript. Designed to be easy to install and use, for both browser and nodejs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tntim96/JSCover"&gt;JSCover&lt;/a&gt; - JSCover is a tool that measures code coverage for JavaScript programs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#runner"&gt;
  &lt;/a&gt;
  Runner
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ariya/phantomjs"&gt;phantomjs&lt;/a&gt; - Scriptable Headless WebKit.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/laurentj/slimerjs"&gt;slimerjs&lt;/a&gt; - A PhantomJS-like tool running Gecko.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/casperjs/casperjs"&gt;casperjs&lt;/a&gt; - Navigation scripting &amp;amp; testing utility for PhantomJS and SlimerJS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/assaf/zombie"&gt;zombie&lt;/a&gt; - Insanely fast, full-stack, headless browser testing using node.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/totorojs/totoro"&gt;totoro&lt;/a&gt; - A simple and stable cross-browser testing tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/karma-runner/karma"&gt;karma&lt;/a&gt; - Spectacular Test Runner for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nightwatchjs/nightwatch"&gt;nightwatch&lt;/a&gt; - UI automated testing framework based on node.js and selenium webdriver.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/theintern/intern"&gt;intern&lt;/a&gt; - A next-generation code testing stack for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.yolpo.com"&gt;yolpo&lt;/a&gt; - A statement-by-statement JavaScript interpreter in the browser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/GoogleChrome/puppeteer"&gt;puppeteer&lt;/a&gt; - Headless Chrome Node.js API by official Google Chrome team.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/webdriverio/webdriverio"&gt;webdriverio&lt;/a&gt; - Next-gen WebDriver test automation framework for Node.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/getgauge/taiko"&gt;taiko&lt;/a&gt; - A Node.js library with a simple API to automate Chromium based browsers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#qa-tools"&gt;
  &lt;/a&gt;
  QA Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/prettier/prettier"&gt;prettier&lt;/a&gt; - Prettier is an opinionated code formatter.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jshint/jshint/"&gt;JSHint&lt;/a&gt; - JSHint is a tool that helps to detect errors and potential problems in your JavaScript code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jscs-dev/node-jscs"&gt;jscs&lt;/a&gt; - JavaScript Code Style checker.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rdio/jsfmt"&gt;jsfmt&lt;/a&gt; - For formatting, searching, and rewriting JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/danielstjules/jsinspect"&gt;jsinspect&lt;/a&gt; - Detect copy-pasted and structurally similar code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/danielstjules/buddy.js"&gt;buddy.js&lt;/a&gt; - Magic number detection for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/eslint/eslint"&gt;ESLint&lt;/a&gt; - A fully pluggable tool for identifying and reporting on patterns in JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/douglascrockford/JSLint"&gt;JSLint&lt;/a&gt; - High-standards, strict &amp;amp; opinionated code quality tool, aiming to keep only good parts of the language.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/feross/standard"&gt;JavaScript Standard Style&lt;/a&gt; - Opinionated, no-configuration style guide, style checker, and formatter&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kentcdodds/preval.macro"&gt;Pre-evaluate code at buildtime&lt;/a&gt; - Pre-evaluate your front end javascript code at build-time&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/beautify-web/js-beautify"&gt;JS-Beautifier&lt;/a&gt; - Npm cli and library to format JS code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/typicode/husky"&gt;husky&lt;/a&gt; - Prevents bad git commit, git push and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#mvc-frameworks-and-libraries"&gt;
  &lt;/a&gt;
  MVC Frameworks and Libraries
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/angular/angular.js"&gt;angular.js&lt;/a&gt; - HTML enhanced for web apps. (deprecated)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/angular/angular"&gt;angular&lt;/a&gt; - Angular is a development platform for building mobile and desktop web applications using Typescript/JavaScript and other languages.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://aurelia.io"&gt;aurelia&lt;/a&gt; - A JavaScript client framework for mobile, desktop and web.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jashkenas/backbone"&gt;backbone&lt;/a&gt; - Give your JS App some Backbone with Models, Views, Collections, and Events.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/emberjs/ember.js"&gt;ember.js&lt;/a&gt; - A JavaScript framework for creating ambitious web applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/meteor/meteor"&gt;meteor&lt;/a&gt; - An ultra-simple, database-everywhere, data-on-the-wire, pure-javascript web framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ractivejs/ractive"&gt;ractive&lt;/a&gt; - Next-generation DOM manipulation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vuejs/vue"&gt;vue&lt;/a&gt; - Intuitive, fast &amp;amp; composable MVVM for building interactive interfaces.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sveltejs/svelte"&gt;svelte&lt;/a&gt; - Svelte is a new way to build web applications. It's a compiler that takes your declarative components and converts them into efficient JavaScript that surgically updates the DOM.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/knockout/knockout"&gt;knockout&lt;/a&gt; - Knockout makes it easier to create rich, responsive UIs with JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/spine/spine"&gt;spine&lt;/a&gt; - Lightweight MVC library for building JavaScript applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/techlayer/espresso.js"&gt;espresso.js&lt;/a&gt; - A minimal JavaScript library for crafting user interfaces.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/canjs/canjs"&gt;canjs&lt;/a&gt; - Can do JS, better, faster, easier.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://facebook.github.io/react/"&gt;react&lt;/a&gt; - A library for building user interfaces. It's declarative, efficient, and extremely flexible. Works with a Virtual DOM.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hyperapp/hyperapp"&gt;hyperapp&lt;/a&gt; - 1kb JavaScript library for building frontend applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/developit/preact"&gt;preact&lt;/a&gt; - Fast 3kb React alternative with the same ES6 API. Components &amp;amp; Virtual DOM.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NativeScript/NativeScript"&gt;nativescript&lt;/a&gt; - Build truly native cross-platform iOS and Android apps with JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/react-native"&gt;react-native&lt;/a&gt; - A framework for building native apps with React.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/riot/riot"&gt;riot&lt;/a&gt; - React-like library, but with very small size.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/walmartlabs/thorax"&gt;thorax&lt;/a&gt; - Strengthening your Backbone.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chaplinjs/chaplin"&gt;chaplin&lt;/a&gt; - An architecture for JavaScript applications using the Backbone.js library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/marionettejs/backbone.marionette"&gt;marionette&lt;/a&gt; - A composite application library for Backbone.js that aims to simplify the construction of large scale JavaScript applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ripplejs/ripple"&gt;ripple&lt;/a&gt; - A tiny foundation for building reactive views.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mikeric/rivets"&gt;rivets&lt;/a&gt; - Lightweight and powerful data binding + templating solution.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/derbyjs/derby"&gt;derby&lt;/a&gt; - MVC framework making it easy to write realtime, collaborative applications that run in both Node.js and browsers.

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/russll/awesome-derby"&gt;derby-awesome&lt;/a&gt; - A collection of awesome derby components&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gwendall/way.js"&gt;way.js&lt;/a&gt; - Simple, lightweight, persistent two-way databinding.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lhorie/mithril.js"&gt;mithril.js&lt;/a&gt; - Mithril is a client-side MVC framework (Light-weight, Robust, Fast).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/astoilkov/jsblocks"&gt;jsblocks&lt;/a&gt; - jsblocks is better MV-ish framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.lava-framework.com/"&gt;LiquidLava&lt;/a&gt; - Transparent MVC framework for building user interfaces.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/feathersjs/feathers"&gt;feathers&lt;/a&gt; - A minimalist real-time JavaScript framework for tomorrow's apps.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Wildhoney/Keo"&gt;Keo&lt;/a&gt; - Functional stateless React components with Shadow DOM support.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/emadalam/atvjs"&gt;atvjs&lt;/a&gt; - Blazing fast Apple TV application development using pure JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alpinejs/alpine"&gt;Alpine.js&lt;/a&gt; - offers you the reactive and declarative nature of big frameworks like Vue or React at a much lower cost.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/infernojs/inferno"&gt;inferno&lt;/a&gt; - 🔥 An extremely fast, React-like JavaScript library for building modern user interfaces.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://foalts.org"&gt;FoalTS&lt;/a&gt; - Elegant and all-inclusive Node.JS framework for building web applications (TypeScript).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/aidenybai/lucia"&gt;Lucia&lt;/a&gt; - 3kb library for tiny web apps.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/adonisjs/core"&gt;Adonis&lt;/a&gt; - The Node.js Framework highly focused on developer ergonomics, stability and confidence&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nodepowered-cms-frameworks"&gt;
  &lt;/a&gt;
  Node-Powered CMS Frameworks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/keystonejs/keystone"&gt;KeystoneJS&lt;/a&gt; - powerful CMS and web app framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/reactioncommerce/reaction"&gt;Reaction Commerce&lt;/a&gt; - reactive CMS, real-time architecture and design.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tryghost/Ghost"&gt;Ghost&lt;/a&gt; - simple, powerful publishing platform.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/punkave/apostrophe"&gt;Apostrophe&lt;/a&gt; - CMS with content editing and essential services.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/wejs/we/"&gt;We.js&lt;/a&gt; - framework for real time apps, sites or blogs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/inventures/hatchjs"&gt;Hatch.js&lt;/a&gt; - CMS platform with social features.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/xtremespb/taracotjs-generator/"&gt;TaracotJS&lt;/a&gt; - fast and minimalist CMS based on Node.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodize/nodizecms"&gt;Nodizecms&lt;/a&gt; - CMS for CoffeeScript lovers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jcoppieters/cody"&gt;Cody&lt;/a&gt; - CMS with WSYWYG editor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pencilblue/pencilblue/"&gt;PencilBlue&lt;/a&gt; - CMS and blogging platform.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/strapi/strapi"&gt;Strapi&lt;/a&gt; - Open source Node.js Headless CMS to easily build customisable APIs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fiction-com/factor"&gt;Factor&lt;/a&gt; - The Javascript CMS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#templating-engines"&gt;
  &lt;/a&gt;
  Templating Engines
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Templating engines allow you to perform string interpolation.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/janl/mustache.js"&gt;mustache.js&lt;/a&gt; - Minimal templating with mustaches in JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/wycats/handlebars.js/"&gt;handlebars.js&lt;/a&gt; - An extension to the Mustache templating language.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mozilla.github.io/nunjucks/"&gt;nunjucks&lt;/a&gt; - A rich and powerful templating language for JavaScript from Mozilla.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/twitter/hogan.js"&gt;hogan.js&lt;/a&gt; - A compiler for the Mustache templating language.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/olado/doT"&gt;doT&lt;/a&gt; - The fastest + concise JavaScript template engine for nodejs and browsers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/linkedin/dustjs/"&gt;dustjs&lt;/a&gt; - Asynchronous templates for the browser and node.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sstephenson/eco/"&gt;eco&lt;/a&gt; - Embedded CoffeeScript templates.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/blueimp/JavaScript-Templates"&gt;JavaScript-Templates&lt;/a&gt; - &amp;lt; 1KB lightweight, fast &amp;amp; powerful JavaScript templating engine with zero dependencies.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jasonmoo/t.js"&gt;t.js&lt;/a&gt; - A tiny JavaScript templating framework in ~400 bytes gzipped.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pugjs/pug"&gt;Pug&lt;/a&gt; - Robust, elegant, feature rich template engine for nodejs. (formerly known as Jade)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mde/ejs"&gt;EJS&lt;/a&gt; - Effective JavaScript templating.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/xtemplate/xtemplate"&gt;xtemplate&lt;/a&gt; - eXtensible Template Engine lib for node and the browser&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/marko-js/marko"&gt;marko&lt;/a&gt; - A fast, lightweight, HTML-based templating engine for Node.js and the browser with async, streaming, custom tags and CommonJS modules as compiled output.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/paularmstrong/swig"&gt;swig&lt;/a&gt; - (Archived) A simple, powerful, and extendable Node.js and browser-based JavaScript template engine.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#articles-and-posts"&gt;
  &lt;/a&gt;
  Articles and Posts
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://medium.com/@pedropolisenso/o-javasscript-que-voc%C3%AA-deveria-conhecer-b70e94d1d706"&gt;The JavaScript that you should know&lt;/a&gt; - Article about concepts of JavaScript Functional.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.sessionstack.com/tagged/tutorial"&gt;How JavaScript works&lt;/a&gt; - A series of articles about the building blocks of JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.loginradius.com/engineering/blog/adding-multi-threading-to-javascript-using-web-workers/"&gt;Multi-threading using web-workers&lt;/a&gt; - Web Workers: Adding Multi-threading to JavaScript&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.loginradius.com/engineering/blog/breaking-down-this-keyword-in-javascript/"&gt;this keyword in JavaScript&lt;/a&gt; - Breaking down the 'this' keyword in JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#data-visualization"&gt;
  &lt;/a&gt;
  Data Visualization
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Data visualization tools for the web.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/d3/d3"&gt;d3&lt;/a&gt; - A JavaScript visualization library for HTML and SVG.

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/mozilla/metrics-graphics"&gt;metrics-graphics&lt;/a&gt; - A library optimized for concise, principled data graphics and layouts.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mrdoob/three.js"&gt;three.js&lt;/a&gt; - JavaScript 3D library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chartjs/Chart.js"&gt;Chart.js&lt;/a&gt; - Simple HTML5 Charts using the &amp;lt;canvas&amp;gt; tag.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/paperjs/paper.js"&gt;paper.js&lt;/a&gt; - The Swiss Army Knife of Vector Graphics Scripting – Scriptographer ported to JavaScript and the browser, using HTML5 Canvas.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kangax/fabric.js"&gt;fabric.js&lt;/a&gt; - JavaScript Canvas Library, SVG-to-Canvas (&amp;amp; canvas-to-SVG) Parser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/benpickles/peity"&gt;peity&lt;/a&gt; - Progressive  bar, line and pie charts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/DmitryBaranovskiy/raphael"&gt;raphael&lt;/a&gt; - JavaScript Vector Library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/apache/echarts"&gt;echarts&lt;/a&gt; - Enterprise Charts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/almende/vis"&gt;vis&lt;/a&gt; - Dynamic, browser-based visualization library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jonobr1/two.js"&gt;two.js&lt;/a&gt; - A renderer agnostic two-dimensional drawing api for the web.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/DmitryBaranovskiy/g.raphael"&gt;g.raphael&lt;/a&gt; - Charts for Raphaël.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jacomyal/sigma.js"&gt;sigma.js&lt;/a&gt; - A JavaScript library dedicated to graph drawing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/samizdatco/arbor"&gt;arbor&lt;/a&gt; - A graph visualization library using web workers and jQuery.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/square/cubism"&gt;cubism&lt;/a&gt; - A D3 plugin for visualizing time series.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dc-js/dc.js"&gt;dc.js&lt;/a&gt; - Multi-Dimensional charting built to work natively with crossfilter rendered with d3.js&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trifacta/vega"&gt;vega&lt;/a&gt; - A visualization grammar.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://processingjs.org/"&gt;processing.js&lt;/a&gt; - Processing.js makes your data visualizations work using web standards and without any plug-ins.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/HumbleSoftware/envisionjs"&gt;envisionjs&lt;/a&gt; - Dynamic HTML5 visualization.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/shutterstock/rickshaw"&gt;rickshaw&lt;/a&gt; - JavaScript toolkit for creating interactive real-time graphs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/flot/flot"&gt;flot&lt;/a&gt; - Attractive JavaScript charts for jQuery.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/morrisjs/morris.js"&gt;morris.js&lt;/a&gt; - Pretty time-series line graphs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/novus/nvd3"&gt;nvd3&lt;/a&gt; - Build re-usable charts and chart components for d3.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/wout/svg.js"&gt;svg.js&lt;/a&gt; - A lightweight library for manipulating and animating SVG.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pa7/heatmap.js"&gt;heatmap.js&lt;/a&gt; - JavaScript Library for HTML5 canvas based heatmaps.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gwatts/jquery.sparkline"&gt;jquery.sparkline&lt;/a&gt; - A plugin for the jQuery JavaScript library to generate small sparkline charts directly in the browser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/qrohlf/trianglify"&gt;trianglify&lt;/a&gt; - Low poly style background generator with d3.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jasondavies/d3-cloud"&gt;d3-cloud&lt;/a&gt; - Create word clouds in JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/heavysixer/d4"&gt;d4&lt;/a&gt; - A friendly reusable charts DSL for D3.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://dimplejs.org"&gt;dimple.js&lt;/a&gt; - Easy charts for business analytics powered by d3.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gionkunz/chartist-js"&gt;chartist-js&lt;/a&gt; - Simple responsive charts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/epochjs/epoch"&gt;epoch&lt;/a&gt; - A general purpose real-time charting library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/c3js/c3"&gt;c3&lt;/a&gt; - D3-based reusable chart library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/BabylonJS/Babylon.js"&gt;BabylonJS&lt;/a&gt; - A framework for building 3D games with HTML 5 and WebGL.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/recharts/recharts"&gt;recharts&lt;/a&gt; - Redefined chart library built with React and D3.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AnyChart/GraphicsJS"&gt;GraphicsJS&lt;/a&gt; - A lightweight JavaScript graphics library with the intuitive API, based on SVG/VML technology.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jgraph/mxgraph"&gt;mxGraph&lt;/a&gt; - Diagramming library that enables interactive graph and charting applications to be quickly created that run natively in any major browser that is supported by its vendor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/frappe/charts"&gt;Frappe Charts&lt;/a&gt; - GitHub-inspired simple and modern SVG charts for the web with zero dependencies.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/frappe/gantt"&gt;Frappe Gantt&lt;/a&gt; - A simple, interactive, modern gantt chart library for the web.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/antvis/G2"&gt;G2&lt;/a&gt; - A highly interactive data-driven visualization grammar for statistical charts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/antvis/G2Plot"&gt;G2Plot&lt;/a&gt; - An interactive and responsive charting library. Based on the grammar of graphics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There're also some great commercial libraries, like &lt;a href="https://www.amcharts.com/"&gt;amchart&lt;/a&gt;, &lt;a href="http://www.anychart.com"&gt;anychart&lt;/a&gt;, &lt;a href="https://plot.ly/"&gt;plotly&lt;/a&gt;, &lt;a href="http://www.highcharts.com/"&gt;highchart&lt;/a&gt;, and &lt;a href="https://www.arction.com/lightningchart-js/"&gt;lightning chart&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#timeline"&gt;
  &lt;/a&gt;
  Timeline
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/NUKnightLab/TimelineJS3"&gt;TimelineJS v3&lt;/a&gt; - A Storytelling Timeline built in JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sbstjn/timesheet.js"&gt;timesheet.js&lt;/a&gt; - JavaScript library for simple HTML5 &amp;amp; CSS3 time sheets.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#spreadsheet"&gt;
  &lt;/a&gt;
  Spreadsheet
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/handsontable/handsontable"&gt;HANDSONTABLE&lt;/a&gt; - Handsontable is a JavaScript/HTML5 Spreadsheet Library for Developers&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/frappe/datatable"&gt;Frappe Datatable&lt;/a&gt; - Frappe DataTable is a simple, modern and interactive datatable library for displaying tabular data. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mengshukeji/Luckysheet"&gt;Luckysheet&lt;/a&gt; - Luckysheet is an online spreadsheet like excel that is powerful, simple to configure, and completely open source.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#editors"&gt;
  &lt;/a&gt;
  Editors
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ajaxorg/ace"&gt;ace&lt;/a&gt; - Ace (Ajax.org Cloud9 Editor).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/codemirror/CodeMirror"&gt;CodeMirror&lt;/a&gt; - In-browser code editor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ariya/esprima"&gt;esprima&lt;/a&gt; - ECMAScript parsing infrastructure for multipurpose analysis.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/quilljs/quill"&gt;quill&lt;/a&gt; - A cross browser rich text editor with an API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/yabwe/medium-editor"&gt;medium-editor&lt;/a&gt; - Medium.com WYSIWYG editor clone.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sofish/pen"&gt;pen&lt;/a&gt; - enjoy live editing (+markdown).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/raphaelcruzeiro/jquery-notebook"&gt;jquery-notebook&lt;/a&gt; - A simple, clean and elegant text editor. Inspired by the awesomeness of Medium.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mindmup/bootstrap-wysiwyg"&gt;bootstrap-wysiwyg&lt;/a&gt; - Tiny bootstrap-compatible WYSIWYG rich text editor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ckeditor/ckeditor-releases"&gt;ckeditor-releases&lt;/a&gt; - The best web text editor for everyone.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lepture/editor"&gt;editor&lt;/a&gt; - A markdown editor. still on development.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/OscarGodson/EpicEditor"&gt;EpicEditor&lt;/a&gt; - An embeddable JavaScript Markdown editor with split fullscreen editing, live previewing, automatic draft saving, offline support, and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/josdejong/jsoneditor"&gt;jsoneditor&lt;/a&gt; - A web-based tool to view, edit and format JSON.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/coolwanglu/vim.js"&gt;vim.js&lt;/a&gt; - JavaScript port of Vim with a persistent &lt;code&gt;~/.vimrc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/neilj/Squire"&gt;Squire&lt;/a&gt; - HTML5 rich text editor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tinymce/tinymce"&gt;TinyMCE&lt;/a&gt; - The JavaScript Rich Text editor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/basecamp/trix"&gt;trix&lt;/a&gt; - A rich text editor for everyday writing. By Basecamp.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Alex-D/Trumbowyg"&gt;Trumbowyg&lt;/a&gt; - A lightweight and amazing WYSIWYG JavaScript editor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/draft-js"&gt;Draft.js&lt;/a&gt; - A React framework for building text editors.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jhollingworth/bootstrap-wysihtml5"&gt;bootstrap-wysihtml5&lt;/a&gt; - Simple, beautiful wysiwyg editor&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/xing/wysihtml5"&gt;wysihtml5&lt;/a&gt; - Open source rich text editor based on HTML5 and the progressive-enhancement approach. Uses a sophisticated security concept and aims to generate fully valid HTML5 markup by preventing unmaintainable tag soups and inline styles.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/PANmedia/raptor-editor"&gt;raptor-editor&lt;/a&gt; - Raptor, an HTML5 WYSIWYG content editor!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kenshin54/popline"&gt;popline&lt;/a&gt; - Popline is an HTML5 Rich-Text-Editor Toolbar.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/summernote/summernote"&gt;Summernote&lt;/a&gt; - Super simple WYSIWYG editor.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://devdocs.io/"&gt;DevDocs&lt;/a&gt; is an all-in-one API documentation reader with a fast, organized, and consistent interface.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.dexy.it/"&gt;dexy&lt;/a&gt; is a free-form literate documentation tool for writing any kind of technical document incorporating code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://jashkenas.github.io/docco/"&gt;docco&lt;/a&gt; is a quick-and-dirty, hundred-line-long, literate-programming-style documentation generator.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://jacobrask.github.io/styledocco/"&gt;styledocco&lt;/a&gt; generates documentation and style guide documents from your stylesheets.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rtomayko/ronn"&gt;Ronn&lt;/a&gt; builds manuals. It converts simple, human readable textfiles to roff for terminal display, and also to HTML for the web.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tj/dox"&gt;dox&lt;/a&gt; is a JavaScript documentation generator written with node. Dox no longer generates an opinionated structure or style for your docs, it simply gives you a JSON representation, allowing you to use markdown and JSDoc-style tags.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sutoiku/jsdox"&gt;jsdox&lt;/a&gt; is a JSDoc3 to Markdown documentation generator.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/esdoc/esdoc"&gt;ESDoc&lt;/a&gt; is a good documentation generator for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://yui.github.io/yuidoc/"&gt;YUIDoc&lt;/a&gt; is a Node.js application that generates API documentation from comments in source, using a syntax similar to tools like Javadoc and Doxygen.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://doug-martin.github.io/coddoc/"&gt;coddoc&lt;/a&gt; is a jsdoc parsing library. Coddoc is different in that it is easily extensible by allowing users to add tag and code parsers through the use of coddoc.addTagHandler and coddoc.addCodeHandler. coddoc also parses source code to be used in APIs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.sphinx-doc.org/"&gt;sphinx&lt;/a&gt; a tool that makes it easy to create intelligent and beautiful documentation&lt;/li&gt;
&lt;li&gt;&lt;a href="http://usejsdoc.org/"&gt;Using JSDoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://beautifuldocs.com/"&gt;Beautiful docs&lt;/a&gt; is a documentation viewer based on markdown files.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://documentation.js.org"&gt;documentation.js&lt;/a&gt; - API documentation generator with support for ES2015+ and flow annotation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/senchalabs/jsduck"&gt;jsduck&lt;/a&gt; - API documentation generator made for Sencha JavaScript frameworks, but can be used for other frameworks too.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Bogdan-Lyashenko/codecrumbs"&gt;codecrumbs&lt;/a&gt; is a visual tool for learning and documenting a codebase by putting breadcrumbs in source code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#files"&gt;
  &lt;/a&gt;
  Files
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Libraries for working with files.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/mholt/PapaParse"&gt;Papa Parse&lt;/a&gt; - A powerful CSV library that supports parsing CSV files/strings and also exporting to CSV.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jDataView/jBinary"&gt;jBinary&lt;/a&gt; - High-level I/O (loading, parsing, manipulating, serializing, saving) for binary files with declarative syntax for describing file types and data structures.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rtfpessoa/diff2html"&gt;diff2html&lt;/a&gt; - Git diff output parser and pretty HTML generator.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/MrRio/jsPDF"&gt;jsPDF&lt;/a&gt; - JavaScript PDF generation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mozilla/pdf.js"&gt;PDF.js&lt;/a&gt; - PDF Reader in JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#functional-programming"&gt;
  &lt;/a&gt;
  Functional Programming
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Functional programming libraries to extend JavaScript’s capabilities.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/jashkenas/underscore"&gt;underscore&lt;/a&gt; - JavaScript's utility _ belt.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lodash/lodash"&gt;lodash&lt;/a&gt; - A utility library delivering consistency, customization, performance, &amp;amp; extras.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/andrewplummer/Sugar"&gt;Sugar&lt;/a&gt; - A JavaScript library for working with native objects.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dtao/lazy.js"&gt;lazy.js&lt;/a&gt; - Like Underscore, but lazier.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/CrossEye/ramda"&gt;ramda&lt;/a&gt; - A practical functional library for JavaScript programmers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mout/mout"&gt;mout&lt;/a&gt; - Modular JavaScript Utilities.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/crcn/mesh.js"&gt;mesh&lt;/a&gt; - Streamable data synchronization utility.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alanrsoares/prelude-js"&gt;preludejs&lt;/a&gt; - Hardcore Functional Programming for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/selfrefactor/rambda"&gt;rambda&lt;/a&gt; - Faster and smaller alternative to &lt;em&gt;Ramda&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#reactive-programming"&gt;
  &lt;/a&gt;
  Reactive Programming
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Reactive programming libraries to extend JavaScript’s capabilities.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ReactiveX/rxjs"&gt;RxJS&lt;/a&gt; - A reactive programming library for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/baconjs/bacon.js"&gt;Bacon&lt;/a&gt; - FRP (functional reactive programming) library for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pozadi/kefir"&gt;Kefir&lt;/a&gt; - FRP library for JavaScript inspired by Bacon.js and RxJS with focus on high performance and low memory consumption.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://highlandjs.org/"&gt;Highland&lt;/a&gt; - Re-thinking the JavaScript utility belt, Highland manages synchronous and asynchronous code easily, using nothing more than standard JavaScript and Node-like Streams.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cujojs/most"&gt;Most.js&lt;/a&gt; - high performance FRP library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mobxjs/mobx"&gt;MobX&lt;/a&gt; - TFRP library for simple, scalable state management.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cycle.js.org"&gt;Cycle.js&lt;/a&gt; - A functional and reactive JavaScript library for cleaner code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/concentjs/concent"&gt;concent&lt;/a&gt; - Definitely the ❤️ simplest but ⚡️ strongest state management for react, it is predictable、progressive and efficient.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#data-structure"&gt;
  &lt;/a&gt;
  Data Structure
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Data structure libraries to build a more sophisticated application.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/immutable-js"&gt;immutable-js&lt;/a&gt; - Immutable Data Collections including Sequence, Range, Repeat, Map, OrderedMap, Set and a sparse Vector.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/swannodette/mori"&gt;mori&lt;/a&gt; - A library for using ClojureScript's persistent data structures and supporting API from the comfort of vanilla JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mauriciosantos/Buckets-JS"&gt;buckets&lt;/a&gt; - A complete, fully tested and documented data structure library written in JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/flesler/hashmap"&gt;hashmap&lt;/a&gt; - Simple hashmap implementation that supports any kind of keys.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#date"&gt;
  &lt;/a&gt;
  Date
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Date Libraries.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/moment/moment"&gt;moment&lt;/a&gt; - Parse, validate, manipulate, and display dates in JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/moment/moment-timezone"&gt;moment-timezone&lt;/a&gt; - Timezone support for moment.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rmm5t/jquery-timeago"&gt;jquery-timeago&lt;/a&gt; - A jQuery plugin that makes it easy to support automatically updating fuzzy timestamps (e.g. "4 minutes ago").&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mde/timezone-js"&gt;timezone-js&lt;/a&gt; - Timezone-enabled JavaScript Date object. Uses Olson zoneinfo files for timezone data.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/MatthewMueller/date"&gt;date&lt;/a&gt; - Date() for humans.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rauchg/ms.js"&gt;ms.js&lt;/a&gt; - Tiny millisecond conversion utility.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gumroad/countdown.js"&gt;countdown.js&lt;/a&gt; - Super simple countdowns.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hustcc/timeago.js"&gt;timeago.js&lt;/a&gt; - Simple library (less then 2kb) used to format date with &lt;code&gt;*** time ago&lt;/code&gt; statement.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/taylorhakes/fecha"&gt;fecha&lt;/a&gt; - Lightweight date formatting and parsing (~2KB). Meant to replace parsing and formatting functionality of moment.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/date-fns/date-fns"&gt;date-fns&lt;/a&gt; - Modern JavaScript date utility library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dawidjaniga/map-countdown"&gt;map-countdown&lt;/a&gt; - A browser countdown built on top of the Google Maps.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/iamkun/dayjs"&gt;dayjs&lt;/a&gt; - Day.js 2KB immutable date library alternative to Moment.js with the same modern API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/moment/luxon"&gt;luxon&lt;/a&gt; - Luxon is a library for working with dates and times in JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#string"&gt;
  &lt;/a&gt;
  String
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;String Libraries.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/panzerdp/voca"&gt;voca&lt;/a&gt; - The ultimate JavaScript string library&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EvandroLG/selecting"&gt;selecting&lt;/a&gt; - A library that allows you to access the text selected by the user.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/epeli/underscore.string"&gt;underscore.string&lt;/a&gt; - String manipulation extensions for Underscore.js JavaScript library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jprichardson/string.js"&gt;string.js&lt;/a&gt; - Extra JavaScript string methods.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mathiasbynens/he"&gt;he&lt;/a&gt; - A robust HTML entity encoder/decoder written in JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/multiline"&gt;multiline&lt;/a&gt; - Multiline strings in JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/query-string"&gt;query-string&lt;/a&gt; - Parse and stringify URL query strings.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/medialize/URI.js/"&gt;URI.js&lt;/a&gt; - JavaScript URL mutation library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Mikhus/domurl"&gt;jsurl&lt;/a&gt; - Lightweight URL manipulation with JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alexei/sprintf.js"&gt;sprintf.js&lt;/a&gt; - A sprintf implementation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/snd/url-pattern"&gt;url-pattern&lt;/a&gt; - Easier than regex string matching patterns for urls and other strings. Turn strings into data or data into strings.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/plexis-js/plexis"&gt;plexis&lt;/a&gt; - Lo-fi, powerful, community-driven string manipulation library.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#number"&gt;
  &lt;/a&gt;
  Number
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/adamwdraper/Numeral-js"&gt;Numeral-js&lt;/a&gt; - A JavaScript library for formatting and manipulating numbers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chancejs/chancejs"&gt;chance.js&lt;/a&gt; - Random generator helper in JavaScript. Can generate numbers, strings etc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/HubSpot/odometer"&gt;odometer&lt;/a&gt; - Smoothly transitions numbers with ease.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/josscrowcroft/accounting.js"&gt;accounting.js&lt;/a&gt; - A lightweight JavaScript library for number, money and currency formatting - fully localisable, zero dependencies.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/josscrowcroft/money.js"&gt;money.js&lt;/a&gt; - A tiny (1kb) JavaScript currency conversion library, for web &amp;amp; nodeJS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/infusion/Fraction.js"&gt;Fraction.js&lt;/a&gt; - A rational number library for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/infusion/Complex.js"&gt;Complex.js&lt;/a&gt; - A complex number library for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/infusion/Polynomial.js"&gt;Polynomial.js&lt;/a&gt; - A polynomials library for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/infusion/Quaternion.js"&gt;Quaternion.js&lt;/a&gt; - A quaternion library for JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#storage"&gt;
  &lt;/a&gt;
  Storage
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/marcuswestin/store.js"&gt;store.js&lt;/a&gt; - LocalStorage wrapper for all browsers without using cookies or flash. Uses localStorage, globalStorage, and userData behavior under the hood.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mozilla/localForage"&gt;localForage&lt;/a&gt; - Offline storage, improved. Wraps IndexedDB, WebSQL, or localStorage using a simple but powerful API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/andris9/jStorage"&gt;jStorage&lt;/a&gt; - jStorage is a simple key/value database to store data on browser side.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/zendesk/cross-storage"&gt;cross-storage&lt;/a&gt; - Cross domain local storage, with permissions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/addyosmani/basket.js"&gt;basket.js&lt;/a&gt; - A script and resource loader for caching &amp;amp; loading scripts with localStorage.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeca/bag.js"&gt;bag.js&lt;/a&gt; - A caching script and resource loader, similar to basket.js, but with additional k/v interface and localStorage / websql / indexedDB support.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Wisembly/basil.js"&gt;basil.js&lt;/a&gt; - The missing JavaScript smart persistent layer.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/carhartl/jquery-cookie"&gt;jquery-cookie&lt;/a&gt; - A simple, lightweight jQuery plugin for reading, writing and deleting cookies.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/js-cookie/js-cookie"&gt;js-cookie&lt;/a&gt; - A simple, lightweight JavaScript API for handling browser cookies.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ScottHamper/Cookies"&gt;Cookies&lt;/a&gt; - JavaScript Client-Side Cookie Manipulation Library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/aaronpowell/db.js/"&gt;DB.js&lt;/a&gt; - Promise based IndexDB Wrapper library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/brianleroux/lawnchair/"&gt;lawnchair.js&lt;/a&gt; - Simple client-side JSON storage.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kripken/sql.js"&gt;sql.js&lt;/a&gt; - SQLite compiled to JavaScript through Emscripten.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nirtz89/crumbsjs"&gt;crumbsjs&lt;/a&gt; - A lightweight vanilla ES6 cookies and local storage JavaScript library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/softvar/awesome-web-storage"&gt;awesome-web-storage&lt;/a&gt; - Everything you need to know about client-side storage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#color"&gt;
  &lt;/a&gt;
  Color
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/davidmerfield/randomColor"&gt;randomColor&lt;/a&gt; - A color generator for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gka/chroma.js"&gt;chroma.js&lt;/a&gt; - JavaScript library for all kinds of color manipulations.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Qix-/color"&gt;color&lt;/a&gt; - JavaScript color conversion and manipulation library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mrmrs/colors"&gt;colors&lt;/a&gt; - Smarter defaults for colors on the web.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Fooidge/PleaseJS"&gt;PleaseJS&lt;/a&gt; - JavaScript Library for creating random pleasing colors and color schemes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bgrins/TinyColor"&gt;TinyColor&lt;/a&gt; - Fast, small color manipulation and conversion for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jariz/vibrant.js/"&gt;Vibrant.js&lt;/a&gt; - Extract prominent colors from an image.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#i18n-and-l10n"&gt;
  &lt;/a&gt;
  I18n And L10n
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Localization (l10n) and internationalization (i18n) JavaScript libraries.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/i18next/i18next"&gt;i18next&lt;/a&gt; - internationalisation (i18n) with JavaScript the easy way.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/airbnb/polyglot.js"&gt;polyglot&lt;/a&gt; - tiny i18n helper library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeca/babelfish/"&gt;babelfish&lt;/a&gt; - i18n with human friendly API and built in plurals support.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ttag-org/ttag"&gt;ttag&lt;/a&gt; - Modern javascript i18n localization library based on ES6 tagged templates and the good old GNU gettext.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#control-flow"&gt;
  &lt;/a&gt;
  Control Flow
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/caolan/async"&gt;async&lt;/a&gt; - Async utilities for node and the browser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kriskowal/q"&gt;q&lt;/a&gt; - A tool for making and composing asynchronous promises in JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/creationix/step/"&gt;step&lt;/a&gt; - An async control-flow library that makes stepping through logic easy.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bevacqua/contra/"&gt;contra&lt;/a&gt; - Asynchronous flow control with a functional taste to it.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/petkaantonov/bluebird/"&gt;Bluebird&lt;/a&gt; - fully featured promise library with focus on innovative features and performance.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cujojs/when"&gt;when&lt;/a&gt; - A solid, fast Promises/A+ and when() implementation, plus other async goodies.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gartz/ObjectEventTarget"&gt;ObjectEventTarget&lt;/a&gt; - Provide a prototype that add support to event listeners (with same behavior of EventTarget from DOMElements available on browsers).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/marcoonroad/sporadic"&gt;sporadic&lt;/a&gt; - Composable concurrency abstractions (such as streams, coroutines and Go-like channels) on top of promises, for Node and browser engines.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#routing"&gt;
  &lt;/a&gt;
  Routing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/flatiron/director"&gt;director&lt;/a&gt; - A tiny and isomorphic URL router for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/visionmedia/page.js"&gt;page.js&lt;/a&gt; - Micro client-side router inspired by the Express router (~1200 bytes).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mtrpcic/pathjs"&gt;pathjs&lt;/a&gt; - Simple, lightweight routing for web browsers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/millermedeiros/crossroads.js"&gt;crossroads&lt;/a&gt; - JavaScript Routes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/olivernn/davis.js"&gt;davis.js&lt;/a&gt; - RESTful degradable JavaScript routing using pushState.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lukeed/navaid"&gt;navaid&lt;/a&gt; - A navigation aid (aka, router) for the browser in 850 bytes~!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/cure53/DOMPurify"&gt;DOMPurify&lt;/a&gt; - A DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/leizongmin/js-xss"&gt;js-xss&lt;/a&gt; - Sanitize untrusted HTML (to prevent XSS) with a configuration specified by a Whitelist.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/yahoo/xss-filters"&gt;xss-filters&lt;/a&gt; - Secure XSS Filters by Yahoo.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/apostrophecms/sanitize-html"&gt;sanitize-html&lt;/a&gt; - sanitize-html provides a simple HTML sanitizer with a clear API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#log"&gt;
  &lt;/a&gt;
  Log
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/adamschwartz/log"&gt;log&lt;/a&gt; - Console.log with style.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Oaxoa/Conzole"&gt;Conzole&lt;/a&gt; - A debug panel built in JavaScript that wraps JavaScript native console object methods and functionality in a panel displayed inside the page.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/patik/console.log-wrapper"&gt;console.log-wrapper&lt;/a&gt; - Log to the console in any browser with clarity.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pimterry/loglevel"&gt;loglevel&lt;/a&gt; - Minimal lightweight logging for JavaScript, adding reliable log level methods to wrap any available console.log methods.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://mixu.net/minilog/"&gt;minilog&lt;/a&gt; – Lightweight client &amp;amp; server-side logging with Stream-API backends.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://guigrpa.github.io/storyboard/"&gt;storyboard&lt;/a&gt; - Universal logging library + Chrome extension; it lets you see all client and server tasks triggered by a user action in a single place.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#regexp"&gt;
  &lt;/a&gt;
  RegExp
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://regex101.com/#javascript"&gt;RegEx101&lt;/a&gt; - Online regex tester and debugger for JavaScript. Also supports Python, PHP and PCRE.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://regexr.com"&gt;RegExr&lt;/a&gt; - HTML/JS based tool for creating, testing, and learning about Regular Expressions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#voice-command"&gt;
  &lt;/a&gt;
  Voice Command
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/TalAter/annyang"&gt;annyang&lt;/a&gt; - A JavaScript library for adding voice commands to your site, using speech recognition.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pazguille/voix"&gt;voix.js&lt;/a&gt; - A JavaScript library to add voice commands to your sites, apps or games.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#api"&gt;
  &lt;/a&gt;
  API
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/axios/axios"&gt;axios&lt;/a&gt; - Promise based HTTP client for the browser and node.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SGrondin/bottleneck"&gt;bottleneck&lt;/a&gt; - A powerful rate limiter that makes throttling easy.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bettiolo/oauth-signature-js"&gt;oauth-signature-js&lt;/a&gt; - JavaScript OAuth 1.0a signature generator for node and the browser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lincolnloop/amygdala"&gt;amygdala&lt;/a&gt; - RESTful HTTP client for JavaScript powered web applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jpillora/jquery.rest"&gt;jquery.rest&lt;/a&gt; - A jQuery plugin for easy consumption of RESTful APIs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/victor-am/rails-ranger"&gt;Rails Ranger&lt;/a&gt; - An opinionated REST client for Ruby on Rails APIs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/elbywan/wretch"&gt;wretch&lt;/a&gt; - A tiny wrapper built around fetch with an intuitive syntax.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Bearer/bearer-js"&gt;Bearer.sh&lt;/a&gt; - Universal API client that supports OAuth / API Key / Basic / etc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/WebsiteBeaver/far-fetch"&gt;FarFetch&lt;/a&gt; - Modern Fetch API wrapper for simplicity, with concise file uploading.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/opticdev/optic"&gt;Optic&lt;/a&gt; - Optic automatically documents and tests your APIs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vercel/swr"&gt;SWR&lt;/a&gt; - React Hooks library for remote data fetching.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tannerlinsley/react-query"&gt;React Query&lt;/a&gt; - Hooks for fetching, caching and updating asynchronous data in React.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#streaming"&gt;
  &lt;/a&gt;
  Streaming
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/zalando/tailor"&gt;Tailor&lt;/a&gt; - Streaming layout service for front-end microservices, inspired by Facebook's BigPipe.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#vision-detection"&gt;
  &lt;/a&gt;
  Vision Detection
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/eduardolundgren/tracking.js"&gt;tracking.js&lt;/a&gt; - A modern approach for Computer Vision on the web.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/antimatter15/ocrad.js"&gt;ocrad.js&lt;/a&gt; - OCR in JavaScript via Emscripten.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#machine-learning"&gt;
  &lt;/a&gt;
  Machine Learning
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/karpathy/convnetjs"&gt;ConvNetJS&lt;/a&gt; - Deep Learning in JavaScript. Train Convolutional Neural Networks (or ordinary ones) in your browser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dn2a/dn2a-javascript"&gt;DN2A&lt;/a&gt; - Digital Neural Networks Architecture.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/harthur/brain"&gt;Brain.js&lt;/a&gt; - Neural networks in JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/stevenmiller888/mind"&gt;Mind.js&lt;/a&gt; - A flexible neural network library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cazala/synaptic"&gt;Synaptic.js&lt;/a&gt; - Architecture-free neural network library for node.js and the browser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://js.tensorflow.org"&gt;TensorFlow.js&lt;/a&gt; - A JavaScript library for training and deploying ML models in the browser and on Node.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ml5js.org"&gt;ml5.js&lt;/a&gt; - Friendly Machine Learning for the Web.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mrdimosthenis/Synapses"&gt;Synapses&lt;/a&gt; - Lightweight cross-platform Neural Network library.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#browser-detection"&gt;
  &lt;/a&gt;
  Browser Detection
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ded/bowser"&gt;bowser&lt;/a&gt; - a browser detector.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#benchmark"&gt;
  &lt;/a&gt;
  Benchmark
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/bestiejs/benchmark.js"&gt;benchmark.js&lt;/a&gt; - A benchmarking library. As used on jsPerf.com.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/logicalparadox/matcha"&gt;matcha&lt;/a&gt; - A caffeine driven, simplistic approach to benchmarking.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#code-highlighting"&gt;
  &lt;/a&gt;
  Code highlighting
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/isagalaev/highlight.js"&gt;Highlight.js&lt;/a&gt; - JavaScript syntax highlighter.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/PrismJS/prism"&gt;PrismJS&lt;/a&gt; - Lightweight, robust, elegant syntax highlighting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#loading-status"&gt;
  &lt;/a&gt;
  Loading Status
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Libraries for indicate load status.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/lightningtgc/MProgress.js"&gt;Mprogress.js&lt;/a&gt; - Create Google Material Design progress linear bars.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://ricostacruz.com/nprogress/"&gt;NProgress&lt;/a&gt; - Slim progress bars for Ajax'y applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fgnass/spin.js"&gt;Spin.js&lt;/a&gt; - A spinning activity indicator.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/usablica/progress.js"&gt;progress.js&lt;/a&gt; - Create and manage progress bar for every objects on the page.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kimmobrunfeldt/progressbar.js"&gt;progressbar.js&lt;/a&gt; - Beautiful and responsive progress bars with animated SVG paths.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/HubSpot/pace"&gt;pace&lt;/a&gt; - Automatically add a progress bar to your site.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/buunguyen/topbar"&gt;topbar&lt;/a&gt; - Tiny &amp;amp; beautiful site-wide progress indicator.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jacoborus/nanobar"&gt;nanobar&lt;/a&gt; - Very lightweight progress bars. No jQuery.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/codrops/PageLoadingEffects"&gt;PageLoadingEffects&lt;/a&gt; - Modern ways of revealing new content using SVG animations.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tobiasahlin/SpinKit"&gt;SpinKit&lt;/a&gt; - A collection of loading indicators animated with CSS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hakimel/Ladda"&gt;Ladda&lt;/a&gt; - Buttons with built-in loading indicators.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lukehaas/css-loaders"&gt;css-loaders&lt;/a&gt; - A collection of loading spinners animated with CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides libraries, there're &lt;a href="http://codepen.io/collection/HtAne/"&gt;Collection on Codepen&lt;/a&gt;, and generators like &lt;a href="http://www.ajaxload.info/"&gt;Ajaxload&lt;/a&gt;, &lt;a href="http://preloaders.net/"&gt;Preloaders&lt;/a&gt; and &lt;a href="http://cssload.net/"&gt;CSSLoad&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#validation"&gt;
  &lt;/a&gt;
  Validation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/guillaumepotier/Parsley.js"&gt;Parsley.js&lt;/a&gt; - Validate your forms, frontend, without writing a single line of JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jzaefferer/jquery-validation"&gt;jquery-validation&lt;/a&gt; - jQuery Validation Plugin.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chriso/validator.js"&gt;validator.js&lt;/a&gt; - String validation and sanitization.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rickharrison/validate.js"&gt;validate.js&lt;/a&gt; - Lightweight JavaScript form validation library inspired by CodeIgniter.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jaymorrow/validatr/"&gt;validatr&lt;/a&gt; - Cross Browser HTML5 Form Validation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://formvalidation.io/"&gt;FormValidation&lt;/a&gt; - The best jQuery plugin to validate form fields. Formerly BootstrapValidator.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/arasatasaygin/is.js"&gt;is.js&lt;/a&gt; - Check types, regexps, presence, time and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/FieldVal/fieldval-js"&gt;FieldVal&lt;/a&gt; - multipurpose validation library. Supports both sync and async validation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/neuledge/funval"&gt;Funval&lt;/a&gt; - Data validation using functions interfaces (support TypeScript).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#keyboard-wrappers"&gt;
  &lt;/a&gt;
  Keyboard Wrappers
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ccampbell/mousetrap"&gt;mousetrap&lt;/a&gt; - Simple library for handling keyboard shortcuts in JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/madrobby/keymaster"&gt;keymaster&lt;/a&gt; - A simple micro-library for defining and dispatching keyboard shortcuts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dmauro/Keypress"&gt;Keypress&lt;/a&gt; - A keyboard input capturing utility in which any key can be a modifier key.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/RobertWHurst/KeyboardJS"&gt;KeyboardJS&lt;/a&gt; - A JavaScript library for binding keyboard combos without the pain of key codes and key combo conflicts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jeresig/jquery.hotkeys"&gt;jquery.hotkeys&lt;/a&gt; - jQuery Hotkeys lets you watch for keyboard events anywhere in your code supporting almost any key combination.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/keithamus/jwerty"&gt;jwerty&lt;/a&gt; - Awesome handling of keyboard events.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tours-and-guides"&gt;
  &lt;/a&gt;
  Tours And Guides
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/usablica/intro.js"&gt;intro.js&lt;/a&gt; - A better way for new feature introduction and step-by-step users guide for your website and project.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/HubSpot/shepherd"&gt;shepherd&lt;/a&gt; - Guide your users through a tour of your app.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sorich87/bootstrap-tour"&gt;bootstrap-tour&lt;/a&gt; - Quick and easy product tours with Twitter Bootstrap Popovers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/easelinc/tourist"&gt;tourist&lt;/a&gt; - Simple, flexible tours for your app.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/heelhook/chardin.js"&gt;chardin.js&lt;/a&gt; - Simple overlay instructions for your apps.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tracelytics/pageguide"&gt;pageguide&lt;/a&gt; - An interactive guide for web page elements using jQuery and CSS3.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/linkedin/hopscotch"&gt;hopscotch&lt;/a&gt; - A framework to make it easy for developers to add product tours to their pages.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/zurb/joyride"&gt;joyride&lt;/a&gt; - jQuery feature tour plugin.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/zzarcon/focusable"&gt;focusable&lt;/a&gt; - Set a spotlight focus on DOM element adding a overlay layer to the rest of the page.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kamranahmedse/driver.js"&gt;driver.js&lt;/a&gt; - Powerful yet light-weight, vanilla JavaScript engine to drive the user's focus across the page&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#notifications"&gt;
  &lt;/a&gt;
  Notifications
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/dolce/iziToast"&gt;iziToast&lt;/a&gt; - Elegant, responsive, flexible and lightweight notification plugin with no dependencies.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/HubSpot/messenger"&gt;messenger&lt;/a&gt; - Growl-style alerts and messages for your app.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/needim/noty"&gt;noty&lt;/a&gt; - jQuery notification plugin.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sciactive/pnotify"&gt;pnotify&lt;/a&gt; - JavaScript notifications for Bootstrap, jQuery UI, and the Web Notifications Draft.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/CodeSeven/toastr"&gt;toastr&lt;/a&gt; - Simple JavaScript toast notifications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/wavded/humane-js"&gt;humane-js&lt;/a&gt; - A simple, modern, browser notification system.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hxgf/smoke.js"&gt;smoke.js&lt;/a&gt; - Framework-agnostic styled alert system for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jaredreich/notie"&gt;notie&lt;/a&gt; - Simple notifications and inputs with no dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#sliders"&gt;
  &lt;/a&gt;
  Sliders
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/nolimits4web/Swiper"&gt;Swiper&lt;/a&gt; - Mobile touch slider and framework with hardware accelerated transitions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kenwheeler/slick"&gt;slick&lt;/a&gt; - The last carousel you'll ever need.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.slidesjs.com"&gt;slidesJs&lt;/a&gt; - Is a responsive slideshow plug-in for JQuery(1.7.1+) with features like touch and CSS3 transitions&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/woothemes/FlexSlider"&gt;FlexSlider&lt;/a&gt; - An awesome, fully responsive jQuery slider plugin.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/darsain/sly"&gt;sly&lt;/a&gt; - JavaScript library for one-directional scrolling with item based navigation support.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jaysalvat/vegas"&gt;vegas&lt;/a&gt; - A jQuery plugin to add beautiful fullscreen backgrounds to your webpages. It even allows Slideshows.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/IanLunn/Sequence"&gt;Sequence&lt;/a&gt; - CSS animation framework for creating responsive sliders, presentations, banners, and other step-based applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hakimel/reveal.js"&gt;reveal.js&lt;/a&gt; - A framework for easily creating beautiful presentations using HTML.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/impress/impress.js"&gt;impress.js&lt;/a&gt; - It's a presentation framework based on the power of CSS3 transforms and transitions in modern browsers and inspired by the idea behind prezi.com.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bespokejs/bespoke"&gt;bespoke.js&lt;/a&gt; - DIY Presentation Micro-Framework&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tantaman/Strut"&gt;Strut&lt;/a&gt; - Strut - An Impress.js and Bespoke.js Presentation Editor&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dimsemenov/PhotoSwipe"&gt;PhotoSwipe&lt;/a&gt; - JavaScript image gallery for mobile and desktop, modular, framework independent.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/JoanClaret/jcSlider"&gt;jcSlider&lt;/a&gt; - A responsive slider jQuery plugin with CSS animations.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jcobb/basic-jquery-slider"&gt;basic-jquery-slider&lt;/a&gt; - Simple to use, simple to theme, simple to customise.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/creative-punch/jQuery.adaptive-slider/"&gt;jQuery.adaptive-slider&lt;/a&gt; - A jQuery plugin for a slider with adaptive colored figcaption and navigation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bchanx/slidr"&gt;slidr&lt;/a&gt; - add some slide effects.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/metafizzy/flickity"&gt;Flickity&lt;/a&gt; - Touch, responsive, flickable galleries.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jedrzejchalubek/glidejs"&gt;Glide.js&lt;/a&gt; - Responsive and touch-friendly jQuery slider. It's simple, lightweight and fast.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/davidcetinkaya/embla-carousel"&gt;Embla Carousel&lt;/a&gt; - An extensible low level carousel for the web, written in TypeScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#range-sliders"&gt;
  &lt;/a&gt;
  Range Sliders
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/IonDen/ion.rangeSlider"&gt;Ion.RangeSlider&lt;/a&gt; - Powerful and easily customizable range slider with many options and skin support.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ghusse/jQRangeSlider"&gt;jQRangeSlider&lt;/a&gt; - A JavaScript slider selector that supports dates.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/leongersen/noUiSlider"&gt;noUiSlider&lt;/a&gt; - A lightweight, highly customizable range slider without bloat.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/andreruffert/rangeslider.js"&gt;rangeslider.js&lt;/a&gt; - HTML5 input range slider element polyfill.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#form-widgets"&gt;
  &lt;/a&gt;
  Form Widgets
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#input"&gt;
  &lt;/a&gt;
  Input
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/twitter/typeahead.js"&gt;typeahead.js&lt;/a&gt; - A fast and fully-featured autocomplete library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/aehlke/tag-it"&gt;tag-it&lt;/a&gt; - A jQuery UI plugin to handle multi-tag fields as well as tag suggestions/autocomplete.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ichord/At.js"&gt;At.js&lt;/a&gt; - Add GitHub like mentions autocomplete to your application.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jamesallardice/Placeholders.js"&gt;Placeholders.js&lt;/a&gt; - A JavaScript polyfill for the HTML5 placeholder attribute.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/yairEO/fancyInput"&gt;fancyInput&lt;/a&gt; - Makes typing in input fields fun with CSS3 effects.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/xoxco/jQuery-Tags-Input"&gt;jQuery-Tags-Input&lt;/a&gt; - Magically convert a simple text input into a cool tag list with this jQuery plugin.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/BankFacil/vanilla-masker"&gt;vanilla-masker&lt;/a&gt; - A pure JavaScript mask input.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/IonDen/ion.checkRadio"&gt;Ion.CheckRadio&lt;/a&gt; - jQuery plugin for styling checkboxes and radio-buttons. With skin support.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/LeaVerou/awesomplete"&gt;awesomplete&lt;/a&gt; - Ultra lightweight, usable, beautiful autocomplete with zero dependencies. - &lt;a href="http://leaverou.github.io/awesomplete"&gt;http://leaverou.github.io/awesomplete&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#calendar"&gt;
  &lt;/a&gt;
  Calendar
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/amsul/pickadate.js"&gt;pickadate.js&lt;/a&gt; - The mobile-friendly, responsive, and lightweight jQuery date &amp;amp; time input picker.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/eternicode/bootstrap-datepicker"&gt;bootstrap-datepicker&lt;/a&gt; - A datepicker for @twitter bootstrap forked from Stefan Petre's (of eyecon.ro), improvements by @eternicode.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dbushell/Pikaday"&gt;Pikaday&lt;/a&gt; - A refreshing JavaScript Datepicker — lightweight, no dependencies, modular CSS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fullcalendar/fullcalendar"&gt;fullcalendar&lt;/a&gt; - Full-sized drag &amp;amp; drop event calendar (jQuery plugin).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bevacqua/rome"&gt;rome&lt;/a&gt; - A customizable date (and time) picker. Dependency free, opt-in UI.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dangrossman/daterangepicker"&gt;Date Range Picker&lt;/a&gt; - creates a dropdown menu from which a user can select a range of dates.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/duetds/date-picker"&gt;Duet Date Picker&lt;/a&gt; - open source version of Duet Design System’s accessible date picker, WCAG 2.1 accessibility complaint&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#select"&gt;
  &lt;/a&gt;
  Select
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/selectize/selectize.js"&gt;selectize.js&lt;/a&gt; - Selectize is the hybrid of a textbox and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; box. It's jQuery based and it has autocomplete and native-feeling keyboard navigation; useful for tagging, contact lists, etc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/select2/select2"&gt;select2&lt;/a&gt; - a jQuery based replacement for select boxes. It supports searching, remote data sets, and infinite scrolling of results.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/harvesthq/chosen"&gt;chosen&lt;/a&gt; - A library for making long, unwieldy select boxes more friendly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#file-uploader"&gt;
  &lt;/a&gt;
  File Uploader
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/blueimp/jQuery-File-Upload"&gt;jQuery-File-Upload&lt;/a&gt; - File Upload widget with multiple file selection, drag&amp;amp;drop support, progress bar, validation and preview images, audio and video for jQuery.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/enyo/dropzone"&gt;dropzone&lt;/a&gt; - Dropzone is an easy to use drag'n'drop library. It supports image previews and shows nice progress bars.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/flowjs/flow.js"&gt;flow.js&lt;/a&gt; - A JavaScript library providing multiple simultaneous, stable, fault-tolerant and resumable/restartable file uploads via the HTML5 File API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/FineUploader/fine-uploader"&gt;fine-uploader&lt;/a&gt; - Multiple file upload plugin with progress-bar, drag-and-drop, direct-to-S3 uploading.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mailru/FileAPI"&gt;FileAPI&lt;/a&gt; - A set of JavaScript tools for working with files. Multiupload, drag'n'drop and chunked file upload. Images: crop, resize and auto orientation by EXIF.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/moxiecode/plupload"&gt;plupload&lt;/a&gt; - A JavaScript API for dealing with file uploads it supports features like multiple file selection, file type filtering, request chunking, client side image scaling and it uses different runtimes to achieve this such as HTML 5, Silverlight and Flash.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pqina/filepond"&gt;filepond&lt;/a&gt; - A JavaScript library that can upload anything you throw at it, optimizes images for faster uploads, and offers a great, accessible, silky smooth user experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#other"&gt;
  &lt;/a&gt;
  Other
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/malsup/form"&gt;form&lt;/a&gt; - jQuery Form Plugin.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/guillaumepotier/Garlic.js"&gt;Garlic.js&lt;/a&gt; - Automatically persist your forms' text and select field values locally, until the form is submitted.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/RadLikeWhoa/Countable"&gt;Countable&lt;/a&gt; - A JavaScript function to add live paragraph-, word- and character-counting to an HTML element.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jessepollak/card"&gt;card&lt;/a&gt; - Make your credit card form better in one line of code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/LeaVerou/stretchy"&gt;stretchy&lt;/a&gt; - Form element autosizing, the way it should be.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/davidwells/analytics"&gt;analytics&lt;/a&gt; - A lightweight, extendable analytics library designed to work with any third-party analytics provider to track page views, custom events, &amp;amp; identify users.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tips"&gt;
  &lt;/a&gt;
  Tips
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/jaz303/tipsy"&gt;tipsy&lt;/a&gt; - Facebook-style tooltips plugin for jQuery.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/enyo/opentip"&gt;opentip&lt;/a&gt; - An open source JavaScript tooltip based on the prototype framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/qTip2/qTip2"&gt;qTip2&lt;/a&gt; - Pretty powerful tooltips.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/iamceege/tooltipster"&gt;tooltipster&lt;/a&gt; - A jQuery tooltip plugin.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/arashmanteghi/simptip"&gt;simptip&lt;/a&gt; - A simple CSS tooltip made with Sass.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/paulkinzett/toolbar"&gt;toolbar&lt;/a&gt; - A tooltip style toolbar jQuery plugin&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chinchang/hint.css"&gt;hint.css&lt;/a&gt; - A tooltip library in CSS for your lovely websites.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#modals-and-popups"&gt;
  &lt;/a&gt;
  Modals and Popups
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/dimsemenov/Magnific-Popup"&gt;Magnific-Popup&lt;/a&gt; - Light and responsive lightbox script with focus on performance.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gristmill/jquery-popbox"&gt;jquery-popbox&lt;/a&gt; - jQuery PopBox UI Element.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/voronianski/jquery.avgrund.js"&gt;jquery.avgrund.js&lt;/a&gt; - A jQuery plugin with new modal concept for popups.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/HubSpot/vex"&gt;vex&lt;/a&gt; - A modern dialog library which is highly configurable and easy to style.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jschr/bootstrap-modal"&gt;bootstrap-modal&lt;/a&gt; - Extends the default Bootstrap Modal class. Responsive, stackable, ajax and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/drublic/css-modal"&gt;css-modal&lt;/a&gt; - A modal built out of pure CSS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vast-engineering/jquery-popup-overlay"&gt;jquery-popup-overlay&lt;/a&gt; - jQuery plugin for responsive and accessible modal windows and tooltips.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/t4t5/sweetalert"&gt;SweetAlert&lt;/a&gt; - An awesome replacement for JavaScript's alert.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/feimosi/baguetteBox.js"&gt;baguetteBox.js&lt;/a&gt; - Simple and easy to use lightbox script written in pure JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jackmoore/colorbox"&gt;colorbox&lt;/a&gt; - A light-weight, customizable lightbox plugin for jQuery.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fancyapps/fancyBox"&gt;fancyBox&lt;/a&gt; - A tool that offers a nice and elegant way to add zooming functionality for images, html content and multi-media on your webpages.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/brutaldesign/swipebox"&gt;swipebox&lt;/a&gt; - A touchable jQuery lightbox&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/StephanWagner/jBox"&gt;jBox&lt;/a&gt; - jBox is a powerful and flexible jQuery plugin, taking care of all your popup windows, tooltips, notices and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sachinchoolur/lightGallery"&gt;lightGallery&lt;/a&gt; - A customizable, modular, responsive, lightbox gallery plugin for jQuery.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Alexandrshy/keukenhof"&gt;keukenhof&lt;/a&gt; - Lightweight, no dependencies, accessibility enabled TypeScript library for creating modal windows.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scroll"&gt;
  &lt;/a&gt;
  Scroll
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/stutrek/scrollMonitor"&gt;scrollMonitor&lt;/a&gt; - A simple and fast API to monitor elements as you scroll.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/WickyNilliams/headroom.js"&gt;headroom&lt;/a&gt; - Give your pages some headroom. Hide your header until you need it.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/peachananr/onepage-scroll"&gt;onepage-scroll&lt;/a&gt; - Create an Apple-like one page scroller website (iPhone 5S website) with One Page Scroll plugin.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cubiq/iscroll"&gt;iscroll&lt;/a&gt; - iScroll is a high performance, small footprint, dependency free, multi-platform JavaScript scroller.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Prinzhorn/skrollr"&gt;skrollr&lt;/a&gt; - Stand-alone parallax scrolling library for mobile (Android + iOS) and desktop. No jQuery.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/wagerfield/parallax"&gt;parallax&lt;/a&gt; - Parallax Engine that reacts to the orientation of a smart device.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/markdalgleish/stellar.js"&gt;stellar.js&lt;/a&gt; - Parallax scrolling made easy.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cameronmcefee/plax"&gt;plax&lt;/a&gt; - jQuery powered parallaxing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/stephband/jparallax"&gt;jparallax&lt;/a&gt; - jQuery plugin for creating interactive parallax effect.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alvarotrigo/fullPage.js"&gt;fullPage&lt;/a&gt; - A simple and easy to use plugin to create fullscreen scrolling websites (also known as single page websites).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/s-yadav/ScrollMenu"&gt;ScrollMenu&lt;/a&gt; - A new interface to replace old boring scrollbar.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NeXTs/Clusterize.js"&gt;Clusterize.js&lt;/a&gt; - Tiny vanilla JS plugin to display large data sets easily.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/geosigno/simpleParallax"&gt;simpleParallax&lt;/a&gt; - Simple and tiny JavaScript library to add parallax animations on any images&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dixonandmoe/rellax"&gt;rellax&lt;/a&gt; - Buttery smooth, super lightweight, vanilla javascript parallax library.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#menu"&gt;
  &lt;/a&gt;
  Menu
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/kamens/jQuery-menu-aim"&gt;jQuery-menu-aim&lt;/a&gt; - jQuery plugin to fire events when user's cursor aims at particular dropdown menu items. For making responsive mega dropdowns like Amazon's.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/swisnl/jQuery-contextMenu"&gt;jQuery contextMenu&lt;/a&gt; - contextMenu manager.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mango/slideout"&gt;Slideout&lt;/a&gt; - A responsive touch slideout navigation menu for mobile web apps.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/JoanClaret/slide-and-swipe-menu"&gt;Slide and swipe&lt;/a&gt; - A sliding swipe menu that works with touchSwipe library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/FrDH/jQuery.mmenu"&gt;mmenu&lt;/a&gt; - The best jQuery plugin for app look-alike on- and off-canvas menus with sliding submenus for your website and webapp.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tablegrid"&gt;
  &lt;/a&gt;
  Table/Grid
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/hikalkan/jtable"&gt;jTable&lt;/a&gt; - A jQuery plugin to create AJAX based CRUD tables.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.datatables.net/"&gt;DataTables&lt;/a&gt; - (jQuery plug-in) It is a highly flexible tool, based upon the foundations of progressive enhancement, and will add advanced interaction controls to any HTML table.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://olifolkerd.github.io/tabulator/"&gt;Tabulator&lt;/a&gt; - (jQuery plug-in) An extremely flexible library that create tables with a range of interactive features from any JSON data source or existing HTML table.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://bootstrap-table.wenzhixin.net.cn/"&gt;Bootstrap Table&lt;/a&gt; - An Extension to the popular Bootstrap framework for creating tables that fit the style of your site with no need for additional markup.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mkoryak/floatThead"&gt;floatThead&lt;/a&gt; - (jQuery plug-in) lock any table's header while scrolling within the body. Works on any table and requires no custom html or css.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://masonry.desandro.com/"&gt;Masonry&lt;/a&gt; - A cascading grid layout library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://packery.metafizzy.co/"&gt;Packery&lt;/a&gt; - A grid layout library that uses a bin-packing algorithm. Useable for draggable layouts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://isotope.metafizzy.co/"&gt;Isotope&lt;/a&gt; - A filterable, sortable, grid layout library. Can implement Masonry, Packery, and other layouts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kristoferjoseph/flexboxgrid/"&gt;flexboxgrid&lt;/a&gt; - Grid based on CSS3 flexbox.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#frameworks"&gt;
  &lt;/a&gt;
  Frameworks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://semantic-ui.com/"&gt;Semantic UI&lt;/a&gt; - UI Kit with lots of themes and elements.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://w2ui.com/"&gt;w2ui&lt;/a&gt; - A set of jQuery plugins for front-end development of data-driven web applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mrmrs/fluidity"&gt;fluidity&lt;/a&gt; - The worlds smallest fully-responsive css framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sapo/Ink"&gt;Ink&lt;/a&gt; - An HTML5/CSS3 framework used at SAPO for fast and efficient website design and prototyping.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dataformsjs/dataformsjs"&gt;DataFormsJS&lt;/a&gt; - A minimal JavaScript Framework and standalone components for rapid development of sites and SPA's.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Guseyn/EHTML"&gt;EHTML&lt;/a&gt; - HTML Framework that allows you not to write JavaScript code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#boilerplates"&gt;
  &lt;/a&gt;
  Boilerplates
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/h5bp/html5-boilerplate"&gt;html5-boilerplate&lt;/a&gt; - A professional front-end template for building fast, robust, and adaptable web apps or sites.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/h5bp/mobile-boilerplate"&gt;mobile-boilerplate&lt;/a&gt; - A front-end template that helps you build fast, modern mobile web apps.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chrishumboldt/webplate"&gt;webplate&lt;/a&gt; - An awesome front-end framework that lets you stay focused on building your site or app while remaining really easy to use.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/TedGoas/Cerberus"&gt;Cerberus&lt;/a&gt; - A few simple, but solid patterns for responsive HTML emails. Even in Outlook.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/CodyHouse/full-page-intro-and-navigation"&gt;full-page-intro-and-navigation&lt;/a&gt; - An intro page with a full width background image, a bold animated menu and an iOS-like blurred effect behind the navigation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/crozynski/Fluid-Squares"&gt;Fluid-Squares&lt;/a&gt; - A fluid grid of square units.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bradfrost/Mobile-First-RWD"&gt;Mobile-First-RWD&lt;/a&gt; - An example of a mobile-first responsive web design.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bradfrost/this-is-responsive"&gt;this-is-responsive&lt;/a&gt; - This Is Responsive.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gist.github.com/addyosmani/9f10c555e32a8d06ddb0"&gt;npm run-scripts&lt;/a&gt; Task automation with NPM run-scripts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#gesture"&gt;
  &lt;/a&gt;
  Gesture
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/hammerjs/hammer.js"&gt;hammer.js&lt;/a&gt; - A JavaScript library for multi-touch gestures.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hammerjs/touchemulator"&gt;touchemulator&lt;/a&gt; - Emulate touch input on your desktop.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bevacqua/dragula/"&gt;Dragula&lt;/a&gt; - Drag and drop so simple it hurts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#maps"&gt;
  &lt;/a&gt;
  Maps
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Leaflet/Leaflet"&gt;Leaflet&lt;/a&gt; - JavaScript library for mobile-friendly interactive maps.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AnalyticalGraphicsInc/cesium"&gt;Cesium&lt;/a&gt; - Open Source WebGL virtual globe and map engine.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/HPNeo/gmaps"&gt;gmaps&lt;/a&gt; - The easiest way to use Google Maps.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/simplegeo/polymaps"&gt;polymaps&lt;/a&gt; - A free JavaScript library for making dynamic, interactive maps in modern web browsers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kartograph/kartograph.js"&gt;kartograph.js&lt;/a&gt; - Open source JavaScript renderer for Kartograph SVG maps.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mapbox/mapbox.js"&gt;mapbox.js&lt;/a&gt; - Mapbox JavaScript API, a Leaflet Plugin.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/manifestinteractive/jqvmap"&gt;jqvmap&lt;/a&gt; - jQuery Vector Map Library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://openlayers.org/"&gt;OpenLayers3&lt;/a&gt; - A high-performance, feature-packed library for all your mapping needs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#videoaudio"&gt;
  &lt;/a&gt;
  Video/Audio
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/mike-zarandona/prettyembed.js"&gt;prettyembed.js&lt;/a&gt; - Prettier embeds for your YouTubes - with nice options like high-res preview images, advanced customization of embed options, and optional FitVids support.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/etianen/html5media"&gt;html5media&lt;/a&gt; - Enables  and  tags in all major browsers. &lt;a href="https://html5media.info/"&gt;https://html5media.info/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/adrienjoly/playemjs"&gt;Play-em JS&lt;/a&gt; - Play'em is a JavaScript component that manages a music/video track queue and plays a sequence of songs by embedding several players in a HTML DIV including Youtube, Soundcloud and Vimeo.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Acconut/polyplayer"&gt;polyplayer&lt;/a&gt; - Rule YouTube, Soundcloud and Vimeo player with one API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/flowplayer/flowplayer"&gt;flowplayer&lt;/a&gt; - The HTML5 video player for the web
&lt;a href="https://flowplayer.org/"&gt;https://flowplayer.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/johndyer/mediaelement"&gt;mediaelement&lt;/a&gt; - HTML5  or  player with Flash and Silverlight shims that mimics the HTML5 MediaElement API, enabling a consistent UI in all browsers. &lt;a href="http://mediaelementjs.com/"&gt;http://mediaelementjs.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/CreateJS/SoundJS"&gt;SoundJS&lt;/a&gt; - A library to make working with audio on the web easier. It provides a consistent API for playing audio in different browsers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/videojs/video.js"&gt;video.js&lt;/a&gt; - Video.js - open source HTML5 &amp;amp; Flash video player.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/davatron5000/FitVids.js"&gt;FitVids.js&lt;/a&gt; - A lightweight, easy-to-use jQuery plugin for fluid width video embeds.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/IonDen/ion.sound"&gt;Ion.Sound&lt;/a&gt; - Simple sounds on any web page.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/WolframHempel/photobooth-js"&gt;photobooth-js&lt;/a&gt; - A widget that allows users to take their avatar pictures on your site.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/clappr/clappr"&gt;clappr&lt;/a&gt; - An extensible media player for the web &lt;a href="http://clappr.io"&gt;http://clappr.io&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/MikeKovarik/exifr"&gt;exifr&lt;/a&gt; - The fastest and most versatile EXIF reading library. &lt;a href="https://mutiny.cz/exifr/"&gt;https://mutiny.cz/exifr/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EvandroLG/ts-audio"&gt;ts-audio&lt;/a&gt; - an agnostic and easy-to-use library to work with the &lt;code&gt;AudioContext&lt;/code&gt; API&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://521dimensions.com/open-source/amplitudejs"&gt;AmplitudeJS&lt;/a&gt; - Open Source HTML5 Web Audio Library. Design your web audio player, the way you want. No dependencies required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#typography"&gt;
  &lt;/a&gt;
  Typography
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/simplefocus/FlowType.JS"&gt;FlowType.JS&lt;/a&gt; - Web typography at its finest: font-size and line-height based on element width.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/zachleat/BigText"&gt;BigText&lt;/a&gt; - jQuery plugin, calculates the font-size and word-spacing needed to match a line of text to a specific width.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/peterhry/circletype"&gt;circletype&lt;/a&gt; - A jQuery plugin that lets you curve type on the web.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/freqDec/slabText/"&gt;slabText&lt;/a&gt; - A jQuery plugin for producing big, bold &amp;amp; responsive headlines.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/peachananr/simple-text-rotator"&gt;simple-text-rotator&lt;/a&gt; - Add a super simple rotating text to your website with little to no markup.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chuckyglitch/novacancy.js"&gt;novacancy.js&lt;/a&gt; - Text Neon Golden effect jQuery plug-in.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ghepting/jquery-responsive-text"&gt;jquery-responsive-text&lt;/a&gt; - Make your text sizing responsive!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/davatron5000/FitText.js"&gt;FitText.js&lt;/a&gt; - A jQuery plugin for inflating web type.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/davatron5000/Lettering.js"&gt;Lettering.js&lt;/a&gt; - A lightweight, easy to use JavaScript &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; injector for radical Web Typography.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#animations"&gt;
  &lt;/a&gt;
  Animations
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/julianshapiro/velocity"&gt;velocity&lt;/a&gt; - Accelerated JavaScript animation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rstacruz/jquery.transit"&gt;jquery.transit&lt;/a&gt; - Super-smooth CSS3 transformations and transitions for jQuery.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tictail/bounce.js"&gt;bounce.js&lt;/a&gt; - Create tasty CSS3 powered animations in no time.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/greensock/GreenSock-JS"&gt;GreenSock-JS&lt;/a&gt; - High-performance HTML5 animations that work in all major browsers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EvandroLG/transitionEnd"&gt;TransitionEnd&lt;/a&gt; - TransitionEnd is an agnostic and cross-browser library to work with transitioned event.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/michaelvillar/dynamics.js"&gt;Dynamic.js&lt;/a&gt; - JavaScript library to create physics-based CSS animations.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pstadler/the-cube"&gt;the-cube&lt;/a&gt; - The Cube is an experiment with CSS3 transitions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/h5bp/Effeckt.css"&gt;Effeckt.css&lt;/a&gt; - A Performant Transitions and Animations Library&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/daneden/animate.css"&gt;animate.css&lt;/a&gt; - A cross-browser library of CSS animations. As easy to use as an easy thing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jschr/textillate"&gt;textillate&lt;/a&gt; - A simple plugin for CSS3 text animations.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/visionmedia/move.js"&gt;move.js&lt;/a&gt; - CSS3 backed JavaScript animation framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/LeaVerou/animatable"&gt;animatable&lt;/a&gt; - One property, two values, endless possibilities.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/peachananr/shuffle-images"&gt;shuffle-images&lt;/a&gt; - The Simplest Way to shuffle through images in a Creative Way&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/miguel-perez/smoothState.js"&gt;smoothState.js&lt;/a&gt; - Unobtrusive page transitions with jQuery.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://animejs.com"&gt;Anime.js&lt;/a&gt; - A JavaScript animation engine.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://mojs.io"&gt;Mo.js&lt;/a&gt; - Motion graphics toolbelt for the web.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/VincentGarreau/particles.js"&gt;particles.js&lt;/a&gt; - A lightweight JavaScript library for creating particles.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/matteobruni/tsparticles"&gt;tsParticles&lt;/a&gt; - A new and improved version of particles.js with bug fixes and many new features&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lindelof/particles-bg"&gt;particles-bg&lt;/a&gt; - A lightweight React particles animation background component.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#image-processing"&gt;
  &lt;/a&gt;
  Image Processing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/davidsonfellipe/lena.js"&gt;lena.js&lt;/a&gt; - A Library for image processing with filters and util functions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeca/pica"&gt;pica&lt;/a&gt; - High quality image resize (with fast Lanczos filter, implemented in pure JS).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fengyuanchen/cropper"&gt;cropper&lt;/a&gt; - A simple jQuery image cropping plugin.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#es6"&gt;
  &lt;/a&gt;
  ES6
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/lukehoban/es6features"&gt;es6features&lt;/a&gt; - Overview of ECMAScript 6 features.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rse/es6-features"&gt;es6-features&lt;/a&gt; - ECMAScript 6: Feature Overview &amp;amp; Comparison.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/DrkSephy/es6-cheatsheet"&gt;es6-cheatsheet&lt;/a&gt; - ES2015 [ES6] cheatsheet containing tips, tricks, best practices and code snippets.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://kangax.github.io/compat-table/es6/"&gt;ECMAScript 6 compatibility table&lt;/a&gt; - Compatibility tables for all ECMAScript 6 features on a variety of environments.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/babel/babel"&gt;Babel (Formerly 6to5)&lt;/a&gt; - Turn ES6+ code into vanilla ES5 with no runtime.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/google/traceur-compiler"&gt;Traceur compiler&lt;/a&gt; - ES6 features &amp;gt; ES5. Includes classes, generators, promises, destructuring patterns, default parameters &amp;amp; more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#generators"&gt;
  &lt;/a&gt;
  Generators
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/gatsbyjs/gatsby"&gt;Gatsby.js&lt;/a&gt; - React-based static site generator.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gridsome/gridsome"&gt;Gridsome&lt;/a&gt; - Vue-powered static site generator.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/docusaurus"&gt;Docusaurus&lt;/a&gt; - React-based static site generator by Facebook, ideal for content-centric websites.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#sdk"&gt;
  &lt;/a&gt;
  SDK
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/huei90/javascript-sdk-design"&gt;javascript-sdk-design&lt;/a&gt; - JavaScript SDK design guide extracted from work and personal experience&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/loverajoel/spotify-sdk"&gt;Spotify SDK&lt;/a&gt; - Entity oriented SDK to work with the Spotify Web API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/square/connect-nodejs-sdk/"&gt;Square Node.js SDK&lt;/a&gt; - JavaScript client library for payments and other Square APIs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#misc"&gt;
  &lt;/a&gt;
  Misc
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/toddmotto/echo"&gt;echo&lt;/a&gt; - Lazy-loading images with data-* attributes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/scottjehl/picturefill"&gt;picturefill&lt;/a&gt; - A responsive image polyfill for &amp;lt;picture&amp;gt;, srcset, sizes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bestiejs/platform.js"&gt;platform.js&lt;/a&gt; - A platform detection library that works on nearly all JavaScript platforms.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bestiejs/json3"&gt;json3&lt;/a&gt; - A modern JSON implementation compatible with nearly all JavaScript platforms.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://gabinaureche.com/logicalornot/"&gt;Logical Or Not&lt;/a&gt; - A game about JavaScript specificities.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/infusion/BitSet.js"&gt;BitSet.js&lt;/a&gt; - A JavaScript Bit-Vector implementation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/joshbuddy/spoiler-alert"&gt;spoiler-alert&lt;/a&gt; - SPOILER ALERT! A happy little jquery plugin to hide spoilers on your site.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/illyism/jquery.vibrate.js"&gt;jquery.vibrate.js&lt;/a&gt; - Vibration API Wrappers&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/javve/list.js"&gt;list.js&lt;/a&gt; - Adds search, sort, filters and flexibility to tables, lists and various HTML elements. Built to be invisible and work on existing HTML.
&lt;a href="http://www.listjs.com"&gt;http://www.listjs.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/patrickkunka/mixitup"&gt;mixitup&lt;/a&gt; - MixItUp - A Filter &amp;amp; Sort Plugin.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hootsuite/grid"&gt;grid&lt;/a&gt; - Drag and drop library for two-dimensional, resizable and responsive lists.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/liabru/jquery-match-height"&gt;jquery-match-height&lt;/a&gt; - a responsive equal heights plugin for jQuery.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/surveyjs/surveyjs"&gt;survey.js&lt;/a&gt; - JavaScript Survey Engine. It uses JSON for survey metadata and results. &lt;a href="http://surveyjs.org/"&gt;http://surveyjs.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sdras/array-explorer"&gt;Array Explorer&lt;/a&gt; and &lt;a href="https://objectexplorer.netlify.app/"&gt;Object Explorer&lt;/a&gt; - Resources to help figure out what native JavaScript method would be best to use at any given time&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://clipboardjs.com/"&gt;Clipboard.js&lt;/a&gt; - "Copy to clipboard" without Flash or use of Frameworks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/ky"&gt;ky&lt;/a&gt; - Tiny and elegant HTTP client based on the browser Fetch API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/5anthosh/fcal"&gt;Fcal&lt;/a&gt; -  Math expression evaluator&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/joeattardi/emoji-button"&gt;emoji-button&lt;/a&gt; - Vanilla JavaScript emoji picker component&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/iooxa/article"&gt;iooxa&lt;/a&gt; - Components for interactive scientific writing, reactive documents and explorable explanations.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/idyll-lang/idyll"&gt;Idyll&lt;/a&gt; - Create explorable explanations and interactive storytelling essays. Can be &lt;a href="https://github.com/idyll-lang/idyll-embed"&gt;embedded in HTML&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;javascript-algorithms&lt;/a&gt; - Algorithms and data structures implemented in JavaScript with explanations and links to further readings.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fingerprintjs/fingerprintjs"&gt;FingerprintJS&lt;/a&gt; - Makes a visitor identifier from a browser fingerprint that stays the same in incognito mode and when browser data is purged.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#podcasts"&gt;
  &lt;/a&gt;
  Podcasts
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://javascriptair.com/"&gt;JavaScript Air&lt;/a&gt; - The live video broadcast podcast all about JavaScript and the Web platform.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.weboftomorrowpodcast.com/"&gt;Web of Tomorrow&lt;/a&gt; - Podcast about JavaScript for beginners.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://devchat.tv/js-jabber"&gt;JavaScript Jabber&lt;/a&gt; - A weekly podcast about JavaScript, including Node.js, Front-End Technologies, Careers, Teams and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#worth-reading"&gt;
  &lt;/a&gt;
  Worth Reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;You Don't Know JS&lt;/a&gt; - Possibly the best book written on modern JavaScript, completely readable online for free, or can be bought to support the author.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/braziljs/js-the-right-way/"&gt;braziljs/js-the-right-way&lt;/a&gt; - An easy-to-read, quick reference for JS best practices, accepted coding standards, and links around the Web.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/revolunet/JSbooks"&gt;JSbooks&lt;/a&gt; - Directory of free JavaScript ebooks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://superherojs.com"&gt;Superhero.js&lt;/a&gt; - A collection of resources about creating, testing and maintaining a large JavaScript code base.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/HugoGiraudel/SJSJ"&gt;SJSJ&lt;/a&gt; - Simplified JavaScript Jargon is a community-driven attempt at explaining the loads of buzzwords making the current JavaScript ecosystem in a few simple words.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sarbbottam/write-an-open-source-js-lib"&gt;How to Write an Open Source JavaScript Library&lt;/a&gt; - A comprehensive guide through a set of steps to publish a JavaScript open source library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hackr.io/tutorials/learn-javascript"&gt;JavaScript Tutorials&lt;/a&gt; - Learn Javascript online from a diverse range of user ranked online tutorials.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/getify/Functional-Light-JS"&gt;Functional-Light JavaScript&lt;/a&gt; - Pragmatic, balanced FP in JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;Clean Code JavaScript&lt;/a&gt; - Clean Code concepts adapted for JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#others"&gt;
  &lt;/a&gt;
  Others
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sotayamashita/awesome-css"&gt;sotayamashita/awesome-css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emijrp/awesome-awesome"&gt;emijrp/awesome-awesome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bayandin/awesome-awesomeness"&gt;bayandin/awesome-awesomeness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sindresorhus/awesome"&gt;sindresorhus/awesome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jnv/lists"&gt;jnv/list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gianarb/awesome-angularjs"&gt;gianarb/angularjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/peterkokot/awesome-dojo"&gt;peterkokot/awesome-dojo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/addyosmani/es6-tools"&gt;addyosmani/es6-tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ericdouglas/ES6-Learning"&gt;ericdouglas/ES6-Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/obetomuniz/awesome-webcomponents"&gt;obetomuniz/awesome-webcomponents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/willianjusten/awesome-svg"&gt;willianjusten/awesome-svg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/davidsonfellipe/awesome-wpo"&gt;davidsonfellipe/awesome-wpo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sadcitizen/awesome-backbone"&gt;instanceofpro/awesome-backbone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/enaqx/awesome-react"&gt;enaqx/awesome-react&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bolshchikov/js-must-watch"&gt;bolshchikov/js-must-watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/peterkokot/awesome-jquery"&gt;peterkokot/awesome-jquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/davidyezsetz/you-might-not-need-jquery-plugins"&gt;davidyezsetz/you-might-not-need-jquery-plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions"&gt;MaximAbramchuck/awesome-interviews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/denolib/awesome-deno"&gt;denolib/awesome-deno&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This Content is distributed under the &lt;a href="http://creativecommons.org/publicdomain/zero/1.0/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B4_3ZEhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.creativecommons.org/p/zero/1.0/88x31.png" alt="CC0"&gt;&lt;/a&gt; license.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>What to expect in Python 3.10 🤯</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Mon, 06 Sep 2021 06:36:58 +0000</pubDate>
      <link>https://dev.to/unitybuddy/what-to-expect-in-python-3-10-20c2</link>
      <guid>https://dev.to/unitybuddy/what-to-expect-in-python-3-10-20c2</guid>
      <description>&lt;p&gt;Hello, buddies! What sets Python apart is its intuitive features like libraries, high productivity, ease of learning, etc. According to a recent study, almost 27% of the advertised jobs require Python as a core skill — up from 18.5% at the beginning of the year😮😮&lt;/p&gt;

&lt;p&gt;Last October, Python released version 3.9. The updates included improvements in Python internals, performance boosts, dictionary union operators, handy new string functions, new type operations, consistent and stable internal APIs, and more.&lt;/p&gt;

&lt;p&gt;So on this 4th of October, Python is going to release 3.10, which has awesome features 👏👏&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#better-error-messages"&gt;
  &lt;/a&gt;
  Better Error Messages
&lt;/h2&gt;

&lt;p&gt;In general, Python error messages can be misleading and confusing. That is why this feature is here to help us. This feels like an important topic that is going to make our day-to-day job a lot easier and I am really looking forward to it.&lt;/p&gt;

&lt;p&gt;So first let's take a look at how Python 3.9 gives error messages.&lt;/p&gt;

&lt;p&gt;There are several types of errors where the current Python incarnation doesn’t provide enough information. For example, observe SytaxError for the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;newArticle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"C# 10 - Top 5 new features"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;".NET"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ReleaseDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;File "&lt;span class="nt"&gt;&amp;lt;ipython-input-5-e9aa07ca09db&amp;gt;&lt;/span&gt;", line 2
processed_data = process_data(data)
^
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the square bracket is missing at the end of the first line. However, SyntaxError reports a problem in the second line. A similar situation can happen if we forget to close string quotes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"BirdIsThe
processed_data = process_data(data)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;ile "&lt;span class="nt"&gt;&amp;lt;ipython-input-6-44253c1ee7d8&amp;gt;&lt;/span&gt;", line 1
word = "BirdIsThe
            ^
SyntaxError: EOL while scanning string literal
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, it can be even more misleading because EOL or EOF is reported 😑😑&lt;/p&gt;

&lt;p&gt;Now let's see how Python 3.10 is going to treat this.&lt;/p&gt;

&lt;p&gt;There are several areas where we will get better messages from Python 3.10. Let’s start with the problems displayed in the chapter above. If you forget to close the bracket like in the example above you will get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;data = [2, 9, 11, 33, 56, 93, 111,
   ^
SyntaxError: '[' was never closed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or if you forget to close the string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;word = "BirdIsThe
       ^
SyntaxError: unterminated string literal (detected at line 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or if you messed up your generator expression:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;some_function(x, y for y in range(11))
         ^^^^^^^^^^^^^^^^^^^^
SyntaxError: Generator expression must be parenthesized
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All these messages are more specific and concrete. All the Pythonistas going to love it 😍😍&lt;/p&gt;

&lt;p&gt;However, that is not all. Python 3.10 improved other messages as well. If you forget to put two dots after a statement, now you will know that more explicitly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (2 &amp;gt; 9)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;if (2 &amp;gt; 9)
          ^
SyntaxError: expected ':'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or if you used &lt;code&gt;=&lt;/code&gt; insted of &lt;code&gt;==&lt;/code&gt;&lt;br&gt;
 in the mentioned statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;if (2 = 9)
        ^
SyntaxError: cannot assign to literal here. Maybe you meant '==' instead of '='?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wow, error messages are clear as in Unity 🥰🥰&lt;/p&gt;

&lt;p&gt;Also, if you forget comma in the collection, Python 3.10 has got your back:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;93&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;File "&lt;span class="nt"&gt;&amp;lt;stdin&amp;gt;&lt;/span&gt;", line 1
list = [2, 9, 11, 33 56, 93]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Talking about collections, if you forgot to assign value to a dictionary key, Python 3.10 will let you know:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;'a'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'b'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'c'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'d'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;File "&lt;span class="nt"&gt;&amp;lt;stdin&amp;gt;&lt;/span&gt;", line 1
dict = { 'a' : 2, 'b' : 9, 'c' : , 'd' : 33 }
                                   ^
SyntaxError: expression expected after dictionary key and ':'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are other improved messages as well, however, I found these the most useful, especially if you are a beginner. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structural-pattern-matching"&gt;
  &lt;/a&gt;
  Structural Pattern Matching
&lt;/h2&gt;

&lt;p&gt;This feature is definitely going to have the biggest impact. If you are familiar with a &lt;code&gt;switch-case&lt;/code&gt; statement from any other language, this one is that, but on steroids. Wait, there was not switch-case mechanism in Python until now? Why is it called pattern matching? What is the difference? Let’s see.&lt;/p&gt;

&lt;p&gt;Yes, Python was not supporting switch-case statements, or simillar concepts until now. Weird, I know. There were several attempts to include this concept in the language, however, they were always rejected. Nobody has been able to suggest an implementation that can be integrated properly with Python’s syntax and the overall spirit of the language. This means that if you wanted to check multiple values, you need to do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;http_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Bad request"&lt;/span&gt;
  &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Not found"&lt;/span&gt;
  &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="mi"&gt;418&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"I am not joking"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;http_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Bad request"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Not found"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;418&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"I am not joking"&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To be honest, I was OK with it. In general, I am not a big fan of the switch-case statement in other languages as well. It usually means that architecture could be done better or that you could use concepts like polymorphism and dictionaries. &lt;/p&gt;

&lt;p&gt;That being said, there are certain situations in which a switch-case statement is useful. So Python 3.10 gonna treat it 👏👏&lt;/p&gt;

&lt;p&gt;The easiest way to use this Python feature is to compare a variable with several values. There are two new keywords match and case. The example from above then can be written down like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;http_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Bad request"&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Not found"&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;418&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"I am not joking"&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Well, I am joking"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, you know, a regular switch-case statement. The last one &lt;code&gt;case _&lt;/code&gt; is the default value – wildcard, so if the status has a value that is not &lt;code&gt;400&lt;/code&gt;, &lt;code&gt;404&lt;/code&gt;, or &lt;code&gt;418&lt;/code&gt;, it will return “Well, I am joking” as a result. This is optional, so if you don’t include it and some out-of-the-scope value appears, the behavior is a no-op. This wildcard is very powerful and can help us with more complex pattern matching, as we will see in a bit.&lt;/p&gt;

&lt;p&gt;You can also chain values if you want to do the same thing for a certain case. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ide_full_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;short_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;short_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"PyC"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"PyCharm"&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"VSC"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Visual Studio Code"&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"VS2017"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;"VS2019"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;"VS2022"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Visual Studio"&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Not Supported"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool, right! This is going to be the biggest change in 3.10. And I bet most of you don't know Python was not supporting switch-case statements 😝😝&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-type-union-operator"&gt;
  &lt;/a&gt;
  New Type Union Operator
&lt;/h2&gt;

&lt;p&gt;This is a new feature that will simplify the code. Every Python release comes with a set of type hints features. From our perspective, this one is the most important of such features.&lt;/p&gt;

&lt;p&gt;With the current Python version, if you want to use type hints for function that has a parameter that can receive values of different types, you had to use Union type. Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_funcion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flexible_parameter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;flexible_parameter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Therefore, Python 3.10 introduces new union operand – &lt;code&gt;|&lt;/code&gt;. What this operand says is that certain parameters can be either &lt;code&gt;Type 1&lt;/code&gt; either &lt;code&gt;Type 2&lt;/code&gt;. Now, the previous function can be written like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_funcion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flexible_parameter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;flexible_parameter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#precise-line-numbers-for-debugging"&gt;
  &lt;/a&gt;
  Precise Line Numbers for Debugging
&lt;/h2&gt;

&lt;p&gt;Have you noticed that sometimes the debugger doesn’t show the real number of the line where the code has a mistake? It does work well most of the time, but it was not always the most reliable tool 🙄🙄&lt;/p&gt;

&lt;p&gt;If you use &lt;code&gt;sys.settrace&lt;/code&gt; and associated tools you may notice that tracing doesn’t work 100% of the time. Sometimes the line is not correct. Reliability here is not as you would expect from such a mature programming language. The problem in its essence is that the &lt;code&gt;f_lineno&lt;/code&gt; attribute of frame objects that are part of event objects should always contain the expected line number&lt;/p&gt;

&lt;p&gt;So Python 3.10, brings more precise and reliable line numbers for debugging, profiling, and coverage tools. Python 3.10 guarantees that tracing events, with the associated and correct line numbers, are generated for all lines of code executed and only for lines of code that are executed. &lt;/p&gt;

&lt;p&gt;In order to do this, Python 3.10 doesn’t rely on the current form of  &lt;code&gt;co_lnotab&lt;/code&gt; attribute of the events. This version of Python uses new method &lt;code&gt;co_lines()&lt;/code&gt;, which returns an iterator over bytecode offsets and source code lines. The change is done in a way that the &lt;code&gt;f_lineno&lt;/code&gt; attribute of frame objects will always contain the expected line number.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-some-other-language-changes"&gt;
  &lt;/a&gt;
  And some other language changes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;int&lt;/code&gt; type has a new method &lt;code&gt;int.bit_count()&lt;/code&gt;, returning the number of ones in the binary expansion of a given integer, also known as the population count. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The views returned by &lt;code&gt;dict.keys()&lt;/code&gt;, &lt;code&gt;dict.values()&lt;/code&gt; and &lt;code&gt;dict.items()&lt;/code&gt; now all have a mapping attribute that gives a &lt;code&gt;types.MappingProxyType&lt;/code&gt; object wrapping the original dictionary. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;zip()&lt;/code&gt; function now has an optional strict flag, used to require that all the iterables have an equal length.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Assignment expressions can now be used unparenthesized within set literals and set comprehensions, as well as in sequence indexes (but not slices).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many other but I found these are the useful ones.&lt;/p&gt;

&lt;p&gt;So, buddies, these are the major and useful features that make Python more beautiful! For me, error messages are the best things. Happy Coding!&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>upcoming</category>
    </item>
    <item>
      <title>Top 10 Visual Studio Code Extensions That Every Developer Should Use It</title>
      <author>Suhail Kakar</author>
      <pubDate>Mon, 06 Sep 2021 06:02:04 +0000</pubDate>
      <link>https://dev.to/suhailkakar/top-10-visual-studio-code-extensions-that-every-developer-should-use-it-1nf0</link>
      <guid>https://dev.to/suhailkakar/top-10-visual-studio-code-extensions-that-every-developer-should-use-it-1nf0</guid>
      <description>&lt;p&gt;Visual Studio Code is by far one of the most popular code editors for web, mobile, and hardware developers. More than 2,600,000 people use VS Code every month, up by over 160% in the last year.&lt;/p&gt;

&lt;p&gt;In this guide, we’ll explore the top 20 VS Code extensions that every developer should know in 2021.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bracket-pair-colorizer"&gt;
  &lt;/a&gt;
  Bracket Pair Colorizer
&lt;/h3&gt;

&lt;p&gt;If you are working on big projects where functions and components become very complicated, bracket pair colorizer is the one who can help you&lt;/p&gt;

&lt;p&gt;This extension allows matching brackets to be identified with colors. The user can define which characters to match, and which colors to use. It is one of the must-have extensions for all developers. &lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J-5OX51x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630828799003/xu-uoSinc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J-5OX51x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630828799003/xu-uoSinc.gif" alt="Bracket Pair Colorizer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#auto-rename-tag"&gt;
  &lt;/a&gt;
  Auto Rename Tag
&lt;/h3&gt;

&lt;p&gt;For web developers, Auto Rename Tag is a fantastic VS Code extension. Auto Rename Tag, as the name implies, renames the second tag as the first is updated, and vice versa. &lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EM6_QPBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630829170171/Y0qExTYqc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EM6_QPBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630829170171/Y0qExTYqc.gif" alt="Auto Rename Tag&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#better-comments"&gt;
  &lt;/a&gt;
  Better Comments
&lt;/h3&gt;

&lt;p&gt;Having descriptive comments can save a lot of time for you and your team. The Better Comments extension will help you create more human-friendly comments in your code. With this extension, you will be able to categorize your annotations into :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alerts&lt;/li&gt;
&lt;li&gt;Queries&lt;/li&gt;
&lt;li&gt;TODOs Highlights &lt;/li&gt;
&lt;li&gt;Commented out code can also be styled to make it clear the code shouldn't be there&lt;/li&gt;
&lt;li&gt;Any other comment styles you'd like can be specified in the settings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link: &lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ufB9mZxp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630829587544/Mpjhn-xFS.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ufB9mZxp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630829587544/Mpjhn-xFS.gif" alt="Better Comments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stack-overflow-view"&gt;
  &lt;/a&gt;
  Stack Overflow View
&lt;/h3&gt;

&lt;p&gt;After installing this extension you don't need to go Stack Overflow website again, you can get all your answers in VS Code. It is a Visual Studio Code extension for access to Stack Overflow inside of the editor. It supports English, Spanish, Russian, Portuguese, Japanese.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://marketplace.visualstudio.com/items?itemName=4tron.stack-overflow-view"&gt;https://marketplace.visualstudio.com/items?itemName=4tron.stack-overflow-view&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N7Wev0v2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630830320171/y29_2dE9s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N7Wev0v2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630830320171/y29_2dE9s.gif" alt="Stack Overflow View"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier
&lt;/h3&gt;

&lt;p&gt;Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary. It supports JavaScript, TypeScript, Flow, JSX, JSON, CSS, SCSS, LessHTML, Vue, Angular GraphQL, Markdown, YAML and etc. &lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bCO9N6C0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630904166310/MXh4PuZqB.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCO9N6C0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630904166310/MXh4PuZqB.gif" alt="Prettier"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-spell-checker"&gt;
  &lt;/a&gt;
  Code Spell Checker
&lt;/h3&gt;

&lt;p&gt;A simple source code spell checker for multiple programming languages. A basic spell checker that works well with camelCase code. The goal of this spell checker is to help catch common spelling errors while keeping the number of false positives low.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker"&gt;https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3_OGUC4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630904411405/ZHzP6sbSg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3_OGUC4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630904411405/ZHzP6sbSg.gif" alt="Kidultsports-Admin-main-1630904330094.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thunder-client"&gt;
  &lt;/a&gt;
  Thunder Client
&lt;/h3&gt;

&lt;p&gt;Thunder Client is a lightweight Rest API Client Extension for Visual Studio Code, hand-crafted by Ranga Vadhineni with a simple and clean design.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client"&gt;https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EO2Wh3mB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630904592546/XFH5_0POz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EO2Wh3mB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630904592546/XFH5_0POz.gif" alt="Kidultsports-Admin-main-1630904551804.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#settings-sync"&gt;
  &lt;/a&gt;
  Settings Sync
&lt;/h3&gt;

&lt;p&gt;Instead of specifying your settings each time, you can save them in the editor and restore them on a new system with this plugin. This is important for customizing the development environment in the editors.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync"&gt;https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QxXSYmfW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630904761062/3sqRSeUMz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QxXSYmfW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630904761062/3sqRSeUMz.gif" alt="Kidultsports-Admin-main-1630904703893.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#import-cost"&gt;
  &lt;/a&gt;
  Import Cost
&lt;/h3&gt;

&lt;p&gt;Import Cost is a VS Code addon that estimates the size of an import package in your code. It's critical not to jeopardize the user experience by importing large packages when working on a project.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost"&gt;https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yWlcS77B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630905056025/lHFcy3kKP.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yWlcS77B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630905056025/lHFcy3kKP.gif" alt="Kidultsports-Admin-main-1630905023525.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-share"&gt;
  &lt;/a&gt;
  Live Share
&lt;/h3&gt;

&lt;p&gt;Visual Studio Live Share enables you to collaboratively edit and debug with others in real-time, regardless of what programming languages you're using or app types you're building. It allows you to instantly (and securely) share your current project, and then as needed, share debugging sessions, terminal instances, localhost web apps, voice calls, and more.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUgaH-un--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630905326360/8BZgMcIcr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUgaH-un--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630905326360/8BZgMcIcr.png" alt="screely-1630905320043.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you’re eager to use these 10 amazing VS Code Extensions to develop your application. If you need any help please let me know in the comment section. &lt;/p&gt;

&lt;p&gt;Would you like to buy me a coffee, You can do it &lt;a href="https://www.buymeacoffee.com/suhailkakar"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;👋 Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Class Static Initialization Blocks in JavaScript</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 06 Sep 2021 05:56:14 +0000</pubDate>
      <link>https://dev.to/alexdevero/class-static-initialization-blocks-in-javascript-1d1h</link>
      <guid>https://dev.to/alexdevero/class-static-initialization-blocks-in-javascript-1d1h</guid>
      <description>&lt;p&gt;Class static initialization blocks are one feature that will be part of the ECMAScript 2022 proposal. This is one of those features you may not use as often. Yet, it can still be useful from time to time. This tutorial will help you learn about what class static initialization blocks are and how to use them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#classes-fields-and-field-initialization-in-a-brief"&gt;
  &lt;/a&gt;
  Classes, fields and field initialization in a brief
&lt;/h2&gt;

&lt;p&gt;When you create a JavaScript class, you can add public, static and private fields and methods. Which type of a property or method you choose will depend on current situation and your intent. &lt;a href="https://blog.alexdevero.com/get-started-with-javascript-classes/#public-class-fields-and-methods"&gt;Public fields and methods&lt;/a&gt; are better for some situation while &lt;a href="https://blog.alexdevero.com/get-started-with-javascript-classes/#private-class-fields-and-methods"&gt;private&lt;/a&gt; are better for another. You can initialize these fields or not.&lt;/p&gt;

&lt;p&gt;You can also define and initialize class properties inside the &lt;code&gt;constructor&lt;/code&gt; method. This is becomes especially useful when you want to create class properties based on class parameters. The &lt;code&gt;constructor&lt;/code&gt; method allows you to initialize also public as well as private fields.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a class:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Define public field:&lt;/span&gt;
  &lt;span class="nx"&gt;isAlive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="nx"&gt;numberOfLegs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="nx"&gt;numberOfArms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

  &lt;span class="c1"&gt;// Define private field:&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;iq&lt;/span&gt;

  &lt;span class="c1"&gt;// Define custom properties in constructor:&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;iq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;

    &lt;span class="c1"&gt;// Initialize private field "iq":&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;iq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;iq&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Add private method:&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;decreaseIq&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;iq&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Add public methods:&lt;/span&gt;
  &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello, my name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;watchSitcom&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Call private method "decreaseIq()":&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;decreaseIq&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;tellYourIq&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Return value of private field "iq":&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;iq&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create instance of Person class:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;josh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Josh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Log "josh":&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;josh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   isAlive: true,&lt;/span&gt;
&lt;span class="c1"&gt;//   numberOfLegs: 2,&lt;/span&gt;
&lt;span class="c1"&gt;//   numberOfArms: 2,&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Josh',&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 31,&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: {&lt;/span&gt;
&lt;span class="c1"&gt;//     constructor: ƒ Person(),&lt;/span&gt;
&lt;span class="c1"&gt;//     sayHello: ƒ sayHello(),&lt;/span&gt;
&lt;span class="c1"&gt;//     watchSitcom: ƒ watchSitcom(),&lt;/span&gt;
&lt;span class="c1"&gt;//     tellYourIq: ƒ tellYourIq()&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Call the "sayHello()" method:&lt;/span&gt;
&lt;span class="nx"&gt;josh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Hello, my name is Josh.'&lt;/span&gt;

&lt;span class="c1"&gt;// Watch some tv show:&lt;/span&gt;
&lt;span class="nx"&gt;josh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;watchSitcom&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Tell me your IQ:&lt;/span&gt;
&lt;span class="nx"&gt;josh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tellYourIq&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 124&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-problem-with-static-fields-hint-initialization"&gt;
  &lt;/a&gt;
  The problem with static fields (hint: initialization)
&lt;/h2&gt;

&lt;p&gt;So far, everything looks good. Here comes the problem. The &lt;code&gt;constructor&lt;/code&gt; method will not allow you to initialize static fields. This may not be a real problem if all static fields you need can be initialized when you define them. You can achieve this the usual way. You create new static class field and assign it some value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create class:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Library&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Add and initialize static field for books:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lean UX&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lean Customer Development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The Four Steps to the Epiphany&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lean Analytics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="c1"&gt;// Add second static field:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;booksToReadCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Log value of "booksToReadCount" field:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;booksToReadCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The question is, what if you want to initialize the static field more dynamically? Take the &lt;code&gt;Library&lt;/code&gt; class for example. At this moment, it requires manual update of both fields, &lt;code&gt;books&lt;/code&gt; and &lt;code&gt;booksToReadCount&lt;/code&gt;, to keep them in sync. This might be okay from time to time, but it can quickly become annoying chore.&lt;/p&gt;

&lt;p&gt;One could think that this can be solved with the &lt;code&gt;constructor&lt;/code&gt; method. You define a static field without initializing it, or initialize it with some placeholder value. Then, you add &lt;code&gt;constructor&lt;/code&gt; and use it to update the value of that static field. The problem is that this doesn't work. That field will remain &lt;code&gt;undefined&lt;/code&gt; or keep the placeholder value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Library&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Add and initialize static field for books:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lean UX&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lean Customer Development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The Four Steps to the Epiphany&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lean Analytics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="c1"&gt;// Add static field, but don't initialize it:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;booksToReadCount&lt;/span&gt;

  &lt;span class="c1"&gt;// Try to initialize static&lt;/span&gt;
  &lt;span class="c1"&gt;// "booksToReadCount" in constructor:&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;booksToReadCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Try to log the value of "booksToReadCount" field:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;booksToReadCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#solution-with-external-resources"&gt;
  &lt;/a&gt;
  Solution with external resources
&lt;/h2&gt;

&lt;p&gt;One way to solve this problem is to use external resources. You can create new function outside the class that will do what you need. Then, you can assign call to that function to the static field. The value returned by the function will become the value of the static field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create class:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Library&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Add and initialize static field for books:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lean UX&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lean Customer Development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The Four Steps to the Epiphany&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lean Analytics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="c1"&gt;// Add second static field&lt;/span&gt;
  &lt;span class="c1"&gt;// and assign it the returned value of&lt;/span&gt;
  &lt;span class="c1"&gt;// "getBooksToReadCount()" function:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;booksToReadCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getBooksToReadCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create function to get booksToRead count:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getBooksToReadCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Log value of "version" field:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;booksToReadCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This solution will do the job. The downside is that it requires that external function. If you use this approach multiple times your code can quickly become less clear.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-with-static-initialization-blocks"&gt;
  &lt;/a&gt;
  Solution with static initialization blocks
&lt;/h2&gt;

&lt;p&gt;There is an alternative solution. This solution are static initialization blocks coming in ES2022. These static initialization blocks allow you to create code blocks inside the class. You can use these blocks to execute any operation you need. Let's take the &lt;code&gt;Library&lt;/code&gt; class as an example again.&lt;/p&gt;

&lt;p&gt;You define the class and define the first static field &lt;code&gt;books&lt;/code&gt; and assign it with the array of books. Next, you define the second field &lt;code&gt;booksToReadCount&lt;/code&gt;, but you don't initialize it. After this, you add the static initialization block. Inside this block, you execute any necessary operation and initialize the &lt;code&gt;booksToReadCount&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Library&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Add and initialize static field for books:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lean UX&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lean Customer Development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The Four Steps to the Epiphany&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lean Analytics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="c1"&gt;// Define static field for count,&lt;/span&gt;
  &lt;span class="c1"&gt;// but don't initialize it:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;booksToReadCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Add static initialization block:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Initialize the "booksToReadCount" field:&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;booksToReadCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Log value of "version" field:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;booksToReadCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#syntax-and-rules-for-static-initialization-blocks"&gt;
  &lt;/a&gt;
  Syntax and rules for static initialization blocks
&lt;/h2&gt;

&lt;p&gt;A few important things about static initialization blocks you should know. First, the syntax. The syntax is very simple. There is the &lt;code&gt;static&lt;/code&gt; keyword and code block defined with curly braces (&lt;code&gt;{}&lt;/code&gt;). Code you want to execute, including the initialization of static fields, goes inside the code block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a class:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Add some static field:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;

  &lt;span class="c1"&gt;// Create static initialization block:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Initialize "foo"&lt;/span&gt;
    &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

    &lt;span class="c1"&gt;// And do something more...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One interesting thing to mention. Every code block also creates new block scope. So, you can also use these blocks to create temporary variables you may need. These variables will exist only inside the block. Note that this applies only to block-scoped variables &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"&gt;const&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"&gt;let&lt;/a&gt;. It doesn't apply to &lt;code&gt;var&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a class:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create static initialization block:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Create some temporary variable:&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;

    &lt;span class="c1"&gt;// And do something...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second thing is that you can have as many static initialization blocks in a class as you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a class:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Dragon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Add static field:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;trunkVolume&lt;/span&gt;

  &lt;span class="c1"&gt;// Create static initialization block:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Initialize "trunkVolume" field:&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trunkVolume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;_000&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Add another static field:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;diameter&lt;/span&gt;

  &lt;span class="c1"&gt;// Create static initialization block:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Initialize "diameter" field:&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;diameter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Add another static field:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;thrust&lt;/span&gt;

  &lt;span class="c1"&gt;// Create static initialization block:&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Initialize "thrust" field:&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;thrust&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Third, static blocks are executed when during the execution of initializers of static fields. Fourth and last, if you extend classes, static fields of a superclass will be executed before the static fields of its subclasses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create superclass:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Vehicle initialization block.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create first subclass:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Car initialization block.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create second subclass:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Plane&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Plane initialization block.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Vehicle initialization block.'&lt;/span&gt;
&lt;span class="c1"&gt;// 'Car initialization block.'&lt;/span&gt;
&lt;span class="c1"&gt;// 'Plane initialization block.'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-class-static-initialization-blocks-in-javascript"&gt;
  &lt;/a&gt;
  Conclusion: Class static initialization blocks in JavaScript
&lt;/h2&gt;

&lt;p&gt;If you often find yourself working with static fields you may find static initialization blocks to be a useful feature. They can help make static initialization easier. I hope that this post helped you understand what class static initialization blocks in JavaScript are and how to use them. If you want to learn more about this feature, you can take a look at the proposal available on &lt;a href="https://github.com/tc39/proposal-class-static-block"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Run Docker without Docker Desktop on macOS</title>
      <author>Dhwaneet Bhatt</author>
      <pubDate>Mon, 06 Sep 2021 05:47:08 +0000</pubDate>
      <link>https://dev.to/dhwaneetbhatt/run-docker-without-docker-desktop-on-macos-306h</link>
      <guid>https://dev.to/dhwaneetbhatt/run-docker-without-docker-desktop-on-macos-306h</guid>
      <description>&lt;p&gt;Docker Inc. &lt;a href="https://www.docker.com/blog/updating-product-subscriptions/"&gt;recently announced&lt;/a&gt; that Docker Desktop would no longer remain a free product for large organizations. It will remain free for personal and open-source projects and for organizations smaller than a certain size. Usually this is not a cause for concern as a company with revenue greater than $10 million would be able to afford Docker Desktop's $5 per user/month starter pricing. This post does in no way discourages organizations in paying and I believe that Docker Inc. has all the rights to monetize their product.&lt;/p&gt;

&lt;p&gt;With the disclaimer out of the way, let us deep dive into explaining a little around what is free, what is paid and how exactly can we continue to use "containers", the core technology, without having to pay for Docker Desktop.&lt;/p&gt;




&lt;p&gt;This digression explains terminology around Docker. Experts who know Docker can skip this part.&lt;/p&gt;

&lt;p&gt;Docker can mean a lot of things. I'll try to break down and explain each term. This is by no means a full conceptual architectural explanation of how Docker works and I would recommend exploring other resources on the web for that purpose. This digression is just meant to ease the rest of the discussion.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://en.wikipedia.org/wiki/Docker%2C_Inc."&gt;Docker Inc&lt;/a&gt; - It is a USA based company that produces some open-source and not-open source software that makes it easier to develop, test and run applications in containers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/docker/engine"&gt;Docker Engine&lt;/a&gt; - The core technology behind Docker. It is an open source software that runs on linux as a daemon that makes it possible to run containers on top of Linux kernel. It is responsible for the container lifecycle and isolation of physical resources (compute, memory, storage) that containers can access. The engine can run on a physical or a virtual machine, but it can only run on top of a Linux kernel i.e. any OS that is flavour of Linux. This is important to understand. &lt;strong&gt;Docker engine only runs on Linux.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/docker/cli"&gt;Docker CLI&lt;/a&gt; - This is the CLI that developers usually use to interact with the docker engine. This consists both of &lt;code&gt;docker&lt;/code&gt; and &lt;code&gt;docker-compose&lt;/code&gt; commands. Again, this is open source software.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker Desktop&lt;/a&gt; - Since Docker Engine only runs on Linux, developers who use Windows and macOS for software development cannot run the engine until they spin up a virtual machine (VM) that runs linux. That is where Docker Desktop comes in. Docker Desktop is a closed-source software that allows developers working on Windows/macOS to use container technology seamlessly on their development environment without needing to manage the complexity of operating a VM and all the nitty-gritty that comes along with it (networking, virtualization, knowledge of linux etc.). Docker Desktop is meant to be used during software development, it does not play a part in containers that run on production-like environments, where only Docker Engine is mostly involved.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Docker Desktop is not the core technology that runs containers, it only aims to make it easier to develop software on Windows/macOS that runs in containers. Thus Docker Inc. is only trying to get large companies to pay for the convenience that Docker Desktop offers when developing applications. So, I completely sympathise with the move for trying to earn revenue from a product that their software developers have worked so hard to develop. Company's other revenue comes from &lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;The way to continue to run and build applications for containers on macOS would be run Docker Engine on a Linux VM. I discussed two approaches that I've tried on my development environment (Macbook Pro 13" 2020 Intel Chip). This list is not exhaustive and they maybe more ways to do this. This post does assume some working knowledge of Docker.&lt;/p&gt;

&lt;p&gt;Before doing this, uninstall Docker Desktop by removing &lt;code&gt;/Applications/Docker.app&lt;/code&gt;. Sometimes this is not enough and it leaves certain things so I recommend searching for "uninstall docker desktop on macos" and follow a guide for full cleanup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minikube"&gt;
  &lt;/a&gt;
  minikube
&lt;/h2&gt;

&lt;p&gt;So far, &lt;a href="https://minikube.sigs.k8s.io/docs/"&gt;minikube&lt;/a&gt; has emerged the easiest drop-in replacement for Docker Desktop. minikube is used to run a Kubernetes cluster on local environment. But it also runs a docker daemon that can be used to run containers. On macOS, minikube runs on a lot of virtualization technologies, but &lt;a href="https://minikube.sigs.k8s.io/docs/drivers/hyperkit/"&gt;hyperkit&lt;/a&gt; is the easiest to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Install hyperkit and minikube&lt;/span&gt;
brew &lt;span class="nb"&gt;install &lt;/span&gt;hyperkit
brew &lt;span class="nb"&gt;install &lt;/span&gt;minikube

&lt;span class="c"&gt;# Install Docker CLI&lt;/span&gt;
brew &lt;span class="nb"&gt;install &lt;/span&gt;docker
brew &lt;span class="nb"&gt;install &lt;/span&gt;docker-compose

&lt;span class="c"&gt;# Start minikube&lt;/span&gt;
minikube start

&lt;span class="c"&gt;# Tell Docker CLI to talk to minikube's VM&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;minikube docker-env&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Save IP to a hostname&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;minikube ip&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="s2"&gt; docker.local"&lt;/span&gt; | &lt;span class="nb"&gt;sudo tee&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt; /etc/hosts &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/null

&lt;span class="c"&gt;# Test&lt;/span&gt;
docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#minikube-cheatsheet"&gt;
  &lt;/a&gt;
  minikube Cheatsheet
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;minikube stop&lt;/code&gt; - stop the VM and k8s cluster. This does not delete any data. Just run &lt;code&gt;minikube start&lt;/code&gt; to spin up the cluster.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;minikube delete&lt;/code&gt; - This &lt;strong&gt;deletes&lt;/strong&gt; the cluster with all the data. All mapped volumes will be lost. Know what you're doing before running this. If you just want to stop the cluster use &lt;code&gt;minikube stop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;minikube ip&lt;/code&gt; - IP address of the VM where the cluster and docker engine run.&lt;/p&gt;

&lt;p&gt;minikube runs a k8s setup and thus runs a lot of containers that are not required if not using k8s. We can run &lt;code&gt;minikube pause&lt;/code&gt; to pause k8s related containers so they do not end up consuming system resources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manually-managing-the-vm"&gt;
  &lt;/a&gt;
  Manually managing the VM
&lt;/h2&gt;

&lt;p&gt;If you already use a Linux VM locally for some other purposes or want more control over the setup, then this can be a good option. For this purpose we'll use &lt;a href="https://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt; to run the Linux VM and use &lt;a href="https://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt; to make provisioning the VM easy and codified. We will use Ubuntu 20.04 LTS as the base OS for the VM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Install VirtualBox&lt;/span&gt;
brew &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--cask&lt;/span&gt; virtualbox
brew &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--cask&lt;/span&gt; virtualbox-extension-pack

&lt;span class="c"&gt;# Install Vagrant and the vbguest plugin to manage VirtualBox Guest Additions on the VM&lt;/span&gt;
brew &lt;span class="nb"&gt;install &lt;/span&gt;vagrant
vagrant plugin &lt;span class="nb"&gt;install &lt;/span&gt;vagrant-vbguest

&lt;span class="c"&gt;# Install Docker CLI&lt;/span&gt;
brew &lt;span class="nb"&gt;install &lt;/span&gt;docker
brew &lt;span class="nb"&gt;install &lt;/span&gt;docker-compose

&lt;span class="c"&gt;# Create a Vagrantfile and a provisioning script&lt;/span&gt;
&lt;span class="nb"&gt;mkdir &lt;/span&gt;vagrant-docker-engine
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;"Vagrant.configure('2') do |config|
  config.vm.box = 'ubuntu/focal64'
  config.vm.hostname = 'docker.local'
    config.vm.network 'private_network', ip: '192.168.66.4'
  config.vm.network 'forwarded_port', guest: 2375, host: 2999, id: 'dockerd'
  config.vm.provider 'virtualbox' do |vb|
    vb.name = 'ubuntu-docker'
    vb.memory = '2048'
    vb.cpus = '2'
  end
  config.vm.provision 'shell', path: 'provision.sh'

  # Configuration for Port Forwarding
  # Uncomment or add new ones here as required
  # config.vm.network 'forwarded_port', guest: 6379, host: 6379, id: 'redis'
  # config.vm.network 'forwarded_port', guest: 3306, host: 3306, id: 'mysql'
end"&lt;/span&gt; | &lt;span class="nb"&gt;tee &lt;/span&gt;Vagrantfile &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/null
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;"# Install Docker
apt-get remove docker docker-engine docker.io containerd runc
apt-get update
apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release net-tools software-properties-common
curl -fsSL &amp;lt;https://download.docker.com/linux/ubuntu/gpg&amp;gt; | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] &amp;lt;https://download.docker.com/linux/ubuntu&amp;gt; focal stable' | tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
apt-get update
apt-get install -y docker-ce docker-ce-cli containerd.io

# Configure Docker to listen on a TCP socket
mkdir /etc/systemd/system/docker.service.d
echo &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;
'[Service]
ExecStart=
ExecStart=/usr/bin/dockerd --containerd=/run/containerd/containerd.sock' | tee /etc/systemd/system/docker.service.d/docker.conf &amp;gt; /dev/null
echo &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;
'{
  &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;hosts&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;: [&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;fd://&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;tcp://0.0.0.0:2375&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;]
}' | tee /etc/docker/daemon.json &amp;gt; /dev/null
systemctl daemon-reload
systemctl restart docker.service"&lt;/span&gt; | &lt;span class="nb"&gt;tee &lt;/span&gt;provision.sh &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/null
&lt;span class="nb"&gt;chmod&lt;/span&gt; +x provision.sh

&lt;span class="c"&gt;# Spin up the machine&lt;/span&gt;
vagrant up

&lt;span class="c"&gt;# Save IP to a hostname&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"192.168.66.4 docker.local"&lt;/span&gt; | &lt;span class="nb"&gt;sudo tee&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt; /etc/hosts &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/null

&lt;span class="c"&gt;# Tell Docker CLI to talk to the VM&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://docker.local:2375

&lt;span class="c"&gt;# Optionally add it to your shell so don't need to repeat everytime&lt;/span&gt;
&lt;span class="c"&gt;# echo "export DOCKER_HOST=http://docker.local:2375" | tee -a ~/.zshrc &amp;gt; /dev/null&lt;/span&gt;

&lt;span class="c"&gt;# Test&lt;/span&gt;
docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vagrant-cheatsheet"&gt;
  &lt;/a&gt;
  Vagrant Cheatsheet
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;vagrant suspend&lt;/code&gt; - stop the VM for saving system resources. This does not delete any data. Just run &lt;code&gt;vagrant up&lt;/code&gt; to spin up the VM.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vagrant reload&lt;/code&gt; - for reloading the VM for any changes made to the config e.g. adding a new port mapping.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vagrant delete&lt;/code&gt; - This &lt;strong&gt;deletes&lt;/strong&gt; the VM with all the data. All mapped volumes will be lost. Know what you're doing before running this. If you just want to stop the VM use &lt;code&gt;vagrant suspend&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For every port that we want to natively access on macOS host, we need to modify the &lt;code&gt;Vagrantfile&lt;/code&gt; to add port forwarding. Use &lt;code&gt;vagrant reload&lt;/code&gt; after changing the file. Some examples have already been provided in the &lt;code&gt;Vagrantfile&lt;/code&gt; for reference.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#accessing-ports"&gt;
  &lt;/a&gt;
  Accessing Ports
&lt;/h3&gt;

&lt;p&gt;Docker Desktop makes it very convenient to access services/apps running on containers by making everything available on localhost. How they exactly do it is unknown, although it must involve some port mapping via hyperkit, but we must do this manually.&lt;/p&gt;

&lt;p&gt;Both in the minikube and virtualbox guides above, we make the IP address of the VM available under &lt;code&gt;docker.local&lt;/code&gt; hostname so to access any services we must use that hostname instead of using localhost.&lt;/p&gt;

&lt;p&gt;Using Vagrant we can actually do double port mapping (between container ↔  linux and linux ↔  host) to access stuff on localhost. That can be done my adding &lt;code&gt;forwarded_port&lt;/code&gt; entries in &lt;code&gt;Vagrantfile&lt;/code&gt; as mentioned above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#volumes-and-data-persistence"&gt;
  &lt;/a&gt;
  Volumes and Data Persistence
&lt;/h3&gt;

&lt;p&gt;Since the Docker Engine is running on the VM, any volumes created or mapped will be present on the Linux VM, not on the macOS (host). &lt;strong&gt;This is very important to remember.&lt;/strong&gt; This means that by destroying the VM we will lose access to the data in the volumes. Volumes are generally used for persistent databases like MySQL, PostgreSQL etc.&lt;/p&gt;

&lt;p&gt;There are ways in which &lt;code&gt;vagrant&lt;/code&gt; allows you to map folders to the VM, that would again be 3 layer-mapping like ports mentioned above, but becomes very complicated because or permission issues in the way Docker works. I tried a lot and could not make it work for MySQL. I could if I put in some extra hours, but the point is that it is cumbersome.&lt;/p&gt;

&lt;p&gt;My advice would be to backup volumes to a location on the VM and pull that backup to the host either via &lt;code&gt;scp&lt;/code&gt; if you're using &lt;code&gt;minikube&lt;/code&gt; or &lt;code&gt;vagrant&lt;/code&gt; has a default drive mapped at &lt;code&gt;/vagrant&lt;/code&gt; which can be used for backup. Thankfully, &lt;a href="https://docs.docker.com/storage/volumes/#backup-restore-or-migrate-data-volumes"&gt;backing up volumes is easy&lt;/a&gt; and it can be put in a cronjob on the VM/host if needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;If you're using &lt;code&gt;minikube&lt;/code&gt;, performance more or less remains the same because same underlying virtualization technology (hyperkit) is being employed. But for some strange reasons, I saw a huge jump in performance in read/write performance on MySQL when using &lt;code&gt;vagrant + virtualbox&lt;/code&gt; combination. I have not delved into the reasons of it, but that has made to stick to it. I am yet to try &lt;code&gt;minikube + virtualbox&lt;/code&gt; combination.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;minikube&lt;/code&gt; actually runs a kubernetes cluster on the VM so if that is not needed, doing a &lt;code&gt;minikube pause&lt;/code&gt; will make sure k8s cluster related containers are suspended so they do not consume any system resources.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>macos</category>
    </item>
    <item>
      <title>Amazon S3 Deep Dive (part 4-tagging, static website hosting)</title>
      <author>Supratip Banerjee</author>
      <pubDate>Mon, 06 Sep 2021 05:22:07 +0000</pubDate>
      <link>https://dev.to/aws-builders/amazon-s3-deep-dive-part-4-tagging-static-website-hosting-2a5d</link>
      <guid>https://dev.to/aws-builders/amazon-s3-deep-dive-part-4-tagging-static-website-hosting-2a5d</guid>
      <description>&lt;h3&gt;
  &lt;a href="#organizing-data-using-tags"&gt;
  &lt;/a&gt;
  Organizing data using tags
&lt;/h3&gt;

&lt;p&gt;A tag is a label that you assign to an AWS resource. Each tag consists of a key and an optional value, both of which you define to suit your company's requirements. Tags enable you to categorize your AWS resources or data in different ways. &lt;/p&gt;

&lt;p&gt;For example, you could define a set of tags for your objects that help you track project data or owner. Amazon S3 tags are key-value pairs and apply to a whole bucket or to individual objects to help with identification, searches, and data classification. Using tags for your objects allows you to effectively manage your storage and provide valuable insight on how your data is used. Newly created tags assigned to a bucket, are not retroactively applied to its existing child objects. &lt;/p&gt;

&lt;p&gt;You can use two types of tags: Bucket tags and Object tags. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#bucket-tags"&gt;
  &lt;/a&gt;
  Bucket tags
&lt;/h5&gt;

&lt;p&gt;Bucket tags allow you to track storage cost, or other criteria, by labeling your Amazon S3 buckets using cost allocation tags. A cost allocation tag is a key-value pair that you associate with an S3 bucket. After you activate cost allocation tags, AWS uses the tags to organize your resource costs on your cost allocation report. You can only use cost allocation tags on buckets and not on individual objects.&lt;/p&gt;

&lt;p&gt;AWS provides two types of cost allocation tags, an AWS-generated tag and user-defined tag. AWS defines, creates, and applies the AWS-generated tag, createdBy, for you after an S3 CreateBucket event. You define, create, and apply user-defined tags to your S3 bucket. &lt;br&gt;
Once you have created and applied the user-defined tags, you can activate them by using the Billing and Cost Management console for cost allocation tracking. Cost Allocation Tags appear on the console after enabling AWS Cost Explorer, AWS Budgets, AWS Cost and Usage reports, or legacy reports. &lt;/p&gt;

&lt;p&gt;After you activate the AWS services, they appear on your cost allocation report. You can then use the tags on your cost allocation report to track your AWS costs. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--79d8g0yj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfn2up4u2npk528cyzhc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--79d8g0yj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfn2up4u2npk528cyzhc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#bucket-tag-set"&gt;
  &lt;/a&gt;
  Bucket tag set
&lt;/h5&gt;

&lt;p&gt;Each S3 bucket has a tag set. A tag set contains all of the tags that are assigned to that bucket and can contain as many as 50 tags, or it can be empty.&lt;/p&gt;

&lt;p&gt;Keys must be unique within a tag set but values don't.  In the image below the Value: ocean-life is listed twice in tag sets named project/ocean-life and topic/ocean-life. Since values don't need to be unique these entries are fine. However, when attempting to add a second Key called "items" an error occurs because the key must be unique within the tag set.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n_98vyy5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0nsawirv7uc2c7a85nv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n_98vyy5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0nsawirv7uc2c7a85nv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#object-tags"&gt;
  &lt;/a&gt;
  Object tags
&lt;/h5&gt;

&lt;p&gt;Object tagging gives you a way to categorize and query your storage. You can add tags to an Amazon S3 object during the upload or after the upload. Each tag is a key-value pair that adheres to the following rules:&lt;br&gt;
• You can associate up to 10 tags with an object they must have unique tag keys.&lt;br&gt;
• Tag keys can be up to 128 characters in length&lt;br&gt;
• Tag values can be up to 255 characters in length&lt;br&gt;
• Key and tag values are case sensitive&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-benefits"&gt;
  &lt;/a&gt;
  Additional benefits
&lt;/h3&gt;

&lt;p&gt;Adding tags to your objects offer benefits such as the following:&lt;br&gt;
• Object tags enable fine-grained access control of permissions. For example, you could grant an IAM user permission to read-only objects with specific tags.&lt;br&gt;
• Object tags enable fine-grained object lifecycle management in which you can specify a tag-based filter, in addition to a key name prefix, in a lifecycle rule.&lt;br&gt;
• When using Amazon S3 analytics, you can configure filters to group objects together for analysis by object tags, key name prefix, or both prefix and tags.&lt;br&gt;
• You can also customize Amazon CloudWatch metrics to display information by specific tag filters. The next lesson provides more details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#object-api-operations-for-tagging"&gt;
  &lt;/a&gt;
  Object API operations for tagging
&lt;/h3&gt;

&lt;p&gt;With Amazon S3 tagging, if you want to add or replace a tag in a tag set (all the tags associated with an object or bucket), you must download all the tags, modify the tags, and then replace all the tags at once.&lt;/p&gt;

&lt;p&gt;For more information, see the 'API operations related to object tagging' section in the following link:  &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html"&gt;https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#region-location"&gt;
  &lt;/a&gt;
  Region location
&lt;/h3&gt;

&lt;p&gt;Amazon S3 is a globally viewable service. This means that in the AWS Management Console you do not have to specify a region in order to view the buckets. Remember that when you initially create the bucket, you must choose a region to indicate where you want the bucket data to reside. The region you choose should be local to your users or consumers to optimize latency, minimize costs, or to address regulatory requirements. &lt;/p&gt;

&lt;p&gt;For example, if you reside in Europe, you will want to create buckets in the Europe (Ireland) or Europe (Frankfurt) regions rather than creating your buckets in Asia Pacific (Sydney) or South America (Sao Paulo). This way the data is closer to your users and consumers, reducing latency and ensuring regulatory and meets country legal requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crossregion-replication-crr"&gt;
  &lt;/a&gt;
  Cross-Region Replication (CRR)
&lt;/h3&gt;

&lt;p&gt;If you need data stored in multiple regions, you can replicate your bucket to other regions using cross-region replication. This enables you to automatically copy objects from a  bucket in one region to different bucket in a another, separate region. You can replicate the entire bucket or you can use tags to replicate only the objects with the tags you choose.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bQoJkiCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39x124eu61q009tc2mgy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bQoJkiCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39x124eu61q009tc2mgy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sameregion-replication-srr"&gt;
  &lt;/a&gt;
  Same-Region Replication (SRR)
&lt;/h4&gt;

&lt;p&gt;Amazon S3 supports automatic and asynchronous replication of newly uploaded S3 objects to a destination bucket in the same AWS Region. &lt;/p&gt;

&lt;p&gt;SRR makes another copy of S3 objects within the same AWS Region, with the same redundancy as the destination storage class. This allows you to automatically aggregate logs from different S3 buckets for in-region processing, or configure live replication between test and development environments. SRR helps you address data sovereignty and compliance requirements by keeping a copy of your objects in the same AWS Region as the original.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uJF2-7AZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2yjpudzlcd1kutarec8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJF2-7AZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2yjpudzlcd1kutarec8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amazon-s3-static-websites"&gt;
  &lt;/a&gt;
  Amazon S3 static websites
&lt;/h3&gt;

&lt;p&gt;You can use Amazon S3 to host a static website. With a static website, the individual web pages include only static content that does not change frequently. This is different from using a dynamic website, where the content is constantly changing and constantly updated. From the AWS Management Console, you can easily configure your bucket for static website hosting without needing to write any code. &lt;/p&gt;

&lt;p&gt;To host a static website on Amazon S3, you configure a bucket for website hosting and then upload your content. When you configure a bucket as a static website, you must enable website hosting, set public read permissions, and create and add an index document. &lt;br&gt;
Depending on your website requirements, you can also configure redirects, web traffic logging, and a custom error document. If you prefer not to use the AWS Management Console, you can create, update, and delete the website configuration programmatically by using the AWS SDKs. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tfwItPzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqxt2zenwszqcxybtcec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tfwItPzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqxt2zenwszqcxybtcec.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the best compatibility, we recommend that you avoid using dots (.) in bucket names, except when using buckets for static website hosting. If you include dots in a bucket name that is not a static website, you can't use virtual-host-style addressing over HTTPS, unless you perform your own certificate validation. This is because the security certificates used for virtual hosting of buckets don't work for buckets with dots in their names. Virtual hosting is the practice of serving multiple websites from a single web server. &lt;/p&gt;

&lt;p&gt;For more information on virtual hosting or using buckets as a static website, follow the link listed below by choosing the VIRTUAL HOSTING button.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>JS, Local Storage</title>
      <author>Ahmad</author>
      <pubDate>Mon, 06 Sep 2021 03:50:38 +0000</pubDate>
      <link>https://dev.to/moghaazi/js-local-storage-3p97</link>
      <guid>https://dev.to/moghaazi/js-local-storage-3p97</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/moghaazi/embed/BajWgav?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Criando um bot para Discord com Kord (Kotlin)</title>
      <author>Ederson Ferreira</author>
      <pubDate>Mon, 06 Sep 2021 03:37:12 +0000</pubDate>
      <link>https://dev.to/kotlinautas/criando-um-bot-para-discord-com-kord-kotlin-4opb</link>
      <guid>https://dev.to/kotlinautas/criando-um-bot-para-discord-com-kord-kotlin-4opb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#kotlinautas"&gt;
  &lt;/a&gt;
  Kotlinautas
&lt;/h2&gt;

&lt;p&gt;Esse conteúdo é oferecido e distribuído pela comunidade &lt;a href="https://twitter.com/kotlinautas/"&gt;Kotlinautas&lt;/a&gt;, uma comunidade brasileira que busca oferecer conteúdo gratuito sobre a linguagem Kotlin em um espaço plural.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BE6z6Pw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jreawpvk6whxigcpmctf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BE6z6Pw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jreawpvk6whxigcpmctf.png" alt="capa Kotlinautas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bot-para-discord-com-kord"&gt;
  &lt;/a&gt;
  Bot para Discord com Kord
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-%C3%A9-discord"&gt;
  &lt;/a&gt;
  O quê é Discord?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://discord.com/"&gt;Discord&lt;/a&gt; é uma plataforma de socialização que permite a criação de servidores, que funcionam como um grupo, onde é possível de criar cargos, canais de texto, canais de voz,etc.&lt;/p&gt;

&lt;p&gt;O Discord é usado geralmente em comunidades de jogos, mas pode ser usado para qualquer tipo de grupo de pessoas, como uma comunidade de tecnologia.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-s%C3%A3o-bots-para-discord"&gt;
  &lt;/a&gt;
  O quê são bots para Discord?
&lt;/h2&gt;

&lt;p&gt;Bots para Discord são automatizações que buscam facilitar processos de um servidor. Como por exemplo bots que tocam música em canais de voz, ou bots que retornam o clima de uma cidade caso um comando seja enviado em um canal de texto.&lt;/p&gt;

&lt;p&gt;Qualquer pessoa pode criar um bot para Discord. Isso pode ser feito com linguagens de programação como Python, Node, Java, ou Kotlin que será o caso.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-%C3%A9-kord"&gt;
  &lt;/a&gt;
  O quê é Kord?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/kordlib/kord"&gt;Kord&lt;/a&gt; é uma biblioteca para Kotlin que permite a criação de bots para o Discord sem muitas complicações. A idéia é usar o poder das corotinas do Kotlin (Caso você queira saber mais sobre corotinas no Kotlin, veja no artigo &lt;a href="https://dev.to/kotlinautas/basico-de-corotinas-em-kotlin-50a8"&gt;Básico de corotinas em Kotlin&lt;/a&gt; da Kotlinautas) junto com a simplicidade do Kotlin.&lt;/p&gt;

&lt;p&gt;Kord no momento que esse artigo está sendo publicado, suporta 100% da API não relacionada á voz do Discord. Logo a API de voz do Discord ainda não é suportada.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-iremos-criar"&gt;
  &lt;/a&gt;
  O quê iremos criar?
&lt;/h2&gt;

&lt;p&gt;Iremos criar um bot de discord simples, com quatro comandos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;!enquete [enquete]&lt;/code&gt; irá criar uma enquete com emojis do Discord (✅ para sim e ❌ para não);&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;!curiosidade&lt;/code&gt; irá pegar uma curiosidade aleatória sobre Kotlin;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;!guardar [texto]&lt;/code&gt; irá adicionar um texto á uma lista de textos;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;!mostrar&lt;/code&gt; irá mostrar os textos que foram guardados;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Com esses quatro comandos poderemos ter uma idéia melhor de como o Kord funciona, e como criar um bot para Discord.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criando-o-projeto"&gt;
  &lt;/a&gt;
  Criando o projeto
&lt;/h2&gt;

&lt;p&gt;Vá no seu intelliJ, e clique no botão &lt;code&gt;New Project&lt;/code&gt; para criar um novo projeto:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_PN00v0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgiruu8u0b0i9ya2c0f3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_PN00v0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgiruu8u0b0i9ya2c0f3.png" alt="Botão new project do intelliJ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após isso, na interface de configurações do Gradle deverão ficar assim, habilitando o &lt;strong&gt;Kotlin DSL build script&lt;/strong&gt;, e também habilitar a opção &lt;strong&gt;Kotlin/JVM&lt;/strong&gt;. Opicionalmente você pode remover a opção &lt;strong&gt;Java&lt;/strong&gt;, pois não iremos usar Java nesse projeto.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLI5QMkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtv82a82t30i9dvuatgq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLI5QMkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtv82a82t30i9dvuatgq.png" alt="Configurações do Gradle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clique agora em &lt;strong&gt;Next&lt;/strong&gt; para escolher um nome para o projeto, pode ser qualquer nome que você quiser. Caso não tenha nenhuma ideia, pode ser algo como &lt;code&gt;kord&lt;/code&gt; por exemplo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instalando-o-kord"&gt;
  &lt;/a&gt;
  Instalando o Kord
&lt;/h3&gt;

&lt;p&gt;O Kord pode ser instalado adicionando três dependências. Vá ao arquivo &lt;code&gt;build.gradle.kts&lt;/code&gt;, e adicione essas três dependências:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dev.kord:kord-core:0.8.0-M5"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.slf4j:slf4j-api:1.6.1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.slf4j:slf4j-simple:1.6.1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora clique no elefante do Gradle no canto superior direito da tela:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oPiOABf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6wuvzsk1bnfqo2jzclk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oPiOABf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6wuvzsk1bnfqo2jzclk.png" alt="Elefante do Gradle do canto superior direito"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com isso, todas as dependências serão devidamente instaladas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criando-a-conta-do-discord-do-bot"&gt;
  &lt;/a&gt;
  Criando a conta do Discord do bot
&lt;/h2&gt;

&lt;p&gt;Temos que criar uma conta do Discord que irá representar o nosso bot. Essa conta será usada para conectar o Kord ao servidor do Discord. Essa conta pode ser criada &lt;a href="https://discord.com/developers/applications"&gt;na pagina de aplicações do Discord&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oEczDNJj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fd8vx9d4lrnggse57zms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oEczDNJj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fd8vx9d4lrnggse57zms.png" alt="botão new project da pagina de aplicações do Discord"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora você precisa preencher o nome do seu bot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fgD3Ynvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tb42ewplo12rnybr6xd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fgD3Ynvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tb42ewplo12rnybr6xd.png" alt="Caixa de diálogo para preencher o nome do bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após isso, veja que na barra lateral esquerda, há um menu chamado &lt;strong&gt;Bot&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6oivqUhs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0e7j08y9sweej8vzlpg5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6oivqUhs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0e7j08y9sweej8vzlpg5.png" alt="Menu bot na barra lateral esquerda"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nesse menu, terá um botão escrito &lt;strong&gt;Add Bot&lt;/strong&gt;. Clique nesse botão para criar o bot nessa aplicação:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j0r8TOT7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/maa1vfzpoue81gjxr83v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j0r8TOT7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/maa1vfzpoue81gjxr83v.png" alt="botão add bot no menu bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após criar o bot, vá no menu &lt;strong&gt;OAuth2&lt;/strong&gt; na barra esquerda:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nrANDcI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mt72kyi5lhetdk9r9tec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nrANDcI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mt72kyi5lhetdk9r9tec.png" alt="menu oauth2 na barra lateral esquerda"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vá na lista de opções OAuth2 e marque a opção &lt;strong&gt;bot&lt;/strong&gt;. O link gerado abaixo será o link para adicioanr o bot em algum servidor que você tenha um cargo de administração. De preferência, enquanto estiver desenvolvendo o bot, crie um servidor de testes apenas seu e adicione o bot para esse servidor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_OF9c33---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rj0jjuiopuxn6m1k10ow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_OF9c33---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rj0jjuiopuxn6m1k10ow.png" alt="Lista de permissões Oauth2 com a opção bot marcada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora, volte á página inicial da aplicação do bot e terá uma seção chamada &lt;strong&gt;Token&lt;/strong&gt;. Clique no botão &lt;strong&gt;Copy&lt;/strong&gt; para copiar esse token. Iremos usar esse token dentro do nosso código para conectar o Kord ao nosso bot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQk2M646--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mttfadinamsfn1xbd4fk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQk2M646--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mttfadinamsfn1xbd4fk.png" alt="seção do token do bot na pagina inicial da aplicação do seu bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Esse token não deve ser compartilhado com ninguém, e não deve ser postado no Github pois com esse token uma pessoa má intencionada teria controle total do seu bot. Caso queria compartilhar esse projeto, veja sobre &lt;a href="https://github.com/cdimascio/dotenv-kotlin"&gt;Dotenv no Kotlin&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conectando-o-kord-ao-nosso-bot"&gt;
  &lt;/a&gt;
  Conectando o Kord ao nosso bot
&lt;/h2&gt;

&lt;p&gt;Vamos criar um arquivo chamado &lt;code&gt;main.kt&lt;/code&gt; dentro de &lt;code&gt;src/main/kotlin/&lt;/code&gt;, esse será o arquivo principal do nosso bot.&lt;/p&gt;

&lt;p&gt;Dentro desse arquivo vamos criar um pacote chamado &lt;code&gt;komando&lt;/code&gt; que será o nome do nosso bot. Você pode escolher qualquer outro nome, mas caso não tenha idéia, deixe &lt;code&gt;komando&lt;/code&gt; mesmo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;komando&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos importar algumas partes do Kord no nosso código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;komando&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dev.kord.core.*&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dev.kord.core.entity.*&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dev.kord.core.event.message.*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos criar a função &lt;code&gt;main&lt;/code&gt; do nosso código, que inicialmente irá conectar ao Discord apenas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
suspend fun main() {
    val cliente = Kord("&amp;lt;SEU TOKEN&amp;gt;")

    cliente.login()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Substitua o texto &lt;code&gt;&amp;lt;SEU TOKEN&amp;gt;&lt;/code&gt; pelo token do site do Discord;&lt;/li&gt;
&lt;li&gt;Iniciamos a instância do bot usando a classe &lt;code&gt;Kord&lt;/code&gt;, inserindo o token do nosso bot como parâmetro;&lt;/li&gt;
&lt;li&gt;Iniciamos o bot com a função &lt;code&gt;client.login()&lt;/code&gt;, fazendo uma tentativa de se logar no Discord;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para iniciar o bot, clique na seta verde ao lado da função &lt;code&gt;main&lt;/code&gt;, que o próprio IntelliJ irá iniciar o bot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ubUI2wew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekq6do040aqdwuqg17cb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ubUI2wew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekq6do040aqdwuqg17cb.png" alt="Seta verde ao lado da função main"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recebendo-mensagens"&gt;
  &lt;/a&gt;
  Recebendo mensagens
&lt;/h2&gt;

&lt;p&gt;Agora vamos fazer que o nosso bot receba mensagens enviadas em qualquer canal do(s) servidor(res) que está conectado. Isso pode ser feito dessa forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
suspend fun main() {
    val cliente = Kord("&amp;lt;SEU TOKEN&amp;gt;")

    cliente.on&amp;lt;MessageCreateEvent&amp;gt; {
    println(message)
  }

    cliente.login()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Usamos o método &lt;code&gt;clinte.on&lt;/code&gt; onde podemos inserir um código que será executado toda vez que chegar uma mensagem no servidor. Essa mensagem é guardada na variável &lt;code&gt;message&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, tente enviar uma mensagem no seu servidor. O output será algo do tipo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Message(data=MessageData(id=Snowflake(value=880821494043770890), channelId=Snowflake(value=770303744679215104), guildId=OptionalSnowflake.Value(snowflake=Snowflake(value=759906666060840991)), author=UserData(id=Snowflake(value=244129089806532608), username=Ederson Ferreira, discriminator=2011, avatar=5680a7721a80f529b39d1cbdfe6f4d93, bot=OptionalBoolean.Missing, publicFlags=Optional.Something(content=UserFlags(code=0)), banner=null, accentColor=null), content=teste, timestamp=2021-08-27T14:30:09.052000+00:00, editedTimestamp=null, tts=false, mentionEveryone=false, mentions=[], mentionRoles=[], mentionedChannels=Optional.Missing, attachments=[], embeds=[], reactions=Optional.Missing, nonce=Optional.Something(content=880821493397716992), pinned=false, webhookId=OptionalSnowflake.Missing, type=dev.kord.common.entity.MessageType$Default@73885605, activity=Optional.Missing, application=Optional.Missing, applicationId=OptionalSnowflake.Missing, messageReference=Optional.Missing, flags=Optional.Something(content=MessageFlags(flags=[])), stickers=Optional.Missing, referencedMessage=Optional.Null, interaction=Optional.Missing, components=Optional.Something(content=[])), kord=Kord(resources=ClientResources(shards=Shards(totalShards=1, indices=0..0), httpClient=HttpClient[io.ktor.client.engine.cio.CIOEngine@54da3d21], defaultStrategy=EntitySupplyStrategy.cacheWithRestFallback, intents=Intents(code=DiscordBitSet(101111110110111))), cache=dev.kord.cache.api.delegate.DelegatingDataCache@25a6997a, gateway=MasterGateway(gateways={0=CachingGateway(cache=DataCacheView(cache=dev.kord.cache.api.delegate.DelegatingDataCache@25a6997a), gateway=dev.kord.gateway.DefaultGateway@1b268405)}), rest=dev.kord.rest.service.RestClient@276b2278, selfId=Snowflake(value=768959134556880997)), supplier=FallbackEntitySupplier(first=CacheEntitySupplier(cache=dev.kord.cache.api.delegate.DelegatingDataCache@25a6997a), second=RestEntitySupplier(rest=dev.kord.rest.service.RestClient@276b2278)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora estamos recebendo um objeto que representa a mensagem, e podemos obter diversos dados sobre a mensagem. Como a pessoa que enviou a mensagem, o conteúdo da mensagem em si,etc.&lt;/p&gt;

&lt;p&gt;Podemos por exemplo, mostrar apenas o conteúdo da mensagem, isso pode feito dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
suspend fun main() {
    val cliente = Kord("&amp;lt;SEU TOKEN&amp;gt;")

    cliente.on&amp;lt;MessageCreateEvent&amp;gt; {
    println(message.content)
  }

    cliente.login()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, o resultado do nosso código não será um objeto amontado de dados e de difícil interpretação. Aogra será o texto que enviarmos no servidor em sua forma pura:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;testando Kord
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#criando-comandos"&gt;
  &lt;/a&gt;
  Criando comandos
&lt;/h2&gt;

&lt;p&gt;Iremos inserir cada comando em um arquivo diferente mas sempre do mesmo pacote &lt;code&gt;komando&lt;/code&gt;, para assim poder usar todas as funções criadas dentro do arquivo &lt;code&gt;main.kt&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enquete"&gt;
  &lt;/a&gt;
  !enquete
&lt;/h3&gt;

&lt;p&gt;Primeiro, crie um arquivo chamado &lt;code&gt;enquete.kt&lt;/code&gt; em &lt;code&gt;src/main/kotlin&lt;/code&gt;. Dentro desse arquivo vamos fazer uma única importação:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;komando&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dev.kord.core.entity.*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos criar duas variáveis globais desse código, sendo a variável &lt;code&gt;sim&lt;/code&gt; e a variável &lt;code&gt;não&lt;/code&gt; que irão guardar os emojis ✅ para sim e ❌para não. Podemos criar essas variáveis dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;komando&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dev.kord.core.entity.*&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;sim&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ReactionEmoji&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\u2705"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;não&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ReactionEmoji&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\u274C"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos criar uma função chamada &lt;code&gt;enquete&lt;/code&gt;, essa função irá receber dois argumentos. Sendo a &lt;code&gt;mensagemSplit&lt;/code&gt;, que é o conteúdo da mensagem em forma de uma lista, onde cada elemento da lista é uma palavra do conteúdo da mensagem, e também uma variável chamada &lt;code&gt;mensagemDados&lt;/code&gt; que será o objeto do Kord que representa a mensagem. Logo, a declaração da função será assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;enquete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Essa função é marcada com &lt;code&gt;suspend&lt;/code&gt; pois para o envio da mensagem é usada uma corotina, e como iremos usar corotinas nessa função, precisamos adicionar o &lt;code&gt;suspend&lt;/code&gt; antes da função. (Caso você queria saber sobre corotinas, leia esse arquivo da Kotlinautas: &lt;a href="https://dev.to/kotlinautas/basico-de-corotinas-em-kotlin-50a8"&gt;Básico de corotinas em Kotlin&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora vamos pensar: Se a enquete precisa ter um título, logo o comando que será enviado seria algo como &lt;code&gt;!enquete título da enquete&lt;/code&gt;. Com isso, podemos concluir que o número mínimo de índices que &lt;code&gt;mensagemSplit&lt;/code&gt; precisa ter são dois. Pois o primeiro sempre será &lt;code&gt;!enquete&lt;/code&gt;, e caso a enquete tenha uma palavra como título, seriam apenas dois elementos nessa lista. Logo, podemos filtrar para caso seja enviada uma &lt;code&gt;!enquete&lt;/code&gt; sem nenhum título esse comando seja recusado. Isso pode ser feito dessa forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;enquete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Envie o comando na maneira correta, colocando !enquete [nome da enquete]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Caso o número de índices da mensagem seja menor que dois, será enviada uma mensagem no chat, dizendo que o comando precisa ser enviado da maneira correta, e a função será retornada.&lt;/li&gt;
&lt;li&gt;A função que usamos para enviar a mensagem é a &lt;code&gt;.createMessage&lt;/code&gt;, que cria uma mensagem em um canal de texto específico (no caso o canal de texto que a enquete foi enviada)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, vamos criar uma variável chamada &lt;code&gt;enquete&lt;/code&gt;, que irá guardar o conteúdo da mensagem sem o comando &lt;code&gt;!enquete&lt;/code&gt;, armazenando apenas o título da enquete.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;enquete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Envie o comando na maneira correta, colocando !enquete [nome da enquete]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;enquete&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;joinToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Usamos a função &lt;code&gt;subList&lt;/code&gt; que seleciona uma parte de uma lista. Inciando do índice 1 até o ultimo índice da lista com &lt;code&gt;mensagemSplit.size&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Juntamos toda essa lista para uma string usando a função &lt;code&gt;joinToString&lt;/code&gt;, unindo todos os elementos separando com um espaço &lt;code&gt;" "&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, precisamos enviar no canal a enquete. Isso pode ser feito usando aquela função &lt;code&gt;.createMessage&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;enquete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Envie o comando na maneira correta, colocando !enquete [nome da enquete]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;enquete&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;joinToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;resposta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Iniciando enquete: $enquete"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Guardamos a mensagem em uma variável chamada &lt;code&gt;resposta&lt;/code&gt;, pois iremos mexer com essa mensagem depois de seu envio.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora precisamos aplicar os emojis á mensagem. Isso pode ser feito usando a variável &lt;code&gt;addReaction&lt;/code&gt; dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;enquete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Envie o comando na maneira correta, colocando !enquete [nome da enquete]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;enquete&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;joinToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;resposta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Iniciando enquete: $enquete"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;resposta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addReaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;resposta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addReaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;não&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos voltar ao arquivo &lt;code&gt;main.kt&lt;/code&gt;, e vamos criar um bloco &lt;code&gt;when&lt;/code&gt; para determinar qual será o comando utilizado, e criar a variável &lt;code&gt;mensagemSplit&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;cliente&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Kord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;SEU TOKEN&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MessageCreateEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mensagemSplit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
            &lt;span class="s"&gt;"!enquete"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;enquete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Por enquanto, dentro do &lt;code&gt;when&lt;/code&gt; temos apenas uma condição (comando), sendo a &lt;code&gt;!enquete&lt;/code&gt;. Com essa estrutura, podemos adicionar novos comandos apenas adicionando condições ao nosso &lt;code&gt;when&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#curiosidade"&gt;
  &lt;/a&gt;
  !curiosidade
&lt;/h3&gt;

&lt;p&gt;Agora vamos criar o comando &lt;code&gt;!curiosidade&lt;/code&gt;, que irá pegar uma curiosidade aleatória sobre Kotlin, e enviar essa curiosidade no canal de texto.&lt;/p&gt;

&lt;p&gt;Primeiro, crie um arquivo chamado &lt;code&gt;curiosidade.kt&lt;/code&gt; em &lt;code&gt;src/main/kotlin&lt;/code&gt;. Dentro desse arquivo vamos fazer uma única importação:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;komando&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dev.kord.core.entity.*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos criar uma variável global chamada &lt;code&gt;curiosidades&lt;/code&gt; que será uma lista que irá armazenar as curiosidades:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;komando&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dev.kord.core.entity.*&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;curiosidades&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"Kotlin é completamente interoperativo com Java"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Kotlin pode ser usada tanto orientada á objetos, quanto de maneira funcional"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Kotlin pode ser usada para criação de backend, frontend, mobile e desktop"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Com Kotlin você escreve menos código comparado ao Java"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Kotlin tem uma curva de aprendizado menor que outras linguagens"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos criar a função &lt;code&gt;curiosidade&lt;/code&gt; que apenas irá ter &lt;code&gt;mensagemDados&lt;/code&gt; como parâmetro, que é o objeto da mensagem:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;curiosidade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos pegar uma curiosidade aleatória, e enviar essa curiosidade no canal de texto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
suspend fun curiosidade(mensagemDados: Message){
    val curiosidade = curiosidades.random()
    mensagemDados.channel.createMessage(curiosidade)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;No Kotlin podemos usar a função &lt;code&gt;.random()&lt;/code&gt; em uma lista para pegar um elemento aleatório em uma lista.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora vamos voltar ao arquivo &lt;code&gt;main.kt&lt;/code&gt; e adicionar esse comando em nosso &lt;code&gt;when&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;cliente&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Kord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;SEU TOKEN&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MessageCreateEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mensagemSplit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
            &lt;span class="s"&gt;"!enquete"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;enquete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="s"&gt;"!curiosidade"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;curiosidade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#guardar"&gt;
  &lt;/a&gt;
  !guardar
&lt;/h2&gt;

&lt;p&gt;Agora vamos criar o comando &lt;code&gt;!guardar&lt;/code&gt; que irá adicionar um texto á uma lista de textos.&lt;/p&gt;

&lt;p&gt;Primeiro, vamos á &lt;code&gt;main.kt&lt;/code&gt; e vamos adicionar uma variável global chamada &lt;code&gt;textos&lt;/code&gt; que será a lista mutável que vamos armazenar os textos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;textos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mutableListOf&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;

&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;cliente&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Kord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;SEU TOKEN&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MessageCreateEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mensagemSplit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
            &lt;span class="s"&gt;"!enquete"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;enquete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="s"&gt;"!curiosidade"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;curiosidade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos criar um arquivo chamado &lt;code&gt;guardarTexto.kt&lt;/code&gt; que irá ter um comportamento muito parecido com a enquete, pois o argumento do comando também tem várias palavras. A função também irá receber os mesmos argumentos da enquete. Vamos adicionar a importação do Kord e a função:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;komando&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dev.kord.core.entity.*&lt;/span&gt;

&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;guardarTexto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos criar a mesma condição que filtra se o comando &lt;code&gt;!guardar&lt;/code&gt; será usado de maneira correta, e se não, será enviada uma mensagem avisando que o comando foi usado de maneira incorreta.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;komando&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dev.kord.core.entity.*&lt;/span&gt;

&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;guardarTexto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Envie o comando na maneira correta, colocando !guardar [texto]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora precisamos pegar o texto (a mensagem inteira sem &lt;code&gt;!guadar&lt;/code&gt;) e armazenar na variável &lt;code&gt;textos&lt;/code&gt; da &lt;code&gt;main.kt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;komando&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dev.kord.core.entity.*&lt;/span&gt;

&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;guardarTexto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Envie o comando na maneira correta, colocando !guardar [texto]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;texto&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;joinToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;textos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;texto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos enviar uma mensagem no canal de texto informando que o texto foi guardado com sucesso:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;komando&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dev.kord.core.entity.*&lt;/span&gt;

&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;guardarTexto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Envie o comando na maneira correta, colocando !guardar [texto]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;texto&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;joinToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;textos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;texto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mensagem salva!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos adicionar esse comando ao &lt;code&gt;when&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;textos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mutableListOf&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;

&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;cliente&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Kord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;SEU TOKEN&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MessageCreateEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mensagemSplit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
            &lt;span class="s"&gt;"!enquete"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;enquete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="s"&gt;"!curiosidade"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;curiosidade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="s"&gt;"!guardar"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;guardarTexto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mostrar"&gt;
  &lt;/a&gt;
  !mostrar
&lt;/h3&gt;

&lt;p&gt;Agora vamos criar o último comando que irá mostrar os textos que foram guardados pelo &lt;code&gt;guardarTexto&lt;/code&gt;. Primeiro, crie um arquivo chamado &lt;code&gt;mostrarTextos.kt&lt;/code&gt;, e vamos importar o Kord e criar a função &lt;code&gt;mostrarTextos&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;komando&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dev.kord.core.entity.*&lt;/span&gt;

&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;mostrarTextos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos pegar a lista &lt;code&gt;textos&lt;/code&gt;, transformar em uma string com todos esses textos e enviar esse texto no canal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;komando&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dev.kord.core.entity.*&lt;/span&gt;

&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;mostrarTextos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;textosString&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;textos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joinToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mensagemDados&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"As mensagens que foram guardadas são: $textosString"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, só falta adicionarmos esse comando ao &lt;code&gt;when&lt;/code&gt; que criamos em &lt;code&gt;main.kt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;textos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mutableListOf&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;

&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;cliente&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Kord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;SEU TOKEN&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MessageCreateEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mensagemSplit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
            &lt;span class="s"&gt;"!enquete"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;enquete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="s"&gt;"!curiosidade"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;curiosidade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="s"&gt;"!guardar"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;guardarTexto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagemSplit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="s"&gt;"!mostrar"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;mostrarTextos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testando-o-bot-na-pr%C3%A1tica"&gt;
  &lt;/a&gt;
  Testando o bot na prática
&lt;/h2&gt;

&lt;p&gt;Agora vamos testar como os comandos do nosso bot estão funcionando. Inicie o bot clicando na seta verde dita anteriormente, vá á algum canal do seu servidor, e comece a testar os comandos criados, como no exemplo abaixo:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imagem"&gt;
  &lt;/a&gt;
  Imagem
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Eviit_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w57gphbcgdnkglg63bhw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Eviit_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w57gphbcgdnkglg63bhw.png" alt="Testando o bot na prática em um canal de texto do Discord, caso você tenha alguma deficiência visual, na seção abaixo há a transcrição"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#texto"&gt;
  &lt;/a&gt;
  Texto
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Ederson: !enquete teste de enquete

DedoDuro: Iniciando enquete: teste de enquete

Ederson: !curiosidade

DedoDuro: Kotlin pode ser usada tanto orientada á objetos, quanto de maneira funcional

Ederson: !guardar guardando esse texto aqui

DedoDuro: Mensagem salva!

Ederson: !guardar esse outro também

DedoDuro: Mensagem salva!

Ederson: !mostrar

DedoDuro: As mensagens que foram guardadas são: guardando esse texto aqui, esse outro também
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finaliza%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Finalização
&lt;/h2&gt;

&lt;p&gt;Agora temos um bot para Discord feito completamente em Kotlin e totalmente funcional. Que pode processar comandos enviados e responder á esses comandos.&lt;/p&gt;

&lt;p&gt;Obrigado por ler 💙&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>backend</category>
      <category>discord</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>AWS Elastic Beanstalk</title>
      <author>Ajit Singh</author>
      <pubDate>Mon, 06 Sep 2021 03:33:15 +0000</pubDate>
      <link>https://dev.to/this-is-learning/aws-elastic-beanstalk-5d37</link>
      <guid>https://dev.to/this-is-learning/aws-elastic-beanstalk-5d37</guid>
      <description>&lt;p&gt;Most if the time developers just want to deploy code and don't want to worry about the infrastructure. This is where elastic Beanstalk comes in it automatically handles the deployment, from capacity provisioning, load balancing, auto-scaling to application health monitoring. It is an easy-to-use service for deploying and scaling web applications and services on familiar servers such as Apache, Nginx, Passenger, and IIS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-elastic-beanstalk-properties"&gt;
  &lt;/a&gt;
  AWS Elastic Beanstalk Properties
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is a very easy to use service&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lets us keep full control over the underlying resources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is free but you pay for the resources you use&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is a managed service  it handles&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Instance configuration&lt;/li&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;li&gt;Monitoring&lt;/li&gt;
&lt;li&gt;Load balancing &lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next we will do a hands on how to use AWS Elastic Beanstalk&lt;/p&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 42</title>
      <author>Christopher Glikpo</author>
      <pubDate>Mon, 06 Sep 2021 03:27:39 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-42-1n73</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-42-1n73</guid>
      <description>&lt;p&gt;Netflix provides streaming movies and TV shows to over 75 million subscribers across&lt;br&gt;
the globe. Customers can watch as many shows/ movies as they want as long as they are&lt;br&gt;
connected to the internet for a monthly subscription fee of about ten dollars. Netflix produces&lt;br&gt;
original content and also pays for the rights to stream feature films and shows.&lt;/p&gt;

&lt;p&gt;In this video,we will be creating the videos table&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QZlaVd6kv-0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this video,we will be installing FFmpeg&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cClt4StEBmA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Learn Javascript by making a Image Slideshow</title>
      <author>Ramiro</author>
      <pubDate>Mon, 06 Sep 2021 03:26:38 +0000</pubDate>
      <link>https://dev.to/ramgendeploy/learn-javascript-by-making-a-image-slideshow-1lkl</link>
      <guid>https://dev.to/ramgendeploy/learn-javascript-by-making-a-image-slideshow-1lkl</guid>
      <description>&lt;p&gt;Check out the youtube video for the post 😊&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GF6N9PUjrEk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;What you'll learn:&lt;br&gt;
DOM manipulation: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating elements from javascript&lt;/li&gt;
&lt;li&gt;Editing attributes of the elements in the page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ES6 syntax: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arrow functions &lt;/li&gt;
&lt;li&gt;Destructuring assignments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Programming - Higher order function&lt;/p&gt;



&lt;p&gt;So the basic idea of making a slideshow using only a function to create the rest is to use createElement function of the document and appending more elements to a single root, and building the slideshow using only javascript.&lt;/p&gt;

&lt;p&gt;I like to use two helper function for this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One selects elements and the other creates them.&lt;/p&gt;

&lt;p&gt;Then we use two function to create sort of react components but this functions will return document elements.&lt;/p&gt;

&lt;p&gt;This one is for a single slide of the slideshow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ImageContiner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ctr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newEl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newEl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;txtSpan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newEl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;span&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;ctr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;ctr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frame&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;txtSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;txtSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;ctr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;ctr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;txtSpan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ctr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and this one for the action buttons, here we are using a higher order function just make an example 😅&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actionbtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newEl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;txt&lt;/span&gt;

  &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the main one, first we note that we need the id of the root element where we are going to append all the other elements, and the data in form of an array of objects with a src image and a description.&lt;/p&gt;

&lt;p&gt;What the function does:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Selects the root element and appends imageContainer for each item in the data array.
&lt;/li&gt;
&lt;li&gt;Creates the previous and next buttons &lt;/li&gt;
&lt;li&gt;Finally it appends the buttons to the actionctr div and then to the root.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slideshow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;txt&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;imgCtr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ImageContiner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imgCtr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;imgslt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;imgslt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Next and prev btn&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;actionctr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newEl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;actionctr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;actionctr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;actionbtn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;👈&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;imgslt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="nx"&gt;imgslt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;imgslt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="nx"&gt;imgslt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="nx"&gt;imgslt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


      &lt;span class="nx"&gt;imgslt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;actionbtn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;👉&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;imgslt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
      &lt;span class="nx"&gt;imgslt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;imgslt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="nx"&gt;imgslt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="nx"&gt;imgslt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


      &lt;span class="nx"&gt;imgslt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="c1"&gt;// let next = actionbtn('next');&lt;/span&gt;
  &lt;span class="nx"&gt;actionctr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actionctr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the HTML is very simple we only need to have a root element and a script tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;...
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"sls"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;slideshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sls&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1585255318859-f5c15f4cffe9?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=crop&amp;amp;fm=jpg&amp;amp;h=500&amp;amp;ixlib=rb-1.2.1&amp;amp;q=80&amp;amp;w=500&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1584226761916-3fd67ab5ac3a?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=crop&amp;amp;fm=jpg&amp;amp;h=500&amp;amp;ixlib=rb-1.2.1&amp;amp;q=80&amp;amp;w=500&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Animi voluptatum natus eligendi minima earum ratione eos, fuga voluptas excepturi est.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1585179292338-45ba1f62f082?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=crop&amp;amp;fm=jpg&amp;amp;h=500&amp;amp;ixlib=rb-1.2.1&amp;amp;q=80&amp;amp;w=500&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1584753987666-ead137ec0614?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=crop&amp;amp;fm=jpg&amp;amp;h=500&amp;amp;ixlib=rb-1.2.1&amp;amp;q=80&amp;amp;w=500&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Animi voluptatum natus eligendi minima earum ratione eos, fuga voluptas excepturi est.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And last we have the CSS is pretty simple but very important, we don't do nothing crazy here just some positions relative and absolute so the buttons are well positioned in the main div &lt;br&gt;
Also centering stuff you know, with display flex 😂&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Baloo+Thambi+2&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#sls&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.frame&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500ms&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Baloo Thambi 2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;cursive&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#535353&lt;/span&gt;&lt;span class="n"&gt;b5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;53px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.show&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.actionctr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;350px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;73px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.actionctr&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.actionctr&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.actionctr&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it if you want to connect you can reach to me on twitter &lt;a class="mentioned-user" href="https://dev.to/ramgendeploy"&gt;@ramgendeploy&lt;/a&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
