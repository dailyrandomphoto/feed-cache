<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Intelligent Workloads at the Edge Book Review </title>
      <author>Salah Elhossiny</author>
      <pubDate>Tue, 28 Dec 2021 12:03:08 +0000</pubDate>
      <link>https://dev.to/aws-heroes/intelligent-workloads-at-the-edge-book-review-4d85</link>
      <guid>https://dev.to/aws-heroes/intelligent-workloads-at-the-edge-book-review-4d85</guid>
      <description>&lt;p&gt;I received a copy of Packt's Intelligent Workloads at the Edge book, authored by Natu Lauchande, which can be found here: &lt;a href="https://www.amazon.com/Intelligent-Workloads-Edge-cyber-physical-Greengrass/dp/1801811784"&gt;https://www.amazon.com/Intelligent-Workloads-Edge-cyber-physical-Greengrass/dp/1801811784&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://www.amazon.com/Indraneel-Mitra/e/B09NYKNJ8C/ref=aufs_dp_mata_dsk"&gt; Indraneel Mitra &lt;/a&gt; who is the book co-author and a Principal Solutions Architect for IoT at Amazon Web Services, &lt;a href="https://www.amazon.com/Ryan-Burke/e/B09NX7Y7J6/ref=aufs_dp_mata_dsk"&gt; Ryan Burke &lt;/a&gt; who is a the book co-author and is a senior sustainability application architect at AWS, formerly the Worldwide Technical Leader.&lt;/p&gt;

&lt;p&gt;With the introduction of concepts and examples, the authors' approach is particularly didactic. Another noteworthy characteristic is that, although being a technical read that necessitates the analysis and execution of code, the book can be read fast because the concepts are given objectively.&lt;/p&gt;

&lt;p&gt;Thanks also for Abeer Dawe and Packt team.&lt;/p&gt;

&lt;p&gt;The goal of this book is to discuss prescriptive patterns for developing end-to-end (E2E) solutions that run at the edge, which is the place in the computing topology closest to where analogue meets digital and vice versa. &lt;/p&gt;

&lt;p&gt;The book concentrates on the edge use cases where machine learning (ML) technologies add the greatest value, and it shows you how to build these solutions using modern Amazon Web Services capabilities.&lt;/p&gt;

&lt;p&gt;The book itself is very well structured, divided in 4 sections and 10 chapters. Section 1 is introductory, starting with a data-driven edge with ML. &lt;/p&gt;

&lt;p&gt;Section 2 uses AWS technologies such as IoT Greengrass and Amazon SageMaker to build a solution that uses machine learning models to analyse data from local devices.&lt;br&gt;
The following chapters make up this section:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Foundations of Edge Workloads &lt;/li&gt;
&lt;li&gt;Building the Edge &lt;/li&gt;
&lt;li&gt;Extending the Cloud to the Edge &lt;/li&gt;
&lt;li&gt;Ingesting and Streaming Data from the Edge &lt;/li&gt;
&lt;li&gt;Processing and Consuming Data on the Cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The third section discusses how to deploy IoT fleets at scale and how to use DevOps methods to generate flexible and operationally efficient IoT workloads at scale utilising various well-architected practises.&lt;/p&gt;

&lt;p&gt;The following chapters make up this section:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the Edge, DevOps and MLOps&lt;/li&gt;
&lt;li&gt;Large-Scale Fleet Management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Section 4 wraps up the hands-on project with a summary of what makes a solution well-architected (security, reliability, operational excellence, cost optimization, and performance). &lt;/p&gt;

</description>
      <category>aws</category>
      <category>machinelearning</category>
      <category>devops</category>
    </item>
    <item>
      <title>Laravel 8 Interview Questions and Answers in 2022 (Part #2)</title>
      <author>Ashish Yadav</author>
      <pubDate>Tue, 28 Dec 2021 12:01:25 +0000</pubDate>
      <link>https://dev.to/expoashish/laravel-8-interview-questions-and-answers-in-2022-part-2-3j8c</link>
      <guid>https://dev.to/expoashish/laravel-8-interview-questions-and-answers-in-2022-part-2-3j8c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#laravel-8-interview-questions-and-answers"&gt;
  &lt;/a&gt;
  Laravel 8 Interview Questions and Answers
&lt;/h2&gt;

&lt;p&gt;In this blog we are going to see part #2 of Laravel 8 Interview Questions and Answers in 2022. If you like my post then follow me. Lets Start:-👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and_22.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #2)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #1)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/advance-laravel-8-interview-questions.html"&gt;Advance Laravel 8 Interview Questions and Answers 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-reasons-why-laravel-is-most.html"&gt;Top 10 Reasons Why Laravel Is The Most Popular PHP Framework&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-programming-languages-you-must.html"&gt;Top 10 Programming Languages You Must Know In 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/10-best-free-blogging-sites-in-2022.html"&gt;Best Websites for Blogging&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-roadmap-2022"&gt;
  &lt;/a&gt;
  Complete Roadmap 2022:-
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-python-programming.html"&gt;Python Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-machine-learning.html"&gt;Machine Learning Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-c-programming.html"&gt;C++ Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/java-complete-roadmap-2022.html"&gt;Java Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-data-structure.html"&gt;Data Structure Complete Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-laravel-tutorial-for-developer"&gt;
  &lt;/a&gt;
  Some Laravel Tutorial for developer:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #1)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and_22.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #2)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/advance-laravel-8-interview-questions.html"&gt;Advance Laravel 8 Interview Questions and Answers 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/everything-about-laravel-8-composer.html"&gt;Everything About Laravel 8 Composer 2022 | Composer in Laravel 8&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-jetstream-vs-laravel-ui-vs.html"&gt;Laravel Jetstream vs Laravel ui  vs Breeze&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-reasons-why-laravel-is-most.html"&gt;Top 10 Reasons Why Laravel Is The Most Popular PHP Framework&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/speed-up-your-laravel-website-super-fast.html"&gt;Speed Up Your Laravel website Super Fast&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-concept-and-projects"&gt;
  &lt;/a&gt;
  Python Concept and Projects:-
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/10-best-python-libraries-for-machine.html"&gt;10 Best Python Libraries For Machine Learning&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/07/alarm-clock-in-python-with-gui.html"&gt;Alarm Clock in Python with GUI&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/top-5-python-frameworks-for-game.html"&gt;Top 5 Python Frameworks for Game development 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/06/tic-tac-toe-game-using-pygame-in-python.html"&gt;Tic Tac Toe Game Using Pygame in Python&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/what-is-pykyra-in-python-programming.html"&gt;What is Pykyra in Python Programming?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thankyou for reading my blogs.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#my-website"&gt;
  &lt;/a&gt;
  My Website:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/"&gt;CodexAshish&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The Full-Stack Developer Vocabulary (Pt.3, The languages, tools and frameworks)</title>
      <author>Code_Jedi</author>
      <pubDate>Tue, 28 Dec 2021 11:39:24 +0000</pubDate>
      <link>https://dev.to/code_jedi/the-full-stack-developer-vocabulary-pt3-the-languages-tools-and-frameworks-2mam</link>
      <guid>https://dev.to/code_jedi/the-full-stack-developer-vocabulary-pt3-the-languages-tools-and-frameworks-2mam</guid>
      <description>&lt;h4&gt;
  &lt;a href="#react-docker-solidity-aws"&gt;
  &lt;/a&gt;
  React? Docker? Solidity? AWS?
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#wtf-is-everyone-talking-about"&gt;
  &lt;/a&gt;
  WTF is everyone talking about???
&lt;/h3&gt;

&lt;p&gt;If you're new to this whole full-stack development thing and get confused by some of the words people use when talking about full-stack development, then stick around because in this 3 part series, I'll be compiling the most common words and phrases related to full-stack development. Of course, it will take much more time to learn the details of each of the things I'll be mentioning in these articles. These articles are just summarizers to give you an idea of what these words and phrases mean so that you can understand what people are referencing with them when talking about certain areas of full-stack development.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#part-3-the-languages-tools-and-frameworks"&gt;
  &lt;/a&gt;
  Part 3: The languages, tools and frameworks
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;1. ReactJS&lt;/strong&gt;&lt;br&gt;
You've probably heard a ton about React on dev.to, but what exactly is ReactJS?&lt;br&gt;
React is currently the most popular javascript front-end framework.&lt;br&gt;
Developed by Facebook in 2013, React is used to build interactive user interfaces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. AngularJS&lt;/strong&gt;&lt;br&gt;
Angular is a development platform, built on TypeScript. As a platform, Angular includes:&lt;/p&gt;

&lt;p&gt;A component-based framework for building scalable web applications&lt;br&gt;
A collection of well-integrated libraries that cover a wide variety of features, including routing, forms management, client-server communication, and more&lt;br&gt;
A suite of developer tools to help you develop, build, test, and update your code&lt;br&gt;
With Angular, you're taking advantage of a platform that can scale from single-developer projects to enterprise-level applications. Angular is designed to make updating as straightforward as possible, so take advantage of the latest developments with a minimum of effort.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Docker&lt;/strong&gt;&lt;br&gt;
Docker is a software platform that allows you to build, test, and deploy applications quickly. Docker packages software into standardized units called containers that have everything the software needs to run including libraries, system tools, code, and runtime. Using Docker, you can quickly deploy and scale applications into any environment and know your code will run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Kubernetes&lt;/strong&gt;&lt;br&gt;
Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services.&lt;/p&gt;

&lt;p&gt;The name Kubernetes originates from Greek, meaning helmsman or pilot. K8s as an abbreviation results from counting the eight letters between the "K" and the "s". Google open-sourced the Kubernetes project in 2014. Kubernetes combines over 15 years of Google's experience running production workloads at scale with best-of-breed ideas and practices from the community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Rust&lt;/strong&gt;&lt;br&gt;
Rust is a statically-typed programming language designed for performance and safety, especially safe concurrency and memory management. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. TensorFlow&lt;/strong&gt;&lt;br&gt;
TensorFlow is an end-to-end open source platform for machine learning. It has a comprehensive, flexible ecosystem of tools, libraries and community resources that lets researchers push the state-of-the-art in ML and developers easily build and deploy ML powered applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Solidity&lt;/strong&gt;&lt;br&gt;
Solidity is a statically-typed curly-braces programming language designed for developing smart contracts that run on Ethereum.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Laravel&lt;/strong&gt;&lt;br&gt;
Laravel is a PHP framework with expressive, elegant syntax. It is the most popular PHP framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Go&lt;/strong&gt;&lt;br&gt;
Go language is a programming language initially developed at Google in the year 2007 by Robert Griesemer, Rob Pike, and Ken Thompson. It is a statically-typed language having syntax similar to that of C. It provides garbage collection, type safety, dynamic-typing capability, many advanced built-in types such as variable length arrays and key-value maps. It also provides a rich standard library. The Go programming language was launched in November 2009 and is used in some of Google's production systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. jQuery&lt;/strong&gt;&lt;br&gt;
jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and AJAX much simpler with an easy-to-use API that works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. AJAX&lt;/strong&gt;&lt;br&gt;
Ajax stands for Asynchronous Javascript And XML. Ajax is just a means of loading data from the server and selectively updating parts of a web page without reloading the whole page.&lt;/p&gt;

&lt;p&gt;Basically, what AJAX does is it makes use of the browser's built-in XMLHttpRequest(XHR) object to send and receive information to and from a web server asynchronously, in the background, without blocking the page or interfering with the user's experience.&lt;/p&gt;

&lt;p&gt;Ajax has become so popular that you hardly find an application that doesn't use Ajax to some extent. The example of some large-scale Ajax-driven online applications are: Gmail, Google Maps, Google Docs, YouTube, Facebook, Flickr, and many more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. NodeJS&lt;/strong&gt;&lt;br&gt;
Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser. Node.js lets developers use JavaScript to write command line tools and for server-side scripts to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm, unifying web-application development around a single programming language, rather than different languages for server-side and client-side scripts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. NPM&lt;/strong&gt;&lt;br&gt;
NPM is two things: first and foremost, it is an online repository for the publishing of open-source Node.js projects; second, it is a command-line utility for interacting with said repository that aids in package installation, version management, and dependency management. A plethora of Node.js libraries and applications are published on npm, and many more are added every day. These applications can be searched for on &lt;a href="https://www.npmjs.com/"&gt;their website&lt;/a&gt;. Once you have a package you want to install, it can be installed with a single command.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14. CSS&lt;/strong&gt;&lt;br&gt;
Cascading Style Sheets (CSS) is a style sheet language used for describing the presentation of a document written in a markup language such as HTML. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript.&lt;/p&gt;

&lt;p&gt;CSS is designed to enable the separation of presentation and content, including layout, colors, and fonts. This separation can improve content accessibility; provide more flexibility and control in the specification of presentation characteristics; enable multiple web pages to share formatting by specifying the relevant CSS in a separate .css file, which reduces complexity and repetition in the structural content; and enable the .css file to be cached to improve the page load speed between the pages that share the file and its formatting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;15. Git&lt;/strong&gt;&lt;br&gt;
Git is a software used for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;16. AWS&lt;/strong&gt;&lt;br&gt;
Amazon Web Services, Inc. (AWS) is a subsidiary of Amazon providing on-demand cloud computing platforms and APIs to individuals, companies, and governments, on a metered pay-as-you-go basis. These cloud computing web services provide a variety of basic abstract technical infrastructure and distributed computing building blocks and tools. One of these services is Amazon Elastic Compute Cloud (EC2), which allows users to have at their disposal a virtual cluster of computers, available all the time, through the Internet. AWS's virtual computers emulate most of the attributes of a real computer, including hardware central processing units (CPUs) and graphics processing units (GPUs) for processing; local/RAM memory; hard-disk/SSD storage; a choice of operating systems; networking; and pre-loaded application software such as web servers, databases, and customer relationship management (CRM).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;17. Google Cloud&lt;/strong&gt;&lt;br&gt;
Google Cloud Platform (GCP), offered by Google, is a suite of cloud computing services that runs on the same infrastructure that Google uses internally for its end-user products, such as Google Search, Gmail, Google Drive, and YouTube. Alongside a set of management tools, it provides a series of modular cloud services including computing, data storage, data analytics and machine learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;18. Microsoft Azure&lt;/strong&gt;&lt;br&gt;
Microsoft Azure, often referred to as Azure, is a cloud computing service operated by Microsoft for application management via Microsoft-managed data centers. It provides software as a service (SaaS), platform as a service (PaaS) and infrastructure as a service (IaaS) and supports many different programming languages, tools, and frameworks, including both Microsoft-specific and third-party software and systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;19. Selenium&lt;/strong&gt;&lt;br&gt;
The selenium package is used to automate web browser interaction from Python. It is often used to make bots and web scrapers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;20. Django&lt;/strong&gt;&lt;br&gt;
Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of web development, so you can focus on writing your app without needing to reinvent the wheel. It’s free and open source.&lt;/p&gt;




&lt;p&gt;That's it for the &lt;strong&gt;The Full-Stack Developer Vocabulary&lt;/strong&gt;.&lt;br&gt;
You can find Part 1 &lt;a href="https://dev.to/code_jedi/the-full-stack-developer-vocabulary-pt1-the-essentials-4ap4"&gt;here&lt;/a&gt; and Part 2 &lt;a href="https://dev.to/code_jedi/the-full-stack-developer-vocabulary-pt2-the-more-advanced-33ge"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#educative"&gt;
  &lt;/a&gt;
  Educative
&lt;/h3&gt;

&lt;p&gt;Before I end the article, I'd like to recommend &lt;a href="https://bit.ly/3rVIDoN"&gt;Educative&lt;/a&gt; for learning full-stack developers.&lt;br&gt;
&lt;strong&gt;Why Educative?&lt;/strong&gt;&lt;br&gt;
It is home to hundreds of full-stack development hands on tutorials, guides, courses and demonstrations to help you stay ahead of the curve in your development journey.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can get started with Educative &lt;a href="https://bit.ly/3EeDfAi"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>60x Performance Improvement &amp; Moving on fullstack - Building DDTJ Day 7</title>
      <author>Shai Almog</author>
      <pubDate>Tue, 28 Dec 2021 11:27:32 +0000</pubDate>
      <link>https://dev.to/codenameone/60x-performance-improvement-moving-on-fullstack-building-ddtj-day-7-2c92</link>
      <guid>https://dev.to/codenameone/60x-performance-improvement-moving-on-fullstack-building-ddtj-day-7-2c92</guid>
      <description>&lt;p&gt;Yesterday &lt;a href="https://dev.to/codenameone/good-news-and-bad-news-pivot-and-turn-building-ddtj-day-6-1pl4"&gt;things started improving&lt;/a&gt; and today I'm fully recovered...&lt;/p&gt;

&lt;p&gt;Since Thursday I’ve been in a bit of a slump. This is a natural stage in every non-trivial project. It still hits hard, this is where most people break when it’s an open source project. It stops being “fun”. It’s important to persist though. Once we get a hello world working the energy comes back and it’s a new day!&lt;/p&gt;

&lt;p&gt;With that I merged two PRs. This &lt;a href="https://github.com/ddtj/ddtj/pull/4"&gt;monster PR&lt;/a&gt; finally implements all the debugging logic so we can collect all the data we need. Then &lt;a href="https://github.com/ddtj/ddtj/pull/5"&gt;I merged a small fix&lt;/a&gt; which gave the performance boost I’ll discuss shortly. &lt;/p&gt;

&lt;p&gt;Up until yesterday I still had some doubts related to my ability to deliver on my chosen architecture. Would performance be reasonable enough?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#60x-improvement"&gt;
  &lt;/a&gt;
  60x Improvement
&lt;/h2&gt;

&lt;p&gt;I wanted to share my suspicions about performance yesterday but chose not to do that. I’ve been in so many cases where people talked on and on… They were sure the performance problem was due to X. Then they ended up with egg on their face.&lt;/p&gt;

&lt;p&gt;I was actually right in my “guess”. I measured the application runtime without any of the state saving code. Which means we’re just launching it with JDI and nothing else. Performance was almost as bad, that means most of my code performed fine.&lt;/p&gt;

&lt;p&gt;So what caused the slow performance?&lt;/p&gt;

&lt;p&gt;During development I had to remove a call to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;methodEntryRequest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addClassFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Actually, there were many calls. I tried a lot of things such as exclusion filters etc. &lt;/p&gt;

&lt;p&gt;The reason I had to remove those is that they didn’t work!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-name-the-method-add-if-it-doesnt-add"&gt;
  &lt;/a&gt;
  Don’t Name the Method “Add” if it doesn’t “Add”
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/jdk.jdi/com/sun/jdi/request/MethodEntryRequest.html#addClassFilter(java.lang.String)"&gt;addClassFilter&lt;/a&gt; API should really be named &lt;code&gt;setClassFilter&lt;/code&gt;. Adding additional filters disables the functionality. Unfortunately, there’s no mention of this in the JavaDoc anywhere. The workaround I chose is actually pretty simple, I create multiple instances of &lt;code&gt;MethodEntryRequest&lt;/code&gt; and bind each to a different filter type. &lt;/p&gt;

&lt;p&gt;Right now it’s limited to the user classes filter and the &lt;code&gt;javax&lt;/code&gt; packages. For the proof of concept I might add more. Naturally we’ll need more configuration options for this.&lt;/p&gt;

&lt;p&gt;Adding a simple filter made all the difference. It reduced the networking overhead of the VM and allowed fast performance. Maybe if I had taken the agent approach (which is “in process”) I would have had better performance. Might need to re-evaluate that moving forward.&lt;/p&gt;

&lt;p&gt;With this tiny tweak performance is now acceptable for this stage in the project life so we can move on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-dont-see-in-the-pr-change-log"&gt;
  &lt;/a&gt;
  What you Don’t See in the PR Change Log
&lt;/h2&gt;

&lt;p&gt;I squashed and merged so a lot of my changes during this process vanished in the log. Unless you go to the explicit PR and review the commits, you won’t see that. I wrote a lot of code that ended up on the cutting room floor when I decided to pivot to using method entry/exit.&lt;/p&gt;

&lt;p&gt;This is one of the hardest things developers need to deal with for projects of this type: the fallacy of sunk cost. I already wrote the code, I can’t pivot. &lt;/p&gt;

&lt;p&gt;Naturally, this has value. I’m not advocating a yoyo development strategy. But we need to be ready to discard work and be objective.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-didnt-comment-much"&gt;
  &lt;/a&gt;
  I didn’t Comment Much
&lt;/h3&gt;

&lt;p&gt;A couple of people pointed out to me in private that I write code without comments. &lt;/p&gt;

&lt;p&gt;I used to comment a whole lot… In fact my code had more comment lines than source code by a healthy margin. As you can see from my blogging, I like writing and can be pretty prolific with a keyboard. The blocker isn’t time or even effort. &lt;/p&gt;

&lt;p&gt;The problem is that comments grow stale and most people don’t read them if you overdo them. I try to make the code simple. If it needs commenting I try to simplify further. By avoiding comments as much as possible, I make sure that people read the comments that really matter. &lt;/p&gt;

&lt;p&gt;There’s one major exception which is JavaDoc when building a public API. That’s essential and should always be fully written.  But comments in source code are often ignored.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-need-to-cleanup-the-tests"&gt;
  &lt;/a&gt;
  I Need to Cleanup the Tests
&lt;/h3&gt;

&lt;p&gt;I’ve been chasing my coverage tale for a while now trying to get the coverage to 80% with every PR. This has been pretty painful. Unfortunately the tests have a lot of code duplication and just plain hacks. &lt;/p&gt;

&lt;p&gt;I need to do a complete overhaul of this thing but I want to get the product out first. I might not have a choice since I spent hours last night trying to get coverage past the 80% mark.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ci-failed-on-the-server-while-working-locally"&gt;
  &lt;/a&gt;
  CI Failed on the Server While Working Locally
&lt;/h3&gt;

&lt;p&gt;This drove me crazy the other day. Unit tests passed perfectly locally but failed to work when running in github actions. The error message indicated something weird about the spring framework packaging. Something that didn’t make sense at all. &lt;/p&gt;

&lt;p&gt;I tried isolating environmental differences and whatnot. Turns out this one &lt;a href="https://github.com/ddtj/ddtj/blob/3af940425721155557d0b9253fb5a0fded970f3a/.github/workflows/build.yml#L43"&gt;tiny line&lt;/a&gt;, making sure the java bin directory is in the path. This one tiny change made the tests pass. I have no idea how I guessed it. I just tried everything until it worked.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-on-to-cli-and-test-generation"&gt;
  &lt;/a&gt;
  Moving On to CLI and Test Generation
&lt;/h2&gt;

&lt;p&gt;There are two directions I can take:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try to get the code running with Spring Boot&lt;/li&gt;
&lt;li&gt;Finish the CLI and generate a test for the hello world test case&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m going with the latter and so should you whenever you run into a point like that in your new project. &lt;/p&gt;

&lt;p&gt;When creating the project we need to build it breadth first, not depth first. We need at least a basic implementation of everything working in tandem so we can understand the moving pieces. So we can accept help in the project by third parties. Breadth helps with perspective, it “proves” the project. Depth comes later.&lt;/p&gt;

&lt;p&gt;With that in mind I turned my focus on the CLI and implemented all the current functionality that’s still pending there. With that I have one last task to complete the proof of concept…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generating-a-test"&gt;
  &lt;/a&gt;
  Generating a Test
&lt;/h2&gt;

&lt;p&gt;I want to set my sights very low for the first test. But it must mock a call for this to be a “good” valid test. This will be my main focus for today. &lt;/p&gt;

&lt;p&gt;If I can get this to work my next priority will be getting this to run on the Spring Boot pet clinic demo. I think there will be some challenges there with filtering the spring proxies. Maybe other problems. But if I can get both tasks through this week then I’ll consider it a huge success.&lt;/p&gt;

&lt;p&gt;Right now I’m setting up the first Freemarker generated test template, once that works I plan to wire it up with Spring MVC to create a simple code generator. Then this should be bound to the CLI. It should be relatively simple, famous last words…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;I hope tomorrow we’ll have proper source code generation working with Freemarker. I’m Working on integrating it and then I’ll go over the code to generate the tests. Then this should bind to the CLI. It’s getting close!&lt;/p&gt;

&lt;p&gt;If you want to keep up with the latest updates on this series and the many other things I work on then &lt;a href="https://twitter.com/debugagent"&gt;follow me on twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>java</category>
      <category>opensource</category>
      <category>performance</category>
    </item>
    <item>
      <title>5 Common HTML Mistakes you should avoid.</title>
      <author>Visualway</author>
      <pubDate>Tue, 28 Dec 2021 10:44:57 +0000</pubDate>
      <link>https://dev.to/visualway/5-common-html-mistakes-you-should-avoid-205m</link>
      <guid>https://dev.to/visualway/5-common-html-mistakes-you-should-avoid-205m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-semantic-header-and-footer"&gt;
  &lt;/a&gt;
  1. Semantic Header and Footer
&lt;/h2&gt;

&lt;p&gt;Divs have no semantic structure. Instead of using divs to create headers or footer structures, use "header" and "footer" elements.&lt;/p&gt;

&lt;p&gt;Don't do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-use-figure-element"&gt;
  &lt;/a&gt;
  2. Use Figure Element
&lt;/h2&gt;

&lt;p&gt;If you need to add a caption to your image, use the "figure" element combined with the "figcaption" element.&lt;/p&gt;

&lt;p&gt;Don't do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image url"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"image description"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; Lorem Ipsum Description &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image url"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"image description"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; Lorem Ipsum Description &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-dont-use-bold-or-italic-tags"&gt;
  &lt;/a&gt;
  3. Don't use bold or italic tags
&lt;/h2&gt;

&lt;p&gt;The "b" and "i" tags are used for bringing attention to and for idiomatic text respectively, and have no semantic meaning. But browsers still give them the bold and italics stylings for historical purposes. Change the font-weight/font-style in the CSS or use the "strong" or "em" element.&lt;/p&gt;

&lt;p&gt;Don't do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;Bold&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;i&amp;gt;&lt;/span&gt;Italics&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Bold&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;Italics&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-using-descriptive-links"&gt;
  &lt;/a&gt;
  4. Using descriptive links
&lt;/h2&gt;

&lt;p&gt;A link’s text should be explicit and convey where is redirecting the user to, both users and search engines can more easily understand your content and how it relates to other pages.&lt;/p&gt;

&lt;p&gt;Don't do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Check our pricing...
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;Check our &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; pricing &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-using-inline-styles"&gt;
  &lt;/a&gt;
  5. Using inline styles
&lt;/h2&gt;

&lt;p&gt;Writing inline styles violates the principle of having the structure (HTML) separate from the presentation (CSS). Instead write the styles in a stylesheet.&lt;/p&gt;

&lt;p&gt;Don't do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 24"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 Header
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading
&lt;/h3&gt;

&lt;p&gt;If you liked this post, subscribe to our newsletter to never miss out on our blogs, product launches and tech news.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tinyletter.com/visualway"&gt;Subsribe to Visualway's newsletter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>Basics of Typescript</title>
      <author>Shreyas Pahune</author>
      <pubDate>Tue, 28 Dec 2021 10:28:13 +0000</pubDate>
      <link>https://dev.to/shreyazz/basics-of-typescript-1in1</link>
      <guid>https://dev.to/shreyazz/basics-of-typescript-1in1</guid>
      <description>&lt;p&gt;Hey developers in today's blog we are going to learn about the basics of typescript.&lt;/p&gt;

&lt;p&gt;This is going a be a series of blogs in which I'm gonna help you learn TypeScript in an easy way! &lt;/p&gt;

&lt;p&gt;We are going to cover&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is TypeScript?&lt;/li&gt;
&lt;li&gt;Why should we use it instead of JavaScript?&lt;/li&gt;
&lt;li&gt;Pros and Cons of TypeScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-typescript"&gt;
  &lt;/a&gt;
  What is TypeScript?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TypeScript is the superset of JavaScript. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript can be used to built enterprise level applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TypeScript provides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Static Typing&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Interfaces&lt;/li&gt;
&lt;li&gt;Unions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and a ton of amazing things...&lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-should-you-use-ts-instead-of-js"&gt;
  &lt;/a&gt;
  Why should you use TS instead of JS?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TS will save you from more exceptions and project failures.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If we have a function which will add two numbers
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addNums&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addNums&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="c1"&gt;// here the output would be 1010&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As shown in the above example... this code is valid and it will run perfectly but it does not give the expected output. &lt;/p&gt;

&lt;p&gt;These sort of silly failures are prevented by typescript.&lt;/p&gt;

&lt;p&gt;The code in TS would be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addNums&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addNums&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// output: 20&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addNums&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// output: this would give an error (argument of type string isn't assignable to string)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If there is a large code-base and there are lots and lots of variables... so it is natural to not remember many of them. TS has a great integration with the IDE and together they make our coding experience a lot more smooth. There are many benefits like :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Hover Support&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJpZaPy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cum7oklc9ucjhg8z34wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJpZaPy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cum7oklc9ucjhg8z34wl.png" alt="hoverIMG" width="449" height="241"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code auto completion&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;With static typed languages the auto complete is better and faster. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Type checking in real time&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In JS we can access the property of an object which does not exists and it will just return &lt;code&gt;undefined&lt;/code&gt; but in TS it will show an error that the property you are trying to access is not present. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Easier Code Factoring&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#advantagespros-of-typescript"&gt;
  &lt;/a&gt;
  Advantages/Pros of TypeScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Steep learning curve&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You don't have to learn a whole new language as all those features which you are used to  in JS are primarily used in TS also.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Spotting bugs is relatively easy&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;According to a research 15% of bugs are found at the compile stage&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Readability&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The code becomes more self expressive due to the types.&lt;/li&gt;
&lt;li&gt;The code speaks for itself which helps a lot when working with big teams.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Follows OOP paradigm&lt;/strong&gt; 

&lt;ul&gt;
&lt;li&gt;The concepts of OOPs like classes, inheritance and interfaces can be used in TS.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Huge Community&lt;/strong&gt; 

&lt;ul&gt;
&lt;li&gt;As per reports TS was the second most loved language of 2021.&lt;/li&gt;
&lt;li&gt;There are lots of developers and a great community out there which works on TS and it is also maintained by Microsoft.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantagecons-of-typescript"&gt;
  &lt;/a&gt;
  Disadvantage/Cons of TypeScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;TS has to be compiled as the browsers don't understand it.&lt;/li&gt;
&lt;li&gt;Long TS codes might take some time to compile.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was just the basics of typescript and in the next blog I'm gonna explain how to code in typescript (Basic data types, Arrays, Tuples, Union, Interfaces, Types and many more fun stuff!!)&lt;/p&gt;

&lt;p&gt;Thank you so much for reading the whole blog and please share your feedback in the comment section. &lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What about a blockchain?</title>
      <author>iotcloudarchitect</author>
      <pubDate>Tue, 28 Dec 2021 10:17:10 +0000</pubDate>
      <link>https://dev.to/iotcloudarchitect/what-about-a-blockchain-3pci</link>
      <guid>https://dev.to/iotcloudarchitect/what-about-a-blockchain-3pci</guid>
      <description>&lt;p&gt;The basic idea of a blockchain is to store information immutably, transparently, and traceable inside a duplicated and distributed ledger. The ledger consists of blocks, and every block is cryptographically connected to the previous block. Each block contains transactions that the participants of the blockchain beforehand validated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v8_7-jD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wanqx5srgtl6v496zcgy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v8_7-jD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wanqx5srgtl6v496zcgy.png" alt="Blockchain Concept" width="847" height="543"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article gives a high-level overview of the concept of a blockchain used for transactional systems but not a detailed step-by-step instruction about implementing the technology. &lt;br&gt;
Furthermore, it shall help you decide whether your system or idea could use a blockchain approach.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#centralized-transaction-processing"&gt;
  &lt;/a&gt;
  Centralized Transaction Processing
&lt;/h2&gt;

&lt;p&gt;In centralized transaction-based solutions, at least one central instance acts as a gate for decisions or manages essential parts of a process. Everyone interacting with it has to trust these middlemen.&lt;/p&gt;

&lt;p&gt;Let's take an example.&lt;/p&gt;

&lt;p&gt;You want to give $100 to Peter. To cash transfer the money from your bank account to the bank account of Peter, you have to utilize financial institutions, e.g., banks, to process the transferal. In this case, your bank and Peter's bank are middlemen, which means they are central instances of the process. Also, between both banks, there is another middleman, the clearinghouse, which establishes the trust between both banks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m0F0T45t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjgtlclewkiesvp4m5td.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m0F0T45t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjgtlclewkiesvp4m5td.png" alt="Traditional Bank Transaction Process" width="880" height="572"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following, the steps of the process depicted above:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You will instruct your bank (B1) to send $100 to Peter's bank account.&lt;/li&gt;
&lt;li&gt;B1 will first check whether you have at least $100 you can send.&lt;/li&gt;
&lt;li&gt;Next, B1 will tell the clearinghouse (C) to transfer $100 to Peter's bank account.&lt;/li&gt;
&lt;li&gt;C will take the $100 from B1, contact Peter's bank (B2), and move the money.&lt;/li&gt;
&lt;li&gt;(B2) will put the $100 into Peter's bank account.&lt;/li&gt;
&lt;li&gt;Peter finally got the $100.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The process perfectly shows that the banks are middlemen to you and Peter. And between the banks, the clearinghouse is the middlemen. &lt;br&gt;
A lot of intermediaries, right?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#blockchainbased-transaction-processing"&gt;
  &lt;/a&gt;
  Blockchain-based Transaction Processing
&lt;/h2&gt;

&lt;p&gt;Let's see how the same process would work on the blockchain cryptocurrency Bitcoin:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n9VNgDZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kef5cwe09keb22btxtkn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n9VNgDZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kef5cwe09keb22btxtkn.png" alt="Blockchain Transaction Process" width="880" height="714"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following, the steps of the process depicted above:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First of all, all participating nodes must have the latest version of the ledger containing all blocks each containing transactions.&lt;/li&gt;
&lt;li&gt;You will now send one bitcoin to Peter utilizing a (transaction) node (A).&lt;/li&gt;
&lt;li&gt;A will verify whether you have one bitcoin that you can send and if everything is okay, it will bundle the transaction into a block.&lt;/li&gt;
&lt;li&gt;The miners (B, C) validate the transaction using algorithms (mining process).&lt;/li&gt;
&lt;li&gt;After all miners agree, the block will be put into the blockchain on the ledger and every node gets an update.  Peter received one bitcoin from you.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see in this process, no single entity is responsible; all nodes together validate and decide about the transaction based on cryptographic security and clearly defined methods.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#trust-is-key"&gt;
  &lt;/a&gt;
  Trust is key
&lt;/h2&gt;

&lt;p&gt;A blockchain can substitute existing systems, but it has to, first of all, create trust. The participants need to trust the implementation of blockchain technology like they did it with the middleman concept.&lt;/p&gt;

&lt;p&gt;Here is how blockchain creates trust:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m0kIKIjh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic9wey91kzx7oqqdxdzf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m0kIKIjh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic9wey91kzx7oqqdxdzf.png" alt="Blockchain Trust" width="880" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next chapter describes the benefits mentioned above.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#benefits-of-a-blockchain-approach"&gt;
  &lt;/a&gt;
  Benefits of a blockchain approach
&lt;/h2&gt;

&lt;p&gt;Following, the most obvious benefits:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#redundancy"&gt;
  &lt;/a&gt;
  Redundancy
&lt;/h3&gt;

&lt;p&gt;The ledger is duplicated and distributed to every participant. Also, each update will be synchronized to every copy of the ledger. Therefore, no one can delete the ledger.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cryptography"&gt;
  &lt;/a&gt;
  Cryptography
&lt;/h3&gt;

&lt;p&gt;A blockchain network self-organizes itself. It uses consensus algorithms and cryptography to secure transactions between multiple partners without the need for a trusted middleman in between.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#immutability"&gt;
  &lt;/a&gt;
  Immutability
&lt;/h3&gt;

&lt;p&gt;A blockchain records the blocks and their bundled transactions immutable by design. Once a block is attached to the ledger, it is cryptographically connected to the previous block. The nodes will immediately detect changes of blocks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#traceability"&gt;
  &lt;/a&gt;
  Traceability
&lt;/h3&gt;

&lt;p&gt;Everyone with a copy of the ledger can verify which transaction happened at which time. The entire history of actions is recorded, not just a snapshot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transparency"&gt;
  &lt;/a&gt;
  Transparency
&lt;/h3&gt;

&lt;p&gt;Every transaction is processed the same defined way and is documented and validated by the nodes. Inside the ledger, all blocks are recorded and therefore visible to everyone.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#do-you-need-a-blockchain"&gt;
  &lt;/a&gt;
  Do you need a blockchain?
&lt;/h2&gt;

&lt;p&gt;The following diagram shall help you to figure out whether your idea or system could be driven by a blockchain approach:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d14e2iiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r24mntds5f41aqfytkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d14e2iiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r24mntds5f41aqfytkr.png" alt="Do you need a blockchain" width="880" height="1084"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#reallive-examples-for-blockchain-solutions"&gt;
  &lt;/a&gt;
  Real-live examples for blockchain solutions
&lt;/h2&gt;

&lt;p&gt;The following diagram shows potential real-life solutions derived from the benefits a blockchain approach offers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3A3ZDX_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwrf7z3715138qql6maf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3A3ZDX_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwrf7z3715138qql6maf.png" alt="Real-life blockchain examples" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For sure, the examples mentioned above are not collectively exhaustive. There are a lot more. But a reasonable solution should always take care of at least 2 or 3 of the benefits a blockchain approach offers. Otherwise, you do not need fully-fledged blockchain technology.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The worst thing you could do is create a blockchain system without a specific problem you are trying to solve, just because it is en vogue to have a solution in your product store. It is not just how you store data; it is about creating an ecosystem that self-organizes itself in a highly secure way. As always: think problem first, then solutions.&lt;/p&gt;

&lt;p&gt;Photos on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>introduction</category>
      <category>concept</category>
      <category>process</category>
    </item>
    <item>
      <title>Python code formatter Black</title>
      <author>Sahdev Garg</author>
      <pubDate>Tue, 28 Dec 2021 10:15:47 +0000</pubDate>
      <link>https://dev.to/djangochain/python-code-formatter-black-mk9</link>
      <guid>https://dev.to/djangochain/python-code-formatter-black-mk9</guid>
      <description>&lt;p&gt;Writing well-formatted code is very important, breaking the actual programs in easy to understand small programs as compared to having a more complex program helps in better understanding of code and helps in maintaining code quality. In python we have an automated package Black which helps in ensures code quality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_owz6IQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30l0btuhf4d8930qzgal.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_owz6IQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30l0btuhf4d8930qzgal.jpeg" alt="Image black" width="780" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Black?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Black is known as the uncompromised Python code formatter. Unlike flake8 or pycodestyle rather then telling where the issue is and ask you to manually fix it Black not only report format errors but also fixes them. Black does not have a lot of options to tinker with and has a lot of opinion on how your code should look and feel. &lt;br&gt;
Black isn't for everyone and you may find something that is a dealbreaker for you personally, which is okay! The current Black code style is described here.&lt;br&gt;
Black can be easily integrated with many editors such as Vim, Emacs, VSCode, Atom or a version control system like GIT.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Black requires Python 3.6.2+ to run but has a capability to format Python 2 code too. &lt;br&gt;
For Python 3.6.2+ using pip.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install black&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Python 2 support needs the typed_ast dependency, which will be installed with pip install black[python2]. If you want to format Jupyter Notebooks, install pip install black[jupyter].&lt;br&gt;
If you can't wait for the latest hotness and want to install from GitHub, use:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install git+git://github.com/psf/black&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage of Black&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In simplest if we just want to format a file or a folder of files simple run the following command in terminal.&lt;br&gt;
&lt;code&gt;$ black {source_file_or_directory}...&lt;/code&gt;&lt;br&gt;
You can run Black as a package if running it as a script doesn't work:&lt;br&gt;
&lt;code&gt;$ python -m black {source_file_or_directory}...&lt;/code&gt;&lt;br&gt;
You can also pass code as a string using the -c / --code option.&lt;br&gt;
&lt;code&gt;$ black --code "print ( 'hello, black world' )"&lt;br&gt;
print("hello, black world")&lt;/code&gt;&lt;br&gt;
you can pass -v / --verbose that will cause Black to also emit messages about files that were not changed or were ignored due to exclusion patterns.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$  black -v spell_checker/ &lt;br&gt;
spell_checker/&lt;strong&gt;pycache&lt;/strong&gt; ignored: matches the .gitignore file content&lt;br&gt;
spell_checker/&lt;strong&gt;init&lt;/strong&gt;.py wasn't modified on disk since last run.&lt;br&gt;
spell_checker/spell_checker_util.py wasn't modified on disk since last run.&lt;br&gt;
spell_checker/spelling_checker.py wasn't modified on disk since last run.&lt;br&gt;
All done! ✨ 🍰 ✨&lt;br&gt;
3 files left unchanged.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Black Magic in action&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's create an unformatted file name "black_test.py" and we want to format it using black. Below is the code snippet from the file before formatting.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;def find_no_in_list(&lt;br&gt;
         s,&lt;br&gt;
            no&lt;br&gt;
         ):&lt;br&gt;
   s = list(s&lt;br&gt;
            )&lt;br&gt;
   for i in range(len(s) - 1):&lt;br&gt;
      if s[i] == no:&lt;br&gt;
         return i&lt;br&gt;
   else:&lt;br&gt;
      return -1&lt;br&gt;
if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;br&gt;
   print(&lt;br&gt;
      find_no_in_list([1,&lt;br&gt;
                         2,&lt;br&gt;
                         3,&lt;br&gt;
                         4],&lt;br&gt;
                        3)&lt;br&gt;
      )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After running the following command in terminal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$  black black_test.py&lt;br&gt;
Output file:&lt;br&gt;
def find_no_in_list(s, no):&lt;br&gt;
    s = list(s)&lt;br&gt;
    for i in range(len(s) - 1):&lt;br&gt;
        if s[i] == no:&lt;br&gt;
            return i&lt;br&gt;
    else:&lt;br&gt;
        return -1&lt;br&gt;
if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;br&gt;
    print(find_no_in_list([1, 2, 3, 4], 3))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's always a good practise to write a well formatted code so that it will easier to understand and manage in future so Black is must to have in your IDE when working with python so that you have a well formatted code everytime automatically.&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>flask</category>
    </item>
    <item>
      <title>Mutate a code with Angular schematics like a boss</title>
      <author>Igor Katsuba</author>
      <pubDate>Tue, 28 Dec 2021 09:59:04 +0000</pubDate>
      <link>https://dev.to/ikatsuba/mutate-a-code-with-angular-schematics-like-a-boss-5f4c</link>
      <guid>https://dev.to/ikatsuba/mutate-a-code-with-angular-schematics-like-a-boss-5f4c</guid>
      <description>&lt;p&gt;For fulfilling using Angular CLI, developers have to know about Angular schematics. &lt;code&gt;ng add&lt;/code&gt;, &lt;code&gt;ng update&lt;/code&gt; and &lt;code&gt;ng generate&lt;/code&gt; use schematics to add, update and configure libraries and generate code for applications. In runtime, you get access to a virtual file system and can mutate source code as you need. "But for code mutation, I have to work with AST. It is so hard." — say you. And you are right!&lt;/p&gt;

&lt;p&gt;This article tells you how we are trying to do work with schematics easily and how to work with AST outside schematics in any project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-schematic"&gt;
  &lt;/a&gt;
  What is a schematic?
&lt;/h2&gt;

&lt;p&gt;Technically, the schematic is a function with two arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Schematic configuration&lt;/li&gt;
&lt;li&gt;Context. Used it for logging. Contains some utils.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The schematic function returns type &lt;code&gt;Rule&lt;/code&gt;. Let's look at this type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SchematicContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Tree&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Tree&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Rule&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Rule&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Rule&lt;/code&gt; can be synchronous or asynchronous. Like a bonus, &lt;code&gt;Rule&lt;/code&gt; can return &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The last unknown type here is &lt;code&gt;Tree&lt;/code&gt;. &lt;code&gt;Tree&lt;/code&gt; is an abstraction for working with the virtual file system. Any changes in the virtual file system apply to the real file system.&lt;/p&gt;

&lt;p&gt;Each Angular CLI command working with schematics has its configuration, but in the end, it is just calling the above function.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-do-we-use-schematics"&gt;
  &lt;/a&gt;
  Why do we use schematics?
&lt;/h2&gt;

&lt;p&gt;We use schematics a lot, and we have reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Migrations. We use migrations when releasing libraries with breaking changes. Migrations help developers make updates softer. Angular CLI uses migrations with the &lt;code&gt;ng update&lt;/code&gt; command. We even &lt;a href="https://github.com/renovatebot/renovate/pull/7632"&gt;contributed to RenovateBot&lt;/a&gt; to run migrations automatically when the dependencies are updated.&lt;/li&gt;
&lt;li&gt;Library configuration when added to a project. Schematics allow preparation immediately for the project for using the library (add imports to the module, inject default configs, change build process, etc.).&lt;/li&gt;
&lt;li&gt;Code generation (easy and quick creation of component, directive, library, service, etc.). For example, schematics can create a lazy route with all the needed configurations.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I can write a large list of cases for each item, but let's leave it to your imagination.&lt;/p&gt;

&lt;p&gt;As a result, we can say that writing schematics is a good time saver for users, but...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#we-have-a-problem"&gt;
  &lt;/a&gt;
  We have a problem
&lt;/h2&gt;

&lt;p&gt;We had a simple task to add the module import to &lt;code&gt;AppModule&lt;/code&gt;. After development, we realized that we had spent much more time than expected.&lt;/p&gt;

&lt;p&gt;What was the problem? We decided to use AST for code mutation. But AST is not a simple thing for developers who are just working with Angular services and components.&lt;/p&gt;

&lt;p&gt;For example, the Angular team uses the typescript API for migrations. How often do you face using typescript programmatically? How often do you operate the nodes from the TS compiler to add a couple of properties to the object?&lt;/p&gt;

&lt;p&gt;Below is a simple example of a function that adds data to the module metadata (&lt;a href="https://github.com/angular/components/blob/f4a54d64cc6bbb8557e72fc5f2ec7e9a88714ce2/src/cdk/schematics/utils/vendored-ast-utils/index.ts#L336"&gt;original code&lt;/a&gt;). CAUTION: the code is given as an example. I do not advise you to strain yourself and understand what is happening in it!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addSymbolToNgModuleMetadata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SourceFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ngModulePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;metadataField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;symbolName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;importPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Change&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getDecoratorMetadata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NgModule&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  &lt;span class="c1"&gt;// tslint:disable-line:no-any&lt;/span&gt;

  &lt;span class="c1"&gt;// Find the decorator declaration.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Get all the children property assignment of object literals.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matchingProperties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getMetadataField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectLiteralExpression&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;metadataField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Get the last node of the array literal.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;matchingProperties&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matchingProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// We haven't found the field in the metadata declaration. Insert a new field.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectLiteralExpression&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toInsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;toInsert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;metadataField&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: [&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;symbolName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]\\n`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="c1"&gt;// Get the indentation of the last element, if any.&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sr"&gt;r&lt;/span&gt;&lt;span class="se"&gt;?\\&lt;/span&gt;&lt;span class="sr"&gt;n&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sr"&gt;s*/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;toInsert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}${&lt;/span&gt;&lt;span class="nx"&gt;metadataField&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: [&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;symbolName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;toInsert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;metadataField&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: [&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;symbolName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;importPath&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;InsertChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ngModulePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toInsert&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;insertImport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ngModulePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;symbolName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sr"&gt;..*$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;importPath&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;InsertChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ngModulePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toInsert&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;assignment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matchingProperties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PropertyAssignment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// If it's not an array, nothing we can do really.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;assignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SyntaxKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ArrayLiteralExpression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrLiteral&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;assignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializer&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ArrayLiteralExpression&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrLiteral&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Forward the property.&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrLiteral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrLiteral&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// tslint:disable-next-line: no-console&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No app module found. Please add your new class to your component.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodeArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;symbolsArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nodeArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getText&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;symbolsArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;symbolName&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toInsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SyntaxKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectLiteralExpression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// We haven't found the field in the metadata declaration. Insert a new&lt;/span&gt;
    &lt;span class="c1"&gt;// field.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectLiteralExpression&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;toInsert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;symbolName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\\n`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Get the indentation of the last element, if any.&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sr"&gt;r&lt;/span&gt;&lt;span class="se"&gt;?\\&lt;/span&gt;&lt;span class="sr"&gt;r&lt;/span&gt;&lt;span class="se"&gt;?\\&lt;/span&gt;&lt;span class="sr"&gt;n/&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;toInsert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sr"&gt;r&lt;/span&gt;&lt;span class="se"&gt;?\\&lt;/span&gt;&lt;span class="sr"&gt;n&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sr"&gt;s*/&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}${&lt;/span&gt;&lt;span class="nx"&gt;symbolName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;toInsert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;symbolName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SyntaxKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ArrayLiteralExpression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// We found the field but it's empty. Insert it just before the `]`.&lt;/span&gt;
    &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;toInsert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;symbolName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Get the indentation of the last element, if any.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sr"&gt;r&lt;/span&gt;&lt;span class="se"&gt;?\\&lt;/span&gt;&lt;span class="sr"&gt;n/&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;toInsert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sr"&gt;r&lt;/span&gt;&lt;span class="se"&gt;?\\&lt;/span&gt;&lt;span class="sr"&gt;n&lt;/span&gt;&lt;span class="se"&gt;(\\&lt;/span&gt;&lt;span class="sr"&gt;r&lt;/span&gt;&lt;span class="se"&gt;?)\\&lt;/span&gt;&lt;span class="sr"&gt;s*/&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}${&lt;/span&gt;&lt;span class="nx"&gt;symbolName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;toInsert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;symbolName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;importPath&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;InsertChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ngModulePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toInsert&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;insertImport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ngModulePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;symbolName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sr"&gt;..*$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;importPath&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;InsertChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ngModulePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toInsert&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Looks difficult.&lt;/p&gt;

&lt;p&gt;Complexity is the main reason for creating a high-level library that allows you to mutate your code easier!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-ngmorph-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;ng-morph&lt;/code&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;It has &lt;a href="https://ts-morph.com/"&gt;ts-morph&lt;/a&gt; under the hood and allows you to manipulate with safe TypeScript AST.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;ng-morph&lt;/code&gt; is a set of utilities that will allow you to write schematics much easier and faster. Let's look at a few examples of using it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example-1"&gt;
  &lt;/a&gt;
  Example #1
&lt;/h2&gt;

&lt;p&gt;Add import of the SomeModule module to the root module of the application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Solution.&lt;/strong&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SchematicContext&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setActiveProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getMainModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/main.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;addImportToNgModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SomeModule&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;addImports&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFilePath&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;moduleSpecifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@some/package&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;namedExports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SomeModule&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;

  &lt;span class="nx"&gt;saveActiveProject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's look at the solution line by line:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the &lt;code&gt;ng-morph&lt;/code&gt; project and set it active. It is important because all of the functions work in the context of the active project. Project is a class with access to a file system, the TS compiler, etc.&lt;/li&gt;
&lt;li&gt;Find the main application module by entry point. &lt;/li&gt;
&lt;li&gt;Add a new import to the main module.&lt;/li&gt;
&lt;li&gt;Add a new import to the file of the main module.&lt;/li&gt;
&lt;li&gt;Save the project.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now compare this solution with the function above from the Angular sources. If you use &lt;code&gt;ng-morph&lt;/code&gt;, you probably won't have to write something like this.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example-2"&gt;
  &lt;/a&gt;
  Example #2
&lt;/h2&gt;

&lt;p&gt;We should rewrite enum names to uppercase.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;Common questions: "Why should we use schematics for this? The schematics are too complex to rename enums".&lt;/p&gt;

&lt;p&gt;You are right. But let’s look at &lt;code&gt;ng-morph&lt;/code&gt; power!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;setActiveProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NgMorphTree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;enums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getEnums&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/**/*.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;editEnums&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;enums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Create a project. There is an important moment. The script is not wrapped by schematic function, and &lt;code&gt;Tree&lt;/code&gt; is created manually with &lt;code&gt;NgMorphTree&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Find all enums.&lt;/li&gt;
&lt;li&gt;Rename all enums.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This example shows us that &lt;code&gt;ng-morph&lt;/code&gt; can work outside of schematics! And yes, we use &lt;code&gt;ng-morph&lt;/code&gt; in non-Angular projects!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-else-can-raw-ngmorph-endraw-do"&gt;
  &lt;/a&gt;
  What else can &lt;code&gt;ng-morph&lt;/code&gt; do?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;createImports&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/src/some.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;namedImports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CoreModule&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;moduleSpecifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@org/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isTypeOnly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Find
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getImports&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/**/*.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;moduleSpecifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@org/*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Edit
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;editImports&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;moduleSpecifier&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;moduleSpecifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;moduleSpecifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@org&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@new-org&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Remove
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;removeImports&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Almost every entity in TS has its own set of functions (&lt;code&gt;get*&lt;/code&gt;, &lt;code&gt;edit*&lt;/code&gt;, &lt;code&gt;add*&lt;/code&gt;, &lt;code&gt;remove*&lt;/code&gt;). For example &lt;code&gt;getClass&lt;/code&gt;, &lt;code&gt;removeConstrucor&lt;/code&gt;, &lt;code&gt;addDecorator&lt;/code&gt;. We started to develop utility functions for working with Angular-specific cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;getBootstrapFn&lt;/code&gt; is a function that returns &lt;code&gt;CallExpression&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getMainModule&lt;/code&gt; is a function that returns the main module declaration.&lt;/li&gt;
&lt;li&gt;Many utility functions for changing the metadata of Angular entities: &lt;code&gt;addDeclarationToNgModule&lt;/code&gt;, &lt;code&gt;addProviderToDirective&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;ng-morph&lt;/code&gt; can work with &lt;code&gt;json&lt;/code&gt;. For example, you can add dependencies in &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;addPackageJsonDependency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@package/name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~2.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NodeDependencyType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Dev&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you need lower-level work, you can always work with the &lt;code&gt;ts-morph API&lt;/code&gt; and fall even lower into the typescript API.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;There is no roadmap at this time. We quickly implemented what we were missing and decided to show it to the community. We want to develop the instrument further.&lt;/p&gt;

&lt;p&gt;Nevertheless, there is still a list of essential features:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;High-level work with templates&lt;/li&gt;
&lt;li&gt;High-level work with styles&lt;/li&gt;
&lt;li&gt;Increasing tooling for working with Angular entities&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And we'll be glad if the Angular community can help us do this!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;p&gt;Code repository&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Tinkoff"&gt;
        Tinkoff
      &lt;/a&gt; / &lt;a href="https://github.com/Tinkoff/ng-morph"&gt;
        ng-morph
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Code mutations in schematics were never easier than now.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://tinkoff.github.io/ng-morph/getting-started"&gt;Documentation and examples&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#already-using-raw-ngmorph-endraw-"&gt;
  &lt;/a&gt;
  Already using &lt;code&gt;ng-morph&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Our friendliest and best component library for Angular known to me&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Tinkoff"&gt;
        Tinkoff
      &lt;/a&gt; / &lt;a href="https://github.com/Tinkoff/taiga-ui"&gt;
        taiga-ui
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Angular UI Kit and components library for awesome people
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>angular</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>User Experience Web Design Firms</title>
      <author>Tkxel Software</author>
      <pubDate>Tue, 28 Dec 2021 09:50:43 +0000</pubDate>
      <link>https://dev.to/tkxelsoftware/user-experience-web-design-firms-1k8e</link>
      <guid>https://dev.to/tkxelsoftware/user-experience-web-design-firms-1k8e</guid>
      <description>&lt;p&gt;When it comes to a great career opportunity, user experience design companies are in high demand. Whether you need help developing software or creating engaging content, there is a user experience design agency to meet your needs. Here are a few of these firms. The advantages of using these companies: All-in-one services and high-quality work. A/B testing helps you measure your success, and a dedicated team is available to guide you through the process.&lt;/p&gt;

&lt;p&gt;Choosing a &lt;a href="https://reloadux.com"&gt;user experience design company&lt;/a&gt; is essential if you are looking to increase the success of your product. The right agency can help you improve your ROI and improve your overall customer service. By taking the time to learn about the process, you will get a better understanding of what the best design agency offers and how they do it. In addition, the right company can handle maintenance and research for you. The top agencies are transparent and offer a wide range of services.&lt;/p&gt;

&lt;p&gt;UI design companies can be very effective at analyzing a company's business goals and customer needs. They can create a great mobile app or portal that will enhance the company's sales and brand image. These agencies are also very effective at developing user-centric websites. They understand how to make a website that is functional, enjoyable, and efficient. They also understand how to get the best out of the customers' interactions with your products.&lt;/p&gt;

&lt;p&gt;While many companies offer a wide range of services, their focus is mainly on marketing and innovation. While some are focused on development and implementation, others are focused on marketing and advertising. All of them focus on the needs of their clients. In addition, they work with Fortune 5s and startups to make their products appealing to the most discerning consumers. They can provide a comprehensive package of UI/UX services. The best user experience design companies also understand the value of collaboration and the importance of quality.&lt;/p&gt;

&lt;p&gt;A great user experience design company will work with you to ensure that the website works well. In addition, they can take care of the technical part of the website. They use tools such as MockFlow and Adobe XD. These tools are very important to ensure the site is functional and usable. Ultimately, a good user experience design firm will be able to create a competitive advantage by creating a great website. Most users will spend their time on a website that functions optimally.&lt;/p&gt;

&lt;p&gt;A good user experience design company should be able to demonstrate how the website functions with the users. They should be able to show how it makes the user feel when they visit it. The best user experience design companies will have an extensive knowledge of the basics of usability and design. This will help the client to make a good choice. The best user experience design companies will also be able to explain the importance of interaction with the website.&lt;/p&gt;

&lt;p&gt;A good user experience design company should have a strong strategy. They should be able to provide their clients with the necessary information and a unique approach to every project. A great UX design firm should be able to communicate effectively with the client and should be able to communicate with the other company. This should be a priority. In addition, the best user experience design firms should be able to offer a high level of communication.&lt;/p&gt;

&lt;p&gt;A successful user experience design firm should also offer a variety of services. They must have the ability to provide their clients with unique solutions. In addition to offering excellent services, user experience design companies should be able to offer their clients with a wide range of expertise. For example, a well-designed website should be easy to navigate. In addition, a good website should be easy to use. A good design firm should be able to provide the most relevant information to its customers.&lt;/p&gt;

&lt;p&gt;In addition to creating a highly functional website, a successful user experience design company should also understand its target customers. The company should be able to offer the right products and services to their target audience. Moreover, a successful user experience is based on a good design. If a product does not meet these standards, it will not be used. There are also several other factors to consider. One of them is the size of the company.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Back to BASIC</title>
      <author>Simon Foster</author>
      <pubDate>Tue, 28 Dec 2021 09:40:50 +0000</pubDate>
      <link>https://dev.to/funkysi1701/back-to-basic-3c83</link>
      <guid>https://dev.to/funkysi1701/back-to-basic-3c83</guid>
      <description>&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qAQ0M-FQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FHi_NyOXEAo9YbG.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KUJ75q6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1434939943759998976/8SAoXStr_normal.png" alt="Simon Foster profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Simon Foster
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/funkysi1701"&gt;@funkysi1701&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      How exciting my Lynx Computer from my childhood has come home, all 96k of it 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:19 PM - 26 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1475139125154037760" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1475139125154037760" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1475139125154037760" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I can't remember the syntax for BASIC, luckily I have been able to find the &lt;a href="http://elborg.dk/books.html"&gt;Manual&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All the commands are listed inside so lets see what we can do.&lt;/p&gt;

&lt;p&gt;The Lynx presents you with a command prompt in which you can type text. Back in the 80s we had a tape player to load programs from tape, however I don't have one today so only programs I write can be run.&lt;/p&gt;

&lt;p&gt;PRINT - To write Hello World, you can just type PRINT "Hello World" and Hello World appears on the screen. To Write a program that displays Hello World, you just write the line number first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10 PRINT "Hello World"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run this you type RUN&lt;br&gt;
To view the code you type LIST&lt;/p&gt;

&lt;p&gt;To Edit a specific Line you can use Ctrl+E and type the line number, or you can just write the line out again.&lt;/p&gt;

&lt;p&gt;CLS - This command clears the screen&lt;/p&gt;

&lt;p&gt;INPUT N - stores text typed by the user and stores it in the variable N&lt;/p&gt;

&lt;p&gt;GOTO N - Execution of code continues at Line Number N&lt;/p&gt;

&lt;p&gt;The first Program I wrote with a bit of help from my boys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10 CLS
20 PRINT "What is your Age?"
30 INPUT N
40 IF N&amp;gt;5 AND N&amp;lt;41 THEN PRINT "a good age" 
50 ELSE IF N&amp;lt;6 THEN PRINT "a spaceman"
60 ELSE IF N&amp;gt;40 THEN PRINT "too old"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My 4yo didn't like being "too young" in the original version, so my 6yo helped me change him to be a "spaceman".&lt;/p&gt;

&lt;p&gt;Not bad and it was fun pair programming with a 6yo, all my typos were quickly spotted, and he easily understood the logic of IF/ELSE/THEN statements.&lt;/p&gt;

&lt;p&gt;The Lynx comes from 1983 and has just 96k of memory. I am very lucky it actually still works, however I have been able to find an emulator so I can write Lynx BASIC from the comfort of my laptop. &lt;a href="https://jynxemulator.wordpress.com/"&gt;jynxemulator&lt;/a&gt;, it is also on &lt;a href="https://github.com/jonathan-markland/Jynx"&gt;github&lt;/a&gt; but it doesn't include the ROMs so getting from the website is a better option.&lt;/p&gt;

&lt;p&gt;The developer experience today is so much nicer than it must have been in the 1980s, however back then distractions must have been much reduced.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No internet or google to get answers to your questions&lt;/li&gt;
&lt;li&gt;No Copy/Paste of text&lt;/li&gt;
&lt;li&gt;No Load/Save (unless you have a working disk drive or tape player!)&lt;/li&gt;
&lt;li&gt;No IDE&lt;/li&gt;
&lt;li&gt;No Build or Release process just type RUN&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>basic</category>
      <category>history</category>
      <category>programming</category>
    </item>
    <item>
      <title>How-to share geospatial data on the web</title>
      <author>Joana Simoes</author>
      <pubDate>Tue, 28 Dec 2021 09:09:02 +0000</pubDate>
      <link>https://dev.to/doublebyte/how-to-share-geospatial-data-on-the-web-54b7</link>
      <guid>https://dev.to/doublebyte/how-to-share-geospatial-data-on-the-web-54b7</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ahHCCoNZIJE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;On this tutorial we will explore how to share geospatial data on the web, in a simple and efficient way. You can use the provided dataset or use your own dataset, in order to implement the pipeline to make it available with a REST API, using a stack of free and open source software.&lt;br&gt;
We will conclude by exploring the deployed service using a swagger endpoint and postman, but "sky is the limit" in terms of client applications which could consume this dataset.&lt;br&gt;
In order to complete this, you will only need some basic knowledge of docker and docker-compose. The links used in the tutorial are listed bellow. Have fun!🙃&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sawcer.com/"&gt;https://www.sawcer.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://ogcapi.org/dev/features"&gt;https://ogcapi.org/dev/features&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.w3.org/TR/sdw-bp/#spatial-things-features-and-geometry"&gt;https://www.w3.org/TR/sdw-bp/#spatial-things-features-and-geometry&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pygeoapi.io/"&gt;https://pygeoapi.io/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/geopython/pygeoapi"&gt;https://github.com/geopython/pygeoapi&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/emotional-cities/pygeoapi/tree/mongo"&gt;https://github.com/emotional-cities/pygeoapi/tree/mongo&lt;/a&gt;&lt;br&gt;
&lt;a href="https://stedolan.github.io/jq/"&gt;https://stedolan.github.io/jq/&lt;/a&gt;&lt;br&gt;
&lt;a href="http://bboxfinder.com/#0.000000,0.000000,0.000000,0.000000"&gt;http://bboxfinder.com/#0.000000,0.000000,0.000000,0.000000&lt;/a&gt;&lt;br&gt;
&lt;a href="https://features.byteroad.net/"&gt;https://features.byteroad.net/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>docker</category>
      <category>opensource</category>
      <category>geospatial</category>
    </item>
  </channel>
</rss>
