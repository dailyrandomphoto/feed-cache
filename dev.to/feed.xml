<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Adventuring Into PHP #1</title>
      <author>Vinicius Ithalo</author>
      <pubDate>Thu, 09 Dec 2021 21:54:41 +0000</pubDate>
      <link>https://dev.to/vinic/adventuring-into-php-1-19l</link>
      <guid>https://dev.to/vinic/adventuring-into-php-1-19l</guid>
      <description>&lt;p&gt;I'm planning to start a series of posts showing my first impressions as someone inexperienced in programming who had his first impressions in Python. I'll try to post every time I finish studying so that the original feeling is still clear.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-i-decided-to-learn-php"&gt;
  &lt;/a&gt;
  So, I decided to learn PHP
&lt;/h2&gt;

&lt;p&gt;While messing around on Discord, I found a discussion about this language and how it was useful in web development. It wasn't very long and not all that interesting, but they said something that really caught my attention. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6JdvtMIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57tuji5demj0uaknifdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6JdvtMIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57tuji5demj0uaknifdl.png" alt="Screenshot of the discussion" width="472" height="132"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I really like python and my focus is on web development, so why not try it out?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This thought was what made me start looking for online resources, a task that apparently I'm not intelligent enough to do, so I asked on Discord.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-php"&gt;
  &lt;/a&gt;
  What is PHP
&lt;/h2&gt;

&lt;p&gt;PHP is a scripting language specialized in web development and that can be embedded inside HTML and is executed on the server, meaning no shady scripts running on the client computer and more freedom working with sensitive data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-php"&gt;
  &lt;/a&gt;
  Installing PHP
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vUiGGt2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyc0m538htdcjra3789i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUiGGt2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyc0m538htdcjra3789i.png" alt="XAMPP interface" width="661" height="419"&gt;&lt;/a&gt;&lt;br&gt;
PHP can be manually installed by itself, or so I was told, but the easiest way when learning is through those already configured packages, like WAMP, LAMP and XAMPP. People from discord recommended using XAMPP, so I'll be sticking with it for now. Having installed it, everything left is understanding how it works.&lt;/p&gt;

</description>
      <category>php</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How to Set up Neovim for Full Stack Development</title>
      <author>bashbunni</author>
      <pubDate>Thu, 09 Dec 2021 21:49:57 +0000</pubDate>
      <link>https://dev.to/bashbunni/how-to-set-up-neovim-for-full-stack-development-39fn</link>
      <guid>https://dev.to/bashbunni/how-to-set-up-neovim-for-full-stack-development-39fn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#set-up-neovim-for-full-stack-development"&gt;
  &lt;/a&gt;
  Set up Neovim for Full Stack Development
&lt;/h1&gt;

&lt;p&gt;You'll need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coc &lt;/li&gt;
&lt;li&gt;emmet&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#if-youre-new-to-neovim"&gt;
  &lt;/a&gt;
  If you're new to neovim:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/neovim/neovim/releases/tag/v0.6.0"&gt;install neovim&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install vim-plug (or any other plugin manager)&lt;br&gt;
&lt;a href="https://github.com/junegunn/vim-plug"&gt;https://github.com/junegunn/vim-plug&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I recommend checking out my &lt;a href="https://github.com/bashbunni/dotfiles"&gt;dotfiles&lt;/a&gt; which has lots of comments so you can find any extra features that might be helpful for you.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;I will write another post for a more in-depth description of getting started with neovim...&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-coc"&gt;
  &lt;/a&gt;
  Install Coc
&lt;/h2&gt;

&lt;p&gt;To install Coc, you'll want to follow their instructions at the link below. It is &lt;br&gt;
&lt;a href="https://github.com/neoclide/coc.nvim"&gt;https://github.com/neoclide/coc.nvim&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-coc"&gt;
  &lt;/a&gt;
  Configuring Coc
&lt;/h2&gt;

&lt;p&gt;With neovim open, type the following:&lt;br&gt;
&lt;code&gt;:CocConfig coc-html coc-tsserver coc-json coc-emmet  coc-prettier&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Coc tsserver is for javascript, typescript, and JSX support&lt;/p&gt;

&lt;p&gt;You'll want to create a shortcut for &lt;code&gt;:call CocAction('format')&lt;/code&gt;. I have the following shortcut so that I can format my projects with space + f:&lt;br&gt;
&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;f :call CocAction('format')&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-node-and-npm"&gt;
  &lt;/a&gt;
  Install Node and Npm
&lt;/h2&gt;

&lt;p&gt;head over to the &lt;a href="https://nodejs.org/en/download/"&gt;Node.js downloads page&lt;/a&gt; and follow their installation instructions. You can also use your package manager to install Node. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debian-and-ubuntu"&gt;
  &lt;/a&gt;
  Debian and Ubuntu
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;sudo apt install nodejs&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arch-linux"&gt;
  &lt;/a&gt;
  Arch Linux
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;sudo pacman -S nodejs&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-recommendations"&gt;
  &lt;/a&gt;
  Other Recommendations
&lt;/h2&gt;

&lt;p&gt;I highly recommend installing &lt;a href="https://linuxize.com/post/getting-started-with-tmux/"&gt;tmux&lt;/a&gt; so you can run your frontend, backend, neovim, and git cli in the same terminal window which makes it &lt;em&gt;way&lt;/em&gt; easier to keep your workspace clear. Tmux is great because you can name your sessions and easily navigate to the right spot for what you're looking to do. &lt;br&gt;
e.g.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BYqoXqtm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3ylgz2lnmejkgtcp95a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYqoXqtm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3ylgz2lnmejkgtcp95a.png" alt="tmux demo" width="370" height="22"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vim</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Progress: my contribution to the open source project</title>
      <author>MizuhoOkimoto</author>
      <pubDate>Thu, 09 Dec 2021 21:43:09 +0000</pubDate>
      <link>https://dev.to/okimotomizuho/progress-contribute-to-the-open-source-project-120c</link>
      <guid>https://dev.to/okimotomizuho/progress-contribute-to-the-open-source-project-120c</guid>
      <description>&lt;p&gt;I planned how to contribute to an open source project last week and wrote about it in my &lt;a href="https://dev.to/okimotomizuho/planning-how-to-contribute-to-an-open-source-project-48o6"&gt;previous blog&lt;/a&gt;. In the blog, I mentioned I would write a progress blog on Monday, so here I am!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h2&gt;

&lt;p&gt;For the last assignment(we call Release) of my open source course, I've decided to contribute to an open source project which is my college's C language course notes. The &lt;a href="https://github.com/Seneca-ICTOER/IPC144/issues/64"&gt;issue&lt;/a&gt; I'm working on is about "Standardize frontmatter across all pages". When we contributed to the project in our last Release, we added &lt;code&gt;slug&lt;/code&gt; as one of the properties for frontmatter. However, it made links broken since internal links use page names vs. slugs, so my professor told me to review some of the PRs if they included it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#made-a-pr"&gt;
  &lt;/a&gt;
  Made a PR
&lt;/h2&gt;

&lt;p&gt;I've done the following for the standardization of Frontmatter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;sidebar_position&lt;/code&gt;, and &lt;code&gt;description&lt;/code&gt; for all markdown pages&lt;/li&gt;
&lt;li&gt;Each property of frontmatter was unified in order&lt;/li&gt;
&lt;li&gt;Unified format of description&lt;/li&gt;
&lt;li&gt;Shortened &lt;code&gt;description&lt;/code&gt; to maximum 160 characters (Reason: &lt;code&gt;description&lt;/code&gt; becomes the &lt;code&gt;&amp;lt;meta name="description" content="..."/&amp;gt;&lt;/code&gt; inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;tag, and Google generally truncates snippets to ~155-160 characters)&lt;/li&gt;
&lt;li&gt;Added "Standardize frontmatter" to the CONTRIBUTING.md file
PR Link: &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/143"&gt;https://github.com/Seneca-ICTOER/IPC144/pull/143&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-reviews-and-change-requests"&gt;
  &lt;/a&gt;
  Getting reviews and change requests
&lt;/h2&gt;

&lt;p&gt;One of my classmates reviewed my changes, and he asked me to reinsert &lt;code&gt;slug&lt;/code&gt; in the root of the file, and also add a step in the Workflow in Contributing.md. Also, one of the repo's owners requested to change some &lt;code&gt;description&lt;/code&gt;s in the frontmatter. When I worked on Standardizing frontmatter, the description was hard since I'm familiar with the course notes, but I wasn't very good at C language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-step"&gt;
  &lt;/a&gt;
  Next step
&lt;/h2&gt;

&lt;p&gt;The goal for this Release is for my PR to get merged by this Friday. However, I didn't change any codes in this contribution. I still need to make more PRs for my previous Releases. It would be a lot of things to do in my final exams week. I will try my best and put lots of effort into all of these Releases.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>programming</category>
      <category>github</category>
    </item>
    <item>
      <title>How do we integrate responsible AI?</title>
      <author>Mage</author>
      <pubDate>Thu, 09 Dec 2021 21:39:14 +0000</pubDate>
      <link>https://dev.to/mage_ai/how-do-we-integrate-responsible-ai-4eag</link>
      <guid>https://dev.to/mage_ai/how-do-we-integrate-responsible-ai-4eag</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Responsible AI uses AI to empower individuals and put people’s values first. Its ethical deployment is essential to fight against algorithmic bias.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Intro&lt;/li&gt;
&lt;li&gt;What is Responsible AI?&lt;/li&gt;
&lt;li&gt;Steps for Responsible AI&lt;/li&gt;
&lt;li&gt;Responsible AI in practice&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;The rapid development of AI will have a big impact on nearly every aspect of private and professional life. The determination of that impact’s success should be judged by how ethically and responsibly the technology is created. With laws not being able to keep up with the pace that AI is being developed, it falls on companies and developers to make a responsible product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-responsible-ai"&gt;
  &lt;/a&gt;
  What is Responsible AI?
&lt;/h2&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lie53RZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qip68mi6wuemuxko9xn.png" alt="Image description" width="760" height="368"&gt;&lt;em&gt;(Source: FCW)&lt;/em&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;p&gt;&lt;br&gt;
Data has proven itself to be a strong driver in the way companies make decisions. AI and data are being used to move businesses and society forward at rapid rates, with nearly limitless innovation.&lt;/p&gt;

&lt;p&gt;The power of AI is in its ability to be deployed quickly across the world; however, this could also be AI’s greatest threat, as algorithms can spread bias on a massive scale at a rapid pace. This is happening in instances like Goldman Sachs and Apple allegedly using an algorithm which is biased against women when issuing credit limits; or predictive policing companies like PredPol who have been accused of increasing racial bias in law enforcement.&lt;/p&gt;

&lt;p&gt;The legislative process hasn’t been able to keep up with AI’s innovation and as a result, has left companies to choose between higher profits or ethical good. Co-director of &lt;a href="https://shorensteincenter.org/programs/digital-platforms-democracy/"&gt;Digital Platforms and Democracy&lt;/a&gt; at Harvard, &lt;a href="https://cyber.harvard.edu/people/dghosh"&gt;Dipayan Ghosh&lt;/a&gt;, said, “we’re not talking about bad people, but [tech companies] are being presented with the opportunity to make their own rules, and nobody has repealed the laws of human nature.” Companies have developed company-specific standards of ethical practice as congress has yet to pass clear resolutions to regulate technology.&lt;/p&gt;

&lt;p&gt;Tech giants implement their own set of rules for what it means to create AI responsibly. Responsible AI is the practice of using AI to empower individuals and put people’s values first. Microsoft’s ethical values of AI are as follows: fairness, reliability and safety, privacy and security, inclusiveness, transparency, and accountability. Other companies: Apple, Facebook, Twitter, PWC, and many more have developed a similar set of principles to guide their growth and innovation in a responsible way. How well these guidelines are upheld will be up to the companies themselves until proper legal measures are taken to address the growing AI sector.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-for-responsible-ai"&gt;
  &lt;/a&gt;
  Steps for Responsible AI
&lt;/h2&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iT1nZxiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kr05mhyzad8qhlj4e1v3.jpeg" alt="Image description" width="880" height="526"&gt;&lt;em&gt;(Source: wbur)&lt;/em&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;p&gt;&lt;br&gt;
As we touched on in &lt;a href="https://www.mage.ai/blog/why-does-ai-responsibility-matter"&gt;Why does AI responsibility matter?&lt;/a&gt;, algorithmic bias has become a serious problem as a result of AI’s greater implementation. Founder of &lt;a href="https://www.linkedin.com/company/ajlunited/"&gt;The Algorithmic Justice League&lt;/a&gt; and student at the MIT media lab, &lt;a href="https://www.media.mit.edu/people/joyab/overview/"&gt;Joy Buolamwini&lt;/a&gt; was introduced to algorithmic bias when a facial recognition model she created only was able to recognize white faces. When testing other projects that were built on the same generic facial recognition database, the same results occurred. Buolamwini has since made it her mission to increase education and resources to create a more equitable AI space.&lt;/p&gt;

&lt;p&gt;In a &lt;a href="https://www.youtube.com/watch?v=UG_X_7g63rY"&gt;Ted Talk&lt;/a&gt;, Buolamwini details the ways in which she believes a more responsible AI ecosystem can be created:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Who codes matters: A study done by &lt;a href="https://www.zippia.com/software-engineer-jobs/demographics/"&gt;Zippia&lt;/a&gt; found that males made up 67% of software developers. Of that, 57% were white. A lack of diversity in software means that only a few voices and experiences are being heard when developing software that affects millions. More voices within software means that people’s innate blindspots to certain issues are able to be addressed.&lt;/li&gt;
&lt;li&gt;How we code matters: Without any responsible or ethical guidelines, developers have no clear path to develop inclusive AI. In a 2021 &lt;a href="https://appen.com/whitepapers/the-state-of-ai-and-machine-learning-report/?utm_source=Paid&amp;amp;utm_medium=VentureBeat&amp;amp;utm_campaign=2021-Predictions&amp;amp;utm_content=2021-Predictions"&gt;state of AI and Machine Learning report&lt;/a&gt;, only 25% of companies surveyed said unbiased AI is a critical mission. Tech giants are making steps to increase awareness and adoption of responsible AI practices, and in 2016 formed the &lt;a href="https://partnershiponai.org/"&gt;Partnership on AI&lt;/a&gt; to advance AI’s positive outcomes on people and society.&lt;/li&gt;
&lt;li&gt;Why we code matters: AI can be used as a powerful tool for business to make more informed decisions, improve technology, and increase profit. There is also great potential for the ways AI can be used to better society as a whole. According to Buolawini “we’ve used tools of computation creation to unlock immense wealth. We now have the opportunity to unlock even greater equality if we make social change a priority and not an afterthought.”&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#responsible-ai-in-practice"&gt;
  &lt;/a&gt;
  Responsible AI in practice
&lt;/h2&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8uBIEKas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1z83t5rtj3767jvydy7.png" alt="Image description" width="782" height="502"&gt;&lt;/center&gt;

&lt;p&gt;At its current state, responsible AI occurs in varying degrees from company to company. Company guidelines and coalitions, such as the Partnership on AI, are a starting point in increasing AI’s ethical deployment; however, much more work needs to be done in order for responsible AI to be synonymous with general AI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/natasha-crampton-21189717/"&gt;Natasha Crampton&lt;/a&gt;, Microsoft’s Chief Responsible AI Officer, believes that AI’s harm can occur in three ways: quality of service harm, allocation harm, and representational harm. To minimize the chance for any of these harms, Crampton asks her teams to first think about whom the systems are built for, forcing teams to think about what things could go right and wrong in the model’s deployment. Integrating checks at the early stages of development makes for checks to be done when building the model, not when the model is complete.&lt;/p&gt;

&lt;p&gt;Tools to check for a dataset’s inclusivity and how well it represents a population are also deployed in model creation. In a &lt;a href="https://www.brookings.edu/events/what-is-responsible-ai/"&gt;Brookings panel&lt;/a&gt; on responsible AI, Crampton clarifies that “it goes beyond data, sometimes the discussion heavily focuses on data… when we’re building models we make lots of choices… we need to prioritize fairness at every point.” While fairness can often be difficult to contextualize as a metric, thinking about who you are building a model for can fine-tune focus on the greater social impact of a model.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;AI is developing at a rapid rate, and it’s imperative that ethical practices are integrated into new technology. Data and technology aren’t inherent solutions to all problems, and end up creating their own set of issues when left unchecked. Companies must be made aware of AI’s ethical problems to minimize errors and ensure that AI can be used to generate a more equitable world.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Let's Talk Logical Operators</title>
      <author>Katelyn</author>
      <pubDate>Thu, 09 Dec 2021 21:26:31 +0000</pubDate>
      <link>https://dev.to/katelynjewel/lets-talk-logical-operators-1gnd</link>
      <guid>https://dev.to/katelynjewel/lets-talk-logical-operators-1gnd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#were-going-to-go-over-three-of-the-logical-operators-that-javascript-uses"&gt;
  &lt;/a&gt;
  We're going to go over three of the logical operators that Javascript uses:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clDRrAbt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ia76ynvidwmmwgd3557.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clDRrAbt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ia76ynvidwmmwgd3557.png" alt="truthy operator values" width="512" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-a-logical-operator"&gt;
  &lt;/a&gt;
  Why use a logical operator?
&lt;/h3&gt;

&lt;p&gt;The benefit of a logical operator is to connect two (or more!) expressions so that the value of the total (all of the expressions you just connected) is dependent on those expressions. &lt;/p&gt;

&lt;p&gt;These operators are used within code to compare variables and values when creating various logic methods, often using their boolean values. When used within functions it gives more logic options for the code to use and change based on user behavior. This can also help DRY up code in condensing functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-not"&gt;
  &lt;/a&gt;
  ! (NOT)
&lt;/h3&gt;

&lt;p&gt;The NOT &lt;code&gt;!&lt;/code&gt; operator is generally used as a boolean. Logical NOT will have truthy value if the operator it's called on (like &lt;code&gt;!(6 === 3)&lt;/code&gt; is false and vice-versa (like &lt;code&gt;!(6 === 6)&lt;/code&gt; is considered a false value. Here's a different way of wording the NOT operator with the previous examples: Return true if x is not strictly equal to y, otherwise return false. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6CfijKl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7zfe4gt7jnhzc134bnp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6CfijKl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7zfe4gt7jnhzc134bnp.png" alt="Logical Operators" width="290" height="174"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ampamp-and"&gt;
  &lt;/a&gt;
  &amp;amp;&amp;amp; (AND)
&lt;/h3&gt;

&lt;p&gt;The AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator will return true if both sides of the operator or boolean values are true (&lt;code&gt;(x &amp;lt; 10 &amp;amp;&amp;amp; y &amp;gt; 1)&lt;/code&gt; is true) otherwise, it returns false. In other words, when using the AND operator, if both x and y are true, then the logic as a whole is true. If one part of the logic is false, the whole problem returns false. It's also important to not that you can chain on the AND operator more than once. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EFCswGPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn3yv2zl5t3ne63j8yiv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EFCswGPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn3yv2zl5t3ne63j8yiv.png" alt="AND Operator" width="648" height="314"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-or"&gt;
  &lt;/a&gt;
  || (OR)
&lt;/h3&gt;

&lt;p&gt;As with the other operators, the OR &lt;code&gt;||&lt;/code&gt; operator is usually used within a boolean context. A problem using the OR operator will return true if either side of the values are true. If either/both x or y are true, return true. If both are false, return false. It's also important to not that you can chain on the OR operator more than once. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pQY88TK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8th6s63s8fiom947h8ja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pQY88TK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8th6s63s8fiom947h8ja.png" alt="OR Operator" width="678" height="374"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-if-you-mix-operators"&gt;
  &lt;/a&gt;
  What if you mix operators?
&lt;/h3&gt;

&lt;p&gt;Operators can be mixed within one expression. However, logical operators use an order of precedence, called logical operator precedence if that occurs. The order is as follows: logical NOT (&lt;code&gt;!&lt;/code&gt;), logical AND (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;), then logical OR (&lt;code&gt;||&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SkjgcpOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvqvcgup97hhnj0osj12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SkjgcpOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvqvcgup97hhnj0osj12.png" alt="example" width="795" height="253"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;NOT &lt;code&gt;!&lt;/code&gt; - this will negate a boolean value (!is = is not)&lt;/li&gt;
&lt;li&gt;AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; - can be used with two (or more) values and will return true if all values are also true, will return false otherwise&lt;/li&gt;
&lt;li&gt;OR &lt;code&gt;||&lt;/code&gt; - can also be used with two (or more) values and will return if any of the values are true, will return false if all of the values are false&lt;/li&gt;
&lt;li&gt;if you use these operators in the same expression, keep in mind the order in which Javascript will go through them. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Three lessons from my interview with @cassidoo</title>
      <author>Wannabe Entrepreneur 🎙️</author>
      <pubDate>Thu, 09 Dec 2021 21:10:09 +0000</pubDate>
      <link>https://dev.to/wbepodcast/three-lessons-from-my-interview-with-cassidoo-2mhg</link>
      <guid>https://dev.to/wbepodcast/three-lessons-from-my-interview-with-cassidoo-2mhg</guid>
      <description>&lt;p&gt;Hey there, my name is Tiago and I am the host of &lt;a href="https://wanabe-entrepreneur.com"&gt;Wannabe Entrepreneur&lt;/a&gt; (a podcast about what it's like to bootstrap a company).  &lt;/p&gt;

&lt;p&gt;The great thing about having a podcast is that I have an "excuse" to ask &lt;strong&gt;questions to people I admire and want to learn from!&lt;/strong&gt;&lt;br&gt;
So far I got to interview incredible entrepreneurs of all sizes and backgrounds...&lt;/p&gt;

&lt;p&gt;Recently I got to interview Cassidy Williams (&lt;a class="mentioned-user" href="https://dev.to/cassidoo"&gt;@cassidoo&lt;/a&gt;
) and she has more than &lt;strong&gt;170K followers on Twitter!!&lt;/strong&gt; I won't lie, I was quite nervous... But she was super nice and the interview went really well.&lt;/p&gt;

&lt;p&gt;Here are the &lt;strong&gt;top 3 things&lt;/strong&gt; I learned from Cassidy:&lt;/p&gt;

&lt;p&gt;1- &lt;strong&gt;Be humble and genuine&lt;/strong&gt;&lt;br&gt;
It might seem a bit of a cliché lesson but it does not make it less truthful... With such huge followership, most influencers would ignore small podcasters like me... Not Cassidy, she showed up and spoke openly about her experience in all the past companies she worked in. This just confirms that the real "trick" to personal branding and marketing is to truly be passionate about the topic and the community.&lt;/p&gt;

&lt;p&gt;2- &lt;strong&gt;Some companies want access to your social media&lt;/strong&gt;&lt;br&gt;
With less than 500 followers on my Twitter account, this was never an issue personally. But in our chat, Cassidy told the Wannabe Entrepreneurs that she has to pay extra attention to the contracts and make sure that &lt;strong&gt;she keeps all the control over her social media.&lt;/strong&gt; With more than 170K followers I guess that many companies could use it for personal marketing...&lt;/p&gt;

&lt;p&gt;3- &lt;strong&gt;Don't be afraid to experiment&lt;/strong&gt;&lt;br&gt;
There is this tacit rule about the minimum period of time you should stay in a company before being "allowed" to leave without being judged by potential future employers... Well, &lt;strong&gt;that rule is BS!&lt;/strong&gt; Cassity was never afraid to leave a job where she was not happy and that gave her the opportunity to experiment with different types of companies and find which ones she prefers to work at.&lt;/p&gt;

&lt;p&gt;These are just 3 of a lot of lessons I took from my casual chat with Cassidy Williams. Would love to hear your thoughts on the interview. What questions did I miss? &lt;a href="https://wannabe-entrepreneur.com/episodes/172/"&gt;You can listen to the full chat here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>podcast</category>
    </item>
    <item>
      <title>TIL: You can use JQ in Conductor</title>
      <author>orkes</author>
      <pubDate>Thu, 09 Dec 2021 20:59:05 +0000</pubDate>
      <link>https://dev.to/nvn07/til-you-can-use-jq-in-conductor-52b2</link>
      <guid>https://dev.to/nvn07/til-you-can-use-jq-in-conductor-52b2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-conductor"&gt;
  &lt;/a&gt;
  What is Conductor
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/Netflix/conductor"&gt;Conductor&lt;/a&gt; is a Microservices orchestration platform from Netflix, released under Apache 2.0 Open Source License.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jq"&gt;
  &lt;/a&gt;
  What is jq
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;jq&lt;/code&gt; (&lt;a href="https://stedolan.github.io/jq/"&gt;https://stedolan.github.io/jq/&lt;/a&gt;) is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conductor-jq"&gt;
  &lt;/a&gt;
  Conductor + JQ
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/Netflix/conductor"&gt;Conductor&lt;/a&gt; allows you to create tasks that can process JSON payloads in your workflows without writing custom code using jq.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h3&gt;

&lt;p&gt;JSON is a popular format of choice for data-interchange. It is widely used in web and server applications, document storage, API I/O etc. It’s also used within Conductor to define workflow and task definitions and passing data and state between tasks and workflows. This makes a tool like JQ a natural fit for processing task related data. Some common usages within Conductor includes, working with HTTP task, JOIN tasks or standalone tasks that try to transform data from the output of one task to the input of another.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;p&gt;Here is an example of a &lt;em&gt;&lt;code&gt;JSON_JQ_TRANSFORM&lt;/code&gt;&lt;/em&gt; task. The &lt;code&gt;inputParameters&lt;/code&gt; attribute is expected to have a value object&lt;br&gt;
that has the following&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A list of key value pair objects denoted key1/value1, key2/value2 in the example below. Note the key1/value1 are&lt;br&gt;
arbitrary names used in this example.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A key with the name &lt;code&gt;queryExpression&lt;/code&gt;, whose value is a JQ expression. The expression will operate on the value of&lt;br&gt;
the &lt;code&gt;inputParameters&lt;/code&gt; attribute. In the example below, the &lt;code&gt;inputParameters&lt;/code&gt; has 2 inner objects named by attributes&lt;br&gt;
&lt;code&gt;key1&lt;/code&gt; and &lt;code&gt;key2&lt;/code&gt;, each of which has an object that is named &lt;code&gt;value1&lt;/code&gt; and &lt;code&gt;value2&lt;/code&gt;. They have an associated array of&lt;br&gt;
strings as values, &lt;code&gt;"a", "b"&lt;/code&gt; and &lt;code&gt;"c", "d"&lt;/code&gt;. The expression &lt;code&gt;key3: (.key1.value1 + .key2.value2)&lt;/code&gt; concat's the 2&lt;br&gt;
string arrays into a single array against an attribute named &lt;code&gt;key3&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jq_example_task"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"taskReferenceName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my_jq_example_task"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"JSON_JQ_TRANSFORM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"inputParameters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"value1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"b"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"value2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"d"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"queryExpression"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{ key3: (.key1.value1 + .key2.value2) }"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The execution of this example task above will provide the following output. The &lt;code&gt;resultList&lt;/code&gt; attribute stores the full&lt;br&gt;
list of the &lt;code&gt;queryExpression&lt;/code&gt; result. The &lt;code&gt;result&lt;/code&gt; attribute stores the first element of the resultList. An&lt;br&gt;
optional &lt;code&gt;error&lt;/code&gt;&lt;br&gt;
attribute along with a string message will be returned if there was an error processing the query expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"result"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"d"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"resultList"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"key3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"d"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#input-configuration"&gt;
  &lt;/a&gt;
  Input Configuration
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Attribute&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;Task Name. A unique name that is descriptive of the task function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;taskReferenceName&lt;/td&gt;
&lt;td&gt;Task Reference Name. A unique reference to this task. There can be multiple references of a task within the same workflow definition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;Task Type. In this case, JSON_JQ_TRANSFORM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inputParameters&lt;/td&gt;
&lt;td&gt;The input parameters that will be supplied to this task. The parameters will be a JSON object of atleast 2 attributes, one of which will be called queryExpression. The others are user named attributes. These attributes will be accessible by the JQ query processor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inputParameters/user-defined-key(s)&lt;/td&gt;
&lt;td&gt;User defined key(s) along with values.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inputParameters/queryExpression&lt;/td&gt;
&lt;td&gt;A JQ query expression&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#output-configuration"&gt;
  &lt;/a&gt;
  Output Configuration
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Attribute&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;result&lt;/td&gt;
&lt;td&gt;The first results returned by the JQ expression&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;resultList&lt;/td&gt;
&lt;td&gt;A List of results returned by the JQ expression&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;An optional error message, indicating that the JQ query failed processing&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#want-to-learn-more-about-jq"&gt;
  &lt;/a&gt;
  Want to learn more about JQ?
&lt;/h2&gt;

&lt;p&gt;See tutorials at &lt;a href="https://stedolan.github.io/jq/tutorial/"&gt;https://stedolan.github.io/jq/tutorial/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow us on &lt;a href="https://github.com/Netflix/conductor/"&gt;https://github.com/Netflix/conductor/&lt;/a&gt;&lt;br&gt;
for the source code and updates.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Traversing the C# Syntax Tree with F#</title>
      <author>Jason</author>
      <pubDate>Thu, 09 Dec 2021 20:53:07 +0000</pubDate>
      <link>https://dev.to/rametta/traversing-the-c-syntax-tree-with-f-366b</link>
      <guid>https://dev.to/rametta/traversing-the-c-syntax-tree-with-f-366b</guid>
      <description>&lt;p&gt;This article will go over the basics of the .NET compiler platform feature for analyzing the C# syntax tree, using F#.&lt;/p&gt;

&lt;p&gt;.NET provides a Syntax API that can read any C# or Visual Basic source file and provide the corresponding Syntax Tree for that code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h2&gt;

&lt;p&gt;Why would someone need to traverse the C# syntax tree?&lt;/p&gt;

&lt;p&gt;Well, it can be for a number of reasons, maybe you want to gather statistics about how many classes, namespaces and methods you have, maybe you want generate code based on what is already written, maybe you want to create new tools like a new linter or a tool like Swagger. All these things can be done by analyzing the syntax tree.&lt;/p&gt;

&lt;p&gt;Recently I found myself using the Syntax API for finding Attributes above certain methods and classes, and based on the name and arguments of the Attributes, I generated various other files that were used elsewhere.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;FunWithSyntaxTrees&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The snippet above shows a small program. We will use this snippet as our input for analyzing the syntax tree.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h2&gt;

&lt;p&gt;Assuming you have an F# environment setup. You can begin by installing the nuget package &lt;code&gt;Microsoft.CodeAnalysis.CSharp&lt;/code&gt; and importing that into your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CodeAnalysis&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;CodeAnalysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CSharp&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;CodeAnalysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;CSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Syntax&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

  &lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you install the package and add your &lt;code&gt;open&lt;/code&gt; directives, we will hardcode the C# source code from above into the file, above the &lt;code&gt;main&lt;/code&gt; entrypoint function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... open directives&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""
using System.Collections;
using System.Linq;
using System.Text;

namespace FunWithSyntaxTrees
{
    class Program
    {
        static void Main(string[] args)
        {
            // ...
        }
    }
}
"""&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

  &lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you write a real program that uses the Syntax API, you will most likely be reading the C# source from files, like this &lt;code&gt;let code = File.ReadAllText "/path/to/file"&lt;/code&gt;, instead of hardcoding the string like we did, but for this tutorial it is fine for demonstration.&lt;/p&gt;

&lt;p&gt;So we will begin by passing the string of C# source code to the Syntax API to be parsed, in return we will get the Syntax Tree that we can begin analyzing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxTree&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ParseText&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;

  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: I will write out the &lt;code&gt;Type&lt;/code&gt;'s of all the variables, but it is unnecessary most of the time since F#'s type inference is very capable of inferring the type itself. Just like in C# when you use the &lt;code&gt;var&lt;/code&gt; keyword, it is capable of knowing the underlying type, in F# this inference is even more powerful and applies to arguments, functions and everything in-between.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that the Syntax API has returned our needed Syntax Tree, we can begin travering it and exploring what it offers as data.&lt;/p&gt;

&lt;p&gt;First let us get all the &lt;code&gt;using&lt;/code&gt; directives in the file. We start by getting the root node of the file, then we iterate over all the child nodes inside the root node and find the ones that are the correct &lt;code&gt;UsingDirective&lt;/code&gt; type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxTree&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ParseText&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CompilationUnitSyntax&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetCompilationUnitRoot&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNodeChildren&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxNode&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ChildNodes&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;rootNodeChildren&lt;/code&gt; variable holds all the child &lt;code&gt;SyntaxNode&lt;/code&gt;'s of the root node. The root node is basically the first node of the &lt;code&gt;SyntaxTree&lt;/code&gt; which holds everything, and a &lt;code&gt;SyntaxNode&lt;/code&gt; is the most general type of node.&lt;/p&gt;

&lt;p&gt;We now need to iterate over these children to find the correct &lt;code&gt;SyntaxNode&lt;/code&gt; for &lt;code&gt;using&lt;/code&gt; directives since that is what we are looking for. We will declare a small helper function to help find them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;usingDirectiveNode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxNode&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;:?&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;usingDirective&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;usingDirective&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;

&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxTree&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ParseText&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CompilationUnitSyntax&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetCompilationUnitRoot&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNodeChildren&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxNode&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ChildNodes&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;usingDirectives&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choose&lt;/span&gt; &lt;span class="n"&gt;usingDirectiveNode&lt;/span&gt; &lt;span class="n"&gt;rootNodeChildren&lt;/span&gt;

  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The new helper function &lt;code&gt;usingDirectiveNode&lt;/code&gt; takes a generic &lt;code&gt;SyntaxNode&lt;/code&gt; and checks if it is of the &lt;code&gt;UsingDirectiveSyntax&lt;/code&gt; variety, if it is, it returns an F# Option type containing the &lt;code&gt;using&lt;/code&gt; directive node.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: An F# Option type is a way to represent a &lt;em&gt;"nullable"&lt;/em&gt; value, since there are no real null values in F#, nullable values are representated as Algebraic Data Types, such as the Option type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We use the new helper function by mapping over every node and passing it to the function. We use &lt;code&gt;Seq.choose&lt;/code&gt; to filter out any &lt;code&gt;None&lt;/code&gt; types and keep all the &lt;code&gt;Some&lt;/code&gt; types. It also unwraps the &lt;code&gt;Some&lt;/code&gt; types so we can keep using them without Option mapping.&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;Seq.choose&lt;/code&gt; is just a fancy way of doing &lt;code&gt;Seq.map&lt;/code&gt; and then &lt;code&gt;Seq.filter&lt;/code&gt; specifically with Option types since the type signature is &lt;code&gt;('T -&amp;gt; 'U option) -&amp;gt; seq&amp;lt;'T&amp;gt; -&amp;gt; seq&amp;lt;'U&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Moving along, so now that we have a sequence of &lt;code&gt;using&lt;/code&gt; directives in a variable, we can get the specific properties of a &lt;code&gt;using&lt;/code&gt; directive. For now we wil just print them out as proof.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;usingDirectiveNode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxNode&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;:?&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;usingDirective&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;usingDirective&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;

&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxTree&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ParseText&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CompilationUnitSyntax&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetCompilationUnitRoot&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNodeChildren&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxNode&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ChildNodes&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;usingDirectives&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choose&lt;/span&gt; &lt;span class="n"&gt;usingDirectiveNode&lt;/span&gt; &lt;span class="n"&gt;rootNodeChildren&lt;/span&gt;

  &lt;span class="n"&gt;usingDirectives&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ofSeq&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"{u.ToString()}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ignore&lt;/span&gt;

  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of running our program would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System.Collections;
using System.Linq;
using System.Text;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty cool right? We analyzed our C# code and found our using directives and printed them out.&lt;/p&gt;

&lt;p&gt;We can use that strategy to find anything in our code, including methods, method arguments, types, classes, interfaces, enums, comments, attributes, etc, everything!&lt;/p&gt;

&lt;p&gt;If you found this useful, feel free to follow me on twitter at &lt;a href="https://twitter.com/rametta"&gt;@rametta&lt;/a&gt;&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>csharp</category>
      <category>dotnet</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Learning React.js</title>
      <author>Matheus Tanaka</author>
      <pubDate>Thu, 09 Dec 2021 20:47:57 +0000</pubDate>
      <link>https://dev.to/matheustanaka/learning-reactjs-84o</link>
      <guid>https://dev.to/matheustanaka/learning-reactjs-84o</guid>
      <description>&lt;p&gt;React.js is a Javascript library that allows building user interfaces. There are three main concepts that you need to know before starting your journey with React. So, here you will learn about these concepts and how you can use them in your daily&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;A component is a part of code where you can turn in independent parts and encapsulate them inside a function, and reuse them between other parts of your code. It's possible to write components through functions and classes.&lt;br&gt;
This example will be written through functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, you will select the file App.js and create a const called as you want, here I use the example of forecast and added strings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcPv-pNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f76akligv9w7ruek5ptt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcPv-pNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f76akligv9w7ruek5ptt.png" alt="Adding constant" width="663" height="262"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now it's time to create our component. So, let's make that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dWkVkW9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bb2hfmsr4bq0lqmursrb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dWkVkW9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bb2hfmsr4bq0lqmursrb.png" alt="Creating Component" width="671" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) We need to add a div or &amp;lt;&amp;gt;&amp;lt;/&amp;gt; inside of return.&lt;/p&gt;

&lt;p&gt;2) You should select your const and add map function, because we want to iterate every item inside our const.&lt;/p&gt;

&lt;p&gt;3) You should create the other variable inside map just to start the function, you can call as index, item, or anything like that, I chose climate because it's aligned with the forecast.&lt;/p&gt;

&lt;p&gt;4) Now, you should add ⇒ to return something, so I put an HTML tag and passed climate inside of keys as my result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--788UnsdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ad0us7ed531sw08c4mop.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--788UnsdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ad0us7ed531sw08c4mop.png" alt="Result of Component" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As you can see, we are using h1 three times because we have three strings inside of forecast constant. Now, we can conclude that we are reusing the same component three times, in this case, I chose an "h1" but you can use another HTML tag.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#state"&gt;
  &lt;/a&gt;
  State
&lt;/h2&gt;

&lt;p&gt;The state is used to save the data of the component, it's a simple variable that defines an initial and final state, where the final state is considered a mutable state, where you can change the initial state of some component. The state will change the VirtualDOM and when the state is updated, the component renders the new state, the mutable state.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here, I will use a Hook, but you can make it with a constructor following the docs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1) You need to import the Hook called useState in your App.js file.&lt;/p&gt;

&lt;p&gt;2) We will change a little bit the way that we declare our constant. Now, you should use the Hook useState and pass your input params. Here, I'm passing forecast as the initial state, and setForecast as our final state.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5vD2kXrn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqcozkpfywn44byokhib.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5vD2kXrn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqcozkpfywn44byokhib.png" alt="Adding state" width="533" height="420"&gt;&lt;/a&gt;&lt;br&gt;
I added more properties inside of forecast because we want to change them using setForecast.&lt;/p&gt;

&lt;p&gt;3) With our params created, it's time to handle the setForecast, so let's create a function to change our initial state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DuHYZOEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6445yo8i49mrmg27xd8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DuHYZOEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6445yo8i49mrmg27xd8m.png" alt="handle the function" width="535" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) We need to organize our code, it's important to create a folder where we will save our components. Inside of src I create a folder called components and added a Weather.js file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---169MGJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkxfzt7i82it5mno19vg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---169MGJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkxfzt7i82it5mno19vg.png" alt="Creating component folder" width="338" height="139"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5) After that, we want to show our output. Inside of Weather, you should create a function that receives a forecast as a parameter and add your return with HTML tags.&lt;/p&gt;

&lt;p&gt;(Don't forget to export your component)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--htihK6nb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypg0nrr255be3iqyu5zi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--htihK6nb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypg0nrr255be3iqyu5zi.png" alt="weather component" width="692" height="248"&gt;&lt;/a&gt;&lt;br&gt;
As you can see, I'm passing forecast inside of "h1" and "p", here we are calling the forecasts constant and accessing the properties inside of an array.&lt;/p&gt;

&lt;p&gt;6) Now, you need to come back to App.js and create a button to execute the handleChangeForecast function. &lt;/p&gt;

&lt;p&gt;We still using map function to iterate every item and you should Import your component inside of App.js to use in the return statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R3-Gay3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb5zt20s9ai5m8w23tjx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R3-Gay3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb5zt20s9ai5m8w23tjx.png" alt="Function to show the output" width="827" height="780"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initial-state"&gt;
  &lt;/a&gt;
  Initial State
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EageNtOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2a7hy4xvyba7xbok9ng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EageNtOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2a7hy4xvyba7xbok9ng.png" alt="Inital State" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-state"&gt;
  &lt;/a&gt;
  Final State
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_RGBeeSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trd5ciapymh2kfca7b71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_RGBeeSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trd5ciapymh2kfca7b71.png" alt="Final State" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#props"&gt;
  &lt;/a&gt;
  Props
&lt;/h2&gt;

&lt;p&gt;Props it's the abbreviation of properties, they are passed between the components and return elements that will be shown through the DOM. A Characteristics of props is immutability, you can't change them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2NAkV81v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xg24q4g8o2we32fl4hp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2NAkV81v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xg24q4g8o2we32fl4hp.png" alt="Props" width="769" height="244"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we are passing a key with forecast ID and forecast property, this props can't change, you can't change the ID, but we are passing them to identify throw the iteration of map.&lt;/p&gt;

&lt;p&gt;Hopefully, the tutorial above helped you to learn more about React concepts. If you have any doubt, feel free to leave comments about them.&lt;/p&gt;

&lt;p&gt;If you learned something from this article, please hit the like button.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you want to talk with me, please send me a message on &lt;a href="https://twitter.com/matheus__tanaka"&gt;Twitter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/matheustanaka/react"&gt;Source Code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/matheus-tanaka-42a833186/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>What Is Trino And Why Is It Great At Processing Big Data</title>
      <author>SeattleDataGuy</author>
      <pubDate>Thu, 09 Dec 2021 20:45:52 +0000</pubDate>
      <link>https://dev.to/seattledataguy/what-is-trino-and-why-is-it-great-at-processing-big-data-8pc</link>
      <guid>https://dev.to/seattledataguy/what-is-trino-and-why-is-it-great-at-processing-big-data-8pc</guid>
      <description>&lt;p&gt;Big data is touted as the solution to many problems. However, the truth is, big data has caused a lot of big problems.&lt;/p&gt;

&lt;p&gt;Yes, big data can provide more context and provide insights we have never had before. It also makes queries slow, data expensive to manage, requires a lot of expensive specialists to process it, and just continues to grow.&lt;/p&gt;

&lt;p&gt;Overall, data, especially big data, has forced companies to develop better data management tools to ensure data scientists and analysts can work with all their data.&lt;/p&gt;

&lt;p&gt;One of these companies was Facebook who decided they needed to develop a new engine to process all of their petabytes effectively. This tool was called Presto which recently broke off into another project called Trino.&lt;/p&gt;

&lt;p&gt;In this article, we outline what Trino is, why people use it and some of the challenges people face when deploying it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#presto-trino-history"&gt;
  &lt;/a&gt;
  Presto Trino History
&lt;/h1&gt;

&lt;p&gt;Before diving into what Trino is and why people use it. Let's recap how Presto turned into Trino.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-trino"&gt;
  &lt;/a&gt;
  What Is Trino
&lt;/h1&gt;

&lt;p&gt;Let's be clear. &lt;a href="https://trino.io/"&gt;Trino&lt;/a&gt; is not a database. This is a misconception. Just because you utilize Trino to run SQL against data, doesn't mean it's a database.&lt;/p&gt;

&lt;p&gt;Instead, Trino is a SQL engine. More specifically, Trino is an open-source distributed SQL query engine for adhoc and batch &lt;a href="https://www.theseattledataguy.com/etls-vs-elts-why-are-elts-disrupting-the-data-market-data-engineering-consulting/#page-content"&gt;ETL&lt;/a&gt; queries against multiple types of data sources. Not to mention it can manage a whole host of both standard and semi-structured data types like JSON, Arrays, and Maps.&lt;/p&gt;

&lt;p&gt;Another important point to discuss about Trino is the history of Presto. In 2012 &lt;a href="https://www.linkedin.com/in/traversomartin/"&gt;Martin Traverso&lt;/a&gt;, David Phillips, Dain Sundstrom and Eric Hwang were working at Facebook and developed Presto to replace Apache Hive to better process the hundreds of petabytes Facebook was trying to analyze.&lt;/p&gt;

&lt;p&gt;Due to the creators desire to keep the project open and community based they open sourced it in November 2013.&lt;/p&gt;

&lt;p&gt;But due to Facebook wanting to have tighter control over the project there was an eventual split.&lt;/p&gt;

&lt;p&gt;The original creators of Presto decided that they wanted to keep Presto open-source and in turn pursued building the Presto Open Source Community full-time. They did this under the new name PrestoSQL.&lt;/p&gt;

&lt;p&gt;Facebook decided to build a competing community using The Linux Foundation®. As a first action, Facebook applied for a trademark on Presto®. This eventually led to litigation and other challenges that forced the original group who developed Presto to rebrand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggP2igXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AvJa4YaAaF0qoR7tW" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggP2igXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AvJa4YaAaF0qoR7tW" alt="" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://trino.io/blog/2020/12/27/announcing-trino.html"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Starting in December 2020 &lt;a href="https://trino.io/blog/2020/12/27/announcing-trino.html"&gt;PrestoSQL was rebranded as Trino&lt;/a&gt;. This has been a little confusing but now Trino supports a lot of end-users and has a large base of developers that commit to it regularly.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-does-trino-work"&gt;
  &lt;/a&gt;
  How does Trino work?
&lt;/h1&gt;

&lt;p&gt;Trino is a distributed system that utilizes an architecture similar to massively parallel processing (MPP) databases. Like many other big data engines there is a form of a coordinator node that then manages multiple worker nodes to process all the work that needs to be done.&lt;/p&gt;

&lt;p&gt;An analyst or general user would run their SQL which gets pushed to the coordinator. In turn the coordinator then parses, plans, and schedules a distributed query. It supports standard ANSI &lt;a href="https://seattledataguy.substack.com/p/how-to-write-better-sql-advanced"&gt;SQL&lt;/a&gt; as well as allows users to run more complex transformations like JSON and MAP transformations and parsing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-people-use-trino"&gt;
  &lt;/a&gt;
  Why People Use Trino
&lt;/h1&gt;

&lt;p&gt;Trino, being a Presto spin-off, has a lot of benefits that came from its development by a large data company that needs to easily query across multiple data sources without spending too much time processing ETLs. In addition, it was developed to scale on cloud-like infrastructure. Although, most of Facebook's infrastructure is based on its internal cloud. But let's dig into why people are using Trino.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#agnostic-data-source-connections"&gt;
  &lt;/a&gt;
  Agnostic Data Source Connections
&lt;/h1&gt;

&lt;p&gt;There are plenty of options when it comes to how you can query your data. There are tools like Athena, Hive and Apache Drill.&lt;/p&gt;

&lt;p&gt;So why use Trino to run SQL?&lt;/p&gt;

&lt;p&gt;Trino provides many benefits for developers. For example, the biggest advantage of Trino is that it is just a SQL engine. Meaning it agnostically sits on top of various data sources like MySQL, HDFS, and SQL Server.&lt;/p&gt;

&lt;p&gt;So if you want to run a query across these different data sources, you can.&lt;/p&gt;

&lt;p&gt;This is a powerful feature that eliminates the need for users to understand connections and SQL dialects of underlying systems.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cloudfocused"&gt;
  &lt;/a&gt;
  Cloud-focused
&lt;/h1&gt;

&lt;p&gt;Presto's fundamental design of running storage and computing separately makes it extremely convenient to operate in cloud environments. Since the Presto cluster doesn't store any data, it can be auto-scaled depending on the load without causing any data loss.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-cases-for-trino"&gt;
  &lt;/a&gt;
  Use Cases For Trino
&lt;/h1&gt;

&lt;p&gt;Adhoc queries And Reporting --- Trino allows end-users to use SQL to run ad hoc queries where your data resides. More importantly, you can create queries and data sets for reporting and adhoc needs.&lt;/p&gt;

&lt;p&gt;Data Lake Analytics --- One of many of the common use cases for Trino is being able to directly query data on a data lake without the need for transformation. You can query data that is structured or semi-structured in various sources. This means you can create operational dashboards without massive transformations.&lt;/p&gt;

&lt;p&gt;Batch ETLs --- Trino is a great engine to run your ETL batch queries. That's because it can process large volumes of data quickly as well as bring in data from multiple sources without always needing to extract data from sources such as MySQL.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#challenges-for-trino-users"&gt;
  &lt;/a&gt;
  Challenges For Trino Users
&lt;/h1&gt;

&lt;p&gt;At this point, you might be assuming that everyone should use Trino. But it's not that simple. Using Trino requires a pretty large amount of set-up for one. However, there are also a few other issues you might deal with upon set-up.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#federated-queries-can-be-slow"&gt;
  &lt;/a&gt;
  Federated Queries Can Be Slow
&lt;/h1&gt;

&lt;p&gt;The one downside of federated queries is that there can be some trade-offs in speed. This can be caused by a lack of meta-data stored and managed by Trino to better run queries. In addition, Presto was initially developed at Facebook that essentially has their own cloud. For them to expand it and grow it as they need increased speed isn't a huge problem. However, for other organizations, in order to get the same level of performance they might need to spend a lot more money to add more machines to their clusters. This can become very expensive. All to manage unindexed data.&lt;/p&gt;

&lt;p&gt;One such example is &lt;a href="https://varada.io/"&gt;Varada&lt;/a&gt;. Varada indexes data in Trino in such a way that reduces the time the CPU is used for data scanning (via indexes) and frees the cpu up for other tasks like fetching the data extremely fast or dealing with concurrency. thus allows SQL users to run various queries, whether across dimensions, facts as well as other types of joins and datalake analyticss, on indexed data as federated data sources. SQL aggregations and grouping is accelerated using nanoblock indexes as well, resulting in highly effective SQL analytics.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#configuration-and-setup"&gt;
  &lt;/a&gt;
  Configuration And Set-Up
&lt;/h1&gt;

&lt;p&gt;Setting up Trino isn't straightforward. Especially when it comes to optimizing performance and management. In turn, many system admins and IT teams will need teams to both set up and manage their instances of Trino.&lt;/p&gt;

&lt;p&gt;One great example of this is an AWS article titled "&lt;a href="https://aws.amazon.com/blogs/big-data/top-9-performance-tuning-tips-for-prestodb-on-amazon-emr/"&gt;Top 9 Performance Tuning Tips For PrestoDB&lt;/a&gt;".&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lack-of-enterprise-features"&gt;
  &lt;/a&gt;
  Lack Of Enterprise Features
&lt;/h1&gt;

&lt;p&gt;One of the largest challenges faced by companies utilizing Trino is that out of the box, there aren't a lot of features geared towards enterprise solutions. That is to say, features that revolve around security, access control, and even expanded data source connectivity are limited. Many solutions are trying to be better provided in this area.&lt;/p&gt;

&lt;p&gt;A great example of this is &lt;a href="https://seattledataguy.substack.com/p/starburst-data-raised-100m-but-what"&gt;Starburst Data&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Starburst Enterprise has several features that help improve the Trino's lacking security features. For example, Starburst makes it easy for your team to set up access control.&lt;/p&gt;

&lt;p&gt;The access control systems all follow role-based access control mechanisms with users, groups, roles, privileges and objects.&lt;/p&gt;

&lt;p&gt;This is demonstrated in the image below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1JFeaYcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AAo14IL0Z3IXE5nwJ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1JFeaYcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AAo14IL0Z3IXE5nwJ" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.starburst.io/latest/security/access-control.html"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This makes it easy for your security teams and &lt;a href="https://www.theseattledataguy.com/what-is-a-data-warehouse-and-why-we-build-them-a-video/"&gt;data warehouse&lt;/a&gt; administrators to manage who has access to what data.&lt;/p&gt;

&lt;p&gt;Starburst also offers other helpful security features such as auditing and encryption.&lt;/p&gt;

&lt;p&gt;This enables companies to implement a centralized security framework without having to code their own modules for Trino.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Big data will continue to be a big problem for companies that don't start looking for tools like Trino to help them manage all their data. Trino's ability to be an agnostic SQL engine that can query large data sets across multiple data sources is a great option for many of these companies. But as discussed, Trino is far from perfect. It isn't fully optimized in a way for enterprise companies to take advantage of its full abilities. In addition, due to Trino's brute force approach to speed, it sometimes comes at a cost. It becomes very expensive to get the beneficial speed without indexing.&lt;/p&gt;

&lt;p&gt;This is where many new solutions are coming into the fold to make Trino more approachable. In the end, big data can be maintained and managed, you just need the right tools to help set yourself up for success.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article, then check out these videos and articles below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=uEPCxBaRf6A"&gt;Data Engineer Vs Analytics Engineer Vs Analyst&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.theseattledataguy.com/why-migrate-to-the-modern-data-stack-and-where-to-start/"&gt;Why Migrate To The Modern Data Stack And Where To Start&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://youtube.com/watch?v=s40MptE20Tc&amp;amp;t=1s"&gt;5 Great Data Engineering Tools For 2021 --- My Favorite Data Engineering Tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=kSt9NV-qZkc&amp;amp;t=1s"&gt;4 SQL Tips For Data Scientists&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logitanalytics.com/what-are-the-benefits-cloud-data-warehousing-and-why-you-should-migrate/"&gt;What Are The Benefits Of Cloud Data Warehousing And Why You Should Migrate&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>bigdata</category>
      <category>datascience</category>
      <category>sql</category>
    </item>
    <item>
      <title>How to create an Electron application with Vite</title>
      <author>Olyno</author>
      <pubDate>Thu, 09 Dec 2021 20:34:12 +0000</pubDate>
      <link>https://dev.to/olyno/how-to-create-an-electron-application-with-vite-im</link>
      <guid>https://dev.to/olyno/how-to-create-an-electron-application-with-vite-im</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Cet article est disponible en français &lt;a href="https://dev.to/olyno/comment-creer-une-application-electron-avec-vite-4noe"&gt;ici&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To be able to create a software with Electron is not so complicated. Lots of boilerplates exist, documentation is everywhere on the internet....&lt;br&gt;
However, none of the boilerplates really explain how to create an Electron project with Vite. Let me explain in a few steps how to do it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-the-default-vite-application"&gt;
  &lt;/a&gt;
  Create the default Vite application
&lt;/h2&gt;

&lt;p&gt;For this nothing is easier. I will use Yarn for my installation. Using the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create vite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You just have to choose the name of your project (in our case "electron-vite"), and choose the framework of your choice (in our case "Svelte"). We go to the project folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd electron-vite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we install the different dependencies&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-the-builder"&gt;
  &lt;/a&gt;
  Install the builder
&lt;/h2&gt;

&lt;p&gt;The builder will allow us to create the final electron application, and to put the software in production. For this, we will use Electron Forge. To install Electron Forge, you just have to do the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add --dev @electron-forge/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the forge CLI is installed, we just need to set it up, and for that, Electron Forge takes care of everything. You just have to do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn electron-forge import
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so that the different scripts are automatically added to our package.json.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-edit-the-packagejson"&gt;
  &lt;/a&gt;
  Let's edit the package.json
&lt;/h2&gt;

&lt;p&gt;We still have some dependencies to install:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;concurrently &lt;span class="c"&gt;# To run Vite and Electron at the same time&lt;/span&gt;
cross-env    &lt;span class="c"&gt;# To be able to set an environment at launch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To install them, we just have to do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add -D concurrently cross-env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have all the dependencies installed, we just have to setup the different scripts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run build &amp;amp;&amp;amp; npm run electron:start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"concurrently -k "&lt;/span&gt;&lt;span class="err"&gt;vite&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="err"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;electron:dev&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"preview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite preview"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"electron:dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cross-env IS_DEV=true electron-forge start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"electron:build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"electron-forge make"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"electron:package"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"electron-forge package"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can modify the &lt;code&gt;yarn&lt;/code&gt; by &lt;code&gt;npm run&lt;/code&gt; in the different scripts&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The environment variable &lt;code&gt;IS_DEV&lt;/code&gt; can of course be renamed to &lt;code&gt;NODE_ENV&lt;/code&gt; for example.&lt;/p&gt;

&lt;p&gt;We are missing 3 fields to add/modify:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"main": "app/index.js",
"description": "Boilerplate Electron + Vite + Svelte",
"license": "MIT",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; field will be the entry point of our Electron application.&lt;/p&gt;

&lt;p&gt;The fields &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;license&lt;/code&gt; are necessary to build Electron with Electron Forge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-edit-the-config-of-vite"&gt;
  &lt;/a&gt;
  Let's edit the config of Vite
&lt;/h2&gt;

&lt;p&gt;Nothing very complicated. First of all, we will have to modify the &lt;code&gt;base&lt;/code&gt; of our application. If the application goes into production, then we will look for the files to import (like the assets). Then, we will just have to modify the build folder so that it is linked to our Electron application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;svelte&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@sveltejs/vite-plugin-svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// https://vitejs.dev/config/&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IS_DEV&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;outDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app/build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;svelte&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#we-setup-electron"&gt;
  &lt;/a&gt;
  We setup Electron
&lt;/h2&gt;

&lt;p&gt;To create our Electron application, we just have to create a file &lt;code&gt;app/index.js&lt;/code&gt; which will contain the default code of Electron:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app/index.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Handle creating/removing shortcuts on Windows when installing/uninstalling.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;electron-squirrel-startup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IS_DEV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create the browser window.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mainWindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;webPreferences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preload.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;nodeIntegration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// Open the DevTools.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webContents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openDevTools&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// mainWindow.removeMenu();&lt;/span&gt;
    &lt;span class="nx"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This method will be called when Electron has finished&lt;/span&gt;
&lt;span class="c1"&gt;// initialization and is ready to create browser windows.&lt;/span&gt;
&lt;span class="c1"&gt;// Some APIs can only be used after this event occurs.&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;whenReady&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;activate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// On macOS it's common to re-create a window in the app when the&lt;/span&gt;
    &lt;span class="c1"&gt;// dock icon is clicked and there are no other windows open.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAllWindows&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Quit when all windows are closed, except on macOS. There, it's common&lt;/span&gt;
&lt;span class="c1"&gt;// for applications and their menu bar to stay active until the user quits&lt;/span&gt;
&lt;span class="c1"&gt;// explicitly with Cmd + Q.&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;window-all-closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;darwin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, there are 2 things to note:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The following code is needed if you want to build your application with "squirrel" (a build template for Windows).
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;electron-squirrel-startup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;About how to get the content:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webContents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openDevTools&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// mainWindow.removeMenu(); // Optional&lt;/span&gt;
  &lt;span class="nx"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we are dev, we will just load a url which will be the one of Vite. However, if we are building our application for production, then we will need to get the &lt;code&gt;index.html&lt;/code&gt; file directly.&lt;/p&gt;

&lt;p&gt;Finally, we just need to create an &lt;code&gt;app/preload.js&lt;/code&gt; file.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Electron does not yet support esm syntaxes, so we will use the &lt;code&gt;require&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#we-modify-the-svelte-config-file"&gt;
  &lt;/a&gt;
  We modify the Svelte config file
&lt;/h2&gt;

&lt;p&gt;So yes, even if our application is finished, Electron doesn't support esm syntaxes, so we have to modify the import/export in require/module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// svelte.config.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sveltePreprocess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte-preprocess&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Consult https://github.com/sveltejs/svelte-preprocess&lt;/span&gt;
  &lt;span class="c1"&gt;// for more information about preprocessors&lt;/span&gt;
  &lt;span class="na"&gt;preprocess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sveltePreprocess&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it, you have just created your software with Vite et Electron! The livereload works perfectly, what more could you want!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>electron</category>
      <category>svelte</category>
      <category>vite</category>
    </item>
    <item>
      <title>Free your wings with Linux</title>
      <author>Mohammad Nazmul Hossain</author>
      <pubDate>Thu, 09 Dec 2021 20:26:17 +0000</pubDate>
      <link>https://dev.to/naz365/free-your-wings-with-linux-4f1h</link>
      <guid>https://dev.to/naz365/free-your-wings-with-linux-4f1h</guid>
      <description>&lt;p&gt;Oh my god! Microsoft brings some crucial updates on their OS, yeah, it sounds good, but damn no. Because of its requirements. It’s an unusual surprise if you purchased a new PC for Windows 10, perhaps you have an even older and perfectly capable machine but you won't be able to update your machine. &lt;/p&gt;

&lt;p&gt;Windows 11 requires something like that, The system disk must be 64GB or larger, the PC must support TPM 2.0 and the PC must support Secure Boot there must be at least 4GB of RAM.&lt;/p&gt;

&lt;p&gt;You’re probably using Windows or Mac OS to read this, you will be amazed to know that there is another operating system that is way better than Windows or even Mac OS. So, Today I’m going to highlight some reasons why you should use Linux and never look back. So what is it? &lt;/p&gt;

&lt;p&gt;From smartphones to cars, supercomputers and home appliances, home desktops to enterprise servers, the Linux operating system are everywhere.&lt;/p&gt;

&lt;p&gt;It's in your phones, thermostats, cars, refrigerators, Roku devices, and televisions. It also runs most of the Internet, all of the world’s top 500 supercomputers, and the world’s stock exchanges. even Android is based on the Linux operating system.&lt;/p&gt;

&lt;p&gt;But beside being the platform of choice to run desktops, servers, and embedded systems across the globe, Linux is one of the most reliable, secure, and worry-free operating systems available in the market.&lt;/p&gt;

&lt;p&gt;What is Linux?&lt;/p&gt;

&lt;p&gt;Just like Windows, iOS, and Mac OS, Linux is an operating system. One of the most popular platforms on the planet. LINUX is an operating system or a kernel distributed under an open-source license. Its functionality list is quite like UNIX. The kernel is a program at the heart of the Linux operating system that takes care of fundamental stuff, like letting hardware communicate with software.&lt;/p&gt;

&lt;p&gt;Here’s why you should switch to Linux. While Linux already powers all the top 500 fastest supercomputers worldwide, I focus on desktop Linux for average Mango 🥭 people like you and me.&lt;/p&gt;

&lt;p&gt;01.Linux Is Free&lt;/p&gt;

&lt;p&gt;Let’s overlook it, cost matters. But you’re probably thinking you’ve never paid a dime for an operating system. You have. When you purchase a desktop or laptop, the cost of Windows is built-in. Not only that, but if you’ve ever upgraded Windows, you know of this cost. That inherent cost isn’t found only in the operating system. In our country, we have always been using pirated OS and software which is a kind of punishable crime. Many applications for either Windows or macOS have an associated cost. With Linux, you’ll find thousands upon thousands of free applications. Instead of paying for MS Office, you can install LibreOffice on Linux, directly from your distribution’s app store. Looking for a free Photoshop alternative? Try The GIMP. And when it comes time to upgrade your Linux distribution, it won’t cost you a penny … ever. Nearly every Linux distribution comes free of charge. With a couple of hundred bucks saved, you can use it to upgrade your hardware, purchase premium services, or do anything better than you can think of. Isn’t that exciting?&lt;/p&gt;

&lt;p&gt;02.More Secure: Antivirus not required&lt;/p&gt;

&lt;p&gt;To be honest, every platform has its share of issues. No operating system is immune to security threats, and Linux is no exception. However, Linux is one of the most secure platforms when compared to macOS and Windows.&lt;/p&gt;

&lt;p&gt;With a big community of developers/users, it gets fixed quickly even if someone finds a problem. However, sometimes with macOS and Windows, I’ve noticed that it takes a lot of time for them to fix the issues in a future update.&lt;/p&gt;

&lt;p&gt;And, of course, you don’t necessarily need an antivirus program on Linux. So, you also save on yearly/monthly subscriptions for Antivirus programs on Windows/macOS.&lt;/p&gt;

&lt;p&gt;Yes, one could argue that the market share of Linux on Desktop is lower than Windows/macOS. So, attackers don’t always target Linux users and hence, there aren’t any widespread security issues being spotted.&lt;/p&gt;

&lt;p&gt;The global Antivirus Software market size is projected to reach USD 3364.7 million by 2027, from USD 3635.5 million in 2020, at a CAGR of -1.1% during 2021-2027 only because of upcoming malware threats and cyber-attack.&lt;/p&gt;

&lt;p&gt;Even if that’s true (let’s assume), would you prefer to use something safer to use or something that’s a magnet to the virus, malware, and adware? I’ll respect your decision with that.&lt;/p&gt;

&lt;p&gt;3.Runs on any hardware&lt;/p&gt;

&lt;p&gt;All of us know that with every new release of Windows OS, a huge number of hardware systems become obsolete as their technical specifications are no longer adequate to run the latest Windows OS. Linux makes very efficient use of the system’s resources. Linux installation can be customized for users and specific hardware requirements. The installation procedure is very flexible and allows users to choose the modules they want to install. This allows them to install Linux even on old hardware, thus helping in optimal use of all the hardware resources.&lt;br&gt;
Linux runs on a range of hardware, right from supercomputers to watches. You can give new life to your old and slow Windows system by installing a lightweight Linux system or even run a NAS or media streamer using a particular distribution of Linux. There are also lightweight desktops like Xfce and LXDE which can run on lower-end PCs. Not just limited to that, you can also fire up a Linux distro on a Raspberry Pi or its alternatives to set up a basic system or work on a DIY project.&lt;/p&gt;

&lt;p&gt;04.Linux Is More Private&lt;/p&gt;

&lt;p&gt;When you use Windows, Microsoft creates an advertising ID for you and attaches information about your usage for ad targeting. The feature requires you to opt out, so it will operate by default until you choose otherwise. With Linux, you get much more respect for your privacy. Linux doesn't record your usage data and ships it to some data warehouse. There's no voice command feature registering your speech patterns to create a vocal fingerprint. Some distros may ask if you'd like to contribute to development by sending anonymized data to the developers so they can know which features you use. Again, it's up to you if and how you want to help the project.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Customization &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Users have tremendous flexibility in customizing the system as per their requirements. There are numerous choices for wallpapers, desktop icons, and panels. There are more than half a dozen desktop environments to choose from, like GNOME, KDE, etc. For any task, right from the GUI interface and file managers, to DVD burners and browsers, around four to six options are available for any particular software. The Linux versions of the most popular browsers are available. The Linux philosophy is based on using several small programs, each of which does one task very well. But these programs can be combined to write really powerful programs and utilities. Starting from the icon pack to the application window, you can change the look and feel of a Linux distro in minutes. In case you want to explore, you can refer to our list of the best GNOME themes and best icons for your Linux distro.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Beauty of command line&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of the great strengths of Linux is its command line. While this is one of its strengths, most people initially fear Linux simply because of this command line. But now the day has changed. A user can continue his work only with the graphical user interface without going to the command line for months. Another excuse for not using Linux before is that Linux does not have the necessary software. Now, this excuse is not acceptable at all. Linux now supports everything from photo editing to superhit commercial animation movies. For example, Pixar Animation Studio uses Linux. With open-source animation software 'Blender', they are giving away all the nice animated movies. But every experienced Linux user knows what a command line is. Everything on the command line can be done in a matter of seconds, which can take hours to complete. Once you are familiar with Linux shells and shell scripts, it is possible to automate any task that can be done manually.&lt;/p&gt;

&lt;p&gt;07.Linux Covers Your Fundamental Needs.&lt;/p&gt;

&lt;p&gt;You can use Linux for virtually all your essential computing needs with its native apps. This includes web browsing, email, streaming, and more. Linux distributions are made for absolutely everything. Popular open-source software GIMP for image editing immediately after installation, Inkscape for vector graphic editing, LibreOffice or OpenOffice as a whole office suite, For example, if you need Microsoft Word, you can still use the web app on Linux, or choose from several native alternatives that can open, edit, and save DOC and DOCX files. Firefox or Chromium as a browser, Nice as an email client, Torrent Client, Nice as a popular OpenSource. The command-line editor is available in Vim, Emax, or Nano. Since Linux is for developers, popular programming languages ​​like Python, JavaScript, and Perl are pre-installed here. Installing other programming languages ​​is also a matter of command. Most programming tools are built primarily for Linux.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Linux for Education&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is the most useful aspect for students, as they can use the software to study how it works, before modifying and extending the code to suit their needs. This will also help them to learn the internals of an OS and the software. This process will help in the development of new software and aid innovation based on local needs. Even if users are not programmers, they can contribute to Linux by helping in documentation, translation, and testing. Linux is used in student and professional life. If you want to study computer science and engineering, there are one or more courses called the operating system. That course teaches the basics of an operating system. This course is done with Linux as the source code of Linux is open. As well as those who want to create an operating system, have no speed without the Linux kernel. So you need to have a clear idea of ​​how to use Linux and its basics. Knowing Linux is a must for those who will work as software engineers in a large or medium-sized company in their professional life. You don't have to be very skilled, you have to know the basic concepts: use the command line, basic and everyday commands, use a command-line editor (VIM, Nano, Emax), use git in the command line, etc. It turns out that those who are accustomed to using Linux are far ahead of others. When it comes to programming in Linux, you have to write a lot of commands (nowadays you may not have to do it all the time due to heavy IDE, but you have to do it in the beginning). Because of this, they have to know a lot. What a fairly new Linux user programmer knows, a fairly experienced programmer using Windows does not know. The things that Linux users know, the things that they need to know — Windows users don't know that, they will know. You can verify the truth of this statement with your classmates.&lt;/p&gt;

&lt;p&gt;It can be a fantastic educational tool for schools and colleges as free software is available to aid in teaching. Proprietary software for computation, like MATLAB, is very expensive. There are alternatives available to it like Scilab and GNU Octave. Linux software is available in many areas— Celestia and Stellarium for astronomy, Avogadro and Gabedit for chemistry, EMBOSS and TreeView X for biology; and ROOT, Octopus and Step for physics.&lt;/p&gt;

&lt;p&gt;Last but not the least&lt;br&gt;
Incredible Community Support. When you start using Linux, you are a part of the Linux community. This means, from now on you are not alone. Loneliness can never bother you. If you ever face any problem with the server or system, just drop a comment mentioning your problem in any forum. Thousands of users are always ready to solve your problem. Yes, Linux always offers you this helping hand. After all, who will use what is a personal choice. I have tried to highlight some of the benefits of Linux here. If you find it convenient, you can take a break from the world of Linux. Hope you like it.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>educaton</category>
      <category>learn</category>
    </item>
  </channel>
</rss>
