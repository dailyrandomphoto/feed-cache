<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Visualising Changes With Semantic Git Differences</title>
      <author>Marcelo Sousa</author>
      <pubDate>Fri, 30 Jul 2021 16:52:12 +0000</pubDate>
      <link>https://dev.to/reviewpad/visualising-changes-with-semantic-git-differences-3omh</link>
      <guid>https://dev.to/reviewpad/visualising-changes-with-semantic-git-differences-3omh</guid>
      <description>&lt;p&gt;&lt;em&gt;Yay ‚Äì you receive a notification for a code review in a pull request on GitHub. You open the files changed tab on GitHub and there it is: a basic UI showing you nothing more than a git diff. Surely, there is a better way to look at the changes, including comments, and navigate to them, right?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/strong&gt; is a great tool used by millions of developers every day. One of the ways developers consume it is through the UI of GitHub, GitLab, or Bitbucket when you doing a code review.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unfortunately, what you see is literally what you get out of the git command.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For example, here is what you see on &lt;a href="http://github.com"&gt;GitHub.com&lt;/a&gt; for the following pull request of the &lt;a href="https://github.com/google/guava"&gt;google/guava&lt;/a&gt; project:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_5GZSyv_K04"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
Files changes in google/guava ‚Äì #3304 Unhandled overflow in the concat() method of per-type primitive utility classes



&lt;p&gt;We believe that in 2021, developers deserve better than having to exhaustively check textual diffs and try to reverse engineer the context of the changes.&lt;/p&gt;

&lt;p&gt;So we have incorporated into Reviewpad a special diff operation that captures an overview of the changes at the semantic level:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TBiCr4p_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onamf2rfai8l2x8f3v8g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TBiCr4p_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onamf2rfai8l2x8f3v8g.jpg" alt="Reviewpad‚Äôs Explore Tree. Try our beta"&gt;&lt;/a&gt;&lt;/p&gt;
Reviewpad‚Äôs Explore Tree. Try our beta at beta.reviewpad.com.



&lt;p&gt;The Explore Tree was designed to immediately answer the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  From the list of modified files, which have changes that involve semantic changes and how many changes occurred?&lt;/li&gt;
&lt;li&gt;  Which semantic objects (e.g. methods and classes in Java) were modified and which type of modification (added, removed, or changed)?&lt;/li&gt;
&lt;li&gt;  Which files or symbols contain comments?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Answering these questions has saved us a lot of review time as the tree also acts as an index into the diff, and allows us to navigate directly into it.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2o0SYdju1yo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
Interactions with the Explore Tree for Google / Guava ‚Äì #3304 Unhandled overflow in the concat() method of per-type primitive utility classes. Check it out on beta.reviewpad.com/review/github.com/google/guava/pull/3304.



&lt;p&gt;In order to compute the Explore Tree, Reviewpad performs a semantic diff of two versions of the file, restricted only to the hunks associated with the git diff. From there, the challenge is to understand which symbol (function, method, class, type, etc) is associated with this change. We‚Äôll write more details about the analyser in a future post. üòâ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cool-how-do-i-check-this-out-by-myself"&gt;
  &lt;/a&gt;
  Cool. How do I check this out by myself?
&lt;/h2&gt;

&lt;p&gt;We have a public beta version of Reviewpad available at &lt;a href="https://beta.reviewpad.com"&gt;beta.&lt;/a&gt;&lt;a href="https://beta.reviewpad.com"&gt;reviewpad.com&lt;/a&gt;. You will need to create a new account and once you log in for the first time, you will see the following page to connect to a code host:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--barJ-GXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq7sortt5dfkk06exgtx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--barJ-GXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq7sortt5dfkk06exgtx.png" alt="Connect to code host page on Reviewpad."&gt;&lt;/a&gt;&lt;/p&gt;
Connect to code host page on Reviewpad.



&lt;p&gt;You can connect to GitHub through our OAuth app or manually &lt;a href="https://docs.reviewpad.com/github"&gt;add a personal access token&lt;/a&gt;. The OAuth requires minimal scopes to be able to read and comment on public repositories.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And voil√† ‚Äì you are ready to get started with Reviewpad!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our semantic analysis works for more than 10 languages including: C, C++, C#, Go, Haskell, Java, Javascript, Proto, Python, Ruby, Rust, Swift and TypeScript.&lt;/p&gt;

&lt;p&gt;We are adding more and more open source projects in different languages so that you can check it out easily. Feel free to reach us on our &lt;a href="https://reviewpad.com/slack"&gt;community Slack&lt;/a&gt; with requests!&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>github</category>
      <category>gitdiff</category>
      <category>semantic</category>
    </item>
    <item>
      <title>Will you consider your carbon footprint when configuring your compute workloads?</title>
      <author>Andrew Brown üá®üá¶</author>
      <pubDate>Fri, 30 Jul 2021 16:49:12 +0000</pubDate>
      <link>https://dev.to/andrewbrown/will-you-consider-your-carbon-footprint-when-configuring-your-compute-workloads-2gf0</link>
      <guid>https://dev.to/andrewbrown/will-you-consider-your-carbon-footprint-when-configuring-your-compute-workloads-2gf0</guid>
      <description>&lt;p&gt;At Google, engineers get to spend 20% of their time on internal projects of their own design and Steren built a free public-facing customer tool to help you consider the carbon footprint when provisioning your resources in a specific region.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--CpRVFcPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/980619869463855104/1wkCx51g_normal.jpg" alt="Steren profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Steren
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/steren"&gt;@steren&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      üó∫Ô∏è I built a tool to help pick a @GoogleCloud region based on its carbon footprint, price and latency. &lt;br&gt;Adjust 3 sliders, get a sorted list of regions:&lt;br&gt;&lt;a href="https://t.co/yMTEFmuzGU"&gt;gcp-region-picker.web.app&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:20 PM - 20 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1384542442536333315" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1384542442536333315" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1384542442536333315" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--CpRVFcPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/980619869463855104/1wkCx51g_normal.jpg" alt="Steren profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Steren
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/steren"&gt;@steren&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      üó∫Ô∏è I built a tool to help pick a @GoogleCloud region based on its carbon footprint, price and latency. &lt;br&gt;Adjust 3 sliders, get a sorted list of regions:&lt;br&gt;&lt;a href="https://t.co/yMTEFmuzGU"&gt;gcp-region-picker.web.app&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:20 PM - 20 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1384542442536333315" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1384542442536333315" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1384542442536333315" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hAeprl7L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqp8fbtt6asgw795gbo1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hAeprl7L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqp8fbtt6asgw795gbo1.png" alt="Screen Shot 2021-07-30 at 12.12.57 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you expand the cards you get a bit more detail.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kYtDtJG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjl37utvy0bomict80fn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kYtDtJG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjl37utvy0bomict80fn.png" alt="Screen Shot 2021-07-30 at 12.25.53 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try the &lt;a href="https://cloud.withgoogle.com/region-picker/"&gt;Google Cloud Carbon Footprint Region Picker&lt;/a&gt; yourself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you think you will ever consider your carbon-foot print when using cloud services?&lt;/li&gt;
&lt;li&gt;Would you ever want to see a carbon-foot print as part of the cost and usage reporting within your cloud service provider (CSPs)? &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Did you know there is a Forem server just for just the cloud? &lt;a href="https:///www.thedev.cloud"&gt;www.thedev.cloud&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="(https:///www.thedev.cloud)"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fnLiP_rF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8nxmzmstl05jouj4ws0t.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Why we killed elixir</title>
      <author>borislav nikolov</author>
      <pubDate>Fri, 30 Jul 2021 16:26:52 +0000</pubDate>
      <link>https://dev.to/rekki/why-we-killed-elixir-3np</link>
      <guid>https://dev.to/rekki/why-we-killed-elixir-3np</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vn9d9QNm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7novlljrgzposd6w0dli.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vn9d9QNm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7novlljrgzposd6w0dli.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First this is my opinion as CTO, I don't care about languages, I hate them all.&lt;/p&gt;

&lt;p&gt;Here is my hatelist of languages I know enough to say I hate them, from most hated to least hated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# most hated
java perl javascript
elixir ruby
python cpp objc clojure
go dart
c
# least hated
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All those languages have something to offer, when you decide to use one, you better know how it will bite you in the butt. Most overpromise and underdeliver, their philosophies work great on paper, but poorly in practice. By 'in practice' I mean a diverse team of people working on a non trivially sized project with different experiences, preferences and backgrounds.&lt;/p&gt;

&lt;p&gt;When REKKI started the devs thought they are building a chat app, instead of ordering app, and they chose elixir, with phoenix to be able to trivially do things like 'someone is typing' in the chat. However what they didn't realize was that there is no way two chefs are in the app in the same time. You can read more about that here: &lt;a href="https://dev.to/rekki/work-in-the-kitchen-4ifm"&gt;https://dev.to/rekki/work-in-the-kitchen-4ifm&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We moved from elixir to go around 1 year ago, it was pretty smooth, we just made few go services and moved endpoints that we needed. We made a super simple k8s deployment infra &lt;code&gt;make build push deploy&lt;/code&gt; and you are good to go.&lt;/p&gt;

&lt;p&gt;This enabled all frontend devs to write go, learn more sql, make simple endpoints for themselves, and change something if they need. All of a sudden each frontend dev became a full stack dev.&lt;/p&gt;

&lt;p&gt;But elixir has so many powerful concepts, the genserver, hot code reloading, concurrency, its functional, phoenix is pretty popular and has great community, so why would we move away from it?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#let-it-fail"&gt;
  &lt;/a&gt;
  Let It Fail
&lt;/h2&gt;

&lt;p&gt;First the "let it fail" thing, look, in our company things end up in a master database, for 99.9% of the things, you open a transaction, write your stuff and close it. &lt;/p&gt;

&lt;p&gt;GenServer is great and all, but honestly for us its completely useless, it requires way too much discipline to not create inconsistencies in the data model, so if you do want to have things fail you have to actually handle the failure of a weak data model.&lt;/p&gt;

&lt;p&gt;Lets look at this example:&lt;/p&gt;

&lt;p&gt;User types "hello" message, this ends up in GenServer that sends it in rabbitmq, RMQ is great piece of software, if somethings goes in it is very unlikely it will disappear, except when there is no memory in one of the nodes because of a bug in another queue that the consumer was not consuming, so now lets examine this "let it fail" thing. &lt;/p&gt;

&lt;p&gt;What exactly can fail?&lt;/p&gt;

&lt;p&gt;Nothing really.. what about we just write the message in the database and return&lt;br&gt;
ok or error to the user?&lt;/p&gt;

&lt;p&gt;We had so many outages because the data model has to be very relaxed in order to support the "let it fail" thing, and so often we ended up with partial data in the database..&lt;/p&gt;

&lt;p&gt;Checkout &lt;a href="https://dev.to/rekki/mutation-is-life-boring-technology-11h0"&gt;https://dev.to/rekki/mutation-is-life-boring-technology-11h0&lt;/a&gt; for example&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#hot-code-reloading"&gt;
  &lt;/a&gt;
  hot code reloading
&lt;/h2&gt;

&lt;p&gt;For me this is complete myth, to build a robust hot code reloading deployment pipeline requires enormous amount of effort. To properly handoff and transform state properly..&lt;/p&gt;

&lt;p&gt;Its ok if you want to replace one module or so, or for some prod debugging.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;Runtime performance wise it is slow, about 2-3 times slower than go, and 4-5 than c, which is OK for most things, unless you want to rank a million items with some semi complicated formula, and at point you will have to scatter gather.&lt;/p&gt;

&lt;p&gt;Compile time.. omg it is horrible, like early rust horrible.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#type-safety"&gt;
  &lt;/a&gt;
  Type Safety
&lt;/h2&gt;

&lt;p&gt;We had to have huge amount of useless tests just to avoid having typos.. typos I repeat. Its like perl without strict. Running the linter is slower than flow. Of course we use typespec and etc, it just has the same problem as flow, things become &lt;code&gt;any&lt;/code&gt; fast, and &lt;code&gt;any&lt;/code&gt; spreads like a virus.&lt;/p&gt;

&lt;p&gt;And worse you cant delete &lt;em&gt;anything&lt;/em&gt;, first the tests will fail, and then even when you fix them you have no confidence your changes are good. Of course typesafe code does not guarantee things are ok, but I have seen elixir bugs that are just pathetic for year 2020.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reading-and-writing-code"&gt;
  &lt;/a&gt;
  Reading and Writing code
&lt;/h2&gt;

&lt;p&gt;This is personal now, some people like it some dont, I wont make strong argument, for me reading clojure is 10x faster than reading elixir, but I also used clojure more.&lt;/p&gt;

&lt;p&gt;The problem is it has steep learning curve, you cant get a js dev and ask him to change elixir code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#scale"&gt;
  &lt;/a&gt;
  Scale
&lt;/h2&gt;

&lt;p&gt;Do you really think the issues with our scale will be bound to elixir? Most companies will be fine by using bash+netcat webservers. &lt;/p&gt;

&lt;p&gt;This is a joke obviously nobody should do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;while true; do 
  echo -ne "HTTP/1.0 200 OK\r\nContent-Length: 5\r\n\r\nhello" | nc -l -p 8080
done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#concurrency"&gt;
  &lt;/a&gt;
  Concurrency
&lt;/h2&gt;

&lt;p&gt;What concurrency? Most languages are ok with that, elixir is no better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-developers"&gt;
  &lt;/a&gt;
  Finding developers
&lt;/h2&gt;

&lt;p&gt;IDK, now its hard to find any kind of developers, but choosing niche language makes it even harder. Also people join just because of the tech, which is not good.&lt;/p&gt;




&lt;p&gt;So since we wanted to unblock the frontend, and simplify the action-at-a-distance architecture, I had few reasonable choices, go and java amongst the top on the list, and since it is just easier to write ok-ish code in go than in java, I chose go.&lt;/p&gt;

&lt;p&gt;So now we are a go shop, we have 20-30 services, each dev can make their own service and deploy it. &lt;/p&gt;

&lt;p&gt;Things are pretty nice. I can say, after 1 year, it was a &lt;em&gt;huge&lt;/em&gt; enabler and multiplier of people, I don't think we would've done half the things we did have we not switched, and the cost of switching was pretty small.&lt;/p&gt;

&lt;p&gt;Go has its baggage as well.. but at least we can delete it.&lt;/p&gt;

</description>
      <category>go</category>
      <category>elixir</category>
    </item>
    <item>
      <title>How to create server of files with FastAPI</title>
      <author>Nelson Adonis Hernandez</author>
      <pubDate>Fri, 30 Jul 2021 16:09:04 +0000</pubDate>
      <link>https://dev.to/nelsoncode/how-to-create-server-of-files-with-fastapi-47d0</link>
      <guid>https://dev.to/nelsoncode/how-to-create-server-of-files-with-fastapi-47d0</guid>
      <description>&lt;p&gt;In this example I will show you how to upload, download, delete and obtain files with FastAPI&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-upload-files-by-form-data-using-fastapi"&gt;
  &lt;/a&gt;
  How to upload files by Form Data using FastAPI
&lt;/h3&gt;

&lt;p&gt;In the following code we define the file field, it is there where we will receive the file by Form Data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UploadFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/upload"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upload_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UploadFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(...)):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'wb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"filename"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AKP6Qpst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o16hh17wd69m7u9wka8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AKP6Qpst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o16hh17wd69m7u9wka8q.png" alt="Upload files to fastapi with postman"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-download-files-using-fastapi"&gt;
  &lt;/a&gt;
  How to download files using FastAPI
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getcwd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.responses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FileResponse&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/download/{name_file}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FileResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;media_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'application/octet-stream'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-get-files-using-fastapi"&gt;
  &lt;/a&gt;
  How to get files using FastAPI
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getcwd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.responses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FileResponse&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/file/{name_file}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FileResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-delete-files-using-fastapi"&gt;
  &lt;/a&gt;
  How to delete files using FastAPI
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.responses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSONResponse&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/delete/file/{name_file}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"removed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"removed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"error_message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"File not found"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>fastapi</category>
      <category>python</category>
      <category>backend</category>
    </item>
    <item>
      <title>Introducing the social image generator</title>
      <author>Siddharth</author>
      <pubDate>Fri, 30 Jul 2021 15:42:49 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/introducing-the-social-image-generator-bbp</link>
      <guid>https://dev.to/siddharthshyniben/introducing-the-social-image-generator-bbp</guid>
      <description>&lt;p&gt;Creating social images are a pain. I barely add any (just look through my posts and you'll know). But now, you can easily generate social sharing images using my &lt;a href="https://github.com/SiddharthShyniben/social-image-generator"&gt;generator&lt;/a&gt;. It's not a generator yet, more like a HTML generator where you screenshot the page.&lt;/p&gt;

&lt;p&gt;Wanna know how it looks? Check the social image of this post up ^ there. It supports tags, text, images, captions, and more to come soon!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>writing</category>
    </item>
    <item>
      <title>The Engineering Executive Operating System ‚Äî Part 2 </title>
      <author>Conor Bronsdon</author>
      <pubDate>Fri, 30 Jul 2021 15:39:56 +0000</pubDate>
      <link>https://dev.to/linearb/the-engineering-executive-operating-system-part-2-2heg</link>
      <guid>https://dev.to/linearb/the-engineering-executive-operating-system-part-2-2heg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-engineering-executive-operating-system-part-2"&gt;
  &lt;/a&gt;
  The Engineering Executive Operating System ‚Äî Part 2
&lt;/h2&gt;

&lt;p&gt;Today on the &lt;a href="https://devinterrupted.com/podcast/the-engineering-executive-operating-system-part-2"&gt;Dev Interrupted&lt;/a&gt;, we premiere the second and final episode in our two-part series with Tech Executive Consultant and author, Aviv Ben-Yosef.&lt;/p&gt;

&lt;p&gt;If you haven‚Äôt listened to the first episode, we highly recommend checking it out. Aviv is an expert at onboarding new employees, particularly those joining leadership positions.&lt;/p&gt;

&lt;p&gt;In episode 2 we discuss how leadership can provide a workplace culture where employees are encouraged to speak up and question leadership decisions as well as how to create high impact R&amp;amp;D organizations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://avivbenyosef.com/tech-executive-operating-system/"&gt;Get a sample chapter of Aviv‚Äôs book here.&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/6MrAOnueZ07n4KdjnXDx8M"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2-highlights-include"&gt;
  &lt;/a&gt;
  Part 2 Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Each member of a team becoming a force multiplier&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;‚ÄúChutzpah driven development‚Äù&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to have candid discussions between leadership and employees&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Providing a culture where employees can tell leadership they are wrong&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating high-impact R&amp;amp;D organizations and teams&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/H_oyLCAX2qw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-server"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Server
&lt;/h2&gt;

&lt;p&gt;With over 1400 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NISG-j8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2878/1%2ABAy13fLk6AB3z5sJNtmP4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NISG-j8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2878/1%2ABAy13fLk6AB3z5sJNtmP4g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/podcast/the-engineering-executive-operating-system-part-2"&gt;https://devinterrupted.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>management</category>
      <category>leadership</category>
      <category>devops</category>
      <category>agile</category>
    </item>
    <item>
      <title>Run a TypeScript type check in your pre-commit hook using lint-staged + husky</title>
      <author>Sam Jones</author>
      <pubDate>Fri, 30 Jul 2021 15:34:51 +0000</pubDate>
      <link>https://dev.to/samueldjones/run-a-typescript-type-check-in-your-pre-commit-hook-using-lint-staged-husky-30id</link>
      <guid>https://dev.to/samueldjones/run-a-typescript-type-check-in-your-pre-commit-hook-using-lint-staged-husky-30id</guid>
      <description>&lt;p&gt;A great way to prevent TypeScript compilation errors from bringing down your CI pipelines is to introduce a type check &lt;em&gt;before&lt;/em&gt; you commit your &lt;code&gt;.ts&lt;/code&gt; file changes. &lt;/p&gt;

&lt;p&gt;If you've worked with Git Hooks before, you'll probably know that one of the best combinations for running pre-commit checks is &lt;a href="https://typicode.github.io/husky/#/"&gt;husky&lt;/a&gt; and &lt;a href="https://github.com/okonet/lint-staged"&gt;lint-staged&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Together, these two packages allow you to tap into the relevant Git hook and run commands such as linting on &lt;em&gt;staged files only&lt;/em&gt;. It saves a bunch of debugging time by fixing preventable errors sooner in the development process.&lt;/p&gt;

&lt;p&gt;As a separate step, if you want to check for TypeScript type errors (note: this is different to syntax errors which ESLint picks up and fixes for you), you would typically run a command in the CLI such as &lt;code&gt;npx tsc --noEmit&lt;/code&gt; to compile the TypeScript and highlight any type errors to address.&lt;/p&gt;

&lt;p&gt;Now, the best case scenario here is that you simply pop the above TypeScript command into your lint-staged config along with anything else e.g. ESLint, and you're good to go! &lt;/p&gt;

&lt;p&gt;Oh no, it doesn't quite work as expected. The error message that you may come across looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Option 'project' cannot be mixed with source files on a command line.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The issue I found - and at the time of writing, &lt;a href="https://github.com/microsoft/TypeScript/issues/27379#issuecomment-425245572"&gt;it is still being discussed&lt;/a&gt; - is that lint-staged would pass each staged file to the &lt;code&gt;npx tsc&lt;/code&gt; command like &lt;code&gt;npx tsc --noEmit file1.ts file2.ts&lt;/code&gt; and that causes TypeScript to simply ignore your &lt;code&gt;tsconfig.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Super frustrating!&lt;/p&gt;

&lt;p&gt;Fear not however, as there is an extremely helpful tool that runs &lt;code&gt;tsc&lt;/code&gt; on specific files &lt;em&gt;without&lt;/em&gt; ignoring tsconfig.json and it's called &lt;a href="https://www.npmjs.com/package/tsc-files"&gt;tsc-files&lt;/a&gt;. As the tool's author points out:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I wanted to type-check only the staged files with lint-staged.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Perfect for my use case. So, after a quick look at the docs, it was as simple as updating the lint-staged config in my &lt;code&gt;package.json&lt;/code&gt; file to use the &lt;code&gt;tsc-files&lt;/code&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "husky": {
    "pre-commit": "lint-staged"
  },
  "lint-staged": {
    "**/*.ts": "tsc-files --noEmit"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Now I am able to run a TypeScript type check on all my staged files using a pre-commit hook.&lt;/p&gt;

&lt;p&gt;Tip: use the &lt;code&gt;--pretty&lt;/code&gt; flag in the &lt;code&gt;tsc&lt;/code&gt; command to add some formatting and colour to your type errors.&lt;/p&gt;

&lt;p&gt;If you have any questions on this setup or have tried different approaches, feel free to comment below or start up a convo over on &lt;a href="https://twitter.com/samueldjones"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading üëã &lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>git</category>
    </item>
    <item>
      <title>What are the key fundamental skills to learn to become a Backend Engineer? Check out this Youtube Channel </title>
      <author>Anthony BeckfordüöÄ</author>
      <pubDate>Fri, 30 Jul 2021 15:29:00 +0000</pubDate>
      <link>https://dev.to/abeck617/what-are-the-key-fundamental-skills-to-learn-to-become-a-backend-engineer-check-out-this-youtube-channel-4obp</link>
      <guid>https://dev.to/abeck617/what-are-the-key-fundamental-skills-to-learn-to-become-a-backend-engineer-check-out-this-youtube-channel-4obp</guid>
      <description>&lt;p&gt;I have decided to start a blog series on the skills to learn to become a backend engineer. I have started out as a front-end engineer but looking to expand my skills to learn more about backend engineering&lt;/p&gt;

&lt;p&gt;I found this awesome YouTube channel called Hussein Nasser and he talks about different topics regarding backend engineering. In the video that I have watched (&lt;a href="https://www.youtube.com/watch?v=V3ZPPPKEipA&amp;amp;list=PLQnljOFTspQUNnO4p00ua_C5mKTfldiYT&amp;amp;index=1"&gt;https://www.youtube.com/watch?v=V3ZPPPKEipA&amp;amp;list=PLQnljOFTspQUNnO4p00ua_C5mKTfldiYT&amp;amp;index=1&lt;/a&gt;) he mentions some skills to learn for backend engineering. Here are some things he mentioned:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Communication Protocols: Learning the basics of the communication protocols (low level) ex. TCP and UDP to higher level (HTTP), Web Sockets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web Servers: Have the ability to serve content (Static, Caching, Dynamic). Learn the types of web servers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Database Engineering: Relational &amp;amp; Non-Relational Databases&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Proxies: Reverse Proxies, Load balances (Huge Potential)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Caching: Caching Layers, Statefull vs Stateless Caching&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Messaging Systems: Message queue, Pub/Sub &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web API Frameworks: (Node.JS, Django, Express)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Message Formats: JSON &amp;amp; protobuf &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Security: TLS, Encryption, Firewalls &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most important thing to take away is that you aren't going to be an expert at everything. Pick a few topics and dive deep into it.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Unboxing a Database-How Databases Work Internally</title>
      <author>Elegberun Olugbenga</author>
      <pubDate>Fri, 30 Jul 2021 15:23:53 +0000</pubDate>
      <link>https://dev.to/gbengelebs/unboxing-a-database-how-databases-work-internally-155h</link>
      <guid>https://dev.to/gbengelebs/unboxing-a-database-how-databases-work-internally-155h</guid>
      <description>&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@nuvaproductions?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Javier Miranda&lt;/a&gt; on &lt;a href="https://unsplash.com/@nuvaproductions?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Databases are one of those abstract, mysterious things that "just work" when you run an insert statement, where's the data stored?. How is it stored? Why are queries so fast? What's underneath the black box of a database? Sometimes it all just feels like magic. &lt;/p&gt;

&lt;p&gt;It's 1 am in Lagos and I can't sleep. I pick up my phone and head to Google to help me demystify this black box. The next words you read are my attempt to unbox a database.&lt;/p&gt;

&lt;p&gt;My focus on this article will be on SQL databases but I believe the underlying concepts can be passed to other types of databases. Before we go on let us define some terms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h2&gt;

&lt;p&gt;A database is a set of physical files(data) on a hard disk stored and accessed electronically from a computer system. Usually created by the &lt;strong&gt;CREATE DATABASE&lt;/strong&gt; statement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-management-system"&gt;
  &lt;/a&gt;
  Database management system
&lt;/h2&gt;

&lt;p&gt;A database management system is software that handles the storage, retrieval, and updating of data in a computer system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQwsHzn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86sxwxawaoacafgf470t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQwsHzn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86sxwxawaoacafgf470t.png" alt="dbms"&gt;&lt;/a&gt;&lt;/p&gt;
Popular database management systems



&lt;h2&gt;
  &lt;a href="#database-engine"&gt;
  &lt;/a&gt;
  Database engine
&lt;/h2&gt;

&lt;p&gt;A database engine is the underlying software component that a database management system uses to create, read, update and delete data from a database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-difference-between-a-database-management-system-and-a-database-engine"&gt;
  &lt;/a&gt;
  What is the difference between a database management system and a database engine?
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;database management&lt;/strong&gt; system is the software with its functions that allow us to connect to a &lt;strong&gt;database engine&lt;/strong&gt;. The database engines are the internal tools that allow or facilitate a certain number of operations on the tables and their data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-a-database-management-system-store-data"&gt;
  &lt;/a&gt;
  How does a database management system store data?
&lt;/h2&gt;

&lt;p&gt;Most database management systems store data in files. MySQL for example stores data in files in a specific directory that has the system variable "datadir". Opening a MySQL console and running the following command will tell you exactly where the folder is located.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql&amp;gt;  SHOW VARIABLES LIKE 'datadir';
+---------------+-----------------+
| Variable_name | Value           |
+---------------+-----------------+
| datadir       | /var/lib/mysql/ |
+---------------+-----------------+
1 row in set (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;a href="https://stackoverflow.com/questions/10378693/how-does-mysql-store-data"&gt;stack overflow answer&lt;/a&gt; explains it really well.&lt;/p&gt;

&lt;p&gt;As you can see from the above command, my "datadir" was located in /var/lib/mysql/. The location of the "datadir" may vary in different systems. The directory contains folders and some configuration files. Each folder represents a MySQL database and contains files with data for that specific database, below is a screenshot of the "datadir" directory in my system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GG5qdLFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otqaz8lnxwoz2dajmdr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GG5qdLFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otqaz8lnxwoz2dajmdr7.png" alt="mysql"&gt;&lt;/a&gt;&lt;/p&gt;
a data dir folder in a system



&lt;p&gt;Each folder in the directory represents a MySQL database. Each database folder contains files that represent the tables in that database. There are two files for each table, one with a .frm extension and the other with a .idb extension. See the screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YLFdTIy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4m1q0u99tt8rezjjcq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YLFdTIy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4m1q0u99tt8rezjjcq9.png" alt="mysql2"&gt;&lt;/a&gt;&lt;/p&gt;
Files in a database folder



&lt;ul&gt;
&lt;li&gt;The .frm table file stores the table's format. &lt;a href="https://dev.mysql.com/doc/internals/en/frm-file-format.html"&gt;Details: MySQL .frm File Format&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The .ibd file stores the table's data. &lt;a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-multiple-tablespaces.html"&gt;Details: InnoDB File-Per-Table Tablespaces&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we insert a record into a table we are actually inserting into a datafile. A page (representing the rows of the table)is created in that datafile. By default, all datafiles have a page size of 16KB, you can reduce or increase the page size depending on the database engine you are using.&lt;/p&gt;

&lt;p&gt;As more and more records are inserted into the table(datafile) several data pages are created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-pages-relate-to-table-rows"&gt;
  &lt;/a&gt;
  How Pages Relate to Table Rows
&lt;/h2&gt;

&lt;p&gt;The maximum row length is slightly less than half a database page. For example, the maximum row length is slightly less than 8KB for the default 16KB InnoDB page size. For 64KB pages, the maximum row length is slightly less than 16KB.&lt;/p&gt;

&lt;p&gt;If a row does not exceed the maximum row length, all of its data is stored locally within the page. If a row exceeds the maximum row length the database engine stores a 20-byte pointer to the next page locally in the row, and stores the remaining rows externally in overflow pages.&lt;/p&gt;

&lt;p&gt;These two articles do a wonderful job of describing how data pages look in sql server. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.c-sharpcorner.com/UploadFile/ff0d0f/how-sql-server-stores-data-in-data-pages-part-1/"&gt;how-sql-server-stores-data-in-data-pages-part1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.c-sharpcorner.com/UploadFile/ff0d0f/how-sql-server-stores-data-in-data-pages-part-2/"&gt;how-sql-server-stores-data-in-data-pages-part2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us assume we have a table(tblEmployees) and we insert a single record into it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;INSERT&lt;/span&gt; &lt;span class="n"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;tblEmployees&lt;/span&gt; &lt;span class="nf"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;Abhishek&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a sample data page of that insertion into the datafile. It is divided into 3 main sections&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#section-1page-header"&gt;
  &lt;/a&gt;
  Section 1:Page Header
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9A7BQTjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hmh4p65rcqnj85epihc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9A7BQTjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hmh4p65rcqnj85epihc.jpeg" alt="page-header"&gt;&lt;/a&gt;&lt;/p&gt;
Page Header



&lt;ul&gt;
&lt;li&gt;m_type =1 indicates that it is a data page.&lt;/li&gt;
&lt;li&gt;m_nextpage: This is the link to the memory location of the next data page that will be created, in this case, we have a single data page so it is(0:0).&lt;/li&gt;
&lt;li&gt;m_Prevpage: This is the link to the memory location of the previous data page. Since we have a single data page the value is(0:0). &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#section-2actual-data"&gt;
  &lt;/a&gt;
  Section 2:Actual Data
&lt;/h3&gt;

&lt;p&gt;The actual data that we insert into our table is stored in this section. If you remember, we inserted 1 record with an employee named "Abhishek". That record will be saved here, in this section as shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NmcIdo9R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnmrbzwtu5xun058tv07.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NmcIdo9R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnmrbzwtu5xun058tv07.jpeg" alt="actual-data"&gt;&lt;/a&gt;&lt;/p&gt;
Actual Data



&lt;ul&gt;
&lt;li&gt;Record Type = PRIMARY_RECORD, which means it's our actual data.&lt;/li&gt;
&lt;li&gt;Memory Dump = This points to the Actual data's location in memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#section-3offset-table"&gt;
  &lt;/a&gt;
  Section 3:Offset Table
&lt;/h3&gt;

&lt;p&gt;Offset Table: This section of the data file tells you where the record Abhishek is saved exactly in memory.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFNYUJE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxp7ska6onsxbztdwvw2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFNYUJE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxp7ska6onsxbztdwvw2.jpeg" alt="offset-table"&gt;&lt;/a&gt;&lt;/p&gt;
Offset Table



&lt;p&gt;If you see the row offset, it's pointing to the actual data's location.&lt;/p&gt;

&lt;p&gt;These diagrams show how rows are stored in a  datafile.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-does-indexing-work"&gt;
  &lt;/a&gt;
  How does indexing work?
&lt;/h2&gt;

&lt;p&gt;A database index is a data structure that improves the speed of data retrieval operations on a database table.&lt;/p&gt;

&lt;p&gt;Indexing is the way to get an unordered table into an order that will maximize the query efficiency. A Clustered Index is a special type of index that reorders the way records in the table are physically stored on the disk. So how does it work?&lt;/p&gt;

&lt;p&gt;In reality, the database table does not reorder itself every time the query conditions change to optimize the query performance, what happens is that when you create an index you cause the database to create a data structure which in most cases is likely to be a B+Tree. The main advantage of this data structure is that it is sortable and this makes our search more efficient.&lt;/p&gt;

&lt;p&gt;A B+Tree is a type of dictionary, no more and no less. If you think about a linguistic dictionary, it's ordered by "words", and associated with each word is a definition. You look up a word and get a definition.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IaHANN8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yrqlqco1psk4ex01zpi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IaHANN8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yrqlqco1psk4ex01zpi.jpg" alt="Indexed Dictionary"&gt;&lt;/a&gt;&lt;/p&gt;
An Indexed Dictionary



&lt;p&gt;So the context of a map data structure is that you have keys ("words") and you want to map this to values ("definitions").&lt;/p&gt;

&lt;p&gt;B+trees have an advantage for certain types of queries. For example, you can do range queries, say if you want to find all entries where the key is between two values (e.g. all words in the dictionary starting with "q").&lt;/p&gt;

&lt;p&gt;B+trees are page-structured (meaning they can be implemented on top of fixed-size disk pages; which minimizes the number of disk accesses needed to perform a query.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Let us assume we have a table called Employee_Detail. We can create a clustered index with the following command on the Emp_Iid column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Create Clustered Index My_ClusteredIndex  
on Employee_Detail(Emp_Iid) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's insert some records&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Head over to this &lt;a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html"&gt;site&lt;/a&gt; and insert records from 1 to 6 simulating how records will be inserted in a database. You will see how the tree automatically adjusts as records are being inserted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Another thing to note the data value locations never change but the (pointers to those values are the ones that are constantly shifting).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The B+Tree will be formed like this. - The center point of the records which in our case is 3 will be the head node. All the Ids that are lower than 3 will be moved to the left and the Ids greater than 3 to the right as shown in this diagram.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOOzUrI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8ahdte53ai5d1vshxwv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOOzUrI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8ahdte53ai5d1vshxwv.png" alt="btree"&gt;&lt;/a&gt;&lt;/p&gt;
BTree Visualized



&lt;p&gt;The left side value of each node is always less than the node itself and the right-side value is always greater than the node. The last set of values are called leaf nodes and they contain the actual data value while the intermediate rows hold pointers to the actual data value location.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Think of it like a dictionary that contains a name tag. All the words with "c" are labeled under the "c" tag. words higher than "c" are shifted to the right and words lower than "c" to the left. The tag "c" does not contain the value but a (pointer) to the actual words&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;From the earlier explanation on how SQL stores data in data pages we can infer that the leaf nodes represent data pages containing the table rows. &lt;/p&gt;

&lt;p&gt;If we want to get the employees where Emp_Iid is 4.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;select * from employee_Detail where Emp_Iid=4  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a normal case, the system will perform 4 comparisons, the first for 1, the second for 2, and the third for 3  and in the fourth comparison, it will find the desired result.&lt;/p&gt;

&lt;p&gt;Using an index, the system only does a single comparison because 3 is the head node of the B+Tree and it knows that 4 is greater than 3 so the record will be on the right. Once it checks the next key It will find a pointer to the data value 4 which is the value that is being requested.&lt;/p&gt;

&lt;p&gt;From this example, we can say that by using an index we can increase the speed of data retrieval.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components-of-a-database-engine"&gt;
  &lt;/a&gt;
  Components of a Database Engine
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eveqe-In--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0wqk2vpxfvi7br0dvce.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eveqe-In--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0wqk2vpxfvi7br0dvce.png" alt="database-engine"&gt;&lt;/a&gt;&lt;/p&gt;
Components of a database engine



&lt;p&gt;All SQL database engines have a compiler to translate the SQL statement into byte code and a virtual machine to evaluate the byte code. &lt;/p&gt;

&lt;p&gt;The RDBMS processes the SQL statement by:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Parsing&lt;/strong&gt;: Validates the statement by checking the SQL statement against the system‚Äôs catalog and seeing if these databases, tables, and columns that the user wants exist, and if the user has privileges to execute the SQL query.&lt;br&gt;
Under the parsing stage, there is a syntax check, semantic check, and shared pool check.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#syntax-check"&gt;
  &lt;/a&gt;
  Syntax check
&lt;/h3&gt;

&lt;p&gt;A statement that breaks a rule for well-formed SQL syntax fails the check. For example, the following statement fails because the keyword FROM is misspelled as FORM:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SQL&amp;gt; SELECT * FORM employees;
SELECT * FORM employees
         *
ERROR at line 1:
ORA-00923: FROM keyword not found where expected
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#semantic-check"&gt;
  &lt;/a&gt;
  Semantic Check
&lt;/h3&gt;

&lt;p&gt;The semantics of a statement is its meaning. A semantic check determines whether a statement is meaningful, for example, whether the objects and columns in the statement exist.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SQL&amp;gt; SELECT * FROM nonexistent_table;
SELECT * FROM nonexistent_table
              *
ERROR at line 1:
ORA-00942: table or view does not exist

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#shared-pool-check"&gt;
  &lt;/a&gt;
  Shared Pool Check
&lt;/h3&gt;

&lt;p&gt;During the parse, the database performs a shared pool check to determine whether it can skip resource-intensive steps of statement processing.&lt;/p&gt;

&lt;p&gt;To this end, the database uses a hashing algorithm to generate a hash value for every SQL statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Compiling (Binding)&lt;/strong&gt;: Generates a query plan for the statement which is the binary representation of the steps required to carry out the statement. In almost all SQL engines, it will be byte code. What has now been compiled is a command-line shell ‚Äî a program that reads SQL statements and now sends them to the database server for optimization and execution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.Optimizing&lt;/strong&gt;: Optimizes the query plan and chooses the best algorithms such as for searching and sorting. This feature is called the Query Optimizer. The Query Optimizer devises several possible ways to execute the query i.e. several possible execution plans. An execution plan is, in essence, a set of physical operations (an index seek, a nested loop join, and so on) to be performed.&lt;br&gt;
Once this is done, we now have a prepared SQL statement.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;This example shows the execution plan of a SELECT statement when AUTOTRACE is enabled. The statement selects the last name, job title, and department name for all employees whose last names begin with the letter A.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT e.last_name, j.job_title, d.department_name 
FROM   hr.employees e, hr.departments d, hr.jobs j
WHERE  e.department_id = d.department_id
AND    e.job_id = j.job_id
AND    e.last_name LIKE 'A%';

Execution Plan
----------------------------------------------------------
Plan hash value: 975837011

--------------------------------------------------------------------------------
| Id| Operation                     | Name        |Rows|Bytes|Cost(%CPU)|Time  |
-------------------------------------------------------------------------------------
| 0 | SELECT STATEMENT              |             |  3 | 189 | 7(15)| 00:00:01 |
|*1 |  HASH JOIN                    |             |  3 | 189 | 7(15)| 00:00:01 |
|*2 |   HASH JOIN                   |             |  3 | 141 | 5(20)| 00:00:01 |
| 3 |    TABLE ACCESS BY INDEX ROWID| EMPLOYEES   |  3 |  60 | 2 (0)| 00:00:01 |
|*4 |     INDEX RANGE SCAN          | EMP_NAME_IX |  3 |     | 1 (0)| 00:00:01 |
| 5 |    TABLE ACCESS FULL          | JOBS        | 19 | 513 | 2 (0)| 00:00:01 |
| 6 |   TABLE ACCESS FULL           | DEPARTMENTS | 27 | 432 | 2 (0)| 00:00:01 |
-------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
--------------------------------------------------------

   1 - access("E"."DEPARTMENT_ID"="D"."DEPARTMENT_ID")
   2 - access("E"."JOB_ID"="J"."JOB_ID")
   4 - access("E"."LAST_NAME" LIKE 'A%')
       filter("E"."LAST_NAME" LIKE 'A%')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4.Executing&lt;/strong&gt;: The RDBMS executes the SQL statement by running the query plan.&lt;/p&gt;

&lt;p&gt;For an in-depth view, check out this &lt;a href="https://docs.oracle.com/database/121/TGSQL/tgsql_sqlproc.htm#TGSQL186"&gt;tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;This article has covered a lot of ground, but by now you should have an understanding (or at least an appreciation) of the components and processes that form the databases we use every day.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;p&gt;Follow me here and across my social media for more content like this &lt;a href="https://www.linkedin.com/in/olugbenga-elegberun/"&gt;Linkedin&lt;/a&gt;. &lt;a href="https://twitter.com/ElegberunDaniel?s=09"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-more"&gt;
  &lt;/a&gt;
  REFERENCES AND MORE
&lt;/h2&gt;

&lt;p&gt;1.&lt;a href="https://blog.devgenius.io/how-a-sql-database-engine-works-c319200889d7"&gt;How a sql database engine works by Andres reyes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href="https://medium.com/@grepdennis/how-a-sql-database-engine-works-c67364e5cdfd"&gt;How a sql database engine works by Dennis Pham&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href="https://www.red-gate.com/simple-talk/databases/sql-server/performance-sql-server/the-sql-server-query-optimizer/"&gt;The sql server query optimizer by Benjamin Nevarez&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href="https://www.freecodecamp.org/news/database-indexing-at-a-glance-bb50809d48bd/"&gt;An in-depth look at Database Indexing by Kousik Nath&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href="https://dzone.com/articles/database-btree-indexing-in-sqlite"&gt;Database btree indexing in sqlite by Dhanushka Madushan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6.&lt;a href="https://www.sqlskills.com/blogs/paul/inside-the-storage-engine-using-dbcc-page-and-dbcc-ind-to-find-out-if-page-splits-ever-roll-back/"&gt;Inside the storage engine by Paul Randal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7.&lt;a href="https://cs.stackexchange.com/questions/27985/b-tree-and-how-it-is-used-in-practice"&gt;B-tree and how it is used in practice answered by Pseudonym&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8.&lt;a href="https://www.c-sharpcorner.com/UploadFile/f0b2ed/index-in-sql/"&gt;Index in sql by Pankaj Kumar Choudhary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;9.&lt;a href="https://www.c-sharpcorner.com/UploadFile/ff0d0f/how-sql-server-stores-data-in-data-pages-part-1/"&gt;How sql server stores data in data pages part 1 by Abhishek Yadav&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;10.&lt;a href="https://www.c-sharpcorner.com/UploadFile/ff0d0f/how-sql-server-stores-data-in-data-pages-part-2/"&gt;How sql server stores data in data pages part 2 by Abhishek Yadav&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;11.&lt;a href="https://docs.oracle.com/database/121/TGSQL/tgsql_sqlproc.htm#TGSQL186"&gt;SQL Processing by Oracle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;12.&lt;a href="https://stackoverflow.com/questions/2468202/how-does-a-sql-query-work"&gt;How does a sql query work by &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;13.&lt;a href="https://hackernoon.com/how-sql-database-engine-work-483e32o7"&gt;How sql database engine works by Vijay Singh Khatri&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>bigdata</category>
      <category>distributedsystems</category>
    </item>
    <item>
      <title>Fun with Compose: Bad UI in a Great Framework</title>
      <author>Michael Friend</author>
      <pubDate>Fri, 30 Jul 2021 15:03:14 +0000</pubDate>
      <link>https://dev.to/touchlab/fun-with-compose-bad-ui-in-a-great-framework-1b43</link>
      <guid>https://dev.to/touchlab/fun-with-compose-bad-ui-in-a-great-framework-1b43</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;To celebrate Jetpack Compose finally hitting 1.0, I wanted to take a bit of a deep dive to see what the framework has to offer. Instead of more of the same code labs with useful UI, I decided to bring back an old reddit trend of creating the absolute worst volume control UI possible (&lt;a href="https://uxdesign.cc/the-worst-volume-control-ui-in-the-world-60713dc86950"&gt;highlights here&lt;/a&gt;). You can take a look at the code on my Github. &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mrf7"&gt;
        mrf7
      &lt;/a&gt; / &lt;a href="https://github.com/mrf7/volume-gore"&gt;
        volume-gore
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-results"&gt;
  &lt;/a&gt;
  The Results
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Microtransactions&lt;/th&gt;
&lt;th&gt;Radio Buttons&lt;/th&gt;
&lt;th&gt;Catapult (WIP)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="https://i.giphy.com/media/gCeelw0MJgkjCQ7fiF/giphy.gif"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://i.giphy.com/media/qbKWJdGpLOBxZvR70o/giphy.gif"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://i.giphy.com/media/VWD8QmlLT0h2Ymw2kW/giphy.gif"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Digits Of PI&lt;/th&gt;
&lt;th&gt;Seven Segment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="https://i.giphy.com/media/8h1loDBBTvdzGyI3Re/giphy.gif"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://i.giphy.com/media/dLYhwt8pRCIQPwu30m/giphy.gif"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Takeaways
&lt;/h2&gt;

&lt;p&gt;As someone who‚Äôs never really been a fan of UI work, building UI in Compose has been extremely pleasant and straightforward. Things like custom animations that I haven't done in the View system were surprisingly simple and concise. With Compose I no longer need to context switch between writing Kotlin code and XML layouts, the flow between writing backend code and UI code is much more seamless. The best part was the often lauded &lt;code&gt;LazyColumn&lt;/code&gt; in compose that turns 3 files worth of boilerplate &lt;code&gt;RecyclerView&lt;/code&gt; code into a couple lines. While it took some effort to change my approach for the Compose mental model, this is a huge leap in the right direction towards making UI work quicker for experienced devs and easier for new devs to learn. &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons Learned
&lt;/h2&gt;

&lt;p&gt;A vital concept when learning Compose is how the runtime manages state and recomposition via &lt;code&gt;(Mutable)State&lt;/code&gt; objects. Most of the "magic" of recomposition relies on the &lt;code&gt;getValue&lt;/code&gt; and &lt;code&gt;setValue&lt;/code&gt; methods of these classes. and if you mistakenly go around these methods to read and update your apps state, you can actually prevent the UI from updating as you intended. &lt;/p&gt;

&lt;p&gt;I learned this the hard way while implementing the editable seven segment display by using a &lt;code&gt;MutableState&amp;lt;MutableList&amp;gt;&lt;/code&gt; and updating the underlying &lt;code&gt;MutableList&lt;/code&gt; values on user interaction (i.e. &lt;code&gt;state.value[index] = newValue&lt;/code&gt;). Desugaring that statement to &lt;code&gt;state.getValue()[index] = newValue&lt;/code&gt; we see that we're never calling &lt;code&gt;MutableState.setValue&lt;/code&gt;, so the Compose runtime has no indication of the underlying value change, never triggering a recomposition. On top of that, even if something else triggered a recomposition, the UI wouldn't be updated since we mutated the list without changing the reference, so the underlying equality check used to determine if our composable should run again  never detects a change.&lt;/p&gt;

&lt;p&gt;Luckily,Compose gives us a &lt;code&gt;mutableStateListOf(...)&lt;/code&gt; and &lt;code&gt;List.toMutableStateList()&lt;/code&gt; that return a &lt;code&gt;SnapshotStateList&lt;/code&gt;, which is a subclass of &lt;code&gt;MutableList&lt;/code&gt; (and equivalents for &lt;code&gt;Maps&lt;/code&gt;). That means we can just treat it as a  &lt;code&gt;MutableList&lt;/code&gt; and the state updates will be handled for us when we do things like &lt;code&gt;snapshotStateList[index]  = newValue&lt;/code&gt;. The main rule of thumb to learn from this is that in Compose you should avoid mutating objects you intend to use as a state and instead emit a brand new value to your LiveData/Flow/State using the &lt;code&gt;copy&lt;/code&gt; method on data classes. You can force this practice on yourself by avoiding &lt;code&gt;var&lt;/code&gt;s entirely in classes used for UI state. &lt;/p&gt;

&lt;p&gt;For a demonstration of this issue, here‚Äôs a snippet showing my initial &lt;code&gt;MutableList&lt;/code&gt; approach, a functional workaround I made using a list of mutable states, and the proper solution using &lt;code&gt;mutableStateListOf()&lt;/code&gt;. &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now that Compose is officially at 1.0, you should give it a shot ASAP. Wherever you update the state of your UI, keep an eye out for spots that mutate the value in the &lt;code&gt;State&lt;/code&gt; instead of the &lt;code&gt;State&lt;/code&gt; itself. Above all, don't be afraid to get creative and have fun when playing with compose, you might be surprised by the things you're able to make easily compared to the old View system. &lt;/p&gt;

</description>
      <category>android</category>
      <category>compose</category>
      <category>ux</category>
      <category>jetpackcompose</category>
    </item>
    <item>
      <title>Getting Started with Python Web Development. </title>
      <author>Mwenda Harun Mbaabu</author>
      <pubDate>Fri, 30 Jul 2021 14:59:41 +0000</pubDate>
      <link>https://dev.to/grayhat/getting-started-with-python-web-development-1jl9</link>
      <guid>https://dev.to/grayhat/getting-started-with-python-web-development-1jl9</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NUaZbPgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4xfy2nf4y2327ki8hi1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NUaZbPgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4xfy2nf4y2327ki8hi1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt; is an interpreted, object-oriented, high-level programming language with dynamic semantics. It has high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development, as well as for use as a scripting or glue language to connect existing components together. &lt;/p&gt;

&lt;p&gt;Python has a number of frameworks, all geared towards their particular brand of application development. In this boot camp we are going to specifically learn flask and FastAPI. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-framework"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Web Framework&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;web framework&lt;/strong&gt; is an architecture containing tools, libraries, and functionalities suitable to build and maintain massive web projects using a fast and efficient approach. &lt;br&gt;
They are designed to streamline programs and promote code reuse. &lt;br&gt;
To create the server-side of the web application, you need to use a server-side language. Python is home to numerous such frameworks, famous among which are Django, &lt;strong&gt;Flask&lt;/strong&gt; and &lt;strong&gt;FastAPI&lt;/strong&gt; .&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fastapi"&gt;
  &lt;/a&gt;
  &lt;strong&gt;FastAPI&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;From the official documentation, FastAPI is a modern [and] fast (high-performance) web framework for building APIs with Python 3.6+ based on standard Python type hints.&lt;br&gt;
As evident from the name, FastAPI is extremely fast and it owes this to the to out of the box support of the async feature of Python 3.6+. This is why it is recommended to use the latest versions of Python.&lt;br&gt;
A number of tech giants like Microsoft, Uber and Netflix are already using FastAPI to build their applications.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#key-features-of-fastapi"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Key features of FastAPI&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fast:&lt;/strong&gt; It offers very high performance, on par with NodeJS and Go (thanks to Starlette and Pydantic). It is considered to be one of the fastest Python frameworks available.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fast to code:&lt;/strong&gt; It increases the speed to develop applications by about 200% to 300%.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Intuitive:&lt;/strong&gt; It offers great editor support. The developer needs to spend less time debugging the code to verify whether the code syntax is correct or not.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Less bugs:&lt;/strong&gt; It reduces about 40% of human (developer) induced bugs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Easy:&lt;/strong&gt; It is designed to be easy to use and learn. Also, the official documentation is lucid and well structured and thus takes less time to read.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Short:&lt;/strong&gt; It supports minimize code duplication. It offers multiple features from each parameter declaration. It also has fewer bugs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Standards-based:&lt;/strong&gt; It is based on (and fully compatible with) the open standards for APIs, OpenAPI (previously known as Swagger) and JSON schema.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Robust:&lt;/strong&gt; Get production-ready code with automatic interactive documentation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#python-virtual-environments"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Python Virtual Environments.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is often useful to have one or more Python environments where you can experiment with different combinations of packages without affecting your main installation.&lt;br&gt;
 Python supports this through virtual environments. The virtual environment is a copy of an existing version of Python with the option to inherit existing packages.&lt;br&gt;
 A virtual environment is also useful when you need to work on a shared system and do not have permission to install packages as you will be able to install them in the virtual environment. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-a-python-virtual-environment"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creating a Python virtual environment.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1). Install the virtualenv package&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pip3&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2). Create the virtual environment,&lt;/strong&gt; for our case called dev.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3). Activate the virtual environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mac OS / Linux :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;\&lt;span class="n"&gt;Scripts&lt;/span&gt;\&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4). Deactivate the virtual environment.&lt;/strong&gt;&lt;br&gt;
To deactivate the virtual environment and use your original Python environment, simply type &lt;strong&gt;‚Äòdeactivate‚Äô.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deactivate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Python virtualenv documentation:&lt;/strong&gt; &lt;a href="https://docs.python.org/3/tutorial/venv.html"&gt;https://docs.python.org/3/tutorial/venv.html&lt;/a&gt;  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world-fastapi-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Hello World FASTAPI App&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_root&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"Message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#running-you-hello-world-program-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Running You Hello World program ü•≥ ü•≥ ü•≥ :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Make sure you have uvicord installed using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;uvicorn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;standard&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the server with a prompt to reload everytime you makes some changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;uvicorn&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;reload&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#more-fastapi-resources"&gt;
  &lt;/a&gt;
  &lt;strong&gt;More FastAPI Resources.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Working with templates:&lt;/strong&gt; 
&lt;a href="https://fastapi.tiangolo.com/advanced/templates/"&gt;https://fastapi.tiangolo.com/advanced/templates/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Working with static files:&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://fastapi.tiangolo.com/tutorial/static-files/"&gt;https://fastapi.tiangolo.com/tutorial/static-files/&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Deploying FastAPI service on Amazon Web Services:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://adem.sh/blog/tutorial-fastapi-aws-lambda-serverless"&gt;https://adem.sh/blog/tutorial-fastapi-aws-lambda-serverless&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#flask"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Flask&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Python &lt;strong&gt;Flask&lt;/strong&gt; Framework is a lightweight micro-framework based on Werkzeug, Jinja2.&lt;br&gt;
It is called a micro framework because it aims to keep its core functionality small yet typically extensible to cover an array of small and large applications. &lt;br&gt;
Flask Framework depends on two external libraries: The Jinja2 template, Werkzeug WSGI toolkit. &lt;/p&gt;

&lt;p&gt;Remember to use the virtual environment , and while inside your  virtual environment run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;  &lt;span class="n"&gt;flask&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pip3&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hello-world-flask-application"&gt;
  &lt;/a&gt;
  Hello World Flask Application
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, World!'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;____&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;___&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-creating-flask-app-object"&gt;
  &lt;/a&gt;
  &lt;strong&gt;- Creating Flask App Object.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;The Python flask module contains all the classes and functions needed for building a Flask app. The Flask class can be imported to create the main application object. It takes the name of the app as an argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Import Flask class
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="c1"&gt;# Create Flask object
&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-running-flask-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;- Running Flask App.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;A Flask app can be run by exporting the FLASK_APP environment variable and running flask run in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#creating-a-route"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creating a Route.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Routes in a Flask app can be created by defining a view function and associating a URL with it using the route() decorator. Routes specify how the Flask app handles requests it receives, such as what to display on the webpage at a certain URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, World!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#returning-html-from-route"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Returning HTML From Route.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;In a Flask app, HTML can be returned from a view function to be rendered on a webpage. The HTML can be returned as a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;h1&amp;gt;Hello, World!&amp;lt;/h1&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#variable-rules"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Variable Rules.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Variable rules allow a Flask app to respond to dynamic URLs. Variable sections of a URL can be indicated by angular brackets and an optional converter: &lt;a&gt;converter:variable_name&lt;/a&gt;. These variable parts will then be passed to the view function as arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/page/&amp;lt;int:pg_num&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pg_num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;h1&amp;gt;Displaying results for page &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;pg_num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;/h1&amp;gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#name-main"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;".&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‚Äù&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;____&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;___&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The conditional check if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;" simply checks if the script being executed is app.py.&lt;br&gt;
Say you created a script called utils.py that only contains print(&lt;strong&gt;name&lt;/strong&gt;). If you import utils.py into app.py and run app.py, the print statement from utils.py will output utils, which is the name of the file. &lt;br&gt;
In the case of app.py the name variable will be ‚Äúmain‚Äù.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Note:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;If you want to install Flask with support for async, use the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip3&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a view function using async:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/embed/&amp;lt;embed_id&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_embed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;embed_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;async_render_embed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;embed_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#caveat"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Caveat:&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Async support in flask comes as an add-on ü•≤.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>datascience</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>My solution for React Router type safety</title>
      <author>Leonid Fenko</author>
      <pubDate>Fri, 30 Jul 2021 14:52:48 +0000</pubDate>
      <link>https://dev.to/fenok/my-solution-for-react-router-type-safety-53hd</link>
      <guid>https://dev.to/fenok/my-solution-for-react-router-type-safety-53hd</guid>
      <description>&lt;p&gt;I like my code fully typed. Unfortunately, type safety for route parameters has never been a strong suit of React Router.&lt;/p&gt;

&lt;p&gt;If all you need is to build a path with parameters, the use of &lt;a href="https://reactrouter.com/web/api/generatePath"&gt;generatePath&lt;/a&gt; will give you some typing, albeit &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/issues/52914"&gt;not perfect&lt;/a&gt;. However, there is no built-in way to build a query or a hash, let alone type them, and there is no type safety for a route state either.&lt;/p&gt;

&lt;p&gt;Things get even worse when it comes to parsing. There is no built-in way to parse a query or a hash, and all typing is almost exclusively done by casting, which is error-prone.&lt;/p&gt;

&lt;p&gt;There are some libraries for providing this type safety, but they are more or less incomplete and restrictive. The best I've seen so far is &lt;a href="https://www.npmjs.com/package/typesafe-routes"&gt;typesafe-routes&lt;/a&gt;, but it offers no type safety for a route state and a hash, and it puts restrictions on what paths can be used. For instance, it doesn't support custom regexps for parameters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;Enter &lt;a href="https://www.npmjs.com/package/react-router-typesafe-routes"&gt;react-router-typesafe-routes&lt;/a&gt;. It tries to be as comprehensive, extensible, and non-restrictive as possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#route-definition"&gt;
  &lt;/a&gt;
  Route definition
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-typesafe-routes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./path/to/state&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/path/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are several helpers for processing different parts of a route:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;path&lt;/code&gt; uses &lt;a href="https://reactrouter.com/web/api/generatePath"&gt;generatePath&lt;/a&gt; to build a path string, making it possible to use any path template that's compatible with React Router. When it comes to parsing, React Router extracts params from a path string, and &lt;code&gt;path&lt;/code&gt; performs various checks on these params to ensure that they belong to the specified path template. By default, &lt;code&gt;path&lt;/code&gt; infers types of path params from a path template in the same way as &lt;a href="https://reactrouter.com/web/api/generatePath"&gt;generatePath&lt;/a&gt; does.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;query&lt;/code&gt; uses (configurable!) &lt;a href="https://www.npmjs.com/package/query-string"&gt;query-string&lt;/a&gt; to build and parse a query string. By default, &lt;code&gt;query&lt;/code&gt; uses the same types for query params as &lt;a href="https://www.npmjs.com/package/query-string"&gt;query-string&lt;/a&gt; does.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;hash&lt;/code&gt; just takes care of the &lt;code&gt;#&lt;/code&gt; symbol while building and parsing a hash string. By default, &lt;code&gt;hash&lt;/code&gt; uses the &lt;code&gt;string&lt;/code&gt; type for a hash.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;state&lt;/code&gt; is an ad-hoc helper written by the user. The library doesn't provide a generic helper for route state processing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As expected, the types can be improved:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-typesafe-routes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/path/:id(&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;d+)?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;optional&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;optional&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="c1"&gt;// Use "" as a fallback&lt;/span&gt;
    &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;subscribe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;param&lt;/code&gt; helper defines a set of transformers that transform values while building and parsing. The built-in transformers are &lt;code&gt;param.string&lt;/code&gt;, &lt;code&gt;param.number&lt;/code&gt;, &lt;code&gt;param.boolean&lt;/code&gt;, &lt;code&gt;param.null&lt;/code&gt;, &lt;code&gt;param.date&lt;/code&gt;, &lt;code&gt;param.oneOf()&lt;/code&gt;, and &lt;code&gt;param.arrayOf()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;optional&lt;/code&gt; modifier means that the corresponding value can be &lt;code&gt;undefined&lt;/code&gt;. An unsuccessful parsing of an &lt;code&gt;optional&lt;/code&gt; parameter will also result in &lt;code&gt;undefined&lt;/code&gt;. It's possible to specify a fallback value that will be returned instead of &lt;code&gt;undefined&lt;/code&gt;. This should be particularly useful for query params.&lt;/p&gt;

&lt;p&gt;Note that query params are &lt;code&gt;optional&lt;/code&gt; by their nature. React Router doesn't consider the query part on route matching, and the app shouldn't break in case of manual URL changes.&lt;/p&gt;

&lt;p&gt;The transformers are very permissive. It's possible to (natively!) store arrays in a query and even in a path, and it's possible to write custom transformers for storing any serializable data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#route-usage"&gt;
  &lt;/a&gt;
  Route usage
&lt;/h3&gt;

&lt;p&gt;Use &lt;code&gt;Route&lt;/code&gt; components as usual:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./path/to/routes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use &lt;code&gt;Link&lt;/code&gt; components as usual:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./path/to/routes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Everything is fully typed!&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strawberries&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buildLocation&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;private&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strawberries&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parse params with usual hooks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./path/to/routes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// You can use useRouteMatch() instead of useParams()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parse only what you need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./path/to/routes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Again, you can also use useRouteMatch()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parsePath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parseQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parseHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parseState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;p&gt;A more detailed description is available at the &lt;a href="https://github.com/fenok/react-router-typesafe-routes#readme"&gt;project page&lt;/a&gt;. The library requires battle-testing and has yet to reach version &lt;code&gt;1.0.0&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
