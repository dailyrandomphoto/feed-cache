<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Master useful CSS pseudo-classes</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 23 May 2021 02:36:02 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/master-useful-css-pseudo-classes-lh2</link>
      <guid>https://dev.to/ruppysuppy/master-useful-css-pseudo-classes-lh2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-are-css-raw-pseudoclasses-endraw-"&gt;
  &lt;/a&gt;
  What are &lt;strong&gt;CSS&lt;/strong&gt; &lt;code&gt;pseudo-classes&lt;/code&gt;?
&lt;/h1&gt;

&lt;p&gt;A &lt;strong&gt;CSS&lt;/strong&gt; &lt;code&gt;pseudo-class&lt;/code&gt; is a selector which specifies a specific state of the &lt;em&gt;selected element&lt;/em&gt;. For example &lt;code&gt;:hover&lt;/code&gt; enables the developer to target the state when an element is being hovered.&lt;/p&gt;

&lt;p&gt;In this article, we will cover some helpful &lt;code&gt;Pseudo Classes&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hover"&gt;
  &lt;/a&gt;
  Hover
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;:hover&lt;/code&gt; is probably the most used &lt;code&gt;pseudo-class&lt;/code&gt; in &lt;strong&gt;CSS&lt;/strong&gt;. It selects the state of the element when the user hovers over it using a pointing device, like a mouse.&lt;/p&gt;

&lt;p&gt;If you are looking to create the hover effect in the demo, you might like &lt;a href="https://dev.to/ruppysuppy/advanced-hover-effect-to-wow-your-visitors-58a3"&gt;this article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ruppysuppy/embed/GRrbyXa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#focus"&gt;
  &lt;/a&gt;
  Focus
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;:focus&lt;/code&gt; is used to select the state of an element when the user selects it. To use this &lt;code&gt;pseudo-class&lt;/code&gt;, you need a selectable component, like a &lt;em&gt;button&lt;/em&gt; or an &lt;em&gt;input&lt;/em&gt;, or manually convert it to a tab-able element using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex"&gt;tabindex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ruppysuppy/embed/RwppGyZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#checked"&gt;
  &lt;/a&gt;
  Checked
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;:checked&lt;/code&gt; targets radio and checkbox inputs when they are checked or toggled.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ruppysuppy/embed/gOmmwyz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#enabled-and-disabled"&gt;
  &lt;/a&gt;
  Enabled and Disabled
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;:enabled&lt;/code&gt; and &lt;code&gt;:disabled&lt;/code&gt; are employed to select the state of an input element when it is enabled and disabled.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ruppysuppy/embed/vYxxXaZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#valid-and-invalid"&gt;
  &lt;/a&gt;
  Valid and Invalid
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;:valid&lt;/code&gt; and &lt;code&gt;:invalid&lt;/code&gt; target input elements whose input text are valid and invalid.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ruppysuppy/embed/GRWWjwy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#root"&gt;
  &lt;/a&gt;
  Root
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;:root&lt;/code&gt; &lt;strong&gt;CSS&lt;/strong&gt; &lt;code&gt;pseudo-class&lt;/code&gt; matches the root element of a tree representing the document. In &lt;strong&gt;HTML&lt;/strong&gt;, &lt;code&gt;:root&lt;/code&gt; represents the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element and is identical to the selector &lt;code&gt;html&lt;/code&gt;, except that its specificity is higher. It is frequently used to add &lt;strong&gt;CSS&lt;/strong&gt; variables.&lt;/p&gt;

&lt;p&gt;How to implement the &lt;strong&gt;Dark Mode&lt;/strong&gt; is given in &lt;a href="https://dev.to/ruppysuppy/dark-mode-using-css-variables-1m3"&gt;this article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ruppysuppy/embed/eYBEogP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#first-child-last-child-and-nth-child"&gt;
  &lt;/a&gt;
  First Child, Last Child and &lt;em&gt;nth&lt;/em&gt; Child
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;:first-child&lt;/code&gt;, &lt;code&gt;:last-child&lt;/code&gt; and &lt;code&gt;:nth-child()&lt;/code&gt; targets a component if it is the first, last and the &lt;em&gt;nth&lt;/em&gt; child of a parent element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;:nth-child&lt;/code&gt; can be used as &lt;code&gt;:first-child&lt;/code&gt; by using &lt;code&gt;:nth-child(1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ruppysuppy/embed/abJJBom?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#first-of-type-last-of-type-and-nth-of-type"&gt;
  &lt;/a&gt;
  First of Type, Last of Type, and &lt;em&gt;nth&lt;/em&gt; of Type
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;:first-of-type&lt;/code&gt;, &lt;code&gt;:last-of-type&lt;/code&gt; and &lt;code&gt;:nth-of-type&lt;/code&gt; respectively selects the first, last and &lt;em&gt;nth&lt;/em&gt; occurrence of a given element in the &lt;strong&gt;HTML&lt;/strong&gt; body.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;:nth-of-type&lt;/code&gt; can be used as &lt;code&gt;:first-of-type&lt;/code&gt; by using &lt;code&gt;:nth-of-type(1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ruppysuppy/embed/JjWWRQb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/css/css_pseudo_classes.asp"&gt;W3schools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;MDN Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Want to work together? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect to me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>ux</category>
    </item>
    <item>
      <title>You don't need variables</title>
      <author>△ LUKE知る</author>
      <pubDate>Sun, 23 May 2021 01:05:12 +0000</pubDate>
      <link>https://dev.to/lukeshiru/you-don-t-need-variables-2gk3</link>
      <guid>https://dev.to/lukeshiru/you-don-t-need-variables-2gk3</guid>
      <description>&lt;p&gt;Before you think I'm crazy, I'm not saying that you don't need a way of storing data in memory, because you do ... I'm just saying that once you save something, you should never change that value. So yes, this article is about &lt;strong&gt;immutability&lt;/strong&gt; and how great it is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-mutation-evil%E2%84%A2"&gt;
  &lt;/a&gt;
  Why is mutation evil™?
&lt;/h2&gt;

&lt;p&gt;Mutation is at the core of the vast majority of bugs I had to deal with in my career, and I'm willing to bet it's at the core of yours too. Mutation basically means changing the value of something, which seems to be harmless, until you're working on a team and you change something that shouldn't be changed. This kind of accidents happen all the time in JavaScript and languages like it, because when you call a function and pass an object to that function, you're actually passing a reference to it, instead of a copy. Let's see a simple example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// We have an user object with 2 properties, name and age&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// We have a function that gives us the age of the user next year&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userNextYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userNextYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Luke's age is 32&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;nextYear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'s age is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;nextYear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Luke's age was 32&lt;/span&gt;
&lt;span class="c1"&gt;// oh no!&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'s age was &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, this is obvious because all the code is in the same place, now imagine the surprise if you are importing that function from somewhere else. Basically this happens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;someUtil&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;somewhere&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;someUtil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// object went into the Twilight Zone, its value is unpredictable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-can-we-resolve-this"&gt;
  &lt;/a&gt;
  How can we resolve this?
&lt;/h2&gt;

&lt;p&gt;There are several approaches to resolve the issues presented by mutation, some better than others. The worst one (and one of the most common solutions) is to just make a copy of the object before passing it to a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;someDeepCopyUtil&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;someLibrary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;someUtil&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;somewhere&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someDeepCopyUtil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;someUtil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// object is unaffected, yey!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem with this approach is that you're doing extra work everywhere instead of just avoiding mutations altogether. The other solution is to write your functions without doing mutations, just returning copies with changes on them. This type of functions are called &lt;a href="https://en.wikipedia.org/wiki/Pure_function"&gt;pure functions&lt;/a&gt;, and avoiding mutations is what we call &lt;a href="https://en.wikipedia.org/wiki/Immutable_object"&gt;immutability&lt;/a&gt;. Going back to the first example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userNextYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;userNextYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns a copy of user with the age changed&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Is still the original value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is great for small functions, that do little changes to small objects, but the problem is that this becomes super complex if the object has nested values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateOtherValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which is obviously way more complex than just doing a mutation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateOtherValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Luckily for us, there is a great library that allows us to write code as we were doing mutations, but actually produces an immutable copy of the object, and it's called &lt;a href="https://immerjs.github.io/immer/"&gt;immer&lt;/a&gt;. This library allows us to write our &lt;code&gt;updateOtherValue&lt;/code&gt; function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;produce&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;immer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateOtherValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;draft&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;draft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We end up with the best of both worlds: Code as simple as with mutations, but actually immutable. Now let's go back to JavaScript without libraries for a second...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-to-avoid-from-vanilla"&gt;
  &lt;/a&gt;
  Things to avoid from vanilla
&lt;/h2&gt;

&lt;p&gt;JavaScript itself provides some methods that actually aren't pure, so they mutate the original object. For example &lt;code&gt;Array&lt;/code&gt; has a few methods in its prototype like &lt;code&gt;push&lt;/code&gt; or &lt;code&gt;pop&lt;/code&gt; that actually change the original value. So you end up with similar issues to the first example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addFooBar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foobar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;addValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// array was changed here to ["foo", "bar", "foobar"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can either just avoid not pure methods and functions, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addFooBar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foobar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;addValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns ["foo", "bar", "foobar"], but array has still the original value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, going back to immer, we can just to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;produce&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;immer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;draft&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;draft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addFooBar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foobar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;addValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// same effect as the pure approach&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are several sites that cover the mutation functions, one of them that I recommend for array is this one: &lt;a href="https://doesitmutate.xyz/"&gt;doesitmutate.xyz&lt;/a&gt;. It lists all the array methods and has a flag for the ones that produce mutations (so those are the ones you need to avoid).&lt;/p&gt;

&lt;p&gt;One thing worth mentioning is that the DOM APIs are full of mutations, so if you want to change something dynamically on a WebApp you need to do mutations. Luckily for us, libraries like React, Preact, Vue and others have an abstraction layer over the DOM called VDOM, that make the DOM behave in a "pure" way by letting us update it's state without having to do the mutations ourselves, and in a consistent and safe way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#classes-and-mutation"&gt;
  &lt;/a&gt;
  Classes and mutation
&lt;/h2&gt;

&lt;p&gt;So this article is in the same series as &lt;a href="https://dev.to/lukeshiru/you-don-t-need-classes-jk4"&gt;You don't need classes&lt;/a&gt;, and is pretty close to it. Classes generally encourage saving values inside the class, and changing those, so this is yet another reason to avoid classes and just use pure functions and values instead. Even if you decide to still use classes, try to avoid mutations, by returning new instances of the classes with the new values in them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-performance"&gt;
  &lt;/a&gt;
  What about performance?
&lt;/h2&gt;

&lt;p&gt;JavaScript and languages like it have a great garbage collector that takes care of the values you're not using any longer. The vast majority of the cases, as soon as you create a copy of something and you don't use that something any longer, the original gets removed from memory.&lt;/p&gt;

&lt;p&gt;Still, the cost in performance is way to low compared to the benefits that you get from never doing mutations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-you-actually-need-mutations"&gt;
  &lt;/a&gt;
  Do you actually need mutations?
&lt;/h2&gt;

&lt;p&gt;Similar to the previous post in this series, I finish with an open question for the readers of the post to really think about this: Do you really need to mutate that value? Don't you have a way of resolving that issue without doing a mutation? I'm not saying this will always be the solution, but it should be the default.&lt;/p&gt;

&lt;p&gt;Thanks for reading this and if you don't agree with something said in here, just leave a comment and we can discuss it further.&lt;/p&gt;

&lt;p&gt;See you in the next post of this series!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codequality</category>
      <category>functional</category>
    </item>
    <item>
      <title>Liberar acesso ao servidor SSH pelas chaves do GitHub</title>
      <author>Eduardo Klosowski</author>
      <pubDate>Sun, 23 May 2021 00:41:35 +0000</pubDate>
      <link>https://dev.to/acaverna/liberar-acesso-ao-servidor-ssh-pelas-chaves-do-github-389b</link>
      <guid>https://dev.to/acaverna/liberar-acesso-ao-servidor-ssh-pelas-chaves-do-github-389b</guid>
      <description>&lt;p&gt;Uma das formas mais utilizadas para acessar servidores GNU/Linux é através do &lt;a href="https://pt.wikipedia.org/wiki/Secure_Shell"&gt;SSH&lt;/a&gt;. Esse acesso pode ocorrer através de usuário e senha ou de um par de chaves criptográfica, normalmente &lt;a href="https://pt.wikipedia.org/wiki/RSA_(sistema_criptogr%C3%A1fico)"&gt;RSA&lt;/a&gt; ou mais recente &lt;a href="https://pt.wikipedia.org/wiki/ECDSA"&gt;Ed25519&lt;/a&gt;, que são chaves assimétricas, onde a chave pública é copiada para o servidor e a privada fica no cliente que está pedindo acesso. Esse processo é o mesmo que ocorre no GitHub para permitir o acesso aos repositórios através de SSH, e é possível se aproveitar disso.&lt;/p&gt;

&lt;p&gt;Caso tenha alguma dúvida para criar chaves, ou mesmo queira verificar como configurar o cliente SSH, recomendo dar uma olhada no meu texto sobre &lt;a href="https://dev.to/acaverna/configuracao-basica-do-git-e-github-55mo"&gt;configuração do Git&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#permitindo-acesso-atrav%C3%A9s-da-chave"&gt;
  &lt;/a&gt;
  Permitindo acesso através da chave
&lt;/h2&gt;

&lt;p&gt;Primeiramente, para permitir o acesso a um servidor por chave criptográfica, basta adicionar a chave pública no arquivo &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;, onde &lt;code&gt;~&lt;/code&gt; é a home do usuário no servidor ao qual deseja-se permitir o acesso remoto. Desta forma, basta conseguir uma cópia da chave pública para permitir o acesso. Lembrando que o serviço do SSH deve estar em execução nesse servidor (para Debian e derivados basta instalar o pacote &lt;code&gt;openssh-server&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#acessando-a-chave-p%C3%BAblica-no-github"&gt;
  &lt;/a&gt;
  Acessando a chave pública no GitHub
&lt;/h2&gt;

&lt;p&gt;Como a chave pública não é uma informação sensível, e pode ser divulgada, o GitHub lista as chaves públicas cadastradas dos usuários ao adicionar &lt;code&gt;.keys&lt;/code&gt; ao final do link do perfil. Exemplo: &lt;code&gt;https://github.com/eduardoklosowski.keys&lt;/code&gt;. Assim ao acessar essa URL será listada todas as chaves públicas cadastradas para a conta, em vez de mostrar o perfil do usuário. Desta forma, basta adicionar essas chaves ao final do arquivo &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; e o dono dessa conta já poderá acessar o servidor.&lt;/p&gt;

&lt;p&gt;Esse processo também poderia ser feito através da linha de comando, não sendo necessário copiar e colar as chaves, bastando executar um dos comandos abaixo (de acordo com a ferramenta que estiver disponível no servidor):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl https://github.com/eduardoklosowski.keys &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.ssh/authorized_keys
&lt;span class="c"&gt;# Ou&lt;/span&gt;
wget &lt;span class="nt"&gt;-qO&lt;/span&gt; - https://github.com/eduardoklosowski.keys &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Considerações
&lt;/h2&gt;

&lt;p&gt;Muitos desenvolvedores possuem conta no GitHub, e adicionaram suas chaves públicas a sua conta. Então fazer esse processo permite liberar o acesso a um servidor de forma fácil e segura (desde que o dono da conta mantenha sua chave privada de forma segura). Uma aplicação bastante interessante disso é na criação de servidores para &lt;a href="https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_pareada"&gt;pair programming&lt;/a&gt;, onde um servidor pode ser criado e as pessoas que forem programar podem compartilhar o terminal através do &lt;a href="https://tmux.github.io/"&gt;tmux&lt;/a&gt;, sendo necessário se conhecer apenas o nome de usuário do GitHub, em vez de criar uma senha e compartilhá-la, ou pedir e aguardar a outra pessoa enviar sua chave pública.&lt;/p&gt;

</description>
      <category>tip</category>
      <category>github</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>¿Cómo crear un historial de productos visitados con django y redis?</title>
      <author>Eduardo Zepeda</author>
      <pubDate>Sat, 22 May 2021 23:18:50 +0000</pubDate>
      <link>https://dev.to/neon_affogato/como-crear-un-historial-de-productos-visitados-con-django-y-redis-291l</link>
      <guid>https://dev.to/neon_affogato/como-crear-un-historial-de-productos-visitados-con-django-y-redis-291l</guid>
      <description>&lt;p&gt;Estás navegando en un ecommerce, un producto llama tu atención y haces click para verlo, no te convence. Decides ver otras opciones, haces click en un nuevo producto y, cuando haces scroll al fondo de la página, la página te muestra el primer producto que viste bajo la leyenda "Vistos recientemente". Tú puedes hacer lo mismo con django y redis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#django-y-redis"&gt;
  &lt;/a&gt;
  django y redis
&lt;/h2&gt;

&lt;p&gt;Agregar una sección de productos visitados aumenta las ventas en un ecommerce y mantiene al usuario más tiempo en la página. Es normal añadir este historial a un usuario que ya está en la base de datos. Los encargados de la página web tienen un historial de los productos que vemos, los que compramos, cuanto tiempo pasamos viéndolos y muchos otros datos pero... ¿y los usuarios anónimos que no tienen una cuenta?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cWr4X5Qe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1g0vemocux56drk1qv1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWr4X5Qe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1g0vemocux56drk1qv1i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Historial de cierta página de ecommerce que ya no necesita más publicidad.&lt;/p&gt;

&lt;p&gt;A lo mejor no te interesa (o a tu empresa) tener guardados en una base de datos el historial de millones de productos visitados por cada usuario anónimo que visita el sitio, pero aún así te gustaría mostrarle a cada usuario, registrado o no, los productos que ha visto.&lt;/p&gt;

&lt;p&gt;Redis es un motor de base de datos muy eficiente, trabaja con datos volátiles, pues almacena su información en memoria, por lo que su acceso es casi instantáneo, aunque volátil. Sin embargo &lt;strong&gt;es posible volcar su información a un medio permanente, como mysql, postgres u otra base de datos, posteriormente&lt;/strong&gt;. Seguramente podemos usar redis pero... ¿cómo vamos a diferenciar un usuario anónimo de otro?&lt;/p&gt;

&lt;p&gt;Hay muchas maneras de abordar ese problema, puedes asociar un usuario (y su historial) con una cookie, ip o hasta un enlace de afiliado, etc. El tipo de dato que desees vincular depende de las intenciones del negocio. Para este ejemplo usaremos una session key del sistema de sesiones que ya viene incluido en django de manera predeterminada.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#instalar-redis-en-gnulinux"&gt;
  &lt;/a&gt;
  Instalar redis en GNU/Linux
&lt;/h2&gt;

&lt;p&gt;Antes de empezar a usar django y redis hay que instalar este último en nuestro sistema operativo GNU/Linux. Si no tienes ni idea de los comandos básicos en un entorno linux te sugiero &lt;a href="https://coffeebytes.dev/comandos-de-gnu-linux-que-deberias-conocer/"&gt;visitar mi entrada que habla de los comandos más comunes.&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;redis-server
redis-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#instalar-redis-para-python"&gt;
  &lt;/a&gt;
  Instalar redis para Python
&lt;/h2&gt;

&lt;p&gt;A continuación vamos a instalar el paquete que vincula redis con Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;redis
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En el archivo &lt;em&gt;settings.py&lt;/em&gt; de nuestra aplicación, agregamos los valores por defecto que vamos a usar. Estos pueden ser diferentes si tu servidor de redis está en otra ubicación o si elegiste otro puerto en lugar del predeterminado.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# settings.py
# ...
&lt;/span&gt;&lt;span class="n"&gt;REDIS_HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'localhost'&lt;/span&gt;
&lt;span class="n"&gt;REDIS_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6379&lt;/span&gt;
&lt;span class="n"&gt;REDIS_DB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Además le pediremos a django que guarde la sesión con cada petición y nos aseguraremos que esté activo el middleware para sesiones.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# settings.py
&lt;/span&gt;&lt;span class="n"&gt;MIDDLEWARES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.sessions.middleware.SessionMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# ...
&lt;/span&gt;&lt;span class="n"&gt;SESSION_SAVE_EVERY_REQUEST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para este ejemplo uso un modelo llamado &lt;em&gt;Product,&lt;/em&gt; pero tu puedes sustituirlo por el equivalente en tu aplicación.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="c1"&gt;# app/models.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si has llegado hasta aquí, pero no tienes idea de como funciona Django tengo unas entradas donde reseño un par de libros que pueden servirte: &lt;a href="https://coffeebytes.dev/el-libro-definitivo-de-django/"&gt;El libro definitivo de Django (Gratuito)&lt;/a&gt; o &lt;a href="https://coffeebytes.dev/aprender-django-resena-django-by-example/"&gt;Django by example&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eligiendo-el-valor-que-usaremos-como-llave-en-django-y-redis"&gt;
  &lt;/a&gt;
  Eligiendo el valor que usaremos como llave en django y redis
&lt;/h2&gt;

&lt;p&gt;Primero hay que elegir el momento en que redis guardará nuestro acceso al producto. La vista que devuelve los detalles de un producto sería lo ideal. De esta manera, cada que un usuario del sitio web acceda a los detalles del producto agregaremos la información del producto a su identificador de usuario.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/views.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# O el queryset que prefieras
&lt;/span&gt;    &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# ... más código 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Primeramente, vamos a obtener el objeto cuyos detalles estamos consultado, para eso usamos &lt;em&gt;get_object_or_404&lt;/em&gt;, al que le pasamos un queryset o un modelo y el &lt;em&gt;id&lt;/em&gt; que buscará.&lt;/p&gt;

&lt;p&gt;Ahora vamos a crear una serie de funciones para facilitar nuestro trabajo, puedes crearlas en un archivo separado, yo le llamaré &lt;em&gt;utils.py&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conectar-redis-y-python"&gt;
  &lt;/a&gt;
  Conectar redis y python
&lt;/h2&gt;

&lt;p&gt;En el archivo de utils.py vamos a establecer una conexión entre Python y Redis. El método StrictRedis recibirá los valores, estos son los mismos que especificamos en nuestro archivo de configuración, por lo que podemos importarlos directamente de ahí.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/utils.py
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;REDIS_HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;REDIS_PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;REDIS_DB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#crear-un-identificador-de-usuario-para-usar-como-llave-en-redis"&gt;
  &lt;/a&gt;
  Crear un identificador de usuario para usar como llave en redis
&lt;/h2&gt;

&lt;p&gt;Queremos asociar cada llave de redis a un usuario, por lo que, necesitamos una función que nos devuelva una manera de identificar a cada usuario de nuestra página. Para usuarios anónimos lo ideal sería usar una session key, si queremos incluir a usuarios con cuento podemos asociarlos directamente con su usuario.&lt;/p&gt;

&lt;p&gt;Nuestra función guarda la sesión si no existe una &lt;em&gt;session_key&lt;/em&gt;, de esta manera nos aseguraremos de siempre contar con una. La función nos devolverá la &lt;em&gt;session_key&lt;/em&gt; si el usuario es anónimo o el usuario si este ya esta loggeado.&lt;/p&gt;

&lt;p&gt;Para esto es necesario que reciba el objeto request como argumento.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/utils.py
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_user_id_for_redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session_key&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_anonymous&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#guardar-valores-en-redis-con-lpush-o-rpush"&gt;
  &lt;/a&gt;
  Guardar valores en redis con lpush o rpush
&lt;/h2&gt;

&lt;p&gt;La manera en la que guarda redis los datos es vinculándolos con una llave, esa llave tiene una lista asociada que será la que contendrá la información.&lt;/p&gt;

&lt;p&gt;Es bastante similar a un diccionario que tiene una lista como valor. El equivalente en código Python se vería más o menos así:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id_de_usuario_unico_1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"id_de_usuario_unico_2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;112&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;444&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Los números que guardaremos serán los id o llaves primarias de los productos.&lt;/p&gt;

&lt;p&gt;Para decirle a redis que extienda esa lista por el principio usaremos &lt;em&gt;lpush&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;El método &lt;em&gt;lpush&lt;/em&gt; recibe; el nombre de la llave que guardaremos, como primer argumento; un valor que agregará a al inicio lista de valores asociada, como segundo argumento.&lt;/strong&gt; En caso de que la llave no exista, la creará. Además &lt;em&gt;lpush&lt;/em&gt; &lt;strong&gt;retorna el tamaño de la lista asociada a la llave que le pasamos como primer argumento.&lt;/strong&gt; El método rpush hace lo mismo pero por el final.&lt;/p&gt;

&lt;p&gt;Sabiendo esto crearemos una función que tome un usuario y un id de producto y se los pase a redis para que los guarde, nuestra función retornará el valor que devuelve &lt;em&gt;lpush&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/utils.py
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_product_history_by_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;product_history_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lpush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;product_history_length&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Continuando con la analogía anterior, &lt;em&gt;lpush&lt;/em&gt; haría algo parecido a esto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id_de_usuario_unico_1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lpush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id_de_usuario_unico_1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id_de_usuario_unico_1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#obtener-una-lista-de-valores-asociada-a-una-llave-con-lrange"&gt;
  &lt;/a&gt;
  Obtener una lista de valores asociada a una llave con lrange
&lt;/h2&gt;

&lt;p&gt;Ahora que ya hemos creado una función para extender una lista asociada a un usuario, creemos una función que nos devuelva esa lista.&lt;/p&gt;

&lt;p&gt;Usemos &lt;em&gt;lrange&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;El método &lt;strong&gt;&lt;em&gt;lrange&lt;/em&gt; nos permite pasarle una llave (&lt;em&gt;user_id&lt;/em&gt;) y nos devolverá la lista que tiene asignada&lt;/strong&gt;, desde el valor inicial (0), hasta el final (4), contando desde el principio. Es decir, los elementos con índices del 0 al 4. Como no queremos repetir valores, recurriremos una &lt;em&gt;set comprehensión&lt;/em&gt; para transformar los valores en enteros.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/utils.py
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_products_ids_by_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;last_viewed_products_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Devuelve [b'2', b'4', ...]
&lt;/span&gt;    &lt;span class="n"&gt;last_viewed_products_ids_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;last_viewed_products_ids&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;last_viewed_products_ids_list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esta función nos devolverá únicamente esos valores de redis, para que podamos saber que productos retornaremos de la base de datos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creando-un-queryset-a-partir-de-valores-de-redis"&gt;
  &lt;/a&gt;
  Creando un queryset a partir de valores de redis
&lt;/h2&gt;

&lt;p&gt;La función anterior nos devuelve una lista de valores, correspondientes a id o llaves primarias de productos en nuestra base de datos.&lt;/p&gt;

&lt;p&gt;Usaremos esa lista de valores para filtrar productos en nuestra base de datos, un uso bastante común del ORM de django con el que no deberías tener problemas.&lt;/p&gt;

&lt;p&gt;Básicamente significa: obtén todos los productos y luego fíltralos de manera que solo queden aquellos productos cuyo id o llave primaria se encuentre en la lista llamada &lt;em&gt;product_ids&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/utils.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_product_history_queryset_by_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product_ids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;last_viewed_products_queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;id__in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;product_ids&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;last_viewed_products_queryset&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Toma en cuenta que puedes sustituir la query &lt;em&gt;Product.objects.all()&lt;/em&gt; por la queryset que tú desees. Quizás prefieras no mostrar todos los productos en tu base de datos, sino solo los activos, los que tengan inventario o cualquier otra combinación.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evitemos-guardar-valores-repetidos"&gt;
  &lt;/a&gt;
  Evitemos guardar valores repetidos
&lt;/h2&gt;

&lt;p&gt;Como no queremos que en la lista de productos vistos se repitan productos, vamos a asegurarnos de que el id o llave primaria del producto no se encuentre en la lista que estamos obteniendo antes de agregarlo.&lt;/p&gt;

&lt;p&gt;Para hacerlo solo revisamos que el id del producto se encuentre fuera de la lista que nos regresa la función &lt;em&gt;get_products_ids_by_user&lt;/em&gt; que escribimos anteriormente.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/views.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;    &lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_id_for_redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;product_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_products_ids_by_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;product_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;create_product_history_by_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;product_history_queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_product_history_queryset_by_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# ... más código 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sin embargo ahora nos topamos con otro problema, que pasa si nuestra tienda tiene decenas de miles de productos y nuestro tráfico diario son decenas de miles de usuarios, ¿de verdad queremos mantener en memoria una lista tan grande de productos visitados? La mayoría de los usuarios no revisarán sus últimos mil productos para ver si se les antoja comprar algo.&lt;/p&gt;

&lt;p&gt;Es innecesario mantener una lista tan larga si solo vamos a acceder a unos cuantos productos.&lt;/p&gt;

&lt;p&gt;¿Cómo lo solucionamos? Necesitamos crear una función que nos ayude a mantener la lista de productos asociados a una llave en redis en un límite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rpop-y-lpop-de-redis-remueven-un-elemento-de-una-lista"&gt;
  &lt;/a&gt;
  rpop y lpop de redis remueven un elemento de una lista
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;El método rpop se encarga de remover el último elemento de una lista asociada a una llave y lo devuelve.&lt;/strong&gt; El método lpop hace lo mismo, pero con el primer elemento&lt;/p&gt;

&lt;p&gt;Podemos usar rpop para para remover el elemento más antiguo e ir depurando los elementos más viejos. Si con la última inserción la lista crece más allá de nuestro limite (en este caso 5) quitaremos el elemento más antiguo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/utils.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;limit_product_history_length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_history_length&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;product_history_length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ltrim-es-una-alternative-a-lpop-y-rpop"&gt;
  &lt;/a&gt;
  ltrim es una alternative a lpop y rpop
&lt;/h3&gt;

&lt;p&gt;La función &lt;strong&gt;&lt;em&gt;ltrim&lt;/em&gt; de redis se encarga de cortar los valores iniciales de lista asociada a una llave&lt;/strong&gt;, le indicamos el índice inicial y su índice final como argumentos.&lt;/p&gt;

&lt;p&gt;La diferencia que tiene con ltrim es que su tiempo de ejecución es O(n), puesto que depende de la cantidad de elementos a remover, mientras que para rpop es de O(1). Si no tienes idea de que te estoy hablando visita &lt;a href="https://coffeebytes.dev/la-notacion-big-o/"&gt;mi entrada donde hablo un poco sobre la notación Big O&lt;/a&gt; o quédate con la idea de que si solo vamos a eliminar un elemento rpop es mejor. Sin embargo puede que quieras un comportamiento diferente y te sirva más usar &lt;em&gt;ltrim&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Redis tiene información del tiempo de ejecución de cada función en su documentación y puede ser muy útil si el rendimiento de tu aplicación de django es importante.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/utils.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;limit_product_history_length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_history_length&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;product_history_length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ltrim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora agregamos la función para que se ejecute &lt;strong&gt;solo si ha habido una inserción&lt;/strong&gt; de un elemento en redis, es decir, si el producto actual no se encuentra en nuestra lista.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/views.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;    &lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_id_for_redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;product_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_products_ids_by_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;product_id&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;product_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;product_history_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_product_history_by_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;limit_product_history_length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_history_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;product_history_queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_product_history_queryset_by_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# ... más código 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora que tenemos el queryset con los datos de redis, podemos retornarlo y renderizarlo en una plantilla de django, procesarlo para devolver una respuesta JSON o lo que tu aplicación requiera.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/views.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TemplateResponse&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"visited_products"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;visited_products&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TemplateResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'product/details.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#asignar-una-fecha-de-expiraci%C3%B3n-a-los-datos-en-redis"&gt;
  &lt;/a&gt;
  Asignar una fecha de expiración a los datos en redis
&lt;/h2&gt;

&lt;p&gt;Pero, que tal si no nos interesa que tantos productos vea un cliente anónimo, sino el tiempo que los guardamos.&lt;/p&gt;

&lt;p&gt;Quizás hoy el cliente quiera comprar un producto en especial, pero a lo mejor consideramos inútil mostrarle ese mismo producto tres meses después. ¿Por qué no ponerle una fecha de expiración a la lista que estamos guardando? Si el usuario no vuelve a visitar un nuevo producto tras transcurrir cierta cantidad de tiempo se borrará la información.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;r.expire&lt;/em&gt; recibe la llave que queremos que caduque y el tiempo para su eliminación, en ese orden, como sus argumentos. Para este ejemplo le he asignado tres meses. Y así se irán borrando los historiales de las sesiones inactivas que han estado inactivas por largo tiempo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/utils.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_product_history_by_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;product_history_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lpush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;product_history_length&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Redis tiene mucho para ofrecer, y vincularlo con django te permiterá hacer mucho. Te dejo la &lt;a href="https://redis.io/"&gt;documentación de redis&lt;/a&gt; por si quieres profundizar en ella y sus &lt;a href="https://redis-py.readthedocs.io/en/stable/"&gt;bindings en python.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>tutorial</category>
      <category>spanish</category>
      <category>python</category>
    </item>
    <item>
      <title>Making a popsicle with CSS only! </title>
      <author>Eva Thora Karlsdottir</author>
      <pubDate>Sat, 22 May 2021 22:30:59 +0000</pubDate>
      <link>https://dev.to/evathora/making-a-popsicle-with-css-only-29gi</link>
      <guid>https://dev.to/evathora/making-a-popsicle-with-css-only-29gi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#getting-creative-with-css-illustrations"&gt;
  &lt;/a&gt;
  Getting creative with CSS illustrations
&lt;/h2&gt;

&lt;p&gt;Even though CSS illustrations might not be ideal for production (let's face it, a simple SVG is a lot less painful), they are a great way to improve your CSS skills and let your creative spirit fly! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The project
&lt;/h2&gt;

&lt;p&gt;In this project we'll make a refreshing popsicle with a small animation on hover.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/evakarls/embed/BaWWJPr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-the-html"&gt;
  &lt;/a&gt;
  Setting up the HTML
&lt;/h3&gt;

&lt;p&gt;We start with setting up the HTML. In this case, the structure is simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="container"&amp;gt;
  &amp;lt;div class="popsicle-container"&amp;gt;
    &amp;lt;div class="popsicle-top"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class="popsicle-base"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class="stick"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have one general container which we'll use to center the popsicle. The popsicle itself is composed of the &lt;code&gt;.popsicle-container&lt;/code&gt; which contains three div elements: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.popsicle-top&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.popsicle-base&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;.stick&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are the only HTML elements we'll need for this project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#moving-on-to-the-css"&gt;
  &lt;/a&gt;
  Moving on to the CSS
&lt;/h3&gt;

&lt;p&gt;The container is a flex box which takes the whole width of the viewport and both centers and aligns our popsicle in the middle of the screen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;.popsicle-container&lt;/code&gt; is very similar, except there we'll set the flex-direction to column so our elements will stack below one another. We'll also set the height and width of the popsicle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.popsicle-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 30rem;
  width: 12rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our wrappers are ready and we can move on to the fun stuff! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-we-capture-the-depth"&gt;
  &lt;/a&gt;
  How do we capture the depth?
&lt;/h3&gt;

&lt;p&gt;We want our popsicle to have proper dimensions. In order to achieve this, we'll be using two pseudo-elements: &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What are pseudo-elements?&lt;/strong&gt;&lt;br&gt;
Pseudo-elements are hidden elements (think of them like ghosts that hang around your element). Like the names suggest, &lt;code&gt;::before&lt;/code&gt; appears before the element and &lt;code&gt;::after&lt;/code&gt; goes after it. Pseudo-elements are very useful for decorative purposes (like in our popsicle). However they are not always picked up by screenreaders so avoid putting any crucial information in them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's start with the &lt;code&gt;.popsicle-base&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;We will put most of the properties in the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; elements so the &lt;code&gt;.popsicle-base&lt;/code&gt; itself will contain the width and the height. We will also need to be able to link the position of the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; elements to the &lt;code&gt;.popsicle-base&lt;/code&gt;, so we'll give it a &lt;code&gt;position: relative;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.popsicle-base {
  position: relative;
  height: 20%;
  width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;.popsicle-base::before&lt;/code&gt; element will be the shaded part of the popsicle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.popsicle-base::before {
  content: '';
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: #ffbdce;
  border-bottom-right-radius: 10%;
  border-bottom-left-radius: 10%;
  transform: skewY(-5deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All before and after elements need the &lt;code&gt;content&lt;/code&gt; property. Without it they won't be displayed. So, all we need to do is to set it to an empty string. We'll set the radius on the bottom borders to make it a bit rounded and add a nice pink background colour. We set &lt;code&gt;postion: absolute;&lt;/code&gt; so it'll be relative to the &lt;code&gt;.popsicle-base&lt;/code&gt; (we will fix the exact positioning once we have the after element). We'll also slightly skew the Y axis to create the angle needed on the shadow.&lt;/p&gt;

&lt;p&gt;This is what we have so far: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RhSq6USZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3g5czzbptx2pyk3a596.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RhSq6USZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3g5czzbptx2pyk3a596.png" alt="slightly skewed pink rectangle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now for the &lt;code&gt;.popsicle-base::after&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We'll give it a bit of depth by putting an ellipse shaped gradient at the top of the element. Besides the background colour and the gradient, the &lt;code&gt;::after&lt;/code&gt; element has all the same properties as the &lt;code&gt;::before&lt;/code&gt;. So we can simplify the code above to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.popsicle-base::before, .popsicle-base::after {
  content: '';
  position: absolute;
  width: 100%;
  height: 100%;
  border-bottom-right-radius: 10%;
  border-bottom-left-radius: 10%;
  transform: skewY(-5deg);
}

.popsicle-base::before {
  background-color: #ffbdce;
}

.popsicle::after {
  background: radial-gradient(ellipse at top, rgba(241, 240, 
  240, 0.74), #ffcbd8 60%);
  background-color: #f3f3f3;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's what we have now. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CnUq5rEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmmhgp7qahv7nx3f4i26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CnUq5rEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmmhgp7qahv7nx3f4i26.png" alt="A skewed pink rectangle with white radial shading at the top"&gt;&lt;/a&gt;&lt;br&gt;
You might think, &lt;em&gt;wait, where's the first rectangle?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It's there! It's just hidden behind the &lt;code&gt;::after&lt;/code&gt; element. In order to make it visible we'll need to shift the &lt;code&gt;::before&lt;/code&gt; element a bit to the right. We'll also push it a tiny bit upwards.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.popsicle-base::before {
  background-color: #ffbdce;
  right: -1.5rem;
  top: -0.1rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result is a nicely shaded and slightly skewed rectangle:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yJ4LHnY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gfeejbrykx6yp234yo1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJ4LHnY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gfeejbrykx6yp234yo1.png" alt="A pink rectangle with slightly darker right side"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#doing-the-same-for-the-popsicletop-and-stick"&gt;
  &lt;/a&gt;
  Doing the same for the .popsicle-top and .stick
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;.popsicle-top&lt;/code&gt; follows the same logic except we put the gradient at the bottom of the element so that it blends with the other gradient:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.popsicle-top {
  position: relative;
  height: 60%;
  width: 100%;
  border-top-left-radius: 35%;
  border-top-right-radius: 35%;
}

.popsicle-top::before, .popsicle-top::after {
  content: '';
  position: absolute;
  width: 100%;
  height: 100%;
  border-top-left-radius: 35%;
  border-top-right-radius: 35%;
  transform: skewY(-5deg)
}

.popsicle-top::before {
  right: -1.5rem;
  background: #86c8e4;
}

.popsicle-top::after {
  background: radial-gradient(ellipse at bottom,  rgba(241, 
  240, 240, 0.74), rgba(152, 208, 241, 0.877) 80%);
  background-color: #97DFFC;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we have so far:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XAXnf23d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4686rau2jf19yab7vd2v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XAXnf23d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4686rau2jf19yab7vd2v.png" alt="A blue and pink popsicle which is missing the stick"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The stick is also the same but there we also add a bit of shading on the top of the stick to make it's placement with the popsicle more realistic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stick::before, .stick::after {
  content: '';
  position: absolute;
  width: 100%;
  height: 100%;
  border-bottom-left-radius: 10%;
  border-bottom-right-radius: 10%;
  box-shadow:
  inset 0 0 1rem rgb(236, 187, 113),
  inset 0 0.5rem 0.7rem -0.3rem rgba(0,0,0,0.4);
  transform: skewY(-5deg)
}

.stick::after {
  background-color: #F3D4A5;
}

.stick::before {
  right: -0.5rem;
  background-color: rgb(219, 183, 128);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that we have our lovely popsicle: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Orgdb5RL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/attq9qq8gtpz99gg632f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Orgdb5RL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/attq9qq8gtpz99gg632f.png" alt="A blue and pink popsicle"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#adding-animation"&gt;
  &lt;/a&gt;
  Adding animation
&lt;/h3&gt;

&lt;p&gt;We'll add a small pulsating animation where we slightly decrease the size and then increase it again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@keyframes pulse {
  0% {
    transform: scale(1);
  }
  60% {
    transform: scale(0.95);
  }
  100% {
    transform: scale(1);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll then apply it on the &lt;code&gt;.popsicle-container&lt;/code&gt; on hover with a 2 second duration and on an infinite loop (as long as the element is in the hover state):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.popsicle-container:hover {
  animation: pulse 2s ease-in infinite;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;I hope you've enjoyed making this colourful popsicle :) &lt;/p&gt;

</description>
      <category>css</category>
      <category>cssart</category>
      <category>codepen</category>
      <category>shecoded</category>
    </item>
    <item>
      <title>Why you should use OAuth for your App.</title>
      <author>Elijah Trillionz</author>
      <pubDate>Sat, 22 May 2021 21:29:38 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/why-you-should-use-oauth-for-your-app-2f23</link>
      <guid>https://dev.to/elijahtrillionz/why-you-should-use-oauth-for-your-app-2f23</guid>
      <description>&lt;p&gt;Imagine how cool it would be not to have to create a username, verify your email for every website you create an account in.&lt;/p&gt;

&lt;p&gt;Image how cool it would be not to have to create passwords regularly and try to recall which is which for every website you visit and create an account in.&lt;/p&gt;

&lt;p&gt;The internet is a massive world that keeps growing day after day with different tools rising up daily.&lt;/p&gt;

&lt;p&gt;As an Internet user who wants all the assistance you can get in your career, you are going to be using (or trying out) different tools every now and then. &lt;/p&gt;

&lt;p&gt;This means you are going to be creating an account for these different tools, having to create a unique username with a password and then verify your email.&lt;/p&gt;

&lt;p&gt;Well, thanks to Google and other tools which help you save your passwords so you don't worry about recalling them. And if Google or the other tools didn't save this password, you will have to go through the stress of resetting your password.&lt;/p&gt;

&lt;p&gt;Now, this is for you who is a user of an app, what about you who creates the app, how is this stressful for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-developers"&gt;
  &lt;/a&gt;
  For Developers
&lt;/h3&gt;

&lt;p&gt;Imagine how cool it would be not to have routes for verifying email, resetting passwords. Or not worry about encrypting users' passwords when they sign up and comparing when they log in.&lt;/p&gt;

&lt;p&gt;Imagine how cool it would be not to worry about creating tokens for every user with JSONWebToken or any other. Or not worry about sending emails for email verification, and then for password reset (that should cost a lot though).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-we-achieve-all-these-cool-things"&gt;
  &lt;/a&gt;
  How can we achieve all these cool things
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N5s9vjqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11aeyjvd2quxnv6vv2b3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N5s9vjqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11aeyjvd2quxnv6vv2b3.jpg" alt="OAuth overview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am sure you are familiar with the &lt;em&gt;Sign in with Google&lt;/em&gt; button on different web apps like this one (dev). Or you've probably seen that of Facebook, Twitter, LinkedIn, GitHub, Apple, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iVA-Sclm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m41iwx362o9b8i6zaka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iVA-Sclm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m41iwx362o9b8i6zaka.png" alt="OAuth"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There you have it, that's the dude that makes all those cool stuff. It simply makes life easy for users as well as developers.&lt;/p&gt;

&lt;p&gt;With it, users won't worry about creating an account with an email, username, and password, and then upload a profile picture on your app and every other website they visit. And you the developer won't worry about handling those requests.&lt;/p&gt;

&lt;p&gt;The user creates an account with a website and uses his/her public info on that website for every other website he/she uses or would use.&lt;/p&gt;

&lt;p&gt;Cool right, for me I'd rather click one or two buttons to get signed up than writing (and verifying) my email, &lt;strong&gt;constructing&lt;/strong&gt; a unique username and a strong password.&lt;/p&gt;

&lt;p&gt;Now let's look out how these cool things work and what powers them.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#offer-just-for-you"&gt;
  &lt;/a&gt;
  Offer just for you:
&lt;/h3&gt;

&lt;p&gt;Have you wondered what I use for my blog banners/photo designs? Well glad to tell you it's &lt;a href="https://www.canva.com/join/innovation-monster-tomato"&gt;Canva&lt;/a&gt;. Whether you are a graphics designer or a novice Canva is for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WDhynK3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8csascx4fbeu5zc0sexr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WDhynK3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8csascx4fbeu5zc0sexr.png" alt="canva review"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Canva you get to select from thousands of organized templates that will meet your specific needs. Be it a logo, presentations, Social Media Covers, Social Media Posts, Blog banners, resumes, posters, flyers, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.canva.com/join/innovation-monster-tomato"&gt;Get started for free&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;Well all that is powered by &lt;a href="http://oauth.net/2/"&gt;&lt;strong&gt;OAuth&lt;/strong&gt;&lt;/a&gt;, it is an open standard protocol for authorization. It is the way your users grant you permission to access their information from another website they already are a member of.&lt;/p&gt;

&lt;p&gt;With OAuth, a user can create one account on a website and link his/her information to every other website. Trust me when I say, that is the best thing a user will ever want to encounter.&lt;/p&gt;

&lt;p&gt;That last paragraph made me sound like the user is going to have a lot of work to do, but no; that's not the case. Here is how OAuth works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-oauth-works"&gt;
  &lt;/a&gt;
  How OAuth works
&lt;/h3&gt;

&lt;p&gt;There are different companies (websites you may say) that offer OAuth, but some of the most popular are Google, Facebook, Twitter, Apple, GitHub, LinkedIn, Discord (wait is discord popular? hmm), etc.&lt;/p&gt;

&lt;p&gt;Though they are different companies with different ways of handling their authorization, the principle is the same&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#as-a-developer"&gt;
  &lt;/a&gt;
  As a Developer
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Create an &lt;em&gt;OAuth app&lt;/em&gt; with the company (Facebook or Google, etc).&lt;/li&gt;
&lt;li&gt;Use your app's id and app's secret to get a &lt;em&gt;token&lt;/em&gt; for a user.&lt;/li&gt;
&lt;li&gt;Use that token to access the &lt;em&gt;company's API&lt;/em&gt; which contains the user's information.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notice the italics, OAuth app ==&amp;gt; token ==&amp;gt; API. That's the summary for all OAuth, it is what you should be looking for in any of those companies.&lt;/p&gt;

&lt;p&gt;I have a complete post on my blog where I explained &lt;a href="https://webdeverguide.com/how-to-use-github-oauth-in-your-app-like-a-pro"&gt;how OAuth works&lt;/a&gt;, showed some use cases (using GitHub) with source code linked on my blog. Go check it out.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#as-a-user"&gt;
  &lt;/a&gt;
  As a User
&lt;/h4&gt;

&lt;p&gt;I am assuming you (as a user) are already on the website you intend to create an account with.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click the &lt;em&gt;Sign in with Google&lt;/em&gt; button on the website.&lt;/li&gt;
&lt;li&gt;Redirected to Google accounts where you authorize the app by clicking a button.&lt;/li&gt;
&lt;li&gt;Redirected back to the initial website and boom account created successfully.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a user, you basically just clicked two buttons and you are all set up. When logging in, you simply click one button (i.e &lt;em&gt;Continue with Google&lt;/em&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros-and-cons-of-using-oauth-in-your-app"&gt;
  &lt;/a&gt;
  Pros and Cons of using OAuth in your app
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is secure. Companies like Google don't play with their users' privacy. It now boils down to you the developer to make your authentication secure. &lt;a href="https://webdeverguide.com/how-to-use-github-oauth-in-your-app-like-a-pro"&gt;Here is how&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is easier and faster. Users don't have to go through the stress of creating a password, uploading a profile picture, verifying their email, or resetting their passwords when forgotten. Worst case scenario is when a user forgets his/her username and isn't sure which email he/she used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can act on behalf of a user. Apart from getting a user's public info, through some of these companies (with OAuth) APIs, you can do things on behalf of the user. For example, with your app, you can create a GitHub repository on behalf of your user. It is done with scopes. &lt;a href="https://webdeverguide.com/how-to-use-github-oauth-in-your-app-like-a-pro"&gt;See details here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;There may be limits. Companies like Facebook, Twitter, and Discord set limits to how many requests you can make to their API per hour. For example, Facebook insists on a 200 * number of users request per hour.  So get acquainted with each documentation to understand how it works.&lt;br&gt;
&lt;strong&gt;Solution&lt;/strong&gt;: You should minimize the number of requests you make to the API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tokens don't last forever. Recall that tokens are what we use to access users' information. Well, they don't last forever. They can expire, a long-lived token of Facebook expires after 60 days. That of Discord is not that long, meanwhile, that of GitHub doesn't seem to expire.&lt;br&gt;
&lt;strong&gt;Solution&lt;/strong&gt;: These companies like Facebook, Google, Discord give you a &lt;em&gt;refresh token&lt;/em&gt; which you can use to refresh the token of a user when it expires. Cool right.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Expiring a token should not new for a developer who has been working with JSONWebToken. The token expires for security reasons, as a developer you should know how to tackle it and most importantly when to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;OAuth is the next big thing in this industry, companies like Google have so advanced their OAuth such that when a user revisits a website they already signed up with Google with, it automatically logs them in.&lt;/p&gt;

&lt;p&gt;The rate at which developers have been working with OAuth has massively increased, you can tell if you visit a lot of sites.&lt;/p&gt;

&lt;p&gt;Alright, that is it for now, I hope to hear back from you about how it increased your app's users or probably how OAuth has been a great help to you (if you have been using it).&lt;/p&gt;

&lt;p&gt;Also, don't forget to give a heart or/and unicorn to this post, and sharing it is just a click away to help someone else. If you'd love to see more of this, support me by &lt;a href="//www.patreon.com/elijahtrillionz"&gt;becoming a Patron&lt;/a&gt;. Or simply &lt;a href="//www.buymeacoffee.com/elijahtrillionz"&gt;buying me a coffee&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>discuss</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Hidden Door I'd Use To Get A Software eEngineer Job At Apple</title>
      <author>Nick Bull</author>
      <pubDate>Sat, 22 May 2021 21:26:11 +0000</pubDate>
      <link>https://dev.to/nickbulljs/hidden-door-i-d-use-to-get-a-software-eengineer-job-at-apple-3k0c</link>
      <guid>https://dev.to/nickbulljs/hidden-door-i-d-use-to-get-a-software-eengineer-job-at-apple-3k0c</guid>
      <description>&lt;p&gt;Most engineers don't realize that there is always a &lt;em&gt;hidden&lt;/em&gt; door to enter any company if traditional ways, such as sending a resume, don't work for you.&lt;/p&gt;

&lt;p&gt;No one talks about these doors because it's hard to find them and they look unique to everyone. But I'll disclose today, how one type of hidden doors might look like.&lt;/p&gt;

&lt;p&gt;To get an interview at Apple I'd use such door.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;

&lt;p&gt;I'd go to eBay and buy Macintosh System Boot Disk 6.X.X for $11.99.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y8C9Mseu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621695459352/Sz4G2dMH8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y8C9Mseu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621695459352/Sz4G2dMH8.jpeg" alt="1.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;I'd buy a high-quality paper and pen and write this letter to Tim Cook:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Hi, Tim.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I've been following Apple for quite some time and have watched all of your new product launches, with the rest of the world, since 2009.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My name is Nick, I’m a software engineer with 6+ years of experience in the tech field. For 4 of these 6 years, your products have been helping me grow as a person and as a developer. Now, I want this "growth" to help you grow as well.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;With this letter, you can find a Macintosh System Boot Disk 6.0.8 which I bought on eBay for $11.99.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;No, it's not a mistake. I actually bought this disk with "System Tools Version 6.0.8" on it on purpose.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Before writing this letter, I researched early Apple operating systems, and System 6, which was introduced in April 1988, has one flaw that your next system "System 7" does not.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;System 6 has a limit on volume size. It supports up to 2 GB. But System 7 increases the limit to 4 GB. In other words, System 7 got louder.&lt;br&gt;
*&lt;br&gt;
*That's how I want to help Apple. I want to make it "louder." Increase its "volume" in every possible sense: sales volume, brand volume, quality volume, and other volumes to make it that System 7 (using my experience and knowledge as a software engineer)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*It's hard to say whether I'll be able to achieve a 2x increase in "volume" as you did in System 7, but at least I'll do my best to move us from System 6 to 7.&lt;br&gt;
*&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let's talk and increase Apple's volume: &lt;a href="mailto:my@email.com"&gt;my@email.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All the best, Nick.”&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;

&lt;p&gt;I'd buy an envelope, put in it my letter and Macintosh System Boot Disk and send it to Tim Cook at "One Apple Park Way Cupertino, CA 95014"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnXYpsME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621695571310/OXHRb29Wc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnXYpsME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621695571310/OXHRb29Wc.jpeg" alt="2.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step will be taken by Apple.&lt;/p&gt;




&lt;p&gt;For someone, it'll be hard to believe that it could work, but this is how my friend land a job at one FAANG tier company.&lt;/p&gt;

&lt;p&gt;To make it easier to realize that hidden door exists, put yourself in Tim Cook's shoes &lt;em&gt;(or his assistant, who is likely to check this letter)&lt;/em&gt; would you be interested to give a chance to a developer with such a creative approach, relevant experience, and passion that he or she shows from the start? Probably yes, if you know how hard it is to find such talent.&lt;/p&gt;

&lt;p&gt;Opportunities are endless if you know that &lt;em&gt;hidden&lt;/em&gt; doors exist. Try to find them, use your creativity.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;– &lt;a href="https://twitter.com/nickbulljs"&gt;Nick&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like this article you need to know that every Monday, I send a letter to 4,000+ Web Developers with 3 hand-picked articles from the tech world, 2 web development guides, and 1 best Tweet of the week&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Your newsletter is f&lt;/em&gt;&lt;em&gt;king awesome, really Nick. It gives me a great start to the week with a lot of great knowledge.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Join smart developers who get short and full of knowledge letters for free &lt;a href="https://nickbulljs.com/newsletter/"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>The Art Of Solving An Algorithm</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Sat, 22 May 2021 21:21:48 +0000</pubDate>
      <link>https://dev.to/chetanx/the-art-of-solving-an-algorithm-jie</link>
      <guid>https://dev.to/chetanx/the-art-of-solving-an-algorithm-jie</guid>
      <description>&lt;p&gt;What Is An Algorithm? If you find this question on google, you will get “It is a process or set of rules to be followed in calculations or other problem-solving operations, especially by a computer.” But when I had seen this definition initially, I wasn’t able to understand anything, It emerged as a piece of literature for me. I was drastically surprised by how complexly a simple definition can be presented. Since I know this by now, so let me help you to understand it.&lt;br&gt;
An algorithm is a process of doing some work, Let’s suppose you are given chicken &amp;amp; rice, now it depends on your algorithm(the process of doing something) that whether the output will be chicken masala or will be kabab.&lt;br&gt;
In programming different algorithm is used to obtain different outputs and even for single output different algorithms can be used, its kind of a pathway to reach the destination, you can choose any path. But the less time your path takes the better that algorithm will be called.&lt;br&gt;
How To Solve An Algorithm-&lt;br&gt;
In How to Solve It, George Polya outlines four steps of problem-solving:&lt;br&gt;
Understand the problem.&lt;br&gt;
Make a plan.&lt;br&gt;
Execute the plan.&lt;br&gt;
Evaluate the result.&lt;br&gt;
Understand the Problem&lt;br&gt;
If you’re a good developer, you’ll realize that the best solutions emerge from listening to your customer tell their story. Many algorithms are disguised as story problems, such as the farmer who needs to get duck, corn, and a fox across the river. But! He can only carry one of these at a time. If left alone, the duck will eat the corn and the fox will eat the duck. How does he get everything across?&lt;br&gt;
What you should do is :&lt;br&gt;
AS A &amp;lt; USER OF SOME SORT &amp;gt;&lt;br&gt;
I WANT &amp;lt; TO DO THIS &amp;gt;&lt;br&gt;
SO THAT &amp;lt; MY EXISTENCE IS VALIDATED &amp;gt;&lt;br&gt;
In our farmer example above:&lt;br&gt;
AS A farmer&lt;br&gt;
I WANT to ferry my duck, fox, and corn across the river&lt;br&gt;
SO THAT we all live happily ever after&lt;br&gt;
The format for acceptance criteria is:&lt;br&gt;
GIVEN &amp;lt; APPLICATION &amp;gt;&lt;br&gt;
WHEN &amp;lt; I DO THIS &amp;gt;&lt;br&gt;
THEN &amp;lt; I EXPECT THE APP TO DO THAT &amp;gt;&lt;br&gt;
In our farmer example above:&lt;br&gt;
GIVE three items that will eat each other&lt;br&gt;
WHEN I ferry one item across the river&lt;br&gt;
THEN the other two are safe&lt;br&gt;
Make a Plan&lt;br&gt;
The next step in Polya’s heuristic is to make a plan.&lt;br&gt;
AKA pseudocode.&lt;br&gt;
You write pseudocode, don’t you?&lt;br&gt;
Writing pseudocode is like making a sketch for a design.&lt;br&gt;
It’s your back-of-the-envelope proof-of-concept.&lt;br&gt;
It’s your discovery phase, your user research, your market validation.&lt;br&gt;
It’s your roadmap.&lt;br&gt;
It’s also the comments for your function. Just // each line and walla, there you go.&lt;br&gt;
Execute the Plan&lt;br&gt;
It’s showtime!&lt;br&gt;
After all this problem understanding and plan-making, it’s time to crack your fingers, dust off the keyboard, and write some code! This part will be easy because why? Because you wrote pseudocode! All you need to do now is translate that plain language into JavaScript, Python, or (shudder) Java. Then hit Enter…&lt;br&gt;
Evaluate the Plan&lt;br&gt;
Did your plan work?&lt;br&gt;
If no, back to step 1.&lt;br&gt;
If yes, can you do better?&lt;br&gt;
How to Solve It with Computational Thinking&lt;br&gt;
The steps above are table stakes for problem-solving and can be applied to any domain. If you want to turn pro, you need to assimilate with the Borg and learn how to think like a computer. There are four primary stages of computational thinking:&lt;br&gt;
Decomposition&lt;br&gt;
Generalization&lt;br&gt;
Abstraction&lt;br&gt;
Algorithms&lt;br&gt;
A detailed Information About THESE COULD BE FOUND HERE&lt;br&gt;
Evaluate the result.&lt;br&gt;
If your plan and your execution go well, then you are safe in running in a small run. But if you want You Run a Maraton rather than a race, you have to evaluate this to make your work even better.&lt;br&gt;
How to Solve Any Algorithm&lt;br&gt;
You can solve any algorithm using Polya’s heuristic and computational thinking. Just believe in yourself and execute it, nothing is hard for anyone.&lt;br&gt;
Everything We Use Now Is Made&lt;br&gt;
With the power of the Human Brain.&lt;br&gt;
If Human can make it, then Human can solve it too.&lt;br&gt;
THANKS FOR TUNING IN!&lt;br&gt;
Just for fun, let's also solve the farmer's problem-&lt;br&gt;
The farmer brings duck to side b&lt;br&gt;
Farmer goes back to side a&lt;br&gt;
The farmer brings fox over to side b&lt;br&gt;
The farmer brings duck back to side a&lt;br&gt;
The farmer brings corn to side b&lt;br&gt;
Farmer goes back to side a&lt;br&gt;
The farmer brings duck to side b&lt;br&gt;
This way the Fox is never left alone with the duck and the duck is never left alone with the corn while getting all three to side b. No need for a cage!&lt;br&gt;
— Bye —&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>programming</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introducing Quotes App</title>
      <author>Gourav Khunger</author>
      <pubDate>Sat, 22 May 2021 19:58:40 +0000</pubDate>
      <link>https://dev.to/gouravkhunger/introducing-quotes-app-2ih0</link>
      <guid>https://dev.to/gouravkhunger/introducing-quotes-app-2ih0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was originally published at &lt;a href="https://genicsblog.com/introducing-quotes-app"&gt;my blog&lt;/a&gt;. Please try reading it there for a better experience :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hi everyone, how are y'all doing 😃&lt;/p&gt;

&lt;p&gt;It's been a long time since I published my last blog post and all that is because it was getting difficult to manage studies and blogging. But in the meantime, I have been working on a really awesome project and this article is all about explaining that ✨&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introducing-quotes-app"&gt;
  &lt;/a&gt;
  Introducing Quotes App 🚀
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h3&gt;

&lt;p&gt;If you ever read even one of my android articles, you will definitely be knowing I used Java to make android apps.&lt;/p&gt;

&lt;p&gt;And, as we all know Google is going on to promote Kotlin at its level best and encouraging developers to use Kotlin to develop android apps, I too was thinking for a long time of migrating to Kotlin as soon as possible.&lt;/p&gt;

&lt;p&gt;Also, a lot of open-source projects and articles on the internet about android development, these days are based on Kotlin and require you to understand Kotlin! So it was high time for me too to adopt Kotlin and get my hands dirty over it.&lt;/p&gt;

&lt;p&gt;If you too ever thought of starting to learn a new language from scratch, you definitely know how difficult it seems at first, to pick a new topic and start learning it by researching over the internet. And the same happened to me!&lt;/p&gt;

&lt;p&gt;But my learning process of Kotlin is a talk of another article, I will surely write articles about it and update this one to include them.&lt;/p&gt;

&lt;p&gt;So, after learning Kotlin, the thing I had left out was, I had not implemented things I learned in a project and I would say that's a massive mistake that beginners make. It's important to try out stuff in the real world if we wish to get good in any field!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  Idea
&lt;/h3&gt;

&lt;p&gt;As soon I was done with learning modern tools and concepts about android development, like the MVVM pattern(I did not use it much before learning Kotlin), Room Database library, ViewModels, LiveData, and trying few things here and there, I had an idea of integrating all the things I learned into a single android app.&lt;/p&gt;

&lt;p&gt;I really wished to make something useful out of what I learned and not just implement any 3rd world demo app that does nothing.&lt;/p&gt;

&lt;p&gt;And hence it had to lead me to think about making a Quotes App 🎉. The concept of the app is really simple.&lt;/p&gt;

&lt;p&gt;I thought of having just two screens in the app, one for viewing the current quote and the other for viewing all the saved quotes of the user.&lt;/p&gt;

&lt;p&gt;On the quotes page, there would be a card that would show the currently loaded quote and the author of the quote. There would be a button on the bottom of the page to bookmark, or in other words, save the current quote. Look below in the design section to see the design I took inspiration from.&lt;/p&gt;

&lt;p&gt;The second page would be about showing the bookmarked quotes to the user. There we can long-press the quotes to copy them to the clipboard, and swipe them to delete them from our collection. Also, we can undo the action if the quote was deleted in error and it will get back into place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design"&gt;
  &lt;/a&gt;
  Design
&lt;/h3&gt;

&lt;p&gt;I thought over the designing aspect a lot, but since I am not that much interested in designing as I am fascinated with programming, I wished to focus on the coding part more than the design part.&lt;/p&gt;

&lt;p&gt;Hence, I looked over the internet for some design inspirations and ideas, I ended up with this image, and most of the design inspiration is taken from it, though not completely, but the major look and feel is derived from it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5mjb6hMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exnq9czxqmnnulky3kgf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5mjb6hMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exnq9czxqmnnulky3kgf.jpg" alt="app-design-idea.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This design looked great to me and I made up my mind to use it as a reference while designing the whole UI&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h3&gt;

&lt;p&gt;It took me just 2 days to get working with a working base model of the app. I had done implementing Retrofit, Room Database, Recycler View, Navigation, and pretty much everything the basic version of the app would need.&lt;/p&gt;

&lt;p&gt;I have used the &lt;a href="https://zenquotes.io/"&gt;ZenQuotes API&lt;/a&gt; to load quotes into the app. Huge thanks to them for making such a quality API for free usage!!&lt;/p&gt;

&lt;p&gt;As of now, here's a list of tools and frameworks this app uses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Material Design&lt;/li&gt;
&lt;li&gt;Android LifeCycle Components&lt;/li&gt;
&lt;li&gt;Room Database Library&lt;/li&gt;
&lt;li&gt;Kotlin Extensions and Coroutines&lt;/li&gt;
&lt;li&gt;Retrofit Library&lt;/li&gt;
&lt;li&gt;Android Navigation Components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the code for this app is hosted on this Github repository:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/GouravKhunger"&gt;
        GouravKhunger
      &lt;/a&gt; / &lt;a href="https://github.com/GouravKhunger/QuotesApp"&gt;
        QuotesApp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A beautiful Quotes App where you can read and save quotes.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
QuotesApp&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/logo.png"&gt;&lt;img alt="QuotesApp Logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--EVzZgULE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/logo.png" height="150px" width="150px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A beautiful Quotes App where you can read and save quotes.&lt;/p&gt;
&lt;p&gt;This repository contains source code of a Quotes app, which helps you stay motivated by providing best picked quotes
stated by famous personalities. This app uses &lt;a href="https://zenquotes.io" rel="nofollow"&gt;zen quotes&lt;/a&gt; api, for retrieving quotes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/GouravKhunger/QuotesApp/releases/latest"&gt;Download&lt;/a&gt; the latest &lt;code&gt;apk&lt;/code&gt; file of this project and do provide feedback 😀&lt;/p&gt;
&lt;h1&gt;
Screenshots&lt;/h1&gt;
&lt;p&gt;Here are some screenshots from the app:&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/one.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FH4BTVnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/one.png" alt="first"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/two.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6zhlbm3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/two.png" alt="second"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/three.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_MZkbV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/three.png" alt="third"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/four.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSLNVWvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/four.png" alt="fourth"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h1&gt;
Details&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://youtu.be/9Kl6WDmTK8g" rel="nofollow"&gt;Watch the demo video on Youtube&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This App has useful features, such as bookmarks, to save the quotes that you find motivating, and keep them in a
separated section. Moreover, there are a number of cool transition and animation affects, which makes navigation much
cooler.&lt;/p&gt;
&lt;p&gt;Long pressing a quote in your Bookmarks copies that quote to the clipboard... More features along the way 🚀.&lt;/p&gt;
&lt;h1&gt;
Have awesome ideas?&lt;/h1&gt;
&lt;p&gt;Feel free to &lt;a href="https://github.com/GouravKhunger/QuotesApp/issues/new"&gt;Create an issue&lt;/a&gt;
if you think you have a great idea that could…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/GouravKhunger/QuotesApp"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Feel free to clone the repository and add new amazing features that you have in your mind 🙂&lt;/p&gt;

&lt;p&gt;Also, Don't forget to smash the star button and show some love!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#end-result"&gt;
  &lt;/a&gt;
  End result
&lt;/h3&gt;

&lt;p&gt;Here's a demo video showing all the features of the app:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9Kl6WDmTK8g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h1&gt;

&lt;p&gt;It was an overall fun experience implementing all the new things I learned while diving even deeper into Android development.&lt;/p&gt;

&lt;p&gt;I learned a lot of new concepts along the way, also coming up with errors here and there and failing while learning Kotlin, but the quotes themselves from my app kept me motivated to continue the learning process 😇&lt;/p&gt;

&lt;p&gt;Please &lt;a href="https://github.com/GouravKhunger/QuotesApp/releases/latest"&gt;download the latest &lt;code&gt;apk&lt;/code&gt; file&lt;/a&gt;, install it on your device, and provide feedback about what you think  about the app 🔥&lt;/p&gt;

&lt;p&gt;I hope you would love the app as well as the article, thanks a lot for reading this far 😊&lt;/p&gt;

</description>
      <category>android</category>
      <category>kotlin</category>
    </item>
    <item>
      <title>PostgreSQL: como permitir acesso de leitura a apenas algumas colunas de uma tabela?</title>
      <author>Mariana Ferreira</author>
      <pubDate>Sat, 22 May 2021 19:55:02 +0000</pubDate>
      <link>https://dev.to/mari_dff/postgresql-como-permitir-acesso-de-leitura-a-apenas-algumas-colunas-de-uma-tabela-2918</link>
      <guid>https://dev.to/mari_dff/postgresql-como-permitir-acesso-de-leitura-a-apenas-algumas-colunas-de-uma-tabela-2918</guid>
      <description>&lt;p&gt;Como fornecer acesso de leitura a algumas colunas de uma tabela e impedir o acesso as demais colunas para um certo usuário?&lt;/p&gt;

&lt;p&gt;Para exemplificar esse cenário, vou usar a base de dados &lt;a href="https://raw.githubusercontent.com/lerocha/chinook-database/master/ChinookDatabase/DataSources/Chinook_PostgreSql.sql"&gt;Chinook&lt;/a&gt; e a ferramenta &lt;a href="https://dbeaver.io/"&gt;DBeaver&lt;/a&gt; para administrar a base de dados.&lt;/p&gt;

&lt;p&gt;Primeiro, crie um usuário:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;USER&lt;/span&gt; &lt;span class="n"&gt;mariana&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;PASSWORD&lt;/span&gt; &lt;span class="s1"&gt;'sua_senha'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depois, crie uma view com apenas as colunas da tabela que você deseja permitir o acesso. Nesse caso, estou criando com as colunas "EmployeeId", "LastName", "FirstName", "Title", "Email" da tabela "Employee":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;employee_base_info&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="nv"&gt;"EmployeeId"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"LastName"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"FirstName"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"Title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"Email"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="nv"&gt;"Employee"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A view é como uma tabela virtual, não é uma tabela que está de fato no banco e quando é referenciada essa query é executada.&lt;/p&gt;

&lt;p&gt;Depois, dê permissão de leitura na view para o usuário:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;employee_base_info&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="n"&gt;mariana&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Então, ao conectar no banco utilizando esse usuário, temos permissão de realizar uma consulta na view:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ciKAhDT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgntsp6tqo0ng5c3vo2s.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ciKAhDT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgntsp6tqo0ng5c3vo2s.PNG" alt="Print da tela do Dbeaver com a query:  raw `select * from employee_base_info` endraw  e abaixo as informações da tabela"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mas não temos permissão de consultar a tabela inteira:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MjUNkbP0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yiulapkc4happ9mjr5n.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MjUNkbP0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yiulapkc4happ9mjr5n.PNG" alt="Print da tela do Dbeaver com a query:  raw `select * from &amp;quot;Employee&amp;quot; e abaixo o erro 'permission denied for table Employee` endraw "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tampouco permissão de update:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uAWhpidS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t45f4lq0a3jovtl96ru3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uAWhpidS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t45f4lq0a3jovtl96ru3.PNG" alt="Print da tela do Dbeaver com a query:  raw `update &amp;quot;Employee&amp;quot; set &amp;quot;LastName&amp;quot; = 'Silva' where &amp;quot;EmployeeId&amp;quot; = 1` endraw  e abaixo o erro 'permission denied for table Employee`"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com isso garantimos maior segurança para nosso banco de dados.&lt;/p&gt;

&lt;p&gt;Obrigada por ler! &lt;br&gt;
Se quiser saber mais, veja também a &lt;a href="https://www.postgresql.org/docs/9.2/sql-createview.html"&gt;documentação do PostgreSQL&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>sql</category>
    </item>
    <item>
      <title>Doom Captcha</title>
      <author>Miquel Camps</author>
      <pubDate>Sat, 22 May 2021 19:43:57 +0000</pubDate>
      <link>https://dev.to/vivirenremoto/doom-captcha-33hp</link>
      <guid>https://dev.to/vivirenremoto/doom-captcha-33hp</guid>
      <description>&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;My name is Miquel Camps, I'm a web developer based in Spain, you can find me on &lt;a href="https://twitter.com/vivirenremoto"&gt;twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/miquelcamps/"&gt;linkedin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR: You can visit the demo here&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://vivirenremoto.github.io/doomcaptcha/"&gt;https://vivirenremoto.github.io/doomcaptcha/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bgdftv7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bj85ytin5ddahdr3w2e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bgdftv7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bj85ytin5ddahdr3w2e.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use this captcha?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Simply add this code before the submit form button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://vivirenremoto.github.io/doomcaptcha/script.js?version=1"&lt;/span&gt; &lt;span class="na"&gt;sound=&lt;/span&gt;&lt;span class="s"&gt;"on"&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Captcha"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Parameters&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sound: on / off&lt;/li&gt;
&lt;li&gt;label: Text before captcha, you can leave it empty&lt;/li&gt;
&lt;li&gt;version: Current version 1&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>forms</category>
      <category>ui</category>
      <category>validation</category>
    </item>
    <item>
      <title>How does CSS works behind the scenes?</title>
      <author>Halisson Alves</author>
      <pubDate>Sat, 22 May 2021 19:29:22 +0000</pubDate>
      <link>https://dev.to/halissonalves/how-does-css-works-behind-the-scenes-2f9g</link>
      <guid>https://dev.to/halissonalves/how-does-css-works-behind-the-scenes-2f9g</guid>
      <description>&lt;p&gt;With the arrival of so much technology and novelty in the development market, many programmers end up leaving aside concepts that are essential for the complete understanding of a web application. One of them is the working of the CSS behind the scenes.&lt;br&gt;
Understanding how a specific technology works is the key to getting everything it has to offer. That is exactly what we are going to discuss here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opening-a-web-page"&gt;
  &lt;/a&gt;
  Opening a web page
&lt;/h2&gt;

&lt;p&gt;Have you stopped to think about the number of processes that run in the background of a browser while you access a web page? Of course, we will not explore all the details of these processes here, but we will cover enough to understand the path that our beloved CSS travels until reaching its final destination.&lt;/p&gt;

&lt;p&gt;When you open a web page, your browser loads the HTML file and begins scrolling line by line, decoding each of them. Passing through all of them, the browser generates the Document Object Model (DOM), which is basically the entire structure of your website divided into kin (parents, children, etc …) as if it were a family tree.&lt;/p&gt;

&lt;p&gt;Basically, this process is divided into two strands. These are &lt;strong&gt;“Conflict Resolutions in CSS Declarations”&lt;/strong&gt; and &lt;strong&gt;“Final Processing of CSS Values”&lt;/strong&gt;. We will discuss these details later.&lt;/p&gt;

&lt;p&gt;As with HTML, now the browser will generate a structured document for CSS called CSS Object Model (CSSOM). Joining the DOM with CSSOM generates a final structure called the Render Tree.&lt;/p&gt;

&lt;p&gt;At this point, the browser is ready to render all the generated content. This is done using the &lt;strong&gt;“Visual Formatting Model”&lt;/strong&gt;, which is basically an algorithm that analyzes information such as box-model, floats and positioning of elements on the page.&lt;/p&gt;

&lt;p&gt;At this stage, the website is already rendered and ready to be used by the user. Below is an illustration of the processes we have seen so far to better understand the paths we have come to get here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--30yeVhzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j98bgrk5k7vw26qesec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--30yeVhzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j98bgrk5k7vw26qesec.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-deeper"&gt;
  &lt;/a&gt;
  Getting deeper
&lt;/h2&gt;

&lt;p&gt;We discussed basically all the steps of handling a CSS file, but some terms were still somewhat vague. In this session, we will discuss a little more about them. Remember that I commented about the two sub-divisions during the decoding of a CSS file? Let’s understand how they operate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y0a32lZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgmloqfh38kwpc3x424b.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0a32lZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgmloqfh38kwpc3x424b.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conflict-resolutions-in-css-declarations"&gt;
  &lt;/a&gt;
  Conflict Resolutions in CSS Declarations
&lt;/h2&gt;

&lt;p&gt;For the resolution of these conflicts CSS uses a term called Cascade, which according to &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance"&gt;MDN web docs&lt;/a&gt; has the following definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CSS is an acronym of Cascading Style Sheets, which indicates that the notion of the cascade is important. At its most basic level it indicates that the order of CSS rules matter, but it’s more complex than that. What selectors win out in the cascade depends on three factors (these are listed in order of weight — earlier ones will overrule later ones):&lt;br&gt;
Importance&lt;br&gt;
Specificity&lt;br&gt;
Source order&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before we talk about these factors we need to keep in mind that CSS can come from several different sources, such as author, user and the browser itself. The most common of all is the one that the developers write. They are the sources of the Author. The CSS that comes from the user is about aesthetic modifications that the user makes in the settings of his browser. And last but not least we have the browser’s own presets that already bring with them some CSS rules.&lt;/p&gt;

&lt;p&gt;The Cascade resolves declarations conflicts based on the 3 items cited in MDN Web Docs, in the following order of priority:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Importance&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User &lt;strong&gt;!important&lt;/strong&gt; declarations&lt;/li&gt;
&lt;li&gt;Author &lt;strong&gt;!important&lt;/strong&gt; declarations&lt;/li&gt;
&lt;li&gt;Author declarations&lt;/li&gt;
&lt;li&gt;User declarations&lt;/li&gt;
&lt;li&gt;Default browser declarations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Specifity&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Inline Styles&lt;/li&gt;
&lt;li&gt;IDs&lt;/li&gt;
&lt;li&gt;Classes, pseudo-classes, attributes&lt;/li&gt;
&lt;li&gt;Elements, pseudo-elements&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the conflicts are still not solved, we proceed to the final verification:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Source Order&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The last declaration of the code will override all other declarations and the style will be applied.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#final-processing-of-css-values"&gt;
  &lt;/a&gt;
  Final Processing of CSS Values
&lt;/h2&gt;

&lt;p&gt;The final processing takes place in the following order of precedence:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZgxaEzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h4la8dqd80s39vatk7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZgxaEzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h4la8dqd80s39vatk7c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this stage, the process is somewhat different from what we discussed earlier. Here the values are processed and the units (rem, em,%, etc …) are converted into pixels for the correct rendering in the browser.&lt;/p&gt;

&lt;p&gt;The values declared by the developer are at the top of the chain. These values are evaluated and passed to the next step, which are the values specified by the Cascade.&lt;/p&gt;

&lt;p&gt;If the developer does not declare any specific value, such as font-size, the Cascade sets a default value that in most browsers is 16px.&lt;/p&gt;

&lt;p&gt;We then proceed to the next step which is the specific value if there is no Cascade value. All properties have a pre-set initial value, and if they reach this stage with no user-specified or Cascade value, this pre-set value comes into play. We can cite padding as an example, which if not specified by the user and not obtained in Cascade will have the default value of 0px.&lt;br&gt;
The next step is where the values are computed and converted to pixels, so they can be inherited.&lt;/p&gt;

&lt;p&gt;The process then goes through a more detailed check. Imagine that you declare a width value in percent, but when we convert to pixel the value is 130.8px. What to do with this decimal part? At the time of rendering this value will be converted to 131px by the CSS engine.&lt;/p&gt;

&lt;p&gt;Finally, in the last step, we have all the values processed and ready to be used in the layout.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Understanding the operation of the tools we use most in our daily lives as a developer is extremely useful. We can identify bugs more easily, structure our project better, and make the code legible to other developers.&lt;/p&gt;

&lt;p&gt;Now, let’s coffee + code!&lt;/p&gt;

&lt;p&gt;If this post was helpful to you, leave a comment. I’d love to hear your thoughts.&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
