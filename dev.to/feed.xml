<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Design systems supercharged </title>
      <author>RBerthier</author>
      <pubDate>Tue, 07 Dec 2021 15:39:31 +0000</pubDate>
      <link>https://dev.to/divriots/design-systems-supercharged-2p92</link>
      <guid>https://dev.to/divriots/design-systems-supercharged-2p92</guid>
      <description>&lt;p&gt;Building great front-end products is hard and time-consuming. &lt;/p&gt;

&lt;p&gt;Web technologies are evolving at high pace, designers and developers struggle to collaborate on handover, building consistent web components requires loads of works, documentation is too often not up-to-date, maintaining apps over time is an Herculean task, ... &lt;/p&gt;

&lt;p&gt;You know the story.&lt;/p&gt;

&lt;p&gt;Implementing a Design System is a good solution to tackle these challenges. The Design System is the source of truth for all reusable tokens and components to be consumed in web apps. Building and managing a Design System, as a part of a production pipeline, will greatly improve team efficiency and product consistency. &lt;/p&gt;

&lt;p&gt;A good Design System should help teams collaborate, improve reusability, manage technologies evolution, build documentation, ship faster / better, and lower maintenance. But building and maintaining the tooling to manage a Design System remains quite time consuming too ... &lt;/p&gt;

&lt;p&gt;That's why we launched &lt;a href="https://backlight.dev/"&gt;Backlight.dev&lt;/a&gt;, a powerful and collaborative platform to build Design Systems on the code side. Backlight helps front-end teams to deliver value by focusing on their real work, not on maintaing tools. &lt;/p&gt;

&lt;p&gt;Backlight comes with some nice features : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All-in-one : tokens, components, code, stories, tests, documentation, designs, ...&lt;/li&gt;
&lt;li&gt;Technologies / frameworks agnostic&lt;/li&gt;
&lt;li&gt;Real-time preview rendering for tokens, components and documentation&lt;/li&gt;
&lt;li&gt;Real-time and asynchronous collaboration&lt;/li&gt;
&lt;li&gt;Live documentation (MDX with embeded components and code snippets)&lt;/li&gt;
&lt;li&gt;Versioning and repo management with Github / Gitlab / Bitbucket&lt;/li&gt;
&lt;li&gt;Code review and visual diff for Pull-Request&lt;/li&gt;
&lt;li&gt;NPM package export&lt;/li&gt;
&lt;li&gt;In browser or local CLI&lt;/li&gt;
&lt;li&gt;No tools or pipepline to deploy / manage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And best of all, we have a free plan to test Backlight. &lt;/p&gt;

&lt;p&gt;Let's give it a try ? :) &lt;a href="https://backlight.dev/"&gt;Start now&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Front-end is for heroes. At &lt;a href="https://divriots.com/"&gt;‹div›RIOTS&lt;/a&gt;, we believe front-end is a beautiful challenge and we are on a mission to empower front-end teams with great tools. Backlight is one of them. We also launched some free sandbox products to play with web components and tokens (&lt;a href="https://divriots.com/#what-we-do"&gt;check them out here&lt;/a&gt;).&lt;/p&gt;

</description>
      <category>front</category>
      <category>dev</category>
      <category>design</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Explain Like I'm Five: TypeScript UnionToIntersection type</title>
      <author>Anurag Hazra</author>
      <pubDate>Tue, 07 Dec 2021 15:36:00 +0000</pubDate>
      <link>https://dev.to/anuraghazra/explain-like-im-five-typescript-uniontointersection-type-5ako</link>
      <guid>https://dev.to/anuraghazra/explain-like-im-five-typescript-uniontointersection-type-5ako</guid>
      <description>&lt;p&gt;Few moths ago while playing around with TypeScript types, I found myself wanting to convert an union to intersection type. &lt;/p&gt;

&lt;p&gt;When I realized that I literally have no idea on how to do it,&lt;br&gt;
As any other 10x developer, I googled it - "Union to intersection in typescript".&lt;/p&gt;

&lt;p&gt;Immediately I found this &lt;a href="https://fettblog.eu/typescript-union-to-intersection/"&gt;amazing post by @ddprrt&lt;/a&gt;, after going through the post, I had no idea how that &lt;code&gt;UnionToIntersection&lt;/code&gt; type worked, It looked like magic to me and didn't even understood the concept of contra-variant/co-variant so I just copy pasted the utility and moved away pondering how it works. &lt;/p&gt;

&lt;p&gt;Couple months later when I got better at TypeScript I dived deeper into type variance and got a general idea about it. &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=EInunOVRsUU"&gt;This video from @titiancernicova&lt;/a&gt; helped me a lot to understand about variance in typescript along with &lt;a href="https://www.stephanboyer.com/post/132/what-are-covariance-and-contravariance"&gt;this post&lt;/a&gt;, but still I sometimes &lt;a href="https://twitter.com/anuraghazru/status/1465712713791787023"&gt;get confused&lt;/a&gt; about variance.&lt;/p&gt;

&lt;p&gt;Now, today with this post my aim is to make you understand the &lt;code&gt;UnionToIntersection&lt;/code&gt; type without even knowing about variance. &lt;br&gt;
I will explain the type step by step in simple terms so that you can understand it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#anatomy-of-uniontointersection"&gt;
  &lt;/a&gt;
  Anatomy Of UnionToIntersection
&lt;/h2&gt;

&lt;p&gt;Let's first on a very high level visualize the anatomy of the &lt;code&gt;UnionToIntersection&lt;/code&gt; type and see a demo of how it works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m9QZ9uc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75lz1dgyhcgcqo2rq72a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9QZ9uc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75lz1dgyhcgcqo2rq72a.png" alt="Anatomy Of UnionToIntersection" width="880" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we go deeper unpacking the type we will discuss more details about each part. &lt;/p&gt;

&lt;p&gt;let's say you have an union like this, which you want to convert to an intersection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ContactMethods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Need intersection of ContactMethod here :(&lt;/span&gt;
    &lt;span class="c1"&gt;// something like this { email: string } &amp;amp; { phone: number }&lt;/span&gt;
    &lt;span class="na"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DoSomeMagic&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ContactMethods&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's drop in the &lt;code&gt;UnionToIntersection&lt;/code&gt; type.&lt;br&gt;
As you can see the type is now converted to an intersection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tsplay.dev/WYB12w"&gt;TS Playground link&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UnionToIntersection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;infer&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UnionToIntersection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ContactMethods&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;//  ^? { email: string } &amp;amp; { phone: number } &amp;amp; { address: string }&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-unpack"&gt;
  &lt;/a&gt;
  Let's Unpack
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#naked-type-amp-distributive-conditional-type"&gt;
  &lt;/a&gt;
  Naked type &amp;amp; distributive conditional type
&lt;/h4&gt;

&lt;p&gt;So first the type takes an generic parameter T. &lt;br&gt;
&lt;code&gt;type UnionToIntersection&amp;lt;T&amp;gt; =&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then on the second line, we are doing this &lt;br&gt;
&lt;code&gt;(T extends any ? (x: T) =&amp;gt; any : never)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here the &lt;code&gt;T extends any&lt;/code&gt; is a naked type, which means that it isn't wrapped in anything.&lt;br&gt;
TypeScript conditional types have a special property that if you pass an union then the conditional type will be applied to each member of that union, given the type is a naked type. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://fettblog.eu/typescript-union-to-intersection/#the-naked-type"&gt;Refer to @ddprrt's article&lt;/a&gt; to learn more about this section of the code, I'm skipping the detailed examples here since I don't want to repeat the same. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Learn more about &lt;a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types"&gt;distributive conditional types&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#extracting-out"&gt;
  &lt;/a&gt;
  Extracting out
&lt;/h3&gt;

&lt;p&gt;Let's extract out the first part of the type to a different utility type for easier understanding,&lt;br&gt;
And go step by step of how the compiler will evaluate the type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ToUnionOfFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;

&lt;span class="c1"&gt;// Phase 0&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Demo0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ToUnionOfFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// ↓&lt;/span&gt;
&lt;span class="c1"&gt;// Phase 1 - Union gets distributed to each of it's member&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Demo1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;ToUnionOfFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;ToUnionOfFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// ↓&lt;/span&gt;
&lt;span class="c1"&gt;// Phase 2 - `{ a: string }` becomes `(x: { a: string }) =&amp;gt; any`&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Demo2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://tsplay.dev/mLLd2m"&gt;TS Playground Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple enough right? Basically it converts the passed union to an union of functions.&lt;/p&gt;

&lt;p&gt;The key thing here is the distributive conditional type &lt;code&gt;(T extends any&lt;/code&gt;, &lt;br&gt;
if we just used &lt;code&gt;(x: T) =&amp;gt; any&lt;/code&gt; then the type would resolve to: &lt;br&gt;
&lt;code&gt;(x: { a: string } | { b: string }) =&amp;gt; any&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ToUnionOfFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ToUnionOfFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;//   (x: { a: string } | { b: string }) =&amp;gt; any&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#understanding-how-the-intersection-will-happen"&gt;
  &lt;/a&gt;
  Understanding how the intersection will happen
&lt;/h3&gt;

&lt;p&gt;Now that we have this union of function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UnionOfFunctions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let's assign this to a function and see what happens&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UnionOfFunctions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UnionOfFunctions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="c1"&gt;// 'b' is missing&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// 'a' is missing&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Works&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's happening here is that, to safely call the function &lt;code&gt;foo&lt;/code&gt; which has a type of &lt;code&gt;UnionOfFunction&lt;/code&gt; we have to pass a type which will satisfy both of the function's requirement. In other words the argument must be &lt;code&gt;{ a: string, b: string }&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Voila! we get an intersection type in the param. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://tsplay.dev/NnXjoW"&gt;TS Playground Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Aj6q5nz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kxq3bebjusuyo07z720.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Aj6q5nz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kxq3bebjusuyo07z720.png" alt="Intersection in function param example" width="731" height="626"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now all that is left is to get the type of the parameter, which covers the second part of the type. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#second-part"&gt;
  &lt;/a&gt;
  Second Part
&lt;/h2&gt;

&lt;p&gt;Let's move to the second and final part. &lt;br&gt;
&lt;code&gt;extends (x: infer R) =&amp;gt; any ? R : never&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this part we are first checking if the result of ToUnionOfFunction is equal to this &lt;code&gt;(x: infer R) =&amp;gt; any&lt;/code&gt;, but instead of passing T into the arg we are inferring the argument with the keyword &lt;code&gt;infer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's inline all of it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Result of ToUnionOfFunction&amp;lt;T&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UnionOfFunctions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;UnionOfFunctions&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;infer&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Infer keyword is like a magnifying glass of TypeScript which lets us inspect any certain type from the eye of compiler &amp;amp; extract it to a type variable, in this case &lt;code&gt;R&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And that's it! 🎉&lt;/p&gt;

&lt;p&gt;Let's look at the whole thing at once. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://tsplay.dev/WvYb3m"&gt;TS Playground link&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ToUnionOfFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UnionToIntersection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="nx"&gt;ToUnionOfFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;infer&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ContactMethods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UnionToIntersection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ContactMethods&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// ^?&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;I hope you got a basic understanding of how this handy type works. &lt;/p&gt;

&lt;p&gt;Now as I said my aim with this post was to explain and breakdown the type without going into the topic of variance, So I oversimplified some things and how the intersection on the param actually happens so,&lt;br&gt;&lt;br&gt;
If you want to learn more about exactly how it works and go digging deeper into this topic here are few resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fettblog.eu/typescript-union-to-intersection"&gt;TypeScript: Union to intersection type
by Stefan Baumgartner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=EInunOVRsUU"&gt;Understanding Variance in the TypeScript by Tițian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stephanboyer.com/post/132/what-are-covariance-and-contravariance"&gt;What are covariance and contravariance? by stephanboyer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dmitripavlutin.com/typescript-covariance-contravariance/"&gt;Covariance and Contravariance in TypeScript by Dmitri Pavlutin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://twitter.com/anuraghazru"&gt;Follow me on twitter&lt;/a&gt; for more TS related posts. :) Thanks for reading.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Create 'What's your Age' with Agify API </title>
      <author>Rohit Sharma</author>
      <pubDate>Tue, 07 Dec 2021 15:28:39 +0000</pubDate>
      <link>https://dev.to/devrohit0/create-whats-your-age-with-agify-api-29ik</link>
      <guid>https://dev.to/devrohit0/create-whats-your-age-with-agify-api-29ik</guid>
      <description>&lt;p&gt;Hello Everyone , Today I'm sharing how I created a fun API project that predicts your Age by your name (not exact). I used &lt;a href="https://agify.io"&gt;Agify API&lt;/a&gt; for this project.&lt;/p&gt;

&lt;p&gt;Take a look at our project&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/m4cNzrB_RKQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;We need a &lt;code&gt;input:text&lt;/code&gt; to get input from user and a button so we can run function on click. So, here is the html part&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;What's Your Age&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"instruction"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; Enter Your Name to Predict Your Age&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"nameInput"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Let'me Predict Your Age&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;You can style as you wish. This is how styled the web page (I know it's not looking that much pretty).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;62.5%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eaf655&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.row&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#header&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#023e8a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#instruction&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#box&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;text&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;242&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;79&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;241&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;342deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;242&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;79&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;241&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;237&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition-timing-function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#output&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;IMPORTANT POINTS TO REMEMBER:-&lt;/p&gt;

&lt;p&gt;So, first of all we must know the how API url looks like. For this project the demo url is &lt;code&gt;https://api.agify.io?name=michael&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Okay, Now if we change &lt;code&gt;name=michael&lt;/code&gt; to any other name let say my name (Rohit) . So, the API call url is &lt;code&gt;https://api.agify.io?name=Rohit&lt;/code&gt; i.e. each time we have to change this value and run the &lt;code&gt;function&lt;/code&gt; to get the Age of user. &lt;/p&gt;

&lt;p&gt;When we use &lt;code&gt;fetch()&lt;/code&gt; it always return a &lt;code&gt;string&lt;/code&gt;. So, we have to convert that string into &lt;code&gt;array&lt;/code&gt;. For that we use &lt;code&gt;JSON.parse()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;predictName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nameInput&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nameInput&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;checkName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;predictName&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
         &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nameInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

         &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.agify.io?name=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
         &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();})&lt;/span&gt;
         &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I guess &amp;amp;#129300 your age is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
             &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
             &lt;span class="p"&gt;}&lt;/span&gt;


         &lt;span class="p"&gt;})&lt;/span&gt;
         &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checkName&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
     &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nameInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you like the post then show some love to it.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Introduce to my Taiwan COVID-19 news website and crawler</title>
      <author>peter279k</author>
      <pubDate>Tue, 07 Dec 2021 15:27:28 +0000</pubDate>
      <link>https://dev.to/peter279k/introduce-to-my-taiwan-covid-19-news-website-and-crawler-1o58</link>
      <guid>https://dev.to/peter279k/introduce-to-my-taiwan-covid-19-news-website-and-crawler-1o58</guid>
      <description>&lt;h2&gt;
  &lt;a href="#instructions"&gt;
  &lt;/a&gt;
  Instructions
&lt;/h2&gt;

&lt;p&gt;In Taiwan, it's COVID-19 outbreak on May 13 and there're about 100 local cases every day. And it's zero local case since October.&lt;/p&gt;

&lt;p&gt;At that moment, I'm really concerned about daily local cases so I develop this project and publish it to the &lt;a href="https://github.com/peter279k/covid19-tw-news"&gt;GitHub&lt;/a&gt;. I use the cron job feature to fetch the latest COVID-19 news and publish my new web page during GitHub action running. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;My completed workflow files are available &lt;a href="https://github.com/peter279k/covid19-tw-news/tree/master/.github/workflows"&gt;here&lt;/a&gt; and it includes following YAML files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;fetcher.yml&lt;/code&gt;, this YAML file is for fetching latest COVID-19 news and store them to be JSON file. This web crawler is written in Python. And It will be run every hour.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;web_build.yml&lt;/code&gt;, this YAML file is for publishing new website and loading new JSON file. This website is written JavaScript with Vue.js framework. And it will be run every seventy minutes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;This category is for DIY-Deployments and I hope developers love this and can be referenced :-).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-files-and-link-to-repository"&gt;
  &lt;/a&gt;
  YAML files and link to repository
&lt;/h3&gt;

&lt;p&gt;Here are repository preview and completed codes about above two YAML files:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/peter279k"&gt;
        peter279k
      &lt;/a&gt; / &lt;a href="https://github.com/peter279k/covid19-tw-news"&gt;
        covid19-tw-news
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Taiwan COVID-19 News
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
COVID-19 Taiwan News&lt;/h1&gt;
&lt;h1&gt;
References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vuejs.org/" rel="nofollow"&gt;https://vuejs.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getbootstrap.com/docs/5.0/getting-started/introduction" rel="nofollow"&gt;https://getbootstrap.com/docs/5.0/getting-started/introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
Data Sources (資料來源)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://heho.com.tw/page/page_number/?s=%E5%85%A8%E5%8F%B0%E6%9F%93%E7%96%AB%E8%B6%B3%E8%B7%A1%E4%B8%80%E6%AC%A1%E7%9C%8B+" rel="nofollow"&gt;https://heho.com.tw/page/page_number/?s=%E5%85%A8%E5%8F%B0%E6%9F%93%E7%96%AB%E8%B6%B3%E8%B7%A1%E4%B8%80%E6%AC%A1%E7%9C%8B+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://od.cdc.gov.tw/icb/%E6%8C%87%E5%AE%9A%E6%8E%A1%E6%AA%A2%E9%86%AB%E9%99%A2%E6%B8%85%E5%96%AE.csv" rel="nofollow"&gt;http://od.cdc.gov.tw/icb/%E6%8C%87%E5%AE%9A%E6%8E%A1%E6%AA%A2%E9%86%AB%E9%99%A2%E6%B8%85%E5%96%AE.csv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mohw.gov.tw/rss-16-1.html" rel="nofollow"&gt;https://www.mohw.gov.tw/rss-16-1.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.csv" rel="nofollow"&gt;https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.csv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://od.cdc.gov.tw/eic/covid19/covid19_global_cases_and_deaths.csv" rel="nofollow"&gt;https://od.cdc.gov.tw/eic/covid19/covid19_global_cases_and_deaths.csv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/peter279k/covid19-tw-news"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;fetcher.yml&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update CSV Dataset Records from Taiwan CDC website&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build-and-deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get working copy&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;fetch-depth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up Python &lt;/span&gt;&lt;span class="m"&gt;3.8&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-python@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.8'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Requirements&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pip install -r requirements.txt&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update COVD-19 Labs&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;python Fetcher/LabFetcher.py&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update MOHW RSS News&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;python Fetcher/MohwRssFetcher.py&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update COVID-19 global cases and deaths&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;python Fetcher/GlobalCasesFetcher.py&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update COVID-19 TW datasets&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;python Fetcher/DailyCovid19TW.py&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Copy JSON files to assets folder&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cp datasets/*.json web/src/assets/&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Commit and push if it changed&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;git config user.name "peter279k"&lt;/span&gt;
          &lt;span class="s"&gt;git config user.email "peter279k@gmail.com"&lt;/span&gt;
          &lt;span class="s"&gt;git add -A&lt;/span&gt;
          &lt;span class="s"&gt;timestamp=$(date -u)&lt;/span&gt;
          &lt;span class="s"&gt;git commit -m "Last Commit: ${timestamp}(TW)" || exit 0&lt;/span&gt;
          &lt;span class="s"&gt;git push origin master&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;web_build.yml&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Web&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Build&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Deploy'&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build-and-deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout 🛎️&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2.3.1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;persist-credentials&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install and Build 🔧&lt;/span&gt;
        &lt;span class="na"&gt;working-directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;web&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;cp .env.example .env&lt;/span&gt;
          &lt;span class="s"&gt;export VUE_APP_MAPKEY=${{ secrets.VUE_APP_MAPKEY }}&lt;/span&gt;
          &lt;span class="s"&gt;sed -i -e "s/MAP_KEY/$VUE_APP_MAPKEY/g" ./.env&lt;/span&gt;
          &lt;span class="s"&gt;npm install&lt;/span&gt;
          &lt;span class="s"&gt;npm run build&lt;/span&gt;
          &lt;span class="s"&gt;cd dist&lt;/span&gt;
          &lt;span class="s"&gt;cp index.html 404.html&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy 🚀&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;JamesIves/github-pages-deploy-action@3.6.2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GIT_CONFIG_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;peter279k"&lt;/span&gt;
          &lt;span class="na"&gt;GIT_CONFIG_EMAIL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;peter279k@gmail.com"&lt;/span&gt;
          &lt;span class="na"&gt;SINGLE_COMMIT&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.TOKEN }}&lt;/span&gt;
          &lt;span class="na"&gt;BRANCH&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gh-pages&lt;/span&gt;
          &lt;span class="na"&gt;FOLDER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;web//dist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Here are some useful references about GitHub action workflows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows"&gt;Events trigger about GitHub Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets"&gt;Encrypted secrets settings about GitHub Workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Don’t Use Margins For Spacing Between Components, Use Gaps</title>
      <author>Domagoj Vidovic</author>
      <pubDate>Tue, 07 Dec 2021 15:24:44 +0000</pubDate>
      <link>https://dev.to/domagojvidovic/dont-use-margins-for-spacing-between-components-use-gaps-4llc</link>
      <guid>https://dev.to/domagojvidovic/dont-use-margins-for-spacing-between-components-use-gaps-4llc</guid>
      <description>&lt;p&gt;The layout is hard.&lt;/p&gt;

&lt;p&gt;There are many different CSS/HTML approaches these days, but most of them are wrong.&lt;/p&gt;

&lt;p&gt;"I need to create vertical spacing between components; should I use margins or paddings?"&lt;/p&gt;

&lt;p&gt;None.&lt;/p&gt;

&lt;p&gt;Let's dive deeper into the organisation of your components on the screen.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-fall-of-margins"&gt;
  &lt;/a&gt;
  The Fall Of Margins
&lt;/h2&gt;

&lt;p&gt;In prehistoric Web times when we had linked documents instead of reusable components, margins made a lot of sense. Let's face it, there wasn't a lot of choices.&lt;/p&gt;

&lt;p&gt;Today, in an ideal situation, your Web App should be composed out of reusable components, all the time.&lt;/p&gt;

&lt;p&gt;You should be able to pick a component, plug it somewhere in the UI, and it should "magically" work, without any additional styling.&lt;/p&gt;

&lt;p&gt;If your layout is set up correctly, mobile design should work out of the box too!&lt;/p&gt;

&lt;p&gt;Margins are not great here. Obviously, you can get the job done, but it takes far more effort. It's way less elegant, and harder to maintain.&lt;/p&gt;




&lt;p&gt;So, how should we add spacing between those components?&lt;/p&gt;

&lt;p&gt;We can just pass margin as a prop, right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No.&lt;/strong&gt; Components shouldn't care about spacing between them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Their parents should.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#adding-some-gap"&gt;
  &lt;/a&gt;
  Adding Some Gap
&lt;/h2&gt;

&lt;p&gt;Our layout can be magical and powerful with &lt;code&gt;flex&lt;/code&gt; and &lt;code&gt;grid&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's say we have multiple components and want to have 3 in each row. Also, spacing between them should be &lt;code&gt;1rem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Components don't care about that. Only the parent does:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that it! Whichever component we stick here, it will magically work (if we don't have a large &lt;code&gt;min-width&lt;/code&gt; set on them).&lt;/p&gt;

&lt;p&gt;What about tablet and mobile designs? The tablet should display 2 items per row, and mobile just 1.&lt;/p&gt;

&lt;p&gt;Well, we just need to add 2 different media queries; one with &lt;code&gt;grid-template-columns: 1fr 1fr;&lt;/code&gt; for tablet, and &lt;code&gt;grid-template-columns: 1fr;&lt;/code&gt; for mobile.&lt;/p&gt;

&lt;p&gt;And our layout will work all the time with just a few simple lines!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gap&lt;/code&gt; is a replacement for all various combinations of parent + child selectors and &lt;code&gt;margin&lt;/code&gt; &lt;code&gt;top&lt;/code&gt;/&lt;code&gt;right&lt;/code&gt;/&lt;code&gt;bottom&lt;/code&gt;/&lt;code&gt;left&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#when-to-use-margins"&gt;
  &lt;/a&gt;
  When To Use Margins?
&lt;/h2&gt;

&lt;p&gt;We don't want to make unnecessary wrappers for all of our elements, and many of them need spacing between. What should we do?&lt;/p&gt;

&lt;p&gt;If you style pure HTML elements, margins are acceptable here.&lt;/p&gt;

&lt;p&gt;I still encourage you to structure them with grid/flex and use gap, but sometimes it's just not so easy to do that without adding additional wrapper elements.&lt;/p&gt;

&lt;p&gt;So, this should be enough to make a decision:&lt;/p&gt;

&lt;p&gt;Can you add spacing without adding extra elements, with grid/flex + gap?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If yes, do it.&lt;/li&gt;
&lt;li&gt;If not, use margins.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remember, this is true only for pure HTML elements. You never want to have margins on your components. A parent should always take care of their positioning on the screen. &lt;code&gt;grid&lt;/code&gt;/&lt;code&gt;flex&lt;/code&gt; + &lt;code&gt;gap&lt;/code&gt; is the most elegant and powerful option here.&lt;/p&gt;




&lt;p&gt;Also, a valid use case is when the spacing between the components is different. Selecting a child component in a &lt;code&gt;.parent .child {}&lt;/code&gt; format and adding a margin makes a lot of sense.&lt;/p&gt;

&lt;p&gt;But if you have too many different spacings, you need to ask yourself - is there a problem with the design itself?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#pros-and-cons"&gt;
  &lt;/a&gt;
  Pros and Cons
&lt;/h2&gt;

&lt;p&gt;Let's take a look at the pros first.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your overall architecture will be much cleaner.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grid&lt;/code&gt; and &lt;code&gt;flex&lt;/code&gt; are powerful. All scenarios like element wrapping, overflow, and much more will be covered.&lt;/li&gt;
&lt;li&gt;Responsive design works out of the box. It's so easy when you don't need to switch from margin-left to margin-top for mobile layouts.&lt;/li&gt;
&lt;li&gt;Instead of calculating the position of every element relative to each other, the parent will always do it with a clear picture of a whole system.&lt;/li&gt;
&lt;li&gt;Your CSS will be much cleaner. You won't need those ugly classes where you target everything instead of the last element because you don't want to add margin-bottom to the last item in the list.&lt;/li&gt;
&lt;li&gt;Your components will be completely reusable because they won't have any spacing by default.&lt;/li&gt;
&lt;li&gt;This whole system will be way easier to maintain and extend.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's kinda like the &lt;strong&gt;plug and play system&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With margins, it's the plug, &lt;strong&gt;adjust&lt;/strong&gt;, and then play system.&lt;/p&gt;

&lt;p&gt;We don't want that extra adjustment step.&lt;/p&gt;




&lt;p&gt;Are there any cons? Well, both yes and no. The only one I can think of is &lt;code&gt;gap&lt;/code&gt; not supported by IE11.&lt;/p&gt;

&lt;p&gt;But you know what? Google search has dropped support for IE11. And you should too.&lt;/p&gt;

&lt;p&gt;Let your layout become something you're so proud of. We're building a system of components here and &lt;code&gt;gap&lt;/code&gt; is just perfect for it.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Shrinking file size of PDF using a small bash script</title>
      <author>manish srivastava</author>
      <pubDate>Tue, 07 Dec 2021 15:23:02 +0000</pubDate>
      <link>https://dev.to/manishfoodtechs/shrinking-file-size-of-pdf-using-a-small-bash-script-2pd1</link>
      <guid>https://dev.to/manishfoodtechs/shrinking-file-size-of-pdf-using-a-small-bash-script-2pd1</guid>
      <description>&lt;p&gt;This is one of the easiest method to shrink file size in Linux / Mac Os. A bash script can do for you. The original source etc is mentioned below in script. You can visit the page for more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Creat a file with .sh extention and copy the script below.&lt;/li&gt;
&lt;li&gt;Chmod +x Script.sh&lt;/li&gt;
&lt;li&gt;./Script.sh input50MB.pdf output10MB.pdf&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hope this helps someone 😁&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/sh

# http://www.alfredklomp.com/programming/shrinkpdf
# Licensed under the 3-clause BSD license:
#
# Copyright (c) 2014-2019, Alfred Klomp
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


shrink ()
{
    gs                  \
      -q -dNOPAUSE -dBATCH -dSAFER      \
      -sDEVICE=pdfwrite         \
      -dCompatibilityLevel=1.3      \
      -dPDFSETTINGS=/screen         \
      -dEmbedAllFonts=true          \
      -dSubsetFonts=true            \
      -dAutoRotatePages=/None       \
      -dColorImageDownsampleType=/Bicubic   \
      -dColorImageResolution=$3     \
      -dGrayImageDownsampleType=/Bicubic    \
      -dGrayImageResolution=$3      \
      -dMonoImageDownsampleType=/Subsample  \
      -dMonoImageResolution=$3      \
      -sOutputFile="$2"         \
      "$1"
}

check_smaller ()
{
    # If $1 and $2 are regular files, we can compare file sizes to
    # see if we succeeded in shrinking. If not, we copy $1 over $2:
    if [ ! -f "$1" -o ! -f "$2" ]; then
        return 0;
    fi
    ISIZE="$(echo $(wc -c "$1") | cut -f1 -d\ )"
    OSIZE="$(echo $(wc -c "$2") | cut -f1 -d\ )"
    if [ "$ISIZE" -lt "$OSIZE" ]; then
        echo "Input smaller than output, doing straight copy" &amp;gt;&amp;amp;2
        cp "$1" "$2"
    fi
}

usage ()
{
    echo "Reduces PDF filesize by lossy recompressing with Ghostscript."
    echo "Not guaranteed to succeed, but usually works."
    echo "  Usage: $1 infile [outfile] [resolution_in_dpi]"
}

IFILE="$1"

# Need an input file:
if [ -z "$IFILE" ]; then
    usage "$0"
    exit 1
fi

# Output filename defaults to "-" (stdout) unless given:
if [ ! -z "$2" ]; then
    OFILE="$2"
else
    OFILE="-"
fi

# Output resolution defaults to 72 unless given:
if [ ! -z "$3" ]; then
    res="$3"
else
    res="72"
fi

shrink "$IFILE" "$OFILE" "$res" || exit $?

check_smaller "$IFILE" "$OFILE"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>How to use Ngrok for tunnelling the local servers?
</title>
      <author>ROHAN KADAM</author>
      <pubDate>Tue, 07 Dec 2021 14:50:57 +0000</pubDate>
      <link>https://dev.to/rohan2596/how-to-use-ngrok-for-tunnelling-the-local-servers-58n4</link>
      <guid>https://dev.to/rohan2596/how-to-use-ngrok-for-tunnelling-the-local-servers-58n4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#ngrok"&gt;
  &lt;/a&gt;
  Ngrok
&lt;/h2&gt;

&lt;p&gt;Hello👋, Its Rohan Kadam😊&lt;/p&gt;

&lt;p&gt;Developing an application and testing it's at the same time is part of any software. We might need to expose our local server for testing our application. We wish to show our work to a colleague or client, or we need a secure, publicly available callback URL to interact with a web service. We could go ahead and upload your app to a hosting platform like AWS or Google Cloud, but then every time we make an update, we have to push those changes to our host server…not great. To overcome this problem we could concept called &lt;strong&gt;tunnelling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R7WqmUNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/6000/1%2AbhVNy_mtUOvqfIP1Durbsw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R7WqmUNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/6000/1%2AbhVNy_mtUOvqfIP1Durbsw.jpeg" alt="ngrok" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-tunnelling"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Tunnelling?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Tunnelling is used to &lt;strong&gt;create a network link between two computers in conditions of restricted network connectivity including firewalls, NATs and ACLs&lt;/strong&gt;, among other restrictions. The tunnel is created by an intermediary called a proxy server which is usually located in a DMZ.In order to achieve we used &lt;a href="https://ngrok.com/"&gt;**Ngrok &lt;/a&gt;**Tunnelling&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-ngrok"&gt;
  &lt;/a&gt;
  What is Ngrok?
&lt;/h3&gt;

&lt;p&gt;Ngrok exposes local servers behind NATs and firewalls to the public internet over secure tunnels.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does It work?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Download ngrok:-&lt;/strong&gt; Download and run a program on your machine and provide it with the port of a network service, usually a web server.&lt;/p&gt;

&lt;p&gt;**Connect your service:- **Connect to ngrok cloud service which accepts traffic on a public address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Access from anywhere:-&lt;/strong&gt; Traffic is relayed through to the ngrok process running on your machine and then on to the local address you specified.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-its-good-for"&gt;
  &lt;/a&gt;
  What it's Good For?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run personal cloud services from your home.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Demo websites without deploying.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build webhook consumers on your dev machine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test mobile apps connected to your locally running backend.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stable addresses for your connected devices that are deployed in the field.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-1-on-running-exe-file-below-screen-will-be-visible"&gt;
  &lt;/a&gt;
  Step 1: On Running Exe file below screen will be visible
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RD9akhnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A-jv4x5x3PkRJc6ZFJC2Obw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RD9akhnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A-jv4x5x3PkRJc6ZFJC2Obw.png" alt="ngrok-1" width="718" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-exposing-or-tunnelling-port-8080"&gt;
  &lt;/a&gt;
  Step 2: Exposing or Tunnelling port 8080
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2-TUh3Ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A-gTslzJKK_M8Fwpz9uVm0Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2-TUh3Ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A-gTslzJKK_M8Fwpz9uVm0Q.png" alt="Tunnelling Port 8080" width="349" height="41"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-on-successful-tunnelling-able-to-see-the-below-screen"&gt;
  &lt;/a&gt;
  Step 3: On Successful Tunnelling able to see the below screen.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hqLO4R2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATUUGwApe5MaLpfVy_QVp5A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hqLO4R2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATUUGwApe5MaLpfVy_QVp5A.png" alt="Ngrok Cli" width="839" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note:- Above is a free version which is valid for two hours and&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  COMMANDS:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;authtoken save auth token to the configuration file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;http :- start an HTTP tunnel&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;start:- start tunnels by name from the configuration file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tcp:- start a TCP tunnel&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tls:- start a TLS tunnel&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;update:- update ngrok to the latest version&lt;br&gt;
version print the version string&lt;br&gt;
help Shows a list of commands or helps for one command&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ngrok is a command-line application, try typing ‘ngrok.exe http 80’&lt;br&gt;
at this terminal prompt to expose port 80.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:-
&lt;/h3&gt;

&lt;p&gt;In the article, we tried to answers many questions related to Tunneling and especially Ngrok Tunnelling how it helps developers around the world to test the application on the real servers without deploying cloud code and built faster applications.&lt;/p&gt;

&lt;p&gt;Please do share and like💖 if you find the article useful. Follow me on medium &lt;a href="https://dev.toundefined"&gt;Rohan Ravindra Kadam&lt;/a&gt; and on Twitter at &lt;a href="https://twitter.com/rohankadam25"&gt;**rohankadam25&lt;/a&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bibliography"&gt;
  &lt;/a&gt;
  Bibliography:-
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://ngrok.com/product"&gt;Ngrok Documentation&lt;/a&gt;
&lt;a href="https://ngrok.com/product"&gt;&lt;strong&gt;ngrok - secure introspectable tunnels to localhost&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tNroQqiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2Af9TMjifJVReTlh93qJ845Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNroQqiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2Af9TMjifJVReTlh93qJ845Q.png" alt="Thank You, Viewers." width="880" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How to overcome Imposter Syndrome in Tech</title>
      <author>Saji Wang</author>
      <pubDate>Tue, 07 Dec 2021 14:41:15 +0000</pubDate>
      <link>https://dev.to/codesphere/how-to-overcome-imposter-syndrome-in-tech-4e1o</link>
      <guid>https://dev.to/codesphere/how-to-overcome-imposter-syndrome-in-tech-4e1o</guid>
      <description>&lt;p&gt;Have you ever wondered why someone thinks so highly of you? Have you questioned why they’ve given you such a cool and important project to own at work? &lt;/p&gt;

&lt;p&gt;The majority of us have probably experienced Imposter Syndrome during some stage of our lives. No matter if you’re just starting out in your career, if you’re a perfectionist, or a high performer with many years experience, millions of people suffer with imposter syndrome. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-is-imposter-syndrome-exactly"&gt;
  &lt;/a&gt;
  So, what is imposter syndrome, exactly?
&lt;/h3&gt;

&lt;p&gt;A belief that you are not intelligent, creative or generally deserving of the success you are experiencing, even though there is plenty of evidence of your achievements.&lt;/p&gt;

&lt;p&gt;People who experience imposter syndrome are basically experiencing the feeling of being a fraud who is undeserving, which brings feelings of anxiety and stress as you feel like you’re misleading your colleagues and employees. &lt;/p&gt;

&lt;p&gt;Imposter syndrome is prevalent within the tech industry, with about 58% of tech employees stating that they currently experience some form of the condition within their careers. It’s especially common in software engineers, developers, and designers. It’s usually worse in people who are new within the tech industry, are part of an underrepresented group, or have come from different professional backgrounds. &lt;/p&gt;

&lt;p&gt;Some of these thoughts are normal to have while experiencing imposter syndrome:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“What am I doing here? I’m not a developer, I am fooling myself and other people”&lt;/li&gt;
&lt;li&gt;“My team is much smarter than I am, I don’t deserve to be here”&lt;/li&gt;
&lt;li&gt;“When people realise I’m not as intelligent as I make out, I’ll be fired”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The thought processes above make people believe that they are not worthy enough, that their achievements aren’t good enough, and that they’re fooling people into thinking they’re someone that they’re not. &lt;/p&gt;

&lt;p&gt;You will most likely become very worried about your position and performance which can lead to high amounts of stress and even burnout from working too much, seemingly to catch up with your peers - perpetuating the notion that you need to work twice as hard to keep up, just to prove your worthiness. &lt;/p&gt;

&lt;p&gt;The result of imposter syndrome is a working life dominated by anxiety, exhaustion, uncertainty, confusion and fear. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-vicious-cycle"&gt;
  &lt;/a&gt;
  The vicious cycle
&lt;/h3&gt;

&lt;p&gt;The tech industry is rife with imposter syndrome, the majority of designers and programmers suffer with it at one, or several points, in their career. You may assume that success will eradicate the syndrome and finally make you feel more worthy, however the more successful someone becomes, the more likely it is that they will feel like they’re fooling everyone. Rather than enjoying that success and recognising that their success came from themselves, and not because someone higher up made a mistake about you. &lt;/p&gt;

&lt;p&gt;One of the biggest problems with this syndrome is that a lot of people get stuck in a cycle. Believing that you’re not good enough leads to perfectionism, meaning that even the most menial tasks will take you much longer to complete, as you become obsessed that everything has to be perfect before submission. &lt;/p&gt;

&lt;p&gt;People who suffer with Imposter Syndrome may also find that they will over prepare for projects and meetings, you may find that you begin suffering with stage fright - not being able to present your work any more as you put too much pressure on yourself to perform perfectly, even on the spot. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-to-begin-to-overcome-imposter-syndrome"&gt;
  &lt;/a&gt;
  How to begin to overcome Imposter Syndrome
&lt;/h3&gt;

&lt;p&gt;Even though the effects of Imposter Syndrome are clearly bad for mental health, confidence and sense of self, once you start to recognise the symptoms we’ve discussed above, there are ways you can begin to overcome it, and regain your self belief. &lt;/p&gt;

&lt;p&gt;The three steps that will help:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find a mentor&lt;/li&gt;
&lt;li&gt;Remember your past experiences and training&lt;/li&gt;
&lt;li&gt;Keep track of your accomplishments &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s take a look at these in a little more detail. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-mentors"&gt;
  &lt;/a&gt;
  1. Mentors
&lt;/h3&gt;

&lt;p&gt;Finding a mentor within your professional environment will give you an outside perspective on what people really think of you and your work. You’ll find yourself feeling less alone in your negative self-view as you have someone specifically to talk through how you are feeling. &lt;/p&gt;

&lt;p&gt;As well as getting an outside perspective and building your confidence, a mentor will also be able to identify knowledge gaps that you might have and suggest training and learnings that you should work on to keep you constantly improving.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-past-experiences"&gt;
  &lt;/a&gt;
  2. Past experiences
&lt;/h3&gt;

&lt;p&gt;Reflecting on your past experiences and remembering the training you’ve been through will give you a much better perspective on how far you’ve come. Remembering how inexperienced you were at the beginning of your journey, compared to how much experience you’ve gained now should give you a sense of achievement, not fear.&lt;/p&gt;

&lt;p&gt;Knowing that you still have a lot to learn is a great thing - but don’t forget how much you’ve already learned and be proud of that fact. You don’t need to be an expert in your field before you experience success. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-your-accomplishments"&gt;
  &lt;/a&gt;
  3. Your accomplishments
&lt;/h3&gt;

&lt;p&gt;One piece of advice I’ve received that has worked wonders is to keep track of your accomplishments. Keep a document where you add praise you receive for the work you’ve done. &lt;br&gt;
When you’re not feeling worthy enough or your confidence has taken a hit you can open that document and remind yourself of all the great stuff you’ve achieved, and how much people have appreciated your hard work. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#to-wrap-up"&gt;
  &lt;/a&gt;
  To wrap up
&lt;/h3&gt;

&lt;p&gt;Remember - sometimes you can have a bad day, sometimes you will struggle to figure out a problem, and sometimes it will take you a little longer to figure out a solution to a project you’re working on. &lt;/p&gt;

&lt;p&gt;Once you recognise you’re suffering from Imposter Syndrome, take some of the advice we’ve spoken about here and put it into action. Constantly remind yourself of your achievements, and always listen to people's positive opinions of you and your work. &lt;/p&gt;

&lt;p&gt;We’re all human beings, and nobody should expect perfection from you all the time - not even you.&lt;/p&gt;




&lt;p&gt;Have you experienced imposter syndrome in your career? What are your top tips for other coders? Let us know in the comments below!&lt;/p&gt;

&lt;p&gt;Happy coding from your good friends at &lt;a href="https://link.codesphere.com/GS"&gt;Codesphere&lt;/a&gt;, the next-generation cloud provider.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Getting back into web-development. </title>
      <author>Hardik Singh</author>
      <pubDate>Tue, 07 Dec 2021 14:41:01 +0000</pubDate>
      <link>https://dev.to/shinzokun/getting-back-into-web-development-21bp</link>
      <guid>https://dev.to/shinzokun/getting-back-into-web-development-21bp</guid>
      <description>&lt;p&gt;At the almost end of the last year, I had taken up a ritual, a religious virtue on my hands. To learn to code, to learn to build, not just websites but build value, And to some extent, that’s what I solely did. Learned to provide value through code, through menial lines of words displayed on a screen that didn’t make sense to most people but somehow it conveyed value, somehow it made me happy. Somehow it quite brightened my life. &lt;/p&gt;

&lt;p&gt;But that didn’t last long, more than I expected. at the peak of October this year. I started getting frustrated, frustrated with coding, not coding but the reason that I had at the start of my journey was morphed into something I didn’t want. Annoyed, that I almost religiously started to hate building websites. &lt;/p&gt;

&lt;p&gt;I was angry, at myself. For getting bored, watching Tutorials, after tutorials. I was basically stuck in a tutorial hell and didn’t seem to find any reasons why I would want to continue on this path. I was bored of making websites too, changing the font style, changing the header tag. And god knows what.&lt;/p&gt;

&lt;p&gt;I had lost my reason. The reason that got me into it in the first place, The reason that had helped me endure the terrible cycles of learning and practice. The reason that actually made me get excited about learning to code. And actually to code. &lt;/p&gt;

&lt;p&gt;I had lost it somewhere, somewhere in the journey. From the superfluous innovation, I dreamt of at the start of my journey, to the money I was chasing by the end. &lt;/p&gt;

&lt;p&gt;I wasn’t excited, I wasn’t enjoying the “stucks” the coding provided me, just simply I was not sure about the path ahead. &lt;/p&gt;

&lt;p&gt;So, I dumped it. And went to look for a path. A different path that would excite me for the time being. &lt;/p&gt;

&lt;p&gt;Tried, I won’t say a lot but a few things, Things with careful consideration. From Day-Trade To Possibly enrolling for Psychology. But in the end, nothing worked. At least not the way I thought it would. I was still chasing money, it’s not that I don’t deem the importance of it, but I find it exhilarating to chase something that I don’t find exciting. &lt;/p&gt;

&lt;p&gt;Only to end up here again, The dream I had at the beginning of my adolescence. To innovate, to create, and to at least change the world with value, with value that I can provide, that my abilities and capabilities can provide. &lt;/p&gt;

&lt;p&gt;I knew I wanted to innovate, but also knew I had to get above money. Just enough to pass by, to strive. So that’s what I chose. This time. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My top priority is to innovate and secondary to strive.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;But, before any of that jazz, I got to learn, learn everything again from scratch till the moderate intermediate I was.&lt;/p&gt;

&lt;p&gt;So, here’s my journey. From now on, getting into development again. And possibly for the last time.&lt;br&gt;
My goal this time is to expand as much as possible, but also specialize in a few areas to keep myself sane. To at least get “ching ching” money. &lt;/p&gt;

&lt;p&gt;So, I’ll be starting as the most start. By going through The basic standards of the web. Html, CSS, And JS.&lt;/p&gt;

&lt;p&gt;And then probably will move to “React Native”, this time as I am quite excited to explore the awakenings of mobile development. And possibly Flutter too.&lt;/p&gt;

&lt;p&gt;Though my end goal as of right now in the hierarchy is to learn and understand more about “Blockchain, And CryptoCurrency Tech”. But yes I’ll probably be dwelling into a lot of spaces before I either find one (which is unlikely) or just explore possibly everything (which is also unlikely). &lt;/p&gt;

&lt;p&gt;yes. The only thing I would say I need this time. Is LUCK. &lt;br&gt;
&lt;em&gt;So, Best Of Luck&lt;/em&gt;. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Javascript method reproduce</title>
      <author>WEI FENG</author>
      <pubDate>Tue, 07 Dec 2021 14:35:54 +0000</pubDate>
      <link>https://dev.to/weifengnusceg/javascript-method-reproduce-1l2f</link>
      <guid>https://dev.to/weifengnusceg/javascript-method-reproduce-1l2f</guid>
      <description>&lt;p&gt;"Let's take a deep dive to the most basic javascript method implementation. Hope it will help you to understand the language better"&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;strong&gt;1. Object.create()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Object.create() method creates a new object, using an existing object as the prototype of the newly created object.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newCreate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fucntion&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// create a new function object as &lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;

    &lt;span class="c1"&gt;//bind the function object's prototype to the obj&lt;/span&gt;
    &lt;span class="nx"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;

    &lt;span class="c1"&gt;//return the newly created object based on F()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;F&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. instanceof&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The instanceof operator tests to see if the prototype property of a constructor appears anywhere in the prototype chain of an object. The return value is a boolean value.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myInstanceOf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//access left object's prototype chain&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;leftProto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt;
    &lt;span class="c1"&gt;//access right constructor's prototype method&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rightProto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;

    &lt;span class="c1"&gt;//check if rightProto is on the left object's prototype chain&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;leftProto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;leftProto&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;rightProto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;leftProto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;leftProto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. new&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myNew&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//create a empty object &lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="c1"&gt;//link the new object's prototype chain to the constructor's prototype&lt;/span&gt;
    &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;
    &lt;span class="c1"&gt;//call the constructor function on new object.&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. promise.all()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Promise.all() method takes an iterable of promises as an input, and returns a single Promise that resolves to an array of the results of the input promises. This returned promise will resolve when all of the input's promises have resolved, or if the input iterable contains no promises. It rejects immediately upon any of the input promises rejecting or non-promises throwing an error, and will reject with this first rejection message / error.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//takes in an array of promises&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myPromiseAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// return a new promise&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
        &lt;span class="c1"&gt;// setup a array to record the result&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="c1"&gt;//wrap the value from array in case it is not a promise &lt;/span&gt;
           &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
               &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="c1"&gt;// if there is an error, reject immediately&lt;/span&gt;
             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="c1"&gt;//resolve the result when finish iteration &lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Use this Tailwind CSS Cheat Sheet to speed up your development process</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Tue, 07 Dec 2021 14:32:36 +0000</pubDate>
      <link>https://dev.to/zolidev/use-this-tailwind-css-cheat-sheet-to-speed-up-your-development-process-2l6p</link>
      <guid>https://dev.to/zolidev/use-this-tailwind-css-cheat-sheet-to-speed-up-your-development-process-2l6p</guid>
      <description>&lt;p&gt;I've been working on the past few days on a &lt;a href="https://flowbite.com/tools/tailwind-cheat-sheet/"&gt;cheat sheet tool for Tailwind CSS&lt;/a&gt; that you can use to search for the utility classes from the framework from a single page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pDS73tRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2tjy3p73thb0ori7pp3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pDS73tRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2tjy3p73thb0ori7pp3.gif" alt="Tailwind CSS Cheat Sheet" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although I would still recommend using the official documentation when working with Tailwind CSS, having a searchable single page where you can quickly find the utility classes can speed up your development process even more.&lt;/p&gt;

&lt;p&gt;This cheat sheet tool includes all of the utility classes from the latest stable version of Tailwind CSS and as soon as v3.0 becomes stable I'll update the contents to include the JIT features as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flowbite.com/tools/tailwind-cheat-sheet/"&gt;Check it out here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How To Set Up a GitHub Action to Update the README File in All Your GitHub Repositories</title>
      <author>Geraldine</author>
      <pubDate>Tue, 07 Dec 2021 14:06:03 +0000</pubDate>
      <link>https://dev.to/geraldiner/how-to-set-up-a-github-action-to-update-the-readme-file-in-all-your-github-repositories-4epj</link>
      <guid>https://dev.to/geraldiner/how-to-set-up-a-github-action-to-update-the-readme-file-in-all-your-github-repositories-4epj</guid>
      <description>&lt;center&gt;&lt;h2&gt;Submission Info&lt;/h2&gt;&lt;/center&gt;


&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;A workflow for updating the README file in all your repositories. This is especially helpful if you use a template and want to update a specific section with new information, e.g. an "Other Projects" section that needs to be updated with more recent projects.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category
&lt;/h3&gt;

&lt;p&gt;Wacky Wildcards&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/geraldiner"&gt;
        geraldiner
      &lt;/a&gt; / &lt;a href="https://github.com/geraldiner/projects-readme-tutorial"&gt;
        projects-readme-tutorial
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;See below for a full tutorial!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#readme-files-in-brief-and-how-to-set-one-up"&gt;
  &lt;/a&gt;
  README Files in Brief and How to Set One Up
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#why-you-should-have-a-readme-file-in-your-github-repositories"&gt;
  &lt;/a&gt;
  Why You Should Have a README File in Your GitHub Repositories
&lt;/h3&gt;

&lt;p&gt;As you continue to build out your portfolio with projects on GitHub, it's a good idea to include a README at the root of each project to describe what the project is about and how it was built. This is useful for anyone who comes across your project—other developers, recruiters, or even your future self—to get a quick understanding of the project and your process. Personally, it is also a great reflection tool, since I usually write them after a project has been completed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S1Rl-nCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637519491653/tjH7fm8tr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S1Rl-nCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637519491653/tjH7fm8tr.png" alt="README file template by Alec Ortega (@alecortega)" width="880" height="858"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-write-a-readme-file-for-your-project"&gt;
  &lt;/a&gt;
  How to Write a README File for Your Project
&lt;/h3&gt;

&lt;p&gt;But of course, you don't always have to do this from scratch. Resources, such as &lt;a href="https://www.readme-templates.com/"&gt;GitHub README Templates&lt;/a&gt;, allows you to view README layouts for different sites, which can give you an idea of how to format your own README. &lt;a href="https://www.google.com/search?q=github+readme+template"&gt;A simple Google search for "github readme template"&lt;/a&gt; will also bring up a number of templates in repositories that you can just fork for yourself.&lt;/p&gt;

&lt;p&gt;As the title of this post suggests, a full breakdown of a README for your project is beyond the scope of this post. To help you get started, I recommend reading &lt;a href="https://hashnode.com/@tracycod3r"&gt;Tracy Nuwagaba&lt;/a&gt;'s article, &lt;a href="https://tracy.hashnode.dev/how-to-write-a-readme-for-your-github-project"&gt;How to write a readme for your GitHub project&lt;/a&gt;. If you're like me, you can pick your favorite template and tweak it to fit your needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-tip-load-the-template-as-a-snippet-in-vs-code"&gt;
  &lt;/a&gt;
  Bonus Tip: Load the template as a snippet in VS Code
&lt;/h3&gt;

&lt;p&gt;If you use VS Code as your main code/text editor, you can save your own snippets to reuse chunks of code in different places.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GfV84mtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qvzd07gobrkmuhbcrft.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GfV84mtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qvzd07gobrkmuhbcrft.gif" alt="Using code snippets in VS Code" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow &lt;a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets"&gt;these directions&lt;/a&gt; to save the template as a custom snippet in VS Code. You can also use &lt;a href="https://snippet-generator.app/"&gt;this snippet generator&lt;/a&gt; to easily format the code snippet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem-updating-older-readme-files-with-newer-content"&gt;
  &lt;/a&gt;
  Problem: Updating Older README Files with Newer Content
&lt;/h2&gt;

&lt;p&gt;As previously mentioned, I use the same README template for my projects, which includes a section for "Other Projects" and links to the repos of my other projects. (This is a not-so-secret technique to keep the user clicking through my GitHub portfolio 😏)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adt36vXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tndgn6znrkkuzahohxi5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adt36vXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tndgn6znrkkuzahohxi5.png" alt="Other Projects section of the README template I use for my projects" width="802" height="253"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Naturally, in my older projects, there were links to even-older projects. As I continue learning, I've built more projects and want to make sure the most recent and polished projects are always on display. But who wants to go through the other ~20+ repositories to update EVERY. SINGLE. README. FILE. 😵 Definitely not me.&lt;/p&gt;

&lt;p&gt;Using the tried-and-true method of Googling to see if anyone else has encountered this issue, I came across Eugene Yan's article, &lt;a href="https://eugeneyan.com/writing/how-to-update-github-profile-readme-automatically/"&gt;How to Update a GitHub Profile README Automatically&lt;/a&gt;. He also cites Simon Willison, who achieved a similar task of &lt;a href="https://simonwillison.net/2020/Jul/10/self-updating-profile-readme/"&gt;building a self-updating profile README for GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Both of these were done with GitHub Actions, which I'd never heard of until then. And while this sounds like a really neat integration for the GitHub Profile README, it wasn't quite what I needed. But I thought maybe I could still use GitHub Actions to solve my problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-github-actions-to-run-a-script-that-interacts-with-the-github-api"&gt;
  &lt;/a&gt;
  Solution: GitHub Actions to Run a Script that Interacts with the GitHub API
&lt;/h2&gt;

&lt;p&gt;In short, &lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt; are automated workflows that run based on triggers to perform a set of jobs. (For JavaScript folks, it's like &lt;code&gt;addEventListener&lt;/code&gt; for GitHub 😅) From pushes, to pull requests, to issues, a GitHub Action can be attached to those events, which will trigger the action and the job(s) will run. &lt;/p&gt;

&lt;p&gt;Again, I'd never heard of GitHub Actions before, so I had to spend a lot of time reading the documentation and other people's code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TcArqE81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://3.bp.blogspot.com/-pH1pCb3OqtQ/W9EagJJc50I/AAAAAAAMQOg/ew-YHjCU4E4hw7ortL3ZDscpc-fXur4kwCLcBGAs/s1600/AS0004540_16.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TcArqE81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://3.bp.blogspot.com/-pH1pCb3OqtQ/W9EagJJc50I/AAAAAAAMQOg/ew-YHjCU4E4hw7ortL3ZDscpc-fXur4kwCLcBGAs/s1600/AS0004540_16.gif" alt="https://3.bp.blogspot.com/-pH1pCb3OqtQ/W9EagJJc50I/AAAAAAAMQOg/ew-YHjCU4E4hw7ortL3ZDscpc-fXur4kwCLcBGAs/s1600/AS0004540_16.gif" width="370" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It turned out to be simpler than I thought, especially since I figured out you could write a script that you set up the action to run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stepbystep-instructions-to-setting-up-the-github-action"&gt;
  &lt;/a&gt;
  Step-by-Step Instructions to Setting Up the GitHub Action
&lt;/h2&gt;

&lt;p&gt;GitHub Actions uses YAML, which this tutorial doesn't require you to know a lot of. (Personally, I relied on the documentation and Eugene and Simon's code for this part.) But the main script is written in JavaScript and uses Node.js, so some knowledge of both is needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-set-up-your-project-in-your-local-environment"&gt;
  &lt;/a&gt;
  Step 1: Set up your project in your local environment
&lt;/h3&gt;

&lt;p&gt;First, set up your project on your computer or other work environment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 If you're not particularly tied to one editor or don't have a local environment, you can still code in the browser! Check out my article on browser-based code editors: &lt;a href="https://blog.geraldiner.com/three-levels-of-code-editors-in-the-browser"&gt;Three Levels of Code Editors in the Browser&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For this tutorial, I have a directory called &lt;code&gt;projects-readme-tutorial&lt;/code&gt; and I'll be using VS Code as my code editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J-3fOk5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4qjgi6x6v3nr6r4ggf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J-3fOk5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4qjgi6x6v3nr6r4ggf5.png" alt="VS Code editor with a project initialized" width="880" height="965"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-initiate-a-nodejs-project-with-raw-npm-init-endraw-and-install-dependencies"&gt;
  &lt;/a&gt;
  Step 2: Initiate a Node.js project with &lt;code&gt;npm init&lt;/code&gt; and install dependencies
&lt;/h3&gt;

&lt;p&gt;Next you have to initiate a Node.js project and install dependencies via a Terminal or Command Prompt.&lt;/p&gt;

&lt;p&gt;In VS Code, you can open the terminal by going to Terminal &amp;gt; New Terminal. You can use &lt;code&gt;npm init&lt;/code&gt;, which will take you through a series of questions to initiate your project, or use &lt;code&gt;npm init -y&lt;/code&gt; to use all the default configuration settings.&lt;/p&gt;

&lt;p&gt;Here, I used &lt;code&gt;npm init -y&lt;/code&gt; and a &lt;code&gt;package.json&lt;/code&gt; file was created in the directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z6xHYHRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqgqvtwyxclj3rs7no68.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z6xHYHRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqgqvtwyxclj3rs7no68.png" alt="In the terminal, run  raw `npm init -y` endraw  to initialized a NodeJS project" width="737" height="542"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can install some dependencies for this project. &lt;/p&gt;

&lt;p&gt;For this project, you'll need the following dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@octokit/core"&gt;@octokit/core&lt;/a&gt; - For accessing the GitHub API&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/dotenv"&gt;dotenv&lt;/a&gt; - For loading environment variables (such as a GitHub Personal Access Token) and keeping them secret when you push to the repository&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/nodemon"&gt;nodemon&lt;/a&gt; (optional) - For automatically restarting the node application when files are changed. I like to use this for quick and easy testing/debugging so I don't have to stop and start the server every time I change a file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run the following line in your terminal to install the dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;octokit&lt;/span&gt;&lt;span class="sr"&gt;/core dotenv nodemo&lt;/span&gt;&lt;span class="err"&gt;n
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your &lt;code&gt;package.json&lt;/code&gt; file should be updated with the dependencies you just installed. We'll come back to this in a bit to update the &lt;code&gt;scripts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xTk3Z5et--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oloq6wx4y6obxgumh2mx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xTk3Z5et--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oloq6wx4y6obxgumh2mx.png" alt="In package.json, you can see the dependencies added" width="734" height="460"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We'll also be using &lt;code&gt;fs&lt;/code&gt; for file system access, but that's already integrated with Node.js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-set-up-the-file-that-holds-the-text-to-update-all-the-readme-files"&gt;
  &lt;/a&gt;
  Step 3: Set up the file that holds the text to update all the README files
&lt;/h3&gt;

&lt;p&gt;Now you'll create the file that holds the text that will replace all the old text in the README files. This is the dynamic content, such as my "Other Projects" section of my README template. &lt;/p&gt;

&lt;p&gt;When creating this file, make sure there is some part that is easily distinguishable from the rest. This is so that in the main script, you can easily look for where the new content should be placed. You could add comments, such as &lt;code&gt;&amp;lt;!-- start dynamic content here --&amp;gt;&lt;/code&gt;, but I chose to go by the heading instead. There is no other "Other Projects" heading in the file.&lt;/p&gt;

&lt;p&gt;I've created a new file named &lt;code&gt;projects.md&lt;/code&gt; and pasted in the content that will replace the old content in the README files. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N_5eykj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61nurrmh44u54aoa7nue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N_5eykj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61nurrmh44u54aoa7nue.png" alt="Side by side comparison of the projects.md and README template file" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;projects.md&lt;/code&gt; file on the left is just the "Other Projects" section from my README template file on the right.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-write-a-script-to-access-the-github-api-and-update-the-readme-file-in-all-repos"&gt;
  &lt;/a&gt;
  Step 4: Write a script to access the GitHub API and update the README file in all repos
&lt;/h3&gt;

&lt;p&gt;Now comes the meat and potatoes of the project. This is the script that will do all the work in finding the README file in all your repositories, updating the README file with the content from the &lt;code&gt;projects.md&lt;/code&gt; file, and pushing the new file and its changes to the repository. If you're looking to do something else with this project, be sure to read the &lt;a href="https://docs.github.com/en/rest/guides/getting-started-with-the-rest-api"&gt;GitHub API documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For anything interesting, we need a Personal Access Token when making requests to the GitHub API. Follow these instructions to get your own &lt;a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"&gt;Personal Access Token&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you've got the Personal Access Token, save it in a &lt;code&gt;.env&lt;/code&gt; file in the root of your project folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WLN26hyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dan3k4st6qsu2ltery2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WLN26hyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dan3k4st6qsu2ltery2.png" alt="Add your GitHub Personal Access Token to a .env file" width="880" height="773"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, create a file named &lt;code&gt;index.js&lt;/code&gt;. We'll need the &lt;code&gt;fs&lt;/code&gt;, &lt;code&gt;dotenv&lt;/code&gt;, and &lt;code&gt;octokit&lt;/code&gt; packages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1NdS_zKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t22g3hv414an7u5via2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1NdS_zKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t22g3hv414an7u5via2.png" alt="Working on index.js" width="880" height="772"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we have to set up the &lt;code&gt;octokit&lt;/code&gt; client with our Personal Access Token to access our repos and files. For more information about setting up &lt;code&gt;octokit&lt;/code&gt;, take a look at &lt;a href="https://github.com/octokit/octokit.js"&gt;their documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eIYf5wae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/313zp4u5952v7q96iyl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eIYf5wae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/313zp4u5952v7q96iyl2.png" alt="Adding octokit client to index.js" width="880" height="252"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The rest of the file is made up of asynchronous functions that will&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find all your repos&lt;/li&gt;
&lt;li&gt;Access the current README file (or create one if it doesn't exist)&lt;/li&gt;
&lt;li&gt;Commit the updated/new README file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Find All Your Repos&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This part of the script uses the &lt;a href="https://docs.github.com/en/rest/reference/repos#list-repositories-for-a-user"&gt;"List repositories for a user" endpoint&lt;/a&gt; of the GitHub API. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dwuJt0hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6hlw6y40bq9ywvloukl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dwuJt0hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6hlw6y40bq9ywvloukl.png" alt="Asynchronous function to find all repositories and update the README file in each" width="880" height="395"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On &lt;code&gt;line 5&lt;/code&gt;, note that if you have more than 100 repositories, you'll have to modify the code a bit to cover all your repositories, since the max per page is 100.&lt;/p&gt;

&lt;p&gt;On &lt;code&gt;line 7&lt;/code&gt;, I take the extra step of filtering out certain repos that I don't want to be updated, including the README file for my GitHub profile and the project itself.&lt;/p&gt;

&lt;p&gt;Then, on &lt;code&gt;lines 8-10&lt;/code&gt; a simple for loop goes through each repo to find and access the README file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Access the Current README file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This part of the script uses the &lt;a href="https://docs.github.com/en/rest/reference/repos#get-repository-content"&gt;"Get repository content" endpoint&lt;/a&gt; of the GitHub API. There are two other endpoints for specifically getting the README file of a directory, but for some reason, I couldn't get those to work. This one was the only one that would successfully retrieve the file (if it existed).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QtDrApkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uojtu7gi0f010hahkt5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QtDrApkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uojtu7gi0f010hahkt5i.png" alt="Asynchronous function to handle updating the README in the given repo" width="880" height="491"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On &lt;code&gt;line 3&lt;/code&gt; is where the actual request is being made.&lt;/p&gt;

&lt;p&gt;The data looks something like this 🤯:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9xrTsCSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxscxiso9mr72ks4zkc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9xrTsCSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxscxiso9mr72ks4zkc2.png" alt="Using the GitHub API, we can get the data for the README file in a repo as shown here" width="880" height="1503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what we're most interested in are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;path&lt;/code&gt; - the file name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sha&lt;/code&gt; - the id for the latest commit&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;content&lt;/code&gt; - the actual content of the README file in &lt;code&gt;base64&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;encoding&lt;/code&gt; - the encoding for the file content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So on &lt;code&gt;line 4&lt;/code&gt;, there is some destructuring to isolate those pieces of information.&lt;/p&gt;

&lt;p&gt;The lines that follow are for converting the file contents from &lt;code&gt;base64&lt;/code&gt; to a String. Then, it finds the index for the "Other Projects" section heading (remember when I said to make it something easily distinguishable?). With this index, we can use &lt;code&gt;.slice()&lt;/code&gt; to only take the first part of the content and concatenate the new content from the &lt;code&gt;projects.md&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;There is a helper function to easily get the new content using the &lt;code&gt;fs&lt;/code&gt; package:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwSUMO_k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mq2fyi01knimcp0kqnd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwSUMO_k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mq2fyi01knimcp0kqnd.png" alt="Helper function to get the contents of the projects.md file, which is used to update each README file" width="880" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the README file doesn't exist, it will just create a new one with the content from &lt;code&gt;projects.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Commit the updated/new README file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally, the updated/new README file will be committed to their respective repos. This is where the &lt;code&gt;sha&lt;/code&gt; in the previous code segment comes in handy, so that it can replace the newest commit.&lt;/p&gt;

&lt;p&gt;This part of the script uses the &lt;a href="https://docs.github.com/en/rest/reference/repos#create-or-update-file-contents"&gt;"Create or update file contents" endpoint&lt;/a&gt; of the GitHub API. Using information generated in the previous code segment, it will make a &lt;code&gt;PUT&lt;/code&gt; request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---w1gutDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prvrqqzfyjl7xpy9iovm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---w1gutDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prvrqqzfyjl7xpy9iovm.png" alt="Asynchronous function to handle committing the updated README file to the repo" width="880" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The final script&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The final script should look like the code below. Remember that we've only defined functions right now. We need to actually call the main function, &lt;code&gt;updateAllRepos()&lt;/code&gt;, so all that work will actually run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MRo-d12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75kfryo38l2kkbxna8nf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MRo-d12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75kfryo38l2kkbxna8nf.png" alt="Final version of index.js" width="880" height="1155"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Running/Testing the script&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we've got the script set up, you can test it yourself by running &lt;code&gt;index.js&lt;/code&gt; with &lt;code&gt;node&lt;/code&gt; (or &lt;code&gt;nodemon&lt;/code&gt;, if it was installed).&lt;/p&gt;

&lt;p&gt;Back in the &lt;code&gt;package.json&lt;/code&gt; file, add the following to the &lt;code&gt;scripts&lt;/code&gt; section:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I6Yrgb-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r97ev7m7q9i7toxmody0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I6Yrgb-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r97ev7m7q9i7toxmody0.png" alt="Adding scripts to package.json" width="880" height="773"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-set-up-the-github-action-in-a-yaml-file"&gt;
  &lt;/a&gt;
  Step 5: Set up the GitHub Action in a YAML file
&lt;/h3&gt;

&lt;p&gt;Now that we've got the main script set up, we can work on setting up the actual GitHub Action. GitHub Actions are &lt;strong&gt;workflows&lt;/strong&gt; made of &lt;strong&gt;event(s)&lt;/strong&gt; that trigger &lt;strong&gt;job(s)&lt;/strong&gt;. For this GitHub Action, we ultimately want to run the script we just created whenever the &lt;code&gt;projects.md&lt;/code&gt; file is updated and pushed to the repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EjhI8hpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f7fkfk787jdc358ifns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EjhI8hpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f7fkfk787jdc358ifns.png" alt="Basic GitHub Action workflow" width="212" height="197"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the root of your project directory, create a folder called &lt;code&gt;.github&lt;/code&gt;, and in that folder, create another folder called &lt;code&gt;workflows&lt;/code&gt;. In the &lt;code&gt;workflows&lt;/code&gt; folder, create a file called &lt;code&gt;action.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6GHViOz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60psf1ksy0irrejsee1t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6GHViOz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60psf1ksy0irrejsee1t.png" alt="Directory structure for the GitHub Action" width="880" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This action can be broken down to the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;event&lt;/strong&gt; will be a &lt;code&gt;push&lt;/code&gt; to the repository, specifically for the &lt;code&gt;projects.md&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;The main &lt;strong&gt;job&lt;/strong&gt; is to run the &lt;code&gt;index.js&lt;/code&gt; script, which is further broken down to the following steps:

&lt;ul&gt;
&lt;li&gt;Check out the repo&lt;/li&gt;
&lt;li&gt;Set up a Node.js environment&lt;/li&gt;
&lt;li&gt;Install the dependencies&lt;/li&gt;
&lt;li&gt;Run the script&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;code&gt;action.yaml&lt;/code&gt; file, this translates to the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3jVLchd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h98ylfars1mr0iryrkco.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3jVLchd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h98ylfars1mr0iryrkco.png" alt="GitHub Action code for running index.js when the projects.md file is pushed to the repo" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll notice on &lt;code&gt;lines 20-21&lt;/code&gt; that we're setting an environment variable called &lt;code&gt;GH_TOKEN&lt;/code&gt;, like we did in the &lt;code&gt;.env&lt;/code&gt; file. In order for the script to have access to the &lt;code&gt;GH_TOKEN&lt;/code&gt; while being run by the action, you need to set a repository secret. &lt;a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository"&gt;Follow these instructions&lt;/a&gt; to set a secret for your repository. &lt;/p&gt;

&lt;p&gt;You can set any number of environment variables and secrets, and access them the same way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-set-up-a-github-repository-for-where-the-github-action-should-live"&gt;
  &lt;/a&gt;
  Step 6: Set up a GitHub repository for where the GitHub Action should live
&lt;/h3&gt;

&lt;p&gt;Now that we've got all our files set up, we can push all our code to GitHub and get the GitHub Action up and running.&lt;/p&gt;

&lt;p&gt;First, set up a GitHub repository to house this project and the GitHub Action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sTXHsa3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajg2rgraakbmyh75ja3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sTXHsa3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajg2rgraakbmyh75ja3h.png" alt="Setting up a repo on GitHub for the project" width="880" height="904"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, follow the instructions for "...or push an existing repository from the command line" to connect to your local work environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--piIgZA82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bu9o3b1mu89ie7gizjxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--piIgZA82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bu9o3b1mu89ie7gizjxg.png" alt="Follow instructions for connecting your local environment to the repo just created" width="880" height="904"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Don't forget to set up a &lt;code&gt;.gitignore&lt;/code&gt; file to ignore the &lt;code&gt;node_modules&lt;/code&gt; folder and &lt;code&gt;.env&lt;/code&gt; file that contains your Personal Access Token.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlV2Dagl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9fszo7kjwguw25uco2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlV2Dagl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9fszo7kjwguw25uco2b.png" alt="Set up .gitignore file" width="880" height="315"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything worked out smoothly, you should see your code in the repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oE_6GeTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbsxdqp8x67yx9pikcyt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oE_6GeTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbsxdqp8x67yx9pikcyt.png" alt="Commit all the code we've done to the repo" width="880" height="675"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you go to the "Actions" tab, you might not see anything yet since it's the initial commit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3UmsfEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbhsfod2tc29w673ba73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3UmsfEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbhsfod2tc29w673ba73.png" alt="Initially, the Actions tab in the repo might be empty because of the initial commit" width="880" height="801"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, once you make some changes to &lt;code&gt;projects.md&lt;/code&gt; and push the changes to the repository, it should run the action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--18iIniDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l42l2m53x8q763odx68k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18iIniDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l42l2m53x8q763odx68k.png" alt="Actions tab seeing some action after projects.md is committed with changes" width="880" height="490"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And once the action is completed, you should see your README files updated, like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ih558-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3f7qhe5g54bbxgemr5uc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ih558-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3f7qhe5g54bbxgemr5uc.png" alt="Changes seen in the README file for one of my older repos" width="880" height="906"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;And that's it! Now you have a single file that can be used to update a bajillion other files! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Rp0gktX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/527fbaf54fd5e4a1df0431dc0dbdd3fb/tenor.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Rp0gktX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/527fbaf54fd5e4a1df0431dc0dbdd3fb/tenor.gif" alt="Silly Ton Ton gif" width="498" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you learned as much as I did about GitHub Actions. It makes me curious about a whole bunch of other automations I could create, like the one that autogenerates the GitHub Profile README. &lt;/p&gt;

&lt;p&gt;If you have any questions or need some help, please feel free to reach out. &lt;/p&gt;

&lt;p&gt;Happy coding~ ✨&lt;/p&gt;




&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;💖 Geraldine | Say hi on Twitter 👋🏾 &lt;a href="https://twitter.com/geraldinedesu"&gt;@geraldinedesu&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nm2YUN91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/gM0piFxf9AMVy/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nm2YUN91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/gM0piFxf9AMVy/giphy.gif" alt="It's feng shui" width="398" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post was put together as if rearranging furniture. I had to move around the different pieces to make sure the step-by-step instructions were logical and easy to follow.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://media2.giphy.com/media/gM0piFxf9AMVy/giphy.gif"&gt;Giphy&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>github</category>
    </item>
  </channel>
</rss>
