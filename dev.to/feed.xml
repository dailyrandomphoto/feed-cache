<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>my-notebook using MongoDB</title>
      <author>Mohit Maroliya</author>
      <pubDate>Wed, 12 Jan 2022 15:23:14 +0000</pubDate>
      <link>https://dev.to/mohitm15/my-notebook-using-mongodb-2ej6</link>
      <guid>https://dev.to/mohitm15/my-notebook-using-mongodb-2ej6</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;Today, writing notes is very important in order to stay organised. Especially in Corperate sector, When you write all your tasks in form of notes, they seem more manageable. When you've got a clear outline of the tasks you've got to do and those you've completed, it helps you stay focused. Also it works as a reminder for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;my-notebook&lt;/strong&gt; is a web application that is used to keep your notes securly. Each user can create, edit and delete its own notes. It also authenticates the user before performing any CRUD operations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category-prime-time"&gt;
  &lt;/a&gt;
  Submission Category: Prime Time
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mohitm15"&gt;
        mohitm15
      &lt;/a&gt; / &lt;a href="https://github.com/mohitm15/my-notebook"&gt;
        my-notebook
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      my-notebook is a web application that is used to keep your notes securely. 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;br&gt;

&lt;h3&gt;
my-notebook&lt;/h3&gt;
  &lt;p&gt;
    Handy tool to make your notes
    &lt;br&gt;
    &lt;a href="https://github.com/mohitm15/my-notebook"&gt;&lt;strong&gt;Explore the docs »&lt;/strong&gt;&lt;/a&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;a href="https://github.com/github_username/repo_name"&gt;View Demo&lt;/a&gt;
  &lt;/p&gt;

  &lt;h2&gt;
Table of Contents&lt;/h2&gt;
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href="https://github.com/mohitm15/my-notebook#about-the-project"&gt;About The Project&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href="https://github.com/mohitm15/my-notebook#built-with"&gt;Built With&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="https://github.com/mohitm15/my-notebook#getting-started"&gt;Getting Started&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href="https://github.com/mohitm15/my-notebook#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="https://github.com/mohitm15/my-notebook#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
       &lt;li&gt;&lt;a href="https://github.com/mohitm15/my-notebook#runningcode"&gt;Running the code&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/mohitm15/my-notebook#rpreview"&gt;Preview&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/mohitm15/my-notebook#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/mohitm15/my-notebook#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;

&lt;h2&gt;
About The Project&lt;/h2&gt;
&lt;p&gt;my-notebook is a web application that is used to keep your notes securly. Each user can create, edit and delete its own notes. It also authenticates the user before performing any CRUD operation.&lt;/p&gt;
&lt;h3&gt;
Built With&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/" rel="nofollow"&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/" rel="nofollow"&gt;ReactJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://expressjs.com/" rel="nofollow"&gt;ExpressJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mongodb.com/" rel="nofollow"&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;p&gt;To get a local copy up and running follow these simple steps.&lt;/p&gt;
&lt;h3&gt;
Prerequisites&lt;/h3&gt;
&lt;p&gt;Package.json file mentioned the requirements you need to use the software and how to install them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;npm&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install npm@latest -g&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any code editor of your choice (VScode preferable )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Installation&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Clone the repo
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/mohitm15/my-notebook.git&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Install NPM packages and requirements
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
Running the code&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To run the frontend server , go to terminal and run&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;    &lt;span class="pl-c1"&gt;cd&lt;/span&gt; frontend&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;and then&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;…
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mohitm15/my-notebook"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;[Note:] # (Be sure to link to any open source projects that are using your workflow!)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#technologies-used-"&gt;
  &lt;/a&gt;
  Technologies Used :
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;FrontEnd :&lt;/strong&gt; ReactJS &amp;amp; Framer Motion&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Backend :&lt;/strong&gt; ExpressJS &amp;amp; NodeJS&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DataBase :&lt;/strong&gt; MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#screenshots"&gt;
  &lt;/a&gt;
  ScreenShots
&lt;/h4&gt;

&lt;p&gt;[Note:] # Screenshots/demo videos are encouraged!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#signup-page"&gt;
  &lt;/a&gt;
  &lt;em&gt;SignUp Page&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJ6ITd3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06v52ia1umt3pqzjs7a5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJ6ITd3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06v52ia1umt3pqzjs7a5.png" alt="signup_page" width="880" height="414"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#login-page"&gt;
  &lt;/a&gt;
  &lt;em&gt;Login Page&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7_4iBKKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92lt03wfto33xgspcctj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_4iBKKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92lt03wfto33xgspcctj.png" alt="login_page" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#home-page"&gt;
  &lt;/a&gt;
  &lt;em&gt;Home Page&lt;/em&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Theme : &lt;strong&gt;Dark&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SrMwlgZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igkrq7azed7sq6p4ktpj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SrMwlgZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igkrq7azed7sq6p4ktpj.png" alt="homepage_dark" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Theme : &lt;strong&gt;High Contrast&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-Rfyygy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98r1q9p0qy6detyprg3x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-Rfyygy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98r1q9p0qy6detyprg3x.png" alt="homepage_highcontrast" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Theme : &lt;strong&gt;Dark Teal&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X0RxQd5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlxugxr5lh7ok7ve22m2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X0RxQd5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlxugxr5lh7ok7ve22m2.png" alt="homepage_teal" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Theme : &lt;strong&gt;Rainbow&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CjfxdhjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x331zpeaspibuo9gw50u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CjfxdhjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x331zpeaspibuo9gw50u.png" alt="homepage_rainbow" width="880" height="561"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#demo-video"&gt;
  &lt;/a&gt;
  Demo video
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://kapwi.ng/c/VdweXzAmR-"&gt;video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PS: Project is built and hosted with MongoDB ecosystem and ❤️&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Are micro frontends still a thing?</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 12 Jan 2022 15:14:28 +0000</pubDate>
      <link>https://dev.to/ben/are-micro-frontends-still-a-thing-3jbm</link>
      <guid>https://dev.to/ben/are-micro-frontends-still-a-thing-3jbm</guid>
      <description>&lt;p&gt;This idea was all the rage for a while: The idea is no longer trending like it once was, but is that because it has settled in as a common pattern or has the idea faded?&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ruppysuppy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oA7zxE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--E69pqyft--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/530414/941751d8-06b8-41bd-9de9-6ea056b7199f.png" alt="ruppysuppy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ruppysuppy/micro-frontends-the-next-gen-way-to-build-web-apps-16da" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Micro-Frontends: The Next Gen Way to build Web Apps&lt;/h2&gt;
      &lt;h3&gt;Tapajyoti Bose ・ Oct 24 '21 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webpack&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#microfrontend&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>discuss</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>An Introduction to Tech Debt (And Why It Can Change Your Career)</title>
      <author>Michael Mangialardi</author>
      <pubDate>Wed, 12 Jan 2022 14:57:26 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/an-introduction-to-tech-debt-and-why-it-can-change-your-career-381m</link>
      <guid>https://dev.to/michaelmangial1/an-introduction-to-tech-debt-and-why-it-can-change-your-career-381m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h2&gt;

&lt;p&gt;Recently, I have found much success with a simple planning system.&lt;/p&gt;

&lt;p&gt;Every season, I jot down a list of goals.&lt;/p&gt;

&lt;p&gt;Every week, I jot down a list of things I want to get done that help me accomplish everyday tasks and work towards my seasonal goals.&lt;/p&gt;

&lt;p&gt;Every day, I prioritize from items from the weekly list.&lt;/p&gt;

&lt;p&gt;Additionally, I have a &lt;em&gt;someday&lt;/em&gt; list. A list of projects and goals that I would like to do at some undetermined time in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--522NXxkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0pbhg9wgyrcnnsapo55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--522NXxkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0pbhg9wgyrcnnsapo55.png" alt="introduction to tech debt" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In software development, &lt;em&gt;tech debt&lt;/em&gt; is basically the "someday" list of your codebase.&lt;/p&gt;

&lt;p&gt;It is a collection of things that would be ideal to get done but are not prioritized.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-log-it"&gt;
  &lt;/a&gt;
  Why log it?
&lt;/h2&gt;

&lt;p&gt;Ok, so that's tech debt in a gist, but why should developers bother with tracking it?&lt;/p&gt;

&lt;p&gt;Good question.&lt;/p&gt;

&lt;p&gt;There are several reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you don't track it, you have to rely solely upon your memory. At some point or another, our memories will fail us.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It helps communicate that ideal work is worth doing, even if we're ok with not doing it right this second.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It provides assurance that if you can't do the ideal things now that you can still be able to do them later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It helps to generate a longterm vision and goal of a codebase.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-log-it"&gt;
  &lt;/a&gt;
  How do I log it?
&lt;/h2&gt;

&lt;p&gt;Whatever works. I tend to create a wiki page in the GitHub repository of the codebase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-i-log-exactly"&gt;
  &lt;/a&gt;
  What do I log exactly?
&lt;/h2&gt;

&lt;p&gt;Again, tech debt is anything that you'd like to do someday.&lt;/p&gt;

&lt;p&gt;Frequently, this includes upgrading dependencies, implementing new design patterns, refactoring a decent portion of the code, automating manual tasks, adopting new technologies, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Upgrade to Tailwind v3&lt;/li&gt;
&lt;li&gt;Upgrade to Next v12&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/michaelmangial1/wrapping-react-springs-usespring-hook-a-use-case-for-wrapping-external-libraries-18lp"&gt;Create React spring animation hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/michaelmangial1/wrapping-react-querys-usequery-a-use-case-for-wrapping-external-libraries-34ed"&gt;Wrap React Query's &lt;code&gt;useQuery&lt;/code&gt; hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Move shared, generic components into the design system&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/michaelmangial1/towards-perfecting-code-organization-m8e"&gt;Adopt a New Way of Organizing the Codebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/michaelmangial1/help-i-need-to-organize-my-global-state-in-my-react-application-14lk"&gt;Reorganize the global state&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...etc...&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-know-whether-something-is-a-someday-ideal-or-a-present-requirement"&gt;
  &lt;/a&gt;
  How do I know whether something is a "someday" ideal or a present requirement?
&lt;/h2&gt;

&lt;p&gt;This is the million dollar question. There is no right answer.&lt;/p&gt;

&lt;p&gt;I cannot provide a detailed blueprint, but I can provide a couple guiding principles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If the thought of doing it "someday" is stressful, it likely should be done in the present.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do you have time to do it? If not, then you either need to negotiate for time or accept the less-than-ideal situation.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-get-it-prioritizeddone"&gt;
  &lt;/a&gt;
  How do I get it prioritized/done?
&lt;/h2&gt;

&lt;p&gt;For some, the concept of a "someday" list doesn't sound all that assuring. There can be memories of previous "someday" items that never seen the light of day.&lt;/p&gt;

&lt;p&gt;I get that.&lt;/p&gt;

&lt;p&gt;While thinking of tech debt as a "someday" list is the easiest way to describe it, perhaps it is more appropriate to think of it as a kanban board of "stretch goals."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wOxS_d2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2aadpbs5affgo9bz2ni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wOxS_d2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2aadpbs5affgo9bz2ni.png" alt="introduction to tech debt" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"Stretch goals" are things that you prioritize to get done but don't have to get done for you to sleep at night.&lt;/p&gt;

&lt;p&gt;Generally, I have found that the best time to prioritize tech debt is around the lifecycle of projects.&lt;/p&gt;

&lt;p&gt;Tech debt should be treated as stretch goals added to the main requirements of a project.&lt;/p&gt;

&lt;p&gt;If you are a developer on a product team, then you usually have a cadence of 1) planning for a project, 2) starting a project, and 3) wrapping up a project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K8rPGPop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcgusaxq6nqxudv4xuel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K8rPGPop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcgusaxq6nqxudv4xuel.png" alt="introduction to tech debt" width="800" height="533"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As you plan a project, you can prioritize a few interesting tech debt items to be completed thorough the project (although treating them as stretch goals).&lt;/p&gt;

&lt;p&gt;Although it's best to treat them as stretch goals, I would recommend padding your estimates for a project with them in mind.&lt;/p&gt;

&lt;p&gt;They are not stretch goals because they shouldn't be accounted for in estimate. Rather, they are stretch goals because they can be the first things scope needs to be cut in an unexpected event.&lt;/p&gt;

&lt;p&gt;In addition to prioritizing tech debt items in the project planning phase, I have also found that a good time to do them is as soon as a project wraps up.&lt;/p&gt;

&lt;p&gt;Usually, the end of a project is a slower time where a launched project is being monitored and the next project is getting finalized for planning.&lt;/p&gt;

&lt;p&gt;During this slower time, take full advantage to complete tech debt items.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-tips"&gt;
  &lt;/a&gt;
  Final Tips
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-it-is-nice-when-a-team-has-a-formal-expectationprocess-for-completing-tech-debt-items-around-projects-but-take-initiative-even-if-such-a-formal-process-does-not-exist-with-time-you-may-be-able-to-advocate-for-things-to-be-formalized"&gt;
  &lt;/a&gt;
  1. It is nice when a team has a formal expectation/process for completing tech debt items around projects, but take initiative even if such a formal process does not exist. With time, you may be able to advocate for things to be formalized.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#2-tackle-tech-debt-items-in-separate-pull-requests-that-way-reviewers-can-treat-it-separately-from-the-musthave-project-pull-requests"&gt;
  &lt;/a&gt;
  2. Tackle tech debt items in separate pull requests. That way, reviewers can treat it separately from the must-have project pull requests.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#3-keep-track-of-completed-tech-debt-items"&gt;
  &lt;/a&gt;
  3. Keep track of completed tech debt items.
&lt;/h3&gt;

&lt;p&gt;Like with a todo list, I like to see the work that I've accomplished. And, tracking every task that is done can bring a rewarding sense of accomplishment, or it can be an indicator that work needs to be delegated.&lt;/p&gt;

&lt;p&gt;Completed tech debt items are also great things to include in your yearly reviews, resumes, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-take-pride-in-your-craft"&gt;
  &lt;/a&gt;
  4. Take pride in your craft.
&lt;/h3&gt;

&lt;p&gt;Coding is a craft. Tech debt is a way of improving your craft.&lt;/p&gt;

&lt;p&gt;Even though managers may not see (nor ask) about the technical details of your craft, focusing on your craft by making the code ideal will help you stay motivated and relevant for future career opportunities.&lt;/p&gt;

&lt;p&gt;But don't get me wrong, people don't need to know the technical details to see the value of someone who is taking their craft seriously and improving a team because of it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-find-ways-to-share-your-tech-debt-work-with-peers"&gt;
  &lt;/a&gt;
  5. Find ways to share your tech debt work with peers.
&lt;/h3&gt;

&lt;p&gt;I'm a big fan of &lt;a href="https://www.michaelmang.dev/blog/the-developers-content-model"&gt;The Developer's Content Model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a word, you take the things you are working on and present them to others in unique ways.&lt;/p&gt;

&lt;p&gt;You can present your work to a global audience by tweeting things you learned, sharing gists, recording videos, and/or writing blog posts on the work you've done.&lt;/p&gt;

&lt;p&gt;When you see people of a global audience take interest in your learnings, it can be very rewarding.&lt;/p&gt;

&lt;p&gt;Moreover, it helps you build a portfolio. Even for your current role, you can take tweets and blog posts and repurpose them as documentation for your team.&lt;/p&gt;

&lt;p&gt;You can also present your work to a broader audience within your company.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iIqlyWLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kddta4v467jdecemfpcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iIqlyWLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kddta4v467jdecemfpcf.png" alt="introduction to tech debt" width="880" height="587"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;A good way to do this is by either doing a tech talk (gather a group of engineers and present your learnings in a 15-30 minute slide deck presentation) and/or by doing a &lt;a href="https://www.michaelmang.dev/blog/code-show-and-tell"&gt;show-and-tell&lt;/a&gt; (gather a group of engineers and have everyone take up to 5-10 minutes to highlight something you learned recently).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you can see that tech debt is much more than tracking "we really should have done this but we couldn't so maybe we'll get to it but probably not" type of items.&lt;/p&gt;

&lt;p&gt;Tech debt is a powerful way to improve a codebase, develop your craft, and gain influence and respect among peers.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Beyond a JPEG: NFT as a Primary Key</title>
      <author>Austin Vance</author>
      <pubDate>Wed, 12 Jan 2022 14:17:10 +0000</pubDate>
      <link>https://dev.to/focusedlabs/beyond-a-jpeg-nft-as-a-primary-key-1nfo</link>
      <guid>https://dev.to/focusedlabs/beyond-a-jpeg-nft-as-a-primary-key-1nfo</guid>
      <description>&lt;p&gt;These days, we most often see NFTs used to record the ownership information of &lt;a href="https://www.bloomberg.com/news/articles/2021-03-11/beeple-everydays-nft-sells-at-art-auction-for-60-million-paid-in-ether"&gt;artwork&lt;/a&gt;. There are the pie-in-the-sky folks who think NFTs will become a new standard for ownership for everything from &lt;a href="https://www.forbes.com/sites/nataliakarayaneva/2021/11/24/real-estate-nfts-how-it-began/?sh=1f3f8d033b12"&gt;houses&lt;/a&gt;, to &lt;a href="https://cointelegraph.com/news/rapper-nas-to-let-fans-own-part-of-his-music-through-nfts"&gt;music&lt;/a&gt;, to &lt;a href="https://www.bbc.com/news/technology-59568929"&gt;in-game items&lt;/a&gt; - only time will tell.&lt;/p&gt;

&lt;p&gt;NFTs are powerful, but they ​get a bad rap. I don't have strong opinions about the disruptive nature of NFTs or how they affect art, games, or anything else. I do see that the "&lt;em&gt;Non-Fungible&lt;/em&gt;" attribute of an NFT has some remarkable properties that allow smart contract developers to store state in a permissionless manner and enable that state to be transferred or sold.&lt;br&gt;
​&lt;br&gt;
Ok, I admit that's rather abstract and confusing. Since this is a dev blog, let's build an app that uses an NFT contract and holds information specific to a user.&lt;/p&gt;

&lt;p&gt;Before we dive in, this is not revolutionary. Several projects already do this. The &lt;a href="https://mai.finance"&gt;QiDAO&lt;/a&gt; uses &lt;a href="https://docs.mai.finance/functions/smart-contract-functions"&gt;NFTs to manage loan ownership&lt;/a&gt; and &lt;a href="https://uniswap.org/blog/uniswap-v3"&gt;Uniswap V3&lt;/a&gt; uses NFTs to manage a Liquidity Position. Before the release of V3, Uniswap recorded Liquidity by issuing the liquidity provider an LP Token. These tokens are an &lt;a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-20/"&gt;ERC-20&lt;/a&gt; token, and ERC-20's are fungible. Fungibility means that one token is the same as another. Think if someone hands you a 1€ note. That note is the same as the other 1€'s in your wallet. The ERC-20's are 100% transferable, farmable, and sellable, but they cannot store any secondary information about a Liquidity Position.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NFTs allow for encapsulation and transfer and sale of metadata in a permissionless manner&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Uniswap V3 enables the addition of metadata to a liquidity position. Instead of issuing an ERC-20 token to represent a liquidity position, they issue an &lt;a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-721/"&gt;ERC-721 (NFT)&lt;/a&gt;. With that ERC-721, Uniswap can now add unique features (like impermanent loss protection) to each liquidity position.&lt;/p&gt;

&lt;p&gt;How cool is that! But how does it work? Let's build it.&lt;/p&gt;



&lt;p&gt;Without giving too much background, at Focused Labs, we offer a blog bounty and a bonus for blogging streaks. The more frequently the company blogs, the larger the blog bounty becomes.&lt;/p&gt;

&lt;p&gt;I want to move this bounty from a spreadsheet to the blockchain and use an NFT to identify wallets contributing a blog to the streak.&lt;/p&gt;

&lt;p&gt;We will need an ERC-721 contract. Let's use &lt;a href="https://openzeppelin.com/"&gt;OpenZeppelin&lt;/a&gt; to enforce the correct interface for our NFT.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="c1"&gt;// contracts/FocusedBlogPost.sol
// SPDX-License-Identifier: MIT
&lt;/span&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/ERC721.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/utils/Counters.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;FocusedBlogPost&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Counters&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;const&lt;/span&gt; 
    &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;ERC721&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"FocusedBlogPost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"FCSD"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;publishBlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt;
        &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;newItemId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;_mint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newItemId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;newItemId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whenever we call &lt;code&gt;publishBlog()&lt;/code&gt; with an address, we will mint and transfer an NFT to the blogger.&lt;/p&gt;

&lt;p&gt;A new blog must be published every two weeks to earn a streak. Each week at least one new blog post goes out our streak counter increases. This streak counter is a multiple on our Blog Bounty! Now let’s set up our contract to add logic around a streak.&lt;/p&gt;

&lt;p&gt;Let's start by tracking when new posts are published.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;FocusedBlogPost&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...
&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;BlogPost&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;postUri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;publishedAt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;originalAuthor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// ...
&lt;/span&gt;
    &lt;span class="c1"&gt;// two weeks in seconds
&lt;/span&gt;    &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="k"&gt;constant&lt;/span&gt; &lt;span class="n"&gt;twoWeeks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// map of NFT ids to Blog Posts
&lt;/span&gt;    &lt;span class="k"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;publishBlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;postUri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt;
    &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...
&lt;/span&gt;        &lt;span class="n"&gt;_mint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newPostId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;newPostId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="n"&gt;postUri&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;postUri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;publishedAt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;originalAuthor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blogger&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="c1"&gt;// ...
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now every time a new blog post is published, we not only create an NFT for the post, but we record when it was published and keep track of the original author.&lt;/p&gt;

&lt;p&gt;We still don't track a streak, though, so let's add a new method to our token contract.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;FocusedBlogPost&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721Enumerable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;SafeMath&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// ...
&lt;/span&gt;
     &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getCurrentStreak&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;streak&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;streak&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;BlogPost&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;currentBlog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tokenByIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
            &lt;span class="n"&gt;BlogPost&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;previousBlog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tokenByIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentBlog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publishedAt&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;previousBlog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publishedAt&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;twoWeeks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;streak&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;streak&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use OpenZeppelin's &lt;code&gt;ERC721Enumerable&lt;/code&gt;; this gives us a few new methods to loop through each NFT we have minted. Then we can check the timestamp of each &lt;code&gt;BlogPosts.publishedAt&lt;/code&gt;. Pretty easy, right?!&lt;/p&gt;

&lt;p&gt;In a future part of this series, we will continue to add features to the NFT, allowing for payouts to streak contributors and adding validations like only increasing a streak if the author isn't in the current streak.&lt;/p&gt;




&lt;p&gt;Although this example is a bit contrived, honestly, why would someone want to transfer their streak? I think the practical applications are straightforward.&lt;/p&gt;

&lt;p&gt;The NFT can act as a unique identifier, recording metadata about an event or individual actions. A dApp can then use that NFT to make decisions like providing access to a "secret" website or paying a dividend for contributing a blogpost.&lt;/p&gt;

&lt;p&gt;Source code is available on &lt;a href="https://github.com/focused-labs/NFTs-for-more-than-just-JPEGs"&gt;GitHub&lt;/a&gt; where there is a complete example with passing tests.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>blockchain</category>
      <category>programming</category>
      <category>testing</category>
    </item>
    <item>
      <title>Multi-arch docker images the easy way, with Github Actions</title>
      <author>Pablo Romeo</author>
      <pubDate>Wed, 12 Jan 2022 13:56:35 +0000</pubDate>
      <link>https://dev.to/cloudx/multi-arch-docker-images-the-easy-way-with-github-actions-4k54</link>
      <guid>https://dev.to/cloudx/multi-arch-docker-images-the-easy-way-with-github-actions-4k54</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDvp46Mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pabloromeo/posts/main/posts/assets/docker-multi-arch-images-small.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDvp46Mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pabloromeo/posts/main/posts/assets/docker-multi-arch-images-small.png" alt="multi-arch docker image example" width="846" height="256"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may have come across Docker images like the one above ☝️. In this example, you can see that the &lt;code&gt;latest&lt;/code&gt; tag supports two different architectures. Meaning there are two different images for the same tag, and docker will pull the appropriate one depending on the target architecture. But...how are they built?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-old-way"&gt;
  &lt;/a&gt;
  The old way
&lt;/h2&gt;

&lt;p&gt;Back in the day, the only option was to manually built each separate image using the &lt;code&gt;ARCH&lt;/code&gt; build-arg, push it, and then use the &lt;code&gt;docker manifest&lt;/code&gt; command to group the images together under the same manifest. &lt;br&gt;
This manual process is described in depth in &lt;a href="https://www.docker.com/blog/multi-arch-build-and-images-the-simple-way/"&gt;this post by the Docker team&lt;/a&gt;. But now there's even an easier way.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#buildx-to-the-rescue"&gt;
  &lt;/a&gt;
  Buildx to the rescue
&lt;/h2&gt;

&lt;p&gt;Thankfully &lt;a href="https://docs.docker.com/buildx/working-with-buildx/"&gt;Buildx&lt;/a&gt; automates this process and simplifies it quite a bit. A single command can do all that for you.&lt;br&gt;
But who wants to be building images locally anyway? 😁&lt;br&gt;
Plus, automating it with Github Actions is a great excuse to also implement a proper tagging and versioning strategy as well as exploring multiple Container Registries.&lt;br&gt;
Let's get to it! 💪&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#github-actions-build"&gt;
  &lt;/a&gt;
  Github Actions build
&lt;/h2&gt;

&lt;p&gt;The overall process is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Checkout the code&lt;/li&gt;
&lt;li&gt;Setup &lt;a href="https://www.qemu.org/"&gt;QEMU&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Setup Buildx&lt;/li&gt;
&lt;li&gt;Log into the target container registry&lt;/li&gt;
&lt;li&gt;Docker Metadata tag voodoo magic &lt;em&gt;(optional)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Build and push&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's assume we have a Github repo with a &lt;code&gt;main&lt;/code&gt; and a &lt;code&gt;dev&lt;/code&gt; branch, PRs, as well as &lt;a href="https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository"&gt;versioned releases&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We'll have a github actions YAML similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;

&lt;span class="c1"&gt;# Controls when the workflow will run&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;workflow_dispatch&lt;/span&gt;
  &lt;span class="s"&gt;push&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;main'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dev'&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;v*.*.*'&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;main'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dev'&lt;/span&gt;

&lt;span class="c1"&gt;# permissions are needed if pushing to ghcr.io&lt;/span&gt;
&lt;span class="na"&gt;permissions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="na"&gt;packages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;write&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#steps-12-and-3"&gt;
  &lt;/a&gt;
  Steps 1,2 and 3
&lt;/h3&gt;

&lt;p&gt;These are quite straightforward:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="c1"&gt;# Get the repository's code&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="c1"&gt;# https://github.com/docker/setup-qemu-action&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up QEMU&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/setup-qemu-action@v1&lt;/span&gt;
      &lt;span class="c1"&gt;# https://github.com/docker/setup-buildx-action&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up Docker Buildx&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildx&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/setup-buildx-action@v1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h3&gt;

&lt;p&gt;For Github's Container Registry you can use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to GHCR&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github.event_name != 'pull_request'&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/login-action@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;registry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ghcr.io&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.repository_owner }}&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for Dockerhub:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to Docker Hub&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github.event_name != 'pull_request'&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/login-action@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DOCKERHUB_USERNAME }}&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DOCKERHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;a href="https://docs.docker.com/docker-hub/access-tokens/"&gt;dockerhub access token&lt;/a&gt; and set the corresponding &lt;a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets"&gt;github secrets&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5
&lt;/h3&gt;

&lt;p&gt;We could skip this step and just use the &lt;code&gt;latest&lt;/code&gt; docker tag, but in real world scenarios you'll likely want a more elaborate image tagging strategy. Such as sha, branch, &lt;a href="https://semver.org/"&gt;Semantic Versioning&lt;/a&gt;, etc. &lt;/p&gt;

&lt;p&gt;So we'll use the extremely useful &lt;code&gt;docker/metadata-action@v3&lt;/code&gt; for preparing those tags for us.&lt;br&gt;
Check out &lt;a href="https://github.com/docker/metadata-action"&gt;https://github.com/docker/metadata-action&lt;/a&gt; for more example tagging strategies. The documentation is great!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Docker meta&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;meta_id&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# you'll use this in the next step&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/metadata-action@v3&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;# list of Docker images to use as base name for tags&lt;/span&gt;
          &lt;span class="na"&gt;images&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;&amp;lt;specify the image name&amp;gt;&lt;/span&gt;
          &lt;span class="c1"&gt;# Docker tags based on the following events/attributes&lt;/span&gt;
          &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;type=schedule&lt;/span&gt;
            &lt;span class="s"&gt;type=ref,event=branch&lt;/span&gt;
            &lt;span class="s"&gt;type=ref,event=pr&lt;/span&gt;
            &lt;span class="s"&gt;type=semver,pattern={{version}}&lt;/span&gt;
            &lt;span class="s"&gt;type=semver,pattern={{major}}.{{minor}}&lt;/span&gt;
            &lt;span class="s"&gt;type=semver,pattern={{major}}&lt;/span&gt;
            &lt;span class="s"&gt;type=sha&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;This prepares image tags for branch, PR, major, major.minor, version, and sha, which you should adapt according to your own release process.&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;meta_id&lt;/code&gt; with something more appropriate. It will be used in the next step.&lt;/li&gt;
&lt;li&gt;Specify the image name under the &lt;code&gt;images:&lt;/code&gt; section. For ex: &lt;code&gt;ghcr.io/pabloromeo/foo&lt;/code&gt; for GHCR or &lt;code&gt;pabloromeo/foo&lt;/code&gt; for dockerhub.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-6"&gt;
  &lt;/a&gt;
  Step 6
&lt;/h3&gt;

&lt;p&gt;And the final step is to actually build for each target platform and push to the registry.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and push&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/build-push-action@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
          &lt;span class="na"&gt;platforms&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;linux/amd64,linux/arm/v7&lt;/span&gt;
          &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.event_name != 'pull_request' }}&lt;/span&gt;
          &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.&amp;lt;meta_id&amp;gt;.outputs.tags }}&lt;/span&gt;
          &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.&amp;lt;meta_id&amp;gt;.outputs.labels }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The target architecture platforms to build, using &lt;code&gt;platforms:&lt;/code&gt; (in this example AMD64 and ARMv7)&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;&amp;lt;meta_id&amp;gt;&lt;/code&gt; with the proper id used previously. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-comments"&gt;
  &lt;/a&gt;
  Final comments
&lt;/h2&gt;

&lt;p&gt;This turned out to be a lengthy post, but the actual build definition is quite simple when put together, and you'll not only  get multi-arch docker images, but nice semver versioning and tagging as well. 😄&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59eGKjhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pabloromeo/posts/main/posts/assets/docker-multi-arch-semver-tags.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59eGKjhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pabloromeo/posts/main/posts/assets/docker-multi-arch-semver-tags.png" alt="Multi-arch images with SemVer" width="880" height="695"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To see full working examples of this we can take a look at the builds of two pet projects of mine: &lt;a href="https://github.com/pabloromeo/docker-dogecoin"&gt;Docker-Dogecoin&lt;/a&gt; and &lt;a href="https://github.com/pabloromeo/clusterplex"&gt;ClusterPlex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://github.com/pabloromeo/docker-dogecoin/blob/master/Dockerfile"&gt;Docker-Dogecoin's Dockerfile&lt;/a&gt; there's an example of how to write conditional logic as part of the docker build process depending on the target architecture to install different binaries for each.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://github.com/pabloromeo/clusterplex/blob/master/.github/workflows/main.yml"&gt;Clusterplex's build&lt;/a&gt; it actually pushes to BOTH ghcr.io and Dockerhub simultaneously, as well as updating Dockerhub's Description page to the content of the README.md in the repo.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>github</category>
      <category>githubactions</category>
      <category>cicd</category>
    </item>
    <item>
      <title>Detect crashes in your Kubernetes cluster using kwatch and Slack</title>
      <author>Andrew Ashraf Sabry </author>
      <pubDate>Wed, 12 Jan 2022 13:54:45 +0000</pubDate>
      <link>https://dev.to/andrew44ashraf/detect-crashes-in-your-kubernetes-cluster-using-kwatch-and-slack-487d</link>
      <guid>https://dev.to/andrew44ashraf/detect-crashes-in-your-kubernetes-cluster-using-kwatch-and-slack-487d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-kwatch"&gt;
  &lt;/a&gt;
  What is &lt;a href="https://kwatch.dev/"&gt;kwatch&lt;/a&gt;?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/abahmed/kwatch"&gt;kwatch&lt;/a&gt; is an open-source project that started late in 2021.&lt;br&gt;
It aims to help you monitor all changes in your Kubernetes(K8s) cluster,&lt;br&gt;
detect crashes in your running apps, and publish notifications to your favorite channels (Slack, Discord, etc.) in real-time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this tutorial, I will help you setup and deploy kwatch on your Kubernetes cluster.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Plus, integrate with Slack to get notified on a channel when there is a crash in your apps.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configure-kwatch-with-slack"&gt;
  &lt;/a&gt;
  Configure kwatch with Slack
&lt;/h2&gt;

&lt;p&gt;First of all, we need to get the webhook URL of the channel you want the notification to be received on it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you know how to generate the webhook URL you can escape this part and go to the configuration section.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: create a new slack channel (if you don't have one already)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nQ2nV642--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r77dfouinwbsx867a14h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nQ2nV642--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r77dfouinwbsx867a14h.png" alt="new Slack channel" width="700" height="238"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Go to &lt;a href="https://api.slack.com/apps"&gt;https://api.slack.com/apps&lt;/a&gt; and create an app from scratch and connect it with your workplace&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9kqxRUft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stck5fyrvz0eqosb8ijf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9kqxRUft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stck5fyrvz0eqosb8ijf.png" alt="creating a new Slack app" width="700" height="271"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Create an incoming webhook and activate it&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HUTUAqp9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7vmkvvezfpv1ygz8d9b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUTUAqp9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7vmkvvezfpv1ygz8d9b.png" alt="adding a webhook" width="700" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Connect it to you channel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b1ILNwCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugz7twf44qv69i3jjiqy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b1ILNwCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugz7twf44qv69i3jjiqy.png" alt="connecting your webhook to your channel" width="700" height="542"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally we have the webhook URL for the channel!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Get Configuration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get the configuration template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl  &lt;span class="nt"&gt;-L&lt;/span&gt; https://raw.githubusercontent.com/abahmed/kwatch/v0.3.0/deploy/config.yaml &lt;span class="nt"&gt;-o&lt;/span&gt; config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 6: Edit config.yaml with the corresponding configs&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Namespace&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kwatch&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kwatch&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kwatch&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;config.yaml&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;alert:&lt;/span&gt;
      &lt;span class="s"&gt;slack:&lt;/span&gt;
        &lt;span class="s"&gt;webhook: WEBHOOK_URL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 7: Apply Configuration&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy-kwatch"&gt;
  &lt;/a&gt;
  Deploy kwatch
&lt;/h2&gt;

&lt;p&gt;Deploy &lt;a href="https://kwatch.dev/"&gt;kwatch&lt;/a&gt; on your cluster with one command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/abahmed/kwatch/v0.3.0/deploy/deploy.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After deploying you will get notified on the channel that kwatch has started successfully. Now, &lt;a href="https://kwatch.dev/"&gt;kwatch&lt;/a&gt; is monitoring your apps!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--knMBDnt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4eqrerz081cd2su68an.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--knMBDnt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4eqrerz081cd2su68an.png" alt="kwatch just started" width="700" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is an example of kwatch messages when a crash is detected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZpGlBNDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79d0j8jd6j4kwcfzo0dh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZpGlBNDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79d0j8jd6j4kwcfzo0dh.png" alt="kwatch detected a crash" width="700" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can find more documentation about kwatch &lt;a href="https://kwatch.dev/docs"&gt;Here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you like kwatch, give it a star on &lt;a href="https://github.com/abahmed/kwatch"&gt;GitHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We are happy to hear feedback from you and if you have any request, or suggestion don't hesitate to ping us on our channels (&lt;a href="https://discord.gg/kzJszdKmJ7"&gt;Discord&lt;/a&gt;, &lt;a href="https://github.com/abahmed/kwatch"&gt;GitHub&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>monitoring</category>
      <category>devops</category>
      <category>docker</category>
    </item>
    <item>
      <title>How to Create BMI Calculator using Javascript</title>
      <author>Shantanu Jana</author>
      <pubDate>Wed, 12 Jan 2022 13:51:16 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/how-to-create-bmi-calculator-using-javascript-3l07</link>
      <guid>https://dev.to/shantanu_jana/how-to-create-bmi-calculator-using-javascript-3l07</guid>
      <description>&lt;p&gt;If you want to make BMI calculator using JavaScript then this tutorial will help you. Here I have shared a tutorial of a &lt;a href="https://www.foolishdeveloper.com/2021/10/bmi-calculator-using-javascript.html"&gt;BMI calculator using JavaScript&lt;/a&gt;. BMI (Body Mass Index) is used to calculate the amount of mass in our body.&lt;/p&gt;

&lt;p&gt;First I created a simple box on the webpage. In this box I have created all the information like heading, display and input slider.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.foolishdeveloper.com/2021/10/bmi-calculator-using-javascript.html"&gt;&lt;strong&gt;Watch its live demo&lt;/strong&gt;&lt;/a&gt; to learn how it works. I first created a heading using the h1 tag and designed it with CSS. Then he made a display in which all the information can be seen. In this display you can see the BMI and its status. In other words, the amount of BMI is more or less it will be shown through a text.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bmi-calculator-using-javascript"&gt;
  &lt;/a&gt;
  BMI Calculator using Javascript
&lt;/h2&gt;

&lt;p&gt;Then I created two range sliders using the input function of HTML. The first slider to input weight and the second input slider to input your height. Weight will be input in kg and height will be input in cm. &lt;/p&gt;

&lt;p&gt;By inputting these two information, your BMI can be seen in the automatic display. I used HTML CSS and JavaScript to build it. Designed &lt;a href=""&gt;Simple BMI Calculator with HTML and CSS&lt;/a&gt; and implemented by JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-make-a-box-and-add-a-heading"&gt;
  &lt;/a&gt;
  1. Make a box and add a heading
&lt;/h3&gt;

&lt;p&gt;First the basic structure of this BMI calculator was created. For this we have taken the help of HTML and CSS below. First I made a box and added a heading in it. HTML's h1 tag is used to create headings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;BMI Calculator&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have designed the webpage with the help of CSS below. Here the background color of the webpage is blue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#046db9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now who made the box. Box &lt;code&gt;width: 400px&lt;/code&gt; and height depends on the amount of content. I used white as the background color and box-shadow to make the box more attractive.&lt;/p&gt;

&lt;p&gt;Then the headings are designed. The background of the heading has been used in Garo blue and the text color has been used in white. &lt;code&gt;Font-size: 23px&lt;/code&gt; has been used for &lt;code&gt;text-align: center&lt;/code&gt; to keep the text in the middle and to increase the size.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#024b94&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;23px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T1XGSz71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEiXULq1qTcvmJAzonSV-cFGW3oNjkaAsEC-7-TqB7_7m6Ml3bePGny5Xad5YW3kr9zNPH05fhzm78risS8S6YcApaNgxRzLJU-mQLmntTnDIib_8qKj3Ldkja9kfVxmfFctTtBgTxcS-2fTPBbu8u6-4X-mU9RXwo7LSwfszeUjwR7vgd9YBt3Voh25lA%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T1XGSz71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEiXULq1qTcvmJAzonSV-cFGW3oNjkaAsEC-7-TqB7_7m6Ml3bePGny5Xad5YW3kr9zNPH05fhzm78risS8S6YcApaNgxRzLJU-mQLmntTnDIib_8qKj3Ldkja9kfVxmfFctTtBgTxcS-2fTPBbu8u6-4X-mU9RXwo7LSwfszeUjwR7vgd9YBt3Voh25lA%3Ds16000" alt="Make a box and add a heading" width="880" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-create-bmi-result-viewing-area"&gt;
  &lt;/a&gt;
  2. Create BMI result viewing area
&lt;/h3&gt;

&lt;p&gt;Now we have created a display that will show the result of the calculation and a text. There is no specific size of the display it will depend on the amount of content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"display"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"result"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;20.0&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"category"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Normal weight&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.display&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;139&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;253&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#result&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0be881&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#category&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ifsERasD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEiA6_cI9OvpQ5i72Bk4188avOjHJs3jcUZTOJVMTzVmUBN9aXd000zCZ4dNQcKrxxrCTDt2qPHKcs5646_jQkGj7kExkCDcuNPvJMzIJMtMj5XNwdWtRPVT7Lfq1MlcZT6uKZC7x71Qey2v0mo6vsne8nZx-dGd1bthpmFAw5bAefPfwrhDLGBDwojOsg%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ifsERasD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEiA6_cI9OvpQ5i72Bk4188avOjHJs3jcUZTOJVMTzVmUBN9aXd000zCZ4dNQcKrxxrCTDt2qPHKcs5646_jQkGj7kExkCDcuNPvJMzIJMtMj5XNwdWtRPVT7Lfq1MlcZT6uKZC7x71Qey2v0mo6vsne8nZx-dGd1bthpmFAw5bAefPfwrhDLGBDwojOsg%3Ds16000" alt="Create BMI result viewing area" width="880" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-create-range-slider-to-input-height-and-weight"&gt;
  &lt;/a&gt;
  3. Create range slider to input height and weight
&lt;/h3&gt;

&lt;p&gt;Now it's time to create a range slider. Who created the first range slider using the HTML and CSS code below. I used &lt;code&gt;type = "range"&lt;/code&gt; using HTML input to create slider. Here the minimum and maximum values ​​are determined. This range is for slider weight input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"range"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"20"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"20"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"weight"&lt;/span&gt; &lt;span class="na"&gt;oninput=&lt;/span&gt;&lt;span class="s"&gt;"calculate()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"weight-val"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;20 kg&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have designed some basics of slider with the help of CSS below. Here the slider is used &lt;code&gt;width: 70%&lt;/code&gt; and &lt;code&gt;height: 3.5px&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.row&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.row&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"range"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dcdcdc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have designed the thumbnail. Each range slider has a button that changes the value of the range. The following CSS code has been used to design this button. Border-radius is used to make this thumbnail &lt;code&gt;width: 15px&lt;/code&gt;, &lt;code&gt;height: 15px&lt;/code&gt; and round.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"range"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-slider-thumb&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1c1c1c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have made another slide to make a hairy anklet. It is made like this sea. Here minimum value 100 and maximum L250 are used. Flight No need to use any different code to design it because I have already added code to design here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"range"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"height"&lt;/span&gt; &lt;span class="na"&gt;oninput=&lt;/span&gt;&lt;span class="s"&gt;"calculate()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"height-val"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;100 cm&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b0C_H29---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEgXvK9pD1rXdBWoZmEk07bBK_4rB0ybX4ANdpylMUHNXAU-mA3d00WnPY8NcheaLMWAIGUEWKB0-ZOPRbPF1vzSL5A3HHq6N3H-hF2ZT-bMJZdRVbpNdCchFvzUB54yCo7JI-KnzGVaVydPlucpGf8LEffGODpSRyugPAFV2WtRLfSMF26VD09Ae_inyA%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b0C_H29---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEgXvK9pD1rXdBWoZmEk07bBK_4rB0ybX4ANdpylMUHNXAU-mA3d00WnPY8NcheaLMWAIGUEWKB0-ZOPRbPF1vzSL5A3HHq6N3H-hF2ZT-bMJZdRVbpNdCchFvzUB54yCo7JI-KnzGVaVydPlucpGf8LEffGODpSRyugPAFV2WtRLfSMF26VD09Ae_inyA%3Ds16000" alt="Create range slider to input height and weight" width="880" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-javascript-of-bmi-calculator"&gt;
  &lt;/a&gt;
  4. JavaScript of BMI Calculator
&lt;/h3&gt;

&lt;p&gt;Above we have designed this &lt;a href="https://www.foolishdeveloper.com/2021/10/bmi-calculator-using-javascript.html"&gt;JavaScript BMI Calculator&lt;/a&gt; complete with the help of HTML and CSS. However, it is not yet effective. You need JavaScript enabled to view it. &lt;/p&gt;

&lt;p&gt;Below I have given all the JavaScript together and given the necessary explanations. Hopefully the following explanation will help you understand these JavaScripts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="c1"&gt;//Need to determine the constant of some id functions.&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//The value of the height slider&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;height&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//The value of the weight slider&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;weight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//The value of height and width should be displayed in the webpage using "textContent".&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;weight-val&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; kg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;height-val&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; cm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//Now I have added the formula for calculating BMI in "bmi"&lt;/span&gt;
    &lt;span class="nx"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//With the help of "textContent" we have arranged to display in the result page of BMI&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


  &lt;span class="c1"&gt;//Now we have to make arrangements to show the text&lt;/span&gt;


  &lt;span class="c1"&gt;//When the BMI is less than 18.5, you can see the text below&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;18.5&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Underweight 😒&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffc44d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;//If BMI is &amp;gt;=18.5 and &amp;lt;=24.9&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mf"&gt;18.5&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mf"&gt;24.9&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Normal Weight 😍&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#0be881&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;//If BMI is &amp;gt;= 25 and &amp;lt;= 29.9 &lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mf"&gt;29.9&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Overweight 😮&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ff884d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;//If BMI is &amp;lt;= 30&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Obese 😱&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ff5e57&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;//All of the above text is stored in "category".&lt;/span&gt;

&lt;span class="c1"&gt;//Now you have to make arrangements to display the information in the webpage with the help of "textContent"&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;category&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0gLnQbHl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEg045ozdq4agA84VQACpObyoVHrVLdhZASMgLvT1Xw3JoV1LFcQPBO1jxmfGy20Qxetbg2yxhtK0ropCfXAYzZixCiK4Fqutn9TidF_Ok3MvXpgdhVcJXaviEZQW-Yp6E7-1zGyZdCa7O9ZMypRNnGMMZWdc3S-Jg8LzubkHlI41k_VxbgO3h0oCY5tgQ%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0gLnQbHl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEg045ozdq4agA84VQACpObyoVHrVLdhZASMgLvT1Xw3JoV1LFcQPBO1jxmfGy20Qxetbg2yxhtK0ropCfXAYzZixCiK4Fqutn9TidF_Ok3MvXpgdhVcJXaviEZQW-Yp6E7-1zGyZdCa7O9ZMypRNnGMMZWdc3S-Jg8LzubkHlI41k_VxbgO3h0oCY5tgQ%3Ds16000" alt="JavaScript of BMI Calculator" width="880" height="425"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Related Post:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.foolishdeveloper.com/2021/12/simple-weather-app-using-javascript.html"&gt;Simple Weather App using JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.foolishdeveloper.com/2021/11/todo-list-javascript.html"&gt;Make a Todo List using JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.foolishdeveloper.com/2021/10/simple-stopwatch-using-javascript.html"&gt;Simple Stopwatch using JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.foolishdeveloper.com/2021/09/skeleton-screen-loading-animation.html"&gt;Skeleton Screen Loading Animation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.foolishdeveloper.com/2021/07/javascript-age-calculator.html"&gt;Javascript Age Calculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.foolishdeveloper.com/2021/07/random-password-generator-javascript.html"&gt;Random Password Generator with JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.foolishdeveloper.com/2021/07/automatic-image-slider.html"&gt;Automatic Image Slider in Html, CSS&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.foolishdeveloper.com/2021/06/sidebar-menu-using-html-css-javascript.html"&gt;Sidebar Menu Using HTML CSS&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hopefully with the help of the above tutorial you have learned how I created this BMI calculator using HTML CSS and JavaScript. If there is any difficulty then you can let me know by commenting.&lt;/p&gt;

&lt;p&gt;You can use this link if you want to &lt;a href="https://www.foolishdeveloper.com/2021/10/bmi-calculator-using-javascript.html"&gt;download&lt;/a&gt; the required source code.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this. 😊&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I started to write on english, this is why</title>
      <author>Fernando Cutire 🔨</author>
      <pubDate>Wed, 12 Jan 2022 13:50:32 +0000</pubDate>
      <link>https://dev.to/fernandocutire/i-started-to-write-on-english-this-is-why-4kce</link>
      <guid>https://dev.to/fernandocutire/i-started-to-write-on-english-this-is-why-4kce</guid>
      <description>&lt;p&gt;When I thought about this topic, I said to myself “Writing in English is hard, because it’s not my native language”&lt;/p&gt;

&lt;p&gt;It’s hard but is also an opportunity. I needed to start practicing my English. And guess what was the way?&lt;/p&gt;

&lt;p&gt;I said, “Ok I will start to write in English because almost every content I consume online is in English and I have read and watched a lot”&lt;/p&gt;

&lt;p&gt;But of course writing is challenging.&lt;/p&gt;

&lt;p&gt;So in this article, I teach you what it’s working for me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-is-hard-thinking-in-a-different-language"&gt;
  &lt;/a&gt;
  Writing is hard: Thinking in a different language
&lt;/h2&gt;

&lt;p&gt;Of course, I could use the easy way who was to just use translate apps.&lt;/p&gt;

&lt;p&gt;But this was enough?&lt;/p&gt;

&lt;p&gt;I have been using google translate with my Spanish-based articles. And it worked weird.&lt;/p&gt;

&lt;p&gt;It doesn´t have that consistency or as I want to call “soul”.&lt;/p&gt;

&lt;p&gt;It seemed like just different words and doesn’t seem to be written by a human.&lt;/p&gt;

&lt;p&gt;So another thing that happens to me, was to begin writing in English. &lt;/p&gt;

&lt;p&gt;And maybe I will sound better, you can judge by yourself.&lt;/p&gt;

&lt;p&gt;Of course, my grammar is not the best, but anyways here I am. And I will continue to improve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-writing-equals-better-writing-why-consistency-over-time-matters"&gt;
  &lt;/a&gt;
  More writing equals better writing: Why consistency over time matters
&lt;/h2&gt;

&lt;p&gt;Just focusing on writing. It´s that simple?&lt;/p&gt;

&lt;p&gt;Maybe not, but some of the benefits I could say are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start thinking in English&lt;/li&gt;
&lt;li&gt;Start creating content (in English ofc)&lt;/li&gt;
&lt;li&gt;Having more articles makes you more confident. Like “I have written so many articles, I know I am good”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you see, there are many benefits and progress over time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-general-it%C2%B4s-cool-to-learn-a-new-language-in-this-way"&gt;
  &lt;/a&gt;
  In general, it´s cool to learn a new language in this way.
&lt;/h2&gt;

&lt;p&gt;Receiving and giving are both beautiful things to do.&lt;/p&gt;

&lt;p&gt;And consuming media in a different language makes it faster to learn it.&lt;/p&gt;

&lt;p&gt;Also, It seems that you are giving your knowledge, expertise and somehow improving the way for us.&lt;/p&gt;

&lt;p&gt;It´s that simple. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect
&lt;/h2&gt;

&lt;p&gt;Remember you can follow me on Twitter &lt;a href="https://twitter.com/fernandocutire"&gt;@fernandocutire&lt;/a&gt;, I am getting better at writing in English so we could talk there.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qyip4FVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5ym12tgb443cl6ztalq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qyip4FVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5ym12tgb443cl6ztalq.jpg" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Launching SigNoz Technical Writer Program 🧑‍💻🥳</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Wed, 12 Jan 2022 13:31:33 +0000</pubDate>
      <link>https://dev.to/signoz/launching-signoz-technical-writer-program-hmi</link>
      <guid>https://dev.to/signoz/launching-signoz-technical-writer-program-hmi</guid>
      <description>&lt;p&gt;Are you a developer who loves creating content and getting it across to a global audience? We'd love to have you contribute to our community writer program.&lt;/p&gt;

&lt;p&gt;We are an open-source application performance monitoring(APM) tool and we’re early into our journey(launched last year 🤓). We are building with our community, and now we want to create content with the community.&lt;/p&gt;

&lt;p&gt;We help developers like you to monitor applications and keep them in fine health. You can monitor application metrics like latency, requests per sec, error rates, etc with SigNoz. There are a bunch of other things that we are good at. But that’s a story for another time! You can though check out our GitHub repo in a jiffy 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SigNoz/signoz"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQqwNXoq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/common/signoz_github.webp" alt="SigNoz GitHub repo" width="708" height="162"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So why are we here? We are here to talk about our technical writer program, and we’re so excited to launch it! 🚀&lt;/p&gt;

&lt;p&gt;As an open-source project, we want to educate our community more about our project and about the concepts in our domain. And we need some helping hands 🙌&lt;/p&gt;

&lt;p&gt;Let us first see what topics we’re looking at to create content around.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topics-we-love"&gt;
  &lt;/a&gt;
  Topics we love
&lt;/h2&gt;

&lt;p&gt;We are looking for developers who can create content around these topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Using SigNoz&lt;/strong&gt; to monitor applications written in different languages and frameworks. For example, this &lt;a href="https://signoz.io/blog/opentelemetry-fastapi/"&gt;article&lt;/a&gt;. We want to make it easier for more devs to use SigNoz, so help us out! 🙏&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;OpenTelemetry&lt;/strong&gt;, for more info visit the &lt;a href="https://opentelemetry.io/"&gt;official website&lt;/a&gt;. It’s an open-source project under Cloud Native Computing Foundation, and there is a huge community behind it. As it’s an emerging technology, it is a very good topic to write about and educate fellow devs 🤗&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distributed tracing&lt;/strong&gt;. It’s a concept essential to monitor applications based on microservices applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Application performance monitoring&lt;/strong&gt;. It’s a broad topic and relates to everything you do to measure and monitor your application’s performance. Feel free to tell us what you know, and what you would want to share.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Observability&lt;/strong&gt;. The new buzz in the town, or quite old already? We will love to have both beginner and experienced perspectives on this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anything and everything that relates to monitoring applications or improving application performance. A few examples of articles can be&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/ivymobility-developers/understanding-high-availability-how-to-achieve-it-11a045584f29" rel="noopener noreferrer nofollow"&gt;Understanding High Availability &amp;amp; How to achieve it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-metrics-monitoring-and-alerting" rel="noopener noreferrer nofollow"&gt;Introduction to metrics, monitoring, and alerting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/skyshidigital/6-tricks-to-speed-up-and-improve-your-node-js-performance-fadc06d15cbe" rel="noopener noreferrer nofollow"&gt;Tips to improve your nodejs performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://expressjs.com/en/advanced/best-practice-performance.html" rel="noopener noreferrer nofollow"&gt;Performance Best Practices Using Express in Production&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://forms.gle/CXG3YUEaYXAjrmn6A"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--178Gy4mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/signoz_twp_apply_cta.png" width="880" height="118"&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you’re wondering why do this, then let us convince you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-write-technical-content-for-us"&gt;
  &lt;/a&gt;
  Why write technical content for us?
&lt;/h2&gt;

&lt;p&gt;This will ofcourse be a paid engagement. We will pay out &lt;strong&gt;$150 for every article&lt;/strong&gt; published. But that’s just one aspect. Writing technical content online has other benefits too:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-an-authoritative-online-presence"&gt;
  &lt;/a&gt;
  Build an authoritative online presence
&lt;/h3&gt;

&lt;p&gt;The topics that we deal with are either emerging technologies or concepts that need good technical understanding. Having published content around these topics will always act as a booster to your digital presence. We will have links to your social media handles, and short bio about you on your published articles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#distribution-of-your-content"&gt;
  &lt;/a&gt;
  Distribution of your content
&lt;/h3&gt;

&lt;p&gt;Our blog gets thousands of visitors per month. Ever written a piece of content only to find that no one read it. Well, we care and are actually incentivized to take your created content to as many people as possible. Apart from our blog, your content will be shared across all our social handles and our slack community.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improve-your-writing-skills"&gt;
  &lt;/a&gt;
  Improve your writing skills
&lt;/h3&gt;

&lt;p&gt;Writing is a critical skill as you grow in your career. And our team will help you write better with feedback and tips. Only practice can make you a better writer. And what better way to practice than to do it for a popular open-source project(pardon the bragging 😝)&lt;/p&gt;

&lt;p&gt;So are you convinced? Even if you’re not, let’s give it a shot and see what happens. How does all of this work? Let’s read about the process a bit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-the-process-work"&gt;
  &lt;/a&gt;
  How does the process work?
&lt;/h2&gt;

&lt;p&gt;You just need to reach out to us with an interesting idea and a short proposal.&lt;/p&gt;

&lt;p&gt;If you have an interesting idea for a blog post, you can apply &lt;a href="https://forms.gle/CXG3YUEaYXAjrmn6A"&gt;here&lt;/a&gt;. Here’s a brief detail of how the process works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Apply with a proposal &lt;a href="https://forms.gle/CXG3YUEaYXAjrmn6A"&gt;here&lt;/a&gt;. The proposal consists of the title and brief outline of the article. You can also reachout at: &lt;a href="mailto:ankit.anand@signoz.io"&gt;ankit.anand@signoz.io&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once your proposal is accepted, we will get in touch with you and give you access to a Notion page where you can write your article.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once you finish your first draft, our team will share feedback with comments on the page itself within 2-3 business days.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the draft is finalized, we will publish it on our blog. We will pay you $150 for each article published. Yes, you can publish multiple articles.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have any questions about the program, join our slack community and ping us in the &lt;strong&gt;#write-for-signoz&lt;/strong&gt; channel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/signoz-slack"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RBlK1BgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/common/join_slack_cta.png" alt="SigNoz Slack community" width="880" height="118"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#who-can-apply"&gt;
  &lt;/a&gt;
  Who can apply?
&lt;/h3&gt;

&lt;p&gt;Everyone. Yes, even if it’s your first attempt at writing an article. The only prerequisite is that you should have a clear understanding of the topic that you have chosen. So what are you waiting for? We’re waiting to hear from you 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://forms.gle/CXG3YUEaYXAjrmn6A"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--178Gy4mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/signoz_twp_apply_cta.png" width="880" height="118"&gt; &lt;/a&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>technical</category>
      <category>programming</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Surviving 2021 as an Entrepreneur</title>
      <author>Mikhail Karan</author>
      <pubDate>Wed, 12 Jan 2022 13:28:36 +0000</pubDate>
      <link>https://dev.to/mikhailkaran/surviving-2021-as-an-entrepreneur-2lel</link>
      <guid>https://dev.to/mikhailkaran/surviving-2021-as-an-entrepreneur-2lel</guid>
      <description>&lt;p&gt;&lt;iframe src="https://open.spotify.com/embed/episode/7q2mjH27NVo0q8V0NJWJsn" width="100%" height="232px"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-html-all-the-things"&gt;
  &lt;/a&gt;
  What is HTML All The Things
&lt;/h2&gt;

&lt;p&gt;HTML All The Things is a &lt;a href="https://podcast.htmlallthethings.com/"&gt;web development podcast&lt;/a&gt; and &lt;a href="https://discord.com/invite/jweMCx9"&gt;discord community&lt;/a&gt; which was started by Matt and Mike, developers based in Ontario, Canada. &lt;/p&gt;

&lt;p&gt;The podcast speaks to web development topics as well as running a small business, self-employment and time management. You can join them for both their successes and their struggles as they try to manage expanding their Web Development business without stretching themselves too thin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#announcements"&gt;
  &lt;/a&gt;
  Announcements
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Svelte for Beginners&lt;/strong&gt; Udemy course is now live! Mike took his experience in teaching and learning Svelte and created a course. &lt;/p&gt;

&lt;p&gt;This course will teach you the fundamentals of JavaScript frameworks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get it now on Udemy!&lt;/strong&gt; 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/svelte-for-beginners/?couponCode=HATTSALE"&gt;Svelte For Beginners&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-this-one-about"&gt;
  &lt;/a&gt;
  What's This One About?
&lt;/h2&gt;

&lt;p&gt;Doing business during the pandemic has been great for some, horrible for others, and just plain weird for most everyone else. With Web3 technologies being shoved in everyone's faces, to lockdowns every few months for some parts of the world - the market has changed drastically for everyone in it. In this episode, Matt and Mike discuss how they made it through 2021, and plan on making the most out of 2022. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-notes"&gt;
  &lt;/a&gt;
  Show Notes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#a-look-back"&gt;
  &lt;/a&gt;
  A Look Back
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Rough times losing a large steady contract&lt;/li&gt;
&lt;li&gt;Imposter syndrome sets in&lt;/li&gt;
&lt;li&gt;Pandemic blues&lt;/li&gt;
&lt;li&gt;Pivot to audience building and podcast&lt;/li&gt;
&lt;li&gt;Twitter explosion&lt;/li&gt;
&lt;li&gt;Web3&lt;/li&gt;
&lt;li&gt;Opportunities start coming&lt;/li&gt;
&lt;li&gt;Podcast milestones&lt;/li&gt;
&lt;li&gt;Svelte for Beginners course creation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#a-look-forward"&gt;
  &lt;/a&gt;
  A Look Forward
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mike's Goals&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Focus/time management&lt;/li&gt;
&lt;li&gt;Mind (Read and retain information from books)&lt;/li&gt;
&lt;li&gt;Body (Find the right exersise and nutrition plan for me)&lt;/li&gt;
&lt;li&gt;Code (Rust and GoLang)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Matt's Goals&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Passive income&lt;/li&gt;
&lt;li&gt;What streamers use website&lt;/li&gt;
&lt;li&gt;Focused sprints (6-8 weeks on one project)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h2&gt;

&lt;p&gt;If you're enjoying the podcast consider giving us a review on &lt;a href="https://podcasts.apple.com/us/podcast/html-all-things-web-development-web-design-small-business/id1412209136"&gt;Apple Podcasts&lt;/a&gt; or checking out our Patreon to get a shoutout on the podcast. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.patreon.com/htmlallthethings"&gt;Support us on Patreon&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can find us on all the podcast platforms out there as well as&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/htmlallthethings/"&gt;Instagram (@htmlallthethings)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/htmleverything"&gt;Twitter (@htmleverything)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.tiktok.com/@htmlallthethings"&gt;TikTok (Html All The Things)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Working with an Amazon SES account</title>
      <author>Vishal</author>
      <pubDate>Wed, 12 Jan 2022 13:27:22 +0000</pubDate>
      <link>https://dev.to/ghantala/working-with-an-amazon-ses-account-5d71</link>
      <guid>https://dev.to/ghantala/working-with-an-amazon-ses-account-5d71</guid>
      <description>&lt;p&gt;Why would you need an email service though? Well, with many hosting providers, sending a lot of emails (perhaps you have a great deal of customers using your web shop) can be an issue as hosts tend to have limitations. The standard alternative is to use Gmail to send emails, however, that has limitations as well. This is where SES comes in as it is designed for this exact purpose. SES makes sending emails more reliable, and, using a touch of magic, it also helps your emails avoid SPAM folders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h2&gt;

&lt;p&gt;When you sign up to Amazon, you can use their free tier. The free tier will give you access to all of the Amazon services, but with fair limitations. For example, SES is limited to 2,000 messages per day if you opt for their EC2 hosting.&lt;/p&gt;

&lt;p&gt;Otherwise the cost is $0.10 per thousand messages. They consider a single message as one message to a single recipient. So if you send one email to 1000 email addresses it would cost you 10 dollar cents.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#two-options-for-using-ses"&gt;
  &lt;/a&gt;
  Two options for Using SES
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Simple Mail Transfer Protocol (commonly known as SMTP)&lt;/li&gt;
&lt;li&gt;The SDK API &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both the options work differently, The SMTP allows you to link directly into the email server, whereas the API method allows you to send emails through the AWS SES Service. In this post we'll cover use of the SMTP server only, the second method is new to me so I am working on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-creating-an-amazon-ses-account"&gt;
  &lt;/a&gt;
  Step 1 : Creating an Amazon SES account
&lt;/h2&gt;

&lt;p&gt;To start using Amazon SES, the first thing you need to do is to create an account.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From your browser, head to &lt;a href="https://aws.amazon.com/ses"&gt;https://aws.amazon.com/ses&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Next, click the orange Get started with Amazon Simple Email Service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Complete the 5 step signup process. You will need to enter your email address, choose a password, decide on your AWS account name, select your region, address, and more. Additionally, you will have to answer questions like "How do you plan to use AWS?" (Business/personal).&lt;/p&gt;

&lt;p&gt;Once you’ve created your account, you can log into the Management Console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-create-smtp-credentials"&gt;
  &lt;/a&gt;
  Step 2: Create SMTP Credentials
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Click the “SES Email Sending Service” option.&lt;/li&gt;
&lt;li&gt;In the left navigation bar, click the “SMTP Settings” option.&lt;/li&gt;
&lt;li&gt;Click the “Create My SMTP Credentials” button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eil7fc6V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vsyjgl4qxh0u7l6pvnb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eil7fc6V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vsyjgl4qxh0u7l6pvnb.png" alt="Image description" width="880" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy your credentials or click the “Download Credentials” button as the password will not be shown again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-verify-an-email-address"&gt;
  &lt;/a&gt;
  Step 3: Verify An Email Address
&lt;/h2&gt;

&lt;p&gt;Add and verify your email address following these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Log into the Amazon SES Console.&lt;/li&gt;
&lt;li&gt;Click the “Verify a New Email Address” link.&lt;/li&gt;
&lt;li&gt;In the “Verify a New Email Address” dialog, enter the email address you wish to send messages from and click the “Verify This Email Address” button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i4WSXtQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfnlnsv5rmtcp0ig9tmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i4WSXtQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfnlnsv5rmtcp0ig9tmb.png" alt="Image description" width="595" height="234"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You should now receive a verification message from Amazon SES asking you to confirm that you are the owner of the email address. Click the verification link in the message.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check the status of the email address in the Amazon SES Console. The status of the email address should change from pending verification to verified.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can now use Amazon SES to send email messages from this address. To send a test email, check the box next to the verified email address, and then click the &lt;strong&gt;Send a Test Email&lt;/strong&gt;. Refer to the Amazon SES documentation for more information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-request-removal-of-amazon-ses-restrictions"&gt;
  &lt;/a&gt;
  Step 4: Request Removal Of Amazon SES Restrictions
&lt;/h2&gt;

&lt;p&gt;To protect customers from fraud and abuse, Amazon SES does not immediately grant unlimited Amazon SES usage to new users. A number of restrictions are initially in effect, such as only being able to send email to and from verified email addresses and being limited to a maximum of 200 messages in every 24-hour period.&lt;/p&gt;

&lt;p&gt;To remove these restriction on recipient addresses and increase the sending limits, request a higher level of access in the Amazon Support Center.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-configure-your-application-to-use-amazon-ses"&gt;
  &lt;/a&gt;
  Step 5: Configure Your Application To Use Amazon SES
&lt;/h2&gt;

&lt;p&gt;The final step is to configure your Bitnami application to use Amazon SES. The procedure to do this varies from application to application but typically, you will need to configure the application with the correct SMTP server information and credentials. This may be done either by directly editing application configuration files or by entering the required information using the application user interface.&lt;/p&gt;

&lt;p&gt;Here's an example of configuring email settings for Amazon SES. The USERNAME and PASSWORD placeholders should be replaced with the correct values from the credentials created in Step 1, while the EMAIL_ADDRESS placeholder should be replaced with any SES-verified email address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SMTP hosts = email-smtp.us-east-1.amazonaws.com
SMTP port = 465
SMTP security = SSL
SMTP username: USERNAME
SMTP password: PASSWORD
From address: EMAIL_ADDRESS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>aws</category>
      <category>ses</category>
      <category>smtp</category>
    </item>
    <item>
      <title>How they made controls at Github? Popup</title>
      <author>Kiran Mantha</author>
      <pubDate>Wed, 12 Jan 2022 13:13:43 +0000</pubDate>
      <link>https://dev.to/kiranmantha/how-they-made-controls-at-github-popup-2omi</link>
      <guid>https://dev.to/kiranmantha/how-they-made-controls-at-github-popup-2omi</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Episode1: &lt;a href="https://dev.to/kiranmantha/how-they-made-controls-at-github-1h18"&gt;Dropdown&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Episode2: &lt;a href="https://dev.to/kiranmantha/how-they-made-controls-at-github-modal-dialog-2pgi"&gt;Modal dialog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Episode3: &lt;a href="https://dev.to/kiranmantha/how-they-made-controls-at-github-hamburger-menu-20k"&gt;Hamburger menu&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Episode4: &lt;strong&gt;Popup&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;In last episode we gone through creation of hamburger menu with details and summary tags.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now"&gt;
  &lt;/a&gt;
  Now
&lt;/h2&gt;

&lt;p&gt;This is the last episode of this series which walks through creation of popups using these wonderful tags.&lt;/p&gt;

&lt;p&gt;Asusual let's start with same boring repeatitive html&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;details&lt;/span&gt; &lt;span class="na"&gt;aria-haspopup=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        I'm a popcorn
    &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;You are awesome!!&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/details&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ahhhh popcornnn it's movie time...😃 wait that's a stupid accordion...😬&lt;/p&gt;

&lt;p&gt;ok ok i saw your frustation.. take a drink&lt;/p&gt;

&lt;p&gt;you know what, we don't have to start from scratch for this. Popup is same as that of dropdown which we designed in &lt;a href="https://dev.to/kiranmantha/how-they-made-controls-at-github-1h18"&gt;1st episode&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The difference is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Popup can contain any type of content whereas a dropdown contain a list of options.&lt;/li&gt;
&lt;li&gt;It is an in-line element unlike dropdown which is a block element.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;so we can reuse dropdown styles(&lt;em&gt;well we don't need most of them&lt;/em&gt;) which looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;aria-haspopup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;summary&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;open&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;summary&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There it is. The basic structure is done. Click anywhere on the page, the accordion will close. Now lets add simple styles to container &lt;code&gt;div&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;summary&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome!! right?? click on &lt;code&gt;summary&lt;/code&gt; tag, it will open a small popup saying &lt;strong&gt;&lt;em&gt;You are awesome&lt;/em&gt;&lt;/strong&gt; yes i mean it. you really are!!&lt;/p&gt;

&lt;p&gt;By applying &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; or &lt;code&gt;bottom&lt;/code&gt; css to &lt;code&gt;div&lt;/code&gt; tag, you can position the popup in any direction.&lt;/p&gt;

&lt;p&gt;And that's it. There's your Popcorn.. ohh i mean Popup 😄&lt;/p&gt;

&lt;p&gt;Thanks for your time and &lt;a href="https://stackblitz.com/edit/details-summary-tag-based-controls?file=index.html"&gt;here&lt;/a&gt; is the working example.&lt;/p&gt;

&lt;p&gt;See you again ✌️,&lt;br&gt;
Kiran 👋&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>github</category>
    </item>
  </channel>
</rss>
