<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Auto-populate your Github readme with data fetched from a remote notion database.</title>
      <author>Safwan Shaheer</author>
      <pubDate>Tue, 04 May 2021 16:44:16 +0000</pubDate>
      <link>https://dev.to/devorein/auto-populate-your-github-readme-with-data-fetched-from-a-remote-notion-database-2ca9</link>
      <guid>https://dev.to/devorein/auto-populate-your-github-readme-with-data-fetched-from-a-remote-notion-database-2ca9</guid>
      <description>&lt;p&gt;Hello everyone. This article will share how I managed to auto-populate a Github readme learned section using data fetched from a remote notion database using a GitHub action that I created using Typescript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Devorein/github-readme-learn-section-notion"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#in-repository-file"&gt;
  &lt;/a&gt;
  In Repository File
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-add-the-following-content-to-your-raw-readmemd-endraw-"&gt;
  &lt;/a&gt;
  1. Add the following content to your &lt;code&gt;README.md&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;## What I have learned so far&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!--START_SECTION:learn--&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--END_SECTION:learn--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-configure-the-workflow"&gt;
  &lt;/a&gt;
  2. Configure the workflow
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Github&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Readme&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Updater'&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt; &lt;span class="c1"&gt;# Runs Every Day&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;update_learn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;learn&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;section'&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Fetching&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Repository&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Contents'&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@main&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Learn&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Section&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Updater'&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;devorein/github-readme-learn-section-notion@master'&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;database_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;6626c1ebc5a44db78e3f2fe285171ab7'&lt;/span&gt;
          &lt;span class="na"&gt;token_v2&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.NOTION_TOKEN_V2 }}&lt;/span&gt; &lt;span class="c1"&gt;# Required only if your database is private&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: You can test out using &lt;a href="https://www.notion.so/devorein/6c46c1ebc5a44db78e3f5fe285071ab6?v=0bc36e7c59e54f34b0838956e35b4490"&gt;this template&lt;/a&gt; that I've created just for this purpose.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-your-notion-account"&gt;
  &lt;/a&gt;
  In your notion account
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-create-a-fullpage-database"&gt;
  &lt;/a&gt;
  1. Create a full-page database
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNLDRajp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620140790011/ZSlkgNHas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNLDRajp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620140790011/ZSlkgNHas.png" alt="Notion Full Page Database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Your database must maintain the following structure/schema&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u9N9Y5cT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620141419086/HQVjtExaB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u9N9Y5cT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620141419086/HQVjtExaB.png" alt="Notion Table Schema Options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-get-the-id-of-the-database"&gt;
  &lt;/a&gt;
  2. Get the id of the database
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d0F-RR3_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620140795651/PhdNBZEQH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d0F-RR3_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620140795651/PhdNBZEQH.png" alt="Notion Full Page Database Id"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-add-it-in-the-workflow-file"&gt;
  &lt;/a&gt;
  3. Add it in the workflow file
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;database_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;6626c1ebc5a44db78e3f2fe285171ab7'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Follow the rest of the steps only if your database is not public, if its public you don't need to set the token_v2&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#to-make-your-database-public"&gt;
  &lt;/a&gt;
  To make your database public
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to the database in your notion account&lt;/li&gt;
&lt;li&gt;Click on Share at the top right corner&lt;/li&gt;
&lt;li&gt;Click on the Share to Web button.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#1-get-your-notion-raw-tokenv2-endraw-"&gt;
  &lt;/a&gt;
  1. Get your notion &lt;code&gt;token_v2&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: By no means should you share or expose your notion &lt;code&gt;token_v2&lt;/code&gt;. If you feel like you've done so accidentally, immediately log out from that account in all of your devices.&lt;/p&gt;

&lt;p&gt;Follow the steps below to obtain your &lt;code&gt;token_v2&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open up the dev tools of your preferred browser.&lt;/li&gt;
&lt;li&gt;Go to the Application &amp;gt; Cookies section.&lt;/li&gt;
&lt;li&gt;There you'll find a &lt;code&gt;token_v2&lt;/code&gt; cookie.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Its highly recommended to store your &lt;code&gt;token_v2&lt;/code&gt; as a github secret rather than pasting it in your workflow file.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-create-a-github-secret-to-store-raw-tokenv2-endraw-"&gt;
  &lt;/a&gt;
  2. Create a github secret to store &lt;code&gt;token_v2&lt;/code&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;navigate to the url &lt;code&gt;https://github.com/&amp;lt;USERNAME&amp;gt;/&amp;lt;REPO-NAME&amp;gt;/settings/secrets/actions&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;New repository secret&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You can name your secret as anything you want&lt;/li&gt;
&lt;li&gt;Paste the &lt;code&gt;token_v2&lt;/code&gt; value in the &lt;code&gt;Value&lt;/code&gt; textarea&lt;/li&gt;
&lt;li&gt;Use the secret in your workflow file
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;token_v2&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.NOTION_TOKEN_V2 }}&lt;/span&gt; &lt;span class="c1"&gt;# The secret was named NOTION_TOKEN_V2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#outcome"&gt;
  &lt;/a&gt;
  Outcome
&lt;/h3&gt;

&lt;p&gt;If you follow all the steps properly your readme should look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b1MbTebp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620140780727/qz4TAzMgV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b1MbTebp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620140780727/qz4TAzMgV.png" alt="Github Readme Learn Section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this was helpful to you. That's all from me for now.&lt;/p&gt;

&lt;p&gt;The code for the Github action is &lt;a href="https://github.com/Devorein/github-readme-learn-section-notion"&gt;here&lt;/a&gt;. Feel free to submit a pull request or open a new issue, contributions are highly appreciated and more than welcome. Thank you for reading.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>notion</category>
      <category>actions</category>
      <category>automation</category>
    </item>
    <item>
      <title>Join Us For the First DEV Community Bug Smash!</title>
      <author>Christina Gorton</author>
      <pubDate>Tue, 04 May 2021 16:38:56 +0000</pubDate>
      <link>https://dev.to/devteam/join-us-for-the-first-dev-community-bug-smash-3plm</link>
      <guid>https://dev.to/devteam/join-us-for-the-first-dev-community-bug-smash-3plm</guid>
      <description>&lt;h3&gt;
  &lt;a href="#team-forem-is-excited-to-share-the-news-of-our-first-community-bug-smash"&gt;
  &lt;/a&gt;
  Team Forem is excited to share the news of our first community Bug Smash!
&lt;/h3&gt;

&lt;p&gt;Join us for this DEV-wide collaboration that’s all about improving the Forem repository, encouraging more contributions from the community, and having fun in the process. 🐛&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#details"&gt;
  &lt;/a&gt;
  Details
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h4&gt;

&lt;p&gt;The DEV Community Bug Smash challenges members of our community to resolve one (or several!) of our predetermined bugs in the Forem codebase &lt;a href="https://github.com/forem/forem/labels/Bug%20Smash"&gt;here&lt;/a&gt; in exchange for open source community involvement, a limited-edition profile badge for eligible contributions, and a sticker pack!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#when-is-bug-smash"&gt;
  &lt;/a&gt;
  When is Bug Smash?
&lt;/h4&gt;

&lt;p&gt;Our first Bug Smash will be running today, May 3 through May 28, 2021. We plan to assess the overall experience at the end of the month with the intention of doing this again in the future or possibly extending the event immediately.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#who-can-participate"&gt;
  &lt;/a&gt;
  Who can participate?
&lt;/h4&gt;

&lt;p&gt;Bug Smash is open to anyone in our community who would like to participate. We added the general &lt;code&gt;bug smash&lt;/code&gt; label to all eligible issues, however, &lt;strong&gt;we’ve broken a handful of them into two different categories below to help you select the bug that makes the most sense for your experience level.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#where-will-i-be-smashing-bugs"&gt;
  &lt;/a&gt;
  Where will I be smashing bugs?
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;In the Forem repository!&lt;/strong&gt; &lt;br&gt;
For Bug Smash, you’ll be tackling issues labeled with (you guessed it,) &lt;code&gt;bug smash&lt;/code&gt; in our repo (click &lt;a href="https://github.com/forem/forem/labels/Bug%20Smash"&gt;here&lt;/a&gt; to see the full list). We’ve captured a handful of these issues below under “Examples of Eligible Bugs”. Any issue not labeled with &lt;code&gt;bug smash&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; part of the DEV Community Bug Smash. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#why-should-i-participate"&gt;
  &lt;/a&gt;
  Why should I participate?
&lt;/h4&gt;

&lt;p&gt;So many reasons! The DEV Community Bug Smash is a great way for you to get more practice with tackling issues in GitHub if you’re a newer developer. If you have more experience, this initiative is a fantastic opportunity to help a community you know and love (DEV!) while lending a hand to the Forem engineering team on issues that they might not have the capacity to work on at the moment. &lt;/p&gt;

&lt;p&gt;The best part? We’ll be awarding limited-edition DEV profile badges and a sticker pack to anyone who submits a &lt;code&gt;bug smash&lt;/code&gt; PR that gets approved. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR: Greener GitHub contribution history, community camaraderie, and cool rewards&lt;/strong&gt; 😎&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#how-to-participate-stepbystep"&gt;
  &lt;/a&gt;
  How to Participate, Step-by-Step
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Please read our &lt;a href="https://docs.forem.com/contributing/forem/"&gt;Contributing to Forem&lt;/a&gt; guide for contribution guidelines, rules, and etiquette related to working in our codebase. Also, please revisit our &lt;a href="https://dev.to/code-of-conduct"&gt;code of conduct&lt;/a&gt; for overall expectations on how to treat one another.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Claim an &lt;a href="https://github.com/forem/forem/labels/Bug%20Smash"&gt;issue labeled &lt;code&gt;bug smash&lt;/code&gt;&lt;/a&gt;, based on your experience level by commenting on it.&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;You will be notified by our team with a confirmation if you’ve been assigned to that issue. If the issue is already taken, we reply with a suggestion of a different one for you to tackle&lt;/li&gt;
&lt;li&gt;Once you are assigned a bug, create a pull request (PR) (don’t forget to link to the original issue!)&lt;/li&gt;
&lt;li&gt;After you’ve submitted a pull request (PR) for your assigned bug, you’ll be notified by our team if it was approved. Once it’s approved (🎉) please use &lt;a href="//dev.to/new/devbugsmash"&gt;this template&lt;/a&gt; to write a reflection post about the bug you smashed, right here on DEV! &lt;/li&gt;
&lt;li&gt;Find another post on DEV labeled &lt;a href="//dev.to/t/devbugsmash"&gt;devbugsmash&lt;/a&gt; and leave a comment or a question! Keep it encouraging, kind, and collaborative.&lt;/li&gt;
&lt;li&gt;After you’ve completed steps 1-6, we’ll reach out with details on getting your sticker pack. We will also award badges at this time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note: We will only be awarding one badge and one sticker pack per participant, regardless of how many bugs you smash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thanks in advance for your patience following the publication of your Bug Smash post on DEV. The Forem engineering team is small but mighty and it will take focused time on their behalf to review Bug Smash PRs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples-of-eligible-bugs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples of Eligible Bugs&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Here is an incomplete preview of the bugs you can smash! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good-first-issue-bugs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Good first issue bugs&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Here are a few issues that are perfect for early-career developers and people learning to code.&lt;/em&gt; &lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/1228"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        HTML is stripped from runkit source
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#1228&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/joelnet"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--rRhcm5v0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/742630%3Fv%3D4" alt="joelnet avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/joelnet"&gt;joelnet&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/1228"&gt;&lt;time&gt;Nov 30, 2018&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;
HTML is incorrectly stripped from runkit code blocks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click &lt;code&gt;WRITE A POST&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Paste into body:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-text-html-basic js-code-highlight"&gt;
&lt;pre&gt;{% runkit %}
const { ValueViewerSymbol } = require("@runkit/value-viewer");

const myCustomObject = {
    [ValueViewerSymbol]: {
        title: "My First Viewer",
        HTML: "&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;marquee&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;🍔Hello, World!🍔&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;marquee&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;"
    }
};
{% endrunkit %} &lt;/pre&gt;

&lt;/div&gt;
&lt;ol start="3"&gt;
&lt;li&gt;Click &lt;code&gt;SAVE POST&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;See code in runkit (incorrectly) translated into:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-text-html-basic js-code-highlight"&gt;
&lt;pre&gt;const { ValueViewerSymbol } = require("@runkit/value-viewer");

const myCustomObject = {
    [ValueViewerSymbol]: {
        title: "My First Viewer",
        HTML: "🍔Hello, World!🍔"
    }
};&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;
Code was expected to keep &lt;code&gt;&amp;lt;marquee&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional Info&lt;/strong&gt;
I can trick the parser by encoding my HTML.&lt;/p&gt;
&lt;p&gt;This works:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic js-code-highlight"&gt;
&lt;pre&gt;{% runkit %}
const { ValueViewerSymbol } = require("@runkit/value-viewer");
const atob = require('atob-lite')

const myCustomObject = {
    [ValueViewerSymbol]: {
        title: "My First Viewer",
        HTML: atob('PG1hcnF1ZWU+SGVsbG8sIFdvcmxkITwvbWFycXVlZT4=')
    }
};
{% endrunkit %}&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Strangely enough, this does not work:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic js-code-highlight"&gt;
&lt;pre&gt;{% runkit %}
const { ValueViewerSymbol } = require("@runkit/value-viewer");

const myCustomObject = {
    [ValueViewerSymbol]: {
        title: "My First Viewer",
        HTML: ["&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;", "m", "a", "r", "q", "u", "e", "e", "&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;", "🍔", "H", "e", "l", "l", "o", ",", " ", "W", "o", "r", "l", "d", "!", "🍔", "&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;", "/", "m", "a", "r", "q", "u", "e", "e", "&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;"].join('')
    }
};
{% endrunkit %}&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;as it (incorrectly) results in this:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic js-code-highlight"&gt;
&lt;pre&gt;const { ValueViewerSymbol } = require("@runkit/value-viewer");

const myCustomObject = {
    [ValueViewerSymbol]: {
        title: "My First Viewer",
        HTML: ["", "🍔", "H", "e", "l", "l", "o", ",", " ", "W", "o", "r", "l", "d", "!", "🍔", ""].join('')
    }
};&lt;/pre&gt;

&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/1228"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/1446"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Code blocks get breaks added between each line
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#1446&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/abraham"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jnw-Jr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/3341%3Fv%3D4" alt="abraham avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/abraham"&gt;abraham&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/1446"&gt;&lt;time&gt;Jan 02, 2019&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;
Code blocks sometimes get breaks &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; added between each line. You can see it in the one codeblock on &lt;a href="https://dev.to/abraham/a-month-of-flutter-a-look-back-1j1a#annotatedregion" rel="nofollow"&gt;A month of Flutter: a look back&lt;/a&gt;. It appears to be related to having headers following the code blocks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to &lt;a href="https://dev.to/new" rel="nofollow"&gt;create a new post&lt;/a&gt; enter the following markdown and hit "preview".&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~~~
function hello() {
  console.log('hello');
}
~~~

~~~
function goodbye() {
  console.log('goodbye');
}
~~~

# header
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The code blocks should not have any blank lines between each line of code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Correct display when &lt;code&gt;# header&lt;/code&gt; is not included:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/3341/50610638-50ce6700-0e99-11e9-9fc1-6fe4c6d80770.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iApRP2ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/3341/50610638-50ce6700-0e99-11e9-9fc1-6fe4c6d80770.png" alt="screenshot from 2019-01-02 14-17-11"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Incorrect display when &lt;code&gt;# header&lt;/code&gt; is included:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/3341/50610645-562bb180-0e99-11e9-8a51-54eecd27f333.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zwjmimM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/3341/50610645-562bb180-0e99-11e9-8a51-54eecd27f333.png" alt="screenshot from 2019-01-02 14-17-00"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS: Ubuntu 18.10&lt;/li&gt;
&lt;li&gt;Browsers:
&lt;ul&gt;
&lt;li&gt;Chrome 72.0.3626.28&lt;/li&gt;
&lt;li&gt;Firefox 64.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The broken display only appears to happen when a header follows the code blocks. If I move it between or before the code blocks the breaks don't happen. I'm using v2 of the editor and have not tested with v1.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/1446"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13195"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Modal appears under the navbar
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13195&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/aurelieverrot"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBy2XoLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/50857179%3Fv%3D4" alt="aurelieverrot avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/aurelieverrot"&gt;aurelieverrot&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13195"&gt;&lt;time&gt;Mar 30, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The modal triggered by the three dots on the left of an article appears stuck under the navbar of the website, it is not readable entirely.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After submitting an article but before publishing.
Click on the three dots on the top left of the article.
The modal will show up but a part of it is hidden behind the navbar&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The modal should appear entirely to see all the links.  It can appear under the navbar, or on top of it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/50857179/113064409-c6eed080-916b-11eb-80a0-9425a733ac65.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eIWvzyaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50857179/113064409-c6eed080-916b-11eb-80a0-9425a733ac65.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS, version: MacOS Catalina 10.15.7&lt;/li&gt;
&lt;li&gt;Browser, version: Chrome Version 88.0.4324.192 (Official Build) (x86_64)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;
button id="article-show-more-button"&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13195"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#general-bugs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;General bugs&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;If you have more experience with software development and working in GitHub, here are a few issues you might want to take a look at&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/6586"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Tag "taggings_count" are not always updated correctly
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#6586&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/rhymes"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--b29X-Z_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/146201%3Fv%3D4" alt="rhymes avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/rhymes"&gt;rhymes&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/6586"&gt;&lt;time&gt;Mar 11, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      

&lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each tag has an associated &lt;code&gt;taggings_count&lt;/code&gt; which contains the number of items they are associated with (in our case either articles or listings).&lt;/p&gt;
&lt;p&gt;The problem lies in the fact that some of these counts are incorrect in the DB.&lt;/p&gt;
&lt;p&gt;I found this out by playing with the Tags API which returns tags sorted by &lt;code&gt;taggings_count&lt;/code&gt; in descending order&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;archlinux&lt;/code&gt; according to the API - &lt;a href="https://dev.to/api/tags" rel="nofollow"&gt;https://dev.to/api/tags&lt;/a&gt; - is the third most used tag but it's very unlikely that is true. Its tag page - &lt;a href="https://dev.to/t/archlinux" rel="nofollow"&gt;https://dev.to/t/archlinux&lt;/a&gt; - lists 50 articles and even taking into account all listings it might have been used in, it doesn't add up&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/api/tags?per_page=15" rel="nofollow"&gt;https://dev.to/api/tags?per_page=15&lt;/a&gt; shows that &lt;code&gt;devops&lt;/code&gt; is more popular than &lt;code&gt;showdev&lt;/code&gt; but &lt;a href="https://dev.to/t/devops" rel="nofollow"&gt;devops page&lt;/a&gt; contains 2917 articles, &lt;a href="https://dev.to/t/showdev" rel="nofollow"&gt;showdev page&lt;/a&gt; contains 3110. Again, I don't think there are enough listings tagged with &lt;code&gt;devops&lt;/code&gt; to account for the difference&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus, the bug.&lt;/p&gt;
&lt;p&gt;This counter is managed by automatically by the &lt;a href="https://github.com/mbleigh/acts-as-taggable-on"&gt;acts-as-taggable-on&lt;/a&gt; gem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'd expect the counter to reflect the correct number of items that have been tagged with it.&lt;/p&gt;
&lt;p&gt;I see two possible explanations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;there's an error in our setup, in respect to the &lt;a href="https://github.com/mbleigh/acts-as-taggable-on#usage"&gt;usage guide&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;it has something to do with tag aliasing (?)&lt;/li&gt;
&lt;li&gt;there's a bug in the gem itself. I found a few issue tickets that might point us in this direction:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mbleigh/acts-as-taggable-on/issues/929"&gt;https://github.com/mbleigh/acts-as-taggable-on/issues/929&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mbleigh/acts-as-taggable-on/issues/947"&gt;https://github.com/mbleigh/acts-as-taggable-on/issues/947&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/6586"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/7561"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Error in date display on comment
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#7561&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/corentinbettiol"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--PAV8Qzjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/45763865%3Fv%3D4" alt="corentinbettiol avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/corentinbettiol"&gt;corentinbettiol&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/7561"&gt;&lt;time&gt;Apr 28, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Date tag on a comment is "Apr 27", but on hover the text is "Tuesday, 28 April 2020, 00:01:19".&lt;/p&gt;
&lt;p&gt;In HTML, datetime content is &lt;code&gt;2020-04-27T22:01:19Z&lt;/code&gt; 🤔&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hover date of &lt;a href="https://dev.to/lofiandcode/comment/o8k9" rel="nofollow"&gt;this&lt;/a&gt; comment.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Date on tag &amp;amp; on hover should be the same.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/45763865/80465932-1dd89e00-893c-11ea-9eea-dce56e2cf40f.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Nv2XxcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/45763865/80465932-1dd89e00-893c-11ea-9eea-dce56e2cf40f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/45763865/80466054-46f92e80-893c-11ea-9bc0-5020c6f01f91.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BLc9s47a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/45763865/80466054-46f92e80-893c-11ea-9bc0-5020c6f01f91.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS: Xubuntu&lt;/li&gt;
&lt;li&gt;Browser: Firefox&lt;/li&gt;
&lt;li&gt;Version: 75.0&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/7561"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/6377"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        "Follow back" button has no text in notification at times
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#6377&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/sivaraam"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJXCdCng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/12448084%3Fv%3D4" alt="sivaraam avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/sivaraam"&gt;sivaraam&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/6377"&gt;&lt;time&gt;Feb 29, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;
When someone follows me, I get a notification with a "Follow back" button in it. But in some cases, the button has no text in it. As a consequence, it's not clear what the button does.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to 'Notifications'&lt;/li&gt;
&lt;li&gt;Find a "$USER followed you" notification&lt;/li&gt;
&lt;li&gt;If the "FOLLOW BACK" text in the button in visible, refresh and check.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: I realise these aren't ideal steps to reproduce the issue but unfortunately that's all I have. I'm not sure about the exact cases for which the text is visible and for which the text is not. But I'll be glad to provide information, if needed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;
The "FOLLOW BACK" text should always be visible in the button. For me, it's visible only at random times. The probability of the button having no text is higher.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;
&lt;a href="https://user-images.githubusercontent.com/12448084/75611812-d607e700-5b43-11ea-9ca9-f1f9c2140186.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vLALIhHB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12448084/75611812-d607e700-5b43-11ea-9ca9-f1f9c2140186.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS: Windows&lt;/li&gt;
&lt;li&gt;Browser: Firefox/Chrome&lt;/li&gt;
&lt;li&gt;Version: 73.0.1/80.0.3987&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/6377"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/6417"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Incomplete surrogate-key cache invalidation logic
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#6417&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/benhalpern"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Btd6rDfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/3102842%3Fv%3D4" alt="benhalpern avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/benhalpern"&gt;benhalpern&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/6417"&gt;&lt;time&gt;Mar 02, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;Currently we user surrogate keys to determine when certain endpoints should have their caches cleared, such as an article API endpoint like this...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set_surrogate_key_header Article.table_key, @articles.map(&amp;amp;:record_key)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And then we call &lt;code&gt;article.purge&lt;/code&gt; which magically makes any endpoint with that article's &lt;code&gt;record_key&lt;/code&gt; have its edge cache expire.&lt;/p&gt;
&lt;p&gt;More on surrogate keys...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.fastly.com/en/guides/getting-started-with-surrogate-keys" rel="nofollow"&gt;https://docs.fastly.com/en/guides/getting-started-with-surrogate-keys&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The issue with the above logic is that a &lt;em&gt;new&lt;/em&gt; article which should become part of that endpoint will not flush its cache if created. So it will not show up on that endpoint until another article which fits within the above &lt;code&gt;@articles&lt;/code&gt; is purged. This makes it kind of random to find out when it will be included.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;article.purge&lt;/code&gt; is a magic method to create a purge ping which uses the appropriate surrogate header.&lt;/p&gt;
&lt;p&gt;A solution for this could be a surrogate key like this...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set_surrogate_key_header Article.table_key, "tag-index-endpoint-#{tag}", @articles.map(&amp;amp;:record_key)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and then we make a specific purge call when a new article should purge it like &lt;code&gt;purge("tag-index-endpoint-#{tag}"&lt;/code&gt; when an article is created.&lt;/p&gt;
&lt;p&gt;Our current situation isn't causing any radically wrong behavior and the "random" purging is working okay but we should look into this as we go about bigger changes here.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/6417"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/6610"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Error when submitting a comment on a recently deleted post
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#6610&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/adamkdean"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--05LaqpUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/1639527%3Fv%3D4" alt="adamkdean avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/adamkdean"&gt;adamkdean&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/6610"&gt;&lt;time&gt;Mar 12, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Followed a link from an email, attempted to respond to a comment, received error &lt;code&gt;There was an error in your markdown: undefined method &lt;/code&gt;id' for nil:NilClass`, comment not posted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Follow link from an email, attempt to respond to a comment.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Comment is posted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/1639527/76545609-0162ce00-6482-11ea-9232-a7c318c642e0.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_E94JyZ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1639527/76545609-0162ce00-6482-11ea-9232-a7c318c642e0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS: MacOS 10.15.3&lt;/li&gt;
&lt;li&gt;Browser: Chrome  80.0.3987.87&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/6610"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/4948"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Runkit - indentation in the first line of a block
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#4948&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/iksemot"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jI-RReuz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/218702%3Fv%3D4" alt="iksemot avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/iksemot"&gt;iksemot&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/4948"&gt;&lt;time&gt;Nov 26, 2019&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      

&lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First line in the block of text cannot be indented.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new post&lt;/li&gt;
&lt;li&gt;Add following content, make sure all lines are indented.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;{% runkit %}
    console.log('BAD CODE')
    console.log('OK CODE')

    // BAD COMMENT
    // OK COMMENT
{% endrunkit %}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="3"&gt;
&lt;li&gt;Save the post&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All lines in RunKit embed should be indented.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/218702/69672956-7eb42f80-1099-11ea-8eb7-e045501791a3.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2_07bios--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/218702/69672956-7eb42f80-1099-11ea-8eb7-e045501791a3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS: Windows 10 Pro&lt;/li&gt;
&lt;li&gt;Browser: Opera&lt;/li&gt;
&lt;li&gt;Version: 65&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dev.to/tomaszrydzewski/runkit-indentation-2n9c-temp-slug-526549?preview=b14fe31c6205719176ea1eb56003f5a280d576a6c6e235a8587e6669eef1c45774687968a6bb6b677f09c7fc6a84289a59ceeb548b7d896fe1e94793" rel="nofollow"&gt;https://dev.to/tomaszrydzewski/runkit-indentation-2n9c-temp-slug-526549?preview=b14fe31c6205719176ea1eb56003f5a280d576a6c6e235a8587e6669eef1c45774687968a6bb6b677f09c7fc6a84289a59ceeb548b7d896fe1e94793&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/4948"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/4955"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        users' profile photos are not showing on the dockerized installation 
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#4955&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/abdellani"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--45SeYu8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/16113997%3Fv%3D4" alt="abdellani avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/abdellani"&gt;abdellani&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/4955"&gt;&lt;time&gt;Nov 27, 2019&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      

&lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;
After following the &lt;a href="https://docs.dev.to/installation/docker/" rel="nofollow"&gt;installation with docker guide&lt;/a&gt; and accessing the locally hosted application,  users' profile photos weren't showing up.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;web_1        | Cannot render console from 172.20.0.1! Allowed networks: 127.0.0.1, ::1, 127.0.0.0/127.255.255.255
web_1        | GET /uploads/user/profile_image/6/7a1aba89-1d79-486f-8c82-ab7a8f8a58c2.png completed with 404 Not Found in 0.677355ms
web_1        | Cannot render console from 172.20.0.1! Allowed networks: 127.0.0.1, ::1, 127.0.0.0/127.255.255.255
web_1        | GET /serviceworker.js completed with 304 Not Modified in 15.124716ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1- Follow the &lt;a href="https://docs.dev.to/installation/docker/" rel="nofollow"&gt;installation with docker guide&lt;/a&gt;.
2- Access 127.0.0.1:3000&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1-
&lt;a href="https://user-images.githubusercontent.com/16113997/69758804-d6699e00-1160-11ea-8fd5-36d0673404fc.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ds62lk4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/16113997/69758804-d6699e00-1160-11ea-8fd5-36d0673404fc.png" alt="1"&gt;&lt;/a&gt;
2-
&lt;a href="https://user-images.githubusercontent.com/16113997/69758814-db2e5200-1160-11ea-8be5-556f544d9383.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--00oVUmR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/16113997/69758814-db2e5200-1160-11ea-8be5-556f544d9383.png" alt="2"&gt;&lt;/a&gt;
3-
&lt;a href="https://user-images.githubusercontent.com/16113997/69758860-f6995d00-1160-11ea-9575-f41a032ef541.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SK0-tSOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/16113997/69758860-f6995d00-1160-11ea-9575-f41a032ef541.png" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS: Ubuntu 18.04&lt;/li&gt;
&lt;li&gt;Browser: firefox&lt;/li&gt;
&lt;li&gt;Version: 70&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Smartphone (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device:&lt;/li&gt;
&lt;li&gt;OS:&lt;/li&gt;
&lt;li&gt;Browser:&lt;/li&gt;
&lt;li&gt;Version:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;&lt;/p&gt;


    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/4955"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/4969"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Left-To-Right-Override, invisible unicode chars
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#4969&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/anuraghazra"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--fjkB0KNO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/35374649%3Fv%3D4" alt="anuraghazra avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/anuraghazra"&gt;anuraghazra&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/4969"&gt;&lt;time&gt;Nov 30, 2019&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      

&lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;
Looks like currently we can create posts with "U+202D" (LEFT-TO-RIGHT OVERRIDE) and other Invisible unicode characters&lt;/p&gt;
&lt;p&gt;Here's the post&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/anuraghazra/-12ef" rel="nofollow"&gt;https://dev.to/anuraghazra/-12ef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;hashtags:
&lt;a href="https://dev.to/t/%E2%80%8E%E2%80%8E%E2%80%8E%E2%80%8E" rel="nofollow"&gt;https://dev.to/t/%E2%80%8E%E2%80%8E%E2%80%8E%E2%80%8E&lt;/a&gt;
&lt;a href="https://dev.to/t/%E2%80%8E" rel="nofollow"&gt;https://dev.to/t/%E2%80%8E&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Copy U+202D unicode character&lt;/li&gt;
&lt;li&gt;Create a new post and set title to U+202D character
&lt;ul&gt;
&lt;li&gt;Same with hastags, Canonical URL &amp;amp; Series.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;
Should not allow those invisible unicode characters&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;
&lt;a href="https://user-images.githubusercontent.com/35374649/69902388-1758f100-13b3-11ea-800c-2181a6c20a0b.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rH4zpULl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/35374649/69902388-1758f100-13b3-11ea-800c-2181a6c20a0b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS: Windows 7 64bit&lt;/li&gt;
&lt;li&gt;Browser: Chrome&lt;/li&gt;
&lt;li&gt;Version:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;
I also copy pasted characters from here
&lt;a href="http://emptycharacter.com/" rel="nofollow"&gt;http://emptycharacter.com/&lt;/a&gt;&lt;/p&gt;


    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/4969"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/11494"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Keep getting notifications on previous email address
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#11494&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/javitruhlar"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFlyhYIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/7116409%3Fv%3D4" alt="javitruhlar avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/javitruhlar"&gt;javitruhlar&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/11494"&gt;&lt;time&gt;Nov 19, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      

&lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;
If you change the email address in your profile, you keep getting email notifications on your previous address even after you have confirmed the new one&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to 'Settings &amp;gt; Profile'&lt;/li&gt;
&lt;li&gt;Under 'User' section, change the email&lt;/li&gt;
&lt;li&gt;Open email sent to new address and click 'confirm my account'&lt;/li&gt;
&lt;li&gt;See error -&amp;gt; Keep getting email notifications on previous address&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;
After confirmation of new email address, all email notifications should be sent to that address and not to the previous one&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS, version: Linux Mint 19.3&lt;/li&gt;
&lt;li&gt;Browser, version: 78.0.1 (64-bit)&lt;/li&gt;
&lt;/ul&gt;


    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/11494"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/12455"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Themes (aka Dark Mode) not respected on first page loads
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#12455&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/kallmanation"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--FSWGhKPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/32068459%3Fv%3D4" alt="kallmanation avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/kallmanation"&gt;kallmanation&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/12455"&gt;&lt;time&gt;Jan 27, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      

&lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When first opening Dev.to (on both mobile &amp;amp; desktop) or when first visiting a new area (going to the dashboard from the homepage; starting a new post) the default theme is shown. This persists for a few page refreshes before my selected theme (night theme) is shown.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open a private/incognito browser window&lt;/li&gt;
&lt;li&gt;Log in&lt;/li&gt;
&lt;li&gt;The default theme is shown (instead of the one in settings)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The theme selected in settings would show after logging in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First screen after logging in:
&lt;a href="https://user-images.githubusercontent.com/32068459/106010811-dc6e4e00-6087-11eb-855e-c34d4128956d.png" rel="nofollow"&gt;&lt;img width="1220" alt="Screen Shot 2021-01-27 at 10 09 00 AM" src="https://res.cloudinary.com/practicaldev/image/fetch/s--znJ5dQx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/32068459/106010811-dc6e4e00-6087-11eb-855e-c34d4128956d.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Settings page (It was always set to Night Theme; pre-login):
&lt;a href="https://user-images.githubusercontent.com/32068459/106010822-ded0a800-6087-11eb-9820-f29095abc541.png" rel="nofollow"&gt;&lt;img width="1219" alt="Screen Shot 2021-01-27 at 10 09 21 AM" src="https://res.cloudinary.com/practicaldev/image/fetch/s--v8MI1F13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/32068459/106010822-ded0a800-6087-11eb-9820-f29095abc541.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS, version: macOS Catalina 10.15.7&lt;/li&gt;
&lt;li&gt;Browser, version: Vivaldi 3.4.2066.90 (Stable channel) (x86_64)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Smartphone (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device: Samsung Note 10+&lt;/li&gt;
&lt;li&gt;OS, version: Android 11.0&lt;/li&gt;
&lt;li&gt;Browser, version: Chrome 88.0.4324.93&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/12455"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/12545"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        "Unable to load Comment Subscription component"
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#12545&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/ludwiczakpawel"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hM75UrvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/108287%3Fv%3D4" alt="ludwiczakpawel avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/ludwiczakpawel"&gt;ludwiczakpawel&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/12545"&gt;&lt;time&gt;Feb 02, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      

&lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/108287/106653335-f253a580-6596-11eb-8ecc-3582965616a1.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GhhmOqqY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/108287/106653335-f253a580-6596-11eb-8ecc-3582965616a1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's been happening quite often recently for me but I can't really tell how exactly this should be reproduced. It does work after refreshing the page, but then when I go to another post it's broken again.&lt;/p&gt;
&lt;p&gt;Also, this is what's happening in the console:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/108287/106653573-465e8a00-6597-11eb-8ff7-03bf34f7b404.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dMXgu1vC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/108287/106653573-465e8a00-6597-11eb-8ff7-03bf34f7b404.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See above.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fo this component to work properly :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See above.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;n/a&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Smartphone (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;n/a&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/12545"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13298"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Comment box not shrinking on submit
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13298&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/Link2Twenty"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--YEfIAkze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/3534427%3Fv%3D4" alt="Link2Twenty avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/Link2Twenty"&gt;Link2Twenty&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13298"&gt;&lt;time&gt;Apr 07, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;
Comment boxes grow as you type but when you press submit they stay the size they were when they had content.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to a post&lt;/li&gt;
&lt;li&gt;Write a long comment&lt;/li&gt;
&lt;li&gt;Post the comment&lt;/li&gt;
&lt;li&gt;See the comment box is still large.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Expected behaviour&lt;/strong&gt;
I'd expect the comment box the shrink back down to it's original size.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;
&lt;a href="https://user-images.githubusercontent.com/3534427/113887114-20cd4700-97b9-11eb-9c14-49c0432ad96f.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EokwLQab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/3534427/113887114-20cd4700-97b9-11eb-9c14-49c0432ad96f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS, version: Window 10&lt;/li&gt;
&lt;li&gt;Browser, version: Chrome 89.0.4389.114&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;
Another small bug that doesn't really cause any harm.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13298"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13277"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Refactor `/search/chat_channels` endpoint
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13277&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/atsmith813"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--H9J78MWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/15987080%3Fv%3D4" alt="atsmith813 avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/atsmith813"&gt;atsmith813&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13277"&gt;&lt;time&gt;Apr 06, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;In &lt;a href="https://github.com/forem/forem/pull/13235"&gt;https://github.com/forem/forem/pull/13235&lt;/a&gt; we refactored how &lt;code&gt;/search/chat_channels&lt;/code&gt; works by essentially removing "search" functionality and turning it into more of a "filter". &lt;a href="https://github.com/forem/forem/pull/13235#discussion_r606368287"&gt;As noted in the PR&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You'll notice I left everything in the Search namespace (the route, the controller, and the service naming). I originally started removing chat_channels from search all together since this behaves more like a filter than a search.&lt;/p&gt;
&lt;p&gt;However, I discovered there are some JS components that are using this endpoint as an "index". I started refactoring everything, but it quickly got out of hand and out of scope for what this PR is intended to address. I also realized it may actually be nice to leave everything in the search namespace so that when we re-do the search for Connect in the future, it's a smoother experience.&lt;/p&gt;
&lt;p&gt;With that said, since we have the ChatChannelsController and the ChatChannelMembershipsController each with index actions, I think the right move would be to move those JS components to them so we don't have multiple controllers performing the same actions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This issue is to essentially update all the JS components on the frontend to use a newly refactored endpoint that lives in a more appropriate spot (i.e. &lt;code&gt;ChatChannelMembershipsController&lt;/code&gt; or &lt;code&gt;ChatChannelsController&lt;/code&gt;) than the &lt;code&gt;SearchController&lt;/code&gt;. Once this issue is complete, the &lt;code&gt;chat_channels&lt;/code&gt; action should no longer exist in the &lt;code&gt;SearchController&lt;/code&gt; and instead, a new endpoint should be able to take care of any "filtering" and "indexing" being done by the JS components.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13277"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;For the full list, click &lt;a href="https://github.com/forem/forem/labels/Bug%20Smash"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;We are so excited to see your contributions! Our team thanks you for your collaboration and commitment to improving our repository 💖&lt;/p&gt;

&lt;p&gt;If you’re new to making pull requests, here are a few resources we recommend you check out: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/chrissiemhrk/git-cheat-sheet-26ak"&gt;Git Cheat Sheet&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/chrissiemhrk"&gt;@chrissiemhrk&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/tracycss/git-and-github-for-beginners-po3"&gt;Git and GitHub for Beginners&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/tracycss"&gt;@tracycss&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/healeycodes/your-first-open-source-pull-request-a-walkthrough-1omf"&gt;Your First Open-Source Pull Request: a Walkthrough&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/healeycodes"&gt;@healeycodes&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;P.S. With only a few exceptions, the Forem team is pro real-world, physical bugs and we don’t condone smashing them! #TakeSpidersOutside&lt;/em&gt;&lt;/p&gt;

</description>
      <category>devbugsmash</category>
      <category>opensource</category>
      <category>forem</category>
      <category>contributorswanted</category>
    </item>
    <item>
      <title>How to implement a Discord bot (in NodeJS) that requires new members to introduce themselves</title>
      <author>Martin Šošić</author>
      <pubDate>Tue, 04 May 2021 16:30:37 +0000</pubDate>
      <link>https://dev.to/martinsos/how-to-implement-a-discord-bot-in-nodejs-that-requires-new-members-to-introduce-themselves-926</link>
      <guid>https://dev.to/martinsos/how-to-implement-a-discord-bot-in-nodejs-that-requires-new-members-to-introduce-themselves-926</guid>
      <description>&lt;p&gt;At &lt;a href="https://wasp-lang.dev"&gt;Wasp&lt;/a&gt;, we have a Discord server for our community, where we talk with people interested in and using Wasp - Waspeteers!&lt;/p&gt;

&lt;p&gt;In the beginning, we knew everybody in the community by their name, but as it started growing, we had a lot of people joining that never wrote anything, and the community started feeling less homey, less intimate.&lt;/p&gt;

&lt;p&gt;This was when we decided to make it required for the new members to introduce themselves to gain access to the community.&lt;br&gt;
We knew that with this kind of barrier we would probably lose some potential new Waspeteers, but those that would go through it would be more engaged and better integrated.&lt;/p&gt;

&lt;p&gt;We found no other way to accomplish this automatically but to implement our own Discord bot.&lt;br&gt;
In this post I will describe in detail how we did it.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#highlevel-approach"&gt;
  &lt;/a&gt;
  High-level approach
&lt;/h2&gt;

&lt;p&gt;We want the following: when a new user comes to our Discord server, they should be able to access only "public" channels, like &lt;code&gt;rules&lt;/code&gt;, &lt;code&gt;contributing&lt;/code&gt;, and most importantly, &lt;code&gt;introductions&lt;/code&gt;, where they could introduce themselves.&lt;/p&gt;

&lt;p&gt;Once they introduced themselves in the &lt;code&gt;introductions&lt;/code&gt; channel, they would get access to the rest of the channels.&lt;/p&gt;

&lt;p&gt;
  
    &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJyz2pEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wugan62xc12w5uo6xn0.png" class="article-body-image-wrapper"&gt;&lt;img alt="Channels user can see when Guest vs when full member." src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJyz2pEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wugan62xc12w5uo6xn0.png"&gt;&lt;/a&gt;Left: what Guest sees; Right: what Waspeteer sees.
    
  
&lt;/p&gt;

&lt;p&gt;In Discord, access control is performed via roles. There are two ways to accomplish what we need:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Adding a role that grants access&lt;/strong&gt;. When they join, they have no roles. Once they introduce themselves, they are granted a role (e.g. &lt;code&gt;Member&lt;/code&gt; or &lt;code&gt;Waspeteer&lt;/code&gt;) that is required to access the rest of the server.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Removing a role that forbids access&lt;/strong&gt;. When they join, they are automatically assigned a role &lt;code&gt;Guest&lt;/code&gt;, for which we configured the non-public channels to deny access. Once they introduce themselves, the role &lt;code&gt;Guest&lt;/code&gt; gets removed and they gain access to the rest of the server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We decided to go with the second approach since it means we don't have to assign all the existing members with a new role. From now on, we will be talking about how to get this second approach working.&lt;/p&gt;

&lt;p&gt;To get this going, we need to do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create role &lt;code&gt;Guest&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ensure that the &lt;code&gt;Guest&lt;/code&gt; role has permissions to access only "public" channels.
One convenient way to go about this is to disable "View Channels" permission for the role &lt;code&gt;Guest&lt;/code&gt; at the level of Category, so it propagates to all the channels in it, instead of doing it for every single channel.
Once you are done, use the "See server as a role" feature of Discord to confirm that you set the permissions as you wanted.&lt;/li&gt;
&lt;li&gt;Automatically inform new members that they must introduce themselves in the &lt;code&gt;introductions&lt;/code&gt; channel with &lt;code&gt;!intro &amp;lt;text_about_me&amp;gt;&lt;/code&gt; to gain access to the rest of the server.
This can be done via Discord's "Welcome Screen" feature or via one of the many existing Discord bots out there offering this functionality.&lt;/li&gt;
&lt;li&gt;Automatically assign the &lt;code&gt;Guest&lt;/code&gt; role to a new member when they join the server.&lt;/li&gt;
&lt;li&gt;Automatically remove the &lt;code&gt;Guest&lt;/code&gt; role when a member introduces themselves in the public &lt;code&gt;introductions&lt;/code&gt; channel.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Points #1, #2 and #3 are relatively straight-forward.&lt;/p&gt;

&lt;p&gt;For the #4 (automatic assignment of the role when a new member joins the server), since Discord doesn't support this directly, you will need a bot to do it.&lt;br&gt;
Luckily, many bots allow you to auto-assign roles when new members join, and I ended up using &lt;a href="https://mee6.xyz/"&gt;MEE6&lt;/a&gt; for this.&lt;br&gt;
I set it up so that when a new member joins, they are immediately assigned a &lt;code&gt;Guest&lt;/code&gt; role.&lt;/p&gt;

&lt;p&gt;However, for the #5 (remove or assign the role on a message in a specific channel), the situation is more complicated - I couldn't find a single bot out there that supports this!&lt;br&gt;
The closest I got was with &lt;a href="https://carl.gg/"&gt;Carl Bot&lt;/a&gt; and its "tags" feature, which allows you to write custom code, but in the end, it turned out to be too restrictive to accomplish this.&lt;br&gt;
Therefore, I ended up implementing our own bot (Wasp Bot) that does this.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementing-a-discord-bot-nodejs"&gt;
  &lt;/a&gt;
  Implementing a Discord Bot (NodeJS)
&lt;/h2&gt;

&lt;p&gt;I decided to implement a bot in NodeJS since it is easy to get started quickly and there is a good Discord library.&lt;/p&gt;

&lt;p&gt;I will describe how to create it step by step below, but &lt;a href="https://github.com/wasp-lang/wasp-bot/tree/4b3858202622c7635aeb6f1d71d9ba9781eea6eb"&gt;here is the final code of the bot&lt;/a&gt; if you want to skip ahead.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#defining-bot-on-discord-and-adding-it-to-your-server"&gt;
  &lt;/a&gt;
  Defining bot on Discord and adding it to your server.
&lt;/h3&gt;

&lt;p&gt;Before we even start implementing the bot, we will tell Discord about it first, in order to obtain the neccessary credentials that we will use in our code, and we will add the bot to our server.&lt;br&gt;
There are many tutorials already on how to do this, so I will keep it short.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to Discord Developer Portal, create a new Application -&amp;gt; I named it &lt;code&gt;Wasp&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Go to the "Bot" part of Application "Settings" and add a new bot. I named it &lt;code&gt;WaspBot&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;On the "Bot" page of your freshly created bot, there is a "TOKEN" part -&amp;gt; create a mental note about it, we will need this later when running our bot.&lt;/li&gt;
&lt;li&gt;Go to the "OAuth2" part of Application "Settings". Here we will define which permissions our bot will have.
This is done by checking the permissions we want to give it and then following the URL that will be generated based on our choices.

&lt;ul&gt;
&lt;li&gt;Check the &lt;code&gt;bot&lt;/code&gt; under the "SCOPES" section.&lt;/li&gt;
&lt;li&gt;Scroll down further to find the "BOT PERMISSIONS" section. There, check the &lt;code&gt;Manage Roles&lt;/code&gt;, &lt;code&gt;View Channels&lt;/code&gt;, &lt;code&gt;Read Message History&lt;/code&gt;, and &lt;code&gt;Send Messages&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Under the "SCOPES" section above, you will see a URL. Copy it into the browser and follow the steps to add the bot to your server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#creating-a-basic-bot-in-nodejs"&gt;
  &lt;/a&gt;
  Creating a basic bot in NodeJS
&lt;/h3&gt;

&lt;p&gt;In a directory where your code will be, create a new npm project with &lt;code&gt;npm init&lt;/code&gt; -&amp;gt; set the entry point to &lt;code&gt;bot.js&lt;/code&gt; instead of &lt;code&gt;index.js&lt;/code&gt;. This will result in a &lt;code&gt;package.json&lt;/code&gt; file being generated.&lt;/p&gt;

&lt;p&gt;We will need one important dependency, &lt;code&gt;discord.js&lt;/code&gt;, to make it easy to work with Discord's API.&lt;br&gt;
Add it with &lt;code&gt;npm install -S discord.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, create &lt;code&gt;bot.js&lt;/code&gt; file next to &lt;code&gt;package.json&lt;/code&gt; with following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Discord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;discord.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BOT_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BOT_TOKEN&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Discord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BOT_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Logged in as: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is it! Run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DISCORD_BOT=&amp;lt;TOKEN_OF_YOUR_DISCORD_BOT&amp;gt; node bot.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you should see output about successful login, in my case it was &lt;code&gt;Logged in as: WaspBot#1234&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#detecting-a-valid-introduction-from-a-member"&gt;
  &lt;/a&gt;
  Detecting a valid introduction from a member
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: For the following part, I was using &lt;a href="https://discord.js.org/#/"&gt;Discord.js&lt;/a&gt; docs to figure out how to do it, so if you need more details on a specific step, check them out.&lt;/p&gt;

&lt;p&gt;Now is the moment to define exactly how we want the introduction process to go.&lt;br&gt;
So, let's say that the correct way for new members to introduce themselves is by sending a message to the &lt;code&gt;introductions&lt;/code&gt; channel that starts with &lt;code&gt;!intro&lt;/code&gt; and follows with at least 20 characters of text (to ensure the introduction is not too short).&lt;br&gt;
&lt;code&gt;!intro&lt;/code&gt; makes it easy for our bot to know when to act (in Discord, bot commands often start with &lt;code&gt;!&amp;lt;something&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Let's add the needed code to &lt;code&gt;bot.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;INTRODUCTIONS_CHANNEL_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;YOU_WILL_HAVE_TO_FIND_THIS_ON_DISCORD_SERVER&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!intro &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;INTRODUCTIONS_CHANNEL_ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;introductionsChannelName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;guild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;INTRODUCTIONS_CHANNEL_ID&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`Please use !intro command in the &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;introductionsChannelName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; channel!`&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;introMsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!intro &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minMsgLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;introMsg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;minMsgLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`Please write introduction at least &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;minMsgLength&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; characters long!`&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Yay successful introduction!`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing to notice is that you will have to obtain the ID of the &lt;code&gt;introductions&lt;/code&gt; channel and paste it in your code where I put the placeholder above.&lt;br&gt;
You can find out this ID by going to your Discord server in the Discord app, right-clicking on the &lt;code&gt;introductions&lt;/code&gt; channel, and clicking on &lt;code&gt;Copy ID&lt;/code&gt;. For this to work, you will first have to enable the "Developer Mode" (under "User Settings" &amp;gt; "Advanced").&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#removing-the-guest-role-upon-successful-introduction"&gt;
  &lt;/a&gt;
  Removing the "Guest" role upon successful introduction
&lt;/h3&gt;

&lt;p&gt;What is missing is removing the &lt;code&gt;Guest&lt;/code&gt; role upon successful introduction, so let's do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;INTRODUCTIONS_CHANNEL_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;YOU_WILL_HAVE_TO_FIND_THIS_ON_DISCORD_SERVER&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GUEST_ROLE_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;YOU_WILL_HAVE_TO_FIND_THIS_ON_DISCORD_SERVER&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!intro &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;INTRODUCTIONS_CHANNEL_ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;introductionsChannelName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;guild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;INTRODUCTIONS_CHANNEL_ID&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`Please use !intro command in the &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;introductionsChannelName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; channel!`&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;introMsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!intro &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minMsgLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;introMsg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;minMsgLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`Please write introduction at least &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;minMsgLength&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; characters long!`&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;guild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GUEST_ROLE_ID&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GUEST_ROLE_ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nice getting to know you! You are no longer a guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; and have full access, welcome!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Error: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Same as with the ID of the &lt;code&gt;introductions&lt;/code&gt; channel, now you will also need to find out the ID of the &lt;code&gt;Guest&lt;/code&gt; role (which you should have created at some point).&lt;br&gt;
You can do it by finding it in the server settings, under the list of roles, right-clicking on it, and then "Copy ID".&lt;/p&gt;

&lt;p&gt;This is it! You can now run the bot with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;DISCORD_BOT&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TOKEN_OF_YOUR_DISCORD_BOT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and if you assign yourself a &lt;code&gt;Guest&lt;/code&gt; role on the Discord server and then type &lt;code&gt;!intro Hi this is my introduction, I am happy to be here.&lt;/code&gt; in the &lt;code&gt;introductions&lt;/code&gt; channel, you should see yourself getting full access together with an appropriate message from your bot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploying-the-bot"&gt;
  &lt;/a&gt;
  Deploying the bot
&lt;/h3&gt;

&lt;p&gt;While there are many ways to deploy the Discord bot, I will shortly describe how we did it via Heroku.&lt;/p&gt;

&lt;p&gt;We created a Heroku app &lt;code&gt;wasp-discord-bot&lt;/code&gt; and set up the "Automatic deploys" feature on Heroku to automatically deploy every push to the &lt;code&gt;production&lt;/code&gt; branch (our bot is on Github).&lt;/p&gt;

&lt;p&gt;On Heroku, we set the environment variable &lt;code&gt;DISCORD_BOT&lt;/code&gt; to the token of our bot.&lt;/p&gt;

&lt;p&gt;Finally, we added &lt;code&gt;Procfile&lt;/code&gt; file to our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;worker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node bot.js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is it! On every push to the &lt;code&gt;production&lt;/code&gt; branch, our bot gets deployed.&lt;/p&gt;

</description>
      <category>node</category>
      <category>discord</category>
    </item>
    <item>
      <title>Turn a Jupyter Notebook into a Web App</title>
      <author>Meredydd Luff</author>
      <pubDate>Tue, 04 May 2021 16:14:27 +0000</pubDate>
      <link>https://dev.to/meredydd/turn-a-jupyter-notebook-into-a-web-app-lj3</link>
      <guid>https://dev.to/meredydd/turn-a-jupyter-notebook-into-a-web-app-lj3</guid>
      <description>&lt;p&gt;Let’s say you’re a data scientist, and you’ve been asked to solve a problem. Of course, what you really want is to build an interactive tool, so your colleagues can solve the problem themselves!&lt;/p&gt;

&lt;p&gt;In this tutorial, I'll show you how to take a machine-learning model in a Jupyter notebook, and &lt;strong&gt;turn it into a web application&lt;/strong&gt; using the &lt;a href="https://anvil.works/docs/uplink?utm_source=crosspost:dev.to:/learn/tutorials/jupyter-notebook-to-web-app"&gt;Anvil Uplink&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's what we'll do: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set up a Jupyter notebook&lt;/li&gt;
&lt;li&gt;Connect it to an &lt;a href="https://anvil.works?utm_source=crosspost:dev.to:/learn/tutorials/jupyter-notebook-to-web-app"&gt;Anvil app&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Make a user interface&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-jupyter-notebook"&gt;
  &lt;/a&gt;
  Setting up the Jupyter Notebook
&lt;/h2&gt;

&lt;p&gt;We'll start with a &lt;a href="https://www.kaggle.com/uysimty/keras-cnn-dog-or-cat-classification"&gt;pre-existing Jupyter Notebook&lt;/a&gt; containing a classification model that distinguishes between cats and dogs. You give it an image and it scores it as ‘cat’ or ‘dog’.&lt;/p&gt;

&lt;p&gt;(Thanks to &lt;a href="https://uysim.com/"&gt;Uysim Ty&lt;/a&gt; for sharing it on Kaggle.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-to-the-uplink"&gt;
  &lt;/a&gt;
  Connecting to the Uplink
&lt;/h2&gt;

&lt;p&gt;We'll use the &lt;a href="https://anvil.works/docs/uplink?utm_source=crosspost:dev.to:/learn/tutorials/jupyter-notebook-to-web-app"&gt;Anvil Uplink&lt;/a&gt; to connect a Jupyter Notebook to Anvil. It’s a library you can &lt;code&gt;pip install&lt;/code&gt; on your computer or wherever your Notebook is running.&lt;/p&gt;

&lt;p&gt;It allows you to: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;call functions in your Jupyter Notebook from your Anvil app&lt;/li&gt;
&lt;li&gt;call functions in your Anvil app from your Juypter Notebook - store data in your Anvil app from your Jupyter Notebook &lt;/li&gt;
&lt;li&gt;use the &lt;a href="https://anvil.works/docs/server"&gt;Anvil server library&lt;/a&gt; inside your Jupyter Notebook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It works for any Python process - this happens to be a Jupyter Notebook, but it could be an ordinary Python script, a Flask app, even the Python REPL!&lt;/p&gt;

&lt;p&gt;To connect our notebook, we'll first need to enable the Uplink in the &lt;a href="https://anvil.works/?utm_source=crosspost:dev.to:/learn/tutorials/jupyter-notebook-to-web-app"&gt;Anvil IDE&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DB1cM2VZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anvil.works/docs/uplink/img/uplink-dialog-location.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DB1cM2VZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anvil.works/docs/uplink/img/uplink-dialog-location.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This gives us a key that we can then use in our code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9WdkERAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anvil.works/learn/tutorials/img/jupyter-notebook-to-web-app/enable-uplink.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9WdkERAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anvil.works/learn/tutorials/img/jupyter-notebook-to-web-app/enable-uplink.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We then need to &lt;code&gt;pip install&lt;/code&gt; the Uplink library on the machine the Jupyter Notebook is running on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install anvil-uplink
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By adding the following lines to our Jupyter notebook, we can connect it to our Anvil app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;anvil.server&lt;/span&gt;

&lt;span class="n"&gt;anvil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;YOUR-UPLINK-KEY&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can do anything in our Jupyter Notebook that we can do in an Anvil &lt;a href="https://anvil.works/docs/server?utm_source=crosspost:dev.to:/learn/tutorials/jupyter-notebook-to-web-app"&gt;Server Module&lt;/a&gt; - call Anvil server functions, store data in &lt;a href="https://anvil.works/docs/data-tables?utm_source=crosspost:dev.to:/learn/tutorials/jupyter-notebook-to-web-app"&gt;Data Tables&lt;/a&gt;, and define server functions to be called from other parts of the app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loading-an-image-into-the-notebook"&gt;
  &lt;/a&gt;
  Loading an image into the Notebook
&lt;/h2&gt;

&lt;p&gt;We'll load an image into the Jupyter Notebook by making an &lt;code&gt;anvil.server.callable&lt;/code&gt; function in the Jupyter Notebook. It will classify the input image as either a cat or a dog.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;anvil.media&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;anvil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;callable&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;classify_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;anvil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TempFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_img&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’re passing the image in as an Anvil &lt;a href="https://anvil.works/docs/media?utm_source=crosspost:dev.to:/learn/tutorials/jupyter-notebook-to-web-app"&gt;Media object&lt;/a&gt;, which we then write to a temporary file.&lt;/p&gt;

&lt;p&gt;The load_img function loads the file into &lt;a href="https://python-pillow.org/"&gt;Pillow&lt;/a&gt;, a Python imaging library.&lt;/p&gt;

&lt;p&gt;Then we can do a bit of post-processing of the image to get it into a format that the model likes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# Inside the classify_image function
&lt;/span&gt;
    &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;resample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BICUBIC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img_to_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_dims&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can just pass it into our model and return the result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# Inside the classify_image function
&lt;/span&gt;
    &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'dog'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;'cat'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-a-user-interface"&gt;
  &lt;/a&gt;
  Building a User Interface
&lt;/h2&gt;

&lt;p&gt;We can &lt;a href="https://anvil.works/articles/drag-and-drop-builder?utm_source=crosspost:dev.to:/learn/tutorials/jupyter-notebook-to-web-app"&gt;drag-and-drop components&lt;/a&gt; to create a User Interface. It consists of a &lt;a href="https://anvil.works/docs/client/components/basic#fileloader?utm_source=crosspost:dev.to:/learn/tutorials/jupyter-notebook-to-web-app"&gt;FileLoader&lt;/a&gt; to upload the images, an &lt;a href="https://anvil.works/docs/client/components/basic#image?utm_source=crosspost:dev.to:/learn/tutorials/jupyter-notebook-to-web-app"&gt;Image&lt;/a&gt; to display them, and a &lt;a href="https://anvil.works/docs/client/components/basic#label?utm_source=crosspost:dev.to:/learn/tutorials/jupyter-notebook-to-web-app"&gt;Label&lt;/a&gt; to display the classification.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fpj35ivH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anvil.works/learn/tutorials/img/jupyter-notebook-to-web-app/create-ui-drag-and-drop.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fpj35ivH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anvil.works/learn/tutorials/img/jupyter-notebook-to-web-app/create-ui-drag-and-drop.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-ui-call-the-notebook"&gt;
  &lt;/a&gt;
  Making the UI call the Notebook
&lt;/h2&gt;

&lt;p&gt;Now we need to write some Python code that runs in the browser so the app responds when an image is loaded in.&lt;/p&gt;

&lt;p&gt;We can define an event handler that triggers when the FileLoader gets a new file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;file_loader_1_change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;event_args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""This method is called when a new file is loaded into this FileLoader."""&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anvil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'classify_image'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result_lbl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"%s (%0.2f)"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line calls the &lt;code&gt;classify_image&lt;/code&gt; function in the Jupyter Notebook, passing in the image file.&lt;/p&gt;

&lt;p&gt;Then we display the result (cat or dog) and the score (0 to 1; completely dog or completely cat).&lt;/p&gt;

&lt;p&gt;We also put the image file into the Image component so that the user can see their cat or dog (or other cat-or-dog-like image) and decide if they agree with the result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v0fXEIwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anvil.works/learn/tutorials/img/jupyter-notebook-to-web-app/its-a-cat.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v0fXEIwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anvil.works/learn/tutorials/img/jupyter-notebook-to-web-app/its-a-cat.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your app is already published at a private URL, but we can give it a public URL. You can check out this finished app at &lt;a href="https://cat-or-dog.anvil.app"&gt;https://cat-or-dog.anvil.app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out the whole tutorial:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yh0B4HjQxOU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>CCS: Writing</title>
      <author>Pachi 🪐 (she/her/ela)</author>
      <pubDate>Tue, 04 May 2021 16:08:36 +0000</pubDate>
      <link>https://dev.to/newrelic/ccs-writing-keo</link>
      <guid>https://dev.to/newrelic/ccs-writing-keo</guid>
      <description>&lt;h1&gt;
  &lt;a href="#content-creation-series-writing"&gt;
  &lt;/a&gt;
  Content Creation Series: Writing
&lt;/h1&gt;

&lt;p&gt;Hello and welcome to this week's Content Creation Series.&lt;/p&gt;

&lt;p&gt;Today we will be talking about one of my favorite ways to create content… Writing!&lt;/p&gt;

&lt;p&gt;A little of storytelling here. I have always loved to write.&lt;/p&gt;

&lt;p&gt;My first win was in second grade, when my teacher liked too much a little story I wrote, that she typed it, made questions about it and shared with the class. I was thrilled! I never stop writing, but nothing serious or public. I got internet access, in 2007, I have been blogging, mostly to myself, just for the joy of writing.&lt;/p&gt;

&lt;p&gt;In the end 2018 I started to learn how to code, and in the summer of 2019 I went to Codeland, where I watched a talk by Ali Spittel about blogging and it inspired me to start writing on Dev.to.&lt;/p&gt;

&lt;p&gt;If you go see my profile there, you can clearly see my evolution as a writer, and how I started gaining confidence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Slowly but surely. And like Ali inspired me that summer, I want to do the same for you.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-why-write"&gt;
  &lt;/a&gt;
  - Why write?
&lt;/h2&gt;

&lt;p&gt;I will be honest with you here, I don’t remember much about that talk LOL. But I remember it inspired me and made me start writing, what helped me to be where I am today.&lt;/p&gt;

&lt;p&gt;In the beginning I started writing just to record my journey and MAYBE make some friends. Now I write to help and motivate people, to share what I know and still, my journey.&lt;/p&gt;

&lt;p&gt;We talked about WHY create content on the first post of this series, so now let’s focus on why to write:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is probably the simplest content creation format to get started on, thinking about time consumed and resources needed,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can share with lots of people, that can read it on their pace, easily take notes of what they want to read again later,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You don’t have to expose yourself as much as in other formats.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Writing is also the most accessible way to create content.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So overall, if you want to create content but are not sure where to start, I would recommend start here. Let’s write!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-what-to-write-about-and-writing-formats"&gt;
  &lt;/a&gt;
  - What to write about and writing formats
&lt;/h2&gt;

&lt;p&gt;The question is… What can I write about? There are already blog posts about EVERYTHING out there! Yes, that is true. But don’t underestimate how your experience, your “voice” and your writing style can make things unique and help other people.&lt;/p&gt;

&lt;p&gt;Let’s brainstorm here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What do you already know?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What You Want to learn about? Why?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What problems have you solved? How did you do it?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What questions do you have?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Answering these questions will give you a few topics to work with. Here is my current list for you to have a better view:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cvv3asoo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/x531nyndcehq8revjoxa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cvv3asoo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/x531nyndcehq8revjoxa.png" alt="Screenshot of my writing topics list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can be a tutorial, or a list of lessons learned, or just straightforward storytelling.&lt;/p&gt;

&lt;p&gt;My first blog post was more like a personal journal entry, were I talked about my life as a programming student. Nowadays I write more technical content, focused on my audience: entry level devs and women in tech.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-writing-process"&gt;
  &lt;/a&gt;
  My writing process:
&lt;/h2&gt;

&lt;p&gt;Let’s talk about the writing process. While it is different for everyone, there are some steps that can benefit most writers. I will share with you MY process and I hope this will help you to come up with yours.&lt;/p&gt;

&lt;p&gt;I have a board on notion where I keep track of my writings. &lt;br&gt;
 The first column is for &lt;strong&gt;ideas&lt;/strong&gt;. Every time I think about a topic that could become a good blog post, I write that there. The second column is for posts &lt;strong&gt;In Process&lt;/strong&gt;, followed by &lt;strong&gt;In Review&lt;/strong&gt;, &lt;strong&gt;Posted&lt;/strong&gt; and &lt;strong&gt;Syndicated&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YYE2xeaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/1nydmvf6hcwlujoqrd9y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YYE2xeaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/1nydmvf6hcwlujoqrd9y.png" alt="screenshot of said notion board"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Process&lt;/strong&gt;  is for posts I have started Outlining and maybe even writing.&lt;/p&gt;

&lt;p&gt;I have an Outlining template that I use every time I start a new post. It contains the elements I want my post to have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Intro - What will this post be about,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sections 1, 2 and 3 - Usually I have 3 main points, and each section covers one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conclusion - Here I summarized all of the above into a sentence or two.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Call to action - What do I want the reader to do next? For me it usually is to have them come watch me on Twitch.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;In Review&lt;/strong&gt; are posts that are finished but need to be checked.&lt;/p&gt;

&lt;p&gt;On this step I also created a cover using Canva.com, run my article on &lt;a href="https://hemingwayapp.com/"&gt;https://hemingwayapp.com/&lt;/a&gt; and make it more readable using markup language editor &lt;a href="https://stackedit.io/app#"&gt;https://stackedit.io/app#&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After I am happy with the steps above, I post it then move it to the &lt;strong&gt;Posted&lt;/strong&gt; column on my board.&lt;/p&gt;

&lt;p&gt;The last step is &lt;strong&gt;Syndicating&lt;/strong&gt; my posts. What does that mean? Usually after 2 weeks I posted something, I re-post it with a canonical link on another platform, like Dev.to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-checklist"&gt;
  &lt;/a&gt;
  - Checklist
&lt;/h2&gt;

&lt;p&gt;So here are, in a checklist, the steps I take for each blog post:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;-Get an idea from my list of ideas,&lt;/li&gt;
&lt;li&gt;Outline the post, writing each heading I want it to have,&lt;/li&gt;
&lt;li&gt;Starting writing the post, with the headings as guidelines,&lt;/li&gt;
&lt;li&gt;After I am done writing, I create a cover on Canva.com,&lt;/li&gt;
&lt;li&gt; Use &lt;a href="https://hemingwayapp.com/"&gt;https://hemingwayapp.com&lt;/a&gt; to check spelling, working count, and make sure my writing is clear.&lt;/li&gt;
&lt;li&gt;Next, I use &lt;a href="https://stackedit.io/app#"&gt;https://stackedit.io/app#&lt;/a&gt; to format it to make it easier to read.&lt;/li&gt;
&lt;li&gt; It is time to post!&lt;/li&gt;
&lt;li&gt;After 2 weeks or so, re-post in on dev.to or therelicans.com , using a canonical link&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-and-a-challenge"&gt;
  &lt;/a&gt;
  Conclusion and a Challenge!
&lt;/h2&gt;

&lt;p&gt;Here you have it! How I write my posts, why I do it and all the tips I can give you to get started writing great content!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I have a challenge for you:&lt;/strong&gt; Choose a topic you are comfortable with, maybe your journey into tech? Write about it, and post it here on therelicans.com! &lt;br&gt;
Once you are done, share it with me so I can review for you, and give you advice on how and where to improve !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As always, please follow me on Twitch and come hang out with me!&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://bit.ly/3chse4t"&gt;I stream every day, and on Co-working Fridays you can see me writing my posts LIVE!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;XOXO,&lt;br&gt;
Pachi C.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q0pUuyln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/woq7i8i52t7lwo9e8jmn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q0pUuyln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/woq7i8i52t7lwo9e8jmn.png" alt="Screeshot of my stream on Twitch"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>writing</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Image Classification - Machine Learning in Javascript</title>
      <author>Bibek</author>
      <pubDate>Tue, 04 May 2021 15:45:19 +0000</pubDate>
      <link>https://dev.to/bibekkakati/image-classification-machine-learning-in-javascript-g3f</link>
      <guid>https://dev.to/bibekkakati/image-classification-machine-learning-in-javascript-g3f</guid>
      <description>&lt;p&gt;Hello readers, recently I came to know about an awesome machine learning library for Javascript. &lt;/p&gt;

&lt;p&gt;Any guess? No, it is not &lt;code&gt;tensorflow.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is &lt;a href="https://learn.ml5js.org/"&gt;&lt;code&gt;ml5.js&lt;/code&gt;&lt;/a&gt;. So what is &lt;a href="https://learn.ml5js.org/"&gt;&lt;code&gt;ml5.js&lt;/code&gt;&lt;/a&gt;?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before proceeding, I would like to mention that I am not a machine learning expert. I just have some basic knowledge and try out these kinds of stuff in my free time with the help of external libraries.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article, I will brief about the library and show some examples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-raw-ml5js-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;ml5.js&lt;/code&gt;?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://learn.ml5js.org/"&gt;&lt;code&gt;ml5.js&lt;/code&gt;&lt;/a&gt; is a machine learning library built on top of &lt;code&gt;tensorflow.js&lt;/code&gt; which we can use in our web browser. It is being developed to make machine learning more accessible and life easier for people who are new to the Machine Learning arena.&lt;/p&gt;

&lt;p&gt;It uses the browser's GPU to run all the calculations. Getting started with the library is very easy.&lt;/p&gt;

&lt;p&gt;Just include the package link in your project and you are good to go.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://unpkg.com/ml5@latest/dist/ml5.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h1&gt;

&lt;p&gt;Let's implement something to understand the library.&lt;/p&gt;

&lt;p&gt;We will implement Image Classification using this library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-image-classification"&gt;
  &lt;/a&gt;
  What is Image Classification?
&lt;/h3&gt;

&lt;p&gt;Image Classification is a computer vision technique in which we classify images according to the visual content in it. We train the Image Classifier with crafted data so that it can predict what type of object is in an Image. If we train the classifier with dog's images, it will be able to identify a dog in a photo very easily.&lt;/p&gt;




&lt;p&gt;We will create a webpage where user can upload an image or paste an image link, and our classifier will classify what type of object is in the image.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- HTML
- CSS
- Javascript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#code-implementation"&gt;
  &lt;/a&gt;
  Code Implementation
&lt;/h3&gt;

&lt;p&gt;First, we will be implementing the &lt;code&gt;index.html&lt;/code&gt; page, which is our main web page.&lt;br&gt;
On this page, we will have two buttons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Upload Image&lt;/code&gt; to upload an image from your local drive&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Paste Link&lt;/code&gt; to use hosted image from external server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On uploading or pasting a link of an image, the image will get rendered on the screen. After that on clicking the button &lt;code&gt;What is in the image?&lt;/code&gt;, the result will be shown below it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some external links of the images will not work because of cors policy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Image Classifier&amp;lt;/title&amp;gt;
    &amp;lt;script src="https://unpkg.com/ml5@latest/dist/ml5.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link rel="stylesheet" href="./style.css"&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body onload="main()"&amp;gt;
    &amp;lt;div class="loader-view" id="loaderView"&amp;gt;
        &amp;lt;h3&amp;gt;Initializing ...&amp;lt;/h3&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="main" id="mainView"&amp;gt;
        &amp;lt;h1 class="heading"&amp;gt;Image Classifier&amp;lt;/h1&amp;gt;
        &amp;lt;div class="select-image"&amp;gt;
            &amp;lt;input type="file" name="Image" id="selectImage" accept="jpg,jpeg,png" hidden&amp;gt;
            &amp;lt;button class="upload-button button" id="uploadButton"&amp;gt;Upload Image&amp;lt;/button&amp;gt;
            &amp;lt;button class="link-button button" id="linkButton"&amp;gt;Paste Link&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="image-view" id="imageViewContainer"&amp;gt;
            &amp;lt;img src="" alt="" class="image" id="imageView" crossorigin="anonymous"&amp;gt;

            &amp;lt;button class="button" id="classifyButton"&amp;gt;What is in the image ?&amp;lt;/button&amp;gt;
            &amp;lt;h2 class="result" id="result"&amp;gt;&amp;lt;/h2&amp;gt;
        &amp;lt;/div&amp;gt;

    &amp;lt;/div&amp;gt;

    &amp;lt;script src="./script.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;

&lt;p&gt;Just some styling for our webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
    background-color: #000;
    color: #f0f8ff;
}

.main,
.loader-view {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    height: 100%;
    width: 100%;
}

.main {
    display: none;
}

.button {
    border: none;
    font-size: 16px;
    font-weight: 600;
    padding: 10px 15px;
    border-radius: 8px;
}

.upload-button {
    color: #f0f8ff;
    background: #ff7b00;
}

.link-button {
    color: #1f1f1f;
    background: #fdf8f4;
}

.upload-button:hover {
    background: #f0f8ff;
    color: #ff7b00;
}

.link-button:hover {
    color: #ff7b00;
}

.image-view {
    margin-top: 50px;
    width: 50vw;
    height: 60vh;
    display: none;
    flex-direction: column;
}

.image {
    max-width: 100%;
    max-height: 100%;
    border: solid #f0f8ff 6px;
    border-radius: 4px;
    margin-bottom: 5px;
}

.result {
    text-transform: capitalize;
    letter-spacing: 0.5px;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;

&lt;p&gt;Calling the &lt;code&gt;main&lt;/code&gt; function from &lt;code&gt;index.html&lt;/code&gt; when body loads.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function main() {
    const classifier = ml5.imageClassifier("MobileNet", modelLoaded);

    const uploadButton = document.getElementById("uploadButton");
    const linkButton = document.getElementById("linkButton");
    const classifyButton = document.getElementById("classifyButton");
    const selectImage = document.getElementById("selectImage");
    const imageViewContainer = document.getElementById("imageViewContainer");
    const imageView = document.getElementById("imageView");
    const result = document.getElementById("result");
    const loaderView = document.getElementById("loaderView");
    const mainView = document.getElementById("mainView");

    uploadButton.onclick = function (e) {
        selectImage.click();
    };

    classifyButton.onclick = function (e) {
        classify(imageView);
    };

    linkButton.onclick = function (e) {
        const link = prompt("Paste Image Link Here");
        if (link != null &amp;amp;&amp;amp; link != undefined) {
            imageView.src = link;
            imageViewContainer.style.display = "flex";
            result.innerText = "";
        }
    };

    selectImage.onchange = function () {
        if (this.files &amp;amp;&amp;amp; this.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                imageView.src = e.target.result;
                imageViewContainer.style.display = "flex";
                result.innerText = "";
            };
            reader.readAsDataURL(this.files[0]);
        }
    };

    function modelLoaded() {
        loaderView.style.display = "none";
        mainView.style.display = "flex";
    }

    function classify(img) {
        classifier.predict(img, function (err, results) {
            if (err) {
                return alert(err);
            } else {
                result.innerText = results[0].label;
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript-explanation"&gt;
  &lt;/a&gt;
  Javascript Explanation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const classifier = ml5.imageClassifier("MobileNet", modelLoaded);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;ml5.imageClassifier&lt;/code&gt; method is called to initialize the machine learning model.&lt;br&gt;
Passing two arguments to the method first is the &lt;code&gt;model&lt;/code&gt; which is &lt;code&gt;MobileNet&lt;/code&gt; and a callback &lt;code&gt;modelLoaded&lt;/code&gt; which will get invoked once the initialization is completed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;MobileNet is a term that describes a type of machine learning model architecture that has been optimized to run on platforms with limited computational power, such as applications on mobile or embedded devices. MobileNets have several use cases including image classification, object detection, and image segmentation. This particular MobileNet model was trained for Image Classification.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have some other choices too for the &lt;code&gt;model&lt;/code&gt; like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Darknet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DoodleNet&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You can use your own image classification model trained in Teachable Machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then we are getting some references to buttons and views of our HTML file to listen for events and manipulate content and CSS styling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;uploadButton.onclick = function (e) {
        selectImage.click();
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On clicking the &lt;code&gt;Upload Image&lt;/code&gt; button, it will click the image selector input element &lt;code&gt;selectImage&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    selectImage.onchange = function () {
        if (this.files &amp;amp;&amp;amp; this.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                imageView.src = e.target.result;
                imageViewContainer.style.display = "flex";
                result.innerText = "";
            };
            reader.readAsDataURL(this.files[0]);
        }
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the user selects the image, &lt;code&gt;selectImage.onchange&lt;/code&gt; listener will get invoked and it will set the image in &lt;code&gt;imageView&lt;/code&gt; src.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;linkButton.onclick = function (e) {
        const link = prompt("Paste Image Link Here");
        if (link != null &amp;amp;&amp;amp; link != undefined) {
            imageView.src = link;
            imageViewContainer.style.display = "flex";
            result.innerText = "";
        }
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On clicking the &lt;code&gt;Paste Link&lt;/code&gt; button, &lt;code&gt;linkButton.onclick&lt;/code&gt; listener will get invoked and it will ask the user for the &lt;strong&gt;image link&lt;/strong&gt; and if a link is provided, it will set the link in the &lt;code&gt;imageView&lt;/code&gt; src.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;classifyButton.onclick = function (e) {
        classify(imageView);
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On clicking the &lt;code&gt;What is in the image?&lt;/code&gt; button, &lt;code&gt;classifyButton.onclick&lt;/code&gt; listener will get invoked and it will call the &lt;code&gt;classify&lt;/code&gt; method, which is responsible for image classification. Will pass the image element reference i.e, &lt;code&gt;imageView&lt;/code&gt; to the &lt;code&gt;classify&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function modelLoaded() {
        loaderView.style.display = "none";
        mainView.style.display = "flex";
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method will get invoked when our model is initialized and it is manipulating some CSS style to hide the loader.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function classify(img) {
        classifier.predict(img, function (err, results) {
            if (err) {
                return alert(err);
            } else {
                result.innerText = results[0].label;
            }
        });
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is the important method that is calling the &lt;code&gt;predict&lt;/code&gt; method of &lt;code&gt;classifier&lt;/code&gt; object. The &lt;code&gt;predict&lt;/code&gt; method expects two arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;input&lt;/code&gt; which is a reference to the image element&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;callback&lt;/code&gt; function to handle results and error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On error, we are throwing it in an alert box.&lt;/p&gt;

&lt;p&gt;Accessing the result from the &lt;code&gt;results&lt;/code&gt; array, which contains multiple objects with &lt;code&gt;label&lt;/code&gt; and &lt;code&gt;confidence&lt;/code&gt; level. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gYgdcZWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qe7yzzinqcnyay6wacb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gYgdcZWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qe7yzzinqcnyay6wacb.png" alt="imgclassifier.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the files here: &lt;a href="https://github.com/bibekkakati/blogs-projects/tree/main/javascript/ml5js/image-classification"&gt;Github Repo&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Enjoyed?&lt;/strong&gt; Give it a thumbs-up.&lt;/p&gt;

&lt;p&gt;Thank you for reading | Feel free to &lt;a href="https://bibekkakati.me"&gt;connect&lt;/a&gt; 👋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>machinelearning</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Starting a programming blog? Don’t make this mistake 🚫</title>
      <author>Tuomo Kankaanpää</author>
      <pubDate>Tue, 04 May 2021 15:41:17 +0000</pubDate>
      <link>https://dev.to/tumee/starting-a-programming-blog-don-t-make-this-mistake-2g0a</link>
      <guid>https://dev.to/tumee/starting-a-programming-blog-don-t-make-this-mistake-2g0a</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/v3fIUN5tndI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=v3fIUN5tndI"&gt;📹 View on Youtube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having your own blog as a developer is a great idea. When writing articles you also learn in the process about the thing you are writing. It is also a good way to show a potential employer that you know your stuff.&lt;/p&gt;

&lt;p&gt;As a developer, the first instinct is to build your own blog by yourself and not to use a ready made blogging platform like Wordpress for example.&lt;/p&gt;

&lt;p&gt;This is very tempting and when I first started my blog, I had that same thought. If your goal is to build a successful blog and get good at blogging, that might not be a good idea though and here is why.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#most-important-thing-to-do-when-starting-out-blogging"&gt;
  &lt;/a&gt;
  Most important thing to do when starting out blogging
&lt;/h2&gt;

&lt;p&gt;When first starting out blogging, the most important thing in my opinion is to start writing articles. Period.&lt;/p&gt;

&lt;p&gt;As a beginner writer, you don't yet know how to write articles. So you need practice. More you write, the better your articles will get as you learn how to write. So it is crucial to write as much as you can.&lt;/p&gt;

&lt;p&gt;So what happens if you start coding your blog from scratch. All your energy and time is put into making the blog, instead of writing the articles on the blog. So you are actually not concentrating on getting better at blogging and getting your content out there. Plus you delay starting to write the actual articles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-started"&gt;
  &lt;/a&gt;
  How I started
&lt;/h2&gt;

&lt;p&gt;I have been writing my blog for over three years now. The hardest thing always is to start writing and the only way to get better at it is to do it more.&lt;/p&gt;

&lt;p&gt;When I first started I setup by blog on top of Wordpress. It was fast and easy and I didn't have to worry if the website was working or not. I could only concentrate on writing my articles.&lt;/p&gt;

&lt;p&gt;Now after blogging few years, I actually decided to update by blog and ended up coding it myself from scratch. But if I had started to code my own blog back when I started, I think I would not be here today.&lt;/p&gt;

&lt;p&gt;I am not saying that it is not possible to code your own blog and be successfull blogger. I just know that especially in the beginning just starting to write an article is hard, not to mention if you have to worry about the blog website functioning correctly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-start-blogging-as-a-beginner"&gt;
  &lt;/a&gt;
  How to start blogging as a beginner
&lt;/h2&gt;

&lt;p&gt;If I would start my own blog today, here is how I would do it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-use-easy-to-setup-platform"&gt;
  &lt;/a&gt;
  1. Use easy to setup platform
&lt;/h3&gt;

&lt;p&gt;I would build the blog on top of Wordpress. It is super popular for blogging and easy to setup. With Wordpress you can also add custom pages to your blog to work as a portfolio and you get your blog under your own domain.&lt;/p&gt;

&lt;p&gt;Wordpress has it downsides but in my opinion for beginner bloggers, the pros outweigh the cons and Wordpress is still a good starting point.&lt;/p&gt;

&lt;p&gt;One good option is to buy web hosting from &lt;a href="https://www.bluehost.com/track/tume/"&gt;Bluehost&lt;/a&gt; and setup Wordpress blog there. At the time of writing this, they offer free domain name for the 1st year, free ssl certificate for your domain and 1-Click Wordpress install with the starter plan. So hosting your Wordpress blog there is very easy to setup. This is what I used when I started out.&lt;/p&gt;

&lt;p&gt;Another option is to start writing posts on sites like &lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt;, &lt;a href="https://medium.com"&gt;Medium&lt;/a&gt; or &lt;a href="https://hashnode.com"&gt;Hashnode&lt;/a&gt;. This is a good option too because you don't need any setup and can start writing right away.&lt;/p&gt;

&lt;p&gt;The biggest downside with these sites is that you don't own your content. If you e.g. write your articles to Medium and Medium decides to shut down the site, delete or ban your articles, there is nothing you can do. So having your content on your own blog is always better in the long run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-write"&gt;
  &lt;/a&gt;
  2. Write
&lt;/h3&gt;

&lt;p&gt;I would write as much articles as I can.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;If you are new to blogging and your goal is to build a successfull blog and get good at writing articles, you should not re-invent the wheel when it comes to building the blog.&lt;/p&gt;

&lt;p&gt;Use one of the ready to use solutions (&lt;a href="https://www.bluehost.com/track/tume/"&gt;Bluehost&lt;/a&gt; + Wordpress, dev.to, Medium, Hashnode) and start writing content.&lt;/p&gt;

&lt;p&gt;You can always &lt;a href="https://tuomokankaanpaa.com/blog/how-i-converted-my-website-from-wordpress-to-jamstack"&gt;update your blog&lt;/a&gt; and build it from scratch in the future if you wish, but the most important thing is to get down the habit of writing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclosure: As an Bluehost affiliate partner I earn from qualifying purchases.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>blogging</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>You have never seen this modern website before.</title>
      <author>kunaal</author>
      <pubDate>Tue, 04 May 2021 14:57:40 +0000</pubDate>
      <link>https://dev.to/kunaal438/website-header-with-awesome-animation-that-you-never-seen-before-36e2</link>
      <guid>https://dev.to/kunaal438/website-header-with-awesome-animation-that-you-never-seen-before-36e2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/ecstatic-torvalds-ocj66"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I suggest you so see this effect in new window mode. And yeah its not responsive but you can make it. Click on the top right most button to view this in new window mode.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#lets-have-a-look-how-to-code-this"&gt;
  &lt;/a&gt;
  Let's have a look how to code this
&lt;/h2&gt;

&lt;p&gt;To create this website animation we use HTML, CSS, and few lines of Javascript so let's get started.&lt;/p&gt;

&lt;p&gt;First make a file &lt;code&gt;index.html&lt;/code&gt; and write HTML basic structure.&lt;br&gt;
Now in body tag we will create a div and give it a class mail. And inside of that mail div we make two span. And give them class. Like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mail"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line two"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now let's add some style to it. Make &lt;code&gt;style.css&lt;/code&gt; and link it to the &lt;code&gt;index.html&lt;/code&gt; file. And give some styling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;perspective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.mail&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;52%&lt;/span&gt; &lt;span class="m"&gt;48%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.line&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-31deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grow-line-one&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;grow-line-one&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.line.two&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grow-line-two&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;grow-line-two&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the styles above is just making our &lt;code&gt;.mail&lt;/code&gt; div in center and giving its dimensions &lt;code&gt;200 X 120&lt;/code&gt; with background color white. And we also style our &lt;code&gt;.line&lt;/code&gt; make first &lt;code&gt;span&lt;/code&gt; of width &lt;code&gt;120%&lt;/code&gt; and rotating that from bottom-left to top-right and we did same with other &lt;code&gt;span&lt;/code&gt; but different width.&lt;br&gt;
We also gave animation here where we made our spans initial width equal to 0 and with animation and animation-delay we are setting their width.&lt;/p&gt;

&lt;p&gt;Now we have to create our mails lid that will open. So go into your &lt;code&gt;index.html&lt;/code&gt; file and now make a span above your &lt;code&gt;.mail&lt;/code&gt; div and class it &lt;code&gt;.lid&lt;/code&gt; and make another span with class &lt;code&gt;.mail-backside&lt;/code&gt;. the structure should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"lid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mail-backside"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now style this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.lid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.mail-backside&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;52%&lt;/span&gt; &lt;span class="m"&gt;48%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;open-lid&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="m"&gt;1.5s&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.mail-backside&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;223&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;223&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;223&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;open-lid&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-180deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;180&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this we are done almost. we just made our lid opening animation.&lt;/p&gt;

&lt;p&gt;Now lets make our header&lt;/p&gt;

&lt;p&gt;For header create a &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; between our &lt;code&gt;.lid&lt;/code&gt; and &lt;code&gt;.mail&lt;/code&gt; element inside &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; create a div of class &lt;code&gt;.content&lt;/code&gt; and inside of that make an &lt;code&gt;h1&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; and give its content as you like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"heading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;amazing web &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;animation&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Ipsa, iste placeat provident minima obcaecati facere rerum omnis quae illum, deserunt aliquam fuga vitae quibusdam! Nobis repellat tempore voluptatum ipsam itaque!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before styling these we have to make an animation for our &lt;code&gt;.mail&lt;/code&gt; and &lt;code&gt;.lid&lt;/code&gt; element to get them down. For that write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;drop-down&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then make a file &lt;code&gt;app.js&lt;/code&gt; and link that to &lt;code&gt;index.html&lt;/code&gt;. Write this in &lt;code&gt;app.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.mail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.lid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mailBack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.mail-backside&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`drop-down 1s forwards 1`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;lid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`100%`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;lid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;mailBack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`drop-down 1s forwards 1`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so what we did in this js is that we select our &lt;code&gt;.mail, .lid, .mail-backside&lt;/code&gt; elements and give them animation to go down out off the screen after 2500ms.&lt;/p&gt;

&lt;p&gt;Now its time to style our header. So write this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.header&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.14&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('bg.png')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;roboto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale-up&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="m"&gt;3.2s&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;scale-up&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.14&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fade-in&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="m"&gt;4.2s&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;fade-in&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.heading&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And Now its done. We made this awesome looking animation. I hope you understand each and everything. If you find any mistake I made feel free to tell me out in the comments.&lt;/p&gt;

&lt;p&gt;If you want you can watch out its coding video - &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FyMXOq1Jyuo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>uiweekly</category>
      <category>ux</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Clean up my git (Snack Pack #5)</title>
      <author>Blake Campbell</author>
      <pubDate>Tue, 04 May 2021 14:43:54 +0000</pubDate>
      <link>https://dev.to/blaketweeted/clean-up-my-git-snack-pack-5-1f7n</link>
      <guid>https://dev.to/blaketweeted/clean-up-my-git-snack-pack-5-1f7n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#git-repo-maintenance"&gt;
  &lt;/a&gt;
  Git Repo maintenance
&lt;/h1&gt;

&lt;p&gt;If you've been working on any repo for an extended amount of time, you may have saved a million branches that have already been merged. It is time to clean all those old ones out. &lt;/p&gt;




&lt;p&gt;The commands we'll be using.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Removes references from branches that are no longer on the origin
git remote prune origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note this next part will depend on your main branch's name. If you haven't yet, then you should rename &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt;. See below for how to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Lists all the branches that have been merged into main and remove them
git branch --merged main | grep -v '^[ *]*main$' | xargs git branch -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#wrap-it-all-up"&gt;
  &lt;/a&gt;
  Wrap it all up.
&lt;/h2&gt;

&lt;p&gt;The last step is relatively easy. Combine it into your &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt;. I'm sure there's a Windows and Linux equivalent, but I'm using macOS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alias cleanUpMyGit="git remote prune origin ; git branch --merged master | grep -v '^[ *]*master$' | xargs git branch -d"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go ahead and restart your terminal, then try it out in a repo directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cleanUpMyGit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Afterward, you should see a list of the branches removed by the command. Happy Coding!&lt;/p&gt;




&lt;p&gt;References: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.git-tower.com/learn/git/faq/git-rename-master-to-main/"&gt;https://www.git-tower.com/learn/git/faq/git-rename-master-to-main/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/github/renaming"&gt;https://github.com/github/renaming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My snack pack reads are intended for a quick read without any fluff and provide actionable items.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>github</category>
      <category>git</category>
    </item>
    <item>
      <title>Dashbird makes observability cool!</title>
      <author>Taavi Rehemägi</author>
      <pubDate>Tue, 04 May 2021 14:43:18 +0000</pubDate>
      <link>https://dev.to/dashbird/dashbird-makes-observability-cool-2d6m</link>
      <guid>https://dev.to/dashbird/dashbird-makes-observability-cool-2d6m</guid>
      <description>&lt;p&gt;We're officially cool! Dashbird is extremely proud to be named as a &lt;strong&gt;Cool Vendor&lt;/strong&gt; by &lt;strong&gt;&lt;a href="https://www.gartner.com/"&gt;Gartner&lt;/a&gt;&lt;/strong&gt; in &lt;strong&gt;Monitoring, Observability, and Cloud Operations&lt;/strong&gt; in their &lt;strong&gt;28 April 2021&lt;/strong&gt; report on "&lt;a href="https://www.gartner.com/account/signin?method=initialize&amp;amp;TARGET=http%253A%252F%252Fwww.gartner.com%252Fdocument%252F4001056"&gt;Cool Vendors in Monitoring, Observability and Cloud Operations&lt;/a&gt;". &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-gartner-think-were-cool"&gt;
  &lt;/a&gt;
  Why Gartner think we're cool?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"Dashbird provides a &lt;strong&gt;novel approach to observability&lt;/strong&gt; for &lt;strong&gt;serverless applications that run inside an AWS environment&lt;/strong&gt;. Monitoring a serverless environment can be particularly &lt;strong&gt;complex&lt;/strong&gt; as it may involve thousands of separate microservices, and the tools that AWS provides are difficult to use at scale."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dashbird brings all your &lt;strong&gt;mission-critical AWS data onto one dashboard&lt;/strong&gt; and lets you know in &lt;strong&gt;seconds&lt;/strong&gt; what's going on in your application and &lt;strong&gt;alerts you immediately of errors and warnings&lt;/strong&gt;, and where exactly is the issue located, so you can jump in and fix it before anything starts affecting your customers. In fact, &lt;a href="https://dashbird.io/customers/onfleet/"&gt;Dashbird has helped Onfleet&lt;/a&gt; directly to prevent their &lt;strong&gt;customers from churning&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/customers/"&gt;Dashbird's customers&lt;/a&gt; include application developers, Site reliability engineers (SREs), enterprise architects, and DevOps and IT operations teams, in large enterprises and startups across various verticals, responsible for the &lt;strong&gt;performance of applications &lt;/strong&gt;hosted in a &lt;strong&gt;serverless environment&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Customers value Dashbird's &lt;strong&gt;easy-to-understand metrics dashboard&lt;/strong&gt; helping them save up to &lt;strong&gt;80% on their MTTD/R and debugging&lt;/strong&gt;, quick and easy 2-minute setup that &lt;strong&gt;doesn't require any code changes&lt;/strong&gt;, and the &lt;strong&gt;actionable recommendations&lt;/strong&gt; for improving their infrastructure &lt;strong&gt;in accordance with industry best practices&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;"&lt;strong&gt;Monitoring and operating large-scale serverless applications&lt;/strong&gt; introduces new &lt;strong&gt;challenges&lt;/strong&gt; for developers, architects, and SRE engineers that require special know-how and significant implementation. &lt;strong&gt;Our approach &lt;/strong&gt;of &lt;strong&gt;abstracting and automating monitoring&lt;/strong&gt; use cases and &lt;strong&gt;not requiring instrumentation&lt;/strong&gt; has proven i*&lt;em&gt;deal for serverless&lt;/em&gt;*" says Taavi Rehemägi, CEO at &lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-are-the-cool-things-dashbird-offers"&gt;
  &lt;/a&gt;
  So what are the cool things Dashbird offers?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lZQAsOZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-dashboard-new-1024x575.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lZQAsOZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-dashboard-new-1024x575.png" alt="dashbird serverless dashboard&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#endtoend-centralized-observability%C2%A0built-specifically-for-aws-and-serverless-systems"&gt;
  &lt;/a&gt;
  &lt;a href="https://dashbird.io/serverless-observability/"&gt;End-to-end centralized observability&lt;/a&gt; built specifically for AWS and serverless systems
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Purpose-built for serverless&lt;/strong&gt;, Dashbird collects monitoring data from AWS. Dashbird monitors multiple cloud components in &lt;strong&gt;AWS cloud&lt;/strong&gt;, such as Lambda functions, API Gateways, SQS queues, ECS containers, Kinesis, Step-Functions, and DynamoDB tables. &lt;strong&gt;Every datapoint&lt;/strong&gt; that exists in your cloud environment (logs, metrics, and traces), centralized under one roof. Dashbird makes it easy to &lt;strong&gt;visualize, search, query, and interrogate&lt;/strong&gt; all there is to know about your serverless application, from high level to a single transaction. Dashbird features a &lt;strong&gt;full-fledged log analytics&lt;/strong&gt; functionality that is powered by ElasticSearch. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2hCibNIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-observability-new-1024x576.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2hCibNIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-observability-new-1024x576.png" alt="dashbird serverless observability&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#realtime-automated-prebuilt-alarms%C2%A0and-analytics-for-all-your-metrics"&gt;
  &lt;/a&gt;
  &lt;a href="https://dashbird.io/failure-detection"&gt;Real-time automated prebuilt alarms&lt;/a&gt; and analytics for all your metrics
&lt;/h3&gt;

&lt;p&gt;Dashbird &lt;strong&gt;automatically detects errors, code exceptions, timeouts, cold starts, downstream service failures, and anomalies&lt;/strong&gt; from logs and metrics in real-time and &lt;strong&gt;alerts you immediately&lt;/strong&gt; when you should react to an incident via Slack, e-mail, SNS, and/or webhooks. You can easily set prebuilt and custom filters for any metric condition across your infrastructure -- all in one place -- in the Dashbird dashboard. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46Fu9yxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-alarms-new-1024x698.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46Fu9yxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-alarms-new-1024x698.png" alt="dashbird aws alarms"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wellarchitected-actionable-insights%C2%A0encourage-continuous-improvement-and-compliance-with-industry-best-practices"&gt;
  &lt;/a&gt;
  &lt;a href="https://dashbird.io/serverless-well-architected-reports/"&gt;Well-Architected actionable insights&lt;/a&gt; encourage continuous improvement and compliance with industry best practices
&lt;/h3&gt;

&lt;p&gt;Dashbird features &lt;strong&gt;over&lt;/strong&gt; &lt;strong&gt;100 complex insight checks&lt;/strong&gt; continuously scanning your entire serverless environment against the &lt;strong&gt;AWS Well-Architected best practices&lt;/strong&gt;. You can immediately see &lt;strong&gt;how well your infrastructure is architected against each of the five pillars&lt;/strong&gt; (cost optimization, security, performance, operational excellence, and reliability) on the progress bars.&lt;/p&gt;

&lt;p&gt;Dashbird will let you know &lt;strong&gt;which incidents are affecting your system health&lt;/strong&gt; in each pillar and provides you with step-by-step guides for remediation. No need learn the lengthy AWS white papers and go through manual system audits anymore!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EnGlGvKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-waf-new-1024x577.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EnGlGvKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-waf-new-1024x577.png" alt="dashbird aws well architected"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easy-set-up"&gt;
  &lt;/a&gt;
  Easy set up
&lt;/h3&gt;

&lt;p&gt;Dashbird requires &lt;strong&gt;no code changes&lt;/strong&gt; to your functions while still giving you end-to-end visibility. &lt;strong&gt;Setting up takes 2 minutes&lt;/strong&gt; and you run no risk of affecting your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-dashbird"&gt;
  &lt;/a&gt;
  About Dashbird:
&lt;/h2&gt;

&lt;p&gt;Built on three core pillars -- &lt;strong&gt;centralized observability, real-time automated alarms, and Well-Architected insights&lt;/strong&gt; -- Dashbird is a monitoring, debugging and intelligence platform designed to give developers the confidence to &lt;strong&gt;build, operate, improve, and scale&lt;/strong&gt; serverless applications on &lt;strong&gt;AWS environment&lt;/strong&gt; securely, fast and with ease. No more digging around in CloudWatch logs line by line and setting up alarms for hours (or weeks), enabling you to be more productive and focus on the important stuff -- developing your product and providing a seamless customer experience!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;The GARTNER COOL VENDOR badge is a trademark and service mark of Gartner, Inc. and/or its affiliates and is used herein with permission. All rights reserved. Gartner does not endorse any vendor, product or service depicted in its research publications and does not advise technology users to select only those vendors with the highest ratings or other designation. Gartner research publications consist of the opinions of Gartner's Research &amp;amp; Advisory organization and should not be construed as statements of fact. Gartner disclaims all warranties, expressed or implied, with respect to this research, including any warranties of merchantability or fitness for a particular purpose.&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Linked List Data Structure Using Javascript</title>
      <author>Nikhil Bobade </author>
      <pubDate>Tue, 04 May 2021 14:33:34 +0000</pubDate>
      <link>https://dev.to/nikhil27b/linked-list-data-structure-using-javascript-2n09</link>
      <guid>https://dev.to/nikhil27b/linked-list-data-structure-using-javascript-2n09</guid>
      <description>&lt;h1&gt;
  &lt;a href="#linked-list"&gt;
  &lt;/a&gt;
  Linked List
&lt;/h1&gt;

&lt;p&gt;A Linked List is a linear data structure. The Linked List consisting of a group of nodes that together represent a sequence.&lt;/p&gt;

&lt;p&gt;Linked List has behaved like each node contains a connection to another link or another node. also linked list is the most used data structure after the array.&lt;br&gt;
1.Insert&lt;br&gt;
2.Delete&lt;br&gt;
3.Search&lt;br&gt;
4.Null&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#insert-"&gt;
  &lt;/a&gt;
  Insert :
&lt;/h4&gt;

&lt;p&gt;The insert method is used for adding the data to the LinkedList.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#delete-"&gt;
  &lt;/a&gt;
  Delete :
&lt;/h4&gt;

&lt;p&gt;The delete is deleting the given node or element from the linked list.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#search-"&gt;
  &lt;/a&gt;
  Search :
&lt;/h4&gt;

&lt;p&gt;A search returns a given node on the linked list.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#null-"&gt;
  &lt;/a&gt;
  Null :
&lt;/h4&gt;

&lt;p&gt;if the next element is not having a data or node then this condition was true and return null.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxfMrCYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv4z8yoqfuhkgc4cl4t7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxfMrCYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv4z8yoqfuhkgc4cl4t7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how a linked list works the 1st is head and after I go for the next node or data if he doesn't get the next data then return null.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#linkedlist-example-using-javascript-"&gt;
  &lt;/a&gt;
  LinkedList example using Javascript :
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LinkedListNode&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LinkedList&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LinkedListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LinkedList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output-"&gt;
  &lt;/a&gt;
  Output :
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J8dp4sK7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbu8ycys7hn83qpxzwkt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8dp4sK7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbu8ycys7hn83qpxzwkt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to more support me then buy me a &lt;a href="https://www.buymeacoffee.com/nikhilbobade27"&gt;coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Why I decided to make a portfolio template an open source project (instead of selling it on ThemeForest)</title>
      <author>Gabriel Manussakis</author>
      <pubDate>Tue, 04 May 2021 14:12:59 +0000</pubDate>
      <link>https://dev.to/manussakis/why-i-decided-to-make-a-portfolio-template-an-open-source-project-instead-of-selling-it-on-themeforest-22da</link>
      <guid>https://dev.to/manussakis/why-i-decided-to-make-a-portfolio-template-an-open-source-project-instead-of-selling-it-on-themeforest-22da</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ciftkpH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd7uhz88huzmowqtnr0a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ciftkpH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd7uhz88huzmowqtnr0a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Leeneon is the name of my portfolio template that now is available on GitHub. The the initial idea was to sell it on ThemeForest and in this article I will let you know why I have changed my mind.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-brief-history"&gt;
  &lt;/a&gt;
  A brief history
&lt;/h2&gt;

&lt;p&gt;When I started designing Leeneon, my main goal was to create a product to sell on internet. The idea was to create a website template that had accessibility as its main differential. But throughout the process, I had a hard time looking for other accessible open source websites that I could learn from.&lt;/p&gt;

&lt;p&gt;When I finished the first version, I realized that I had developed the project that I would have liked to have had access to during my own template development.&lt;/p&gt;

&lt;p&gt;It was my turning point, so I decided that Leeneon would be more useful to dev community as an open source project rather than being sold.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-makes-leeneon-accessible-or-very-close-to-it"&gt;
  &lt;/a&gt;
  What makes Leeneon accessible (or very close to it)
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://www.w3.org/WAI/standards-guidelines/wcag/"&gt;WCAG&lt;/a&gt; is a document that contains all the instructions for creating accessible content on the web. This document is maintained by W3C, the organization that regulates web standards worldwide. Leeneon was developed to meet a lot of those standards.&lt;/p&gt;

&lt;p&gt;Check out some of the features implemented in Leeneon:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;HTML semantics -&lt;/strong&gt; Correct use of HTML 5 tags that provide meaning for its content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Color contrast&lt;/strong&gt; – All color combinations between text and background have a contrast of at least 4.5:1.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Keyboard navigation&lt;/strong&gt; – All functionalities are available from keyboard and the focus are always visible.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reduce motion&lt;/strong&gt; – Leeneon identifies user's system preferences to disable or enable animations.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dark and light theme&lt;/strong&gt; – Leeneon identifies user's system preferences to choose between dark or light themes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Responsive&lt;/strong&gt; – The website adjusts for all screen sizes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Zoom&lt;/strong&gt; – It supports up to 400% zoom without breaking the page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Right to left&lt;/strong&gt; – Both right-to-left and left-to-right versions are supported.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Form errors&lt;/strong&gt; – Contact form errors are clearly presented and guides the user on how to fix them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Images description&lt;/strong&gt; – Non-decorative images have alternative text.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;User has the control&lt;/strong&gt; – Although Leeneon adopts settings based on user's system preferences, an interactive panel is available for the user to manage preferences on their own.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#tests"&gt;
  &lt;/a&gt;
  Tests
&lt;/h3&gt;

&lt;p&gt;This is the result of the automated test powered by &lt;a href="https://web.dev/measure/"&gt;Web Dev Measure Tool&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uvcBTd4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uobzsa3rltmiuyrzbvah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uvcBTd4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uobzsa3rltmiuyrzbvah.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: Automated tests are important, but they are not a substitute for human tests.&lt;/p&gt;

&lt;p&gt;To make this article straight to the point I'm not going to explain all details involved in Leeneon's accessibility development. Let me know in the comments below if you would like to know more about it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#screenshots"&gt;
  &lt;/a&gt;
  Screenshots
&lt;/h2&gt;

&lt;p&gt;Client section in green color and dark mode:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ofe7yxYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ou7xjo1cakzye17263i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ofe7yxYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ou7xjo1cakzye17263i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Blog section in blue color and light mode:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PdUCW9PK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66e4z0uf5cxonhq6qik3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PdUCW9PK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66e4z0uf5cxonhq6qik3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Contact form errors alert in purple color and dark mode:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sfce3R51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdhlo5vlls63a0g59ics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sfce3R51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdhlo5vlls63a0g59ics.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;About section in right-to-left version, red color and light mode:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wHgqYLHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6iq5hflinwd45l9vvm2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wHgqYLHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6iq5hflinwd45l9vvm2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Accessibility preferences opened in orange color and dark mode:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n3QBt67c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ha3yh8aw30c6npbzs4bf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3QBt67c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ha3yh8aw30c6npbzs4bf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#can-you-use-leeneon"&gt;
  &lt;/a&gt;
  Can you use Leeneon?
&lt;/h2&gt;

&lt;p&gt;Of course you can! But first let me tell you something: Leeneon is an open source project that needs collaborations to be improved. If you find some bug don't forget to open an issue on GitHub. I will try to work on it as soon as possible.&lt;/p&gt;

&lt;p&gt;You can use Leeneon to publish either personal or commercial websites, just remember to keep the credit that are at the bottom of the template. The documentation are available in project's repository on GitHub.&lt;/p&gt;

&lt;p&gt;I want to be able to dedicate myself more and more to improve Leeneon's accessibility, but for that I would like to ask you for help: consider &lt;a href="https://www.buymeacoffee.com/manussakis"&gt;buying me a coffe&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Starting a project is the best way to learn new web development concepts and tools. The process of developing Leeneon was crucial to me in order to learn more about web accessibility.&lt;/p&gt;

&lt;p&gt;If this project is in any way useful for the growth of accessibility on the web, I will be very happy to have made a small contribution to this issue that impacts the lives of millions of people.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#demos"&gt;
  &lt;/a&gt;
  Demos
&lt;/h2&gt;

&lt;p&gt;Leeneon has two templates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leeneon.com.br/demos/"&gt;Default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leeneon.com.br/demos/fullscreen.html"&gt;Fullscreen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the project on GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Manussakis"&gt;
        Manussakis
      &lt;/a&gt; / &lt;a href="https://github.com/Manussakis/leeneon"&gt;
        leeneon
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Leeneon is a free portfolio template designed and developed to be accessible for as many users as possible.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Leeneon&lt;/h1&gt;
&lt;p&gt;The free accessible portfolio template.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://leeneon.com.br/demos/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7fcfe6acbdacc73353a5d3be5ce61b094ec75dad1fc7d9d1e22417c538bc44bf/68747470733a2f2f6c65656e656f6e2e636f6d2e62722f65787465726e616c2d696d616765732f6769746875622d636f7665722e706e67" alt="Leeneon"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are few accessible websites on the internet and even less accessible websites with open source. However, open source projects heavily contribute to the evolution of web development, and web accessibility can't be left out this progression.&lt;/p&gt;
&lt;p&gt;Leeneon is an open source project and it was born to contribute to the expansion of web accessibility. It is a free accessible portfolio template, ideal for resumes and for presenting creative works such as design projects, photography, illustration and more.&lt;/p&gt;
&lt;p&gt;If you desire to use Leeneon to publish your personal or commercial website, read the License section of this documentation before.&lt;/p&gt;
&lt;h2&gt;
Demos&lt;/h2&gt;
&lt;p&gt;Leeneon has two templates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leeneon.com.br/demos/" rel="nofollow"&gt;Default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leeneon.com.br/demos/fullscreen.html" rel="nofollow"&gt;Fullscreen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Why is Leeneon accessible?&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://www.w3.org/WAI/standards-guidelines/wcag/" rel="nofollow"&gt;WCAG&lt;/a&gt; is a document that contains all the instructions for creating accessible content on the web. This document is maintained by W3C, the organization that regulates web standards worldwide. Leeneon was developed to…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Manussakis/leeneon"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>a11y</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
