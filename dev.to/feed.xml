<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Python's Collections Module: Counter </title>
      <author>Kathan Vakharia</author>
      <pubDate>Sun, 13 Jun 2021 06:40:22 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/python-collections-module-counter-2gn</link>
      <guid>https://dev.to/kathanvakharia/python-collections-module-counter-2gn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;A Counter is a &lt;code&gt;dict&lt;/code&gt; subclass for counting &lt;strong&gt;hashable&lt;/strong&gt; objects → any object which is not mutable. &lt;/p&gt;

&lt;p&gt;It is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#To use it, ofcourse we need to first import it
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-counter"&gt;
  &lt;/a&gt;
  Using Counter
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;myList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;myString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"CodeBlooded"&lt;/span&gt;

&lt;span class="c1"&gt;# simply pass any iterable
# Counter(iterable) returns a Counter obj
&lt;/span&gt;&lt;span class="n"&gt;count1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;count2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#How does a Counter obj look?
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s"&gt;"""Output
Counter({1: 4, 2: 3, 'k': 2, 3: 2, 'a': 1})
Counter({'o': 3, 'd': 3, 'e': 2, 'C': 1, 'B': 1, 'l': 1})
""""
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;💡 As counter is a subclass of dictionary, it has all the methods of the dictionary. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-mostcommonn-endraw-method"&gt;
  &lt;/a&gt;
  &lt;code&gt;most_common(n)&lt;/code&gt; method
&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;most_common(n)&lt;/code&gt; returns a list of n most common objects along with their respective counts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;

&lt;span class="n"&gt;myList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;myString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"CodeBlooded"&lt;/span&gt;

&lt;span class="c1"&gt;# simply pass any iterable
# Counter(iterable) returns a Counter object
&lt;/span&gt;&lt;span class="n"&gt;count1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;count2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# If n is omitted or None, most_common()
# returns all elements in the counter.
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="s"&gt;"""Output
Counter({1: 4, 2: 3, 'k': 2, 3: 2, 'a': 1})
Counter({'o': 3, 'd': 3, 'e': 2, 'C': 1, 'B': 1, 'l': 1})
[(1, 4), (2, 3)]
[('o', 3), ('d', 3), ('e', 2)]
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#common-patterns-with-raw-counter-endraw-"&gt;
  &lt;/a&gt;
  Common Patterns with &lt;code&gt;Counter&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;For a given &lt;code&gt;Counter&lt;/code&gt; object &lt;code&gt;c&lt;/code&gt;, &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHXxJxrm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4a4meg6qwxaaogw16bw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHXxJxrm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4a4meg6qwxaaogw16bw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;💡 Feel free to fire up your ipython or python shell and try this commands out for better understanding :)&lt;/p&gt;

&lt;p&gt;Let's wrap up this post with a problem where Counter is very helpful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-most-frequent-word-using-counter-in-a-given-string"&gt;
  &lt;/a&gt;
  Finding most frequent word using Counter in a given string
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;

&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"string with repeated word Jello So what is Jello Who cares what is Jello anyways but Jello must be repeated Jello number of Jello times"&lt;/span&gt;

&lt;span class="c1"&gt;# You can use re.split() for more complex patterns!
&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;words_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Most Occurring word is"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;words_count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="s"&gt;"""Output
Most Occurring word is [('Jello', 6)]
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;❓ if you notice, while printing the Counter object - it doesn't maintain the &lt;strong&gt;order&lt;/strong&gt; of elements present in the iterable passed. Do you know why?&lt;/p&gt;

&lt;p&gt;Try googling or duckduckgoing! I will answer this question in next post 😉&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Python's Collection Module: Introduction</title>
      <author>Kathan Vakharia</author>
      <pubDate>Sun, 13 Jun 2021 06:12:17 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/python-s-collection-module-introduction-4c4b</link>
      <guid>https://dev.to/kathanvakharia/python-s-collection-module-introduction-4c4b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This &lt;a href="https://docs.python.org/3/library/collections.html"&gt;module&lt;/a&gt; implements specialized container datatypes providing alternatives to Python’s general purpose built-in containers, &lt;code&gt;dict, list, set, and tuple.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-types-does-it-offer"&gt;
  &lt;/a&gt;
  What types does it offer?
&lt;/h2&gt;

&lt;p&gt;Following are the  most commonly used special container types of collections module,&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;dict subclass for counting hashable objects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OrderedDict&lt;/td&gt;
&lt;td&gt;dict subclass that remembers the order entries were added&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;defaultdict&lt;/td&gt;
&lt;td&gt;dict subclass that calls a factory function to supply missing values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deque&lt;/td&gt;
&lt;td&gt;list-like container with fast appends and pops on either end&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;namedtuple&lt;/td&gt;
&lt;td&gt;factory function for creating tuple subclasses with named fields&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#and"&gt;
  &lt;/a&gt;
  And...
&lt;/h2&gt;

&lt;p&gt;We can also implement a custom container type like &lt;code&gt;OrderedCounter&lt;/code&gt; using the container types provided by collections module.&lt;/p&gt;

&lt;p&gt;The next series of posts  will dive deep into the above mentioned container types provided by collections module.&lt;/p&gt;

&lt;p&gt;Stay Tuned !&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>collections</category>
    </item>
    <item>
      <title>New Features of JavaScript 2021</title>
      <author>Animesh Dhanuk</author>
      <pubDate>Sun, 13 Jun 2021 06:09:35 +0000</pubDate>
      <link>https://dev.to/animeshdhanuk/new-features-of-javascript-2021-4p1k</link>
      <guid>https://dev.to/animeshdhanuk/new-features-of-javascript-2021-4p1k</guid>
      <description>&lt;p&gt;Nowadays we should know about some programming languages like C language, C++, CSS, JavaScript, Python, etc. Today we discuss new features of JavaScript that are very useful for programmers/ coders/ developers.&lt;/p&gt;

&lt;p&gt;JavaScript is the easiest programming language to learn for beginners. You can learn it from the tutorial by yourself.JavaScript is the front-end programming language.JavaScript gives some new features in 2021 that are very helpful for developers/ coders/ programmers. A few of the features of JavaScript given below: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-logical-operators"&gt;
  &lt;/a&gt;
  1. Logical Operators
&lt;/h2&gt;

&lt;p&gt;JavaScript have AND, OR, NOT operators but in new JavaScript updated three new logical operators are as follow: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-ampamp-operator"&gt;
  &lt;/a&gt;
  A. &amp;amp;&amp;amp;= Operator
&lt;/h2&gt;

&lt;p&gt;In the new logical operator if X variable has a specific value, then the variable should be assigned the value of variable Y. That's why we use a console.use(X), now the value of the variable of X is a change from 10 to 15.Let see the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    let X = 10;
    let Y = 15;
    X &amp;amp;&amp;amp;= Y;
    console.use(X);
    // Now, the output of variable X is 15.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#b-operator"&gt;
  &lt;/a&gt;
  B. ||= Operator
&lt;/h2&gt;

&lt;p&gt;This operator is the opposite of &amp;amp;&amp;amp;= operator. In this case value of variable X is not change. If variable X has the wrong value then variable X and variable Y will be equal. Let see the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let X = 10;
let Y = 15;
X &amp;amp;&amp;amp;= Y;
console.use(X);
// Now, the output of variable X is 10.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#c-operator"&gt;
  &lt;/a&gt;
  C. ??= Operator
&lt;/h2&gt;

&lt;p&gt;This operator is used to check the value of the variable is NULL or not. Let see the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    let X;
    let Y = 15;
    X ??= 10;
    console.use(X);
    // Now, the output of variable X is 10.

Logic of this operator:
    if(X == NULL ||  X == undefined){
    X = 10
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-replaceall-method-using-string"&gt;
  &lt;/a&gt;
  2. replaceAll method using String
&lt;/h2&gt;

&lt;p&gt;We all use replaceAll method using string. The new JavaScript replace method to have a limitation to change the word in a string. It changes only one word at a time.If you want to replace all words at a time you can use the regular expression. Now let see the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// with regex
let str = "Hello World!, Hello Their;"
console.log(str.replace(/Hello/g, "Hii"));
// Output will be "Hii World!, Hii Their;"

// without regex
let str = "Hello World!, Hello Their;"
console.log(str.replace('Hello', 'Hii'));
// output will be"Hii World!, Hello Their;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-using-underscores-for-integers-as-a-separator"&gt;
  &lt;/a&gt;
  3. Using underscores for integers as a separator
&lt;/h2&gt;

&lt;p&gt;Sometimes Integers are used as a data type in a string and array. It's very difficult to find out the perfect number of elements that are in million or billion.&lt;/p&gt;

&lt;p&gt;But now in the latest JavaScript, we can easily find the number with the help of underscores(_). We can use underscores as separators in the integer. Let see the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    let number = 1_000_000; // one million
    console.log(number);
    // output will be 1000000(the number will remain an integer)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-promiseany"&gt;
  &lt;/a&gt;
  4. Promise.any()
&lt;/h2&gt;

&lt;p&gt;Promise.any() is a new function in JavaScript.Promise.any() takes an iterable of Promise objects and, as soon as one of the promises in the iterable fulfills, returns a single promise that resolves with the value from that promise. If no promises in the iterable fulfill, then the returned promise is rejected with an AggregateError, a new subclass of Error that groups together individual errors. This method is opposite from promis.all(). Let see the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        const promise1 = Promise.reject(0);
        const promise2 = new Promise((resolve) =&amp;gt; setTimeout(resolve, 25, 'Even'));
        const promise3 = new Promise((resolve) =&amp;gt; setTimeout(resolve, 30, 'Odd'));
        const promises = [promise1, promise2, promise3];
        Promise.any(promises).then((value) =&amp;gt; console.log(value));
        // output will be "Even" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/05/new-features-of-javascript-2021.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to use Open Graph</title>
      <author>Kritebh Lagan Bibhakar</author>
      <pubDate>Sun, 13 Jun 2021 05:51:56 +0000</pubDate>
      <link>https://dev.to/kritebh/how-to-use-open-graph-2a1h</link>
      <guid>https://dev.to/kritebh/how-to-use-open-graph-2a1h</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tKV4sRSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a170echpghkj0p67izy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tKV4sRSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a170echpghkj0p67izy.png" alt="Open Graph Tag Comparison"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now tell me which one more likely to be clicked by a normal user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/2Wf4evHz9Yd7Y8mPNR/giphy-downsized.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2Wf4evHz9Yd7Y8mPNR/giphy-downsized.gif" alt="One"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First Link, but WHY ??&lt;/p&gt;

&lt;p&gt;Because at first glance I got what's in that link and it is more appealing than the second one.&lt;/p&gt;

&lt;p&gt;Open graph was originally developed by Facebook and now it is used by Twitter, Pinterest and LinkedIn.&lt;/p&gt;

&lt;p&gt;The benefit of Open Graph is simple, it converts any webpage into a social rich object which becomes more attractive on Social Media upon sharing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-graph-meta-tag"&gt;
  &lt;/a&gt;
  Open Graph Meta Tag
&lt;/h3&gt;

&lt;p&gt;Implementing Open Graph is very simple, You just need to write some meta tag in the head section of an HTML document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Open Graph Uses"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"article"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"http://example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://ogp.me/logo.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"image/png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:width"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:height"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:alt"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"The Open Graph logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"The Open Graph protocol enables any web page to become a rich object in a social graph."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Open Graph&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the meta property with "og" is the Open Graph Tag.&lt;/p&gt;

&lt;p&gt;There are different types of Open Graph Meta Tag which you can use as per your requirement.&lt;/p&gt;

&lt;p&gt;Some of the most commonly used meta tags are - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;og:title&lt;/li&gt;
&lt;li&gt;og:image&lt;/li&gt;
&lt;li&gt;og:url&lt;/li&gt;
&lt;li&gt;og:type&lt;/li&gt;
&lt;li&gt;og:description&lt;/li&gt;
&lt;li&gt;og:locale&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whole List of Tags - &lt;a href="https://ogp.me/"&gt;Open Graph Tags&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#validate-the-tags"&gt;
  &lt;/a&gt;
  Validate the Tags
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.facebook.com/tools/debug/"&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cards-dev.twitter.com/validator"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.pinterest.com/tools/url-debugger/"&gt;Pinterest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if you have any suggestions or feedback let me know in the comment.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>programming</category>
    </item>
    <item>
      <title>DEV COMMUNITY BADGE</title>
      <author>Ammar Mukadam</author>
      <pubDate>Sun, 13 Jun 2021 05:35:38 +0000</pubDate>
      <link>https://dev.to/ammarmukadam/dev-community-badge-29n4</link>
      <guid>https://dev.to/ammarmukadam/dev-community-badge-29n4</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/ammarmukadam"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bQ9x1qu_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2fltix0v2e0sb.cloudfront.net/dev-badge.svg" alt="Ammar Mukadam's DEV Community Profile"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>security</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Back to Basic: Should we use Rem, Em or Pixel?</title>
      <author>Theodorus Clarence</author>
      <pubDate>Sun, 13 Jun 2021 05:05:59 +0000</pubDate>
      <link>https://dev.to/theodorusclarence/back-to-basic-should-we-use-rem-em-or-pixel-1hd0</link>
      <guid>https://dev.to/theodorusclarence/back-to-basic-should-we-use-rem-em-or-pixel-1hd0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Using Rem and Em units is better than using px.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we use px, it means that we hardcode the font-size to all of the users. The user can't change the value whatsoever. This actually troubles the user that wants to have a bigger font-size from the default &lt;code&gt;16px&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-rem-works"&gt;
  &lt;/a&gt;
  How do rem works?
&lt;/h2&gt;

&lt;p&gt;Rem and Em is a relative unit that many developers use to preserve accessibility.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Rem (root em) stands for "root element's font-size"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usually, the default root font-size is &lt;code&gt;16px&lt;/code&gt;. So, if we see a font-size that is 1rem, we are looking at 16px&lt;/p&gt;

&lt;p&gt;Because Rem means root element's font-size, we can also override the default value by using CSS like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we changed the root font-size, now &lt;code&gt;1rem = 20px&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-if-we-want-to-use-value-other-than-16px"&gt;
  &lt;/a&gt;
  What if we want to use value other than 16px?
&lt;/h3&gt;

&lt;p&gt;We can get the rem value of a pixels by dividing it with 16px. For example, if we want to use a font-size of 20px, we will write &lt;code&gt;font-size: 1.25rem&lt;/code&gt;. Which is 20/16.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-its-so-annoying-"&gt;
  &lt;/a&gt;
  But it's so annoying ?!
&lt;/h3&gt;

&lt;p&gt;Yep, using rem will make the development process longer because we need to calculate the rem value. But this gives some freedom to the user, and we are not messing with the accessibility.&lt;/p&gt;

&lt;p&gt;They can change the font-size like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OUVToTBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siei13f4x98q0nxpzgun.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OUVToTBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siei13f4x98q0nxpzgun.gif" alt="resize-rem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-em-works"&gt;
  &lt;/a&gt;
  How do em works?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Em stands for "parent element's font-size"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because css is &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance"&gt;cascading and inheritable&lt;/a&gt;, em will inherit font-size value from the parent element. For example, we have a parent div, and p tag inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;hi&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;8px&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;??px&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because &lt;code&gt;p&lt;/code&gt; inherit the parent element's font-size, so &lt;code&gt;1em = 8px&lt;/code&gt;. This means, that the &lt;code&gt;p&lt;/code&gt; will have &lt;code&gt;font-size: 8px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That kind of confusing right? That's why using &lt;strong&gt;em for font-size is not recommended&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Always use REM for font-size to be consistent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#where-can-we-use-em-unit"&gt;
  &lt;/a&gt;
  Where can we use em unit?
&lt;/h3&gt;

&lt;p&gt;Because of the inheritable, em unit will be helpful for &lt;strong&gt;padding&lt;/strong&gt; and *&lt;em&gt;margin&lt;/em&gt;. By using em, we can make the padding and margin scale proportionately&lt;/p&gt;

&lt;p&gt;For example, we are making a button. The button can have different font-sizes in mobile and desktop view. We can see the difference between &lt;strong&gt;rem&lt;/strong&gt; and &lt;strong&gt;em&lt;/strong&gt; on this codepen:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/theodorus/embed/OJbwPow?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As we can see, by using &lt;strong&gt;em&lt;/strong&gt; the padding stays proportionate to the scaling of font-size. Whereas &lt;strong&gt;rem&lt;/strong&gt; has the same padding value on any font-sizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-we-really-cant-use-px-anymore"&gt;
  &lt;/a&gt;
  Do we really can't use px anymore?
&lt;/h2&gt;

&lt;p&gt;For me, usage of rem and em will be very good on the elements that are crucial like font-size, padding, and margin. But, when giving out border-width, I do still use px value because the value we give is so small that it is almost not noticeable if we change the root font-size.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;There you go. Try to always use rem for font-size. And utilize the benefit of em for the proportionate padding if you need to.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally posted on &lt;a href="https://theodorusclarence.com/?ref=devto"&gt;my personal site&lt;/a&gt;, find more &lt;a href="https://theodorusclarence.com/blog?ref=devto"&gt;blog posts&lt;/a&gt; and &lt;a href="https://theodorusclarence.com/library?ref=devto"&gt;code snippets library&lt;/a&gt; I put up for easy access on my site 🚀&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Software development through Kanban</title>
      <author>Menard Maranan</author>
      <pubDate>Sun, 13 Jun 2021 04:51:22 +0000</pubDate>
      <link>https://dev.to/menard_codes/software-development-through-kanban-28d0</link>
      <guid>https://dev.to/menard_codes/software-development-through-kanban-28d0</guid>
      <description>&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#terms-used"&gt;
  &lt;/a&gt;
  Terms used:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Kanban&lt;/strong&gt; - a workflow management method for defining, managing, and improving services that deliver knowledge work. It aims to help you visualize your work, maximize efficiency, and improve continuously. &lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Backlog&lt;/strong&gt; - an accumulation of uncompleted work that needs to be dealt with&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Agile&lt;/strong&gt; - In software development, agile practices involve discovering requirements and developing solutions through the collaborative effort of self-organizing and cross-functional teams and their customer/end user. &lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scrum&lt;/strong&gt; - An agile mindset for developing, delivering, and sustaining complex products,mostly defined by sprints and increments. &lt;sup id="fnref3"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#kanban-in-software-development"&gt;
  &lt;/a&gt;
  Kanban (in software development)
&lt;/h2&gt;

&lt;p&gt;Kanban is a flavor of Agile methodology as an approach to build software.&lt;/p&gt;

&lt;p&gt;This approach have many similarities and overlaps to another popular agile approach to software development called &lt;a href="https://dev.to/menard_codes/a-quick-guide-about-scrum-5485"&gt;Scrum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a nutshell, you break down a project into multiple software requirements which then becomes the product backlog of the Kanban board. The team then plans how to move the backlog into tasks under &lt;strong&gt;To-Do&lt;/strong&gt; column. That's when the team will work on the task until it's defined as &lt;strong&gt;Done&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planning"&gt;
  &lt;/a&gt;
  Planning
&lt;/h2&gt;

&lt;p&gt;Kanban is less strict compared to Scrum, because in Scrum, meetings are fixed on the schedule (like the daily scrum, sprint planning, sprint retrospective, etc.). Meanwhile, in kanban, meetings can be held whenever there's capacity, or held meetings in demand, and there can also be meetings on planning for example.&lt;/p&gt;

&lt;p&gt;During the meetings, the team analyzes the backlog and plan the &lt;strong&gt;"To-Do"&lt;/strong&gt; and moves tasks here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cycle-time-and-lead-time"&gt;
  &lt;/a&gt;
  Cycle time and Lead time
&lt;/h2&gt;

&lt;p&gt;In Kanban, we have &lt;strong&gt;Cycle Time&lt;/strong&gt; which measures how long does it take for a task to move from &lt;strong&gt;To-Do status&lt;/strong&gt; to &lt;strong&gt;Done&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is similar to &lt;strong&gt;Velocity&lt;/strong&gt; in Scrum.&lt;/p&gt;

&lt;p&gt;This metric tells how efficient a team is on their work. A &lt;em&gt;lower cycle time&lt;/em&gt; tells that the team can finish tasks in a shorter period of time, reflecting their productivity is high.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kanban-board"&gt;
  &lt;/a&gt;
  Kanban Board
&lt;/h2&gt;

&lt;p&gt;The kanban board is perhaps the core of this idea, so to speak. This board is a nice visual representation of the progress of a project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZauYou7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zotn71rgy3r1e6fxhji3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZauYou7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zotn71rgy3r1e6fxhji3.jpg" alt="Kanban Board"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Normally, the kanban board consists of the &lt;strong&gt;Backlog&lt;/strong&gt;, the &lt;strong&gt;To-Do&lt;/strong&gt;, &lt;strong&gt;In-progress&lt;/strong&gt;, and &lt;strong&gt;Done&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Some teams prefer to add or modify the columns depending on their needs, even mixing it with scrum, since it's very similar to the scrum board.&lt;/p&gt;

&lt;p&gt;You might find there columns for blockers, to-verify or to-test, rejected, etc.&lt;/p&gt;

&lt;p&gt;Often, the top priority tasks like those involved directly in the business are placed on top of the board.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limits"&gt;
  &lt;/a&gt;
  Limits
&lt;/h3&gt;

&lt;p&gt;On a Kanban board, teams set limits to columns on the board, such as the &lt;em&gt;Todo&lt;/em&gt; column or &lt;em&gt;To-test&lt;/em&gt; column.&lt;/p&gt;

&lt;p&gt;This is a little different to Scrum where the limit is set for the entire scrum board rather than per column.&lt;/p&gt;

&lt;p&gt;Such limits are placed to meet the team's cycle time, and to also figure out which process gives them a bottleneck where the team needs to discuss how to clean it up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;Kanban is a great way to manage your projects, and can also be applicable to other areas outside software development.&lt;/p&gt;

&lt;p&gt;Developers can boost their productivity by dividing the problems into isolated and independent chunks of tasks, while also understanding the progress of their work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-link"&gt;
  &lt;/a&gt;
  My Link:
&lt;/h2&gt;

&lt;p&gt;Follow me on twitter!&lt;br&gt;
&lt;a href="https://twitter.com/menard_codes"&gt;@menard_codes&lt;/a&gt;&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://kanbanize.com/kanban-resources/getting-started/what-is-kanban"&gt;Kanbanize&lt;/a&gt; &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Agile_software_development"&gt;Agile software development - Wikipedia&lt;/a&gt; &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Scrum_(software_development)"&gt;Scrum - Wikipedia&lt;/a&gt; &lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>agile</category>
      <category>webdev</category>
      <category>kanban</category>
      <category>softwaredevelopment</category>
    </item>
    <item>
      <title>Steps to Create a Mind Blowing (🤯) Portfolio</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 13 Jun 2021 03:46:34 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/steps-to-create-a-mind-blowing-portfolio-4562</link>
      <guid>https://dev.to/ruppysuppy/steps-to-create-a-mind-blowing-portfolio-4562</guid>
      <description>&lt;p&gt;If you have a desire to build your &lt;em&gt;personal brand&lt;/em&gt;, then a website that can promote your work is a must. &lt;strong&gt;Personal Portfolio&lt;/strong&gt; is the go-to place to list out your &lt;em&gt;experience&lt;/em&gt;, &lt;em&gt;achievements&lt;/em&gt;, and any other relevant information. This article will show you the steps to create an amazing portfolio that leaves the viewers spellbound. I would also be sharing the things I discovered along the way of building my own &lt;a href="https://tapajyoti-bose.vercel.app/"&gt;portfolio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5wopylc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cr6ocq4videj46wyssr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5wopylc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cr6ocq4videj46wyssr.PNG" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-design"&gt;
  &lt;/a&gt;
  1. Design
&lt;/h1&gt;

&lt;p&gt;It is definitely a good idea to keep a design (at least a rough one) handy. It is far easier to make changes to a design than revamping an entire website. &lt;a href="https://www.adobe.com/in/products/xd.html"&gt;&lt;strong&gt;Adobe XD&lt;/strong&gt;&lt;/a&gt; or &lt;a href="https://www.figma.com/"&gt;&lt;strong&gt;Figma&lt;/strong&gt;&lt;/a&gt; are the best tools for this purpose. &lt;strong&gt;Figma&lt;/strong&gt; has a free tier for its services and &lt;strong&gt;XD&lt;/strong&gt; is free for students.&lt;/p&gt;

&lt;p&gt;Feel free to look at other people's portfolios and templates for inspiration, but don't copy them. Modify &amp;amp; improvise them to suit your own style.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1NqF3z5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uduxcg14144x0ygzermc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1NqF3z5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uduxcg14144x0ygzermc.PNG" alt="Rough Design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-things-to-list-out-on-the-website"&gt;
  &lt;/a&gt;
  2. Things to List out on the Website
&lt;/h1&gt;

&lt;p&gt;Your portfolio is the perfect place for some &lt;strong&gt;shameless self-promotion&lt;/strong&gt;, so don't shy away from mentioning any project, &lt;em&gt;experience&lt;/em&gt;, &lt;em&gt;achievements&lt;/em&gt;, &lt;em&gt;blogs&lt;/em&gt; or any other relevant details about you.&lt;/p&gt;

&lt;p&gt;If you are just starting out, it is a good idea to build out a couple of projects before diving into building a portfolio, or else it will definitely look empty just like my &lt;a href="https://tapajyoti-portfolio.herokuapp.com/"&gt;first portfolio&lt;/a&gt; - which is just a template filled up with my details (looking at this website now makes me cringe).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-what-technology-should-i-use"&gt;
  &lt;/a&gt;
  3. What Technology should I use?
&lt;/h1&gt;

&lt;p&gt;Everyone has their own choice of technology. So use any technology you are comfortable using. The target is &lt;em&gt;smooth&lt;/em&gt; and &lt;em&gt;engaging&lt;/em&gt; &lt;strong&gt;end-user experience&lt;/strong&gt;, people using the website will not be bothered about the technology you build your application with.&lt;/p&gt;

&lt;p&gt;But I definitely would give you a suggestion: if you want your website to be indexed by search engines and plan on building a &lt;strong&gt;Single Page App&lt;/strong&gt; (&lt;code&gt;SPA&lt;/code&gt;), it is a good idea to create a static site using frameworks like &lt;strong&gt;Next.js&lt;/strong&gt;. Usually, &lt;code&gt;SPA&lt;/code&gt; performs poorly at &lt;strong&gt;Search Engine Optimizations&lt;/strong&gt; leading to poor ranking on &lt;strong&gt;Google&lt;/strong&gt; &amp;amp; other search engines.&lt;/p&gt;

&lt;p&gt;The last thing you want to do is having to revamp the complete website just because your site is not ranked well by &lt;strong&gt;Google&lt;/strong&gt; like I did to bring my website to &lt;em&gt;page 1&lt;/em&gt; from &lt;em&gt;page 4&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NXwNsc-j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ust78g3fc9ibimbjxeru.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NXwNsc-j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ust78g3fc9ibimbjxeru.png" alt="Search Results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-developing-the-website"&gt;
  &lt;/a&gt;
  4. Developing the Website
&lt;/h1&gt;

&lt;p&gt;Now it is finally the time to develop the website. This is the time to bring out your inner artistic persona and actually improvise and implement the design you made in &lt;em&gt;step 1&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Bonus Tip: Add micro-interactions particularly &lt;em&gt;hover effects&lt;/em&gt; to make your website more engaging.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-hosting-the-app"&gt;
  &lt;/a&gt;
  5. Hosting the app
&lt;/h1&gt;

&lt;p&gt;There are hundreds of hosting service providers available, my personal recommendations are &lt;a href="https://firebase.google.com/"&gt;&lt;strong&gt;Firebase&lt;/strong&gt;&lt;/a&gt; or &lt;a href="https://vercel.com/"&gt;&lt;strong&gt;Vercel&lt;/strong&gt;&lt;/a&gt; for simplified hosting as well as getting a professional domain free of cost (&lt;code&gt;&amp;lt;app-name&amp;gt;.web.app&lt;/code&gt; for &lt;strong&gt;Firebase&lt;/strong&gt; and &lt;code&gt;&amp;lt;app-name&amp;gt;.vercel.app&lt;/code&gt; for &lt;strong&gt;Vercel&lt;/strong&gt;).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-search-optimizations"&gt;
  &lt;/a&gt;
  6. Search Optimizations
&lt;/h1&gt;

&lt;p&gt;Now that the website is ready, it's time for it to be listed by Search Engines. Submit your website details at &lt;a href="https://search.google.com/search-console"&gt;&lt;strong&gt;Google Search Console&lt;/strong&gt;&lt;/a&gt;. You can generate a &lt;code&gt;sitemap&lt;/code&gt; for your website from sites like &lt;a href="https://www.xml-sitemaps.com/"&gt;&lt;strong&gt;XML Sitemaps&lt;/strong&gt;&lt;/a&gt; which will be required by &lt;strong&gt;Google&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can skip this step if you don't want your website to be visible on &lt;strong&gt;Google Search&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-network-with-other-developers"&gt;
  &lt;/a&gt;
  7. Network with other developers
&lt;/h1&gt;

&lt;p&gt;You might be wondering &lt;em&gt;"How will networking with other developers help me create a portfolio?"&lt;/em&gt; Let me enlighten you. &lt;/p&gt;

&lt;p&gt;I met this amazing guy, &lt;a href="https://dev.to/itsnitinr"&gt;Nitin Ranganath&lt;/a&gt; from whom I took the idea for the circle in and out animation for the dark mode (only for desktop). He also helped me a lot in incorporating this feature.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---0V7vZHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2deev0i5ptgyuscj85km.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---0V7vZHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2deev0i5ptgyuscj85km.gif" alt="Dark Mode Toggle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Always ask for help if you need it and don't hold back from helping others in their journey as well :)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Hopefully, this article gave you an idea of the steps involved in creating a portfolio website and streamline the things I had to learn through trial and error, and avoid some silly pitfalls.&lt;/p&gt;

&lt;p&gt;Don't be discouraged if the first version of your portfolio doesn't turn out as you wanted it to. Keep making tiny tweaks and improvements and over time, you will develop a jaw-dropping portfolio.&lt;/p&gt;

&lt;p&gt;Now it is your turn to stun the world with your outstanding portfolio website. Best of luck in your endeavor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w_zzxv9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pn5ga5oud0109544mu1x.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w_zzxv9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pn5ga5oud0109544mu1x.PNG" alt="Best of Luck"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Did I miss something? Share your thoughts in the comments below 👇&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Want to work together? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a student &amp;amp; freelancer who will soon start off as a Digital Nomad as soon as I graduate. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for weekly new tidbits on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect to me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>ux</category>
      <category>ui</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>What is CLI?</title>
      <author>ZakiMax</author>
      <pubDate>Sun, 13 Jun 2021 03:15:29 +0000</pubDate>
      <link>https://dev.to/zakimax/what-is-cli-5c0</link>
      <guid>https://dev.to/zakimax/what-is-cli-5c0</guid>
      <description>&lt;p&gt;On working, there're something I didn't understand "CLI".&lt;/p&gt;

&lt;p&gt;I'was searching for this Answer.&lt;/p&gt;

&lt;p&gt;The Answer I found is stand for Command Line Interface.&lt;/p&gt;

&lt;p&gt;But I'm not sure.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Save your Django models using update_fields for better performance</title>
      <author>CH S Sankalp jonna</author>
      <pubDate>Sun, 13 Jun 2021 03:11:57 +0000</pubDate>
      <link>https://dev.to/sankalpjonna/save-your-django-models-using-updatefields-for-better-performance-50ig</link>
      <guid>https://dev.to/sankalpjonna/save-your-django-models-using-updatefields-for-better-performance-50ig</guid>
      <description>&lt;p&gt;The Django ORM is designed to turn the rows of your database tables into objects that can then conform to object oriented principles. This makes it very easy to create, update and delete entries from your database.&lt;/p&gt;

&lt;p&gt;However, there are certain advantages to using raw queries instead of an ORM. For instance when you update a row in your table, you might want to update only a subset of the columns in that row and not all of the columns.&lt;/p&gt;

&lt;p&gt;Saving a Django model object updates all your columns every single time you call a save() method. To prevent this from happening you must be explicit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-save-does-internally"&gt;
  &lt;/a&gt;
  What save() does internally
&lt;/h3&gt;

&lt;p&gt;Consider a Django model called Record which has the following fields:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.db import models

class Record(models.Model):
  # id will be created automatically
  name = models.CharField(max_length=255)
  created_at = models.DateTimeField(auto_now_add=True)
  is_deleted = models.BooleanField(default=False)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you would like to update the name of a record you might do something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; record = Record.objects.get(id=1)
&amp;gt;&amp;gt;&amp;gt; record.name = "new record name"
&amp;gt;&amp;gt;&amp;gt; record.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you turn on logs in the underlying database that you are using which in my case is Postgres, the query that actually runs is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UPDATE "record"
SET    "name" = 'new record name',
       "created_at" = '2021-06-12T15:09:05.019020+00:00' :: timestamptz,
       "is_deleted" = FALSE
WHERE  ""id" = 1 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may not seem like a big deal, but what if your model consisted of 20 fields and you run a save() operation on it very frequently? &lt;/p&gt;

&lt;p&gt;At a certain scale the database query that updates all of your columns every time you call save() can start causing you some unnecessary overhead. &lt;/p&gt;

&lt;p&gt;Why is the overhead unnecessary? Because it can be prevented with a simple tweak.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-updatefields-in-save"&gt;
  &lt;/a&gt;
  Use update_fields in save()
&lt;/h3&gt;

&lt;p&gt;If you would like to explicitly mention only those columns that you want to be updated, you can do so using the update_fields parameter while calling the save() method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; record = Record.objects.get(id=1)
&amp;gt;&amp;gt;&amp;gt; record.name = "new record name"
&amp;gt;&amp;gt;&amp;gt; record.save(update_fields=['name'])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The underlying query now becomes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UPDATE "record"
SET    "name" = 'new record name'
WHERE  "record"."id" = 1 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also choose to update multiple columns by passing more field names in the update_fields list. &lt;/p&gt;

&lt;p&gt;This is clearly a more efficient way to run your queries and will save you some database overhead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h3&gt;

&lt;p&gt;If you use the save() method with the intention of updating some specific columns in your database row, explicitly mention those fields by using the update_fields parameter and calling the save() method like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;obj.save(update_fields=['field_1', 'field_2'])&lt;/strong&gt; as opposed to just &lt;strong&gt;obj.save()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This will save you some database overhead by making the underlying query more efficient.&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
    </item>
    <item>
      <title>Top courses to learn MERN.</title>
      <author>Amritanshu Dev Rawat</author>
      <pubDate>Sun, 13 Jun 2021 02:45:57 +0000</pubDate>
      <link>https://dev.to/amritanshu/top-courses-to-learn-mern-2i2g</link>
      <guid>https://dev.to/amritanshu/top-courses-to-learn-mern-2i2g</guid>
      <description>&lt;p&gt;MERN stands for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MongoDB -&amp;gt; NoSQL Database&lt;/li&gt;
&lt;li&gt;Express.js -&amp;gt; Web Framework for Node&lt;/li&gt;
&lt;li&gt;React.js -&amp;gt; JavaScript Library For UI&lt;/li&gt;
&lt;li&gt;Node.js -&amp;gt; Runtime environment to execute JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Paid Courses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/course/mern-stack-front-to-back/"&gt;https://www.udemy.com/course/mern-stack-front-to-back/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lHchbIw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vqv4m2shfxohht98vit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lHchbIw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vqv4m2shfxohht98vit.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/course/react-nodejs-express-mongodb-the-mern-fullstack-guide/"&gt;https://www.udemy.com/course/react-nodejs-express-mongodb-the-mern-fullstack-guide/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RqsLajuS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stnqo319t3lp82cpwlah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RqsLajuS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stnqo319t3lp82cpwlah.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.coursera.org/specializations/full-stack-react"&gt;https://www.coursera.org/specializations/full-stack-react&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--olGDhxx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf4vy7prju6tud41c7f1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--olGDhxx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf4vy7prju6tud41c7f1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.pluralsight.com/courses/react-express-full-stack-app-building"&gt;https://www.pluralsight.com/courses/react-express-full-stack-app-building&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SyHSqT5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byc339ksag7m7s714oek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SyHSqT5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byc339ksag7m7s714oek.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Free:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=7CqJlxBYj-M"&gt;https://www.youtube.com/watch?v=7CqJlxBYj-M&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mp9_icJi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl476y3ntngmmjfa5xw9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mp9_icJi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl476y3ntngmmjfa5xw9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE"&gt;https://www.youtube.com/playlist?list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGpMiZwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aazb8fuorqbpo3ztu25y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGpMiZwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aazb8fuorqbpo3ztu25y.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Getting Comfortable With CSS Selectors (Part 1)</title>
      <author>Victor Ikechukwu</author>
      <pubDate>Sun, 13 Jun 2021 02:38:12 +0000</pubDate>
      <link>https://dev.to/mr_victor/getting-comfortable-with-css-selectors-part-1-24a9</link>
      <guid>https://dev.to/mr_victor/getting-comfortable-with-css-selectors-part-1-24a9</guid>
      <description>&lt;p&gt;So you have learned the basic id, class, and descendant selectors—and then called it a day? If so, you're missing out on an enormous level of flexibility. You owe it to yourself to commit these advanced CSS and CSS3 selectors to memory&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-rules"&gt;
  &lt;/a&gt;
  CSS Rules
&lt;/h2&gt;

&lt;p&gt;Every CSS rule follows this general pattern&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;selector&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;property&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where we have of a selector (e.g. h1) and a declaration block ({}) where we declare our styles.&lt;br&gt;
In understanding CSS The biggest key player is understanding selectors and how they work, CSS selectors are what allows us to target specific Html Elements and apply styles in the declaration block to them, we won't be focusing on styles right now though, our focus would be on the selecting and what goes in that selector area &lt;/p&gt;

&lt;p&gt;Let's get into it 👇&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-universal-selector"&gt;
  &lt;/a&gt;
  1. Universal Selector
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Selects everything&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Selects all elements */&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CSS universal selector is donated by an asterisk ✳. It selects all elements regardless of their type present on the page.&lt;br&gt;
In the example above all elements on the page will get the style of &lt;code&gt;color: black;&lt;/code&gt; assuming we don't have any more specific selectors that conflict with that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-element-type-selector"&gt;
  &lt;/a&gt;
  2. Element (Type) Selector
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Selects all img */&lt;/span&gt;
&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Element&lt;/code&gt; Selector Selects all instances of a tag or element present on the page, in our case, we would be giving all &lt;code&gt;img&lt;/code&gt; HTML elements on the page the specified width and height.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-class-selector"&gt;
  &lt;/a&gt;
  3. Class Selector
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Selects all elements with class of 'blue' */&lt;/span&gt;
&lt;span class="nc"&gt;.blue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;dotted&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CSS &lt;code&gt;class&lt;/code&gt; selector is probably the most useful and versatile selector, it selects all elements that have given the &lt;code&gt;class value&lt;/code&gt; in their &lt;code&gt;class&lt;/code&gt; attribute. In the example above it will select all elements that have the "blue" value in their &lt;code&gt;class&lt;/code&gt; attribute&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-id-selector"&gt;
  &lt;/a&gt;
  4. ID Selector
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Selects the element with the id attribute set to '#header' */&lt;/span&gt;
&lt;span class="nf"&gt;#header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;dotted&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we have the &lt;code&gt;ID&lt;/code&gt; selector. ID selectors are the most powerful in terms of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity"&gt;CSS specificity&lt;/a&gt;, just like the &lt;code&gt;class&lt;/code&gt; selector, it targets specific elements in our markup, that we can then reference in our CSS. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The value of an element's &lt;code&gt;ID&lt;/code&gt; must be unique on a web page. It is a violation of the &lt;a href="https://www.w3.org/TR/html/dom.html#the-id-attribute"&gt;HTML standard&lt;/a&gt; to use the value of an ID more than once in the same document tree. id selectors are rigid and don't allow for reuse&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#5-selector-list"&gt;
  &lt;/a&gt;
  5. Selector List
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Selects all matching elements in the list */&lt;/span&gt;
&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CSS &lt;code&gt;selector list&lt;/code&gt; &lt;code&gt;(,)&lt;/code&gt; allows us to select multiple elements with &lt;strong&gt;different selectors&lt;/strong&gt; at once and style them. You have more than one thing which uses the same CSS then the individual selectors can be combined into a selector list so that the rule is applied to all of the individual selectors. This is done by grouping them in a comma-separated list and CSS selects all the matching elements in the list&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note:  When you group selectors in this way, if any selector is invalid the whole rule will be ignored.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;&lt;u&gt; Combinator Selectors &lt;/u&gt;&lt;/h1&gt;

&lt;p&gt;This final group of selectors combines other selectors in order to target elements within our documents&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-descendant-combinator"&gt;
  &lt;/a&gt;
  6. Descendant Combinator
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Selects all &amp;lt;a&amp;gt;'s that are nested inside an &amp;lt;ul&amp;gt; */&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;dodgerblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;selector&lt;/code&gt; allows us to select elements that are descendants of some other selector. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;we are selecting all &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; nested anywhere within an &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, it doesn't have to be the first child or first descendant it can be  anywhere nested inside the &lt;code&gt;ul&lt;/code&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#7-adjacent-sibling-combinator"&gt;
  &lt;/a&gt;
  7. Adjacent Sibling Combinator
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Selects only &amp;lt;p&amp;gt; tags that are immediately preceded by a &amp;lt;h1&amp;gt; */&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark-grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The + combinator selects adjacent element siblings.it will select only the element that is immediately preceded by the former element. In this case, only the first paragraph after each &lt;code&gt;h1&lt;/code&gt; will have dark-grey text. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This means that the second element must directly follow the first, and both share the same parent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#8-direct-child-combinator"&gt;
  &lt;/a&gt;
  8. (Direct) Child Combinator
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Selects all &amp;lt;h2&amp;gt; that are direct children of a &amp;lt;div&amp;gt; */&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;&amp;gt;&lt;/code&gt; combinator acts more like the &lt;code&gt;descendant combinator&lt;/code&gt; expect that it is more particular and selects direct children of the parent element, in the Example: &lt;code&gt;div &amp;gt; h2&lt;/code&gt; will match all &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; elements that are nested directly inside of a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With the &lt;code&gt;descendant combinator&lt;/code&gt; we would select any nested child or grandchild of the parent element. But the child combinator &lt;code&gt;&amp;gt;&lt;/code&gt; selects only direct children.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sorry grandchildren only children allowed 😋.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#attribute-selectors"&gt;
  &lt;/a&gt;
  Attribute Selectors
&lt;/h2&gt;

&lt;p&gt;The attribute selectors allow us to select elements based on the presence of a certain attribute on an element:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-xhreffoo"&gt;
  &lt;/a&gt;
  9. X[href="foo"]
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"https://hashnode.com/"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The snippet above will style all anchor tags which link to &lt;a href="https://hashnode.com/"&gt;https://hashnode.com/&lt;/a&gt;; they'll receive the blue color. All other anchor tags will remain unaffected.&lt;/p&gt;

&lt;p&gt;What if the link does indeed direct to Hashnode, but maybe the path is hashnode.com rather than the full URL?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-xhreffoo"&gt;
  &lt;/a&gt;
  10. X[href*="foo"]
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;*=&lt;/span&gt;&lt;span class="s1"&gt;"hashnode"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There we go. The star designates that the proceeding value must appear somewhere in the attribute's value&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-xhrefhttp"&gt;
  &lt;/a&gt;
  11. X[href^="http"]
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s1"&gt;"http"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the carat symbol &lt;code&gt;^&lt;/code&gt; designates the beginning of a string. If we want to target all anchor tags that have an href which begins with http, we could use a selector similar to the snippet shown above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-xhrefjpg"&gt;
  &lt;/a&gt;
  12. X[href$=".jpg"]
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;".jpg"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the symbol &lt;code&gt;$&lt;/code&gt; refers to the end of a string. In this case, we're searching for all anchors which link to an image—or a URL that ends with .jpg.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Alright coder we have covered quite a bit about CSS selectors! 🎉.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Universal Selector&lt;/li&gt;
&lt;li&gt;Element (Type) Selector&lt;/li&gt;
&lt;li&gt;Class and ID Selectors&lt;/li&gt;
&lt;li&gt;Combinators

&lt;ul&gt;
&lt;li&gt;Adjacent, Descendant, and Direct Child Combinators&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Attribute Selectors and their variants.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next part of this series, we are going to talk about &lt;strong&gt;Pseudo Selectors&lt;/strong&gt;, a big and widely confusing topic in CSS 🤔.&lt;/p&gt;

&lt;p&gt;So what are you waiting for, take this knowledge out there and go write some top-notch CSS styles that will impress your friends. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enjoyed reading this as much as i enjoyed writing it for you?&lt;/strong&gt; 😍 . support me with a coffee 😃&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/molipa"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>css3</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
