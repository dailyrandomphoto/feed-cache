<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Easiest Way to Send Emails With JavaScript by SilvenLEAF </title>
      <author>SilvenLEAF</author>
      <pubDate>Thu, 14 Oct 2021 01:37:08 +0000</pubDate>
      <link>https://dev.to/silvenleaf/easiest-way-to-send-emails-with-javascript-by-silvenleaf-32lp</link>
      <guid>https://dev.to/silvenleaf/easiest-way-to-send-emails-with-javascript-by-silvenleaf-32lp</guid>
      <description>&lt;p&gt;Ahoy there Sweetlings! Let's send some emails! But in a SUPER FUN Way!! For a Sweeter fun, let's add TypeScript as well! Even if you don't know it, don't worry, we will be going from Level 0!! As long as you know the basics for JavaScript, hop on!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-0-begin-the-project"&gt;
  &lt;/a&gt;
  Step 0: Begin the Project
&lt;/h2&gt;

&lt;p&gt;Create a folder and open it in your favorite editor (mine VS Code). Then type this command on your project terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a package.json file to track all the packages that you'd download and so on)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-step-adding-typescript"&gt;
  &lt;/a&gt;
  Bonus Step: Adding TypeScript
&lt;/h2&gt;

&lt;p&gt;For those who are a bit lost on how to set up the environment and run the TypeScript files, check this one out &lt;strong&gt;TypeScript SETUP by SilvenLEAF&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In short (for details, checkout the above link)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install typescript
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i typescript 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;init our tsconfig
(make sure you already have typescript globally installed, if not type &lt;strong&gt;"npm i -g typescript"&lt;/strong&gt;. And don't get it confused with the previous normal &lt;strong&gt;"npm i typescript"&lt;/strong&gt; command)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a &lt;strong&gt;.tsconfig&lt;/strong&gt; file)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install &lt;strong&gt;ts-node&lt;/strong&gt; and &lt;strong&gt;ts-node-dev&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i ts-node ts-node-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's create an &lt;strong&gt;app.ts&lt;/strong&gt; file and send some freaking emails!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-sending-emails"&gt;
  &lt;/a&gt;
  Step 1: Sending Emails
&lt;/h2&gt;

&lt;p&gt;First install the required packages with this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i nodemailer @types/nodemailer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(By the way, &lt;strong&gt;"npm i X"&lt;/strong&gt; is the short version for &lt;strong&gt;"npm install X"&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Now let's send some freaking emails! Inside the &lt;strong&gt;app.ts&lt;/strong&gt; file, write these&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nodemailer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;// let's create the transport (it's the postman/delivery-man who will send your emails)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myTransport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransport&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gmail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR_GMAIL_ACCOUNT@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your gmail account which you'll use to send the emails&lt;/span&gt;
    &lt;span class="na"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR_GMAIL_PASSWORD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// the password for your gmail account&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;






&lt;span class="c1"&gt;// defining the content of the email (I mean, what will be on the email)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mailOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SilvenLEAF&amp;lt;YOUR_GMAIL_ACCOUNT@gmail.com&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// from where the email is going, you can type anything or any name here, it'll be displayed as the sender to the person who receives it&lt;/span&gt;
  &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user1@gmail.com,user2@crazy.com,user3@anything.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// the email address(es) where you want to send the emails to. If it's more than one person/email, seperate them with a comma, like here how I seperated the 3 users with a comma&lt;/span&gt;

  &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sending Some Freaking Email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your email subject (optional but better to have it)&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Hello there my sweetling! Let's send some freaking emails!`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your email body in plain text format (optional) &lt;/span&gt;

  &lt;span class="c1"&gt;// your email body in html format (optional)&lt;/span&gt;
  &lt;span class="c1"&gt;// if you want to send a customly and amazingly designed html body&lt;/span&gt;
  &lt;span class="c1"&gt;// instead of a boring plain text, then use this "html" property&lt;/span&gt;
  &lt;span class="c1"&gt;// instead of "text" property&lt;/span&gt;
  &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;h1 style="color: red;text-align:center"&amp;gt;Hello there my sweetling!&amp;lt;/h1&amp;gt;
         &amp;lt;p style="text-align:center"&amp;gt;Let's send some &amp;lt;span style="color: red"&amp;gt;freaking&amp;lt;/span&amp;gt; emails!&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;






&lt;span class="c1"&gt;// sending the email&lt;/span&gt;
&lt;span class="nx"&gt;myTransport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Email is failed to send!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Email is successfully sent!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yohoooo! We just created the email sender file. Now, let's run it. Type this following command in your terminal to run this typescript file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ts-node app.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It's the TypeScript version of &lt;strong&gt;node app.js&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Yahoooo! We just send a freaking email to some freaking users!! Yay! But really? You must have seen a crazy error like this right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1oAAvUc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y4qey6y8gmw7qhihp5u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oAAvUc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y4qey6y8gmw7qhihp5u.png" alt="Failed to send"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because Googled blocked that request! So in order to make it work, we need to allow it to send emails from that email account first. How? First google &lt;strong&gt;"less secure apps"&lt;/strong&gt; and open the first link.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fs6zE-BY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71g2jait16s2ols1me5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fs6zE-BY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71g2jait16s2ols1me5f.png" alt="Google Less Secure Apps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you'll see something like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ohXk3e3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7yxu67f0h5cm01tco7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ohXk3e3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7yxu67f0h5cm01tco7t.png" alt="Less Secure Apps"&gt;&lt;/a&gt;&lt;br&gt;
Make the toggle button on (Allow less secure apps: ON)&lt;/p&gt;

&lt;p&gt;Now run that email sender file once again! And HURRAH!!! You just send a freaking email!! Congrats Sweetling!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>node</category>
      <category>express</category>
    </item>
    <item>
      <title>Kubernetes Best Practices Validation in Azure Pipelines with Datree</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Thu, 14 Oct 2021 01:04:25 +0000</pubDate>
      <link>https://dev.to/n3wt0n/kubernetes-best-practices-validation-in-azure-pipelines-with-datree-33i3</link>
      <guid>https://dev.to/n3wt0n/kubernetes-best-practices-validation-in-azure-pipelines-with-datree-33i3</guid>
      <description>&lt;p&gt;In this third article dedicated to &lt;strong&gt;&lt;em&gt;Datree&lt;/em&gt;&lt;/strong&gt; we will explore how to use the tool with Azure Pipelines to validate and secure our Kubernetes deployments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aM7EVflmEt4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/aM7EVflmEt4"&gt;Link to the video: https://youtu.be/aM7EVflmEt4&lt;/a&gt;. The part about &lt;strong&gt;&lt;em&gt;Azure Pipelines&lt;/em&gt;&lt;/strong&gt; starts at minute &lt;a href="https://youtu.be/aM7EVflmEt4?t=993"&gt;16:33&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  The Basics
&lt;/h3&gt;

&lt;p&gt;While I will not cover how to install and use the service in general (&lt;em&gt;check the video and the first article of this series if you want to know more about it&lt;/em&gt;), there are few things worth remembering and that will be useful later on in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Datree is a &lt;strong&gt;CLI&lt;/strong&gt; tool, which works on Linux, MacOS and Windows&lt;/li&gt;
&lt;li&gt;The Centralized Policy Management uses a &lt;strong&gt;Token&lt;/strong&gt; as &lt;em&gt;connection&lt;/em&gt; between the scans and the account&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#datree-in-azure-pipelines"&gt;
  &lt;/a&gt;
  Datree in Azure Pipelines
&lt;/h3&gt;

&lt;p&gt;Alright, let's do this. First thing we have to do, as we would in a local environment, is to &lt;strong&gt;install the CLI&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;curl https://get.datree.io | /bin/bash&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Install&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Datree'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case the pipeline is running on Linux, so I can use the bash script for installing it.&lt;/p&gt;

&lt;p&gt;This step will take only few seconds to execute.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is necessary if you are using the &lt;em&gt;Microsoft Hosted Agents&lt;/em&gt;. If you are instead on &lt;em&gt;Self-hosted Agents&lt;/em&gt; you can install the CLI directly on the agent machine so you can skip this step. However, you'd need to manually take care of updating the CLI&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, we can &lt;strong&gt;invoke the validation&lt;/strong&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;datree test ~/.datree/k8s-demo.yaml&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;DATREE_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$(DATREE_TOKEN)&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;datree&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;scan'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, nothing different from what we would normally do.&lt;/p&gt;

&lt;p&gt;Since we don't have access to the config file in our CI environment, we need to &lt;strong&gt;pass the Token as environment variable&lt;/strong&gt;. Best practice is to save it as a protected variable in Pipelines, and retrieve it using &lt;code&gt;$(YOUR_SECRET_NAME)&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the example above the Token is passed as environment variable directly in the task to minimize exposure. If you have multiple scans in the same workflow, you can also add it as job, stage, or pipeline environment variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this is basically all you need.&lt;/p&gt;

&lt;p&gt;So the &lt;strong&gt;full pipeline&lt;/strong&gt; will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Pipeline to show Datree scan&lt;/span&gt;

&lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;

&lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;vmImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;curl https://get.datree.io | /bin/bash&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Install&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Datree'&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;datree test ~/.datree/k8s-demo.yaml&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;DATREE_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$(DATREE_TOKEN)&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;datree&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;scan'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course you can also integrate this into your own CI or PR validation pipelines rather than keeping it separate if you wish so.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#execution-and-results"&gt;
  &lt;/a&gt;
  Execution and Results
&lt;/h3&gt;

&lt;p&gt;First thing to notice is that, as Ive said before, the &lt;strong&gt;installation step is very quick&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CWTAC7nl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jln3krt0kink37mfs8ye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWTAC7nl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jln3krt0kink37mfs8ye.png" alt="Installation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is why it is probably a good idea to leave it there even on Self-hosted agents so you don't have to worry about updating it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6rL3wqKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju4vviy66ne9uiupxmt2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6rL3wqKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju4vviy66ne9uiupxmt2.png" alt="Execution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the validation scan is also very quick.&lt;/p&gt;

&lt;p&gt;Second thing to notice is that by design &lt;strong&gt;if a validation fails it will break the build/run&lt;/strong&gt;. This is to ensure the enforcement of the policies and best practices.&lt;/p&gt;

&lt;p&gt;Finally, let's take a look at the results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1cS0StW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt7fy319ele9srkhlkqv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1cS0StW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt7fy319ele9srkhlkqv.png" alt="Results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;strong&gt;output is exactly the same&lt;/strong&gt; as when executing the CLI on any local environment, or anywhere else for what batters, keeping the experience very consistent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#offer"&gt;
  &lt;/a&gt;
  Offer
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Datree is free&lt;/strong&gt; to use up to 1000 scans per month, and you can pay for more scans and enhanced support. However...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FKp3WlAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d21dd4pybgm67x8js18f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKp3WlAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d21dd4pybgm67x8js18f.png" alt="A Month for Free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;You can get 1 month of the Premium plan for FREE is you use this link&lt;/em&gt;&lt;/strong&gt;: &lt;a href="https://app.datree.io/?utm_source=coder-dave&amp;amp;medium=youtube"&gt;https://app.datree.io/?utm_source=coder-dave&amp;amp;medium=youtube&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;So, what do you think about Datree? Is it something you will adopt as part of your workflow? Let me know in the comment section below, I'd really like to know it.&lt;/p&gt;

&lt;p&gt;You may also want to watch &lt;a href="https://youtu.be/4Oa5HneTuKs"&gt;this video&lt;/a&gt; in which show you how to deploy to Kubernetes in Azure Pipelines starting from scratch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aM7EVflmEt4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>azuredevops</category>
      <category>kubernetes</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Cannot read property 'jwtoken' of undefined</title>
      <author>SuvamRay</author>
      <pubDate>Thu, 14 Oct 2021 00:42:00 +0000</pubDate>
      <link>https://dev.to/suvamray/cannot-read-property-jwtoken-of-undefined-jik</link>
      <guid>https://dev.to/suvamray/cannot-read-property-jwtoken-of-undefined-jik</guid>
      <description>&lt;div class="ltag__stackexchange--container"&gt;
  &lt;div class="ltag__stackexchange--title-container"&gt;
    
      &lt;div class="ltag__stackexchange--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gn-iPj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt=""&gt;
            &lt;a href="https://stackoverflow.com/questions/69563747/cannot-read-property-jwtoken-of-undefined" rel="noopener noreferrer"&gt;
               Cannot read property 'jwtoken' of undefined
            &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__stackexchange--post-metadata"&gt;
          &lt;span&gt;Oct 14 '21&lt;/span&gt;
            &lt;span&gt;Comments: 1&lt;/span&gt;
            &lt;span&gt;Answers: 0&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/69563747/cannot-read-property-jwtoken-of-undefined" rel="noopener noreferrer"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9mJpuJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt=""&gt;
        &lt;div class="ltag__stackexchange--score-number"&gt;
          0
        &lt;/div&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wif5Zq3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt=""&gt;
      &lt;/a&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--body"&gt;
    
&lt;p&gt;here I generate the token at backend in express
..............&lt;/p&gt;
&lt;div class="snippet" data-lang="js"&gt;
&lt;div class="snippet-code"&gt;
&lt;pre class="snippet-code-js lang-js prettyprint-override"&gt;&lt;code&gt;router.post("/login",async(req,res)=&amp;gt;{
    const {email,password}=req.body;
    if(!email || !password){
        return res.status(401).send({error:"please filled the data properly"});
    }
    try {
        const loginUser=await User.findOne({email:email});
        if(!loginUser){
            return res.status(400).send({error:"not found"});
        }
        const isMatch = await bcrypt.compare(password,loginUser.password);    
        if(isMatch){
            const token=await loginUser.generateToken();
            res.cookie("jwtoken",token,{
                expires:new Date(Date.now()+15000000),
                httpOnly:true,
                //secure:true  //it&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--btn--container"&gt;
    
      &lt;a href="https://stackoverflow.com/questions/69563747/cannot-read-property-jwtoken-of-undefined" rel="noopener noreferrer"&gt;Open Full Question&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


</description>
    </item>
    <item>
      <title>Creating through a crisis</title>
      <author>Jason Leow ~ golifelog.com</author>
      <pubDate>Wed, 13 Oct 2021 23:09:52 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/creating-through-a-crisis-228o</link>
      <guid>https://dev.to/jasonleowsg/creating-through-a-crisis-228o</guid>
      <description>&lt;h3&gt;
  &lt;a href="#youre-a-maker-right-why-dont-you-make-something"&gt;
  &lt;/a&gt;
  &lt;em&gt;You’re a maker, right? Why don’t you make something?&lt;/em&gt;
&lt;/h3&gt;




&lt;p&gt;There’s a scene in Iron Man 3 where Tony Stark was having a panic attack from the work as a superhero, and he called Harley, the kid who sheltered him while he was hiding from his enemies. Harley goes console Stark, and said, “You’re a mechanic, right? Why don’t you build something?”&lt;/p&gt;

&lt;p&gt;That line really stuck with me. Floated around in my subconscious. &lt;/p&gt;

&lt;p&gt;Then it appeared as a mini-epiphany. I’m not sure when this happened, but there’s a repeating pattern that I observed about how I cope with crisis. And it’s about building something.&lt;/p&gt;

&lt;p&gt;First it was a chronic medical condition in 2018 (which I had since recovered from, thankfully). While I was seeking treatment, I wasn’t taking on paid projects then, but I continued to work. In fact, it was that same time that I tried out the 12 startups in 12 months challenge. I called it &lt;a href="https://twitter.com/jasonleowsg/status/970890710751723521"&gt;#1mvp1month&lt;/a&gt;. I didn’t end up making 12 products, but was close – 8 products. That was a strange experience, because on one hand, I was going through a low period in terms of health and mental wellbeing. But yet I was creating like nobody’s business. &lt;/p&gt;

&lt;p&gt;Then in 2019, in a bid to get my health back, I turned to keto and intermittent fasting. Hard as f**k, trying to stop eating carbs. But I did. In the process of changing my diet and my health, I made a product called &lt;a href="https://ketolistsingapore.com"&gt;Keto List Singapore&lt;/a&gt; – a directory of keto resources and links. That helped me in a big way, and now it’s a little side business.&lt;/p&gt;

&lt;p&gt;Then, COVID-19 came. Complete topsy-turvy of life. I’m safe at home, but also stuck at home. For someone who enjoys being outside, what can I do to cope? I create. I made products &lt;em&gt;again&lt;/em&gt; - websites, apps, software to help people in the pandemic. Like a man possessed, I kept making. In the end I made a total of 11 products! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some examples of the 11 products I made:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sheet2site.com/s/dabaodash/"&gt;Dabao Dash&lt;/a&gt; - a self-help community board of offers and requests, matching hawkers and small F&amp;amp;Bs with delivery riders affected&lt;br&gt;
&lt;a href="https://sheet2site.com/s/majulahbelanja/"&gt;Majulah Belanja&lt;/a&gt; - an offers/requests board for to help match donors with employers and migrant workers.&lt;br&gt;
&lt;a href="https://visualaid.sg"&gt;VisualAid&lt;/a&gt; - translated illustrations to help healthcare workers communicate better with migrant worker patients.&lt;br&gt;
&lt;a href="https://gogranthunt.com/"&gt;Grant Hunt&lt;/a&gt; - A chat bot to find grants for charities and non-profits in Singapore.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I realised that the intensity of my creating is directly proportional to how challenged I am in a crisis, or inversely proportional to how low I feel. I guess I needed something to balance it out. Creating always felt energizing and uplifting. It gives life, right when I need to feel more alive. It’s like I can almost hear Harley say that to me over the phone (though I’m under no illusions of being a superhero):&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“You’re a maker, right? Why don’t you make something?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Damned hell I will.&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>covid19</category>
      <category>decodingcoding</category>
    </item>
    <item>
      <title>Building a dropdown menu using Alpine.js</title>
      <author>Michael Burrows</author>
      <pubDate>Wed, 13 Oct 2021 22:23:35 +0000</pubDate>
      <link>https://dev.to/michaelburrows/building-a-dropdown-menu-using-alpinejs-47o3</link>
      <guid>https://dev.to/michaelburrows/building-a-dropdown-menu-using-alpinejs-47o3</guid>
      <description>&lt;p&gt;&lt;a href="https://alpinejs.dev/"&gt;AlpineJS&lt;/a&gt; is a small JavaScript framework for composing behavior directly in HTML markup. In this tutorial I’ll show you how the framework can be used to build a dropdown menu component. If you’ve never worked with Alpine before this will serve as a simple introduction to the framework.&lt;/p&gt;

&lt;p&gt;For the purposes of this tutorial you can load the framework via CDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Alpine loaded create a wrapper &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the following attributes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;x-data=&lt;/span&gt;&lt;span class="s"&gt;"{ open: false }"&lt;/span&gt; &lt;span class="na"&gt;x-on:click.outside=&lt;/span&gt;&lt;span class="s"&gt;"open = false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  // ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;x-data&lt;/code&gt; defines a chunk of HTML as an Alpine component and provides data for that component to reference. &lt;code&gt;x-on:click.outside&lt;/code&gt; set’s the open data to false which will hide the dropdown when anywhere outside the component is clicked.&lt;/p&gt;

&lt;p&gt;Next inside the wrapper &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; add a button that’ll trigger the dropdown’s visibility:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;x-on:click=&lt;/span&gt;&lt;span class="s"&gt;"open = !open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  My Account
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another &lt;code&gt;x-on:click&lt;/code&gt; this time we’re only tracking clicks directly on the button itself.&lt;/p&gt;

&lt;p&gt;Now for the dropdown menu which is an unordered list with a &lt;code&gt;x-show&lt;/code&gt; attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;x-show=&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Edit Profile&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Settings&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Log Out&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;        
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When &lt;code&gt;open&lt;/code&gt; equals &lt;code&gt;true&lt;/code&gt; the &lt;code&gt;x-show&lt;/code&gt; attribute will change the visibility of the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; element. At this point in the tutorial we have a basic functioning dropdown, let’s add a couple of finishing touches to improve the look and feel. First let’s add an icon that’ll represent the state of the dropdown menu:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;x-on:click=&lt;/span&gt;&lt;span class="s"&gt;"open = !open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  My Account 
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"{'rotated': open}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;raquo;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you view the source code after the button has been clicked you’ll see the rotated class has been applied to the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qegb0q93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofi8dnqwbhgq417y1ffy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qegb0q93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofi8dnqwbhgq417y1ffy.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now apply some CSS to rotate the icon indicating the menu is open:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.rotated&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we’ll add a transition so the opening and closing of the dropdown appears smoother:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;x-show=&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt; &lt;span class="na"&gt;x-transition.opacity&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 ...       
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s all for this tutorial. As you’ve just seen by adding some simple Alpine attributes to HTML markup it relatively easy to create a functioning dropdown menu. With what you learnt in this tutorial you could also start building other UI elements with show/hide functionality and Alpine.js.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>alpinejs</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Improving Angular tests by enabling Angular testing module teardown</title>
      <author>Lars Gyrup Brink Nielsen</author>
      <pubDate>Wed, 13 Oct 2021 22:22:58 +0000</pubDate>
      <link>https://dev.to/this-is-angular/improving-angular-tests-by-enabling-angular-testing-module-teardown-38kh</link>
      <guid>https://dev.to/this-is-angular/improving-angular-tests-by-enabling-angular-testing-module-teardown-38kh</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/photos/dfOnZMEzI4Q"&gt;Marian Kroell&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;destroyAfterEach&lt;/code&gt; Angular testing module teardown option addresses several long-time issues when using the Angular testbed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The host element is not removed from the DOM until another component fixture is created&lt;/li&gt;
&lt;li&gt;Component styles are never removed from the DOM&lt;/li&gt;
&lt;li&gt;Application-wide services are never destroyed&lt;/li&gt;
&lt;li&gt;Feature-level services using the any provider scope are never destroyed&lt;/li&gt;
&lt;li&gt;Angular modules are never destroyed&lt;/li&gt;
&lt;li&gt;Components are destroyed 1 time less than the number of tests&lt;/li&gt;
&lt;li&gt;Component-level services are destroyed 1 time less than the number of tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The two first issues have the biggest impact when using Karma which runs the component tests in a browser.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Did you know?&lt;/strong&gt; Angular modules and services support hooking into the &lt;code&gt;OnDestroy&lt;/code&gt; lifecycle moment by implementing an &lt;code&gt;ngOnDestroy&lt;/code&gt; method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this guide, we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explore the &lt;code&gt;ModuleTeardownOptions#destroyAfterEach&lt;/code&gt; option for the Angular testbed&lt;/li&gt;
&lt;li&gt;List full Angular testing module teardown configurations for Karma and Jest for reference&lt;/li&gt;
&lt;li&gt;Examine how to opt in or opt out of Angular testing module teardown in a test suite or test case&lt;/li&gt;
&lt;li&gt;Discuss caveats and remaining issues with the Angular testing module&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#exploring-the-destroyaftereach-angular-testing-module-teardown-option"&gt;
  &lt;/a&gt;
  Exploring the destroyAfterEach Angular testing module teardown option
&lt;/h2&gt;

&lt;p&gt;Angular version 12.1 adds the &lt;code&gt;teardown&lt;/code&gt; option object &lt;a href="https://angular.io/api/core/testing/ModuleTeardownOptions"&gt;&lt;code&gt;ModuleTeardownOptions&lt;/code&gt;&lt;/a&gt; which can be passed to &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; for a test case or to &lt;code&gt;TestBed.initTestEnvironment&lt;/code&gt; as a global setting.&lt;/p&gt;

&lt;p&gt;We can enable the &lt;code&gt;destroyAfterEach&lt;/code&gt; option as part of the &lt;code&gt;teardown&lt;/code&gt; option object. This in turn enables the &lt;code&gt;rethrowErrors&lt;/code&gt; option which is not covered by this guide.&lt;/p&gt;

&lt;p&gt;In Angular versions 12.1 and 12.2, &lt;code&gt;ModuleTeardownOptions#destroyAfterEach&lt;/code&gt; has a default value of &lt;code&gt;false&lt;/code&gt;. In Angular version 13.0 and later, its default value is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;destroyAfterEach&lt;/code&gt; is enabled, the following happens after each test case or when testing module teardown is otherwise triggered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The host element is removed from the DOM&lt;/li&gt;
&lt;li&gt;Component styles are removed from the DOM&lt;/li&gt;
&lt;li&gt;Application-wide services are destroyed&lt;/li&gt;
&lt;li&gt;Feature-level services using the any provider scope are destroyed&lt;/li&gt;
&lt;li&gt;Angular modules are destroyed&lt;/li&gt;
&lt;li&gt;Components are destroyed&lt;/li&gt;
&lt;li&gt;Component-level services are destroyed&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Angular testing gotcha:&lt;/strong&gt; Platform-level services are never destroyed in Angular tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#angular-testing-teardown-triggers"&gt;
  &lt;/a&gt;
  Angular testing teardown triggers
&lt;/h3&gt;

&lt;p&gt;The following events trigger Angular testing teardown when &lt;code&gt;destroyAfterEach&lt;/code&gt; is enabled:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;TestBed.resetTestEnvironment&lt;/code&gt; is called&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;TestBed.resetTestingModule&lt;/code&gt; is called&lt;/li&gt;
&lt;li&gt;A test case finishes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, let's look at full configuration examples for the Karma and Jest test runners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enabling-angular-testing-module-teardown-in-karma"&gt;
  &lt;/a&gt;
  Enabling Angular testing module teardown in Karma
&lt;/h2&gt;

&lt;p&gt;Until Angular version 12.1 (inclusive) and in Angular 13.0 and later versions, a generated main Karma test file (&lt;code&gt;test.ts&lt;/code&gt;) looks as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This file is required by karma.conf.js and loads recursively all the .spec and framework files&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zone.js/dist/zone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zone.js/dist/zone-testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTestBed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser-dynamic/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// First, initialize the Angular testing environment.&lt;/span&gt;
&lt;span class="nx"&gt;getTestBed&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;initTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Then we find all the tests.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;spec&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;ts$/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// And load the modules.&lt;/span&gt;
&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
test.ts generated by Angular version 12.1 and 13.0





&lt;p&gt;Angular version 12.1 adds a 3rd parameter to &lt;code&gt;TestBed.initTestEnvironment&lt;/code&gt; as seen in the following snippet generated by Angular version 12.2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This file is required by karma.conf.js and loads recursively all the .spec and framework files&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zone.js/dist/zone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zone.js/dist/zone-testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTestBed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser-dynamic/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// First, initialize the Angular testing environment.&lt;/span&gt;
&lt;span class="nx"&gt;getTestBed&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;initTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destroyAfterEach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// 👈&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Then we find all the tests.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;spec&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;ts$/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// And load the modules.&lt;/span&gt;
&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
test.ts generated by Angular version 12.2





&lt;p&gt;For reference, &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; also accepts a &lt;code&gt;teardown&lt;/code&gt; option in Angular 12.1 and later versions as seen in this snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configureTestingModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destroyAfterEach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// 👈&lt;/span&gt;
  &lt;span class="c1"&gt;// (...)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
Test suite setup enabling Angular testing module teardown





&lt;h2&gt;
  &lt;a href="#enabling-angular-testing-module-teardown-in-jest"&gt;
  &lt;/a&gt;
  Enabling Angular testing module teardown in Jest
&lt;/h2&gt;

&lt;p&gt;If our workspace or project is using Jest for unit tests, &lt;code&gt;test-setup.ts&lt;/code&gt; files probably look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jest-preset-angular/setup-jest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
test-setup.ts with Angular preset for Jest





&lt;p&gt;To enable Angular testing module teardown in Angular versions 12.1 and 12.2, use the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jest-preset-angular/setup-jest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTestBed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser-dynamic/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;getTestBed&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resetTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;getTestBed&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;initTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destroyAfterEach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// 👈&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
test-setup.ts for Jest with Angular testing module teardown





&lt;p&gt;The Angular preset for Jest already initializes the Angular testbed environment so we have to reset it before configuring and initializing the Angular testbed environment.&lt;/p&gt;

&lt;p&gt;With enabling Angular testing module teardown globally covered, let's move on to opting out of Angular testing module teardown.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disabling-angular-testing-module-teardown"&gt;
  &lt;/a&gt;
  Disabling Angular testing module teardown
&lt;/h2&gt;

&lt;p&gt;If our Angular tests break after enabling Angular testing module teardown, we can opt out globally or locally.&lt;/p&gt;

&lt;p&gt;We might want to opt out because various Angular testing libraries might break when &lt;code&gt;destroyAfterEach&lt;/code&gt; is enabled or they might not accept or specify this option.&lt;/p&gt;

&lt;p&gt;Use the following snippet to opt out of Angular testing module teardown in an entire test suite:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TestBed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser-dynamic/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;beforeAll&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resetTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destroyAfterEach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// 👈&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the following snippet to opt out of Angular testing module teardown in one or multiple test cases&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TestBed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configureTestingModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destroyAfterEach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// 👈&lt;/span&gt;
    &lt;span class="c1"&gt;// (...)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If a component fixture has already been created, we must call &lt;code&gt;TestBed.resetTestingModule&lt;/code&gt; before &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, it's possible to opt out of Angular testing module teardown across our entire workspace by applying the optional Angular migration named &lt;code&gt;migration-v13-testbed-teardown&lt;/code&gt; using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;ng&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;angular/cli&lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="nx"&gt;13&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--migrate-only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;migration-v13-testbed-teardown&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When Angular testing module teardown is enabled by setting &lt;code&gt;ModuleTeardownOptions#destroyAfterEach&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, the Angular testbed manages resources between test case runs by triggering the &lt;code&gt;OnDestroy&lt;/code&gt; lifecycle moment for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application-level services&lt;/li&gt;
&lt;li&gt;Feature-level services&lt;/li&gt;
&lt;li&gt;Angular modules&lt;/li&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;Component-level services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, the &lt;code&gt;ngOnDestroy&lt;/code&gt; hook of platform-level services is never triggered between tests.&lt;/p&gt;

&lt;p&gt;Host elements and component styles are removed from the DOM which is especially important when using Karma which runs tests in a browser.&lt;/p&gt;

&lt;p&gt;This all happens when &lt;code&gt;TestBed.resetTestEnvironment&lt;/code&gt; or &lt;code&gt;TestBed.resetTestingModule&lt;/code&gt; is called or at the latest when a test case finishes.&lt;/p&gt;

&lt;p&gt;We discussed how &lt;a href="https://angular.io/api/core/testing/ModuleTeardownOptions"&gt;&lt;code&gt;ModuleTeardownOptions&lt;/code&gt;&lt;/a&gt; were introduced by Angular version 12.1 but that schematics-generated values and default values changed in Angular versions 12.2 and 13.0 as seen in the following table:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Angular version&lt;/th&gt;
&lt;th&gt;Default value of &lt;code&gt;destroyAfterEach&lt;/code&gt;
&lt;/th&gt;
&lt;th&gt;Schematics-generated value for &lt;code&gt;destroyAfterEach&lt;/code&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=12.0&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12.2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=13.0&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In the sections &lt;em&gt;Enabling Angular testing module teardown in Karma&lt;/em&gt; and &lt;em&gt;Enabling Angular testing module teardown in Jest&lt;/em&gt;, we referenced full sample global Angular testing module teardown configurations for both the Karma and Jest test runners.&lt;/p&gt;

&lt;p&gt;We learnt how we can opt out of Angular testing module teardown on a global level by calling &lt;code&gt;TestBed.resetTestEnvironment&lt;/code&gt; followed by &lt;code&gt;TestBed.initTestEnvironment&lt;/code&gt;, specifying the &lt;code&gt;teardown&lt;/code&gt; option with &lt;code&gt;destroyAfterEach&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We discussed how to opt out of Angular testing module teardown on one or more test cases by passing a &lt;code&gt;teardown&lt;/code&gt; option object with &lt;code&gt;destroyAfterEach&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;TestBed.configureTestinModule&lt;/code&gt;, optionally preceded by a call to &lt;code&gt;TestBed.resetTestingModule&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, we learnt how to apply the &lt;code&gt;migration-v13-testbed-teardown&lt;/code&gt; migration to opt out of Angular testing module teardown across our entire workspace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;Findings in this guide are based on the following Angular pull requests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/angular/angular/pull/42566"&gt;feat(core): add opt-in test module teardown configuration #42566&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/angular/angular/pull/43353"&gt;Enable test module teardown by default #43353&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wrote a few hundred tests to compare initialization and teardown behavior when &lt;code&gt;ModuleTeardownOptions#destroyAfterEach&lt;/code&gt; is enabled and disabled. If you're curious, they're available at &lt;a href="https://github.com/LayZeeDK/angular-module-teardown-options"&gt;github/LayZeeDK/angular-module-teardown-options&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>testing</category>
    </item>
    <item>
      <title>TOP 10 JOBS IN CLOUD COMPUTING</title>
      <author>Onumaku chibuike victory </author>
      <pubDate>Wed, 13 Oct 2021 22:13:16 +0000</pubDate>
      <link>https://dev.to/onumaku_bobby/top-10-jobs-in-cloud-computing-4gah</link>
      <guid>https://dev.to/onumaku_bobby/top-10-jobs-in-cloud-computing-4gah</guid>
      <description>&lt;p&gt;Job Opportunities in Cloud Computing are rising in the upside-down era of this unexpected pandemic. As per T4 research, the market share of cloud computing in 2021 is 406 Billion US Dollars and can exponentially grow up to 663 Billion US Dollars. With such a market share, companies whether small, medium, or large can shift from their traditional data-centric approach to the one stuffed with cloud computing services thereby rewarding the masses with the suddenly popped up benefits of this technological transformation. Does this really NOT FORCE US to think if or not we can make our career in the emerging field of cloud computing!!&lt;/p&gt;

&lt;p&gt;Top-10-Job-Opportunities-in-Cloud-Computing&lt;/p&gt;

&lt;p&gt;Yes, there are ample opportunities in this sector that organizations are giving to those individuals ready to extract the chief outcomes from the investment a company makes to leverage a cloud-based architecture. And according to your technical and leadership skills tailored well with years of experience, you can grab an offer letter of any of the positions like Cloud Consultant, Cloud Engineer, UI Developer, and so on…….Let’s know about the top opportunities through which one will get benefited in terms of perks, work type, and performance bound to cloud-based models companies adopt to leverage the graph of their sales corresponding to their investments.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Cloud Engineer&lt;br&gt;
Cloud Engineer, in a broader sense, responsibly manages many technical processes through the provided cloud-based systems. Worried about with what aim the processes are carried forward!! Each of them comprises technologically advanced tasks correlated well with either designing, maintenance, planning, and monitoring of their existing business infrastructures for faster innovation and scalable leads through those technical processes. Most specifically, to be a cloud engineer, you should have knowledge about Python, PHP, .NET, SQL, general N/W (Network) Management Functions, and a deeper understanding of virtual networks. Besides, you should work whippily with cross-functional team members who can uninterruptedly provide application product support for better budgeting and forecasting of project analysis migrated to the cloud. What else does an organization need now to integrate all their server-based technologies and deploy their products and services negotiating well with the interests and loyalty of their customers in a shorter period of time?  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud Architect&lt;br&gt;
Cloud Architect is another cloud-based career opportunity in which you will act as a person responsibly preparing a cloud-computing strategy inclusive of action plans and designs for cloud systems. Thinking if I can become this sort of person who has the potential of moving the business processes of various organizations to the cloud platform!! Yes, you can achieve milestones in this career opportunity and for that, you should have a thorough understanding of DNS i.e. Domain Name System, TCP and IP protocols, and other aspects of computer networks. Side-by-side, you should also be having flexibility in computer programming languages like JavaScript, Python, Go, and Java and can work on the related projects with minimal help or guidance. So, you can proceed ahead on the path of becoming a Cloud Architect who can work well on his/her day-to-day expectations like negotiating third-party contracts, by communicating with vendors, related to hardware, cloud technologies; closely working with IT security to monitor privacy and incidents responding to that as per scaled budgets and estimation costs of cloud adoption plans.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud Consultant&lt;br&gt;
A Cloud Consultant is always on the course of providing technical researches and studies that justify his/her cloud management plans along with the suggestions regarding the cloud services and architecture adhered to by the organization as per its requirements. Planning to reserve your seat for this job role!! Yes, you can but do this after you acquire a strong IT background for yourself so that you can implement, migrate, design, or maintain cloud applications and the business processes associated with any of those applications. And for doing this better, you must have an in-depth knowledge of at least one operating system from this list: a) Windows b) Linux c) Ubuntu d) Fedora; basics of HTML Apex, JavaScript, and lastly, excellent customer service skills so that you can help the clients meet their requirements. Hence, the time has now come to showcase the IT background acquired by you, consisting of in-depth knowledge about OSs, networking protocols, communication, and technical skills for your as well as the organization’s growth for which you will be working in your future endeavors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DevOps Cloud Engineer&lt;br&gt;
DevOps Cloud Engineers are intensively involved with coordinating with various cloud developers with the sole purpose of integrating cloud-based solutions for better performance of cloud-based projects bound to the organization’s architecture. And primarily, this architecture revolves around technologies like Google Cloud Program, Microsoft Azure, or AWS. So, you need to excel yourself on any of those technologies and simultaneously, on the programming languages like Ruby, Java, Python, or Pearl. After you excel yourself with the ones aforementioned, you will be collaborating with the members of Research and Development like the ones known in the market as Developers to deliver automated solutions regarding expansion capability of the existing software, monitoring the users’ feedbacks and responses towards the newer product release and communicating the same with R&amp;amp;D teams for an improvised product’s interface intuitive from user’s perspective. Just enroll yourself in any of the industry-led training which will help you make a cakewalk on the day-to-day expectations of a DevOps Cloud Engineer!!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud Infrastructure Engineer&lt;br&gt;
The job role of a cloud engineer is to keep on revolving around a motto and that is developing a secure and robust cloud-based infrastructure that can associate itself well with the systems somewhere demanding cloud networks. Indeed, the infrastructure engineers work closely with H/W i.e. Hardware Engineers and other developers gifted with excellent thinking, analytical, and verbal skills. Imagining what I need to do to become a person known in the market for assessing an organization’s existing infrastructure and explore the options through which the infrastructure can be moved or shifted to the cloud!! For this, you need to be effective with Python, Go, Linux, SLAs (Service Level Agreements)/SLOs (Service Level Objectives), and high-transactional IP Routing protocols. Only then, you can execute the determined best course of action in accordance with the roles and responsibilities assigned to you for this position on which you will be working on a daily or quarterly basis. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud Security Engineer&lt;br&gt;
A Cloud Security Engineer never takes a step back when it comes to attracting organizations with the solutions related to designing and workload implementation on cloud-based systems in a secure manner. Wondering how the security engineer uses the potential of the cloud to deploy solutions!! To achieve the same, the engineer creates cloud-based programs that can be installed, maintained, or upgraded on the available cloud computing environments. Later, threat simulations and penetration tests are performed to determine whether or not risks are there impacting the security design and application development. If required, a set of practices like the use of cryptography, data encryption, MFA i.e. Multi-Factor Authentication, and Single Sign-In can be implemented to give people security recommendations while detecting incidents. Noteworthily, you should try becoming an in-demand cloud security engineer who knows about programming languages like Java, Python, but is handier with upgrading the existing security environments an organization may adopt thereby serving as the voice of their customers.      &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data Engineer&lt;br&gt;
Data Engineer is always on the better side of the coin by preparing data stored encrypted over the cloud for not only the analytical but the operational uses as well. Thinking about how that data is prepared!! For doing so, data engineers take the help of data acquisition methods like sharing, transforming, and purchasing of data to build data lakes from the relevant and multiple data sources keeping in mind auditing and data governance. Many times, they need to align the cloud infrastructure with the existing business requirements through programming languages like MongoDB, SQL, Python, and tools like Apache Spark, Amazon Redshift, and Snowflake. Simply, they are enthusiastic with their identified ways of improving efficiency, quality, and reliability of data developed, constructed, or maintained by taking updates from the stakeholders patient enough to govern the creative translations performed by the data engineers. Without any doubt, you can also be a part of this better side of the coin just after you participate in analyzing data through programming languages and tools essential for functional and technical design support in detail.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Full-Stack Developer&lt;br&gt;
Full-Stack Developers, honestly speaking, are the prime-time engineers of today’s technologically advanced world. Anticipating how they are listed in primetime!! Those Full-Stack Developers work dedicatedly with mobile, web, or native application stacks thereby helping clients during every planning phase of the assigned or upcoming projects. Furthermore, they can descriptively work with both front-end and back-end development ideas with their extensive programming knowledge of CSS, JavaScript, and HTML essential for front-end whereas knowledge of PHP, Angular JS, Apache, and Linux for back-end. And all this is vital for repeatable business continuity and scalability. Are you curious to be friends with the roles and responsibilities of a Full-Stack Developer? They are like developing precisely front-end web architecture that meets both the technical and customer needs, designing and then developing APIs for wider reach, and creating databases plus the servers of variable compatibility levels which are accessed speedily from mobile or web. So, you have a chance to move forward continuously on the path of development either front-end/ backend and work with stacks well-relatable with the functional capabilities of mobile, web, or native cloud applications. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud System Administrator&lt;br&gt;
Cloud System Administrator has a knack for maintaining, troubleshooting, and developing the network connections through their real-world experience of cloud-network types and managing on-demand firewall related requests. Besides, the administrator also mixes up with implementing and defining policies for cloud-based systems so that the customers can speedily communicate with all the services that systems can potentially reciprocate live. This helps the organization a lot since they are assured of the seamless delivery of all of their services at every level – small or large. Calculating if your skills can help you get yourself introduced to the cloud system administrator job role!! Yes, you are free to involve in the operational efficiency demanded by the role through coding languages like Python, Ruby, Pearl, Java, or .NET; familiarity with tools like Puppet, Chef, &amp;amp; Ansible properly administering the network types all the time. All this will benefit you really while you are shaping your career as a Cloud System Administrator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI Developer&lt;br&gt;
UI Developer as the name translates itself inches day-by-day towards translating creatively software design components and associated ideas into reality. Contemplating how a UI Developer handles such an innovative translation!! The answer is that with the smarter use of front-end technologies like Angular, Flutter, frameworks like Django, and languages like CSS, Java; the translations are handled creatively by a UI Developer. Collaboratively, the developer will be writing Unit Tests and also working responsibly with QA engineers to define end-to-end test cases somewhere involved with agility and user satisfaction. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>cloudcomputing</category>
    </item>
    <item>
      <title>Ddosify | High-performance load testing tool, written in Golang (opensource) ⚡</title>
      <author>Fatih Baltacı</author>
      <pubDate>Wed, 13 Oct 2021 21:58:49 +0000</pubDate>
      <link>https://dev.to/fatihbaltaci/ddosify-high-performance-load-testing-tool-written-in-golang-opensource-5a1k</link>
      <guid>https://dev.to/fatihbaltaci/ddosify-high-performance-load-testing-tool-written-in-golang-opensource-5a1k</guid>
      <description>&lt;p&gt;Hi All,&lt;br&gt;
I want to introduce a brand-new open source load testing tool Ddosify. We aimed to create a multi-protocol, easy-to-use, high-performance performance testing tool. 🚀&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ddosify"&gt;
        ddosify
      &lt;/a&gt; / &lt;a href="https://github.com/ddosify/ddosify"&gt;
        ddosify
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      High-performance load testing tool, written in Golang.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
    &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/ddosify/ddosify/master/assets/ddosify-logo.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ySuEOWt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ddosify/ddosify/master/assets/ddosify-logo.svg" alt="Ddosify logo" width="336px"&gt;&lt;/a&gt;&lt;br&gt;
    Ddosify - High-performance load testing tool
&lt;/h1&gt;
&lt;p&gt;
    &lt;a href="https://github.com/ddosify/ddosify/releases"&gt;&lt;img src="https://camo.githubusercontent.com/138de14bdb165b2e4a8994067c9e050b4367c3a8c9ec181f13dfda94f8d22f0e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f64646f736966792f64646f736966793f7374796c653d666f722d7468652d6261646765266c6f676f3d67697468756226636f6c6f723d6f72616e6765" alt="ddosify latest version"&gt;&lt;/a&gt; 
    &lt;a href="https://github.com/ddosify/ddosify/actions/workflows/test.yml"&gt;&lt;img src="https://camo.githubusercontent.com/b2715571b6f0f99fe4f081f5d616a00db28835e1568e114aae4c943326705f8e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f64646f736966792f64646f736966792f546573743f7374796c653d666f722d7468652d6261646765266c6f676f3d676974687562" alt="ddosify build result"&gt;&lt;/a&gt; 
    &lt;a href="https://pkg.go.dev/go.ddosify.com/ddosify" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e742a3e5e86bba9b26cac3b21b0c71f8493fa962a538ed22465958c58fffeeec/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f676f2d6d6f642f676f2d76657273696f6e2f64646f736966792f64646f736966793f7374796c653d666f722d7468652d6261646765266c6f676f3d676f" alt="golang version"&gt;&lt;/a&gt; 
    &lt;a href="https://app.codecov.io/gh/ddosify/ddosify" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9858e97d3adbac0fe92b564d27fe428d3dad72f74905f51347ec5f2087e82299/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f64646f736966792f64646f736966793f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6f6e65" alt="go coverage"&gt;&lt;/a&gt; 
    &lt;a href="https://goreportcard.com/report/github.com/ddosify/ddosify" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cbe972bb0ee4832494660db964fba41c8879849b31c1cb13189c1ae0b903d3b9/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f64646f736966792f64646f736966793f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6f6e65" alt="go report"&gt;&lt;/a&gt; 
    &lt;a href="https://github.com/ddosify/ddosify/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/a02117779f729175ddbc2d588783ec49045aafc3d96b3039bdf9db0636c65bbf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c4943454e53452d4147504c2d2d332e302d6f72616e67653f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6f6e65" alt="ddosify license"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/ddosify/ddosify/master/assets/ddosify-quick-start.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GtLXXgQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/ddosify/ddosify/master/assets/ddosify-quick-start.gif" alt="Ddosify - High-performance load testing tool quick start" width="900px"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Features&lt;/h2&gt;

&lt;p&gt;✔️ Protocol Agnostic - Currently supporting &lt;em&gt;HTTP, HTTPS, HTTP/2&lt;/em&gt;. Other protocols are on the way.&lt;/p&gt;

&lt;p&gt;✔️ Scenario-Based - Create your flow in a JSON file. Without a line of code!&lt;/p&gt;

&lt;p&gt;✔️ Different Load Types - Test your system's limits across different load types.&lt;/p&gt;

&lt;h2&gt;
Installation&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ddosify&lt;/code&gt; is available via &lt;a href="https://hub.docker.com/ddosify/ddosify" rel="nofollow"&gt;Docker&lt;/a&gt;, &lt;a href="https://github.com/ddosify/ddosify#homebrew-tap-macos-and-linux"&gt;Homebrew Tap&lt;/a&gt;, and downloadable pre-compiled binaries from the &lt;a href="https://github.com/ddosify/ddosify/releases/latest"&gt;releases page&lt;/a&gt; for macOS, Linux and Windows.&lt;/p&gt;

&lt;h3&gt;
Docker&lt;/h3&gt;

&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;docker run -it --rm ddosify/ddosify&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Homebrew Tap (macOS and Linux)&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;brew install ddosify/tap/ddosify&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
apk, deb, rpm packages&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For Redhat based (Fedora, CentOS, RHEL, etc.)&lt;/span&gt;
rpm -i https://github.com/ddosify/ddosify/releases/download/v0.1.1/ddosify_amd64.rpm

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For Debian based (Ubuntu, Linux Mint, etc.)&lt;/span&gt;
wget https://github.com/ddosify/ddosify/releases/download/v0.1.1/ddosify_amd64.deb
dpkg -i ddosify_amd64.deb

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For Alpine&lt;/span&gt;
wget https://github.com/ddosify/ddosify/releases/download/v0.1.1/ddosify_amd64.apk
apk add --allow-untrusted ddosify_amd64.apk&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Using the convenience script (macOS and Linux)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The script requires root or sudo privileges to move ddosify binary to &lt;code&gt;/usr/local/bin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The script attempts to…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ddosify/ddosify"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/ddosify/ddosify"&gt;https://github.com/ddosify/ddosify&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is currently supporting HTTP(S), HTTP/2. We are going to add as many protocols as possible. So, if you need to perform a load test for a specific protocol, please contact me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test plan creation can be achieved with a configuration(JSON) file. You don’t need to write any line of code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I said, our primary focus is creating a load test tool that can do anything related to load testing with the easiest usage. If you think current tools do not meet your requirements, please contact me so we can improve Ddosify based on your needs. ⚡&lt;/p&gt;

&lt;p&gt;Feedback is always welcome. Have a lovely day. &lt;/p&gt;

</description>
      <category>testing</category>
      <category>go</category>
      <category>devops</category>
      <category>performance</category>
    </item>
    <item>
      <title>Build an Embeddable Widget using Preact and the Shadow DOM</title>
      <author>Coleman Imhoff</author>
      <pubDate>Wed, 13 Oct 2021 21:36:50 +0000</pubDate>
      <link>https://dev.to/companycam/build-an-embeddable-widget-using-preact-and-the-shadow-dom-33lm</link>
      <guid>https://dev.to/companycam/build-an-embeddable-widget-using-preact-and-the-shadow-dom-33lm</guid>
      <description>&lt;p&gt;Our team at &lt;a href="https://companycam.com/"&gt;CompanyCam&lt;/a&gt; was tasked with building a widget that our users could embed on their websites. The widget needed to be easy to install, responsive, and provide a fullscreen application experience. This article introduces and explains the technical decisions made and how we got there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discovery"&gt;
  &lt;/a&gt;
  Discovery
&lt;/h2&gt;

&lt;p&gt;Before jumping into the code, I want to quickly discuss some things our team learned during discovery. Hopefully, this will assist you in making the right decisions for your project.&lt;/p&gt;

&lt;p&gt;After learning about the details of the product, we found that the codebase had two requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encapsulation"&gt;
  &lt;/a&gt;
  Encapsulation
&lt;/h3&gt;

&lt;p&gt;Our team needed to prevent external CSS from cascading into our code. In addition, our styling needed to be scoped to our application. We explored wrapping the widget in an iFrame, which provides &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe"&gt;a nested browsing context&lt;/a&gt;.  This offered the encapsulation we needed, but we found it difficult to control the iFrame in order to provide a quality fullscreen experience. The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API"&gt;Fullscreen API&lt;/a&gt; was a potential solution, but it did not hold the required &lt;a href="https://caniuse.com/fullscreen"&gt;browser support&lt;/a&gt;. Using an iFrame to encapsulate a smaller product could be a great solution, but did not fit our use case.&lt;/p&gt;

&lt;p&gt;We turned our attention to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"&gt;Shadow DOM API&lt;/a&gt;. The Shadow DOM provides a way to attach a hidden DOM tree to any element. This creates encapsulation, but doesn't limit your ability to have control of the application. In addition, the Shadow DOM API has &lt;a href="https://caniuse.com/?search=attachShadow"&gt;good browser support&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#small-bundle"&gt;
  &lt;/a&gt;
  Small Bundle
&lt;/h3&gt;

&lt;p&gt;It's imperative that the widget loads &lt;em&gt;quickly&lt;/em&gt;. With the strategy the team had in place, it was clear that it was going to be difficult to code-split our application. At CompanyCam, engineers write user interfaces in &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; therefore it made sense to stick with that.&lt;/p&gt;

&lt;p&gt;As we added 3rd party libraries, our bundle size grew. We found that &lt;a href="https://preactjs.com/"&gt;Preact&lt;/a&gt; was a good solution to this problem. It provides all the same features as React, but in a much smaller package. You can compare the unpacked size of &lt;a href="https://www.npmjs.com/package/preact"&gt;Preact&lt;/a&gt; to a combined &lt;a href="https://www.npmjs.com/package/react"&gt;React&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/react-dom"&gt;React-DOM&lt;/a&gt; and see a significant difference!&lt;/p&gt;

&lt;p&gt;Now, let's jump into some code! Feel free to clone &lt;a href="https://github.com/colemanimhoff/preact-shadow-dom-starter"&gt;this starter repo&lt;/a&gt; if a working example is helpful for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mounting-your-app-with-a-shadow-dom-layer"&gt;
  &lt;/a&gt;
  Mounting Your App with a Shadow DOM Layer
&lt;/h2&gt;

&lt;p&gt;Preact is easy to &lt;a href="https://preactjs.com/guide/v10/getting-started/#integrating-into-an-existing-pipeline"&gt;integrate into an existing project&lt;/a&gt;. Mounting our Preact &lt;code&gt;App&lt;/code&gt; component should look similar to React.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/App.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add a Shadow DOM layer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/App.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// app shadow root&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can attach a Shadow DOM layer to a regular DOM node, called a shadow host. We can do this by calling the &lt;code&gt;attachShadow&lt;/code&gt; method, which takes &lt;code&gt;options&lt;/code&gt; as a parameter. Passing &lt;code&gt;mode&lt;/code&gt; with the value &lt;code&gt;open&lt;/code&gt; allows the shadow DOM to be accessible through the &lt;code&gt;shadowRoot&lt;/code&gt; property. The other value for &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;closed&lt;/code&gt;, which results in &lt;code&gt;shadowRoot&lt;/code&gt; returning &lt;code&gt;null&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;To verify things are in working order, we can open our &lt;br&gt;
browser's developer tools and and look at the DOM tree. Here, we can see our Shadow DOM layer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59VUSADF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijtt3i0jyy1gntsbxfz8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59VUSADF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijtt3i0jyy1gntsbxfz8.png" alt="Screen Shot 2021-09-30 at 2.01.52 PM-1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#styling-the-shadow-dom"&gt;
  &lt;/a&gt;
  Styling the Shadow DOM
&lt;/h2&gt;

&lt;p&gt;Styles must be scoped inside the Shadow DOM in order to render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/App.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// app shadow root&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// inject styles&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styleTag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;style&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;styleTag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styleTag&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're using webpack, keep in mind you will need &lt;a href="https://webpack.js.org/loaders/css-loader/"&gt;css-loader&lt;/a&gt; in order for this approach to work. Create a &lt;code&gt;style&lt;/code&gt; tag and set its &lt;code&gt;innerHTML&lt;/code&gt; to an imported stylesheet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YpcOFrxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vl4im01rjq69ia45zxz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YpcOFrxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vl4im01rjq69ia45zxz.png" alt="Screen Shot 2021-10-07 at 10.44.27 AM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As our application grew, managing our styles became cumbersome and our team wanted to find another solution. At CompanyCam, our designers enjoy designing our products with &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt;. With &lt;code&gt;styled-components&lt;/code&gt;, a &lt;a href="https://styled-components.com/docs/advanced#existing-css"&gt;generated stylesheet is injected&lt;/a&gt; at the end of the &lt;code&gt;head&lt;/code&gt; of the document. Due to our Shadow DOM layer, this won't work without some configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #e155f5;
  font-family: sans-serif;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hey, Shadow DOM!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://styled-components.com/docs/api#stylesheetmanager"&gt;StyleSheetManager&lt;/a&gt; helper component allows us to modify how styles are processed. Wrap it around the &lt;code&gt;App&lt;/code&gt; component's &lt;code&gt;children&lt;/code&gt; and pass the &lt;code&gt;shadowRoot&lt;/code&gt; of the shadow host as the value of &lt;code&gt;target&lt;/code&gt;. This provides an alternate DOM node to inject styles into.&lt;/p&gt;

&lt;p&gt;Just like the previous technique, we can see our styles scoped within the Shadow DOM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lReOSyo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y01nycmwjzl6bnn1onwo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lReOSyo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y01nycmwjzl6bnn1onwo.png" alt="Screen Shot 2021-10-07 at 10.53.48 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-inheritance"&gt;
  &lt;/a&gt;
  Avoid Inheritance
&lt;/h2&gt;

&lt;p&gt;The Shadow DOM will prevent outside CSS selectors from reaching any contained markup. But, it is possible for elements in Shadow DOM to &lt;a href="https://www.w3.org/TR/css-scoping-1/#shadow-cascading"&gt;inherit CSS values&lt;/a&gt;. We can &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/initial"&gt;reset properties to their default values&lt;/a&gt; by declaring the the property &lt;code&gt;all&lt;/code&gt; to the value &lt;code&gt;initial&lt;/code&gt; on the parent element of your application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #e155f5;
  font-family: sans-serif;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WidgetContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  all: initial;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WidgetContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hey, Shadow DOM!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;WidgetContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#win-the-stacking-order-battle-with-portals"&gt;
  &lt;/a&gt;
  Win the Stacking Order Battle with Portals
&lt;/h2&gt;

&lt;p&gt;Whether it's Wordpress, Squarespace, Wix, or something from scratch, our widget needed to live on any website. Since &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context#the_example"&gt;stacking order depends on the DOM tree hierarchy&lt;/a&gt;, we immediately saw &lt;code&gt;z-index&lt;/code&gt; issues in our fullscreen components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sb4yvad7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/httqp2k5lo82jwxj8zll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sb4yvad7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/httqp2k5lo82jwxj8zll.png" alt="Screen Shot 2021-10-07 at 11.57.11 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="(https://reactjs.org/docs/portals.html)"&gt;Portals&lt;/a&gt; provide a way to render &lt;code&gt;children&lt;/code&gt; into a DOM node which exists outside the context of the application. You can mount your &lt;code&gt;Portal&lt;/code&gt; to any DOM node. In our case, we needed to render these fullscreen components as high in the DOM tree as possible. Therefore, we can append our &lt;code&gt;Portal&lt;/code&gt; to the &lt;code&gt;body&lt;/code&gt; of the document we are installing the widget on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s0_3BzNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkpk08269n5e2zltlu7n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s0_3BzNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkpk08269n5e2zltlu7n.png" alt="Screen Shot 2021-10-07 at 11.57.17 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's create our &lt;code&gt;Portal&lt;/code&gt; by starting at the root of our application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/App.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// shadow portal root&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;portalRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;portal-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// app shadow root&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a shadow host for the &lt;code&gt;Portal&lt;/code&gt; component and give it an &lt;code&gt;id&lt;/code&gt;. Then, just like we did with &lt;code&gt;appRoot&lt;/code&gt;, attach a new Shadow DOM layer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Fragment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact/hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createPortal&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact/compat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Portal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PortalContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
    all: initial;
  `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;portalRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#portal-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createPortal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PortalContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PortalContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Portal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create the &lt;code&gt;Portal&lt;/code&gt; component. Add an effect to append  &lt;code&gt;portalRoot&lt;/code&gt; to the parent element of the component. From there, pass &lt;code&gt;children&lt;/code&gt; and &lt;code&gt;portalRoot.shadowRoot&lt;/code&gt; to &lt;code&gt;createPortal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Remember to scope your styles to the &lt;code&gt;Portal&lt;/code&gt; Shadow DOM layer using &lt;code&gt;StyleSheetManager&lt;/code&gt; and reset child elements' styles to their default values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Portal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Portal.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #e155f5;
  font-family: sans-serif;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WidgetContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  all: initial;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WidgetContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hey, Shadow DOM!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Portal&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hey, Shadow Portal!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Portal&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;WidgetContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can wrap any fullscreen component within our &lt;code&gt;Portal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G37-tCSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ork0tbw48vvafvuq7d44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G37-tCSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ork0tbw48vvafvuq7d44.png" alt="Screen Shot 2021-10-07 at 4.09.34 PM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Recently, our team has &lt;a href="https://companycam.com/showcases"&gt;released the widget to GA&lt;/a&gt;. The techniques outlined above have allowed us to build a rich application experience with a small codebase that is... &lt;em&gt;mostly&lt;/em&gt; encapsulated. We still run into the occasional &lt;code&gt;z-index&lt;/code&gt; issue or JavaScript event conflict provided by a website builder theme. Overall, widget installs have been a success.&lt;/p&gt;

</description>
      <category>preact</category>
      <category>shadowdom</category>
      <category>webcomponents</category>
      <category>styledcomponents</category>
    </item>
    <item>
      <title>The difficult journey to land the first tech job.</title>
      <author>Thiago Tavares</author>
      <pubDate>Wed, 13 Oct 2021 20:55:37 +0000</pubDate>
      <link>https://dev.to/thiagoltavares/the-difficult-journey-to-land-the-first-tech-job-1cdg</link>
      <guid>https://dev.to/thiagoltavares/the-difficult-journey-to-land-the-first-tech-job-1cdg</guid>
      <description>&lt;p&gt;I just finished college, and now? I did a code Bootcamp, and now? Self-taught and now?&lt;/p&gt;

&lt;p&gt;These are common questions in the minds of many new talents in the IT area, full of new skills, set out to land their first job in the software development area. Companies need new talented people, and new talented people need companies, but why these two doesn't match?&lt;/p&gt;

&lt;p&gt;Landing the first job becomes a paradox. Companies want programmers with &lt;strong&gt;experience&lt;/strong&gt;, but these prodigies have just left college with none. And this search is endless, nowadays even for internships they want &lt;strong&gt;experience&lt;/strong&gt;, &lt;strong&gt;how to get a job if I don't have experience and how to get experience if I don't have a job?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1QargKWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn78uy8hf6xqagc6q1if.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1QargKWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn78uy8hf6xqagc6q1if.png" alt="question"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The interviews begin, the first one we are excited, on the fifth we are anxious for a positive answer, on the tenth we think we are not good enough, on the 30th we don't even know what to think. Almost always with the same feedback, and most of the time, you don't even have feedback.&lt;/p&gt;

&lt;p&gt;I had to go through many interviews in the past to understand that we also need to study for interviews, study the company we want to join, the vacancy, the position, adapt the curriculum to the desired position, after all, the blessed &lt;strong&gt;experience&lt;/strong&gt; is still the "main"!&lt;/p&gt;

&lt;p&gt;We can consider ourselves lucky because we can get &lt;strong&gt;experience&lt;/strong&gt; putting our knowledge into practice. We are not like doctors who cannot make mistakes or "play" to get &lt;strong&gt;experience&lt;/strong&gt;. We are programmers, and we need only a computer to get our hands dirty.&lt;/p&gt;

&lt;p&gt;Do you know that open position in that e-commerce company you want so much? How about studying the company, seeing what technologies it uses, and then putting into practice what you know by creating something simple like, for example, a homepage with products, then take more risks and try to create a flow of adding products to a cart. You can "play" without being afraid of making mistakes because you won't hurt anyone with your try, at least you'll create something ugly, and that doesn't even work, but you'll learn with your &lt;strong&gt;experience&lt;/strong&gt;... And look at her there, the so dreamed &lt;strong&gt;EXPERIENCE&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With all that in mind, it will be your turn to yells "I did it!" so don't lose focus, keep trying with everything you have, you can.&lt;/p&gt;

&lt;p&gt;And finally, one last tip, don't forget to organize your interview schedule with the recruiter's name, date, time, company name, frequently asked questions, etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;p.s. take advantage and create your app to persist your interviews.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>beginners</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>Welcome Thread - v146</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 13 Oct 2021 20:41:08 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v146-5coa</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v146-5coa</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0Exl2gzkfMptFOGA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0Exl2gzkfMptFOGA/giphy.gif" alt="Yo graphic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>A practical introduction to git – jumping in with both feet</title>
      <author>s-heins</author>
      <pubDate>Wed, 13 Oct 2021 20:08:06 +0000</pubDate>
      <link>https://dev.to/sheins/-a-practical-introduction-to-git-jumping-in-with-both-feet-2o56</link>
      <guid>https://dev.to/sheins/-a-practical-introduction-to-git-jumping-in-with-both-feet-2o56</guid>
      <description>&lt;p&gt;If you're a developer, you have probably heard about the version control system, git. If you haven't used it yourself yet, or not a lot, you might also be a bit scared by all the different words – commits, branches, pushing, cherry-picking, rebasing, … what is all that stuff? And why is version control so hard? What if I do the wrong thing and I end up losing everything?&lt;/p&gt;

&lt;p&gt;First up, git doesn't lose anything you have committed. It might be a bit harder to find but don't despair. We'll get you there.&lt;br&gt;
But let's start at the beginning without any looming threat of losing your changes.&lt;/p&gt;

&lt;p&gt;This will be the first article in a series and it will tell you how to set up your repository from the command line, how to add changes and save ("commit") them, how to set your name and email address to be added as metadata to those changes, and how to do define a git alias, namely one to get a pretty git tree of your changes in the console.&lt;/p&gt;

&lt;p&gt;(Cover image by &lt;a href="https://freeimages.com/photographer/nexxy-42715"&gt;Nerry Burg&lt;/a&gt; from &lt;a href="https://freeimages.com"&gt;FreeImages&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-version-control"&gt;
  &lt;/a&gt;
  Why version control?
&lt;/h2&gt;

&lt;p&gt;If you add some files or change their contents, you'll want to have a way to save your progress. The difference between having the file in a version control system such as git rather than just saving it on your hard drive is that you have a history of the file along with additional metadata – you could revert back to an old version if you wanted to, look at exactly which changes were introduced when, by whom, and, if they wrote a meaningful message, why they did those changes.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#your-task"&gt;
  &lt;/a&gt;
  Your task
&lt;/h2&gt;

&lt;p&gt;Let's say you're tasked with creating an encyclopedia on animals. This is something that will require a lot of work, and re-working articles, so you want to know your articles are safe and sound. You might also want to revert some changes if your editor tells you to get rid of that article on flamingos one day and then changes their mind the next. You decide to start a git repository to commit your changes.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#initializing-your-git-repository"&gt;
  &lt;/a&gt;
  Initializing your git repository
&lt;/h3&gt;

&lt;p&gt;In your shell, create a new directory and initialize your git repository by running &lt;code&gt;git init&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9_11rn59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0g1y7tkm4u0ep37xg81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9_11rn59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0g1y7tkm4u0ep37xg81.png" alt="Initializing a git repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, this creates to a hidden folder &lt;code&gt;.git&lt;/code&gt;. If we delete this folder again, your directory will no longer be a git repository.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configure"&gt;
  &lt;/a&gt;
  Configure
&lt;/h3&gt;

&lt;p&gt;So that other people know whom to contact regarding the changes you introduced because they might have some questions (or if you want to be able to run into some code and then marvel at the fact that these changes here were done by yourself a year ago and now you can't remember very much about them), you will want to set your name and email in your git config.&lt;br&gt;
You can either do so globally for the current logged-in user by running it with the &lt;code&gt;--global&lt;/code&gt; modifier which sets it for all repositories you commit to from this user on your machine, or for just this one repository if you run these commands with the &lt;code&gt;--local&lt;/code&gt; flag or leaving out the flag altogether since "local" is the default setting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"Evelyn Example"&lt;/span&gt;
git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email evelyn@example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-started-on-content"&gt;
  &lt;/a&gt;
  Getting started on content
&lt;/h2&gt;

&lt;p&gt;Now that we've got this out of the way, let's get started!&lt;br&gt;
You might have noticed that git has automatically created a branch named "main" for us (or, depending on your settings, this may also be called "master". If you want to change the name of the default branch that gets created on running git init to something other than &lt;code&gt;master&lt;/code&gt;, you can run &lt;code&gt;git config --global init.defaultBranch main&lt;/code&gt; , or whichever name you prefer instead of &lt;code&gt;main&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Depending on which approach you are using when developing, you may work with additional branches, then creating merge requests that need to be approved so you can move these changes onto the main branch, or alternatively, just work with the main branch.&lt;br&gt;
Let's assume we're the only collaborator on this encyclopedia for now and thus, we can use the main branch to make our changes and will not run into trouble. (If multiple people are working on just one branch, it requires a team that is highly coordinated so those changes keep getting reviewed)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#adding-files"&gt;
  &lt;/a&gt;
  Adding files
&lt;/h3&gt;

&lt;p&gt;At first, we might want to create a list of animals we want to write articles on. We create a file &lt;code&gt;animals-to-write-about&lt;/code&gt; and add a line &lt;code&gt;house cat&lt;/code&gt; because, hey, everyone seems to be crazy about cats, so our encyclopedia needs to have an article on them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d7mijN2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbv1e4wcjaoj8nubuojk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d7mijN2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbv1e4wcjaoj8nubuojk.png" alt="Adding a new file to the git repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to know what the current status of our repository is, we can run &lt;code&gt;git status&lt;/code&gt;.&lt;br&gt;
Git says our file is an &lt;em&gt;untracked file&lt;/em&gt;… but what does that mean?&lt;/p&gt;

&lt;p&gt;If git does not yet know about a file, it is &lt;strong&gt;untracked&lt;/strong&gt;. If we want to add it to git, we can run &lt;code&gt;git add &amp;lt;file&amp;gt;&lt;/code&gt; or just add all files with &lt;code&gt;git add .&lt;/code&gt; (the dot at the end means all files in the current directory and sub-directories). In the next step, we can then &lt;code&gt;git commit&lt;/code&gt; these files. Only files that have been committed are safe from being lost, so we want to make sure we always commit any changes that we want to keep.&lt;br&gt;
By adding the &lt;code&gt;-m&lt;/code&gt; flag and then a note in quotation marks or single quotes, we can add a commit message. This should always start with an upper case verb in the present tense. For more pointers on how to write good commit messages, have a look at &lt;a href="https://chris.beams.io/posts/git-commit/"&gt;this article by Chris Beams&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ofaprr4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnvhpbp3xjq4rtqyfcy1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ofaprr4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnvhpbp3xjq4rtqyfcy1.png" alt="Creating our first commit"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#git-aliases"&gt;
  &lt;/a&gt;
  Git aliases
&lt;/h3&gt;

&lt;p&gt;What was this &lt;code&gt;git lg&lt;/code&gt; command I just used to look at the changes? It was a git alias. This is a handy way to save all your typing energy for that encyclopedia.&lt;br&gt;
You can add your own aliases by editing the &lt;code&gt;~/.gitconfig&lt;/code&gt; file (on Linux / MacOS). My list looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# This is Git's per-user configuration file.&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;user]
    email &lt;span class="o"&gt;=&lt;/span&gt; s.heins@example.com
    name &lt;span class="o"&gt;=&lt;/span&gt; S Heins
&lt;span class="o"&gt;[&lt;/span&gt;credential]
    helper &lt;span class="o"&gt;=&lt;/span&gt; osxkeychain
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    s &lt;span class="o"&gt;=&lt;/span&gt; status
    c &lt;span class="o"&gt;=&lt;/span&gt; commit &lt;span class="nt"&gt;-m&lt;/span&gt;
    co &lt;span class="o"&gt;=&lt;/span&gt; checkout
    lg &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;clear &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git log &lt;span class="nt"&gt;--all&lt;/span&gt; &lt;span class="nt"&gt;--graph&lt;/span&gt; &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'format:%C(auto)%h%d %s  %C(magenta)[%an] (%ad)%C(reset)'&lt;/span&gt; &lt;span class="nt"&gt;--date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s1"&gt;'%d.%m.%y %H:%M'&lt;/span&gt;
    p &lt;span class="o"&gt;=&lt;/span&gt; pull &lt;span class="nt"&gt;--all&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;core]
    excludesfile &lt;span class="o"&gt;=&lt;/span&gt; /Users/heinss/.gitignore_global
&lt;span class="o"&gt;[&lt;/span&gt;commit]
    template &lt;span class="o"&gt;=&lt;/span&gt; /Users/heinss/.gitmessage.txt
&lt;span class="o"&gt;[&lt;/span&gt;pull]
    rebase &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;init]
    defaultBranch &lt;span class="o"&gt;=&lt;/span&gt; main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I highly recommend adding the alias under &lt;code&gt;lg&lt;/code&gt; for a pretty git tree right in your command line.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outlook-working-with-remotes-and-branches"&gt;
  &lt;/a&gt;
  Outlook: Working with remotes and branches
&lt;/h2&gt;

&lt;p&gt;In the next article, we will be looking at how to work with remotes in case you want to save your work somewhere other than just your local machine and how to work with branches.&lt;/p&gt;

&lt;p&gt;If you work with multiple collaborators, working with branches in conjunction with a version control service such as github or gitlab that lets you create requests to propagate these changes into the main branch enables you to first review the changes before they go into your main branch most easily. Propagating changes from one branch to the other is called &lt;em&gt;merging&lt;/em&gt; one branch into the other.&lt;br&gt;
Otherwise, collaborators would commit in the main branch and if something goes seriously wrong, they would have to roll back those changes. Or if a commit needs to be reworked, additional rework commits need to be added, potentially bloating up your tree instead of the collaborator being able to still add them to their commit before merging. There are working modes though that use only one branch; this is called trunk-based development.&lt;br&gt;
However, most teams I have worked in have chosen to work with branching and so-called &lt;em&gt;merge requests&lt;/em&gt;, also called &lt;em&gt;pull requests&lt;/em&gt;.&lt;br&gt;
More on working with branches in the next post though!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-and-command-summary"&gt;
  &lt;/a&gt;
  Conclusion and command summary
&lt;/h2&gt;

&lt;p&gt;We created our first local git repository, and added and committed a file to it!&lt;/p&gt;

&lt;p&gt;Here are some commands to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git init&lt;/code&gt; to initialize a local git repository&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git status&lt;/code&gt; to show the current status of a repository and the files it contains&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git add .&lt;/code&gt; to add all files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git commit -m 'My message'&lt;/code&gt; to commit those changes with a commit message (i.e. propagate those changes to the branch and thus keep them from being lost)&lt;/li&gt;
&lt;li&gt;setting some options in the global git config file at &lt;code&gt;~/.gitconfig&lt;/code&gt;:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git config --global user.name "Evelyn Example"&lt;/code&gt; to set the author name globally (for all git repositories)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git config --global user.email evelyn@example.com&lt;/code&gt; to set the author email address globally&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git config --global init.defaultBranch main&lt;/code&gt; to set the default branch name when initializing a new repository to &lt;code&gt;main&lt;/code&gt; globally&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>git</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
