<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why so00 DYNAMIC?</title>
      <author>Shakya Peiris</author>
      <pubDate>Wed, 09 Jun 2021 09:35:24 +0000</pubDate>
      <link>https://dev.to/shakyapeiris/why-so-dynamic-181p</link>
      <guid>https://dev.to/shakyapeiris/why-so-dynamic-181p</guid>
      <description>&lt;p&gt;Hello everyone! Hope you are reacting well. So, this is my first post in dev.to and I thought to start with a Next.Js blog. So today let's discuss how to work in dynamic pages using getStaticProps and getStaticPath.&lt;/p&gt;

&lt;p&gt;In Next.Js not like in react, they provide us file based routing and you can see those pages under pages folder. In there you can create new files with .js extension and make sure you have named it with the route you needed. (eg : if you want to have an about page you have to name that page as about.js and for '/' path you must name it as index.js). Also you can define dynamic URLs with as follows and make sure you have defined the parameter inside square brackets.&lt;/p&gt;

&lt;p&gt;eg : [blogId].js&lt;/p&gt;

&lt;p&gt;To access that parameter inside the dynamic URL, we can use useRouter hook which is imported from next/router. Then you can grab the parameter values as follows. But this is not the way we are going to follow today.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When it comes to data fetching, if we do data fetching in Next.Js as we do in react components with useEffect, that fetched content do not affect SEO because the page is hydrated from data after it pre-renders and therefor server won't be able to see that fetched data. There for we can use built in functions called as getStaticProps and getServerSideProps to fix that issue. Today I'm going to focus on getStaticProps function which is the most preferred way to do this task.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the above getStatic Props async function after the data is fetched we have to return that data inside an object with the key props so that page component will be able to access that data via props.&lt;/p&gt;

&lt;p&gt;Also, in the above page it show only data fetched for the first time to the server. There for even if changd the data in our backend API data in the component does not change. Therefor to fix that issue we can put a revalidate time out inside the returned object with revalidate key as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//this revalidates in every second&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then how can we access the url parameters? That's simple. You can pass an argument to the function called as context. Context is a nested object. From that, you can access url parameters as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="cm"&gt;/*blogId is the name of 
    parameter*/&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//this revalidates in every second&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the dev server with npm run dev with above setup you will get an array saying about getStaticPath. Now let's see how we can fix that issue.&lt;/p&gt;

&lt;p&gt;So to fix that issue you have to call a built in next.js function called getStaticPath inside your page and return an object with two keys, fallback (boolean) and paths (array) as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPath&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:[]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="cm"&gt;/*blogId is the name of 
    parameter*/&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//this revalidates in every second&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So in the above paths array you can define all the possible parameter values so that if user enters a different value than those defined ones, he/she will be redirected to a 404 page. Also, you can set fallback to false when you are in develop server and make sure you have set it true or "blocking" when you deploy your app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPath&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;param&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="na"&gt;blogId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}}})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="cm"&gt;/*blogId is the name of 
    parameter*/&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;
        &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//this revalidates in every second&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Refer the above code snippet for the complete process.&lt;br&gt;
Github Link for a same sort of project : &lt;a href="https://github.com/shakyapeiris/meetup_web.git"&gt;https://github.com/shakyapeiris/meetup_web.git&lt;/a&gt;&lt;br&gt;
So that's it! Thanks You!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Plasma Donation Website using MERN stack</title>
      <author>Neha Soni</author>
      <pubDate>Wed, 09 Jun 2021 09:10:13 +0000</pubDate>
      <link>https://dev.to/nehasoni__/plasma-donation-website-using-mern-stack-26f5</link>
      <guid>https://dev.to/nehasoni__/plasma-donation-website-using-mern-stack-26f5</guid>
      <description>&lt;p&gt;Hello amazing people 👋,&lt;/p&gt;

&lt;p&gt;Welcome to &lt;strong&gt;Plasma Donation&lt;/strong&gt; Website. As we all know, the world is suffering from the COVID-19 crisis. Our government and health care professionals are trying their best to help the patients suffering from COVID-19. Scientists are trying to discover a vaccine to cure people affected with coronavirus. There is a scientific way from which we can help to lower the death ratio or help the COVID 19 affected person. Plasma therapy is an experimental approach to treat COVID-positive patients and help them recover faster. But, in this situation, it is difficult for a patient to find a plasma donor as everybody can’t donate plasma.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-project-goal"&gt;
  &lt;/a&gt;
  Our project goal
&lt;/h2&gt;

&lt;p&gt;The main goal of our project is to make it easier for the COVID-19 patients to get a plasma donor easily as well as donate plasma if they have recovered. The system targets two types of users: the people who want to donate plasma and the people who need plasma. The user can also view the total active cases, nearby vaccine centers, hospitals address. The main objective of developing the website is to make it easier for the COVID-19 patients to get a plasma donor easily and as soon as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workflow-of-the-project"&gt;
  &lt;/a&gt;
  Workflow of the project
&lt;/h2&gt;

&lt;p&gt;The person who wants to donate his/her plasma needs to register in our application providing required information which are name, age, blood group, phone number, and location, etc.&lt;br&gt;
Patients who need plasma can also fill the form to request the plasma. Patients can directly call the donor by taking his/her contact number from the application.&lt;br&gt;
The user can also view the total active cases, recovered cases, vaccine centers in their area, hospital location, and helpline number.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uml-diagram"&gt;
  &lt;/a&gt;
  UML diagram
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--etnhm3AX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622813954455/DyyGeHtSM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--etnhm3AX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622813954455/DyyGeHtSM.png" alt="Screenshot (330).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technology-used"&gt;
  &lt;/a&gt;
  Technology Used
&lt;/h2&gt;

&lt;p&gt;In this project, we have used the following technologies :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;b&gt;Frontend&lt;/b&gt; : HTML, CSS, React.JS&lt;/li&gt;
&lt;li&gt; &lt;b&gt;Backend&lt;/b&gt; : NodeJs, Express.Js&lt;/li&gt;
&lt;li&gt; &lt;b&gt;Database&lt;/b&gt; : MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;Speed&lt;/b&gt; : This website is fast and offers great accuracy as compared to manual registered keeping.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Maintenance&lt;/b&gt; : Less maintenance is required&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;User Friendly&lt;/b&gt; : It is very easy to use and understand. It is easily workable and accessible for everyone.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Fast Results&lt;/b&gt; :  It would help you to provide plasma donors easily depending
upon the availability of it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;Internet&lt;/b&gt; : It would require an internet connection for the working of the 
website.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Auto- Verification&lt;/b&gt; : It cannot automatically verify the genuine users.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#screenshots-amp-gif"&gt;
  &lt;/a&gt;
  Screenshots &amp;amp; Gif
&lt;/h2&gt;

&lt;h3&gt; 1.) Home Page&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9vM_0iTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814397676/44XLJhPJ4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9vM_0iTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814397676/44XLJhPJ4.png" alt="HomePage.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 2.) Nearby Vaccine Centres&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z_ZzU26P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814430478/IOGF4WnKe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_ZzU26P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814430478/IOGF4WnKe.png" alt="VaccineCentres.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 3.) Hospitals List&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0lyxVOKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814466628/eDYQSt4IG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0lyxVOKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814466628/eDYQSt4IG.png" alt="HospitalsList.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 4.) Plasma Info&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/d73f39328f32563667a6c5812c0c6d7c5fbe204d9923cc96659ffe22ef85abe4/68747470733a2f2f696d372e657a6769662e636f6d2f746d702f657a6769662d372d3530373333326162666539392e676966" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/d73f39328f32563667a6c5812c0c6d7c5fbe204d9923cc96659ffe22ef85abe4/68747470733a2f2f696d372e657a6769662e636f6d2f746d702f657a6769662d372d3530373333326162666539392e676966" alt="PlasmaInfo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 5.) Donor Form&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KZpNH4EI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814570484/3Z2QmJ42WT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZpNH4EI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814570484/3Z2QmJ42WT.png" alt="DonorForm.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 6.)  Donors List&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZ5sZTaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814623017/VTHDJiNOM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZ5sZTaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814623017/VTHDJiNOM.png" alt="DonorList.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 7.) Request Form&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qn8IQQAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814665967/gjGTfr5ua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qn8IQQAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814665967/gjGTfr5ua.png" alt="RequestPlasmaForm.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 8.) Requests List&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YU-VRPdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814711149/VzF_l5WHw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YU-VRPdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814711149/VzF_l5WHw.png" alt="PlasmaRequestList.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-work"&gt;
  &lt;/a&gt;
  Future Work:-
&lt;/h2&gt;

&lt;p&gt;1.) In future, we will try to verify the genuine users.&lt;br&gt;&lt;br&gt;
2.) For now, we have just listed the hospitals in Delhi, but in the future, we will try to add hospitals of each state of India.&lt;/p&gt;

&lt;h3&gt; ✨Team&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href="https://github.com/nehasoni05"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZUFhxoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/nehasoni05.png%3Fsize%3D100"&gt;
        Neha Soni
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;a href="https://github.com/AbhishekJaswal2001"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lgLaYtdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/AbhishekJaswal2001.png%3Fsize%3D100"&gt;
        Abhishek Jaswal
      &lt;/a&gt;
    &lt;/td&gt;
     &lt;td&gt;
     &lt;a href="https://github.com/kritikakaura1518"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J_An2Fyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/kritikakaura1518.png%3Fsize%3D100"&gt;
       Kritika Kaura
    &lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
     &lt;a href="https://github.com/ridhisood04"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J43KWW6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ridhisood04.png%3Fsize%3D100"&gt;
       Ridhi Sood
    &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#contribute"&gt;
  &lt;/a&gt;
  Contribute
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;'' YOUR CONTRIBUTION MATTERS ''&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As I am a student so I am not able to add too much functionality to this project. So, if you find any problem, bug (🐞), want to add more features to this website, or want to share any kind of suggestions to improve our work please let us know by creating an  &lt;a href="https://github.com/nehasoni05/Plasma_Donation_Website/issues"&gt;issue here&lt;/a&gt;. I will also try to work more on this project so I will host it somewhere and people find it useful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;1.) ReactJS documentation:-  &lt;a href="https://reactjs.org/docs/getting-started.html"&gt;https://reactjs.org/docs/getting-started.html&lt;/a&gt; &lt;br&gt;&lt;br&gt;
2.)  NodeJS documentation:-  &lt;a href="https://nodejs.org/dist/latest-v14.x/docs/api/"&gt;https://nodejs.org/dist/latest-v14.x/docs/api/&lt;/a&gt; &lt;br&gt;&lt;br&gt;
3.) ExpressJS documentation:- &lt;a href="https://expressjs.com/en/starter/installing.html"&gt;https://expressjs.com/en/starter/installing.html&lt;/a&gt; &lt;br&gt;&lt;br&gt;
4.) MongoDB :-  &lt;a href="https://docs.mongodb.com/manual/tutorial/getting-started/"&gt;https://docs.mongodb.com/manual/tutorial/getting-started/&lt;/a&gt; &lt;br&gt;&lt;br&gt;
5.) Git and Github:-  &lt;a href="https://gist.github.com/hofmannsven/6814451"&gt;https://gist.github.com/hofmannsven/6814451&lt;/a&gt; &lt;br&gt;&lt;br&gt;
6.) W3 School &lt;br&gt;&lt;br&gt;
7.) YouTube &lt;br&gt;&lt;br&gt;
8.) Stack Overflow&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/nehasoni05/Plasma_Donation_Website"&gt;Plasma Donation Website&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;strong&gt;Working Project Video:-&lt;/strong&gt; &lt;a href="https://drive.google.com/file/d/1EFCLIF-TqjJvc2h8EJK2Guxsn3IIA-px/view?usp=sharing"&gt;Plasma Donation Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you liked this project, share it with others! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 🤝🤝
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;br&gt;
Let me know in the comment section if you have any doubts or feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You should definitely check out my other Blogs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://nehasoni.hashnode.dev/introduction-to-javascript-basics"&gt;Introduction to JavaScript: Basics&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://nehasoni.hashnode.dev/playing-with-javascript-objects-1"&gt;Playing with JavaScript Objects&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://nehasoni.hashnode.dev/7-javascript-data-structures-you-must-know"&gt;7 JavaScript Data Structures you must know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://nehasoni.hashnode.dev/digital-clock-using-javascript"&gt;Digital Clock using JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://nehasoni.hashnode.dev/25-javascript-project-with-source-code-to-build-your-skills"&gt;25+ JavaScript Project With Source Code to Build your Skills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://nehasoni.hashnode.dev/git-and-github-all-you-need-to-know"&gt;Git &amp;amp; Github: All you need to know&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://nehasoni.hashnode.dev/introduction-to-reactjs"&gt;Introduction to ReactJS
&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Happy Learning😃😃&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>node</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>I make you an esolang</title>
      <author>JavaCode7</author>
      <pubDate>Wed, 09 Jun 2021 08:47:29 +0000</pubDate>
      <link>https://dev.to/javacode7/i-make-you-an-esolang-43de</link>
      <guid>https://dev.to/javacode7/i-make-you-an-esolang-43de</guid>
      <description>&lt;p&gt;Recently, I have taken a break from writing about esolangs and I have to say, those 4 articles have really been successes 😊. I have now decided to find a balance between writing about languages (which you all seem to like 🤔) and writing about esolangs.&lt;/p&gt;

&lt;p&gt;I will make you an esolang &lt;em&gt;unconditionally&lt;/em&gt; (because I'm nice 😂) but within reason.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I will make it in either Python, JavaScript, TypeScript or Lua (you choose)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It cannot be too complex (I will reply to the comment stating if it is)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow up to 3 days 📅 for the creation of the esolang.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I have made about 3, I will write another article showcasing them and providing the code.&lt;/p&gt;

&lt;p&gt;Comment down below!!&lt;/p&gt;

</description>
      <category>esolang</category>
      <category>esoteric</category>
      <category>watercooler</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Memorable Hex codes</title>
      <author>Siddharth</author>
      <pubDate>Wed, 09 Jun 2021 08:38:20 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/memorable-hex-codes-37fg</link>
      <guid>https://dev.to/siddharthshyniben/memorable-hex-codes-37fg</guid>
      <description>&lt;p&gt;Hopefully this will save you a trip to the color picker.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;#b00b00 (deep red)&lt;/strong&gt;        - Good for errors&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#de1e7e (pink)&lt;/strong&gt;            - Delete&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#2fa (green)&lt;/strong&gt;              - Looks like tha 2FA was successful&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#ac1d1c (red, obviously)&lt;/strong&gt;  - Warning! Extremely corrosive&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#facade (pink)&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#goodn8 (almost sky blue)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#c0ffee (teal)&lt;/strong&gt;            - Yeah teal coffee&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's a lot more &lt;a href="https://nedbatchelder.com/text/hexcolors.html"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
    </item>
    <item>
      <title>These Are The Most Popular Songs To Code To</title>
      <author>Amelia Selby</author>
      <pubDate>Wed, 09 Jun 2021 08:17:23 +0000</pubDate>
      <link>https://dev.to/ameliaselby/these-are-the-most-popular-songs-to-code-to-552o</link>
      <guid>https://dev.to/ameliaselby/these-are-the-most-popular-songs-to-code-to-552o</guid>
      <description>&lt;p&gt;We all know that listening to music can help you get into the ‘zone’. It's that powerful state that developers hit from time to time where the only thing that matters is the problem you're working on.&lt;/p&gt;

&lt;p&gt;When you’re trying to focus, music is the best way to keep yourself entertained as it can be difficult to listen to podcasts or watch youtube videos. And whether it’s the passing traffic, a squeaky floorboard or dull office chitter-chatter, a cracking playlist can go a long way to blocking out unwanted noise!&lt;/p&gt;

&lt;p&gt;So, what &lt;em&gt;are&lt;/em&gt; the best songs to listen to get you into that elusive zone?&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.ko2.co.uk/most-popular-songs-to-code-to/"&gt;KO2&lt;/a&gt; decided to scrape Spotify for coding playlists and work out which songs and artists are the most popular to programme to. With a list of 58,000 songs from an eclectic mix of genres, they have been able to figure out the winner!&lt;/p&gt;

&lt;p&gt;Intrigued by who made the cut? Well, scroll down to see the results of the most popular songs and artists to code to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-most-popular-songs-to-code-to"&gt;
  &lt;/a&gt;
  The most popular songs to code to
&lt;/h2&gt;

&lt;p&gt;1.Blinding Lights - The Weeknd - 135 BPM&lt;br&gt;
2.Day One - Hans Zimmer - 96 BPM&lt;br&gt;
2.French Inhale - [bsd.u] - 80 BPM&lt;br&gt;
4.Both of Us - Idealism - 85 BPM&lt;br&gt;
4.Cornfield Chase - Hans Zimmer - 94 BPM&lt;br&gt;
4.Solar Sailer - Daft Punk - 124 BPM&lt;br&gt;
4.Time - Hans Zimmer - 127 BPM&lt;br&gt;
8.[oops] - potsu - 69 BPM&lt;br&gt;
8.Affection - Jinsang - 84 BPM&lt;br&gt;
8.controlla - Idealism - 80 BPM&lt;br&gt;
8.Snowman - WYS - 110 BPM&lt;/p&gt;

&lt;p&gt;Outshining the rest of the competition was The Weeknd’s 2019 hit, ‘Blinding Lights’, which topped the list by featuring on the most coding playlists. Whilst clearly a popular choice with programmers, the song is also a favourite all-round, with Spotify revealing that it is the second most-streamed song on the platform with over 2.2 billion listens.&lt;/p&gt;

&lt;p&gt;Close behind, and tied with [bsd.u], is ‘One Day’ by Hans Zimmer, who nabbed 3 of the top 10 spots. ‘One Day’ was written and produced for the film, Pirates of the Caribbean: At World's End, serving as the romantic theme for the movie and featuring in most of Will and Elizabeth’s scenes. Well, its soft string ostinato is clearly a popular background choice for writing code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-most-popular-artists-to-code-to"&gt;
  &lt;/a&gt;
  The most popular artists to code to
&lt;/h2&gt;

&lt;p&gt;1.Daft Punk&lt;br&gt;
2.ODESZA&lt;br&gt;
3.M83&lt;br&gt;
4.deadmau5&lt;br&gt;
4.Hans Zimmer&lt;br&gt;
6.Bonobo&lt;br&gt;
6.Jon Hopkins&lt;br&gt;
6.Tycho&lt;br&gt;
9.Ludovico Einaudi&lt;br&gt;
9.The Weeknd&lt;/p&gt;

&lt;p&gt;When looking at which artists are the most popular to code to, Daft Punk takes the top spot with their songs appearing the most frequently across the coding Spotify playlists. The French electronic musicians average over 15 million monthly listeners on the music platform in general.&lt;/p&gt;

&lt;p&gt;Sitting in second place is the American duo ODESZA, known individually as Catacombkid and BeachesBeaches, whose electronic tunes average a respectable 5 million monthly Spotify listeners on Spotify.&lt;/p&gt;

&lt;p&gt;Electronic seems to be a popular music genre for programmers getting in the zone, with The Weeknd and Daft Punk appearing in the top 10 of both lists. This isn’t surprising though, as a consistent beat can help you establish a rhythm while working; the faster the music, the faster you work, maybe?&lt;/p&gt;

&lt;p&gt;But, it’s clearly not only about the upbeat tunes when it comes to coding. The German film composer Hans Zimmer ranks three times in the top 10 of the most popular songs list, and the muted tones of lofi music scores highly in both too. A rather eclectic mix to say the least...&lt;/p&gt;

&lt;p&gt;In fact, the beats per minute (BPM) in the top songs range from a heart-racing 176 BPM in Tycho’s ‘Awake’ right down to a chilled 69 BPM in Potsu’s lofi ‘[oops]’.&lt;/p&gt;

</description>
      <category>music</category>
      <category>productivity</category>
    </item>
    <item>
      <title>I need #UI testing tool #WebApp</title>
      <author>sathishkumarkevin</author>
      <pubDate>Wed, 09 Jun 2021 08:05:27 +0000</pubDate>
      <link>https://dev.to/sathishkumarkevin/i-need-ui-testing-tool-webapp-4p59</link>
      <guid>https://dev.to/sathishkumarkevin/i-need-ui-testing-tool-webapp-4p59</guid>
      <description>&lt;p&gt;Hello,&lt;br&gt;
I would like to know tool for UI testing for modern webapp (react , angular kind of thing). Yep, most of them know tool called "selenium", but its hard to learn and write code. Could pls share tool which use less coding or without coding to create ui testing and also situmulate parallel user session? &lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to invalidate a compromised  JWT</title>
      <author>pazvanti</author>
      <pubDate>Wed, 09 Jun 2021 07:23:41 +0000</pubDate>
      <link>https://dev.to/pazvanti/how-to-invalidate-a-compromised-jwt-23ld</link>
      <guid>https://dev.to/pazvanti/how-to-invalidate-a-compromised-jwt-23ld</guid>
      <description>&lt;p&gt;In &lt;a href="https://petrepopescu.tech/2021/02/using-json-web-tokens-for-authorization/"&gt;a past article&lt;/a&gt;, I wrote about JWTs, how to generate one and how to use them for authorization. JSON Web Tokens, however, have one major drawback. Once it is generated and submitted to the client, it can’t be easily made invalid. This is a big problem if the JWT got leaked and it did not expire (or worse, it does NOT have an expiration date). That is why it is important to make sure that your JWT can be invalidated at the server-side and I will show you two methods to do this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-1-blacklisting"&gt;
  &lt;/a&gt;
  Method 1: Blacklisting
&lt;/h3&gt;

&lt;p&gt;The easiest way, at least at first glance, is to have a way of blacklisting a JWT once it is compromised. You can store all compromised JWTs in the database and when an authorization request is received, you check that the JWT used is not part of this list. This approach has one big disadvantage though: the DB can become a bottleneck due to the amount of data that you need to retrieve.&lt;/p&gt;

&lt;p&gt;For small systems, this is not a major problem, but when you have thousands of requests per second, retrieving a full list of JWTs or going to the database to do a search for the one received can really slow down processing. This can be partially mitigated by using in-memory lists and caching the blacklisted JWTs, but this can also pose a problem because you don’t know if the cache is up-to-date. For example, if your cache refreshes at 15 minutes intervals, there still is that 15 minute window when a compromised JWT can still be used.&lt;/p&gt;

&lt;p&gt;To mitigate this you can make a method for invalidating the cache once a new blacklisted JWT is added. Also, what do you do for distributed systems that have multiple instances of the same service? Another problem is that the database has to be cleaned to remove JWTs that have expired and will fail validation even if not black-listed. All these will definitely add to the complexity of the system, will make it more error-prone, and can slow down overall processing, if not done correctly. So, here is a better way!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-2-versioning-the-jwt"&gt;
  &lt;/a&gt;
  Method 2: Versioning the JWT
&lt;/h3&gt;

&lt;p&gt;The JWT can hold as much data as we need to validate it. The claims we insert during the build can be used for many purposes. So, let’s use one of the claims to also validate that the JWT is not blacklisted. I am not talking about an expiration date, this is something completely different, but of some information that we can easily correlate with the server and see if it was not marked as being invalid.&lt;/p&gt;

&lt;p&gt;I am thinking of using a “version” for the JWT. When we build the JWT for the first time for an entity (a user, a functionality, or some other category), we also store the version of the JWT for that entity. This can be in the database and it won’t provide a big overhead during processing. I will explain why a bit later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyServer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;generateJwt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;entityId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Algorithm&lt;/span&gt; &lt;span class="n"&gt;algorithm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Algorithm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;HMAC256&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mySecret"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;JWTCreator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;jwtBuilder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;JWT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withIssuer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"myServer"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withClaim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"accessGrantedBy"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withClaim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"accessArea"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;accessAreas&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withClaim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"entityId"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entityId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withClaim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"version"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jwtBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sign&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, now we have the following additional claims: entityId, version. Keep in mind that the entityId can be the userId if you are generating the access for a specific user. I only used entity to be more generic. When a JWT is received, as part of the validation process, you also check that the version is the same as the one stored on the server. Only then you consider it valid.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;hasAccess&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;DecodedJWT&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;areaToAccess&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;entityId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entityDao&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getJwtVersion&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entityId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;versionInJwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClaim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"version"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;entityIdInJwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClaim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"entityId"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;entityId&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entityIdInJwt&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;versionInJwt&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClaim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"accessArea"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;areaToAccess&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If a JWT is compromised, all you have to do is increment the version on the server by one and the JWT validation will fail.&lt;/p&gt;

&lt;p&gt;You will still need access to the database, but with good design, you won’t need any additional queries than what you will be doing anyway. For example, if the JWT is for a user, will most probably need the user information either way later on. If the JWT version is in the same table, you can retrieve it in one go along with the data you already retrieve. Even if there is no way for the JWT version to be in the same table, the access pattern will be really fast since you will do direct search by a primary key (the entityId) and the data received back is really small: a number.&lt;/p&gt;

&lt;p&gt;Also, don’t stress too much about big number. You don’t need to increment the version every time you generate a new JWT for the entity. If there was no data compromised when the previous JWT has expired, you can reuse the same version. Only if and when a token gets compromised you need to change the version for that entity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-versioning-the-jwt"&gt;
  &lt;/a&gt;
  Advantages of versioning the JWT
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;No need to keep a big blacklist of compromised JWTs&lt;/li&gt;
&lt;li&gt;Easy and direct access to the current version on the server, most probably without any additional DB access&lt;/li&gt;
&lt;li&gt;No need to synchronize data between server instances since this is done automatically by the DB&lt;/li&gt;
&lt;li&gt;No cleanup needed for expired JWTs&lt;/li&gt;
&lt;li&gt;Easy to mass invalidate JWTs in case of a wider system breach&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Article originally posted on my personal site under &lt;a href="https://petrepopescu.tech/2021/03/how-to-invalidate-a-jwt/"&gt;How to invalidate a JWT in Java&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>security</category>
      <category>jwt</category>
    </item>
    <item>
      <title>15 Best Open-Source Autonomous Driving Datasets</title>
      <author>SiaSearch</author>
      <pubDate>Wed, 09 Jun 2021 07:05:45 +0000</pubDate>
      <link>https://dev.to/siasearch/15-best-open-source-autonomous-driving-datasets-2e81</link>
      <guid>https://dev.to/siasearch/15-best-open-source-autonomous-driving-datasets-2e81</guid>
      <description>&lt;p&gt;In recent years, more and more companies and research institutions have made their &lt;a href="https://www.siasearch.io/open-data"&gt;autonomous driving datasets&lt;/a&gt; open to the public. However, the best datasets are not always easy to find, and scouring the internet for them takes time.&lt;/p&gt;

&lt;p&gt;To help, we at SiaSearch have put together a list of the top 15 open datasets for autonomous driving. The resources below collectively contain millions of data samples, many of which are already annotated. We hope this list provides you with a solid starting point for learning more about the field, or for starting your own autonomous driving project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-open-datasets-for-autonomous-driving-projects"&gt;
  &lt;/a&gt;
  Top Open Datasets for Autonomous Driving Projects
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A2D2 Dataset&lt;/strong&gt;&lt;br&gt;
The Audi Autonomous Driving Dataset (A2D2) features over 41,000 labeled with 38 features. Around 2.3 TB in total, A2D2 is split by annotation type (i.e. semantic segmentation, 3D bounding box).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ApolloScape Dataset&lt;/strong&gt;&lt;br&gt;
ApolloScape is an evolving research project that aims to foster innovation across all aspects of autonomous driving, from perception to navigation and control. Via their website, users can explore a variety of simulation tools and over 100K street view frames, 80k lidar point cloud and 1000km trajectories for urban traffic.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Argoverse Dataset&lt;/strong&gt;&lt;br&gt;
The Argoverse dataset includes 3D tracking annotations for 113 scenes and over 324,000 unique vehicle trajectories for motion forecasting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Berkeley DeepDrive Dataset&lt;/strong&gt;&lt;br&gt;
Also known as BDD 100K, the DeepDrive dataset gives users access to 100,000 annotated videos and 10 tasks to evaluate image recognition algorithms for autonomous driving. The dataset represents more than 1000 hours of driving experience with more than 100 million frames, as well as information on geographic, environmental, and weather diversity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CityScapes Dataset&lt;/strong&gt;&lt;br&gt;
CityScapes is a large-scale dataset focused on the semantic understanding of urban street scenes in 50 German cities. It features semantic, instance-wise, and dense pixel annotations for 30 classes grouped into 8 categories. The entire dataset  includes 5,000 annotated images with fine annotations, and an additional 20,000 annotated images with coarse annotations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Comma2k19 Dataset&lt;/strong&gt;&lt;br&gt;
This dataset includes 33 hours of commute time recorded on highway 280 in California. Each 1-minute scene was captured on a 20km section of highway driving between San Jose and San Francisco. The data was collected using comma EONs, which features a road-facing camera, phone GPS, thermometers and a 9-axis IMU. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Google-Landmarks Dataset&lt;/strong&gt;&lt;br&gt;
Published by Google in 2018, the Landmarks dataset is divided into two sets of images to evaluate recognition and retrieval of human-made and natural landmarks. The original dataset contains over 2 million images depicting 30 thousand unique landmarks from across the world. In 2019, Google published Landmarks-v2, an even larger dataset with 5 million images and 200k landmarks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;KITTI Vision Benchmark Suite&lt;/strong&gt;&lt;br&gt;
First released in 2012 by Geiger et al, the &lt;a href="https://www.siasearch.io/kitti-dataset/"&gt;KITTI dataset&lt;/a&gt; was released with the intent of advancing autonomous driving research with a novel set of real-world computer vision benchmarks. One of the first ever autonomous driving datasets, KITTI boasts over 4000 academic citations and counting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Level 5 Open Data&lt;/strong&gt;&lt;br&gt;
Published by popular rideshare app Lyft, the Level5 dataset is another great source for autonomous driving data. It includes over 55,000 human-labeled 3D annotated frames, surface map, and an underlying HD spatial semantic map that is captured by 7 cameras and up to 3 LiDAR sensors that can be used to contextualize the data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;nuScenes Dataset&lt;/strong&gt;&lt;br&gt;
Developed by Motional, the &lt;a href="https://www.siasearch.io/nuscenes-dataset/"&gt;nuScenes dataset&lt;/a&gt; is one of the largest open-source datasets for autonomous driving. Recorded in Boston and Singapore using a full sensor suite (32-beam LiDAR, 6 360° cameras and radars), the dataset contains over 1.44 million camera images capturing a diverse range of traffic situations, driving maneuvers, and unexpected behaviors.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Looking for more datasets? Read the entire blogpost at &lt;a href="https://www.siasearch.io/blog/best-open-source-autonomous-driving-datasets"&gt;https://www.siasearch.io/blog/best-open-source-autonomous-driving-datasets&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>datascience</category>
      <category>machinelearning</category>
      <category>database</category>
      <category>autonomousdriving</category>
    </item>
    <item>
      <title>Types and Mocking - Typescript</title>
      <author>Maina Wycliffe</author>
      <pubDate>Wed, 09 Jun 2021 06:53:47 +0000</pubDate>
      <link>https://dev.to/this-is-learning/types-and-mocking-typescript-1m00</link>
      <guid>https://dev.to/this-is-learning/types-and-mocking-typescript-1m00</guid>
      <description>&lt;p&gt;In this article, we are going to learn how to create functions which are easy to test and mock using TypeScript utility types.&lt;/p&gt;

&lt;p&gt;Let's take the following function, how do you mock it's inputs i.e. &lt;code&gt;person&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPersonsFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One common way, is to create an object of type &lt;code&gt;Person&lt;/code&gt; with only the fields being used by function and then cast the object as any, as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const person = {
    name: {
        firstName: "Wycliffe",
        lastName: "Maina"
    }
}

console.log(getPersonsFullName(person as any));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works, but you are losing the benefits of typescript typing system by casting as any, since the compiler won't type check the object &lt;code&gt;person&lt;/code&gt; being passed to the function. &lt;/p&gt;

&lt;p&gt;A good reason as to why this is not a good idea, is that if the function changes and starts using other properties or the shape of the input object changes, TypeScript will not help you. I am guilty of casting as &lt;code&gt;any&lt;/code&gt;, especially when writing mocks for tests.&lt;/p&gt;

&lt;p&gt;But, is there a better way? Yes, we can improve the function above, so that it is easier to mock the input without resulting to the above technique. One approach, which I really recommend, is to create a new type which only has the fields the function needs to run successfully, in this case the &lt;code&gt;name&lt;/code&gt; property. This can easily be achieved in Typescript using Utility Types, which you can learn more about &lt;a href="https://mainawycliffe.dev/blog/transforming-types-typescript-utility-types"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;Pick&amp;lt;T&amp;gt;&lt;/code&gt; utility type, to create a new type from Person, with only the name field i.e. picking the &lt;code&gt;name&lt;/code&gt; field from the &lt;code&gt;Person&lt;/code&gt; type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPersonsFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Pick&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, our mock example still works, but without resulting to casting as any:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Wycliffe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maina&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getPersonsFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The advantage of this is that you can still pass a person object with more properties as long as name property is present, as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Wycliffe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maina&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// this still works&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getPersonsFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Utility types such as &lt;code&gt;Omit&lt;/code&gt;, &lt;code&gt;Pick&lt;/code&gt;, &lt;code&gt;Partial&lt;/code&gt;, &lt;code&gt;Required&lt;/code&gt;, etc. can help you create new types easily that define the shape of an input object for a function. This makes it possible to define with precision what a function input type is, with just a little extra work on your part. You can learn more about TypeScript utility types in my previous article &lt;a href="https://mainawycliffe.dev/blog/transforming-types-typescript-utility-types/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This makes your functions and methods more friendly since they are taking in only what they need, making it easy to mock as seen above. Another advantage is that your functions are more re-usable as they don't place an unnecessary burden on the consumer of the function by requiring larger input than they are using.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Is coding mental health friendly?</title>
      <author>Valeria</author>
      <pubDate>Wed, 09 Jun 2021 06:50:21 +0000</pubDate>
      <link>https://dev.to/valeriavg/is-coding-mental-health-friendly-331i</link>
      <guid>https://dev.to/valeriavg/is-coding-mental-health-friendly-331i</guid>
      <description>&lt;p&gt;With our ability to work from anywhere any time it seems like an awesome choice to live stress-free. But at the same time, a lot of us have mental disorders of varying intensity. &lt;/p&gt;

&lt;p&gt;I can't help but wonder if it is because e.g. a personality disorder or generalised anxiety doesn't affect the career in dev or if the lack of social interactions actually perpetuates the problem and let the disorders bloom. &lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>mentalhealth</category>
    </item>
    <item>
      <title>Mac OS X setting up virtual hosts</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 09 Jun 2021 06:27:00 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/mac-os-x-setting-up-virtual-hosts-ga6</link>
      <guid>https://dev.to/dailydevtips1/mac-os-x-setting-up-virtual-hosts-ga6</guid>
      <description>&lt;p&gt;You might remember the days of MAMP/XAMP/WAMP? Well, for Mac OS X, we don't need these tools anymore.&lt;/p&gt;

&lt;p&gt;It's actually possible to host a website on your local Mac, and it's not as hard as you would think!&lt;/p&gt;

&lt;p&gt;Today, we'll set up a local PHP website that we can reach through our browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enabling-virtual-hosts-on-mac-os-x"&gt;
  &lt;/a&gt;
  Enabling virtual hosts on Mac OS X
&lt;/h2&gt;

&lt;p&gt;The first step to making this work is enabling virtual hosts on Mac OS X.&lt;/p&gt;

&lt;p&gt;To do this, we need to modify the &lt;code&gt;httpd.conf&lt;/code&gt; file. Execute the following command in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;nano /etc/apache2/httpd.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look for the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#Include /private/etc/apache2/extra/httpd-vhosts.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And below that, on a new line add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Include /private/etc/apache2/vhosts/&lt;span class="k"&gt;*&lt;/span&gt;.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells Apache to load all &lt;code&gt;.conf&lt;/code&gt; files in this directory.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You could also add all the hosts in the &lt;code&gt;httpd-vhost&lt;/code&gt; file, but I found this a cleaner method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we need to make the configuration files, make sure the directory exist or create it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; /etc/apache2/vhosts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can create our first configuration in that folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;nano /etc/apache2/vhosts/daily-dev-tips.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Place the following information inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
    DocumentRoot "/Users/chrisbongers/www/daily-dev-tips"
    ServerName daily-dev-tips.local

    &amp;lt;Directory "/Users/chrisbongers/www/daily-dev-tips"&amp;gt;
        AllowOverride All
        Require all granted
    &amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You have to set the DocumentRoot to your own directory on your local machine. For me, it's a www folder at my user level.&lt;br&gt;
Next, set the ServerName to the URL you want to serve it on.&lt;/p&gt;

&lt;p&gt;Now we need to restart Apache&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apachectl restart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, if we now visit: &lt;code&gt;http://daily-dev-tips.local&lt;/code&gt; we don't see anything...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mapping-the-local-domain"&gt;
  &lt;/a&gt;
  Mapping the local domain
&lt;/h2&gt;

&lt;p&gt;To make the local domain work, we need to map the domain to our local server.&lt;/p&gt;

&lt;p&gt;Modify your host file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;nano /etc/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add a line like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;127.0.0.1       daily-dev-tips.local
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you use the domain you set in the vhost file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-our-website"&gt;
  &lt;/a&gt;
  Testing our website
&lt;/h2&gt;

&lt;p&gt;If you open your website link, another app might point to the default page, depending on whether you already set up the folder.&lt;/p&gt;

&lt;p&gt;I didn't, so create the folder in the place you provided in the vhost file and create a simple index.php inside.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello world from my own Mac OS X server'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open the website again and see the beauty of your server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8kxF_Di8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622892784431/zqB_N0Csw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8kxF_Di8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622892784431/zqB_N0Csw.png" alt="Mac OS X Virtual Host server"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mac</category>
      <category>serverless</category>
    </item>
    <item>
      <title>SAAS Strategy: Apply the 80/20 Rule To Your Competitor’s Efforts</title>
      <author>Mohan Ganesan</author>
      <pubDate>Wed, 09 Jun 2021 06:00:19 +0000</pubDate>
      <link>https://dev.to/proxiesapi/saas-strategy-apply-the-80-20-rule-to-your-competitor-s-efforts-2gok</link>
      <guid>https://dev.to/proxiesapi/saas-strategy-apply-the-80-20-rule-to-your-competitor-s-efforts-2gok</guid>
      <description>&lt;p&gt;Here is how I look to learn what my competitors have done before me.&lt;/p&gt;

&lt;p&gt;My product, Proxies API, is not the first to the market.&lt;/p&gt;

&lt;p&gt;That means I can learn a lot from people who have come before me. Specifically here are the tactics I used to do 20% of what they have done over the years to achieve 80% of the results.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Product features:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I look at all the features available in the market and use the Jobs to be done framework to work out the specific jobs, the scenarios that trigger the tasks, the benchmarks that tell me what a well-done job looks like, etc. Then I try to get to the main task and do just that. Focus on just that even if it means driving the prices down. It should encourage the costs down because most software needs to be good at only one thing. And I will pick a constraint to work around. For me, at Proxies API, it was to access all the 2 million rotating proxies and subsequent functions just from one API call. Everything had to be supported by only one API endpoint.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Looking at the reviews from customers to learn what they love and what they hate:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This task is about finding out the jobs-to-be-done. What responsibilities do the competitors do well and what do they not do well consistently. What do I want to take on? What I feel the most empathy for?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Picking SEO Keywords:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will look at 20% of the keywords, get 80% of the traffic, and see if I can win at that. This one is tricky. If, for example, my competition has put years of work for ranking high in a specific keyword, it is foolhardy to go after that for the time being. But if it is happening because a single article is ranking very high somehow, I feel like I can outrank by putting in an outrageous effort.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Picking top-performing content:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;a) It is merely reversing the concept earlier and saying what the top performer is picking the top few content pieces that produce the majority of the traffic; By the way, I use ahrefs for getting this data. Then I decide how the content can be 3–4 times better written and more valuable and get to work at it.&lt;/p&gt;

&lt;p&gt;b) I also look at the backlinks that are bringing in the most incoming traffic and go after them in the same vein.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Looking at the evolution of their A/B tests:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using archive.org, I can see the growth of the home page of my competitors. I can see all the messaging they tried over the years and the branches that they settled in. You can almost read their mind. That gives me an idea of what works are more important than what doesn’t work.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Looking at the ads and landing pages they use:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Spyfu is an excellent tool that gives you exact ads that competitors are using on different networks. I can see the long-running ads and the kind of money they are spending on them. No point reinventing the wheel. We can start where they started and A/B test from there.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Looking at the areas on the internet they advertise:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of my competitors advertise on Q&amp;amp;A forums and communities and even on GitHub. I’m learning that itself is sometimes half the battle.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Looking at the cities, they regularly participate in:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is to build long term goodwill. We want to be able to be more helpful than all the competitors combined. That has always been my goal. We also want to be timely. No point going and answering questions that are a year old because the people who ask have moved on. It is more important to be real-time in places like Quora &amp;amp; Stackoverflow to be helpful to the community genuinely.&lt;br&gt;
The author is the founder of Proxies API, a proxy rotation API service.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
