<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best coding practices.</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 30 Aug 2021 10:56:07 +0000</pubDate>
      <link>https://dev.to/aatmaj/best-coding-practices-hoe</link>
      <guid>https://dev.to/aatmaj/best-coding-practices-hoe</guid>
      <description>&lt;h3&gt;
  &lt;a href="#best-coding-practices"&gt;
  &lt;/a&gt;
  Best coding practices.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Always name your variables and functions with the utmost care and explain them thoroughly.&lt;/li&gt;
&lt;li&gt;Keep documentation concise but descriptive.&lt;/li&gt;
&lt;li&gt;The reading time for programs is much more than the writing time. Hence, the code must be such that the reading is easier to do. A little more time spent in making the code lucid goes a long way in saving time later.&lt;/li&gt;
&lt;li&gt;Each function must do only one task but do it well.&lt;/li&gt;
&lt;li&gt;Treat each function as a BlackBox- each function must hide something.&lt;/li&gt;
&lt;li&gt;Keep the connections simple. Avoid global variables wherever possible.&lt;/li&gt;
&lt;li&gt;If you use global variables, document them thoroughly. Not doing so will cause side effects.&lt;/li&gt;
&lt;li&gt;The quality of the test data is more important than its quantity.&lt;/li&gt;
&lt;li&gt;Program testing can show the presence of bugs, but never their absence. You cannot ever guarantee 100% correct code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Adapted from the book &lt;a href="https://www.amazon.in/Data-Structures-Program-Design-2e/dp/8177584235"&gt;Data Structures and Program Design in C&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React if you use replit</title>
      <author>Timothy Rowell</author>
      <pubDate>Mon, 30 Aug 2021 10:52:18 +0000</pubDate>
      <link>https://dev.to/codeboi/react-if-you-use-repl-it-2k1e</link>
      <guid>https://dev.to/codeboi/react-if-you-use-repl-it-2k1e</guid>
      <description>&lt;p&gt;If you use &lt;a href="https://replit.com/"&gt;repl.it&lt;/a&gt; kindly react with the heart or unicorn. If you don't then react with a comment saying no and explain why you don't. Or suggest any other code editors would be nice.&lt;/p&gt;

</description>
      <category>poll</category>
      <category>debate</category>
      <category>codequality</category>
      <category>replit</category>
    </item>
    <item>
      <title>Git Remove Local and Remote Tag : The Final Guide</title>
      <author>ZigRazor</author>
      <pubDate>Mon, 30 Aug 2021 10:27:46 +0000</pubDate>
      <link>https://dev.to/zigrazor/git-remove-local-and-remote-tag-the-final-guide-534n</link>
      <guid>https://dev.to/zigrazor/git-remove-local-and-remote-tag-the-final-guide-534n</guid>
      <description>&lt;p&gt;On &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;, &lt;strong&gt;tags&lt;/strong&gt; are often used in order to tag specific commits that may be more important than others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; may be used in order to bookmark certain events : releases, bug-fixes or just to add an informative and descriptive note to a commit.&lt;/p&gt;

&lt;p&gt;On &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;, tags are often associated with actual product releases for example.&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to delete Git tags easily locally or remotely.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#delete-a-local-git-tag"&gt;
  &lt;/a&gt;
  Delete a local Git tag
&lt;/h2&gt;

&lt;p&gt;In order to delete a local Git tag, use the &lt;code&gt;git tag&lt;/code&gt; command with the &lt;code&gt;-d&lt;/code&gt; option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git tag -d &amp;lt;tag_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, if you wanted to delete a local tag named “v0.1” on your commit list, you would run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git tag -d v0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Deleted tag 'v0.1' (was 88f2a35)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you try to delete a Git tag that does not exist, you will simply be notified that the tag does not exist.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git tag -d v0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the output will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;error: tag 'v0.2' not found.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to make sure that tags were correctly deleted, simply list your existing tags using the tag command and the &lt;code&gt;-l&lt;/code&gt; option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git tag -l
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#delete-a-remote-git-tag"&gt;
  &lt;/a&gt;
  Delete a remote Git tag
&lt;/h2&gt;

&lt;p&gt;In order to delete a remote Git tag, use the &lt;code&gt;git push&lt;/code&gt; command with the &lt;code&gt;-–delete&lt;/code&gt; option and specify the tag name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push --delete origin &amp;lt;tagname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Back to the previous example, if you want to delete the remote Git tag named “v0.1”, you would run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push --delete origin v0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the output will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;To https://github.com/ZigRazor/repo.git
 - [deleted]         v0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To delete a remote Git tag, you can also use the &lt;code&gt;git push&lt;/code&gt; command and specify the tag name using the refs syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin :refs/tags/&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Back to the example, in order to delete a tag named “v0.1”, you would run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin :refs/tags/v0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the output will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;To https://github.com/ZigRazor/repo.git
 - [deleted]         v0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why should we specify the “refs/tags” instead of just specifying the tagname?&lt;/p&gt;

&lt;p&gt;In some cases, your tag may have the same name as your branch.&lt;/p&gt;

&lt;p&gt;If you tried to delete your Git tag without specifying the “refs/tags” you would get the following error&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin :v1.0
error: dst refspec v1.0 matches more than one.
error: failed to push some refs to '&amp;lt;repository&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a consequence, you need to specify that you are actually trying to delete a Git tag and not a Git repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial, you learnt how you can easily delete a local and a remote Git tag.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;For More "The Final Guide" see the &lt;a href="https://dev.to/zigrazor/the-final-guide-index-4954"&gt;Index Page&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to show which Git branches have changed recently</title>
      <author>Robert Rees</author>
      <pubDate>Mon, 30 Aug 2021 10:19:29 +0000</pubDate>
      <link>https://dev.to/rrees/how-to-show-which-git-branches-have-changed-recently-2g83</link>
      <guid>https://dev.to/rrees/how-to-show-which-git-branches-have-changed-recently-2g83</guid>
      <description>&lt;p&gt;I will admit to some bad working habits, one of them is working on multiple things at the same time rather trying to focus exclusively on one unit of work and completing it before I move on to the next thing. This means that I sometimes have multiple Github branches that I'm working on for a repository. Unfortunately this intersects with another bad habit I have of not cleaning up my local branches frequently. The two combined mean that when I'm slicing between tasks I often find it difficult to find the branch I was working on before I switched tasks.&lt;/p&gt;

&lt;p&gt;Enter Git &lt;a href="https://git-scm.com/docs/git-branch#Documentation/git-branch.txt---sortltkeygt"&gt;sorts&lt;/a&gt; to save me!&lt;/p&gt;

&lt;p&gt;By default Git sorts branches lexically but using the &lt;code&gt;committerdate&lt;/code&gt; sort you instead get the branches from the most recently committed to the last commit date.&lt;/p&gt;

&lt;p&gt;Git sorts can also be reversed by putting the minus sign before the sort name.&lt;/p&gt;

&lt;p&gt;This effectively brings back the branches in the order you last changed them.&lt;/p&gt;

&lt;p&gt;To summarise then:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch --sort=-committerdate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Allows you to see which branches you changed most recently in a repository.&lt;/p&gt;

</description>
      <category>git</category>
      <category>workflow</category>
    </item>
    <item>
      <title>How to Serve images in next Gen Formats?</title>
      <author>Syed Saadullah Shah</author>
      <pubDate>Mon, 30 Aug 2021 10:16:19 +0000</pubDate>
      <link>https://dev.to/wpsyed/how-to-serve-images-into-next-gen-formats-p9f</link>
      <guid>https://dev.to/wpsyed/how-to-serve-images-into-next-gen-formats-p9f</guid>
      <description>&lt;p&gt;Google do recommend converting images from png, jpeg to webp formats that’s why serve images in next gen formats suggestion comes in Google page speed insights. If you don’t know how to fix this issue in your worpdress website then stay here. I will go over a little bit about serving images to next gen formats.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    * [What is Webp]
    * [Use webp plugin]
    * [Convert images to webp by using free tools]
    * [ShortPixe]
    * [Imagify]
    * [Optimole]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Webp is the latest gen formats for images like png, jpeg images. Google prefer smaller size of images that you should use on your web pages. To serve your images in webp formats you simply need to use free tools that we are going to cover later.&lt;/p&gt;

&lt;p&gt;Webp images are 26% smaller in size compare to jpeg and png files. On the other hand you can server your high quality images to webp format without losing the quality. This will result in both faster speeds and better PSI reports.&lt;/p&gt;

&lt;p&gt;Average webp file size compare to jpeg and png. img source&lt;br&gt;
Here is an example of both webp and jpeg file images and you can see there is no difference at all however webp file is almost 10% smaller than jpeg.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-webp-plugin"&gt;
  &lt;/a&gt;
  Use webp plugin
&lt;/h1&gt;

&lt;p&gt;Using a third party webp plugin will save you some time and increase page load time by making a copy of your original images and making the file size smaller.&lt;/p&gt;

&lt;p&gt;If you are getting this error down to the google page speed insights report:&lt;/p&gt;

&lt;p&gt;Serve images in next gen formats&lt;br&gt;
then you simply need to use some of these free WordPress tools that I have listed down below.&lt;/p&gt;

&lt;p&gt;1.Shortpixel (free/paid)&lt;br&gt;
2.Imagify (free/paid)&lt;br&gt;
3.optimole (free)&lt;br&gt;
4.EWWW Image optimizer (free/paid)&lt;br&gt;
5.Wpsmush (Free/paid)&lt;/p&gt;

&lt;p&gt;The one I recommend for you is webp converter for media. This plugin is super fast and lightweight and less bloated then others. The developer is well skilled and he coded the plugin in his own way.&lt;/p&gt;

&lt;p&gt;Belive me after actiavating this plugin the issue was completely resolved on google page speed insights. I will show you how you can do the same.&lt;/p&gt;

&lt;p&gt;Go Over to WordPress dashboard and Add New Plugin.&lt;/p&gt;

&lt;p&gt;Webp converter for media optimize your images&lt;/p&gt;

&lt;p&gt;After installing and activating the plugin you have to go to setting of this plugin. Now if your server/web host allows htaccess files than it’s fine if does not then you have to select the second option to continue the conversion process.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#webp-converter-for-media-plugin-settings"&gt;
  &lt;/a&gt;
  webp converter for media plugin settings
&lt;/h1&gt;

&lt;p&gt;But via htaccess files method is recommended by default in this plugin. After all go to bottom of the setting and click on force regenerate all images.&lt;/p&gt;

&lt;p&gt;You can also select the quality of your images but, I prefer selecting 85% because it is the perfect for high quality images so you will never lose the quality of your images.&lt;/p&gt;

&lt;p&gt;force convert all images from jpeg to webp&lt;br&gt;
This plugin will create copies of your original images and serve them into next gen formats. Now let me show you how I solved this issue quickly at google page speed insights.&lt;/p&gt;

&lt;p&gt;To convert your images from jpeg to webp files install webp converter for media.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serve-images-in-next-gen-formats"&gt;
  &lt;/a&gt;
  serve images in next gen formats
&lt;/h3&gt;

&lt;h1&gt;
  &lt;a href="#convert-images-to-webp-using-free-online-tools"&gt;
  &lt;/a&gt;
  Convert Images To WebP Using Free Online Tools
&lt;/h1&gt;

&lt;p&gt;if you hate installing third party plugins. Then there are some free tools that you can use to server your iamges in next gen formats. One of my favourite one is CloudConvert’s WebP Converter also a popular choice.&lt;/p&gt;

&lt;p&gt;convert images to next gen formats with cloudconvert webp converter&lt;/p&gt;

&lt;p&gt;&lt;a href="//wpsyed.com"&gt;for more wp speed up guides&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#shortpixel"&gt;
  &lt;/a&gt;
  Shortpixel
&lt;/h1&gt;

&lt;p&gt;Shortpixel is a great plugin and it has more than 300,000+ Active Installations. The plugin allows you to optimize your images and help you to make your website faster by lazy loading your images.&lt;/p&gt;

&lt;p&gt;You can check this option if you want Shortpixel to serve your images in next gen formats.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#imagify"&gt;
  &lt;/a&gt;
  Imagify
&lt;/h1&gt;

&lt;p&gt;Imagify is again by far the best plugin but it is limited. If you have tons of images on your website then you have to buy extra credit from imagify. Otherwise I recommend you to stick around with webp converter for media.&lt;/p&gt;

&lt;p&gt;Imagify has more than 500,000+ Active Installations in WordPress.&lt;/p&gt;

&lt;p&gt;imagify image optimization plugin for wordpress&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#optimole"&gt;
  &lt;/a&gt;
  Optimole
&lt;/h1&gt;

&lt;p&gt;You can replace any image optimization plugin with optimole after installing optimole you have to get an API key to activate it. After that your all images will be compressed and converted to webp or serve scaled from Cloudfront CDN.&lt;/p&gt;

&lt;p&gt;All over this plugin has more than 5 starts rating so you can read more reviews. I don’t comment on this plugin because I don’t personally used it for a while.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;All right wrapping up this tutorial was all about images optimization and serve images in next gen formats which clearly means that it can improve your web page load time if you follow this guide step by step. And google do like fast websites. If you have any question related to speed security and performance then please let me know in the comment box. I will be happy to hear from you guys.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>wordpress</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>💎Free Wordpress Themes for your Website💎</title>
      <author>Stacksjar</author>
      <pubDate>Mon, 30 Aug 2021 10:04:58 +0000</pubDate>
      <link>https://dev.to/stacksjar/themesrain-for-building-a-perfect-website-for-your-business-280p</link>
      <guid>https://dev.to/stacksjar/themesrain-for-building-a-perfect-website-for-your-business-280p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-themesrain"&gt;
  &lt;/a&gt;
  What is ThemesRain?
&lt;/h2&gt;

&lt;p&gt;ThemesRain is a marketplace where you can purchase both, premium and free versions of WordPress themes to design a website that is both professional and simple to create. Each website designed using the ThemesRain template is retina-ready and designed to reach out to larger audiences with enhanced search engine optimization, responsive design, and innovative designing. &lt;/p&gt;

&lt;p&gt;If you are wondering whether it is perfect for your business, then keep on reading. Below we'll mention some of the pros and cons of ThemesRain WordPress themes, which will help your business create a niche for itself. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;● Themes listed on ThemesRain are highly customizable &lt;/p&gt;

&lt;p&gt;● You get the best deal with ThemesRains&lt;/p&gt;

&lt;p&gt;● Enhance safety for payment transactions&lt;/p&gt;

&lt;p&gt;● User-friendly and simple designs for quick installations  &lt;/p&gt;

&lt;p&gt;● Highly responsive design which works across any platform &lt;/p&gt;

&lt;p&gt;● SEO-optimized designs to improve your ratings&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;● Designing, developing and maintenance of website based on WordPress can be challenging&lt;/p&gt;

&lt;p&gt;● Though some WordPress themes are free, you may need to purchase plugins to get the best results&lt;/p&gt;

&lt;p&gt;● SEO-based features of WordPress can be difficult to understand for beginners&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product Categories Of ThemesRain (Premium and Free)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ThemesRain offers a wide range of pre-designed WordPress themes that are suitable for a variety of businesses. Most businesses suffer due to a lack of professional websites which can direct more business and clients towards them. A professional website not only builds trust among customers but also helps you become a part of the never-ending business world. Having said that not everyone is well-versed with coding and creating a website for businesses can be a tough nut to crack.&lt;/p&gt;

&lt;p&gt;If you think that you can hire a person who is well-versed with coding languages, then it's well and good, but not every business has a budget set aside for website developers, in that case, you need an alternative and that’s where WordPress themes by ThemesRain come in. All themes designed by ThemesRain are designed for people with limited to no knowledge of coding. With easy demo and one-click installation, you get to design a professional website which is your way to make a name for yourself and your business. &lt;/p&gt;

&lt;p&gt;In case you are wondering whether, ThemesRain has a template for business, then check out below for different types of businesses they cater to. We are sure there is one theme that is perfect for your business:&lt;/p&gt;

&lt;p&gt;● Restaurant Websites&lt;/p&gt;

&lt;p&gt;● Construction &amp;amp; Real Estate Websites&lt;/p&gt;

&lt;p&gt;● Beauty Industry Websites&lt;/p&gt;

&lt;p&gt;● Interior Design Websites&lt;/p&gt;

&lt;p&gt;● University &amp;amp; Institute Websites&lt;/p&gt;

&lt;p&gt;● Sports Websites&lt;/p&gt;

&lt;p&gt;● Legal Firm Websites&lt;/p&gt;

&lt;p&gt;● Travel Blogs&lt;/p&gt;

&lt;p&gt;● Flower Business Websites&lt;/p&gt;

&lt;p&gt;● News Agency Websites&lt;/p&gt;

&lt;p&gt;● Medical Websites&lt;/p&gt;

&lt;p&gt;● Cryptocurrency Websites&lt;/p&gt;

&lt;p&gt;● Funeral Business Websites&lt;/p&gt;

&lt;p&gt;● Car Mechanic Websites&lt;/p&gt;

&lt;p&gt;● Health Websites&lt;/p&gt;

&lt;p&gt;All the themes that we have mentioned are available in premium and free versions. But we urge you to invest in a premium version that allows you to reap the full benefits of WordPress themes with all the features, plugins, and add-ons.&lt;/p&gt;

&lt;p&gt;Get Discounts from Here:- &lt;a href="https://stacksjar.com/post/themesrain-for-building-a-perfect-website-for-your-business"&gt;Free Wordpress Themes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Pull Requests for Dummies</title>
      <author>Adriano Martins</author>
      <pubDate>Mon, 30 Aug 2021 09:48:50 +0000</pubDate>
      <link>https://dev.to/reviewpad/pull-requests-for-dummies-2baj</link>
      <guid>https://dev.to/reviewpad/pull-requests-for-dummies-2baj</guid>
      <description>&lt;p&gt;&lt;em&gt;Debate about code reviews is often dominated by debate about pull requests. The confusion between the two is so common we have made it a point to clarify that they are not the same quite often. So what are pull requests? And why are they called that way?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Imagine you're writing a book.&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://reviewpad.com/blog/series-for-dummies/"&gt;You knew that was coming&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;In this case, you're writing collaboratively. Let's say it's a non-fiction book, or a technical manual. Something that requires a certain degree of responsibility and accuracy.&lt;/p&gt;

&lt;p&gt;You will need to figure out a strategy to make sure there are as few mistakes as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-about-version-control"&gt;
  &lt;/a&gt;
  How about… version control?
&lt;/h2&gt;

&lt;p&gt;If this is a collaborative work, then it stands to reason that you will want to keep your file (let's say a Word document) somewhere everyone can easily find it and work on it. Let's say you keep your manuscript on Dropbox.&lt;/p&gt;

&lt;p&gt;You (or any one of the other authors) are working on a specific chapter, so you download the manuscript that the team is keeping online. You would never edit the manuscript directly, that would be way too risky. You create a temporary version, and label it as such.&lt;/p&gt;

&lt;p&gt;You do your work, write your lines, make sure everything is to your liking, and then what do you do?&lt;/p&gt;

&lt;p&gt;You upload it to the Dropbox, always making sure that it's labeled correctly as a temporary version. Why? Because you would like feedback from your colleagues before &lt;strong&gt;pulling&lt;/strong&gt; everything together (notice our word choice there 🧐).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-a-simple-word-for-asking-for-feedback"&gt;
  &lt;/a&gt;
  What's a simple word for asking for feedback?
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;review&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Dictionaries are interesting.&lt;/p&gt;

&lt;p&gt;Anyway, your colleagues will then look at your brand new text and they will carefully look over it. They will correct mistakes, leave notes and suggestions, make recommendations, and, of course, if all is well, simply accept it.&lt;/p&gt;

&lt;p&gt;When this is done, and the author of the new chapter is confident he's answered all the queries and fixed all the problems, they can then &lt;strong&gt;request&lt;/strong&gt; whoever is responsible for the manuscript to &lt;strong&gt;pull&lt;/strong&gt; his changed text into the main document.&lt;/p&gt;

&lt;p&gt;And that is what a &lt;strong&gt;pull request&lt;/strong&gt; is.&lt;/p&gt;

&lt;p&gt;When a developer finishes a task, they will start a process to &lt;strong&gt;join the new code to the project&lt;/strong&gt;. For that purpose, they will ask whoever's in charge of the project to &lt;strong&gt;pull&lt;/strong&gt; the changes from their working branch to the main branch. Voilá, a request to pull changes: a pull-request.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-its-not-a-review-but-it-implies-a-review"&gt;
  &lt;/a&gt;
  So it's not a review, but it implies a review?
&lt;/h2&gt;

&lt;p&gt;Most of the time, yes.&lt;/p&gt;

&lt;p&gt;Unless the changes are very trivial, it would be irresponsible to pull changes into the main branch without performing a code review.&lt;/p&gt;

&lt;p&gt;What happens frequently is the opposite: code reviews happen all the time without the need for a pull request.&lt;/p&gt;

&lt;p&gt;A developer might want to review the changes between different states of a project for many different purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Auditing the source code is always important;&lt;/li&gt;
&lt;li&gt;Reviewing code without making it visible to everyone else in the project (pull-requests are always visible), for whatever reason;&lt;/li&gt;
&lt;li&gt;Reviewing the code when the project is scattered across many repositories;&lt;/li&gt;
&lt;li&gt;There are even some software development methodologies that don't use pull requests at all! And they still review code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope this helped clear up what pull requests are, and why they are often wrongly mistaken for code reviews. Are there any topics you'd like us to cover next on this series?&lt;/p&gt;

&lt;p&gt;If so, you know where to find us on Twitter (&lt;a href="http://twitter.com/codereviewpad/"&gt;@reviewpad&lt;/a&gt;)!&lt;/p&gt;

</description>
      <category>pullrequest</category>
      <category>git</category>
      <category>explainlikeimfive</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Amazon VPC for People in a Hurry</title>
      <author>Fon Nkwenti</author>
      <pubDate>Mon, 30 Aug 2021 09:35:02 +0000</pubDate>
      <link>https://dev.to/aws-builders/amazon-vpc-for-people-in-a-hurry-4ea2</link>
      <guid>https://dev.to/aws-builders/amazon-vpc-for-people-in-a-hurry-4ea2</guid>
      <description>&lt;p&gt;An Amazon VPC is a service that lets you provision a logically isolated section of the AWS cloud where you can launch AWS resources in a virtual network that you define. A VPC gives you more control over your virtual networking environment, resource placement, connectivity and security. Like any AWS service, it comes with many configurable parameters, but you can still achieve a lot with the defaults if you are in a hurry.&lt;br&gt;
In this post, we would look at the following;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A brief history of the AWS VPC&lt;/li&gt;
&lt;li&gt;The infrastructure on which your VPC resides on&lt;/li&gt;
&lt;li&gt;What you can do with the defaults&lt;/li&gt;
&lt;li&gt;Some caveats&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#ec2classic"&gt;
  &lt;/a&gt;
  EC2-Classic
&lt;/h1&gt;

&lt;p&gt;The Amazon VPC was initially released on the 25th of September 2009, about three years since AWS launched its first services. Before the Amazon VPC, resources such as EC2 instances were launched into what is now referred to as EC2-Classic. EC2-Classic was AWS's first iteration of a platform for creating virtual machines. The peculiarity of EC2-Classic was that the networking layer used by VMs was shared with all the other AWS tenants. This setup didn't look good to customers who owned and ran their workloads in privately owned on-prem datacenters.&lt;br&gt;
If you created your AWS account after the 12th of April, 2013, then you would automatically provision VMs inside the EC2-VPC. Nowadays, it is just referred to as AWS VPC. EC2-Classic has been deprecated.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#where-does-my-vpc-reside-in-awss-infrastructure"&gt;
  &lt;/a&gt;
  Where does my VPC reside in AWS's infrastructure?
&lt;/h1&gt;

&lt;p&gt;An Amazon VPC is "regionally scoped", meaning it resides within a single AWS Region and cannot span to other Regions. This means before you create a VPC, you must choose a specific Region, say Cape Town or af-south-1. For those who are new to AWS, an AWS Region is a geographic area in the world where AWS operates cloud services. AWS Regions are designed to be completely independent of each other. Each AWS Region is composed of two or more Availability Zones, and each Availability Zone is, made up of at least two or more discrete data centres. The Availability Zones within the AWS Region have redundant networking and power.&lt;br&gt;
Now when you launch a VPC in a specific region, it is advisable to take advantage of the high availability of the multiple Availability Zones by architecting and deploying your workloads across the Availability Zones.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#the-default-vpc"&gt;
  &lt;/a&gt;
  The Default VPC
&lt;/h1&gt;

&lt;p&gt;The default VPC is nothing more than a partially configured VPC that is created with your AWS account. Since a VPC is regionally scoped, The creation of an AWS account, also triggers the creation of default VPCs in all AWS Regions around the world. The advantage of having it preconfigured by AWS is that the customer can immediately launch services such as EC2 instances without going through further configuration steps. Most VPC services such as Elastic Load Balancing, EC2, Amazon RDS, and VPC virtual networking devices (such as the Internet Gateway and Nat Gateway) would work the same way as they would with a manually created VPC.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#what-are-the-partial-configurations"&gt;
  &lt;/a&gt;
  What are the partial configurations?
&lt;/h2&gt;

&lt;p&gt;The following items are preconfigured automatically in the default VPC;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A CIDR block of 172.31.0.0/16&lt;/li&gt;
&lt;li&gt;/20 subnets in all availability zones in the region taken from the CIDR range. For example, the Cape Town region would have the following one of the following subnets in each of its 3 availability zones; 172.31.0.0/20, 172.31.16.0/20, 172.31.32.0/20,&lt;/li&gt;
&lt;li&gt;An internet gateway is already set up and connected to the default route table for each subnet.&lt;/li&gt;
&lt;li&gt;A default security group that allows all traffic at the instance level. It is stateful and allows all outbound traffic, but inbound traffic is implicitly denied.&lt;/li&gt;
&lt;li&gt;A default network access control list that controls traffic at the subnet level. By default, it allows all inbound and all outbound traffic.&lt;/li&gt;
&lt;li&gt;A DHCP Options set to pass TCP/IP configurations to your instances.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D4q27Tqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ukfbnoxlby4q41l3xbu.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;



&lt;h2&gt;
  &lt;a href="#how-can-i-use-the-default-vpc"&gt;
  &lt;/a&gt;
  How can I use the Default VPC?
&lt;/h2&gt;

&lt;p&gt;As stated earlier, when you create an account in AWS or enable one of the newer regions, you already have the resources of a default VPC at your disposal. By default, when you launch a service such as an EC2 instance, it would be launched in the Default VPC if you do not specify a manually configured VPC at set up.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uh0Z456m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1aqaf1myxw1a521p25vl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uh0Z456m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1aqaf1myxw1a521p25vl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#some-caveats"&gt;
  &lt;/a&gt;
  Some caveats
&lt;/h2&gt;

&lt;p&gt;All VPCs come with the same CIDR of 172.31.0.0/16, which overlaps with the default VPCs in other regions. Services like VPC Peering require non-overlapping CIDR blocks to function. So your networking options are limited.&lt;br&gt;
The components of the default VPC are intentionally permissive, which is a security risk. The internet gateway provides internet access, and the security groups and Network ACLs allow all traffic from any IP address and any TCP/UDP port. Security experts advise that the default VPC should be deleted as soon as you create your account.&lt;br&gt;
If you delete your default VPC, you wouldn't have the possibility of re-creating it yourself so take note. But you can contact AWS support to have them re-create it for you.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key takeaways
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;A VPC is nothing more than a logically scooped private portion of AWS's infrastructure where you can run workloads privately.&lt;/li&gt;
&lt;li&gt;A default VPC is provisioned in every AWS Region by default for every account created. So if you don't want to spend time defining VPC components, you can get going with the default VPC.&lt;/li&gt;
&lt;li&gt;If you don't explicitly configure a VPC, all your EC2 and RDS instances would be launched into the default VPC.&lt;/li&gt;
&lt;li&gt;Just as with any default settings, permissiveness enables ease of use, but this is at the cost of security. Hence from a security perspective, the default VPC should be avoided.&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I know you are in a hurry so we must leave it at this for now. As usual, you can find more information by clicking on the links in the resources section below. Feel free to follow up with me in the comments section or on  &lt;a href="https://twitter.com/fon_nkwenti"&gt;Twitter&lt;/a&gt;. I hope this has been very informative to you. Have a good one!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html"&gt;https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/how-it-works.html"&gt;https://docs.aws.amazon.com/vpc/latest/userguide/how-it-works.html&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;amp;all-free-tier.sort-order=asc"&gt;https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;amp;all-free-tier.sort-order=asc&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>aws</category>
    </item>
    <item>
      <title>Introducing Feedlr. - the ultimate tool for feedback collection.</title>
      <author>Ashik Chapagain</author>
      <pubDate>Mon, 30 Aug 2021 09:26:37 +0000</pubDate>
      <link>https://dev.to/chapagainashik/introducing-feedlr-the-ultimate-tool-for-feedback-collection-2fld</link>
      <guid>https://dev.to/chapagainashik/introducing-feedlr-the-ultimate-tool-for-feedback-collection-2fld</guid>
      <description>&lt;h1&gt;
  &lt;a href="#hey-developers"&gt;
  &lt;/a&gt;
  Hey Developers 👋
&lt;/h1&gt;

&lt;p&gt;I'm &lt;a class="mentioned-user" href="https://dev.to/chapagainashik"&gt;@chapagainashik&lt;/a&gt;
 , a web developer with a full-stack approach. Today, I'm really happy to introduce Feedlr, my first truly excellent product. Feedlr is my submission for  &lt;a href="https://townhall.hashnode.com/auth0-hackathon"&gt;Auth0 x Hashnode&lt;/a&gt;  hackathon. Thanks, Auth0 and Hashnode for conducting this hackathon. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#index"&gt;
  &lt;/a&gt;
  Index
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction 🤔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#features"&gt;Features&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#easy-to-implement"&gt;Easy to implement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#easy-to-customize"&gt;Easy to customize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dark-mode"&gt;Dark Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#device-os-and-browser"&gt;Device, OS, and Browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#easy-to-use-dashboard"&gt;Easy to use dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#filter-responses-by-date-range-reaction-device-os-and-browser"&gt;Filter Responses By Date Range, Reaction, Device, OS, and Browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#customize-the-feedback-question-and-thankyou-message"&gt;Customize the Feedback question and Thankyou message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-your-own-custom-form"&gt;Use your own custom form&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-use-feedlrhttpsfeedlrvercelapp-for-web-projects"&gt;💡 How to use Feedlr. (For web projects)?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-use-feedlrhttpsfeedlrvercelapp-in-react-native"&gt;💡 How to use Feedlr. in React Native?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-use-feedlrhttpsfeedlrvercelapp-in-flutter"&gt;💡 How to use Feedlr. in Flutter?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-use-feedlr-by-creating-a-custom-form"&gt;How to use Feedlr by creating a custom form?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#how-to-customize-the-feedlrhttpsfeedlrvercelapp-widget-for-web"&gt;⚙️ How to customize the Feedlr. widget (For web)?&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#from-dashboard"&gt;From Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-script-tag"&gt;Using script tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#build-with"&gt;👨‍💻 Build with:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-did-i-get-started"&gt;🔰 How did I get started?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploying"&gt;☁️ Deploying&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#roadmap"&gt;🛣️ Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributing"&gt;🤝 Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#feedback"&gt;💬 Feedback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lets-connect"&gt;Let's connect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction 🤔
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt;  is the best tool for gathering consumer feedback. It includes a widget that allows consumers to submit feedback with or without an email address and without requiring a login. After your consumers give feedback, you may access the &lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt; dashboard to view the feedback, the device information from which it was submitted, the time it was submitted, and the URL from which it was sent. Additionally, you may filter feedback by date range, reaction, operating system, browser, and device, as well as search for responses based on feedback and URL.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use can use Feedlr. in React Native and Flutter too&lt;/p&gt;

&lt;p&gt;You can use your custom form and send post request to our server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/projectashik/feedlr."&gt;Github Repo&lt;/a&gt;  /  &lt;a href="https://feedlr.vercel.app"&gt;Live Preview&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;###  Easy to implement
Simply paste the given script tag from the &lt;code&gt;Installations&lt;/code&gt; section to add the Feedlr widget to the head section of your site.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://feedlr.vercel.app/init.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#easy-to-customize"&gt;
  &lt;/a&gt;
  Easy to customize
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt; provide the customization from the dashboard and the script tag both.  In the  &lt;a href="https://feedlr.vercel.app/dashboard"&gt;Feedlr. dashboard&lt;/a&gt; , you may go to the &lt;code&gt;Settings&lt;/code&gt; menu and under the UI area, you can change the appearance of the Widget. There are only a few choices now, but eventually, they will all be configurable. And head to the &lt;code&gt;Installation&lt;/code&gt; section for available options of customization from the script tag.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#dark-mode"&gt;
  &lt;/a&gt;
  Dark Mode
&lt;/h3&gt;

&lt;p&gt;Both web pages and the widget have a dark mode. For the dark mode in a widget, you must supply &lt;code&gt;data-mode="dark"&lt;/code&gt; to the script tag.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#device-os-and-browser"&gt;
  &lt;/a&gt;
  Device, OS, and Browser
&lt;/h3&gt;

&lt;p&gt;Know from which device, OS, and browser the feedback was submitted.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gMQj2fK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630222020528/XQwbiGjLK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gMQj2fK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630222020528/XQwbiGjLK.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#easy-to-use-dashboard"&gt;
  &lt;/a&gt;
  Easy to use dashboard
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt; provides easy to use dashboard for managing the feedback from your customers. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#filter-responses-by-date-range-reaction-device-os-and-browser"&gt;
  &lt;/a&gt;
  Filter Responses By Date Range, Reaction, Device, OS, and Browser
&lt;/h3&gt;

&lt;p&gt;You can filter the feedback by date range, reaction, device, os, and browser from which that feedback was submitted.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hDrvqRpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630225744036/hf_nkeaKo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hDrvqRpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630225744036/hf_nkeaKo.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#customize-the-feedback-question-and-thankyou-message"&gt;
  &lt;/a&gt;
  Customize the Feedback question and Thankyou message
&lt;/h3&gt;

&lt;p&gt;You can easily customize the feedback question and thank you message using the Feedlr dashboard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#use-your-own-custom-form"&gt;
  &lt;/a&gt;
  Use your own custom form
&lt;/h3&gt;

&lt;p&gt;Feedlr also allows you to use your own custom form. The only thing you have to do is to send the post request to the Feedlr api.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#how-to-use-feedlr-for-web-projects"&gt;
  &lt;/a&gt;
  💡 How to use &lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt; (For web projects)?
&lt;/h1&gt;

&lt;p&gt;Using the &lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt; is too much easy. Here are the steps to use:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Register to &lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Create a project using the site URL and site name.&lt;/li&gt;
&lt;li&gt;Then add the script provided by &lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt; to the head tag of your site.&lt;/li&gt;
&lt;li&gt;Now, reload your website. &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;See the installation guide, for using the &lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You'll see the feedback button in the bottom corner of your site.&lt;/p&gt;

&lt;p&gt;Here's a video of how to use &lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://www.youtube.com/watch?v=C3Sp4r9G-DY"&gt;https://www.youtube.com/watch?v=C3Sp4r9G-DY&lt;/a&gt;]&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-use-feedlr-in-react-native"&gt;
  &lt;/a&gt;
  💡 How to use &lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt; in React Native?
&lt;/h1&gt;

&lt;p&gt;The widget of Feedlr. is currently not available in react native. But soon will be, until then, if you want to integrate Feedlr. in React Native Project. You have to send the post request with &lt;code&gt;email&lt;/code&gt;(optional), &lt;code&gt;feedback&lt;/code&gt;, &lt;code&gt;emoji&lt;/code&gt;(disappointed|hate|natural|good|excellent)(optional), and your &lt;code&gt;projectId&lt;/code&gt; to &lt;code&gt;https://feedlr.vercel.app/api/responses&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
           &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://feedlr.vercel.app/api/responses&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                   &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="nx"&gt;feedback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;YOUR_PROJECT_ID&lt;/span&gt;
               &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reponse saved&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;some error have occured&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how you can integrate Feedlr. in your react native.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-use-feedlr-in-flutter"&gt;
  &lt;/a&gt;
  💡 How to use &lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt; in Flutter?
&lt;/h1&gt;

&lt;p&gt;The widget of Feedlr. is currently not available in Flutter. But soon will be, until then, if you want to integrate Feedlr. in Flutter Project. You have to send the post request with &lt;code&gt;email&lt;/code&gt;(optional), &lt;code&gt;feedback&lt;/code&gt;, &lt;code&gt;emoji&lt;/code&gt;(disappointed|hate|natural|good|excellent)(optional), and your &lt;code&gt;projectId&lt;/code&gt; to &lt;code&gt;https://feedlr.vercel.app/api/responses&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
              &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;createAlbum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://feedlr.vercel.app/api/responses'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                  &lt;span class="nl"&gt;headers:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;'Content-Type'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'application/json; charset=UTF-8'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                  &lt;span class="o"&gt;},&lt;/span&gt;
                  &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;jsonEncode&lt;/span&gt;&lt;span class="o"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'feedback'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;feedback&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'emoji'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;emoji&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'projectId'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;c7e4d59&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f478&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;dce&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bdc0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;a879cac61c1&lt;/span&gt;
                  &lt;span class="o"&gt;}),&lt;/span&gt;
                &lt;span class="o"&gt;);&lt;/span&gt;
              &lt;span class="o"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how you can integrate Feedlr. in your Flutter.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-use-feedlr-by-creating-a-custom-form"&gt;
  &lt;/a&gt;
  How to use Feedlr by creating a custom form?
&lt;/h1&gt;

&lt;p&gt;For the custom form too. you need to send your request to our api.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"https://feedlr.vercel.app/api/responses"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"disappointed"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Disappointed
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"emoji"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"disappointed"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"hate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    hate
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"emoji"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"hate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"natural"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    natural
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"emoji"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"natural"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"good"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    good
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"emoji"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"good"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"excellent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    excellent
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"emoji"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"excellent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Feedback"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"feedback"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"projectId"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"YOUR_PROJECT_ID"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#how-to-customize-the-feedlr-widget-for-web"&gt;
  &lt;/a&gt;
  ⚙️ How to customize the &lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt; widget (For web)?
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#from-dashboard"&gt;
  &lt;/a&gt;
  From Dashboard
&lt;/h3&gt;

&lt;p&gt;You can customize the widget view from the dashboard. Just head to the settings of the project and check the UI section. From there you can change the colors of text, buttons, and background of the widget for dark and light mode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mSZu8HW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630241084035/1E-8BiMQv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mSZu8HW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630241084035/1E-8BiMQv.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-script-tag"&gt;
  &lt;/a&gt;
  Using script tag
&lt;/h3&gt;

&lt;p&gt;Yes, you can customize the look of the widget from the script tag itself.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Options&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;data-mode&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Enable Dark Mode In the widget&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;script data-mode='dark' src='https://feedlr.vercel.app/init.js'&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;data-position-right&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;How much you want to move widget from right.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;script data-position-right='20' src='https://feedlr.vercel.app/init.js'&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;data-position-bottom&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;How much you want to move widget from bottom.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;script data-position-bottom='20' src='https://feedlr.vercel.app/init.js'&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;data-input-style&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Change the default style of email and feedback field.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;script data-input-styele='border-radius:10%' src='https://feedlr.vercel.app/init.js'&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;data-toggler-style&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Override the default style of toggler button.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;script data-position-right='20' src='https://feedlr.vercel.app/init.js'&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;data-submit-style&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Change the look of submit button as you want&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;script data-submit-style='border-radius:50%;' src='https://feedlr.vercel.app/init.js'&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;You can add all these options in a single script tag.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#build-with"&gt;
  &lt;/a&gt;
  👨‍💻 Build with:
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;: Programming Language&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org"&gt;Next.JS&lt;/a&gt;: Production-ready react framework&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://auth0.com"&gt;Auth0&lt;/a&gt;: Complete user authentication&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://supabase.io"&gt;Supbase&lt;/a&gt;: Postgres Database&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://prisma.io"&gt;Prisma&lt;/a&gt;: Typescript ORM&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://react-icons.github.io/react-icons/"&gt;react-icons&lt;/a&gt;: For icons&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/nextjs-progressbar"&gt;nextjs-progressbar&lt;/a&gt;: Progress Bar&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://headlessui.dev/"&gt;headless-ui&lt;/a&gt;: For components&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.radix-ui.com/"&gt;Radix UI&lt;/a&gt;: For components&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt;: For styling&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@tippyjs/react"&gt;Tippy.JS&lt;/a&gt;: For Tooltip&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/next-themes"&gt;next-themes&lt;/a&gt;: For dark theme&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/next-useragent"&gt;next-useragent&lt;/a&gt;: For parsing user agent&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/react-hot-toast"&gt;react-hot-toast&lt;/a&gt;: For notification toast&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/react-loading-skeleton"&gt;react-loading-skeleton&lt;/a&gt;: For skeleton loading&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/swr"&gt;swr&lt;/a&gt;: For data fetching&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#how-did-i-get-started"&gt;
  &lt;/a&gt;
  🔰 How did I get started?
&lt;/h1&gt;

&lt;p&gt;The first few days were challenging for me since I was trying to come up with a concept for this hackathon. Then, when I got the idea of this project. I began gathering the necessary materials right after that. Once I've finished my research, I know exactly how it should look. To begin, I created a new project with Next.js and TypeScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create next-app feedlr &lt;span class="nt"&gt;--typescript&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I implemented &lt;code&gt;Auth0&lt;/code&gt; in this project. Auth0 was very easy to implement. Just added the &lt;code&gt;nextjs-auth0&lt;/code&gt; package by following the command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; @auth0/nextjs-auth0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and wrapped the &lt;code&gt;&amp;lt;Component/&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;UserProvider&amp;gt;&lt;/code&gt; in &lt;code&gt;pages/_app.tsx&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UserProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@auth0/nextjs-auth0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/UserProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and created &lt;code&gt;[...auth0].ts&lt;/code&gt; file inside &lt;code&gt;api/auth&lt;/code&gt; folder and added the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handleAuth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@auth0/nextjs-auth0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;handleAuth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then added the &lt;code&gt;AUTH0&lt;/code&gt; configurations in &lt;code&gt;.env.local&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AUTH0_SECRET= YOUR_AUTH0_SECRET
AUTH0_BASE_URL= YOUR_AUTH0_BASE_URL
AUTH0_ISSUER_BASE_URL= YOUR_AUTH0_ISSUER_BASE_URL
AUTH0_CLIENT_ID= YOUR_AUTH0_CLIENT_ID
AUTH0_CLIENT_SECRET= YOUR_AUTH0_CLIENT_SECRET
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wow, the authentication is completed. Now, users can log in from &lt;a href="http://localhost:3000/api/auth/login"&gt;http://localhost:3000/api/auth/login&lt;/a&gt; and log out from &lt;a href="http://localhost:3000/api/auth/logout"&gt;http://localhost:3000/api/auth/logout&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is how I got started on my project.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deploying"&gt;
  &lt;/a&gt;
  ☁️ Deploying
&lt;/h1&gt;

&lt;p&gt;As always, Vercel was my friend for hosting this site too. I started a new project in Vercel and connected GitHub repo with that Vercel project and all done.&lt;/p&gt;

&lt;p&gt;Now, you can use it from &lt;a href="https://feedlr.vercel.app"&gt;https://feedlr.vercel.app&lt;/a&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#roadmap"&gt;
  &lt;/a&gt;
  🛣️ Roadmap
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt; is the hardest project of my life because I have gained a tremendous amount of knowledge in a field in which I had no prior expertise. I am planning to take &lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt; to another level by adding other more features in the future (I'm currently working on some of them). &lt;/p&gt;

&lt;p&gt;Here's a rundown of upcoming &lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt; features that will be available soon:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Receive a weekly overview of feedback in an email&lt;/li&gt;
&lt;li&gt;Be alerted on the Discord server when feedback is received&lt;/li&gt;
&lt;li&gt;Inline widgets &lt;/li&gt;
&lt;li&gt;Capture a snapshot of the webpage&lt;/li&gt;
&lt;li&gt;Documentation Site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many more on the list that will soon be accessible in &lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#contributing"&gt;
  &lt;/a&gt;
  🤝 Contributing
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Please contribute using  &lt;a href="https://guides.github.com/introduction/flow"&gt;GitHub Flow&lt;/a&gt; . Create a branch, add commits, and  &lt;a href="https://github.com/projectashik/feedlr./compare"&gt;open a pull request&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;License under  &lt;a href="https://github.com/projectashik/feedlr./blob/main/LICENSE"&gt;MIT&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  💬 Feedback
&lt;/h1&gt;

&lt;p&gt;Feedback is the best way to improve projects. This is why &lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt; was born. So, you can also give your feedback in the comment section or from our site. On our site, there is a feedback button on the bottom corner, from there you can send us feedback. &lt;a href="https://feedlr.vercel.app/"&gt;Feedlr.&lt;/a&gt; has integrated its own feedback widget for taking feedback. So, you can see, how's the widget.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/projectashik"&gt;Github&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ChapagainAshik"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hashnode.com/@ChapagainAshik"&gt;Hashnode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/chapagainashik"&gt;Dev.to&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>hackathon</category>
      <category>project</category>
      <category>nextjs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Setting up your own online store? Here's a breakdown of the transaction fees charged by payment services</title>
      <author>Rob OLeary</author>
      <pubDate>Mon, 30 Aug 2021 09:23:26 +0000</pubDate>
      <link>https://dev.to/robole/setting-up-your-own-online-store-here-s-a-breakdown-of-the-transaction-fees-charged-by-payment-services-3b2a</link>
      <guid>https://dev.to/robole/setting-up-your-own-online-store-here-s-a-breakdown-of-the-transaction-fees-charged-by-payment-services-3b2a</guid>
      <description>&lt;p&gt;If you want to sell something online, it is now something that you can do quickly, and without any technical expertise. There are marketplaces, tonnes of marketplaces, and third-party integrations to make your own store. Before you charge in, it is a good idea to understand what the costs involved are.&lt;/p&gt;

&lt;p&gt;It pays to know how much you will make on each sale. I made the mistake of overlooking this initially. I was selling a product for €3, and I wasn't totally sure what the fees were. After making a couple of sales, I reviewed the transactions and I saw that the fees added up to 20% of the sales amount. Yikes!  &lt;/p&gt;

&lt;p&gt;Keep in mind that if you sell something for €1 or €100, fees are going to have a different impact on your profits. If you can identify what the profit margin is at different price points, it can help you decide what you will sell. So, this is a worthwhile exercise to do before you start.&lt;/p&gt;

&lt;p&gt;If you are selling a digital product, your biggest expense is payment processing fees, or platform fees if you are selling on a marketplace. A lot of the marketplaces use third-party services such as &lt;a href="https://www.paypal.com"&gt;PayPal&lt;/a&gt; and &lt;a href="https://stripe.com/"&gt;Stripe&lt;/a&gt; to handle payments, and if you make your own store you will use one of these too. &lt;/p&gt;

&lt;p&gt;If you are selling a physical product, then you have to consider the cost of production, delivery, and time it will take for support. There are marketplaces that will handle this for you for a bigger slice of your profits.&lt;/p&gt;

&lt;p&gt;In this article, I will focus on the costs for handling payments. I will look at the fees for online commercial transactions charged by the major payment service providers. I am not evaluating other features of their services, which may be a factor for you in choosing a payment service provider, I am purely interested in the costs involved.&lt;/p&gt;

&lt;p&gt;I will look at the fees for Ireland. While you may not live in Ireland, this will still provide a good outline of how the fees are arranged by each payment service provider. Please don't follow what I have outlined blindly. Take a look at the websites for the payment service providers, I have included links where applicable, change the website's settings to your country of residence, and ensure that you understand the details specific to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fees-compared"&gt;
  &lt;/a&gt;
  Fees compared
&lt;/h2&gt;

&lt;p&gt;Fees charged on transactions generally range between 3% and 6% of the transaction value with payment service providers. Each provider arranges their fee slightly differently, so it makes it a bit tricky to do a direct comparison. They all take a percentage cut from each transaction, and there is an accompanying fixed amount charged. They diverge when it comes to selling internationally and handling currency conversion.&lt;/p&gt;

&lt;p&gt;To make a fair comparison, let's look at the fees as a percentage of transaction amount. We can take each of these different factors into consideration separately. I have excluded VAT (Value Added Tax) and GST (Goods And Services Tax) from all calculations. I have highlighted the best rates in light green where there is a clear case for choosing one of the other.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ir9mG27y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.roboleary.net/assets/img/blog/2021-08-30-ecommerce-transaction-fees/domestic-sales.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir9mG27y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.roboleary.net/assets/img/blog/2021-08-30-ecommerce-transaction-fees/domestic-sales.png" alt="domestic sales table. products under 5 euro is best to go with paypal micropayments. otherwise go with Stripe or Square"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For domestic sales, if you are selling products under 5 Euro, the lowest fees are with PayPal at their micropayment rate. There is a big gotcha with micropayments - the rate applies to all transactions, so you will end up paying higher fees on transactions greater than 5 euro. This is not ideal if you sell a range of products.&lt;/p&gt;

&lt;p&gt;Stripe and Square charge the same rates. The one difference is that Square deducts VAT (Value Added Tax) at source on your behalf in Ireland. They are a better choice than PayPal for all price points above 5 Euro.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rcZW1C8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.roboleary.net/assets/img/blog/2021-08-30-ecommerce-transaction-fees/international-sales.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rcZW1C8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.roboleary.net/assets/img/blog/2021-08-30-ecommerce-transaction-fees/international-sales.png" alt="international fees"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PayPal's fees are higher for international sales. Stripe and Square charge the same fees for domestic and international sales. It only makes sense to go with PayPal, if you are only selling products for 3 euro or less, and you can apply the micropayments rate. This probably is not practical.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f1niMXH3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.roboleary.net/assets/img/blog/2021-08-30-ecommerce-transaction-fees/international-sales-currency.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f1niMXH3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.roboleary.net/assets/img/blog/2021-08-30-ecommerce-transaction-fees/international-sales-currency.png" alt="international fees with currency conversion fees included"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Currency conversion is done differently by each provider. For PayPal and Stripe, currency conversion can be avoided if you have a bank account linked to your account that shares the currency of the transaction, but there are some differences in how they perform this check. Some people use services such as &lt;a href="https://wise.com/"&gt;Wise&lt;/a&gt; to have a multi-currency account that can accept different currencies, and who can perform the currency conversion at a more competitive rate. I am not experienced in this, so please explore this topic for yourself.&lt;/p&gt;

&lt;p&gt;Square charges customers in the currency of your store, so the customer's bank will be responsible for any currency conversion. Customers may not appreciate this! Square also deducts VAT for each transaction for Ireland.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#payment-service-provider-fees-in-detail"&gt;
  &lt;/a&gt;
  Payment service provider fees in detail
&lt;/h2&gt;

&lt;p&gt;Let's look at the details of the fees for each provider, and any conditions that may apply.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paypal"&gt;
  &lt;/a&gt;
  Paypal
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.paypal.com"&gt;PayPal&lt;/a&gt; is the most established provider and serves the most countries worldwide. However, they are not the cheapest, and their fees are quite convoluted.&lt;/p&gt;

&lt;p&gt;With PayPal, you can open a personal account, or a business account (also called a merchant account). Fees generally vary according to your country, and whether the transaction is domestic or international. You can read about the &lt;a href="https://www.paypal.com/ie/webapps/mpp/paypal-fees"&gt;personal fees here&lt;/a&gt;, and the &lt;a href="https://www.paypal.com/ie/webapps/mpp/merchant-fees"&gt;merchant fees here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are selling on a platform like GumRoad, you can use a personal PayPal account if you want to, and the fees should be the same. You can change a personal account into a business account, but not vice versa.&lt;/p&gt;

&lt;p&gt;For domestic transactions, there is a charge of &lt;strong&gt;3.4% of transaction amount + fixed fee based on the currency (€0.35 for Euro)&lt;/strong&gt; for every transaction.&lt;/p&gt;

&lt;p&gt;For international transactions, you will be charged an &lt;strong&gt;additional 0.5% to 2% based on your region and the region of the buyer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Currency conversion may be required to withdraw your balance from your PayPal account when your bank account has a different currency to the balance in your PayPal account&lt;/strong&gt;. You can expect to pay approximately &lt;strong&gt;3% above the base exchange rate&lt;/strong&gt;. The rates do not appear to be based on wholesale market currency rates, so it is likely to cost you more than 3% in real terms. Again, this amount may vary depending on the currency involved.&lt;/p&gt;

&lt;p&gt;You can use services such as &lt;a href="https://wise.com/"&gt;Wise&lt;/a&gt; to get a multi-currency account, this allows you to withdraw from PayPal without converting the currency. Then, you can convert the money to another currency on Wise at a better rate, &lt;a href="https://wise.com/gb/blog/how-to-send-money-from-paypal-to-transferwise"&gt;you can read more about that in this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With a merchant account, you can apply for &lt;a href="https://www.paypal.com/us/webapps/mpp/merchant-fees"&gt;micropayments&lt;/a&gt;. They will save you on fees for transactions less than 5 euro. The catch is that if you upgrade to the micropayment rate, this rate will apply to all commercial transaction payments received into your PayPal account. So, you really only want to do this if you &lt;em&gt;only&lt;/em&gt; sell products at less than 5 euro.&lt;/p&gt;

&lt;p&gt;The fees for micropayments are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;u&gt;Domestic&lt;/u&gt;: &lt;strong&gt;5% of transaction amount + fixed fee based on currency (€0.05 for Euro).&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;u&gt;International&lt;/u&gt;: &lt;strong&gt;6% of transaction amount + fixed fee based on currency (€0.05 for Euro)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It does not seem to be possible to apply for micropayments through their website. When I contacted the support team to ask how to apply, they said they can't set-up it up through web chat. They asked me to call a particular department (PPS department) instead. I didn't do it as it wasn't something I wanted done.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stripe"&gt;
  &lt;/a&gt;
  Stripe
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://stripe.com/"&gt;Stripe&lt;/a&gt; has been around since 2009, and focuses more on offering integrations for ecommerce. It serves a &lt;a href="https://stripe.com/global"&gt;decent amount of countries&lt;/a&gt;, but it is predominantly Europe and North America, for now.&lt;/p&gt;

&lt;p&gt;Stripe's payment processing fees are quite straightforward, &lt;a href="https://stripe.com/en-ie/pricing"&gt;for Ireland the pricing is&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Domestic transactions: &lt;strong&gt;1.4% of transaction amount + fixed fee based (€0.25 for Europe)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;International transactions: &lt;strong&gt;2.9% of transaction amount for non-European cards +  2% currency conversion fee if required  + fixed fee (€0.25 for Europe)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You &lt;a href="https://stripe.com/docs/currencies/conversions#avoiding-currency-conversions"&gt;may be able to avoid currency conversion fees&lt;/a&gt; if you have multiple bank accounts linked to your Stripe account.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#square"&gt;
  &lt;/a&gt;
  Square
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://squareup.com/us/en"&gt;Square&lt;/a&gt; was founded in 2009 and is more focused on physical point-of-sales and mobile apps, but it does offer online payment processing also. It only serves a few markets, currently that is: Australia, Canada, France, Ireland, Japan, United Kingdom, and the United States.&lt;/p&gt;

&lt;p&gt;Stripe's &lt;a href="https://squareup.com/ie/en/online-store/plans"&gt;payment processing fees for Ireland are&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;1.4% of transaction amount + €0.25 + VAT per transaction with EU + EEA cards&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2.9% of transaction amount + €0.25 + VAT per transaction with UK/Non-EEA cards&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can reduce the fees slightly if you get a Premium Plan for €60/mo. The fixed portion of the fee is reduced from 25 cents to 15 cents for each transaction.&lt;/p&gt;

&lt;p&gt;Square &lt;a href="https://www.sellercommunity.com/t5/General-Discussion/Does-Square-allow-or-handle-currency-conversion-for/m-p/53404"&gt;charges the customer in the currency of your store&lt;/a&gt;. So, the customer is responsible for currency fees&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#payoneer"&gt;
  &lt;/a&gt;
  Payoneer
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.payoneer.com/"&gt;Payoneer&lt;/a&gt; facilitates international fund transfers, payments requests and invoicing of clients, and is used by marketplaces such as Fiverr, 99Designs, and iStock for payouts.&lt;/p&gt;

&lt;p&gt;It doesn't appear that Payoneer can be used as a third-party integration for individuals. So, you may only encounter Payoneer if you use as a third-party service for payouts for digital marketplaces, or if you invoice customers for business-to-business sales.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.payoneer.com/about/fees/"&gt;fees&lt;/a&gt; are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;u&gt;Payoneer to Payoneer payments&lt;/u&gt;: Free.&lt;/li&gt;
&lt;li&gt;
&lt;u&gt;Direct payments by a client by credit card (all currencies):&lt;/u&gt; 3% of transaction amount.&lt;/li&gt;
&lt;li&gt;
&lt;u&gt;Payment through a marketplace&lt;/u&gt;: The marketplace set the rates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Withdrawals are charged&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;u&gt;Withdrawals in local currency from a Payoneer balance of the same currency&lt;/u&gt;: &lt;strong&gt;€1.50 in EUR&lt;/strong&gt;, or $1.50 in USD.&lt;/li&gt;
&lt;li&gt;
&lt;u&gt;Withdrawals in non-local currency&lt;/u&gt;: &lt;strong&gt;Up to 2% of transaction amount&lt;/strong&gt;. The exchange rate of transactions with conversion is based on wholesale currency market rates obtained at the time of transaction from a range of financial institutions. For more info, &lt;a href="https://blog.payoneer.com/how-to/general/everything-you-need-to-know-about-conversion-rates/"&gt;read this article&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Stripe and Square offer the most straightforward, competitive all round rates. PayPal's rates are not straightforward. If you are selling products at less than 5 Euro, PayPal's micropayment rates are the most favourable rates around, but it may not be practical to use PayPal as a single provider just for this instance.&lt;/p&gt;

&lt;p&gt;Ultimately, the best provider depends on where you are, what you are selling, and what markets you are serving. You may be in a country that is not served by a particular provider, so the choices are not equal everywhere.&lt;/p&gt;

&lt;p&gt;If I missed out on something, please let me know!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>ecommerce</category>
    </item>
    <item>
      <title>Next.js, Material UI, MongoDB Personal Dashboard</title>
      <author>Katsiaryna (Kate) Lupachova</author>
      <pubDate>Mon, 30 Aug 2021 09:18:52 +0000</pubDate>
      <link>https://dev.to/ramonak/next-js-material-ui-mongodb-personal-dashboard-3i82</link>
      <guid>https://dev.to/ramonak/next-js-material-ui-mongodb-personal-dashboard-3i82</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://ramonak.io/"&gt;my personal blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;As a developer who tries to contribute to the community by writing blog posts, developing and maintaining open-source libraries, and building side projects, I'd like to have a place where I could see and track all these my activities in one place. So I decided to create the dashboard of my personal projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack
&lt;/h2&gt;

&lt;p&gt;For the tech stack I've chosen to use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://material-ui.com/"&gt;Material UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://recharts.org/en-US/"&gt;Recharts&lt;/a&gt; - charting library&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://react-spring.io/"&gt;react-spring&lt;/a&gt; - animation library&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.mongodb.com/"&gt;MongoDB Atlas&lt;/a&gt; - cloud-hosted Mongo Database&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;The app has a "classic" dashboard layout:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;header&lt;/li&gt;
&lt;li&gt;dark and light theme switch&lt;/li&gt;
&lt;li&gt;sidebar with toggle&lt;/li&gt;
&lt;li&gt;content area&lt;/li&gt;
&lt;li&gt;footer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, the app uses &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; custom rules, &lt;a href="https://prettier.io/"&gt;prettier&lt;/a&gt; code formatting, &lt;a href="https://typicode.github.io/husky/#/"&gt;husky&lt;/a&gt; git hooks with &lt;a href="https://github.com/okonet/lint-staged"&gt;lint-staged&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pages"&gt;
  &lt;/a&gt;
  Pages
&lt;/h2&gt;

&lt;p&gt;The dashboard consists of 5 pages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#page-1---overview-of-my-blog-posts-npm-packages-demo-and-hobby-apps-stats"&gt;Overview of my blog posts, npm packages demo, and hobby apps stats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#page-2---devto-stats"&gt;dev.to stats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#page-3---github-stats"&gt;GitHub stats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#page-4---twitter-stats"&gt;Twitter stats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#page-5---npm-packages-stats"&gt;NPM packages stats&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#page-1-overview-of-my-blog-posts-npm-packages-demo-and-hobby-apps-stats"&gt;
  &lt;/a&gt;
  Page 1 - Overview of my blog posts, npm packages demo, and hobby apps stats
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NHSLCVdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nfdw38e37jy7wsz12uo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NHSLCVdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nfdw38e37jy7wsz12uo.gif" alt="page-one"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first page displays the main stats of the blog posts on my personal website, of the npm packages demos that I developed and maintain, and of the hobby apps that I wrote in my spare time. These stats are rendered in the table and include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the date of publishing&lt;/li&gt;
&lt;li&gt;the title, which also serves as a link to the respective blog post/demo/app&lt;/li&gt;
&lt;li&gt;this week number of weeks with comparison to the previous week&lt;/li&gt;
&lt;li&gt;total views count&lt;/li&gt;
&lt;li&gt;modal window with the chart that shows the number of views for each day during the last month&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Published&lt;/em&gt;, &lt;em&gt;Last 7 days views&lt;/em&gt; and &lt;em&gt;Total views&lt;/em&gt; columns are sortable. By default, the data is sorted by the number of views for the last 7 days. The blog posts table has pagination.&lt;/p&gt;

&lt;p&gt;The data about the views count is stored in &lt;strong&gt;MongoDB Atlas&lt;/strong&gt; database. There is a dedicated Next.js &lt;a href="https://github.com/KaterinaLupacheva/my-projects-dashboard/tree/master/pages/api/views"&gt;API Route&lt;/a&gt; that communicates with the database. To be able to gather these stats, I developed a custom hook - &lt;a href="https://github.com/KaterinaLupacheva/ramonak.io/blob/master/src/hooks/use-view-counter.js"&gt;&lt;em&gt;useViewCounter&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Probably another part that was tricky to implement on this page is the feature of &lt;strong&gt;sorting&lt;/strong&gt; the Material UI &lt;strong&gt;table by specific columns&lt;/strong&gt;. &lt;a href="https://github.com/KaterinaLupacheva/my-projects-dashboard/blob/master/components/ViewsTable/ViewsTable.tsx"&gt;This&lt;/a&gt; is how I implemented it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#page-2-devto-stats"&gt;
  &lt;/a&gt;
  Page 2 - dev.to stats
&lt;/h2&gt;

&lt;p&gt;I'm a follower of the "Learn in public" concept. When I learn something new while working on a project and I write an article on it, I definitely know the subject better later. Plus I hope this also helps other developers in their "gaining new knowledge" journey.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5OGHm9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ijh0hkk3m9jg3tpkshq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5OGHm9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ijh0hkk3m9jg3tpkshq.gif" alt="page-two"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use dev.to API you just need to obtain the &lt;strong&gt;API key&lt;/strong&gt;. How to do so is described in the &lt;a href="https://docs.forem.com/api/"&gt;official docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are two stat cards at the top of the page. They show data about &lt;strong&gt;followers count&lt;/strong&gt; and the total &lt;strong&gt;number of posts&lt;/strong&gt; for today. The data is gathered from &lt;code&gt;https://dev.to/api/followers/users&lt;/code&gt; and &lt;code&gt;https://dev.to/api/articles/me&lt;/code&gt; APIs respectively. "Running numbers" animation implemented with the &lt;a href="https://react-spring.io/"&gt;react-spring&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;Also, there are &lt;strong&gt;dynamics of followers count chart&lt;/strong&gt;. But dev.to API provides data only for the current number of followers. Where do I get the data for the previous days? To be able to display this data we need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;store followers count in the &lt;strong&gt;database&lt;/strong&gt; (for this I use &lt;a href="https://www.mongodb.com/"&gt;MongoDB Atlas&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;run the &lt;strong&gt;cron (scheduled) job&lt;/strong&gt; for this to happen daily (&lt;a href="https://docs.github.com/en/actions"&gt;GitHub actions&lt;/a&gt; to the rescue)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The number at the bottom right corner of the followers' count card shows the followers' number change for the last week.&lt;/p&gt;

&lt;p&gt;The main section of the page consists of cards with information about &lt;strong&gt;each blog post&lt;/strong&gt;. This data is fetched from &lt;code&gt;https://dev.to/api/articles/me&lt;/code&gt; API. Each card has information about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;article's title&lt;/li&gt;
&lt;li&gt;date of publishing&lt;/li&gt;
&lt;li&gt;number of views, reactions, and comments&lt;/li&gt;
&lt;li&gt;tags list&lt;/li&gt;
&lt;li&gt;cover image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The card is clickable. By clicking on it, the article opens in a new tab, using the URL data from the API.&lt;/p&gt;

&lt;p&gt;All blog posts can be &lt;strong&gt;sorted&lt;/strong&gt; by the published date (sorted by default), number of views, reactions, or comments. How to implement this feature is described in &lt;a href="https://ramonak.io/posts/react-how-to-sort-array-of-objects-with-dropdown-and-hooks"&gt;this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#page-3-github-stats"&gt;
  &lt;/a&gt;
  Page 3 - GitHub stats
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ad6wc0aT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxhohvvyagf2ja9mj8ds.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ad6wc0aT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxhohvvyagf2ja9mj8ds.gif" alt="page-three"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before using &lt;a href="https://docs.github.com/en/rest"&gt;GitHub REST API&lt;/a&gt; you need to create a personal access token. &lt;a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token"&gt;Here&lt;/a&gt; are the instructions on how to do so.&lt;/p&gt;

&lt;p&gt;At the top of the page, the general GitHub &lt;strong&gt;user profile data&lt;/strong&gt; and &lt;strong&gt;main stats&lt;/strong&gt; indicators are shown. A user profile data is a response from &lt;code&gt;https://api.github.com/user&lt;/code&gt; endpoint and it includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;bio&lt;/li&gt;
&lt;li&gt;avatar&lt;/li&gt;
&lt;li&gt;location&lt;/li&gt;
&lt;li&gt;company
and other profile information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;followers' count&lt;/strong&gt; and the &lt;strong&gt;number of the public repos&lt;/strong&gt; are also coming from the above-mentioned endpoint.&lt;/p&gt;

&lt;p&gt;But the data about &lt;strong&gt;total stars&lt;/strong&gt; and &lt;strong&gt;total forks&lt;/strong&gt; amount is calculated based on each repo data. To get the information about all user's repos you should query &lt;code&gt;https://api.github.com/user/repos&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;p&gt;Same as for dev.to followers count, the data on GitHub total repos, total followers, total stars, and total forks is stored &lt;strong&gt;daily&lt;/strong&gt; in the &lt;strong&gt;database&lt;/strong&gt; with the help of the &lt;strong&gt;scheduled GitHub action&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The repositories section of the page displays cards with &lt;strong&gt;each repo data&lt;/strong&gt;, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;repo name&lt;/li&gt;
&lt;li&gt;website (if exists)&lt;/li&gt;
&lt;li&gt;description&lt;/li&gt;
&lt;li&gt;number of stars, forks, watchers&lt;/li&gt;
&lt;li&gt;language&lt;/li&gt;
&lt;li&gt;created at and updated at dates&lt;/li&gt;
&lt;li&gt;license&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The cards are &lt;strong&gt;sortable&lt;/strong&gt; by stars (default), forks, and the last update date.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I have a separate app that utilizes GitHub REST API - &lt;a href="https://github-dashboard.ramonak.io/"&gt;GitHub API dashboard&lt;/a&gt;, that I've developed a while back and probably need to update. A user can enter any existing GitHub username and see public information on that user, including profile information, a person's programming languages structure, and repos data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#page-4-twitter-stats"&gt;
  &lt;/a&gt;
  Page 4 - Twitter stats
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDZHqmfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wj5mtvc737xz4wfg26ow.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDZHqmfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wj5mtvc737xz4wfg26ow.gif" alt="page-four"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm not a very active (mildly speaking) Twitter user. I mean I do read other people's tweets, but do not tweet myself often. Maybe this will change eventually, but it is what it is now.&lt;/p&gt;

&lt;p&gt;As it's stated in the &lt;a href="https://developer.twitter.com/en/docs/twitter-api/getting-started/getting-access-to-the-twitter-api"&gt;docs&lt;/a&gt;, to get access to the Twitter API you need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;apply and receive approval for a developer account&lt;/li&gt;
&lt;li&gt;get your app's key and tokens.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Specifically for my dashboard, I use v1.1. of the API and Bearer Token for authorization.&lt;/p&gt;

&lt;p&gt;The top section of the page displays general information about the Twitter &lt;strong&gt;profile&lt;/strong&gt;. This data comes from &lt;code&gt;https://api.twitter.com/1.1/users/show&lt;/code&gt; API and includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;screen name&lt;/li&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;description&lt;/li&gt;
&lt;li&gt;location&lt;/li&gt;
&lt;li&gt;when a profile was created&lt;/li&gt;
&lt;li&gt;followers count&lt;/li&gt;
&lt;li&gt;image URL
and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Same as for dev.to and GitHub followers count, the data on Twitter followers is stored &lt;strong&gt;daily&lt;/strong&gt; in the &lt;strong&gt;database&lt;/strong&gt; with the help of the &lt;strong&gt;scheduled GitHub action&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The data in the Tweets section of the page comes from &lt;code&gt;https://api.twitter.com/1.1/statuses/user_timeline&lt;/code&gt; API. This API returns a tweet's text, date of publishing, retweets and likes count, etc. I visually distinguish if a tweet was a reply to some other tweet and a tweet by itself.&lt;/p&gt;

&lt;p&gt;If a tweet returns from the API &lt;strong&gt;truncated&lt;/strong&gt;, I compute a link to its full content.&lt;/p&gt;

&lt;p&gt;The tweet cards are &lt;strong&gt;sortable&lt;/strong&gt; by published date (default), retweets, and likes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#page-5-npm-packages-stats"&gt;
  &lt;/a&gt;
  Page 5 - NPM packages stats
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xgBxnu9w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsi5w1ap2dp7qlqxbbv7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xgBxnu9w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsi5w1ap2dp7qlqxbbv7.gif" alt="page-five"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While developing a piece of functionality for any projects that I'm involved with, sometimes I publish it as a public &lt;strong&gt;library&lt;/strong&gt; on &lt;a href="https://www.npmjs.com/"&gt;NPM&lt;/a&gt;. Thus any developer (myself included) can use it, and I feel great that I can do something useful for a community.&lt;/p&gt;

&lt;p&gt;If you'd like to publish your library, I wrote the &lt;strong&gt;blog post&lt;/strong&gt; on &lt;a href="https://ramonak.io/posts/react-publish-to-npm"&gt;how to publish a custom React component to NPM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is no need to obtain an API key or token for querying NPM registry API. For the dashboard, I use only the endpoint that provides the data about a &lt;strong&gt;package downloads count&lt;/strong&gt; - &lt;code&gt;https://api.npmjs.org/downloads/&lt;/code&gt;. You can read more about it &lt;a href="https://github.com/npm/registry/blob/master/docs/download-counts.md"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have &lt;strong&gt;4 public NPM libraries&lt;/strong&gt; at the moment. There are stats on each of them in the dashboard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a chart with the daily downloads count for the last month&lt;/li&gt;
&lt;li&gt;an average downloads per day (calculated)&lt;/li&gt;
&lt;li&gt;weekly downloads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, the &lt;a href="https://www.npmjs.com/package/@ramonak/react-progress-bar"&gt;React progress bar&lt;/a&gt; library has the biggest downloads count among my libraries so far. The robust UI components libraries are great, and I love to use them. But sometimes you just need one simple customizable component. And I had exactly such a use case. Here is the blog post about &lt;a href="https://ramonak.io/posts/react-progress-bar"&gt;how to create a custom progress bar component in 5 minutes&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The source code for my personal dashboard is available in &lt;a href="https://github.com/KaterinaLupacheva/my-projects-dashboard"&gt;this repo&lt;/a&gt;. And here is the &lt;a href="https://my-projects-dashboard.vercel.app/"&gt;live version&lt;/a&gt; (deployed on &lt;a href="https://vercel.com"&gt;Vercel&lt;/a&gt;).&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>nextjs</category>
      <category>typescript</category>
    </item>
    <item>
      <title>How PostgreSQL aggregation works and how it inspired our hyperfunctions’ design</title>
      <author>davidkohn88</author>
      <pubDate>Mon, 30 Aug 2021 09:04:30 +0000</pubDate>
      <link>https://dev.to/timescale/how-postgresql-aggregation-works-and-how-it-inspired-our-hyperfunctions-design-33k6</link>
      <guid>https://dev.to/timescale/how-postgresql-aggregation-works-and-how-it-inspired-our-hyperfunctions-design-33k6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1"&gt;A primer on PostgreSQL aggregation (through pictures)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#two-step-in-tsdb"&gt;Two-step aggregation in TimescaleDB hyperfunctions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;Why we use the two-step aggregate design pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;Two-step aggregation + continuous aggregates in TimescaleDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5"&gt;An example of how the two-step aggregate design impacts hyperfunctions’ code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;Summing it up&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;em&gt;Get a primer on PostgreSQL aggregation, how PostgreSQL’s implementation inspired us as we built TimescaleDB hyperfunctions and its integrations with advanced TimescaleDB features – and what this means for developers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At Timescale, our goal is to always focus on the developer experience, and we take great care to design our products and APIs to be developer-friendly. We believe that when our products are easy to use and accessible to a wide range of developers, we enable them to solve a breadth of different problems – and thus build solutions that solve big problems.&lt;/p&gt;

&lt;p&gt;This focus on developer experience is why we made the decision &lt;a href="https://blog.timescale.com/blog/when-boring-is-awesome-building-a-scalable-time-series-database-on-postgresql-2900ea453ee2/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=hyperfunctions-1-0-2021&amp;amp;utm_content=tsdb-beta-blog"&gt;early in the design of TimescaleDB to build on top of PostgreSQL&lt;/a&gt;. We believed then, as we do now, that building on &lt;a href="https://db-engines.com/en/ranking"&gt;the world’s fastest-growing database&lt;/a&gt; would have numerous benefits for our users. &lt;/p&gt;

&lt;p&gt;Perhaps the biggest of these advantages is developer productivity: developers can use the tools and frameworks they know and love and bring all of their SQL skills and expertise. &lt;/p&gt;

&lt;p&gt;Today, there are nearly three million active TimescaleDB databases running mission-critical time-series workloads across industries. Time-series data comes at you fast, sometimes generating millions of data points per second (&lt;a href="https://blog.timescale.com/blog/what-the-heck-is-time-series-data-and-why-do-i-need-a-time-series-database-dcf3b1b18563/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=hyperfunctions-1-0-2021&amp;amp;utm_content=time-series-blog"&gt;read more about time-series data&lt;/a&gt;). Because of this volume and rate of information, time-series data is complex to query and analyze. We built TimescaleDB as a purpose-built relational database for time-series to reduce that complexity so that developers can focus on their applications.&lt;/p&gt;

&lt;p&gt;So, we’re built with developer experience at our core, and we’ve continually released functionality to further this aim, including &lt;a href="https://blog.timescale.com/blog/timescaledb-2-0-a-multi-node-petabyte-scale-completely-free-relational-database-for-time-series/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=hyperfunctions-1-0-2021&amp;amp;utm_content=tsdb-2.0-blog"&gt;continuous aggregates, user-defined actions, informational views&lt;/a&gt;, and most recently, &lt;a href="https://blog.timescale.com/blog/introducing-hyperfunctions-new-sql-functions-to-simplify-working-with-time-series-data-in-postgresql/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=hyperfunctions-1-0-2021&amp;amp;utm_content=hyperfunctions-blog"&gt;TimescaleDB hyperfunctions&lt;/a&gt;: a series of SQL functions within TimescaleDB that make it easier to manipulate and analyze time-series data in PostgreSQL with fewer lines of code.&lt;/p&gt;

&lt;p&gt;To ensure we stay focused on developer experience as we plan new hyperfunctions features, we established a set of “design constraints” that guide our development decisions. Adhering to these guidelines ensures our APIs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Work within the SQL language (no new syntax, just functions and aggregates)&lt;/li&gt;
&lt;li&gt;Intuitive for new and experienced SQL users&lt;/li&gt;
&lt;li&gt;Useful for just a few rows of data and high-performance with billions of rows&lt;/li&gt;
&lt;li&gt;Play nicely with all TimescaleDB features, and ideally, makes them &lt;em&gt;more&lt;/em&gt; useful to users&lt;/li&gt;
&lt;li&gt;Make fundamental things simple to make more advanced analyses possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What does this look like in practice? In this post, I explain how these constraints led us to adopt two-step aggregation throughout TimescaleDB hyperfunctions, how two-step aggregates interact with other TimescaleDB features, and how PostgreSQL's internal aggregation API influenced our implementation. &lt;/p&gt;

&lt;p&gt;When we talk about two-step aggregation, we mean the following calling convention:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUULMsCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fk65hi08fowhbu3n8qgi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUULMsCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fk65hi08fowhbu3n8qgi.jpg" alt="code: SELECT average(time_weight('LOCF', value)) as time_weighted_average FROM foo;&amp;lt;br&amp;gt;
-- or&amp;lt;br&amp;gt;
SELECT approx_percentile(0.5, percentile_agg(value)) as median FROM bar;&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where we have an inner aggregate call:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ATe43RUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucyq3dmed7kf24n4rtfq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ATe43RUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucyq3dmed7kf24n4rtfq.jpg" alt="The same as the previous in terms of code, except the sections: time_weight('LOCF', value) and percentile_agg(value) are highlighted "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And an outer accessor call:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ToL7uzUY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9x6h15xut38k0s3b670.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ToL7uzUY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9x6h15xut38k0s3b670.jpg" alt="The same as the previous in terms of code, except the sections: average(time_weight('LOCF', value)) and approx_percentile(0.5, percentile_agg(value)) are highlighted"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We chose this design pattern over the more common - and seemingly simpler - one-step aggregation approach, in which a single function encapsulates the behavior of both the inner aggregate and outer accessor:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cbM3Jy3G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvf9b3qwtnpzrrmorl5f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cbM3Jy3G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvf9b3qwtnpzrrmorl5f.jpg" alt="code: -- NB: THIS IS AN EXAMPLE OF AN API WE DECIDED NOT TO USE, IT DOES NOT WORK SELECT time_weighted_average('LOCF', value) as time_weighted_average FROM foo; -- or SELECT approx_percentile(0.5, value) as median FROM bar;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read on for more on why the one-step aggregate approach quickly breaks down as you start doing more complex things (like composing functions into more advanced queries) and how, under the hood, almost all PostgreSQL aggregates do a version of two-step aggregation. You’ll learn how the PostgreSQL implementation inspired us as we built TimescaleDB hyperfunctions, continuous aggregates, and other advanced features – and what this means for developers. &lt;/p&gt;

&lt;p&gt;If you’d like to get started with hyperfunctions right away, &lt;a href="https://console.forge.timescale.com/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=hyperfunctions-1-0-2021&amp;amp;utm_content=signup"&gt;create your free trial account&lt;/a&gt; and start analyzing 🔥. (TimescaleDB hyperfunctions are pre-installed on every Timescale Forge instance, our hosted cloud-native relational time-series data platform).&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#a-primer-on-postgresql-aggregation-through-pictures"&gt;
  &lt;/a&gt;
  A primer on PostgreSQL aggregation (through pictures)&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;When I first started learning about PostgreSQL 5 or 6 years ago (I was an electrochemist, and dealing with lots of battery data, as mentioned in &lt;a href="https://blog.timescale.com/blog/what-time-weighted-averages-are-and-why-you-should-care/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=hyperfunctions-1-0-2021&amp;amp;utm_content=time-weight-blog"&gt;my last post on time-weighted averages&lt;/a&gt;), I ran into some performance issues. I was trying to better understand what was going on inside the database in order to improve its performance – and that’s when I found &lt;a href="https://momjian.us"&gt;Bruce Momjian&lt;/a&gt;’s talks on &lt;a href="https://momjian.us/main/presentations/internals.html"&gt;PostgreSQL Internals Through Pictures&lt;/a&gt;. Bruce is well known in the community for his insightful talks (and his penchant for bow ties), and his sessions were a revelation for me. &lt;/p&gt;

&lt;p&gt;They’ve served as a foundation for my understanding of how PostgreSQL works ever since. He explained things so clearly, and I’ve always learned best when I can visualize what’s going on, so the “through pictures” part really helped - and stuck with - me. &lt;/p&gt;

&lt;p&gt;So this next bit is my attempt to channel Bruce by explaining some PostgreSQL internals through pictures. Cinch up your bow ties and get ready for some learnin’.&lt;/p&gt;


&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXopeU_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwckpfux0elhtialp4f1.gif" alt="A GIF of the author finishing tying a bow tie and fixing his shirt."&gt;The author pays homage to Bruce Momjian (and looks rather pleased with himself because he’s managed to tie a bow tie on the first try).





&lt;h3&gt;
  &lt;a href="#postgresql-aggregates-vs-functions"&gt;
  &lt;/a&gt;
  PostgreSQL aggregates vs. functions
&lt;/h3&gt;

&lt;p&gt;We have written about &lt;a href="https://blog.timescale.com/blog/introducing-hyperfunctions-new-sql-functions-to-simplify-working-with-time-series-data-in-postgresql/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=hyperfunctions-1-0-2021&amp;amp;utm_content=hyperfunctions-blog"&gt;how we use custom functions and aggregates to extend SQL&lt;/a&gt;, but we haven’t exactly explained the difference between them.&lt;/p&gt;

&lt;p&gt;The fundamental difference between an aggregate function and a “regular” function in SQL is that an &lt;strong&gt;aggregate&lt;/strong&gt; produces a single result from a group of related rows, while a regular &lt;strong&gt;function&lt;/strong&gt; produces a result for each row:&lt;/p&gt;


&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x92_Wyaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n89rz7olep6g62wxewx6.jpg" alt="A side-by-side diagram depicting an “aggregate” side and a “function” side and how each product results. There are three individual rows on the aggregate side, with arrows that point to a single result; on the function side, there are three individual rows, with arrows that point to three different results (one per row). "&gt;In SQL, aggregates produce a result from multiple rows, while functions produce a result per row.




&lt;p&gt;&lt;br&gt;
This is not to say that a function can’t have inputs from multiple columns; they just have to come from the same row. &lt;/p&gt;

&lt;p&gt;Another way to think about it is that functions often act on rows, whereas aggregates act on columns. To illustrate this, let’s consider a theoretical table ’foo’ with two columns:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="nb"&gt;DOUBLE&lt;/span&gt; &lt;span class="nb"&gt;PRECISION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;baz&lt;/span&gt; &lt;span class="nb"&gt;DOUBLE&lt;/span&gt; &lt;span class="nb"&gt;PRECISION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And just a few values, so we can easily see what’s going on:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The function &lt;a href="https://www.postgresql.org/docs/13/functions-conditional.html#FUNCTIONS-GREATEST-LEAST"&gt;&lt;code&gt;greatest()&lt;/code&gt;&lt;/a&gt; will produce the largest of the values in columns &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; for each row:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;greatest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;greatest&lt;/span&gt; 
&lt;span class="c1"&gt;---------------&lt;/span&gt;
        &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="mi"&gt;4&lt;/span&gt;
        &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Whereas the aggregate &lt;a href="https://www.postgresql.org/docs/current/functions-aggregate.html"&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt; will produce the largest value from each column:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;bar_max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;baz_max&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;bar_max&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;baz_max&lt;/span&gt; 
&lt;span class="c1"&gt;---------|--------&lt;/span&gt;
       &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Using the above data, here’s a picture of what happens when we aggregate something: &lt;/p&gt;


&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8cxiuY2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwomr9qpp8o3p461swg4.jpg" alt="A diagram showing how the statement:  raw `SELECT max(bar) FROM foo;` endraw  works: multiple rows with values of “bar equal to” 1.0, 2.0, and 3.0, go through the  raw `max(bar)` endraw  aggregate to ultimately produce a result of 3.0. "&gt;The `max()` aggregate gets the largest value from multiple rows.




&lt;p&gt;&lt;br&gt;
The aggregate takes inputs from multiple rows and produces a single result. That’s the main difference between it and a function, but how does it do that? Let’s look at what it’s doing under the hood.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#aggregate-internals-rowbyrow"&gt;
  &lt;/a&gt;
  Aggregate internals: row-by-row
&lt;/h3&gt;

&lt;p&gt;Under the hood, aggregates in PostgreSQL work row-by-row. But, then how does an aggregate know anything about the previous rows? &lt;/p&gt;

&lt;p&gt;Well, an aggregate stores some state about the rows it has previously seen, and as the database sees new rows, it updates that internal state. &lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;max()&lt;/code&gt; aggregate we’ve been discussing, the internal state is simply the largest value we’ve collected so far. &lt;/p&gt;

&lt;p&gt;Let’s take this step-by-step. &lt;/p&gt;

&lt;p&gt;When we start, our internal state is &lt;code&gt;NULL&lt;/code&gt; because we haven’t seen any rows yet:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aMkwRdMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edvpx1w1ga0qori6dwul.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMkwRdMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edvpx1w1ga0qori6dwul.jpg" alt="Flowchart arrow diagram representing the max open parens bar close parens aggregate, with three rows below the arrow where bar is equal to 1.0, 2.0, and 3.0, respectively. There is a box in the arrow in which the state is equal to NULL. "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, we get our first row in: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SrzsxMRh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7q3ejwkxieanvy4idem.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SrzsxMRh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7q3ejwkxieanvy4idem.jpg" alt="The same flowchart arrow diagram, except that row one, with bar equal to 1.0, has moved from below the arrow_into_ the arrow. "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since our state is &lt;code&gt;NULL&lt;/code&gt;, we initialize it to the first value we see:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mbMH_tS8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6izuxd45sevfvwjvh8ct.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mbMH_tS8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6izuxd45sevfvwjvh8ct.jpg" alt="The same flowchart diagram, except that row one has moved _out_ of the arrow, and the state has been updated from NULL to the 1.0, row one’s value."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we get our second row: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JstUVKDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37jr6glndj13fdim3ehr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JstUVKDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37jr6glndj13fdim3ehr.jpg" alt="The same flowchart diagram, except that row two has moved into the arrow representing the max aggregate. "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we see that the value of bar (2.0) is greater than our current state (1.0), so we update the state:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9OQXSFff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvr3udolmos6v01wo59e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9OQXSFff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvr3udolmos6v01wo59e.jpg" alt="The same diagram, except that row two has moved out of the max aggregate, and the state has been updated to the largest value (the value of row two, 2.0). "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, the next row comes into the aggregate:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aJ10I22v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pjbniuy0xrdqsg5ufja.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aJ10I22v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pjbniuy0xrdqsg5ufja.jpg" alt="The same diagram, except that the row three has moved into the arrow representing the max aggregate. "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We compare it to our current state, take the greatest value, and update our state: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FxJX9fzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfkp9q9wf5gtey3k752b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FxJX9fzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfkp9q9wf5gtey3k752b.jpg" alt="The same diagram, expect that row three has moved out of the max aggregate, and the state has been updated to the largest value, the value of the third row, 3.0."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we don’t have any more rows to process, so we output our result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CRUQqFz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ye5u1cdnqk3tslrpd225.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRUQqFz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ye5u1cdnqk3tslrpd225.jpg" alt="The same diagram, now noting that there are “no more rows” to process, and including a final result, 3.0, being output at the end of the arrow."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, to summarize, each row comes in, gets compared to our current state, and then the state gets updated to reflect the new greatest value. Then the next row comes in, and we repeat the process until we’ve processed all our rows and output the result.&lt;/p&gt;


&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5c8VL8d---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbqf9uvopm9xq9skfwwd.gif" alt="A GIF depicting the previous diagrams, one after the other, as the rows move through the aggregate."&gt;The max aggregate aggregation process, told in GIFs.




&lt;p&gt;&lt;br&gt;
There’s a name for the function that processes each row and updates the internal state: the &lt;strong&gt;&lt;a href="https://www.postgresql.org/docs/current/sql-createaggregate.html"&gt;state transition function&lt;/a&gt;&lt;/strong&gt; (or just “transition function” for short.) The transition function for an aggregate takes the current state and the value from the incoming row as arguments and produces a new state. &lt;/p&gt;

&lt;p&gt;It’s defined like this, where &lt;code&gt;current_value&lt;/code&gt; represents values from the incoming row, &lt;code&gt;current_state&lt;/code&gt; represents the current aggregate state built up over the previous rows (or NULL if we haven’t yet gotten any), and &lt;code&gt;next_state&lt;/code&gt; represents the output after analyzing the incoming row:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;next_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transition_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#aggregate-internals-composite-state"&gt;
  &lt;/a&gt;
  Aggregate internals: composite state
&lt;/h3&gt;

&lt;p&gt;So, the &lt;code&gt;max()&lt;/code&gt; aggregate has a straightforward state that contains just one value (the largest we’ve seen). But not all aggregates in PostgreSQL have such a simple state. &lt;/p&gt;

&lt;p&gt;Let’s consider the aggregate for average (&lt;code&gt;avg&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To refresh, an average is defined as: &lt;br&gt;


&lt;/p&gt;
&lt;div class="katex-element"&gt;
  &lt;span class="katex-display"&gt;&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;avg(x)=sum(x)count(x)
avg(x) = \frac{sum(x)}{count(x)}
&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;a&lt;/span&gt;&lt;span class="mord mathnormal"&gt;vg&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord mathnormal"&gt;x&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mopen nulldelimiter"&gt;&lt;/span&gt;&lt;span class="mfrac"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;co&lt;/span&gt;&lt;span class="mord mathnormal"&gt;u&lt;/span&gt;&lt;span class="mord mathnormal"&gt;n&lt;/span&gt;&lt;span class="mord mathnormal"&gt;t&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord mathnormal"&gt;x&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="frac-line"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;s&lt;/span&gt;&lt;span class="mord mathnormal"&gt;u&lt;/span&gt;&lt;span class="mord mathnormal"&gt;m&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord mathnormal"&gt;x&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mclose nulldelimiter"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;



&lt;p&gt;To calculate it, we store the sum and the count as our internal state and update our state as we process rows: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pKjWorzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjuxskwee16306gnl48o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pKjWorzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjuxskwee16306gnl48o.gif" alt="A GIF of the aggregation process for the statement  raw `SELECT avg(bar) FROM foo;` endraw , with diagrams similar to the previous. Three rows with values of bar equal to 1.0, 2.0, and 3.0 go through the aggregate, and the transition function updates the state, which has two values, each starting NULL, the sum is updated at each step by adding the value of the incoming row, and the count is incremented.  &amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;
The `avg()` aggregation process, told in GIFs. For `avg()`, the transition function must update a more complex state since the sum and count are stored separately at each aggregation step.




&lt;p&gt;&lt;br&gt;
But, when we’re ready to output our result for &lt;code&gt;avg&lt;/code&gt;, we need to divide &lt;code&gt;sum&lt;/code&gt; by &lt;code&gt;count&lt;/code&gt;:&lt;/p&gt;


&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pPMTzefi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/to9t3tjqp6bj8rpol45m.jpg" alt="An arrow flowchart diagram similar to those before, showing the end state of the avg aggregate. The rows have moved through the aggregate, and the state is 6.0 - the sum and three - the count. There are then some question marks and an end result of 2.0."&gt; For some aggregates, we can output the state directly – but for others, we need to perform an operation on the state before calculating our final result. 




&lt;p&gt;&lt;br&gt;
There’s another function inside the aggregate that performs this calculation: the &lt;strong&gt;&lt;a href="https://www.postgresql.org/docs/current/sql-createaggregate.html"&gt;final function&lt;/a&gt;&lt;/strong&gt;. Once we’ve processed all the rows, the final function takes the state and does whatever it needs to produce the result. &lt;/p&gt;

&lt;p&gt;It’s defined like this, where &lt;code&gt;final_state&lt;/code&gt; represents the output of the transition function after it has processed all the rows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;final_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;final_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And, through pictures:&lt;/p&gt;


&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZoGIP1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8ecxml9yt9lwxa28dih.gif" alt="A GIF that starts the same as the previous GIF, the avg aggregate state is updated as rows pass through the aggregate. Once all the rows are processed, a final function step divides the final sum - 6.0 by the final count - 3 and outputs the result - 2.0. "&gt; How the average aggregate works, told in GIFs. Here, we’re highlighting the role of the final function. 




&lt;p&gt;&lt;br&gt;&lt;br&gt;
To summarize: as an aggregate scans over rows, its &lt;strong&gt;transition function&lt;/strong&gt; updates its internal state. Once the aggregate has scanned all of the rows, its &lt;strong&gt;final function&lt;/strong&gt; produces a result, which is returned to the user.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#improving-the-performance-of-aggregate-functions"&gt;
  &lt;/a&gt;
  Improving the performance of aggregate functions
&lt;/h3&gt;

&lt;p&gt;One interesting thing to note here: the transition function is called many, many more times than the final function: once for each row, whereas the final function is called once per group of rows. &lt;/p&gt;

&lt;p&gt;Now, the transition function isn’t inherently more expensive than the final function on a per-call basis – but because there are usually orders of magnitude more rows going into the aggregate than coming out, the transition function step becomes the most expensive part very quickly. This is especially true when you have high volume time-series data being ingested at high rates; optimizing aggregate transition function calls is important for improving performance. &lt;/p&gt;

&lt;p&gt;Luckily, PostgreSQL already has ways to optimize aggregates.    &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#parallelization-and-the-combine-function"&gt;
  &lt;/a&gt;
  Parallelization and the combine function
&lt;/h3&gt;

&lt;p&gt;Because the transition function is run on each row, &lt;a href="https://www.postgresql.org/message-id/flat/CA%2BTgmoYSL_97a--qAvdOa7woYamPFknXsXX17m0t2Pwc%2BFOvYw%40mail.gmail.com#fb9f2ae2a52ac605a4439a1879ff3c10"&gt;some enterprising PostgreSQL developers&lt;/a&gt; asked: &lt;em&gt;what if we parallelized the transition function calculation?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s revisit our definitions for transition functions and final functions:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;next_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transition_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;final_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;final_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can run this in parallel by instantiating multiple copies of the transition function and handing a subset of rows to each instance. Then, each parallel aggregate will run the transition function over the subset of rows it sees, producing multiple (partial) states, one for each parallel aggregate. But, since we need to aggregate over the entire data set, we can’t run the final function on each parallel aggregate separately because they only have some of the rows. &lt;/p&gt;

&lt;p&gt;So, now we’ve ended up in a bit of a pickle: we have multiple partial aggregate states, and the final function is only meant to work on the single, final state - right before we output the result to the user. &lt;/p&gt;

&lt;p&gt;To solve this problem, we need a new type of function that takes two partial states and combines them into one so that the final function can do its work. This is (aptly) called the &lt;strong&gt;&lt;a href="https://www.postgresql.org/docs/current/sql-createaggregate.html"&gt;combine function&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;We can run the combine function iteratively over all of the partial states that are created when we parallelize the aggregate.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;combined_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;combine_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partial_state_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partial_state_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For instance, in &lt;code&gt;avg&lt;/code&gt;, the combine function will add up the counts and sums.&lt;/p&gt;


&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f40OJeRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei54hrl4gy30hajmboys.gif" alt="A GIF that starts the same as the previous GIF, the avg aggregate state is updated as rows pass through the aggregate. Once all the rows are processed, a final function step divides the final sum - 6.0 by the final count - 3 and outputs the result - 2.0. "&gt; How parallel aggregation works, told in GIFs. Here, we’re highlighting the combine function (We’ve added a couple more rows to illustrate parallel aggregation.)





&lt;p&gt;&lt;br&gt;&lt;br&gt;
Then, after we have the combined state from all of our parallel aggregates, we run the final function and get our result.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deduplication"&gt;
  &lt;/a&gt;
  Deduplication &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Parallelization and the combine function are one way to reduce the cost of calling an aggregate, but it’s not the only way. &lt;/p&gt;

&lt;p&gt;One other built-in PostgreSQL optimization that reduces an aggregate’s cost occurs in a statement like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;half_avg&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;PostgreSQL will optimize this statement to evaluate the &lt;code&gt;avg(bar)&lt;/code&gt; calculation only once and then use that result twice. &lt;/p&gt;

&lt;p&gt;And, if we have different aggregates with the same transition function but different final functions? PostgreSQL further optimizes by calling the transition function (the expensive part) on all the rows and then doing both final functions! Pretty neat!&lt;/p&gt;

&lt;p&gt;Now, that’s not all that PostgreSQL aggregates can do, but it’s a pretty good tour, and it’s enough to get us where we need to go today. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#twostep-aggregation-in-timescaledb-hyperfunctions"&gt;
  &lt;/a&gt;
  Two-step aggregation in TimescaleDB hyperfunctions&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In TimescaleDB, we’ve implemented the two-step aggregation design pattern for our aggregate functions. This generalizes the PostgreSQL internal aggregation API and exposes it to the user via our aggregates, accessors, and rollup functions. (In other words, each of the internal PostgreSQL functions has an equivalent function in TimescaleDB hyperfunctions.)&lt;/p&gt;

&lt;p&gt;As a refresher, when we talk about the two-step aggregation design pattern, we mean the following convention, where we have an inner aggregate call:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ATe43RUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucyq3dmed7kf24n4rtfq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ATe43RUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucyq3dmed7kf24n4rtfq.jpg" alt="The same as the previous in terms of code, except the sections: time_weight('LOCF', value) and percentile_agg(value) are highlighted "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And an outer accessor call:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ToL7uzUY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9x6h15xut38k0s3b670.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ToL7uzUY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9x6h15xut38k0s3b670.jpg" alt="The same as the previous in terms of code, except the sections: average(time_weight('LOCF', value)) and approx_percentile(0.5, percentile_agg(value)) are highlighted"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The inner aggregate call returns the internal state, just like the transition function does in PostgreSQL aggregates. &lt;/p&gt;

&lt;p&gt;The outer accessor call takes the internal state and returns a result to the user, just like the final function does in PostgreSQL. &lt;/p&gt;

&lt;p&gt;We also have special &lt;a href="https://docs.timescale.com/api/latest/hyperfunctions/percentile-approximation/rollup-percentile/#sample-usage"&gt;&lt;code&gt;rollup&lt;/code&gt;&lt;/a&gt; functions &lt;a href="https://docs.timescale.com/api/latest/hyperfunctions/time-weighted-averages/rollup-timeweight/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=hyperfunctions-1-0-2021&amp;amp;utm_content=roll-up-timeweight-docs"&gt;defined for each of our aggregates&lt;/a&gt; that work much like PostgreSQL combine functions. &lt;/p&gt;


&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Or6iPdEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgz5f9gw8cbanb0an8wg.jpg" alt="A table with columns labeled: the PostgreSQL internal aggregation API, Two-step aggregate equivalent, and TimescaleDB hyperfunction example. In the first row, we have the transition function equivalent to the aggregate, and the examples are time_weight() and percentile_agg(). In the second row, we have the final function, equivalent to the accessor, and the examples are average() and approx_percentile(). In the third row, we have the combine function equivalent to rollup in two-step aggregates, and the example is rollup()."&gt;PostgreSQL internal aggregation APIs and their TimescaleDB hyperfunctions’ equivalent







&lt;h2&gt;
  &lt;a href="#why-we-use-the-twostep-aggregate-design-pattern"&gt;
  &lt;/a&gt;
  Why we use the two-step aggregate design pattern&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;There are four basic reasons we expose the two-step aggregate design pattern to users rather than leave it as an internal structure: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Allow multi-parameter aggregates to re-use state, making them more efficient&lt;/li&gt;
&lt;li&gt;Cleanly distinguish between parameters that affect aggregates vs. accessors, making performance implications easier to understand and predict&lt;/li&gt;
&lt;li&gt;Enable easy to understand rollups, with logically consistent results, in continuous aggregates and window functions (one of our most common requests on continuous aggregates)&lt;/li&gt;
&lt;li&gt;Allow easier retrospective analysis of downsampled data in continuous aggregates as requirements change, but the data is already gone.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s a little theoretical, so let’s dive in and explain each one.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reusing-state"&gt;
  &lt;/a&gt;
  Re-using state
&lt;/h3&gt;

&lt;p&gt;PostgreSQL is very good at optimizing statements (as we saw earlier in this post, through pictures 🙌), but you have to give it things in a way it can understand. &lt;/p&gt;

&lt;p&gt;For instance, &lt;a href="#deduplication"&gt;when we talked about deduplication&lt;/a&gt;, we saw that PostgreSQL could “figure out” when a statement occurs more than once in a query (i.e., &lt;code&gt;avg(bar)&lt;/code&gt;) and only run the statement a single time to avoid redundant work:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;half_avg&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This works because the &lt;code&gt;avg(bar)&lt;/code&gt; occurs multiple times without variation. &lt;/p&gt;

&lt;p&gt;However, if I write the equation in a slightly different way and move the division inside the parentheses so that the expression &lt;code&gt;avg(bar)&lt;/code&gt; doesn’t repeat so neatly, PostgreSQL can’t figure out how to optimize it:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;half_avg&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It doesn’t know that the division is commutative, or that those two queries are equivalent. &lt;/p&gt;

&lt;p&gt;This is a complicated problem for database developers to solve, and thus, as a PostgreSQL user, you need to make sure to write your query in a way that the database can understand. &lt;/p&gt;

&lt;p&gt;Performance problems caused by equivalent statements that the database doesn’t understand are equal (or that are equal in the specific case you wrote, but not in the general case) can be some of the trickiest SQL optimizations to figure out as a user. &lt;/p&gt;

&lt;p&gt;Therefore, &lt;strong&gt;when we design our APIs, we try to make it hard for users to unintentionally write low-performance code: in other words, the default option should be the high-performance option.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the next bit, it’ll be useful to have a simple table defined as:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="n"&gt;timestamptz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="nb"&gt;DOUBLE&lt;/span&gt; &lt;span class="nb"&gt;PRECISION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let’s look at an example of how we use two-step aggregation in the &lt;a href="https://docs.timescale.com/api/latest/hyperfunctions/percentile-approximation/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=hyperfunctions-1-0-2021&amp;amp;utm_content=percentile-approx-docs"&gt;percentile approximation hyperfunction&lt;/a&gt; to allow PostgreSQL to optimize performance.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;percentile_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;percentile_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;percentile_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p90&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;...is treated as the same as:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pct_agg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pct_agg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pct_agg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p90&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;percentile_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pct_agg&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pct&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This calling convention allows us to use identical aggregates so that, under the hood, PostgreSQL can deduplicate calls to the identical aggregates (and is faster as a result).&lt;/p&gt;

&lt;p&gt;Now, let’s compare this to the one-step aggregate approach. &lt;/p&gt;

&lt;p&gt;PostgreSQL can’t deduplicate aggregate calls here because the extra parameter in the &lt;code&gt;approx_percentile&lt;/code&gt; aggregate changes with each call:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- NB: THIS IS AN EXAMPLE OF AN API WE DECIDED NOT TO USE, IT DOES NOT WORK&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p90&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So, even though all of those functions could use the same approximation built up over all the rows, PostgreSQL has no way of knowing that. The two-step aggregation approach enables us to structure our calls so that PostgreSQL can optimize our code, and it enables developers to understand when things will be more expensive and when they won't. Multiple different aggregates with different inputs will be expensive, whereas multiple accessors to the same aggregate will be much less expensive. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cleanly-distinguishing-between-aggregateaccessor-parameters"&gt;
  &lt;/a&gt;
  Cleanly distinguishing between aggregate/accessor parameters
&lt;/h3&gt;

&lt;p&gt;We also chose the two-step aggregate approach because some of our aggregates can take multiple parameters or options themselves, and their accessors can also take options:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uddsketch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;--1000 buckets, 0.001 target err&lt;/span&gt;
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uddsketch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uddsketch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;less_accurate_median&lt;/span&gt; &lt;span class="c1"&gt;-- modify the terms for the aggregate get a new approximation&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That’s an example of &lt;a href="https://docs.timescale.com/api/latest/hyperfunctions/percentile-approximation/percentile-aggregation-methods/uddsketch/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=hyperfunctions-1-0-2021&amp;amp;utm_content=uddsketch-docs"&gt;&lt;code&gt;uddsketch&lt;/code&gt;&lt;/a&gt;, an &lt;a href="https://docs.timescale.com/api/latest/hyperfunctions/percentile-approximation/percentile-aggregation-methods/#choosing-the-right-algorithm-for-your-use-case"&gt;advanced aggregation method&lt;/a&gt; for percentile approximation that can take its own parameters. &lt;/p&gt;

&lt;p&gt;Imagine if the parameters were jumbled together in one aggregate:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- NB: THIS IS AN EXAMPLE OF AN API WE DECIDED NOT TO USE, IT DOES NOT WORK&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;median&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It’d be pretty difficult to understand which argument is related to which part of the functionality.&lt;/p&gt;

&lt;p&gt;Conversely, the two-step approach separates the arguments to the accessor vs. aggregate very cleanly, where the aggregate function is defined in parenthesis within the inputs of our final function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uddsketch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;median&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;By making it clear which is which, users can know that if they change the inputs to the aggregate, they will get more (costly) aggregate nodes, =while inputs to the accessor are cheaper to change. &lt;/p&gt;

&lt;p&gt;So, those are the first two reasons we expose the API - and what it allows developers to do as a result. The last two reasons involve continuous aggregates and how they relate to hyperfunctions, so first, a quick refresher on what they are. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#twostep-aggregation-continuous-aggregates-in-timescaledb"&gt;
  &lt;/a&gt;
  Two-step aggregation + continuous aggregates in TimescaleDB&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;TimescaleDB includes a feature called &lt;a href="https://docs.timescale.com/timescaledb/latest/how-to-guides/continuous-aggregates/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=hyperfunctions-1-0-2021&amp;amp;utm_content=cont-aggs-docs"&gt;continuous aggregates&lt;/a&gt;, which are designed to make queries on very large datasets run faster. TimescaleDB continuous aggregates continuously and incrementally store the results of an aggregation query in the background, so when you run the query, only the data that has changed needs to be computed, not the entire dataset. &lt;/p&gt;

&lt;p&gt;In our discussion of the combine function &lt;a href="#two-step-in-tsdb"&gt;above&lt;/a&gt;, we covered how you could take the expensive work of computing the transition function over every row and split the rows over multiple parallel aggregates to speed up the calculation. &lt;/p&gt;

&lt;p&gt;TimescaleDB continuous aggregates do something similar, except they spread the computation work over time rather than between parallel processes running simultaneously. The continuous aggregate computes the transition function over a subset of rows inserted some time in the past, stores the result, and then, at query time, we only need to compute over the raw data for a small section of recent time that we haven’t yet calculated. &lt;/p&gt;

&lt;p&gt;When we designed TimescaleDB hyperfunctions, we wanted them to work well within continuous aggregates and even open new possibilities for users.  &lt;/p&gt;

&lt;p&gt;Let’s say I create a continuous aggregate from the simple table above to compute the sum, average, and percentile (the latter using a hyperfunction) in 15 minute increments:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;foo_15_min_agg&lt;/span&gt;
&lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timescaledb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;continuous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;time_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'15 min'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;percentile_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'15 min'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And then what if I come back and I want to re-aggregate it to hours or days, rather than 15-minute buckets – or need to aggregate my data across all ids? Which aggregates can I do that for, and which can’t I? &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#logically-consistent-rollups"&gt;
  &lt;/a&gt;
  Logically consistent rollups
&lt;/h3&gt;

&lt;p&gt;One of the problems we wanted to solve with two-step aggregation was how to convey to the user when it is “okay” to re-aggregate and when it’s not. (By “okay,” I mean you would get the same result from the re-aggregated data as you would running the aggregate on the raw data directly.) &lt;/p&gt;

&lt;p&gt;For instance:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-- is equivalent to:&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;tab&lt;/span&gt;
    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-- is NOT equivalent to:&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;tab&lt;/span&gt;
    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Why is re-aggregation okay for &lt;code&gt;sum&lt;/code&gt; but not for &lt;code&gt;avg&lt;/code&gt;? &lt;/p&gt;

&lt;p&gt;Technically, it’s logically consistent to re-aggregate when: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The aggregate returns the internal aggregate state. The internal aggregate state for sum is &lt;code&gt;(sum)&lt;/code&gt;, whereas for average, it is&lt;code&gt;(sum, count)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The aggregate’s combine and transition functions are equivalent. For &lt;code&gt;sum()&lt;/code&gt;, the states and the operations are the same. For &lt;code&gt;count()&lt;/code&gt;, the states are the same, but the transition and combine functions perform &lt;em&gt;different operations&lt;/em&gt; on them. &lt;code&gt;sum()&lt;/code&gt;’s transition function adds the incoming value to the state, and its combine function adds two states together, or a sum of sums.  Conversely, &lt;code&gt;count()&lt;/code&gt;s transition function increments the state for each incoming value, but its combine function adds two states together, or a sum of counts. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, you have to have in-depth (and sometimes rather arcane) knowledge about each aggregate’s internals to know which ones meet the above criteria – and therefore, which ones you can re-aggregate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With the two-step aggregate approach, we can convey when it is logically consistent to re-aggregate by exposing our equivalent of the combine function when the aggregate allows it.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;We call that function &lt;code&gt;rollup()&lt;/code&gt;. &lt;code&gt;Rollup()&lt;/code&gt; takes multiple inputs from the aggregate and combines them into a single value. &lt;/p&gt;

&lt;p&gt;All of our aggregates that can be combined have &lt;code&gt;rollup&lt;/code&gt; functions that will combine the output of the aggregate from two different groups of rows. (Technically, &lt;code&gt;rollup()&lt;/code&gt; is an aggregate function because it acts on multiple rows. For clarity, I’ll call them rollup functions to distinguish them from the base aggregate).  Then you can call the accessor on the combined output! &lt;/p&gt;

&lt;p&gt;So using that continuous aggregate we created to get a 1 day re-aggregation of our &lt;code&gt;percentile_agg&lt;/code&gt; becomes as simple as:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;time_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1 day'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;rollup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;percentile_agg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;median&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo_15_min_agg&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1 day'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;(We actually suggest that you create your continuous aggregates without calling the accessor function for this very reason. Then, you can just create views over top or put the accessor call in your query). &lt;/p&gt;

&lt;p&gt;This brings us to our final reason.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#retrospective-analysis-using-continuous-aggregates"&gt;
  &lt;/a&gt;
  Retrospective analysis using continuous aggregates
&lt;/h3&gt;

&lt;p&gt;When we create a continuous aggregate, we’re defining a view of our data that we then could be stuck with for a very long time. &lt;/p&gt;

&lt;p&gt;For example, we might have a data retention policy that deletes the underlying data after X time period. If we want to go back and re-calculate anything, it can be challenging, if not impossible, since we’ve “dropped” the data. &lt;/p&gt;

&lt;p&gt;But, we understand that in the real world, you don’t always know what you’re going to need to analyze ahead of time. &lt;/p&gt;

&lt;p&gt;Thus, we designed hyperfunctions to use the two-step aggregate approach, so they would better integrate with continuous aggregates. As a result, users store the aggregate state in the continuous aggregate view and modify accessor functions without requiring them to recalculate old states that might be difficult (or impossible) to reconstruct (because the data is archived, deleted, etc.). &lt;/p&gt;

&lt;p&gt;The two-step aggregation design also allows for much greater flexibility with continuous aggregates. For instance, let’s take a continuous aggregate where we do the aggregate part of the two-step aggregation like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;foo_15_min_agg&lt;/span&gt;
&lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timescaledb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;continuous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;time_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'15 min'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;percentile_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'15 min'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When we first create the aggregate, we might only want to get the median:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;percentile_agg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;median&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo_15_min_agg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But then, later, we decide we want to know the 95th percentile as well. &lt;/p&gt;

&lt;p&gt;Luckily, we don’t have to modify the continuous aggregate; we &lt;strong&gt;just modify the parameters to the accessor function in our original query to return the data we want from the aggregate state:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;percentile_agg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;percentile_agg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p95&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo_15_min_agg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And then, if a year later, we want the 99th percentile as well, we can do that too:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;percentile_agg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;percentile_agg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;approx_percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;percentile_agg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p99&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foo_15_min_agg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That’s just scratching the surface. Ultimately, our goal is to provide a high level of developer productivity that enhances other PostgreSQL and TimescaleDB features, like aggregate deduplication and continuous aggregates. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#an-example-of-how-the-twostep-aggregate-design-impacts-hyperfunctions-code"&gt;
  &lt;/a&gt;
  An example of how the two-step aggregate design impacts hyperfunctions’ code&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To illustrate how the two-step aggregate design pattern impacts how we think about and code hyperfunctions, let’s look at the &lt;a href="https://docs.timescale.com/api/latest/hyperfunctions/time-weighted-averages/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=hyperfunctions-1-0-2021&amp;amp;utm_content=time-weight-avgs-docs"&gt;time-weighted average family of functions&lt;/a&gt;. (Our &lt;a href="https://blog.timescale.com/blog/what-time-weighted-averages-are-and-why-you-should-care/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=hyperfunctions-1-0-2021&amp;amp;utm_content=time-weight-avgs-blogpost"&gt;what time-weighted averages are and why you should care&lt;/a&gt; post provides a lot of context for this next bit, so if you haven’t read it, we recommend doing so. You can also skip this next bit for now.)&lt;/p&gt;

&lt;p&gt;The equation for the time-weighted average is as follows:&lt;br&gt;

&lt;/p&gt;
&lt;div class="katex-element"&gt;
  &lt;span class="katex-display"&gt;&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;time_weighted_average=area_under_curveΔT
time\_weighted\_average = \frac{area\_under\_curve}{ \Delta T}
&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;t&lt;/span&gt;&lt;span class="mord mathnormal"&gt;im&lt;/span&gt;&lt;span class="mord mathnormal"&gt;e&lt;/span&gt;&lt;span class="mord"&gt;_&lt;/span&gt;&lt;span class="mord mathnormal"&gt;w&lt;/span&gt;&lt;span class="mord mathnormal"&gt;e&lt;/span&gt;&lt;span class="mord mathnormal"&gt;i&lt;/span&gt;&lt;span class="mord mathnormal"&gt;g&lt;/span&gt;&lt;span class="mord mathnormal"&gt;h&lt;/span&gt;&lt;span class="mord mathnormal"&gt;t&lt;/span&gt;&lt;span class="mord mathnormal"&gt;e&lt;/span&gt;&lt;span class="mord mathnormal"&gt;d&lt;/span&gt;&lt;span class="mord"&gt;_&lt;/span&gt;&lt;span class="mord mathnormal"&gt;a&lt;/span&gt;&lt;span class="mord mathnormal"&gt;v&lt;/span&gt;&lt;span class="mord mathnormal"&gt;er&lt;/span&gt;&lt;span class="mord mathnormal"&gt;a&lt;/span&gt;&lt;span class="mord mathnormal"&gt;g&lt;/span&gt;&lt;span class="mord mathnormal"&gt;e&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mopen nulldelimiter"&gt;&lt;/span&gt;&lt;span class="mfrac"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;Δ&lt;/span&gt;&lt;span class="mord mathnormal"&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="frac-line"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;a&lt;/span&gt;&lt;span class="mord mathnormal"&gt;re&lt;/span&gt;&lt;span class="mord mathnormal"&gt;a&lt;/span&gt;&lt;span class="mord"&gt;_&lt;/span&gt;&lt;span class="mord mathnormal"&gt;u&lt;/span&gt;&lt;span class="mord mathnormal"&gt;n&lt;/span&gt;&lt;span class="mord mathnormal"&gt;d&lt;/span&gt;&lt;span class="mord mathnormal"&gt;er&lt;/span&gt;&lt;span class="mord"&gt;_&lt;/span&gt;&lt;span class="mord mathnormal"&gt;c&lt;/span&gt;&lt;span class="mord mathnormal"&gt;u&lt;/span&gt;&lt;span class="mord mathnormal"&gt;r&lt;/span&gt;&lt;span class="mord mathnormal"&gt;v&lt;/span&gt;&lt;span class="mord mathnormal"&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mclose nulldelimiter"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;



&lt;p&gt;As we noted in the table above: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;time_weight()&lt;/code&gt; is TimescaleDB hyperfunctions’ aggregate and corresponds to the transition function in PostgreSQL’s internal API.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;average()&lt;/code&gt; is the accessor, which corresponds to the PostgreSQL final function.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rollup()&lt;/code&gt; for re-aggregation corresponds to the PostgreSQL combine function. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;time_weight()&lt;/code&gt; function returns an aggregate type that has to be usable by the other functions in the family.&lt;/p&gt;

&lt;p&gt;In this case, we decided on a &lt;code&gt;TimeWeightSummary&lt;/code&gt; type that is defined like so (in pseudocode):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;TimeWeightSummary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w_sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_pt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_pt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;w_sum&lt;/code&gt; is the weighted sum (another name for the area under the curve), and &lt;code&gt;first_pt&lt;/code&gt; and &lt;code&gt;last_pt&lt;/code&gt; are the first and last (time, value) pairs in the rows that feed into the &lt;code&gt;time_weight()&lt;/code&gt; aggregate. &lt;/p&gt;

&lt;p&gt;Here’s a graphic depiction of those elements, which builds on our &lt;a href="https://blog.timescale.com/blog/what-time-weighted-averages-are-and-why-you-should-care/#mathy-bits-how-to-derive-a-time-weighted-average"&gt;how to derive a time-weighted average theoretical description&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ro3spopQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yt3d7d06r1fajo7iiued.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ro3spopQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yt3d7d06r1fajo7iiued.jpg" alt="A graph showing value on the y-axis and time on the x-axis. There are four points:  open parens t 1 comma v 1 close parens, labeled first point to open parens t 4 comma  v 4 close parens, labeled last point. The points are spaced unevenly in time on the graph. The area under the graph is shaded, and labeled w underscore sum. The time axis has a brace describing the total distance between the first and last points labeled Delta T. "&gt;&lt;/a&gt;&lt;/p&gt;
Depiction of the values we store in the `TimeWeightSummary` representation. 




&lt;p&gt;&lt;br&gt;&lt;br&gt;
So, the &lt;code&gt;time_weight()&lt;/code&gt; aggregate does all of the calculations as it receives each of the points in our graph and builds a weighted sum for the time period (ΔT) between the first and last points it “sees.” It then outputs the &lt;code&gt;TimeWeightSummary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;average()&lt;/code&gt; accessor function performs simple calculations to return the time-weighted average from the &lt;code&gt;TimeWeightSummary&lt;/code&gt;  (in pseudocode where &lt;code&gt;pt.time()&lt;/code&gt; returns the time from the point):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimeWeightSummary&lt;/span&gt; &lt;span class="n"&gt;tws&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;delta_t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_pt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;tws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_pt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;time_weighted_average&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w_sum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;delta_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;time_weighted_average&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, as we built the &lt;code&gt;time_weight&lt;/code&gt; hyperfunction, ensuring the &lt;code&gt;rollup()&lt;/code&gt; function worked as expected was a little more difficult – and introduced constraints that impacted the design of our &lt;code&gt;TimeWeightSummary&lt;/code&gt; data type. &lt;/p&gt;

&lt;p&gt;To understand the rollup function, let’s use our graphical example and imagine the &lt;code&gt;time_weight()&lt;/code&gt; function returns two &lt;code&gt;TimeWeightSummaries&lt;/code&gt; from different regions of time like so: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BeRzlB2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdesd8okhaobc9lk1imk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BeRzlB2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdesd8okhaobc9lk1imk.jpg" alt="A similar graph to the previous, except that now there are two sets of shaded regions. The first is similar to the previous and is labeled with first sub 1 open parens t 1 comma v 1 close parens, last  1 open parens t 4 comma  v 4 close parens , and w underscore sum  1.  The second is similar, with points first 2 open parens t 5 comma  v 4 close parens and last 2 open parens t 8 comma  v 8 close parens and the label w underscore sum 2 on the shaded portion."&gt;&lt;/a&gt;&lt;/p&gt;
What happens when we have multiple `TimeWeightSummaries` representing different regions of the graph. 




&lt;p&gt;&lt;br&gt;
The &lt;code&gt;rollup()&lt;/code&gt; function needs to take in and return the same &lt;code&gt;TimeWeightSummary&lt;/code&gt; data type so that our &lt;code&gt;average()&lt;/code&gt; accessor can understand it. (This mirrors how PostgreSQL’s combine function takes in two states from the transition function and then returns a single state for the final function to process). &lt;/p&gt;

&lt;p&gt;We also want the &lt;code&gt;rollup()&lt;/code&gt; output to be the same as if we had computed the &lt;code&gt;time_weight()&lt;/code&gt; over all the underlying data. The output should be a &lt;code&gt;TimeWeightSummary&lt;/code&gt; representing the full region.  &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;TimeWeightSummary&lt;/code&gt; we output should also account for the area in the gap between these two weighted sum states:&lt;/p&gt;


&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLvCvb7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/en9qxli39gr6khvcopkl.jpg" alt="A similar picture to the previous, with the area between the points open parens t 4 comma  v 4 close parens aka last 1 and open parens t 5 comma  v 5 close parens aka first 2, down to the time axis highlighted. This is called w underscore sum gap. "&gt;Mind the gap! (between one `TimeWeightSummary` and the next).




&lt;p&gt;&lt;br&gt;
The gap area is easy to get because we have the last_1 and first_2 points - and it’s the same as the &lt;code&gt;w_sum&lt;/code&gt; we’d get by running the&lt;code&gt;time_weight()&lt;/code&gt; aggregate on them.&lt;/p&gt;

&lt;p&gt;Thus, the overall &lt;code&gt;rollup()&lt;/code&gt; function needs to do something like this (where &lt;code&gt;w_sum()&lt;/code&gt; extracts the weighted sum from the &lt;code&gt;TimeWeightSummary&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="k"&gt;rollup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimeWeightSummary&lt;/span&gt; &lt;span class="n"&gt;tws1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TimeWeightSummary&lt;/span&gt; &lt;span class="n"&gt;tws2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;TimeWeightSummary&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;w_sum_gap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time_weight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tws1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_pt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tws2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_pt&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;w_sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;w_sum_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w_sum_gap&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tws1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w_sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tws2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w_sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TimeWeightSummary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w_sum_total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tws1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_pt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tws2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_pt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Graphically, that means we’d end up with a single &lt;code&gt;TimeWeightSummary&lt;/code&gt; representing the whole area:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5u3CzzCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czw7y3lgsot8q3sppaa2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5u3CzzCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czw7y3lgsot8q3sppaa2.jpg" alt="Similar to the previous graphs, except that now there is only one region that has been shaded, the combined area of the w underscore sum 1, w underscore sum 2, and w underscore sum gap has become one area, w underscore sum. Only the overall first open parens t 1 comma  v 1 close parens and last open parens t 8 comma  v 8 close parens points are shown."&gt;&lt;/a&gt;&lt;/p&gt;
The combined `TimeWeightSummary`. 




&lt;p&gt;&lt;br&gt;
So that’s how the two-step aggregate design approach ends up affecting the real-world implementation of our time-weighted average hyperfunctions. The above explanations are a bit condensed, but they should give you a more concrete look at how &lt;code&gt;time_weight()&lt;/code&gt; aggregate, &lt;code&gt;average()&lt;/code&gt; accessor, and &lt;code&gt;rollup()&lt;/code&gt; functions work.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#summing-it-up"&gt;
  &lt;/a&gt;
  Summing it up&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now that you’ve gotten a tour of the PostgreSQL aggregate API,  how it inspired us to make the TimescaleDB hyperfunctions two-step aggregate API, and a few examples of how this works in practice, we hope you'll try it out yourself and tell us what you think :). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you’d like to get started with hyperfunctions right away, &lt;a href="https://console.forge.timescale.com/signup/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=hyperfunctions-1-0-2021&amp;amp;utm_content=sign-up"&gt;spin up a fully managed TimescaleDB service and try it for free&lt;/a&gt;&lt;/strong&gt;. Hyperfunctions are pre-loaded on each new database service on Timescale Forge, so after you create a new service, you’re all set to use them!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you prefer to manage your own database instances, you can &lt;a href="https://github.com/timescale/timescaledb-toolkit"&gt;download and install the timescaledb_toolkit extension&lt;/a&gt;&lt;/strong&gt; on GitHub, after which you’ll be able to use &lt;code&gt;time_weight&lt;/code&gt; and all other hyperfunctions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you have questions or comments on this blog post, &lt;a href="https://github.com/timescale/timescaledb-toolkit/discussions/196"&gt;we’ve started a discussion on our GitHub page, and we’d love to hear from you&lt;/a&gt;&lt;/strong&gt;. (And, if you like what you see, GitHub ⭐ are always welcome and appreciated too!)&lt;/p&gt;

&lt;p&gt;We love building in public, and you can view our &lt;a href="https://github.com/timescale/timescaledb-toolkit"&gt;upcoming roadmap on GitHub&lt;/a&gt; for a list of proposed features, features we’re currently implementing, and features available to use today. For reference, the two-step aggregate approach isn’t just used in the stabilized hyperfunctions covered here; it’s also used in many of our experimental features, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/timescale/timescaledb-toolkit/blob/main/docs/stats_agg.md"&gt;&lt;code&gt;stats_agg()&lt;/code&gt;&lt;/a&gt; uses two-step aggregation to make simple statistical aggregates, like average and standard deviation, easier to work with in continuous aggregates and to &lt;a href="https://github.com/timescale/timescaledb-toolkit/blob/main/docs/rolling_average_api_working.md"&gt;simplify computing rolling averages&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/timescale/timescaledb-toolkit/blob/main/docs/counter_agg.md"&gt;&lt;code&gt;counter_agg()&lt;/code&gt;&lt;/a&gt; uses two-step aggregation to make working with counters more efficient and composable.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/timescale/timescaledb-toolkit/blob/main/docs/hyperloglog.md"&gt;&lt;code&gt;Hyperloglog&lt;/code&gt;&lt;/a&gt; uses two-step aggregation in conjunction with continuous aggregates to give users faster approximate COUNT DISTINCT rollups over longer periods of time. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These features will be stabilized soon, but we’d love your feedback while the APIs are still evolving. What would make them more intuitive? Easier to use? &lt;a href="https://github.com/timescale/timescaledb-toolkit/issues"&gt;Open an issue&lt;/a&gt; or &lt;a href="https://github.com/timescale/timescaledb-toolkit/discussions"&gt;start a discussion&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>database</category>
      <category>postgres</category>
      <category>opensource</category>
      <category>timeseries</category>
    </item>
  </channel>
</rss>
