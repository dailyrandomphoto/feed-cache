<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Don't Optimize Your React App, Use PreactÂ Instead</title>
      <author>Nilanth</author>
      <pubDate>Mon, 01 Nov 2021 08:44:18 +0000</pubDate>
      <link>https://dev.to/nilanth/dont-optimize-your-react-app-use-preact-instead-30og</link>
      <guid>https://dev.to/nilanth/dont-optimize-your-react-app-use-preact-instead-30og</guid>
      <description>&lt;p&gt;Preact - Performance Optimization by default&lt;/p&gt;

&lt;p&gt;A few months ago, I wrote an &lt;a href="https://dev.to/nilanth/how-to-reduce-react-app-loading-time-by-70-1kmm"&gt;article based on optimizing react loading time&lt;/a&gt;, and most of the reader's comments were to try &lt;a href="https://preactjs.com/"&gt;Preact&lt;/a&gt; to get default optimization. So I decided to try preact with the same app used for the previous article. Let's first get an intro about Preact.&lt;/p&gt;

&lt;p&gt;Preact is a React alternative library with all the react features!.. Preact is a &lt;strong&gt;3KB&lt;/strong&gt; library. It is very small compared to react, as react and react-dom gzip size is around &lt;strong&gt;41KB&lt;/strong&gt; excluding react-scripts based on &lt;a href="https://bundlephobia.com/"&gt;bundlephobia&lt;/a&gt;. Some highlighted features of preact are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Lightweight Virtual Dom&lt;/li&gt;
&lt;li&gt;Small in Size&lt;/li&gt;
&lt;li&gt;Performance optimized by default&lt;/li&gt;
&lt;li&gt;Integration is simple&lt;/li&gt;
&lt;li&gt;PWA by default&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let's see preact in action.&lt;/p&gt;

&lt;p&gt;I have developed the same app in React and Preact to test the app performance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M9BH7rkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m21a7vqec6widzcafnor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M9BH7rkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m21a7vqec6widzcafnor.png" alt="React" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;
ReactJS



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wxpqu9ow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kymf0t9tu6kca3rs74h3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wxpqu9ow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kymf0t9tu6kca3rs74h3.png" alt="Preact" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;
PREACT


  

&lt;p&gt;For react app I used &lt;a href="https://create-react-app.dev/"&gt;Create React App&lt;/a&gt; and for Preact used &lt;a href="https://github.com/preactjs/preact-cli"&gt;preact-cli&lt;/a&gt;. Preact also gives an option to convert your existing react app to preact using &lt;a href="https://github.com/preactjs/preact-compat"&gt;preact-compat&lt;/a&gt;, but I have built an app from scratch to see the best result.&lt;/p&gt;

&lt;p&gt;To compare both app performances, I used &lt;a href="https://gtmetrix.com/"&gt;GTmetrix&lt;/a&gt; and hosted both apps in &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-app-performance"&gt;
  &lt;/a&gt;
  React App Performance
&lt;/h2&gt;

&lt;p&gt;Below is the score given by &lt;strong&gt;GTMetrics&lt;/strong&gt; for React-based App. I have used Route Based &lt;strong&gt;Code Splitting&lt;/strong&gt; for the dashboard Component. The performance is &lt;strong&gt;80%&lt;/strong&gt; with &lt;strong&gt;B grade&lt;/strong&gt;, largest content paint (&lt;strong&gt;LCP&lt;/strong&gt;) and Layout Shifting (&lt;strong&gt;CLS&lt;/strong&gt;) seems low.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ym9jw5aT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9duvf31zh9dz1cpfyk5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ym9jw5aT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9duvf31zh9dz1cpfyk5j.png" alt="react-p" width="880" height="139"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we see in the below image, the entire page is loaded in &lt;strong&gt;2 sec&lt;/strong&gt;, First Content Paint is around &lt;strong&gt;1 sec&lt;/strong&gt;. Seems the performance is Not bad.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aGNN4stW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ua7mplzkyms3boc2afzm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aGNN4stW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ua7mplzkyms3boc2afzm.png" alt="react-lt" width="880" height="200"&gt;&lt;/a&gt;&lt;/p&gt;
ReactJS Loding Frames



&lt;h2&gt;
  &lt;a href="#preact-app-performance"&gt;
  &lt;/a&gt;
  Preact App Performance
&lt;/h2&gt;

&lt;p&gt;All the metrics are in Green!!!. Seems the same app in Preact scored &lt;strong&gt;100%&lt;/strong&gt; with an &lt;strong&gt;A grade&lt;/strong&gt; in GTMetrix. The largest content paint (&lt;strong&gt;LCP&lt;/strong&gt;) is less than &lt;strong&gt;500ms&lt;/strong&gt;, No Layout Shifting (&lt;strong&gt;CLS&lt;/strong&gt;) happened. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m-paYzFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mc8f0mn0kionx40l09ph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m-paYzFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mc8f0mn0kionx40l09ph.png" alt="preact-p" width="880" height="156"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This looks very impressive. Preact optimized our dashboard app quite well. The performance is drastically increased compared to React. Let us check the Loading time&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUQoGQaK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikbqb26kdpya7zgyv4t5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUQoGQaK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikbqb26kdpya7zgyv4t5.png" alt="preact-lt" width="880" height="171"&gt;&lt;/a&gt;&lt;/p&gt;
PREACT Loding Frames



&lt;p&gt;As we see in the above image. The entire App loads in &lt;strong&gt;1.3 secs&lt;/strong&gt; and the Time to First Byte (&lt;strong&gt;TTFB&lt;/strong&gt;)is &lt;strong&gt;179ms&lt;/strong&gt; !!. Preact seems very faster compared to React and it handles everything by default.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUQoGQaK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikbqb26kdpya7zgyv4t5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUQoGQaK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikbqb26kdpya7zgyv4t5.png" alt="react-pc" width="880" height="171"&gt;&lt;/a&gt;&lt;/p&gt;
PREACT


 

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aGNN4stW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ua7mplzkyms3boc2afzm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aGNN4stW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ua7mplzkyms3boc2afzm.png" alt="preact-pc" width="880" height="200"&gt;&lt;/a&gt;&lt;/p&gt;
ReactJS



&lt;p&gt;As looking at the page loading side by side, Preact app loads well ahead compared to React and The &lt;strong&gt;Time to interact&lt;/strong&gt; is also faster than react app. Preact is &lt;a href="https://web.dev/progressive-web-apps/"&gt;Progressive Web App&lt;/a&gt;(PWA) by default so instant loading on repeat visits.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nXAMhign--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj6cm5oo21j9r5emnp8g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXAMhign--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj6cm5oo21j9r5emnp8g.png" alt="pwa" width="654" height="420"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Preact also gives some useful warning reg bundle size increase during the build as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---W1pc850--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj6vphck9pe29jeewp16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---W1pc850--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj6vphck9pe29jeewp16.png" alt="warnings" width="880" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#suspense-and%C2%A0lazy"&gt;
  &lt;/a&gt;
  Suspense andÂ Lazy
&lt;/h2&gt;

&lt;p&gt;Some limitation I faced when converting to Preact is that Suspense and lazy loading are experimental and don't support on production as of now. but route based code splitting is enabled by default for the routes directory. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://preactjs.com/"&gt;Preact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://preactjs.com/guide/v10/differences-to-react/"&gt;Difference to React&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As based on the above comparison Preact leads in all parts. Due to reduced library size and fast, Preact allow us to focus on developing features instead of manual optimization.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;p&gt;Get more updates on &lt;a href="https://twitter.com/Nilanth"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-blogs"&gt;
  &lt;/a&gt;
  More Blogs
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-structure-your-react-redux-app-4d24"&gt;How to Structure Your React Redux App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-reduce-react-app-loading-time-by-70-1kmm"&gt;How to Reduce React App Loading Time By 70%&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/build-a-portfolio-using-next-js-tailwind-and-vercel-4dd8"&gt;Build a Portfolio Using Next.js, Tailwind, and Vercel with Dark Mode Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/no-more-import-in-react-2mbo"&gt;No More ../../../ Import in React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/10-react-packages-with-1k-ui-components-2bf3"&gt;10 React Packages with 1K UI Components
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/5-packages-to-optimize-and-speed-up-your-react-app-during-development-4h5f"&gt;5 Packages to Optimize and Speed Up Your React App During Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-use-axios-in-an-optimized-and-scalable-way-with-react-518n"&gt;How To Use Axios in an Optimized and Scalable Way With React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/15-custom-hooks-to-make-your-react-component-lightweight-17cd"&gt;15 Custom Hooks to Make your React Component Lightweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/10-ways-to-host-your-react-app-for-free-27ga"&gt;10 Ways to Host Your React App For Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-secure-jwt-in-a-single-page-application-cko"&gt;How to Secure JWT in a Single-Page Application&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>AWS open source news and updates #88</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 01 Nov 2021 08:43:00 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-88-25n</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-88-25n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#november-1st-2021-instalment-88"&gt;
  &lt;/a&gt;
  November 1st, 2021 - Instalment #88
&lt;/h2&gt;

&lt;p&gt;Newsletter #88.&lt;/p&gt;

&lt;p&gt;Number 88 symbolises fortune and good luck in Chinese culture (I hope that is correct, so please let me know if that is not) and I hope you will feel you are all the luckier for chancing upon this weeks selection of open source projects and posts.&lt;/p&gt;

&lt;p&gt;This week, the big news was the publishing of the Babelfish repository. Check out the launch post as well as additional content and links to this interesting open source project. We have plenty of other new open source projects such as nixtla, an open source time series forecasting library ready to roll in your AWS environment, shrimp and s3sha256sum tools that will help you work with large files over slow or unreliable connections, aws-sso-cli a project to help you configure SSO within your command line, and many more.&lt;/p&gt;

&lt;p&gt;We have community and AWS content covering OpenSearch, PyDeequ, ConsoleMe, Apache DistCp, Apache Airflow, Delta Sharing, Apache Solr, Synchro Charts, AWS SAM, Bottlerocket and more. We also have a bumper set of videos too, this weeks topics include building Open Data Lakes, contributing to Terraform, Hugging Face and how to get started with GitHub Actions.&lt;/p&gt;

&lt;p&gt;Before diving in, make sure you check out the Bug Bust article just below, and my team are hiring a couple of open source folks, so check out the job descriptions and feel free to DM me if you want a chat or to get any more details - could you be the one? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Stefan Sundin, Aaron Turner, Saul Magnusson, Sarat Vemulapalli, Robert Hafner, Tyler Lynch, Drew Mullen, Richard Boyd, Sheetal Joshi, Frank Munz, Sebastien Stormacq, Andrew Lee, Hammad Ausaf, Eric Johnson, Mahendar Gajula, Nitin Srivastava, Sean Tracey, Brian Diehr, Andrea Di Simone, Samuel Passman,  Kinnar Kumar Sen, Anjan Biswas, Ananth Raghavendra, Gary Stafford, Guilherme Sena Zuza, Suman Kumar Gangopadhyay, Sebastian Bille and Anton Rubin &lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-noticeboard"&gt;
  &lt;/a&gt;
  Community noticeboard
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Bug Bust&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As re:Invent fast approaches, it was interesting to read about the AWS BugBust re:Invent Challenge at this yearâs AWS re:Invent conference. It will be an attempt to create a new World Record for âLargest Bug Fixing Competitionâ as recognised by Guinness World Records. As part of this, AWS will be including a myriad of open source projects that developers will be able to patch and contribute to throughout the event. Bugs can range from security issues, to duplicate code, to resource leaks and more. To find out more, and how you might be able to register interest for your open source projects, read on in &lt;a href="https://aws-oss.beachgeek.co.uk/11c"&gt;Help Make BugBusting History at AWS re:Invent 2021&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jobs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A couple of openings have come up in the open source team, so if you are looking for a change, and want to work with a really awesome bunch of people, then check these out. Feel free to ping me directly if you want to discuss in more details or ask any other question about the role, the team or working at AWS in general.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principal Evangelist, Open Source, Open Source Strategy &amp;amp; Marketing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The OSS Technical Evangelist will be responsible for defining, leading and contributing to the open source and community engagement strategy for service teams across AWS. You will combine your passion and enthusiasm for cloud technology and open source with your unmatched creativity to generate grass-roots attention and support for AWS among key open source communities, industry opinion makers and technologists. You will work closely with the product marketing leadership to translate the business priorities of the service teams into solid engagements with key open source communities, foundations and open source technology partners. You will also be the voice of the community, building a feedback loop to teams across Amazon to help them understand the dynamics and needs of the open source community and build mechanisms to measure impact of our open source engagements. &lt;a href="https://aws-oss.beachgeek.co.uk/11h"&gt;Read more here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sr. Open Source Program Mgr, Open Source Strategy &amp;amp; Marketing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Open Source is seeking an experienced Program Manager to join the team. The successful candidate will be a key member of the Open Source Strategy and Marketing team, which is responsible for driving high-visibility, strategic programs that directly impact customer experience and perception. The ideal candidate will have a software development background as well as Program management experience and will own and execute complex projects and drive key operational process improvement activities. You will be comfortable in a fast-paced multi-tasked environment, with the ability to drive the programâs strategy and roadmap, collaborate with business and development teams across the company to analyse the cost/benefit of project selection, and manage all aspects of the project execution. &lt;a href="https://aws-oss.beachgeek.co.uk/11i"&gt;Read more here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-open-source-projects"&gt;
  &lt;/a&gt;
  Latest open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Babelfish&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/115"&gt;Babelfish&lt;/a&gt; last week saw the availability of the &lt;a href="https://aws-oss.beachgeek.co.uk/114"&gt;Babelfish for PostgreSQL&lt;/a&gt; open source project. As a reminder, Babelfish for PostgreSQL is an open source project available under the Apache 2.0 and PostgreSQL licenses that provide the capability for PostgreSQL to understand queries from applications written for Microsoft SQL Server. You can get started by reading my colleague Sebastian Stormacq post, &lt;a href="https://aws-oss.beachgeek.co.uk/117"&gt;Goodbye Microsoft SQL Server, Hello Babelfish&lt;/a&gt;. We also had Chandra sekhar Pathivada and Yogi Barot share this post, &lt;a href="https://aws-oss.beachgeek.co.uk/11r"&gt;Modify SSIS packages from SQL Server to Babelfish for Aurora PostgreSQL&lt;/a&gt; showing you how to modify your existing Microsoft SSIS package connection from SQL Server to Babelfish.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q_ugZ2uC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/10/14/DBBLOG-1862-image001.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q_ugZ2uC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/10/14/DBBLOG-1862-image001.png" alt="arch" width="698" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;nixtla&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/11u"&gt;nixtla&lt;/a&gt; this open source library from Nixtla looks interesting. An open source time series forecasting library. You can use the service that Nixtla provide, or use the documentation within the README to host yourself on AWS. Either way, if you are exploring your choices for a time series forecasting library, you should add this to your list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ef7ctpqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Nixtla/nixtla/main/.github/images/Architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ef7ctpqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Nixtla/nixtla/main/.github/images/Architecture.png" alt="arch" width="880" height="305"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stefan Sundin has been busy, putting together a couple of open source projects and a blog post to show you how to use them, &lt;a href="https://aws-oss.beachgeek.co.uk/11v"&gt;Introducing shrimp and s3sha256sum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;shrimp&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/11x"&gt;shrimp&lt;/a&gt; this open source tool helps you upload large files to Amazon S3 over slow connections. Shrimp is optimised for this use case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;s3sha256sum&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/11w"&gt;s3sha256sum&lt;/a&gt; this open source tool is a small program that calculates SHA256 checksums of objects stored on Amazon S3. Use it to verify the integrity of your objects. Perfect for checking those files have copied successfully (large files that you may have copied using Shrimp perhaps!)&lt;/p&gt;

&lt;p&gt;Nice work Stefan!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-sso-cli&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/11s"&gt;aws-sso-cli&lt;/a&gt; this open source, GPL 3 project from Aaron Turner is a secure replacement for using the aws configure sso wizard with a focus on security and ease of use for organisations with many AWS Accounts and/or users with many IAM Roles to assume. Detailed docs and examples, worth checking out.&lt;/p&gt;


&lt;div class="ltag_asciinema"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;aws-cdk-go-example-static-site&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/11t"&gt;aws-cdk-go-example-static-site&lt;/a&gt; if you are looking for an example of how to deploy statics sites via AWS CDK, then check out this project from Saul Magnusson. This example launches a secure static site hosted in an S3 bucket, distributed by CloudFront, protected by an ACM certificate, and with URIs automatically rewritten by a CloudFront Function&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ds-dashboard&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/11g"&gt;ds-dashboard&lt;/a&gt; Andrea Di Simone and Samuel Passman have put together this project that helps you to deploy and operate a simple data collection and distribution mechanism for your data science projects, which can be used for use cases such as generating dashboards. For a detailed walk through, check out the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/11f"&gt;Implementing a hub and spoke dashboard for multi-account data science projects&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;amazon-opensearch-service-monitor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/11o"&gt;amazon-opensearch-service-monitor&lt;/a&gt; if you are using OpenSearch, then check out this repository that contains step by step demonstration to setup monitoring Stack for Amazon OpenSearch Service domains across all specified regions. This example uses AWS CDK and Python.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vXpCXGLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/amazon-opensearch-service-monitor/blob/main/images/amazon_opensearch_service_monitor_framework.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vXpCXGLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/amazon-opensearch-service-monitor/blob/main/images/amazon_opensearch_service_monitor_framework.png%3Fraw%3Dtrue" alt="arch" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-community-blog-posts"&gt;
  &lt;/a&gt;
  AWS and Community blog posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Consoleme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the post &lt;a href="https://aws-oss.beachgeek.co.uk/11k"&gt;Achieving least-privilege at FollowAnalytics with Repokid, Aardvark and ConsoleMe&lt;/a&gt;, Guilherme Sena Zuza shares how he used a number of open source tools to help get closer to the principle of least privilege, and how he deployed these tools at FollowAnalytics. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iONGl4Iy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/0%2AQER4A3rd92n12alI" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iONGl4Iy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/0%2AQER4A3rd92n12alI" alt="arch" width="880" height="620"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A couple of OpenSearch related posts this week.&lt;/p&gt;

&lt;p&gt;First up we have Anton Rubin from Eliatra, who explains some of the core concepts of OpenSearch security in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/11n"&gt;Partner Highlight: Eliatra presents OpenSearch Security Concepts&lt;/a&gt;. The post links to other, deeper dives if you want to gain even more understanding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F61grikS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opensearch.org/assets/media/blog-images/2021-10-11-opensearch-security-concepts/auth_auth_sequence.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F61grikS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opensearch.org/assets/media/blog-images/2021-10-11-opensearch-security-concepts/auth_auth_sequence.png" alt="auth" width="880" height="788"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following that we have the post &lt;a href="https://aws-oss.beachgeek.co.uk/11q"&gt;Moving from open source Elasticsearch to OpenSearch&lt;/a&gt;, where Sarat Vemulapalli shares how an overview of how to move from open source Elasticsearch to OpenSearch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I missed this the first time around, but caught it last week. Suman Kumar Gangopadhyay provides a step by step guide to help setup a pipeline which can automate running spark jobs from an edge node to a spark cluster, in the blog post&lt;a href="https://aws-oss.beachgeek.co.uk/11l"&gt;Airflow, Spark &amp;amp; S3, stitching it all together&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache DistCp&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/11a"&gt;Copy large datasets from Google Cloud Storage to Amazon S3 using Amazon EMR&lt;/a&gt; Andrew Lee and Hammad Ausaf demonstrates how to configure an EMR cluster to use open source tools such as Apache DistCp and S3DistCP, and compares the performance of doing large file copies. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delta Sharing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Delta Sharing is a Linux Foundation open source framework that uses an open protocol to secure the real-time exchange of large datasets and enables secure data sharing across products for the first time. It was great therefore,  to read &lt;a href="https://aws-oss.beachgeek.co.uk/118"&gt;Delta Sharing on AWS&lt;/a&gt; from former colleague Frank Munz, who is now a Developer Advocate at Databricks. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KLQ_4_n5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/29/ialek_databricks_delta-sharing_f4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KLQ_4_n5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/29/ialek_databricks_delta-sharing_f4.png" alt="arch" width="880" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Solr&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apache Solr is an open source enterprise search platform built on Apache Lucene. Kinnar Kumar Sen, Anjan Biswas, and Ananth Raghavendra have collaborated on this post, &lt;a href="https://aws-oss.beachgeek.co.uk/11j"&gt;Deploying and scaling Apache Solr on Kubernetes&lt;/a&gt; that shows you how to deploy a highly available, scalable, and fault-tolerant enterprise-grade search platform with Apache Solr using Amazon Elastic Kubernetes Service (Amazon EKS). [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O_vkkFXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/10/13/anjanavb_apache-solr-kubernetes_f3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O_vkkFXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/10/13/anjanavb_apache-solr-kubernetes_f3.png" alt="arch" width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PyDeequ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PyDeequ is an open-source Python wrapper over Deequ (an open-source tool developed and used at Amazon, to help data scientists and engineers with data quality and testing capabilities from Python and PySpark). In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/11b"&gt;Accelerate large-scale data migration validation using PyDeequ&lt;/a&gt; Mahendar Gajula and Nitin Srivastava, show you how you can use this and walk through a step-by-step process to validate large datasets. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KXtUycI7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/10/04/BDB1530-image001.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KXtUycI7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/10/04/BDB1530-image001.png" alt="arch" width="788" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synchro Charts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Synchro Charts, is a new open source project that is a front-end component library that provides a collection of components to visualise time-series data for application developers with a focus on monitoring, root cause analysis, and analytics. In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/11d"&gt;Visualizing time series data with the open source Synchro Charts&lt;/a&gt; Brian Diehr walks you through some of the features which you can check out at &lt;a href="https://aws-oss.beachgeek.co.uk/11e"&gt;synchrocharts.com&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bottlerocket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/116"&gt;Amazon EKS adds native support for Bottlerocket in Managed Node Groups&lt;/a&gt; from Sheetal Joshi takes a look at how to set up an Amazon EKS cluster and launch a Bottlerocket managed node group. Bottlerocket is a Linux-based open-source operating system that is purpose-built by Amazon. It focuses on security and maintainability, and provides a reliable, consistent, and safe platform for container-based workloads. Dive deeper into what this means by checking out this post. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serverless Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Community Builder Sebastian Bille takes a look at two open source projects and how you get combine these when developing and deploying your serverless application in the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/11m"&gt;Combining Serverless Framework &amp;amp; AWS CDK&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS SAM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Eric Johnson shares with you a new capability of AWS SAM, that aims to increase infrastructure accuracy for testing with sam sync, incremental builds, and aggregated feedback for developers. AWS SAM Accelerate brings the developer to the cloud and not the cloud to the developer. In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/119"&gt;Accelerating serverless development with AWS SAM Accelerate&lt;/a&gt; he shows you how to bypass most local emulation by testing serverless applications in the cloud against production services using AWS SAM Accelerate. When I saw a demo of this, this was one of the most exciting things I have seen in a while. If you are a serverless developer, you should definitely check this out. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5lvdnkB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/10/26/main-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5lvdnkB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/10/26/main-1.png" alt="arch" width="880" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Actions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are looking to use GitHub Actions to build your open source projects and need to integrate with AWS, then the recent release of the of Github Actions OpenID Connect will be good news for you. In this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/11p"&gt;Using Github Actions OpenID Connector to push to AWS ECR without Credentials&lt;/a&gt;  Robert Hafner walks you through setting this up, using an example of using Terraform to push images to Amazon ECR. Also, check out the videos where we have Richard Boyd walking you through how you can set this up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Bottlerocket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Elastic Kubernetes Service (EKS) now adds native support for Bottlerocket in EKS managed node groups in all commercial AWS regions. Most EKS customers today deploy their applications on worker nodes backed by operating systems that are designed for a variety of use cases. AWS launched Bottlerocket, a minimal, Linux-based open source operating system that is purpose built and optimised to run containers. When combined, EKS managed node groups and Bottlerocket give customers a simple way to provision and manage compute capacity using the latest best practices for running containers in production. Bottlerocket is now included as a built-in AMI choice for managed node groups, enabling customers to provision container optimised worker nodes with a single click.&lt;/p&gt;

&lt;p&gt;EKS customers can easily migrate their applications to run on Bottlerocket based worker nodes and benefit from an improved node security posture. By moving to worker nodes that include only the minimal set of packages needed to run containers, customers benefit from a reduced attack surface, decreased node provisioning time and improved efficiency as more node resources are allocated to applications. This improves cluster utilisation and scale. Managed node groups provides notifications when newer EKS Bottlerocket AMIs are available, enabling customers to more easily update nodes to the latest versions of the software.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A couple of quick updates this week:&lt;/p&gt;

&lt;p&gt;Following the announcement of updates to the PostgreSQL database by the open source community, we have updated Amazon Aurora PostgreSQL-Compatible Edition to support PostgreSQL 13.4, 12.8, 11.13, and 10.18. These releases contain bug fixes and improvements by the PostgreSQL community. As a reminder, Amazon Aurora PostgreSQL 9.6 will reach end of life on January 31, 2022.&lt;/p&gt;

&lt;p&gt;Following that, we saw news that Amazon Aurora PostgreSQL-Compatible Edition now supports PostGIS major version 3.1. This new version of PostGIS is available on PostgreSQL versions 13.4, 12.8, 11.13, 10.18, and higher. PostGIS allows you to store, query and analyze geospatial data within a PostgreSQL database. PostGIS 3.1 significantly improves performance such as spatial joins, which now run up to [N]X faster on PostgreSQL 13. As an example, you could use a spatial join to count the number of people living in an area defined by the reception of mobile phones from radio towers. PostGIS 3.1 is the new default version on PostgreSQL 10 and higher starting with the new minor versions. However, you can still create older versions of PostGIS in your PostgreSQL database, e.g., if you require version stability.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-of-the-week"&gt;
  &lt;/a&gt;
  Video of the week
&lt;/h3&gt;

&lt;p&gt;We have a bumper selection this week, all great and well worth watching.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building Open Data Lakes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From blog posts to You Tube, there is no place where Gary Stafford will not go in order to share his knowledge and expertise on this topic. In this video (grab a cup of your favourite hot beverage) he shows you how you can build a simple open data lake on AWS using a combination of open-source software, including Debezium for change data capture (CDC), Apache Kafka, Kafka Connect, Apache Hive, Apache Spark, and Apache Hudi and Hudi's DeltaStreamer.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/E1N0RuK1PLc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terraform&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fresh from the AWS Summit in DC, we have Tyler Lynch and Drew Mullen talking about the process of contributing upstream to the AWS provider for Terraform. Dive deep on overcoming imposter syndrome, understanding the process, validating the need, working on the code, acceptance tests, and making a pull request.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GuLymRU42jQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploying to AWS with GitHub Actions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This talk from one of my colleagues Richard Boyd, will walk you through how you can use a recently announced new capabilities (new OIDC provider as well as some new AWS developed custom GitHub actions) to show you how to deploy a serverless application using AWS SAM.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NwGZWUgaaac"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hugging Face&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is Julien from HuggingFace...it was great to see former colleague in this great video showing you NLP models: from the Hugging Face hub to Amazon SageMaker... and back! &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aiJaAWFGL7k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Databricks | AWS Lakehouse Dev Day Live Workshop&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;November 16th 9:00 AM PT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Delta Lake is an open source storage layer that provides ACID transactions, scalable metadata handling, and unifies streaming and batch data processing. You can use Delta Lake on top of your existing data lake. During this workshop you will learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make your existing Amazon S3 data lakes into a lakehouse with Delta Lake.
&lt;/li&gt;
&lt;li&gt;Provide an easy-to-use platform for analysts to directly query data on your data lake using SQL Analytics&lt;/li&gt;
&lt;li&gt;Simplify and automate data pipelines for streaming and batch data to lower costs and boost productivity for your data teams&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/zs"&gt;Read more and sign up here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>Steering clear of the dependency trap</title>
      <author>Andreas SommarstrÃ¶m</author>
      <pubDate>Mon, 01 Nov 2021 07:58:28 +0000</pubDate>
      <link>https://dev.to/sumstrm/steering-clear-of-the-dependency-trap-hb</link>
      <guid>https://dev.to/sumstrm/steering-clear-of-the-dependency-trap-hb</guid>
      <description>&lt;p&gt;With the dust settling one week after the &lt;em&gt;UA-parser-js&lt;/em&gt; incident, it's the perfect opportunity to take some time and see what we can learn from it. With some small changes to how you view and work with dependencies, you can take back control - instead of letting the dependencies control and overwhelm you.&lt;/p&gt;

&lt;p&gt;The UA-parser security issue highlights &lt;em&gt;two major things&lt;/em&gt; for the npm ecosystem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The dependency tree comes with security risks.&lt;/strong&gt; Your direct dependencies might not be malicious, but your dependencies of direct dependencies may be targeted. These transitive dependencies often range in hundreds and are large weak points. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Organizations need to expand the scope of security&lt;/strong&gt; and protect more than the CI/CD. Developer environments are often more numerous and more difficult to control, making it a more probable target to be compromised by malicious packages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In these ransomware times, it's more important than ever to protect your whole organization - controlling what packages are allowed in your environments.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;The UA-parser-js incident in short&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;JavaScript library ua-parser-js sparked vigorous security activity, as the package was hijacked and three malicious versions were published to the public npm registry. Once again highlighting the need for more security focus in the JavaScript (and other) ecosystems.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The library, used to detect browser and user data, has close to 8M weekly downloads by developers around the world and is used as a dependency by 1200+ other packages in the public npm registry.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See the &lt;a href="https://github.com/advisories/GHSA-pjwm-rvh2-c87w/"&gt;security advisory&lt;/a&gt; for more details.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#dependency-tree-and-levels-of-dependencies"&gt;
  &lt;/a&gt;
  Dependency tree and levels of dependencies
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Joe, the junior developer, helps his team with application testing over the course of the weekend. His environment is clean, so he diligently installs the required dependencies for the application using &lt;code&gt;npm install&lt;/code&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;The app only has a few direct dependencies, but with all the transitive dependencies he ends up adding over 700 dependencies. Unfortunately for Joe and his company, itâs already too late as he unknowingly installed a trojan into his environmentâ¦&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Installing npm dependencies with package managers is easy&lt;/strong&gt; - and we shouldn't kid ourselves and think that everyone is knowledgeable and informed on potential issues. It's easy for things to start going wrong with the amount of dependencies and with packages allowed to execute arbitrary scripts as part of the install process.&lt;/p&gt;

&lt;p&gt;And malicious packages are a big threat for your development environment where potential user data, passwords and sensitive information is stored and therefore can be stolen by hackers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-compromised-without-even-knowing-it"&gt;
  &lt;/a&gt;
  Getting compromised without even knowing it
&lt;/h3&gt;

&lt;p&gt;Let's use the &lt;strong&gt;ua-parser-js&lt;/strong&gt; attack as an example. During the incident any user installing a package with a dependency resolution like &lt;code&gt;ua-parser-js: ^0.7.xx&lt;/code&gt; would have gotten a malicious version (0.7.29). The dependency resolution tells us to fetch the latest 0.7 patch version - unless remediated by factors like locked dependency versions. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So who was affected?&lt;/strong&gt; Projects depending directly on &lt;code&gt;ua-parser-js&lt;/code&gt; were obviously at risk. But in the typical case the compromised dependency was added as a transitive dependency (dependency of a dependency).&lt;br&gt;
Leading to users working with popular libraries and frameworks like &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;angular&lt;/code&gt; reporting inclusion of the compromised library.&lt;/p&gt;

&lt;p&gt;With transitive dependencies, the number of packages your projects depend on increases dramatically. To the point where it quickly becomes impossible to fully grasp what and how many dependencies your team uses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Example of dependency tree with ua-parser-js included as a transitive dependency. &lt;/span&gt;
&lt;span class="c"&gt;# 'npm ls' is used to identify the path for a specific dependency&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;ls &lt;/span&gt;ua-parser-js
    yourproject@1.0.0
      react@15.7.0
       âââ¬ fbjs@0.8.18
         âââ ua-parser-js@0.7.30

&lt;span class="c"&gt;# Excerpt from fbjs@0.8.18 where ua-parser-js is included as a dependency&lt;/span&gt;
    &lt;span class="s2"&gt;"dependencies"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        ...
        &lt;span class="s2"&gt;"ua-parser-js"&lt;/span&gt;: &lt;span class="s2"&gt;"^0.7.18"&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;,

&lt;span class="c"&gt;# ua-parser-js: ^0.7.18 would resolve to the latest 0.7.x version. Installing a compromised version with malware during the time of the incident.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the aftermath after ua-parser-js the biggest issue wasn't figuring out if your applications used ua-parser, instead it was trying to figure out if you were exposed - in any environment, in any way, across hundreds of developers. A task a lot of companies worked vigorously with, as they lacked proper control over packages that enter their environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-avoid-the-trap-control-instead-of-being-controlled"&gt;
  &lt;/a&gt;
  How to avoid the trap? Control instead of being controlled
&lt;/h2&gt;

&lt;p&gt;Avoiding similar issues in the future should be a priority - and any investment into proper protection would save time and money in the long run.&lt;/p&gt;

&lt;p&gt;So, the million dollar question - &lt;strong&gt;How do we avoid this in the future?&lt;/strong&gt;&lt;br&gt;
We can mitigate most of the issues by inserting control over dependencies and the patch management process.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoid unintended dependency version changes&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use a single source of truth for dependencies&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#locking-dependency-versions"&gt;
  &lt;/a&gt;
  Locking dependency versions
&lt;/h3&gt;

&lt;p&gt;You might be thinking, discussions about using lock-files again? Shouldn't everyone be aware of and use them by now? And I agree, everyone should use them - but they are not. &lt;/p&gt;

&lt;p&gt;Dependency versions should be updated with intention and not as a side effect. Having consecutive &lt;code&gt;npm install&lt;/code&gt; yield slightly different and non-deterministic results is not desired in neither CI/CD nor dev environments.&lt;/p&gt;

&lt;p&gt;Organizations should put in place a process that updates, commits and reviews project lock-files and makes sure every subsequent installation (and user) uses the files.&lt;/p&gt;

&lt;p&gt;Using dependency ranges, instead of pinning exact dependency versions, grants flexibility for the ecosystem - but comes with inherent security risks. Using lock-files (&lt;code&gt;package-lock&lt;/code&gt; &amp;amp; &lt;code&gt;yarn.lock&lt;/code&gt;) together with &lt;code&gt;npm ci&lt;/code&gt; for complete and deterministic installations introduces the &lt;strong&gt;necessary friction&lt;/strong&gt; that make updating dependency versions a controlled process. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#single-source-the-dependency-firewall"&gt;
  &lt;/a&gt;
  Single source - The dependency firewall
&lt;/h3&gt;

&lt;p&gt;Depending directly on public registries and countless GitHub repositories, instead of using a single package source, quickly makes control over the flow of dependencies an impossible task.&lt;/p&gt;

&lt;p&gt;With multiple different sources, how are you going to make sure dependencies comply with your business policies, that they are safe and contain approved licenses? &lt;/p&gt;

&lt;p&gt;The solution: a single hub like &lt;a href="https://bytesafe.dev"&gt;Bytesafe&lt;/a&gt; to enforce rules and monitor the flow of dependencies - for every developer, tester and build system.&lt;/p&gt;

&lt;p&gt;To make sure everyone is using the same registry source and the intended versions, projects should include a &lt;code&gt;.npmrc&lt;/code&gt; config file and &lt;code&gt;package-lock.json&lt;/code&gt; or &lt;code&gt;yarn.lock&lt;/code&gt; files that define what registry to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Example .npmrc config setting the default registry to be used by npm clients
registry=https://workspace.bytesafe.dev/r/example-registry/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Keep unwanted dependencies out of your organization. Setup a firewall for your dependencies with &lt;a href="https://bytesafe.dev"&gt;Bytesafe&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>security</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why I Switched To PNPM?</title>
      <author>Harsh Rastogi</author>
      <pubDate>Mon, 01 Nov 2021 07:40:00 +0000</pubDate>
      <link>https://dev.to/theharshrastogi/why-i-switched-to-pnpm-j84</link>
      <guid>https://dev.to/theharshrastogi/why-i-switched-to-pnpm-j84</guid>
      <description>&lt;p&gt;Package Manager For Node JS&lt;/p&gt;

&lt;p&gt;It is system for that automate the process of adding/upgrading/removing and managing dependencies for a Node JS project&lt;/p&gt;

&lt;p&gt;There are many package managers for Node JS&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NPM (Node Package Manager)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most popular package manager for Javascript and also default package manager for Node JS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yarn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was released by Facebook Inc. in 2016. It was create to overcome problems and performance that were in NPM at that time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PNPM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is alternative package manager for Node Js for replacement of NPM, but faster and efficient.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-is-better-than-yarn-and-npm"&gt;
  &lt;/a&gt;
  Why is better than Yarn and NPM?
&lt;/h2&gt;

&lt;p&gt;Imagine you install a package, Let call it Package_X. Imagine &lt;strong&gt;&lt;a href="https://lodash.com/"&gt;Lodash&lt;/a&gt;&lt;/strong&gt; is one of dependency of Package_X. Now you install diffrent package call it Package_Y which also has &lt;strong&gt;&lt;a href="https://lodash.com/"&gt;Lodash&lt;/a&gt;&lt;/strong&gt; as it dependency. Thus in a single project there two copies of Lodash.&lt;/p&gt;

&lt;p&gt;If there are 100 packages using Lodash, you are going to have 100 copies Lodash&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;PNPM allows yoo to save tons of space&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is faster than both npm and yarn. Because Yarn copies files from cache wheareas pnpm links files into global score.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-pnpm-works"&gt;
  &lt;/a&gt;
  How PNPM works?
&lt;/h2&gt;

&lt;p&gt;Note that PNPM doesn't flatten the dependency tree&lt;/p&gt;

&lt;p&gt;Look how earlier &lt;code&gt;node_modules&lt;/code&gt; tree looked like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules/
|  Package_X/
|  | &amp;gt; node_modules/
|  |   | &amp;gt; Package_Z/
|  |       | index.js
|  |       | package.json
|  |   index.js
|  |   package.json
|
|  Package_Y/
|  | &amp;gt; node_modules/
|  |   | &amp;gt; Package_Z/
|  |       | index.js
|  |       | package.json
|  |   index.js
|  |   package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#this-way-to-managing-has-some-issuse"&gt;
  &lt;/a&gt;
  This way to managing has some issuse
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Deeply nested dependency tree, causing long directory names in system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Packages are copied and pasted several times when they are required in different dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But now after update in NPM &lt;a class="mentioned-user" href="https://dev.to/version"&gt;@version&lt;/a&gt;
 3, they added flattening so structure look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules/
|  Package_X/
|  |   index.js
|  |   package.json
|
|  Package_Y/
|  |   index.js
|  |   package.json
|
|  Package_Z/
|  |   index.js
|  |   package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;But pnpm follow diffrent apporch rather than flattening tree it keeps it same&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;/node_modules&lt;/code&gt; folder created by pnpm, each package has it's own dependency but dependency tree is never deep as in earlier version of npm. It keeps all dependencies flat with use of &lt;a href="https://en.wikipedia.org/wiki/Symbolic_link#:~:text=In%20computing%2C%20a%20symbolic%20link,and%20that%20affects%20pathname%20resolution."&gt;Symbolic Links&lt;/a&gt; or &lt;a href="https://www.computerhope.com/jargon/j/junction.htm#:~:text=A%20junction%2C%20also%20called%20an,to%20the%20Windows%20command%20line"&gt;Junction&lt;/a&gt; (in windows)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules/
|  Package_X/
|  | &amp;gt; node_modules/
|  |   | &amp;gt; Package_Z/ -&amp;gt; ../../../Package_Z/1.0.0
|  |   index.js
|  |   package.json
|
|  Package_Y/
|  | &amp;gt; node_modules/
|  |   | &amp;gt; Package_Z/ -&amp;gt; ../../../Package_Z/1.0.0
|  |       | index.js
|  |       | package.json
|  |   index.js
|  |   package.json
|
|  Package_Z/
|  |   index.js
|  |   package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Open terminal&lt;/li&gt;
&lt;li&gt;Execute following command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; pnpm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  npx pnpm add &lt;span class="nt"&gt;-g&lt;/span&gt; pnpm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#small-project-using-pnpm"&gt;
  &lt;/a&gt;
  Small Project Using pnpm
&lt;/h2&gt;

&lt;p&gt;We are going to build Restfull API that get name of two person and calculate the love percentage between them&lt;/p&gt;

&lt;p&gt;Exexute below commands&lt;/p&gt;

&lt;p&gt;Create a directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nb"&gt;mkdir &lt;/span&gt;love-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initialise it as pnpm project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  pnpm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to use Express for it.&lt;br&gt;
Note pnpm commands is quite similiar to both npm and yarn. We are going to replace &lt;code&gt;npm install [PACKAGE_NAME]&lt;/code&gt; with &lt;code&gt;pnpm add [PACKAGE_NAME]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So adding following packages to your projects&lt;/p&gt;

&lt;p&gt;Execute below commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  pnpm add express cors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  pnpm add &lt;span class="nt"&gt;-D&lt;/span&gt; @types/express @types/cors nodemon typescript concurrently
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add these below script to &lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tsc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node dist/index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"concurrently &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;tsc -w&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;nodemon dist/index.js&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to discuss only about the PNPM side of things only&lt;br&gt;
have look of source code &lt;a href="https://github.com/theharshrastogi/love-calculator-api"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dont Forget To Follow Me&lt;/strong&gt; -&amp;gt; &lt;a href="https://github.com/theharshrastogi"&gt;Harsh Rastogi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now to build convert typescript code into javascript&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;npm&lt;/strong&gt; we do &lt;code&gt;npm run build&lt;/code&gt; but in &lt;strong&gt;pnpm&lt;/strong&gt; we have to execute&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  pnpm build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and to start dev server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  pnpm dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and to start server in production mode&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  pnpm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#benchmarks"&gt;
  &lt;/a&gt;
  Benchmarks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x46X1_tV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4ngf5x7mqznpvx12i1g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x46X1_tV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4ngf5x7mqznpvx12i1g.png" alt="Benchmark compares the performance of NPM, Yarn, PNPM" width="524" height="424"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OJEv9xc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/le5xkicvlvxmx6racea3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OJEv9xc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/le5xkicvlvxmx6racea3.jpg" alt="Image description" width="880" height="936"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you are searching that gives you better speed and performance then pnpm is better, I personally suggest you to use pnpm instead of npm and Yarn. If you are not using it then you a chance to try it.&lt;/p&gt;

&lt;p&gt;Yarn sends date to Facebook, which don't make yarn suitable in some scenarios. NPM has also security issue that's why there is Yarn now.&lt;/p&gt;

&lt;p&gt;In above benchmarks we can see PNPM is better in all aspects.&lt;/p&gt;

&lt;p&gt;Happy Coding :)&lt;/p&gt;

</description>
      <category>pnpm</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Effective Ways To Make Your Essay Attractive</title>
      <author>Do Assignment Help</author>
      <pubDate>Mon, 01 Nov 2021 07:38:33 +0000</pubDate>
      <link>https://dev.to/davidway195/effective-ways-to-make-your-essay-attractive-2c6f</link>
      <guid>https://dev.to/davidway195/effective-ways-to-make-your-essay-attractive-2c6f</guid>
      <description>&lt;p&gt;Writing is not always fun. Yes, itâs true. Because interest varies from person to person, what interests you may not interest others, and vice-versa. Despite the fact, if you are a student or a full-time writer, you are required to craft an article. Here, with our &lt;b&gt;&lt;a href="https://www.doassignmenthelp.com/"&gt;Assignment help&lt;/a&gt;&lt;/b&gt; experts, learn how you can do this. &lt;/p&gt;

&lt;h2&gt;7 Ways To Make Your Essay Interesting&lt;/h2&gt; 

&lt;p&gt;You are determined to write on a topic of your interest. Thatâs great because, in this guide, we will discuss 7 ways that will help you make a boring, dull essay interesting and attractive. &lt;br&gt;
&lt;b&gt;Letâs dive into it.&lt;/b&gt;&lt;/p&gt;

&lt;h3&gt;1. Develop A Mindset&lt;/h3&gt; 

&lt;p&gt;To do anything, a mindset is a crucial factor. Similarly, you can write an essay irrespective of its subject and topic, if you have an optimistic mindset. You have to take interest in what you are writing.&lt;br&gt;
To develop such an attitude and mindset:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;b&gt;Convince yourself&lt;/b&gt; that there is no subject as boring. &lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Think of the readers:&lt;/b&gt; Write for those who like to read these topics.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Read forums, watch videos, or Google other blogs&lt;/b&gt; or articles on the same subject. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;2. Add Fascinating Details:&lt;/h3&gt;

&lt;p&gt;Read, research, and recompose by adding fascinating details in your way. Do all-around research and see what you can have that interests the reader. &lt;/p&gt;

&lt;p&gt;New and fascinating details are a source of curiosity. Not only it makes it attractive but leaves a good impression on readers. &lt;/p&gt;

&lt;h3&gt;3. Use Active Voice:&lt;/h3&gt;

&lt;p&gt;Active voice directly indulges the readers. It is easy to understand and generates a flow in reading. In passive voice, the sentences may get complex and boring. &lt;/p&gt;

&lt;p&gt;Another benefit of writing in an active voice is that it sounds clearer. In the wish of sounding intellectual, students use passive voice at an extreme level that ruins the readability. &lt;/p&gt;

&lt;h3&gt;4. Tell A Story&lt;/h3&gt; 

&lt;p&gt;Even an essay is also a story that readers read, hear and share with others. It all happens when they can relate and find it interesting.&lt;br&gt;
Use a constructive tone in &lt;a href="https://www.doassignmenthelp.com/essay-help"&gt;essay writing&lt;/a&gt;. Instill emotions and you will see how attractive it becomes. &lt;/p&gt;

&lt;h3&gt;5. Avoid Complication and Vagueness&lt;/h3&gt;

&lt;p&gt;Many students use a thesaurus and write synonyms to impress professors with vocabulary. Thatâs not correct. Each essay topic has its own vocabulary and learning that is important. &lt;br&gt;
Here are a few points you can focus on to avoid Complication and Vagueness:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Do not use complicated or unnecessary words.&lt;/li&gt;
&lt;li&gt;Know the content of an essay and use words accordingly.&lt;/li&gt;
&lt;li&gt;Ensure the words portrait your message as you want.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;6. Read And Edit&lt;/h3&gt; 

&lt;p&gt;You can write the most attractive essay your professor would have ever read if you do not undermine proofreading.&lt;br&gt;&lt;br&gt;
Even reading in a hush manner will not fructify. Always read the write-up peacefully after taking some break. While reading the essay multiple times, you will identify which parts need editing. Give more focus on grammar, spellings, Sentence making and length, and Connectivity in all paragraphs.&lt;/p&gt;

&lt;h3&gt;7. Wrapping Up&lt;/h3&gt;

&lt;p&gt;Writing an impressive and attractive essay not only brings you good grades but a repo among other students. You can use the following steps to write an attractive essay and if stuck do not hesitate to take assignment help. We have a pool of writing experts serving all over the world. &lt;br&gt;
&lt;b&gt;Source URL:&lt;/b&gt;&lt;br&gt;
&lt;a href="https://businessnewsday.com/assignment-help/"&gt;https://businessnewsday.com/assignment-help/&lt;/a&gt;&lt;br&gt;
Thank You&lt;/p&gt;

</description>
      <category>writing</category>
    </item>
    <item>
      <title>code every day with me</title>
      <author>duccanhole</author>
      <pubDate>Mon, 01 Nov 2021 07:37:28 +0000</pubDate>
      <link>https://dev.to/coderduck/code-every-day-with-me-55k1</link>
      <guid>https://dev.to/coderduck/code-every-day-with-me-55k1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#day-13"&gt;
  &lt;/a&gt;
  --DAY 13--
&lt;/h2&gt;

&lt;p&gt;Hi, I am going to make #100DaysOfCode Challenge. Everyday I will try solve 1 problem from leetcode or hackerrank. Hope you can go with me until end.&lt;br&gt;
&lt;strong&gt;Now let's solve problem today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Problem: Sales by Match&lt;/li&gt;
&lt;li&gt;Detail: &lt;a href="https://www.hackerrank.com/challenges/sock-merchant/problem"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Idea: sort then check each pair in array.&lt;/li&gt;
&lt;li&gt;My solution (javascript):
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sockMerchant(n, ar) {
    let count=0,i=0;
    ar.sort((a,b)=&amp;gt;a-b);
    while(ar.length&amp;gt;=2){
        if(ar[0]==ar[1]){
            count++;
            ar.splice(0,2);
        }
        else{
            ar.shift();
        }
    }
    return count;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;--&amp;gt;&lt;em&gt;If you have better solution or any question, please comment below. I will appreciate.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>100daysofcode</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Building the Poll App From Django Tutorial With FastAPI And React</title>
      <author>jbrocher</author>
      <pubDate>Mon, 01 Nov 2021 07:36:19 +0000</pubDate>
      <link>https://dev.to/jbrocher/building-the-poll-app-from-django-tutorial-with-fastapi-and-react-4m3h</link>
      <guid>https://dev.to/jbrocher/building-the-poll-app-from-django-tutorial-with-fastapi-and-react-4m3h</guid>
      <description>&lt;p&gt;FastAPI is an awesome modern Python framework designed to enable developers to quickly build robust and performant APIs. &lt;br&gt;
Once you start getting the hang of it, you can become super efficient in building new endpoints and implementing &lt;br&gt;
complex business logic. However,  it might be destabilizing at first when coming from more opiniated Framework like &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; that &lt;br&gt;
offers more functionnalities out of the box.&lt;/p&gt;

&lt;p&gt;Thus, I thought it could be interesting (and fun !) to re-recreate the well known polls app from the Django tutorial, but this time using FastAPI&lt;br&gt;
and React ! In this multi part series I'll try to follow the same path as the original as much as possible, although I'll probably split&lt;br&gt;
some parts in two to avoid an overload of information. &lt;/p&gt;

&lt;p&gt;Today is part 1 : Setting up the project, creating the polls app and making your first &lt;del&gt;django view&lt;/del&gt; &lt;strong&gt;path operation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The code for this part is available &lt;a href="https://github.com/jbrocher/fastapi-poll-1"&gt;here&lt;/a&gt; but I encourage you to code along instead ! &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  ð§ Setting up the project
&lt;/h2&gt;

&lt;p&gt;FastAPI is quite easy to setup, in fact all you need to run a FastAPI app is a singe file instantiating&lt;br&gt;
the main app and an &lt;a href="https://asgi.readthedocs.io/en/latest/"&gt;ASGI&lt;/a&gt; worker to run it. Of course we'll go a bit further. We'll run &lt;br&gt;
the app in a Docker container so you'll need to have it installed on your machine&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-docker-image"&gt;
  &lt;/a&gt;
  The docker image
&lt;/h3&gt;

&lt;p&gt;First create a &lt;code&gt;Dockerfile&lt;/code&gt; at the root of your working directory, and write the following instructions in it :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;3.9&lt;/span&gt;

&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="c1"&gt;# Install Poetry
&lt;/span&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sSL&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;githubusercontent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;poetry&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;poetry&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;poetry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;POETRY_HOME&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;poetry&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    &lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;poetry&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;poetry&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    &lt;span class="n"&gt;poetry&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;virtualenvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;


&lt;span class="c1"&gt;# Copy using poetry.lock* in case it doesn't exist yet
&lt;/span&gt;&lt;span class="n"&gt;COPY&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pyproject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toml&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;poetry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;

&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;poetry&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;

&lt;span class="n"&gt;COPY&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;


&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"uvicorn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"app.main:app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"--reload"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"--host"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"0.0.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"--port"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"80"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This needs a bit of commenting. &lt;/p&gt;

&lt;p&gt;The way dependencies are installed might seems a bit strange. Here we use &lt;code&gt;poetry&lt;/code&gt; as a package manager, so we need to install it first and&lt;br&gt;
then run &lt;code&gt;install&lt;/code&gt; without creating a virtual env (that &lt;code&gt;--no-root&lt;/code&gt; bit). What's great about this approach is that you can use&lt;br&gt;
the same &lt;code&gt;pyproject.toml&lt;/code&gt; in your developement environment so things like static analysis tools uses the same dependencies. In a production &lt;br&gt;
settings we would probably creat a multi-stage build and discard &lt;code&gt;poetry&lt;/code&gt; to have a slimer image. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;app&lt;/code&gt; folder will be created in the next section that's where our code will live. &lt;/p&gt;

&lt;p&gt;Finally, notice the &lt;code&gt;--reload&lt;/code&gt; option we pass to uvicorn which will allows us to work without having to restart the worker everytime we make&lt;br&gt;
a change. &lt;/p&gt;

&lt;p&gt;We'll launch the container a bit later, first we need to initialize the app ! &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-fastapi-app"&gt;
  &lt;/a&gt;
  The fastapi app
&lt;/h3&gt;

&lt;p&gt;First things first, let's create the folder where our code will live: &lt;code&gt;mkidr app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now as I said we'd only need to create a main.py file if we wanted to. But to stay true to the theme of this serie, I'd like &lt;br&gt;
  to create a directory structure similar to django apps. That's why we'll create a second &lt;code&gt;app&lt;/code&gt; directory that will be our "main" &lt;br&gt;
  app. Later we'll also create a &lt;code&gt;polls&lt;/code&gt; directory. &lt;/p&gt;

&lt;p&gt;For now simply run &lt;code&gt;mkdir app/app&lt;/code&gt; to create the folder, and create a &lt;code&gt;main.py&lt;/code&gt; file inside of it. Your directory strucutre should now &lt;br&gt;
  look like this : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jgz7IQcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635364028526/bjhcE5_tz.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jgz7IQcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635364028526/bjhcE5_tz.png%3Fauto%3Dcompress" alt="directory structure" width="257" height="188"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect ! And now buckle up as the obligatory &lt;code&gt;hello world !&lt;/code&gt; is approaching. Inside &lt;code&gt;main.py&lt;/code&gt; write the following lines :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;root&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will initialize the app and create our first &lt;a href="https://fastapi.tiangolo.com/tutorial/first-steps/"&gt;path operation&lt;/a&gt;. This one &lt;br&gt;
is straight from the docs ! But you can't see the message yet as we still need to launch the container. We're almost there, &lt;br&gt;
head over to the next section ! &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#launching-the-app"&gt;
  &lt;/a&gt;
  Launching the app
&lt;/h3&gt;

&lt;p&gt;Before launching the app we need to build the image first. From the root of your project run &lt;code&gt;docker build -t poll-app .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we can launch the container: &lt;code&gt;docker run -it -p 80:80 -v "$(pwd)"/app:/app poll-app&lt;/code&gt;. This will also mount&lt;br&gt;
our app directory so we don't have to recreate it each time we edit the files. &lt;/p&gt;

&lt;p&gt;We're now ready to test our endpoint. In your browser navigate to &lt;code&gt;localhost&lt;/code&gt; and behold ! &lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_sK56etu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635274086447/WFE1yO918.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_sK56etu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635274086447/WFE1yO918.png%3Fauto%3Dcompress" alt="the endpoint" width="258" height="117"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/lIzAEoZEn571u/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/lIzAEoZEn571u/giphy.gif" alt="Hello world" width="480" height="204"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;... general kenobi&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Now that's already good, but what is &lt;em&gt;great&lt;/em&gt; is that FastAPI comes with a built in and Swagger for which the open api configuration &lt;br&gt;
is autogeneated. That means that if you go to &lt;code&gt;localhost/docs&lt;/code&gt; you'll see the following : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TNMWvOrx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635274196047/B9w6r4ub3.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TNMWvOrx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635274196047/B9w6r4ub3.png%3Fauto%3Dcompress" alt="docs" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FastAPI automatically generate your endpoint documentation ! Pretty neat feature for an API to have if you ask me. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#creating-a-poll-app"&gt;
  &lt;/a&gt;
  ð Creating a poll app
&lt;/h2&gt;

&lt;p&gt;Now that &lt;code&gt;Hello world !&lt;/code&gt; is out of the way (I recommend adding it to your personnal collection), let's get to the actual polls app. As&lt;br&gt;
 I mentionned earlier we'll create a &lt;code&gt;polls&lt;/code&gt; directory along side the main app. Once that's done add a file called &lt;code&gt;endpoints.py&lt;/code&gt; to &lt;br&gt;
 this new folder, your project' structure should look like that : &lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FBw4hQZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635368833896/fu9-1nq1Y.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FBw4hQZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635368833896/fu9-1nq1Y.png%3Fauto%3Dcompress" alt="Directory Structure" width="277" height="243"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Don't forget to create the relevant &lt;code&gt;__init__.py&lt;/code&gt; file so the folder are recognized as Python modules&lt;/p&gt;

&lt;p&gt;Now let's create an index for our polls app. This index will later be responsible for listing the available polls in our database but for now it will return a simple message. Add the following code to the &lt;code&gt;polls/endpoints.py&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;APIRouter&lt;/span&gt;

  &lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;APIRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


  &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"polls index"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use &lt;a href="https://fastapi.tiangolo.com/tutorial/bigger-applications/#apirouter"&gt;APIrouter&lt;/a&gt; to declare our path operations. It works exatcly the same as &lt;br&gt;
the &lt;code&gt;FastaAPI()&lt;/code&gt;. Now all we need to do to make our endpoint available, is to declare it in &lt;code&gt;main.py&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;include_router&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/polls"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The prefix indidates that all the routes coming from the polls endpoints start with polls. Your polls index should now be available both&lt;br&gt;
 at &lt;code&gt;localhost/polls&lt;/code&gt; and in the Swagger documentation ! Let's take a look ! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mutgWsG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635363516528/OAkgF4bj5.gif%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mutgWsG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635363516528/OAkgF4bj5.gif%3Fauto%3Dcompress" alt="swagger polls" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great ! Our polls index works, although it doesn't return anything yet, we'll chnage that in part 2!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's is for part 1, let me know if you found it useful ! In part 2, we'll see how to set up an actual database to store our polls !&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>tutorial</category>
      <category>fastapi</category>
    </item>
    <item>
      <title>Python Program To Find If A word/number is a palindrome or not.</title>
      <author>Vaarun Sinha</author>
      <pubDate>Mon, 01 Nov 2021 07:34:09 +0000</pubDate>
      <link>https://dev.to/vaarun_sinha/python-program-to-find-if-a-wordnumber-is-a-palindrome-or-not-3j2o</link>
      <guid>https://dev.to/vaarun_sinha/python-program-to-find-if-a-wordnumber-is-a-palindrome-or-not-3j2o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-palindrome"&gt;
  &lt;/a&gt;
  What Is A Palindrome?
&lt;/h2&gt;

&lt;p&gt;Like Every Programmer does, let's google it! ð &lt;br&gt;
&lt;strong&gt;&lt;em&gt;googles&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
A word, phrase, or sequence that reads the same backwards as forwards, e.g madam or nurses run.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;To Find If A word/number is a palindrome or not.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#sub-problems"&gt;
  &lt;/a&gt;
  Sub Problems
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get User Input.&lt;/li&gt;
&lt;li&gt;Check If The Input is an integer or string.&lt;/li&gt;
&lt;li&gt;Reverse The Input.&lt;/li&gt;
&lt;li&gt;Check If The Initial Input is same as the reversed one.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#pseudo-code"&gt;
  &lt;/a&gt;
  Pseudo Code
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input = GetUserInput()
reversed_input = reverse(input)

if Input is equal to reversed_input:
print("It Is A Palindrome Number")
else:
print("it is not a palindrome number")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#lets-finally-code-it"&gt;
  &lt;/a&gt;
  Let's Finally Code It!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get User Input
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;userInputw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter The Value:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#w for with whitespace
&lt;/span&gt;&lt;span class="n"&gt;userInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userInputw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#removing whitespace so we can test for phrases like nurses run.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Reverse The Input
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;reversedInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Check If The Initial Input is same as the reversed one.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;reversedInput&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;userInput&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is equal to it's reverse &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;reversedInput&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; therefore it is a palindrome number."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;userInput&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is not equal to it's reverse &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;reversedInput&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; therefore it is not a palindrome number."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#making-the-code-reusable"&gt;
  &lt;/a&gt;
  Making the Code Reusable
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;To make the code reusable let's put the logic in a function.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;reversedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reversedValue&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;reversedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;reversedValue&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#full-code"&gt;
  &lt;/a&gt;
  Full Code
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;reversedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reversedValue&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;reversedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;reversedValue&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;userInputw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter The Value:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;userInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userInputw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;isPalindrome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;isPalindrome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;userInputw&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is equal to it's reverse &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;userInputw&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; therefore it is a palindrome."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;userInput&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is not equal to it's reverse &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;reverse_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; therefore it is not a palindrome."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key Takeaways:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[::-1] Reverses A string.&lt;/li&gt;
&lt;li&gt;string.replace(" ", "") replaces all whitespaces with no whitespaces.&lt;/li&gt;
&lt;li&gt;Before jumping right into code, break the problem Into sub problems then do some pseudo code, then write the code. After That You can optimise it.&lt;/li&gt;
&lt;li&gt;Implement this if the problem is hard or you cannot exactly think what to code. or else it is a time waster for easy problems.&lt;/li&gt;
&lt;li&gt;Make The Code Reusable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#run-it-on-repl"&gt;
  &lt;/a&gt;
  Run it on repl
&lt;/h2&gt;


&lt;div class="ltag__replit"&gt;
  &lt;iframe height="550px" src="https://repl.it/@MRINDIA1/Palindrome?lite=true"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;HAPPY CODING!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>6502- Lab4(Option 1): Adding Calculator</title>
      <author>Qiwen Yu</author>
      <pubDate>Mon, 01 Nov 2021 07:28:56 +0000</pubDate>
      <link>https://dev.to/qiwenyu/6502-lab4option-1-adding-calculator-9l3</link>
      <guid>https://dev.to/qiwenyu/6502-lab4option-1-adding-calculator-9l3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;In this blog, I'm going to create a calculator using 6502 assembly language. I will create a subroutine which enables the user to enter two numbers of up to two digits and provide appropriate user prompts and feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-calculator-requirements"&gt;
  &lt;/a&gt;
  Add Calculator Requirements
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create a subroutine which enables the user to enter two numbers of up to two digits. Indicate where the cursor is, and allow the user to use the digit keys (0-9), backspace, and enter keys. Return the user's input value in the accumulator (A) register.&lt;/li&gt;
&lt;li&gt;Using this subroutine, write a program which add the two numbers (each of which is in the range 0-99) and print the result.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#thoughts-and-steps"&gt;
  &lt;/a&gt;
  Thoughts and Steps
&lt;/h3&gt;

&lt;p&gt;-&amp;gt; The first number, the second number and the result can be stored and to be displayed on the screen.&lt;br&gt;
-&amp;gt; Prompt the appropriate sentence for user. &lt;br&gt;
"Please enter the first number: "&lt;br&gt;
-&amp;gt; Take the user input for the first number.&lt;br&gt;
-&amp;gt; User can use "ENTER" to store the number, use backspace to delete.&lt;br&gt;
-&amp;gt; Prompt the appropriate sentence for user.&lt;br&gt;
"Please enter the second number: "&lt;br&gt;
-&amp;gt; Take the user input for the second number.&lt;br&gt;
-&amp;gt; User can use "ENTER" to store the number, use backspace to delete.&lt;br&gt;
-&amp;gt; Prompt the result for user and display it on the screen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-variables"&gt;
  &lt;/a&gt;
  Define Variables
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;define NUM1   $15;   for the first number of user's input 
define NUM2   $16;   for the second number of user's input

define ENTER  $0d;   for the ENTER key
define BACKSPACE $08; for the BACKSPACE key
define RIGHT  $81;   for the RIGHT Key
define LEFT  $83;    for the LEFT key

define  SCREEN  $ffed; for getting the screen size
define  PLOT    $fff0; for getting or setting the cursor coordinates
define  SCINIT  $ff81; for initializing or clearing the screen
define  CHRIN  $ffcf; for taking the input character from keyboard
define  CHROUT  $ffd2; for displaying the output character to screen

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution-to-this-lab"&gt;
  &lt;/a&gt;
  Solution to this Lab
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;define NUM1   $15;   for the first number of user's input 
define NUM2   $16;   for the second number of user's input

define ENTER  $0d;   for the ENTER key
define BACKSPACE $08; for the BACKSPACE key
define RIGHT  $81;   for the RIGHT Key
define LEFT  $83;    for the LEFT key

define  SCREEN  $ffed; for getting the screen size
define  PLOT    $fff0; for getting or setting the cursor coordinates
define  SCINIT  $ff81; for initializing or clearing the screen
define  CHRIN  $ffcf; for taking the input character from keyboard
define  CHROUT  $ffd2; for displaying the output character to screen

jsr SCINIT

mainLoop:
     ldy #$00
     jsr firstNumInput ; first number input question
     jsr getNum; receive the first number
     jsr firstNumStore  ; store the input number

     ldy #$00
     jsr secondNumInput  ; second number input question
     jsr getNum; receive the second number
     jsr secondNumStore  ; store the input number

     ldy #$00
     jsr resultStr  ; for displaying the result string
     jsr result ; for displaying the calculation result
     jmp mainLoop  ; go back to the first step


getNum:
     sec
     jsr PLOT
     ldx #$15
     clc
     jsr PLOT

getNumLoop:
     sec
     jsr PLOT
     jsr CHRIN

keyboardCheck: 
     cmp #BACKSPACE ; after using BACKSPACE, one digit will be deleted
     beq delete

     cmp #RIGHT ; using RIGHT arrow key, the program goes to the first digit
     beq moveR

     cmp #LEFT ; using LEFT arrow key, the program goes to the second digit
     beq moveL

     cmp #ENTER ; after pressing ENTER, the program goes to the next process
     beq move

drawNum:
     cmp #$30
     bcc getNumLoop

     clc
     cmp #$3a
     bcs getNumLoop

     jsr CHROUT

     sec
     jsr PLOT
     cpx #$17
     bne getNumLoop
     dex
     clc
     jsr PLOT
     jmp getNumLoop

moveL: 
 cpx #$15 ; first digit
     beq getNumLoop
     jsr CHROUT
     jmp getNumLoop

moveR: 
 cpx #$16 ; second digit
     beq getNumLoop
     jsr CHROUT
     jmp getNumLoop

delete:
 cpx #$15
     beq getNumLoop
     jsr CHROUT
     jmp getNumLoop


move:
     sec
     jsr PLOT
     ldx #$15 ; first digit
     clc
     jsr PLOT
     sec
     jsr PLOT

     clc
     sbc #$2F

     asl
     asl
     asl
     asl

     pha

     ldx #$16
     clc
     jsr PLOT
     sec
     jsr PLOT

     clc
     sbc #$2F
     pha

     ldx #$00
     iny
     clc
     jsr PLOT
     sec
     jsr PLOT

     pla
     tax
     pla

     rts

firstNumStore:
     sta NUM1
     txa
     eor NUM1
     sta NUM1
     rts


secondNumStore:
     sta NUM2
     txa
     eor NUM2
     sta NUM2
     rts


calculateAdd:
     lsr
     lsr
     lsr
     lsr
     clc
     adc #$30;
     jsr CHROUT

     pla
     and #$0F
     clc
     adc #$30;
     jsr CHROUT

     sec
     jsr PLOT
     ldx #$00
     iny
     clc
     jsr PLOT

     rts

result:
     sec
     jsr PLOT
     ldx #$15
     clc
     jsr PLOT
     sec
     jsr PLOT

     sed
     lda NUM1
     adc NUM2
     cld
     pha

     bcc calculateAdd
     ldx #$14
     clc
     jsr PLOT
     sec
     jsr PLOT
     lda #$31
     jsr CHROUT

firstNum:
dcb "E","N","T","E","R",32,"F","I","R","S","T",32,"N","U","M","B","E","R",":",32,32,"0","0"
dcb 00


secondNum:
dcb "E","N","T","E","R",32,"S","E","C","O","N","D",32,"N","U","M","B","E","R",":",32,"0","0"
dcb 00

results:
dcb "R","E","S","U","L","T",":"
dcb 00


firstNumInput:
 lda firstNum,y
        beq goback_main
        jsr CHROUT
        iny
        bne firstNumInput

secondNumInput:
 lda secondNum,y
        beq goback_main
        jsr CHROUT
        iny
        bne secondNumInput

resultStr:
 lda results,y
        beq goback_main
        jsr CHROUT
        iny
        bne resultStr

goback_main:
     rts


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5yynlvgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acjziw9j5nwvavagy5sf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5yynlvgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acjziw9j5nwvavagy5sf.png" alt="Image description" width="434" height="194"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thoughts"&gt;
  &lt;/a&gt;
  Thoughts
&lt;/h3&gt;

&lt;p&gt;6502 is getting harder and harder for me to understand now. I have met a lot of difficulties during this lab. It is important to write the pseudo code first and then follow the pseudo code to write the actual code. The point of doing this is to help myself have a clearer view of this task. To retrieve the value of user's input, to store the value, and to display the results are three big tasks for me during this lab. I am still not so familiar with using the language properly right now. I have to look up the cheatsheet again and again. But this process did help me to understand more on how the register works, how the 6502 assembly language works.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>6502</category>
    </item>
    <item>
      <title>Hacktoberfest: Flytesnacks Project "update tuple output examples"</title>
      <author>Qiwen Yu</author>
      <pubDate>Mon, 01 Nov 2021 07:25:13 +0000</pubDate>
      <link>https://dev.to/qiwenyu/hacktoberfest-flytesnacks-project-update-tuple-output-examples-2k4n</link>
      <guid>https://dev.to/qiwenyu/hacktoberfest-flytesnacks-project-update-tuple-output-examples-2k4n</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;This is my second contribution to the &lt;strong&gt;&lt;a href="https://github.com/flyteorg/flyte"&gt;flyte&lt;/a&gt;&lt;/strong&gt; source project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project"&gt;
  &lt;/a&gt;
  Project
&lt;/h3&gt;

&lt;p&gt;I chose the &lt;a href="https://github.com/quelea-projection/Quelea"&gt;flytekit&lt;/a&gt; project, which is one of the component repos of &lt;a href="https://github.com/flyteorg/flyte"&gt;flyte&lt;/a&gt; and is the &lt;code&gt;python SDK and tools&lt;/code&gt; of the &lt;strong&gt;Flyte project&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/quelea-projection/Quelea/issues/393"&gt;issue&lt;/a&gt; was raised here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenge"&gt;
  &lt;/a&gt;
  Challenge
&lt;/h2&gt;

&lt;p&gt;The most challenge part of this issue was&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-and-pull-request"&gt;
  &lt;/a&gt;
  Solution and Pull Request
&lt;/h2&gt;

&lt;p&gt;To target the locations of problem precised and efficiently, several search methods were used. &lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>flytesnacks</category>
      <category>documentation</category>
    </item>
    <item>
      <title>Different Ways of Binding Razor Dropdownlist in ASP.NET MVC 5</title>
      <author>Tarun Gurang</author>
      <pubDate>Mon, 01 Nov 2021 07:21:27 +0000</pubDate>
      <link>https://dev.to/tarungurang/different-ways-of-binding-razor-dropdownlist-in-aspnet-mvc-5-1914</link>
      <guid>https://dev.to/tarungurang/different-ways-of-binding-razor-dropdownlist-in-aspnet-mvc-5-1914</guid>
      <description>&lt;h2&gt;
  &lt;a href="#dropdownlist"&gt;
  &lt;/a&gt;
  DropDownList
&lt;/h2&gt;

&lt;p&gt;A dropdown menu is a method to show a huge list of options since only one choice is displayed initially until someone activates the dropdown box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JSt9MVHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83froilqbcz54reqopgh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JSt9MVHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83froilqbcz54reqopgh.jpg" alt="Dropdownlist" width="281" height="180"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-razor-view-in-mvc"&gt;
  &lt;/a&gt;
  What is Razor View in MVC?
&lt;/h3&gt;

&lt;p&gt;Razor View is a markup syntax that lets us embed server-based code into web apps using C#. It is not a programming language, just a server-side markup language.&lt;/p&gt;

&lt;p&gt;Razor has no specific relations to ASP.NET MVC because it is a general-purpose template engine. We can use it anywhere for HTML like output generation. It is just used in MVC to produce an HTML-like view from web apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--anpVwGha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7esqj49nk88fqgdpr4o5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--anpVwGha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7esqj49nk88fqgdpr4o5.jpg" alt="razor" width="600" height="107"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can have a template file that is a mixture of some literal text with some code snippets. We combine that template with some data or specific model where the data is meant to appear and then we execute the template to generate our output.&lt;/p&gt;

&lt;p&gt;It is similar to ASPX files. ASPX files otherwise called templates have literal text with a bit of C# code and these together help to display specific frame or content to the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;
&amp;lt;% foreach=""&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;
         &amp;lt;%: html.actionlink=""&amp;gt; |
         &amp;lt;%: html.actionlink=""&amp;gt;|
         &amp;lt;%: html.actionlink=""&amp;gt;
      &amp;lt;/%:&amp;gt;&amp;lt;/%:&amp;gt;&amp;lt;/%:&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;
         &amp;lt;%: item.name=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;
      &amp;lt;/%:&amp;gt;&amp;lt;/%:&amp;gt;&amp;lt;/%:&amp;gt;&amp;lt;/%:&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;
         &amp;lt;%: string.format=""&amp;gt;&amp;lt;%: item.name=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;
      &amp;lt;/%:&amp;gt;&amp;lt;/%:&amp;gt;&amp;lt;/%:&amp;gt;&amp;lt;/%:&amp;gt;&amp;lt;/%:&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;%: string.format=""&amp;gt;&amp;lt;%: item.name=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;
&amp;lt;%}%&amp;gt;
@foreach (var item in Model) {&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;
         @Html.ActionLink(&amp;amp;quot;Edit&amp;amp;quot;, &amp;amp;quot;Edit&amp;amp;quot;, new { id = item.ID }) |
         @Html.ActionLink(&amp;amp;quot;Details&amp;amp;quot;, &amp;amp;quot;Details&amp;amp;quot;, new { id = item.ID }) |
         @Html.ActionLink(&amp;amp;quot;Delete&amp;amp;quot;, &amp;amp;quot;Delete&amp;amp;quot;, new { id = item.ID })&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;
         @item.Name&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;
         @String.Format(&amp;amp;quot;{0,g}&amp;amp;quot;, item.JoiningDate)&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
} 
&amp;lt;/%}%&amp;gt;&amp;lt;/%:&amp;gt;&amp;lt;/%:&amp;gt;&amp;lt;/%:&amp;gt;&amp;lt;/%:&amp;gt;&amp;lt;/%:&amp;gt;&amp;lt;/%&amp;gt;&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.ifourtechnolab.com/blog/razor-pages-vs-mvc-in-asp-net"&gt;Razor Pages Vs Mvc In Asp.net&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-do-i-bind-a-dropdownlist-in-mvc-razor"&gt;
  &lt;/a&gt;
  How do I bind a DropDownList in MVC Razor?
&lt;/h4&gt;

&lt;p&gt;To populate the DropDownList in MVC using Razor, we can use multiple ways like ViewBag, ViewData, Tempdata, jQuery, Model, Database, AJAX, and Hardcoding in View.&lt;/p&gt;

&lt;p&gt;DropdownList using Hardcoded data in view&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Populating With Hardcoded Data
@Html.DropDownList("MySkills", new List&amp;lt;selectlistitem&amp;gt;&amp;lt;% foreach=""&amp;gt;&amp;lt;%: string.format=""&amp;gt;&amp;lt;%: item.name=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%}%&amp;gt;
{
   new SelectListItem{ Text="ASP.NET MVC", Value = "1" },
   new SelectListItem{ Text="ASP.NET WEB API", Value = "2" },
   new SelectListItem{ Text="ENTITY FRAMEWORK", Value = "3" },
   new SelectListItem{ Text="DOCUSIGN", Value = "4" },
   new SelectListItem{ Text="ORCHARD CMS", Value = "5" },
   new SelectListItem{ Text="JQUERY", Value = "6" },
   new SelectListItem{ Text="ZENDESK", Value = "7" },
   new SelectListItem{ Text="LINQ", Value = "8" },
   new SelectListItem{ Text="C#", Value = "9" },
   new SelectListItem{ Text="GOOGLE ANALYTICS", Value = "10" },
})
&amp;lt;!--%}%--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%--&amp;gt;&amp;lt;/selectlistitem&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DropdownList using Viewbag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public ActionResult Index() {
    #region ViewBag
    List &amp;lt; SelectListItem &amp;gt; mySkills = new List &amp;lt; SelectListItem &amp;gt; () {
        new SelectListItem {
            Text = "ASP.NET MVC", Value = "1"
        },
        new SelectListItem {
            Text = "ASP.NET WEB API", Value = "2"
        },
        new SelectListItem {
            Text = "ENTITY FRAMEWORK", Value = "3"
        },
        new SelectListItem {
            Text = "DOCUSIGN", Value = "4"
        },
        new SelectListItem {
            Text = "ORCHARD CMS", Value = "5"
        },
        new SelectListItem {
            Text = "JQUERY", Value = "6"
        },
        new SelectListItem {
            Text = "ZENDESK", Value = "7"
        },
        new SelectListItem {
            Text = "LINQ", Value = "8"
        },
        new SelectListItem {
            Text = "C#", Value = "9"
        },
        new SelectListItem {
            Text = "GOOGLE ANALYTICS", Value = "10"
        },
    };
    ViewBag.MySkills = mySkills;
    #endregion
    return View();
}
     Populating With ViewBag Data 
     @Html.DropDownList("MySkills", (IEnumerable
        &amp;lt;selectlistitem&amp;gt;&amp;lt;% foreach=""&amp;gt;&amp;lt;%: string.format=""&amp;gt;&amp;lt;%: item.name=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%}%&amp;gt;)ViewBag.MySkills) 
&amp;lt;!--%}%--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%--&amp;gt;&amp;lt;/selectlistitem&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DropdownListusing ViewData&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public ActionResult Index() {
    #region ViewData
    List &amp;lt; SelectListItem &amp;gt; mySkills = new List &amp;lt; SelectListItem &amp;gt; () {
        new SelectListItem {
            Text = "ASP.NET MVC", Value = "1"
        },
        new SelectListItem {
            Text = "ASP.NET WEB API", Value = "2"
        },
        new SelectListItem {
            Text = "ENTITY FRAMEWORK", Value = "3"
        },
        new SelectListItem {
            Text = "DOCUSIGN", Value = "4"
        },
        new SelectListItem {
            Text = "ORCHARD CMS", Value = "5"
        },
        new SelectListItem {
            Text = "JQUERY", Value = "6"
        },
        new SelectListItem {
            Text = "ZENDESK", Value = "7"
        },
        new SelectListItem {
            Text = "LINQ", Value = "8"
        },
        new SelectListItem {
            Text = "C#", Value = "9"
        },
        new SelectListItem {
            Text = "GOOGLE ANALYTICS", Value = "10"
        },
    };
    ViewData["MySkills"] = mySkills;
    #endregion
}
     Populating With ViewData Data 
     @Html.DropDownList("MySkills", (IEnumerable
        &amp;lt;selectlistitem&amp;gt;&amp;lt;% foreach=""&amp;gt;&amp;lt;%: string.format=""&amp;gt;&amp;lt;%: item.name=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%}%&amp;gt;)ViewData["MySkills"]) 
&amp;lt;!--%}%--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%--&amp;gt;&amp;lt;/selectlistitem&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DropdownList using TempData&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#region TempData
List &amp;lt; SelectListItem &amp;gt; mySkills = new List &amp;lt; SelectListItem &amp;gt; () {
    new SelectListItem {
        Text = "ASP.NET MVC", Value = "1"
    },
    new SelectListItem {
        Text = "ASP.NET WEB API", Value = "2"
    },
    new SelectListItem {
        Text = "ENTITY FRAMEWORK", Value = "3"
    },
    new SelectListItem {
        Text = "DOCUSIGN", Value = "4"
    },
    new SelectListItem {
        Text = "ORCHARD CMS", Value = "5"
    },
    new SelectListItem {
        Text = "JQUERY", Value = "6"
    },
    new SelectListItem {
        Text = "ZENDESK", Value = "7"
    },
    new SelectListItem {
        Text = "LINQ", Value = "8"
    },
    new SelectListItem {
        Text = "C#", Value = "9"
    },
    new SelectListItem {
        Text = "GOOGLE ANALYTICS", Value = "10"
    },
};
TempData["MySkills"] = mySkills;
#endregion
     Populating With TempData Data 
     @Html.DropDownList("MySkills", (IEnumerable
        &amp;lt;selectlistitem&amp;gt;&amp;lt;% foreach=""&amp;gt;&amp;lt;%: string.format=""&amp;gt;&amp;lt;%: item.name=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%}%&amp;gt;)TempData["MySkills"]) 
&amp;lt;!--%}%--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%--&amp;gt;&amp;lt;/selectlistitem&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Searching for Reliable &lt;a href="https://www.ifourtechnolab.com/dot-net-development-company"&gt;.Net Development Company&lt;/a&gt;? Your Search ends here.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DropdownList using Enum&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public enum MySkills {
    ASPNETMVC,
    ASPNETWEPAPI,
    CSHARP,
    DOCUSIGN,
    JQUERY
}
public struct ConvertEnum {
    public int Value {
        get;
        set;
    }
    public String Text {
        get;
        set;
    }
}
var myskill = new List &amp;lt; ConvertEnum &amp;gt; ();
foreach(MySkills lang in Enum.GetValues(typeof(MySkills)))
myskill.Add(new ConvertEnum {
    Value = (int) lang, Text = lang.ToString()
});
ViewBag.MySkillEnum = myskill;
     Populating From Enum 
     @Html.DropDownList("MySkills", new SelectList(ViewBag.MySkillEnum, "Value", "Text"))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DropdownList using Database with Entity Framework&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using(CSharpCornerEntities cshparpEntity = new CSharpCornerEntities()) {
    var fromDatabaseEF = new SelectList(cshparpEntity.MySkills.ToList(), "ID", "Name");
    ViewData["DBMySkills"] = fromDatabaseEF;
}
     Populating With Database and EF 
     @Html.DropDownList("MySkills", (IEnumerable
        &amp;lt;selectlistitem&amp;gt;&amp;lt;% foreach=""&amp;gt;&amp;lt;%: string.format=""&amp;gt;&amp;lt;%: item.name=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%}%&amp;gt;)ViewData["DBMySkills"]) 
&amp;lt;!--%}%--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%--&amp;gt;&amp;lt;/selectlistitem&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DropdownList using Jquery Ajax with JSON Data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public JsonResult ReturnJSONDataToAJax() //It will be fired from Jquery ajax call
{
    CSharpCornerEntities cshparpEntity = new CSharpCornerEntities();
    var jsonData = cshparpEntity.MySkills.ToList();
    return Json(jsonData, JsonRequestBehavior.AllowGet);
}
&amp;lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type="text/javascript"&amp;gt;
    $(document).ready(function() {
        $.ajax({
            url: "ReturnJSONDataToAJax",
            type: "GET",
            contentType: "application/json; charset=utf-8",
            datatype: JSON,
            success: function(result) {
                $(result).each(function() {
                    $("#FromJson").append($("&amp;lt;option&amp;gt;&amp;lt;/option&amp;gt;").val(this.ID).html(this.Name));
                });
            },
            error: function(data) {}
        });
    });
&amp;lt;/script&amp;gt;
     Populating With Json Data 
     @Html.DropDownList("FromJson", new SelectList(Enumerable.Empty
        &amp;lt;selectlistitem&amp;gt;&amp;lt;% foreach=""&amp;gt;&amp;lt;%: string.format=""&amp;gt;&amp;lt;%: item.name=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%: html.actionlink=""&amp;gt;&amp;lt;%}%&amp;gt;())) 
&amp;lt;!--%}%--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%:--&amp;gt;&amp;lt;!--%--&amp;gt;&amp;lt;/selectlistitem&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DropdownList using Model&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
namespace VariousWayBindingDropDownListInMVC5.Models {
    public class MySkills {
        public int ID {
            get;
            set;
        }
        public string Name {
            get;
            set;
        }
        public IEnumerable &amp;lt; SelectListItem &amp;gt; Skills {
            get;
            set;
        }
    }
}
var model = new VariousWayBindingDropDownListInMVC5.Models.MySkills();
using(CSharpCornerEntities cshparpEntity = new CSharpCornerEntities()) {
    var dbData = cshparpEntity.MySkills.ToList();
    model.Skills = GetSelectListItems(dbData);
}
private IEnumerable &amp;lt; SelectListItem &amp;gt; GetSelectListItems(IEnumerable &amp;lt; MySkill &amp;gt; elements) {
    var selectList = new List &amp;lt; SelectListItem &amp;gt; ();
    foreach(var element in elements) {
        selectList.Add(new SelectListItem {
            Value = element.ID.ToString(),
                Text = element.Name
        });
    }
    return selectList;
}
@model VariousWayBindingDropDownListInMVC5.Models.MySkills
     Populating With Model Data 
     @Html.DropDownList("FromModel", Model.Skills) 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DropdownList using Global Static Data in View&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@ {
    List &amp;lt; SelectListItem &amp;gt; listItems = new List &amp;lt; SelectListItem &amp;gt; ();
    listItems.Add(new SelectListItem {
        Text = "ASP.NET MVC",
            Value = "1"
    });
    listItems.Add(new SelectListItem {
        Text = "ASP.NET WEB API",
            Value = "2",
            Selected = true
    });
    listItems.Add(new SelectListItem {
        Text = "DOCUSIGN",
            Value = "3"
    });
    listItems.Add(new SelectListItem {
        Text = "C#",
            Value = "4"
    });
} &amp;lt; tr &amp;gt; &amp;lt; td &amp;gt; Populating With Global static Data &amp;lt; /td&amp;gt; &amp;lt; td &amp;gt; @Html.DropDownList("StaticData", listItems) &amp;lt; /td&amp;gt; &amp;lt; /tr&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XkTMq3EO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlc96qjwwh4p1h72sg96.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkTMq3EO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlc96qjwwh4p1h72sg96.jpg" alt="Dropdownlist output" width="469" height="623"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h5&gt;

&lt;p&gt;In this article, we discussed DropDownList and Razor View basics. We also discussed different ways to implement the DropDownList using Razor. Many of them get stuck with binding dropdown elements using MVC. As it is an important concept, this blog will help them resolve their concerns of dropdown list binding.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>webdev</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>Create a Mobile Game in Just 8 Steps</title>
      <author>Capermint</author>
      <pubDate>Mon, 01 Nov 2021 07:06:03 +0000</pubDate>
      <link>https://dev.to/caperminttech/create-a-mobile-game-in-just-8-steps-2n8i</link>
      <guid>https://dev.to/caperminttech/create-a-mobile-game-in-just-8-steps-2n8i</guid>
      <description>&lt;p&gt;For developing mobile games, step by step game development process needs to be followed.&lt;/p&gt;

&lt;p&gt;The below 8 steps would help to create a mobile game successfully.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build Up a Story&lt;/li&gt;
&lt;li&gt;Choose &lt;a href="https://www.capermint.com/blog/top-20-mobile-game-engines/"&gt;mobile game engine&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Design Game Structure &amp;amp; Wireframe&lt;/li&gt;
&lt;li&gt;Develop a game&lt;/li&gt;
&lt;li&gt;Mobile Game Testing&lt;/li&gt;
&lt;li&gt;Choose Monetization Strategy&lt;/li&gt;
&lt;li&gt;Launch a mobile game&lt;/li&gt;
&lt;li&gt;Post-Support&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.capermint.com/mobile-game-development/"&gt;Developing a mobile game&lt;/a&gt; is not as simple at all as it seems, and you will have to face various deviations and problems throughout the process. You will have to put many effort, and you have to work hard if you wish to develop the perfect game.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
