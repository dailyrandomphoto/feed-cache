<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What did you teach this week?</title>
      <author>Aatmaj</author>
      <pubDate>Sat, 24 Jul 2021 12:04:50 +0000</pubDate>
      <link>https://dev.to/aatmaj/what-did-you-teach-this-week-1g7h</link>
      <guid>https://dev.to/aatmaj/what-did-you-teach-this-week-1g7h</guid>
      <description>&lt;p&gt;Today is a very Auspicious day. Here in India, today is celebrated as the day of &lt;em&gt;Guru Purnima&lt;/em&gt;. On this day we all express gratitude towards our teachers. Teachers may not necessarily mean professors. Our boss, colleague, or even our juniors. Everyone teaches us in some way or the other.😇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iGtysxPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2whihea0a6spwrejtbdf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iGtysxPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2whihea0a6spwrejtbdf.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
So why don't we too contribute towards teaching? Let us all celebrate this honor of teaching others.😃 Inspired by the &lt;a href="https://dev.to/devteam/what-was-your-win-this-week-4ojf"&gt;Win of the week &lt;/a&gt; and the &lt;a href="https://dev.to/nickytonline/july-22nd-2021-what-did-you-learn-this-week-3ck"&gt;What did you learnt this week&lt;/a&gt; discussion blogs, I have decided to start this 'What did you teach this week?' blog from today's occasion! 😊&lt;/p&gt;

&lt;p&gt;Teaching others may not necessarily mean giving a lecture to an audience or starting a YouTube teaching channel. We are constantly teaching others, and simultaneously learning from others. &lt;br&gt;
Basically when you explain ideas to others, it counts as teaching. 😊&lt;br&gt;
So if you have helped your fellow student learn a new concept, or taught your junior effective debugging, you have done the noble task of teaching.😄 Even posting answers on stack exchange is a way of teaching. Writing blogs is a way of teaching too. Are you not sharing your knowledge with others!😀&lt;/p&gt;

&lt;p&gt;So if you too have taught anyone, anything this week, however trivial please post in the comments below. 👇&lt;/p&gt;

&lt;p&gt;Encourage and inspire others to take on this sacred task of teaching. 🤘Let us all come together on this day of &lt;em&gt;Guru Purnima&lt;/em&gt; and create a wave of positivity!✌️&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p8qtJ3d0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/meex73hend1ncesb8p8z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p8qtJ3d0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/meex73hend1ncesb8p8z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>teachingthisweek</category>
      <category>teaching</category>
    </item>
    <item>
      <title>Learning Python-Basic course: Day 21,Summary of the week and dictionary exercises.</title>
      <author>Aatmaj</author>
      <pubDate>Sat, 24 Jul 2021 12:04:07 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-21-summary-of-the-week-and-dictionary-exercises-391e</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-21-summary-of-the-week-and-dictionary-exercises-391e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-do-more-questions-related-to-dictionaries-for-a-thorough-revision-in-the-process-we-also-will-learn-a-few-methods-related-to-dictionaries"&gt;
  &lt;/a&gt;
  Today we will do more questions related to dictionaries for a thorough revision. In the process, we also will learn a few methods related to dictionaries.
&lt;/h2&gt;




&lt;p&gt;Summary of the week-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-18-dictionaries-in-python-30af"&gt;Day 18&lt;/a&gt; We learnt about dictionaries. We checked out one example which covered many inbuilt functions related to dictionaries.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-19-practicing-dictionary-exercises-1723"&gt;Day 19&lt;/a&gt; We practiced a few questions on dictionaries and had quite a thorough practice of dictionaries in Python. We did programs to fuse two separate lists to a single dictionary, paired out even numbers and made fancy dictionaries using for loops.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-20-hashtables-via-dictionaries-3nf1"&gt;Day 20&lt;/a&gt; We learnt about hashtables and how to create them using dictionaries. We tried out simple and chained hashtables and worked out information retrieval using them.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#sample-questionconcatenate-two-dictionaries"&gt;
  &lt;/a&gt;
  Sample question-Concatenate two dictionaries.
&lt;/h2&gt;

&lt;p&gt;We will now fuse two dictionaries to create a new one using the &lt;code&gt;update()&lt;/code&gt; method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="c1"&gt;#for every element in dictionary a AND dictionary b,
&lt;/span&gt;    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#update the dictionary to include these values.
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{1: 10, 2: 20, 3: 30, 4: 40}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Conflict resolution&lt;/strong&gt;- In case both the dictionaries have a same key, in that case the last value is held true by the &lt;code&gt;update()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{1: 10, 2: 60, 3: 30, 4: 40}
{1: 10, 2: 20, 3: 30, 4: 40}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#editing-keys"&gt;
  &lt;/a&gt;
  Editing keys.
&lt;/h2&gt;

&lt;p&gt;I know what you all must be thinking. Keys are non-mutable right?&lt;br&gt;
Yes. they are. but here is a cleaver trick&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# Replace 'e' by 'd'
&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{'b': 2, 'a': 1, 'c': 3, 'd': 4}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Today there are no exercises from my side..😃...But wait!😒 I am providing a reference link for taking on a dictionary quiz to clear all your concepts!😋&lt;br&gt;
&lt;a href="https://pynative.com/python-dictionary-quiz/"&gt;Dictionary quiz by PYnative&lt;/a&gt;&lt;br&gt;
The quiz contains 14 Questions. 14/14  is the target&lt;/p&gt;

&lt;p&gt;Comment your progress below by pasting screenshot of your scores!🤠&lt;/p&gt;




&lt;p&gt;✌️So friends that's all for now. 😊 Hope you all are having fun.😎 Please let me know in the comment section below 👇. And don't forget to like the post if you did. 😍 I am open to any suggestions or doubts. 🤠 Just post in the comments below or gmail me. 😉&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#please-do-follow-me-on-github-and-star-the-learning-python-repository-which-contains-all-the-material-for-this-course"&gt;
  &lt;/a&gt;
  Please do follow me on &lt;a href="https://github.com/Aatmaj-Zephyr"&gt;Github&lt;/a&gt; and Star the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning Python Repository&lt;/a&gt; which contains all the material for this course😁
&lt;/h4&gt;

&lt;p&gt;Thank you all👍&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For those who have not yet made account in Dev.to, you can have a free easy sign-up using your mail or GitHub accounts. I would suggest the budding developers to create your GitHub free account right away. You would require to register sooner or later anyways&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥&lt;br&gt;
Next day will begin from Tuesday📅, Monday is reserved for.... &lt;a href="https://dev.to/aatmaj/launching-matlab-mondays-a-crash-course-nb1"&gt;MATLAB MONDAYS💥&lt;/a&gt; Follow me for updates...&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to write unit tests in JavaScript with Jest</title>
      <author>Domagoj Štrekelj</author>
      <pubDate>Sat, 24 Jul 2021 11:39:48 +0000</pubDate>
      <link>https://dev.to/dstrekelj/how-to-write-unit-tests-in-javascript-with-jest-2e83</link>
      <guid>https://dev.to/dstrekelj/how-to-write-unit-tests-in-javascript-with-jest-2e83</guid>
      <description>&lt;p&gt;Unit testing is an important and often overlooked part of the development process. It is considered boring by many, and being traditionally difficult to properly set up earned it a poor reputation early on. The benefits of shipping quality code certainly outweigh any negatives, but how does one find the time and muster the effort to start writing unit tests?&lt;/p&gt;

&lt;p&gt;Lucky for us, writing unit tests in JavaScript has never been faster, easier, and arguably more fun thanks to Jest.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; is a feature-rich JavaScript testing framework that aims to bring testing to the masses. It's near-zero configuration approach makes it simple to set up, and a familiar API makes writing tests fairly straightforward.&lt;/p&gt;

&lt;p&gt;This article will provide a brief introduction into Jest and the concepts behind unit testing. We will learn how to install Jest, write test suites with test cases and fixtures, and run tests both with and without coverage reports. &lt;/p&gt;

&lt;p&gt;We will assume that we're testing a module containing a simple function behaving as a validation rule. The rule checks whether the validated value is an integer number. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// isInteger.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This implementation is naive and faulty on purpose. We want to see what our tests will teach us about the flaws in our code by passing and failing test cases. Fixing the implementation is not covered by this post, but feel free to play with it as we move through the article.&lt;/p&gt;

&lt;p&gt;Read on to find out more!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-a-unit-test"&gt;
  &lt;/a&gt;
  What is a unit test?
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;unit test&lt;/strong&gt; is an automated test of a unit of source code. A unit test asserts if the unit's behaviour matches expectations.&lt;/p&gt;

&lt;p&gt;A unit is usually a line of code, function, or class. There is no strict definition of what makes up a unit, but it's common to start with whatever seems "smallest".&lt;/p&gt;

&lt;p&gt;Units that have no dependencies are called &lt;strong&gt;isolated (solitary) units&lt;/strong&gt;. Units that have dependencies are called &lt;strong&gt;sociable units&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Solitary units are easy to test, but sociable units are more difficult. The output of a sociable unit depends on other units of code - if other units fail, the tested unit fails as well. This created two unit test styles: sociable unit tests and solitary unit tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sociable unit tests&lt;/strong&gt; fail if the dependencies of a sociable unit are also failing. The tested unit is not supposed to work if it's dependencies don't work, so a failing test in this case is a good sign.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solitary unit tests&lt;/strong&gt; isolate sociable units by creating &lt;strong&gt;mock implementations&lt;/strong&gt; of their dependencies. Mocks control how dependencies behave during tests, making sociable units predictable to test.&lt;/p&gt;

&lt;p&gt;No matter the unit test style, the goal of unit testing remains the same - to &lt;strong&gt;ensure that individual parts of the program are working correctly as expected&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-jest"&gt;
  &lt;/a&gt;
  What is Jest?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;&lt;/strong&gt; is a JavaScript testing framework designed to make testing as easy as possible. It provides all the essential tools for running tests, making assertions, mocking implementations, and more in a single package.&lt;/p&gt;

&lt;p&gt;Before Jest, the JavaScript ecosystem relied on several different tools and frameworks to give developers a way to write and run tests. Configuring these tools was rarely simple and easy. Jest aims to fix that by using sensible default configurations that work "out of the box", with little to no additional configuration required in most cases.&lt;/p&gt;

&lt;p&gt;Jest is currently one of the most popular testing technology choices, consistently earning high satisfaction marks in the &lt;a href="https://2020.stateofjs.com/en-US/technologies/testing/"&gt;State of JS developer survey since 2017&lt;/a&gt;. It's the reliable choice for testing JavaScript projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
Jest also &lt;a href="https://jestjs.io/docs/getting-started#using-typescript"&gt;supports&lt;/a&gt; TypeScript via Babel.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#how-to-install-jest"&gt;
  &lt;/a&gt;
  How to install Jest?
&lt;/h2&gt;

&lt;p&gt;Install the &lt;code&gt;jest&lt;/code&gt; &lt;a href="https://jestjs.io/docs/getting-started"&gt;package&lt;/a&gt; (and optional typings) to a new or existing project's &lt;code&gt;package.json&lt;/code&gt; file using your package manager of choice:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# For NPM users&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; jest @types/jest

&lt;span class="c"&gt;# Yarn users&lt;/span&gt;
yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; jest @types/jest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! We're now ready to run tests with Jest.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
It's good practice to install Jest and any other testing tools as development dependencies. This speeds up installation in environments where only dependencies required for the project to build and run are installed.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#how-to-run-tests-with-jest"&gt;
  &lt;/a&gt;
  How to run tests with Jest?
&lt;/h2&gt;

&lt;p&gt;To run tests with Jest call the &lt;code&gt;jest&lt;/code&gt; &lt;a href="https://jestjs.io/docs/getting-started"&gt;command&lt;/a&gt; inside the root of the project folder.&lt;/p&gt;

&lt;p&gt;We will update the project's &lt;code&gt;package.json&lt;/code&gt; with a test script that calls the &lt;code&gt;jest&lt;/code&gt; command for us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ... package.json contents&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ... existing scripts&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now run the newly created &lt;code&gt;test&lt;/code&gt; script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# NPM users&lt;/span&gt;
npm run &lt;span class="nb"&gt;test&lt;/span&gt;

&lt;span class="c"&gt;# Yarn users&lt;/span&gt;
yarn run &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything is set up correctly Jest will give us the results of any tests it found and ran.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
Jest exits with status code 1 when a test case fails. Seeing &lt;code&gt;npm ERR!&lt;/code&gt; errors in the console is expected in this case.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#how-to-create-a-test-with-jest"&gt;
  &lt;/a&gt;
  How to create a test with Jest?
&lt;/h2&gt;

&lt;p&gt;To create a test for use with Jest we create a &lt;code&gt;*.spec.js&lt;/code&gt; or &lt;code&gt;*.test.js&lt;/code&gt; file that will contain our test cases.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
Jest is &lt;a href="https://jestjs.io/docs/configuration#testmatch-arraystring"&gt;configured by default&lt;/a&gt; to look for &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.jsx&lt;/code&gt;, &lt;code&gt;.ts&lt;/code&gt; and &lt;code&gt;.tsx&lt;/code&gt; files inside of &lt;code&gt;__tests__&lt;/code&gt; folders, as well as any files with a suffix of &lt;code&gt;.test&lt;/code&gt; or &lt;code&gt;.spec&lt;/code&gt; (this includes files called &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;spec&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since &lt;code&gt;isInteger.js&lt;/code&gt; is the name of the module we're testing, we will write our tests in an &lt;code&gt;isInteger.spec.js&lt;/code&gt; file created in the same folder as the module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// isInteger.spec.js&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sanity check&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
Whether you choose to write tests inside a dedicated folder or right next to your modules, there is no right or wrong way to structure tests inside a project. Jest is flexible enough to work with most project architectures without configuration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The test's description is "Sanity check". &lt;strong&gt;Sanity checks&lt;/strong&gt; are basic tests to ensure the system behaves rationally. The test will assert that we expect the value &lt;code&gt;true&lt;/code&gt; to be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Run the test and if it passes everything is set up correctly.&lt;/p&gt;

&lt;p&gt;Congratulations! We just wrote our first test!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-write-a-test-case-in-jest"&gt;
  &lt;/a&gt;
  How to write a test case in Jest?
&lt;/h2&gt;

&lt;p&gt;To write a test case we first define the outcomes that we must validate to ensure that the system is working correctly.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;isInteger.js&lt;/code&gt; module is a function that takes one parameter and returns &lt;code&gt;true&lt;/code&gt; if the parameter is an integer value or &lt;code&gt;false&lt;/code&gt; if it isn't. We can create two test cases from that definition:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;isInteger()&lt;/code&gt; passes for integer value;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;isInteger()&lt;/code&gt; fails for non-integer value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To create a test case in Jest we use the &lt;code&gt;test()&lt;/code&gt; &lt;a href="https://jestjs.io/docs/api#testname-fn-timeout"&gt;function&lt;/a&gt;. It takes a test name string and handler function as the first two arguments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
The &lt;code&gt;test()&lt;/code&gt; function can also be called under the alias - &lt;code&gt;it()&lt;/code&gt;. Choose one over the other depending on readability or personal preference.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tests are based on assertions. &lt;strong&gt;Assertions&lt;/strong&gt; are made up of &lt;a href="https://jestjs.io/docs/expect"&gt;expectations&lt;/a&gt; and &lt;a href="https://jestjs.io/docs/expect#tobevalue"&gt;matchers&lt;/a&gt;. The simplest and most common assertion expects the tested value to match a specific value. &lt;/p&gt;

&lt;p&gt;An expectation is created with the &lt;code&gt;expect()&lt;/code&gt; &lt;a href="https://jestjs.io/docs/expect#expectvalue"&gt;function&lt;/a&gt;. It returns an object of matcher methods with which we assert something expected about the tested value. The matcher &lt;a href="https://jestjs.io/docs/expect#tobevalue"&gt;method&lt;/a&gt; &lt;code&gt;toBe()&lt;/code&gt; checks if the expectation matches a given value.&lt;/p&gt;

&lt;p&gt;In our tests, we can expect &lt;code&gt;isInteger()&lt;/code&gt; to be &lt;code&gt;true&lt;/code&gt; for the integer value 1, and &lt;code&gt;false&lt;/code&gt; for the non-integer value 1.23.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// isInteger.spec.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isInteger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./isInteger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isInteger passes for integer value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isInteger fails for non-integer value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.23&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running Jest should now give us a report on which tests pass, and which tests fail.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-use-fixtures-in-jest"&gt;
  &lt;/a&gt;
  How to use fixtures in Jest?
&lt;/h2&gt;

&lt;p&gt;To use fixtures in Jest we can use the &lt;code&gt;test.each()&lt;/code&gt; &lt;a href="https://jestjs.io/docs/api#testeachtablename-fn-timeout"&gt;function&lt;/a&gt;. It performs a test for each fixture in an array of fixtures. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fixtures&lt;/strong&gt; are data representing conditions - such function arguments and return values - under which the unit test is performed. Using fixtures is a quick and easy way to assert that a unit's behaviour matches expectations under different conditions without having to write multiple tests.&lt;/p&gt;

&lt;p&gt;In Jest, a fixture can be a single value or an array of values. The fixture is available in the test handler function through parameters. The value or values of a fixture can be injected in the description through &lt;a href="https://jestjs.io/docs/api#describeeachtablename-fn-timeout"&gt;printf formatting&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// isInteger.spec.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isInteger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./isInteger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;integerNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;integerNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isInteger passes for integer value %j&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ... or...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;integerNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;integerNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isInteger passes for integer value %j with result %j&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running Jest should now give us a report on which tests pass, and which tests fail, where every test will correspond to a fixture from our array of fixtures.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;%j&lt;/code&gt; is a &lt;a href="https://nodejs.org/api/util.html#util_util_format_format_args"&gt;printf formatting specifier&lt;/a&gt; that prints the value as JSON. It's a good choice for fixtures that contain values of different types.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#how-to-group-test-cases-in-jest-into-a-test-suite"&gt;
  &lt;/a&gt;
  How to group test cases in Jest into a test suite?
&lt;/h2&gt;

&lt;p&gt;To group test cases in Jest into a test suite we can use the &lt;code&gt;describe()&lt;/code&gt; &lt;a href="https://jestjs.io/docs/api#describename-fn"&gt;function&lt;/a&gt;. It takes a suite name string and handler function as the first two arguments.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;test suite&lt;/strong&gt; is a collection of test cases grouped together for execution purposes. The goal of a test suite is to organise tests by common behaviour or functionality. If all tests within a suite pass, we can assume that the behaviour or functionality meets expectations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// isInteger.spec.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isInteger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./isInteger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isInteger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;integerNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;integerNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;passes for integer value %j&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;floatNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;floatNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fails for non-integer value %j&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running Jest should now give us a report on which tests pass, and which tests fail, grouped into described test suites.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;describe()&lt;/code&gt; blocks can also be nested to create more complex test hierarchies.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#how-to-run-jest-every-time-files-change"&gt;
  &lt;/a&gt;
  How to run Jest every time files change?
&lt;/h2&gt;

&lt;p&gt;To run Jest every time files change we can use the &lt;code&gt;--watch&lt;/code&gt; and &lt;code&gt;--watchAll&lt;/code&gt; &lt;a href="https://jestjs.io/docs/cli#--watch"&gt;flags&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--watch&lt;/code&gt; flag will tell Jest to watch for changes in files tracked by Git. Jest will run only those tests affected by the changed files. For this to work, the project must also be a Git repository.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--watchAll&lt;/code&gt; flag will tell Jest to watch all files for changes. Whenever a file changes, Jest will run all tests.&lt;/p&gt;

&lt;p&gt;Both &lt;code&gt;--watch&lt;/code&gt; and &lt;code&gt;--watchAll&lt;/code&gt; modes support additional filtering of tests while the tests are running. This makes it possible to only run tests matching a file name, or only run failing tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Runs tests on changed files only and re-runs for any new change&lt;/span&gt;
&lt;span class="c"&gt;# Note: the project must also be a git repository&lt;/span&gt;
jest &lt;span class="nt"&gt;--watch&lt;/span&gt;

&lt;span class="c"&gt;# Runs tests on all files and re-runs for any new change&lt;/span&gt;
jest &lt;span class="nt"&gt;--watchAll&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#how-to-get-a-test-coverage-report-with-jest"&gt;
  &lt;/a&gt;
  How to get a test coverage report with Jest?
&lt;/h2&gt;

&lt;p&gt;To get a test coverage report with Jest we can use the &lt;code&gt;--coverage&lt;/code&gt; &lt;a href="https://jestjs.io/docs/cli#--coverageboolean"&gt;flag&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test coverage&lt;/strong&gt; is a software testing metric that describes how many lines of source code (statements) of the tested unit are executed (covered) by tests. A test coverage of 100% for a unit means every line of code in the unit has been called by the test.&lt;/p&gt;

&lt;p&gt;We should always aim for a high test coverage - ideally 100% - but also keep in mind that total coverage does not mean we tested all cases, only lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Runs tests and prints a test coverage afterwards&lt;/span&gt;
jest &lt;span class="nt"&gt;--coverage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
We can combine different flags to get more features out of Jest. For example, to watch all files and get a coverage report we can run &lt;code&gt;jest --watchAll --coverage&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With that we're all set! We can now write tests and run them when whenever a file is changed, and also review test coverage reports for covered and uncovered lines of code.!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#jest-unit-test-example-code"&gt;
  &lt;/a&gt;
  Jest unit test example code
&lt;/h2&gt;

&lt;p&gt;To install Jest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# For NPM users&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; jest @types/jest

&lt;span class="c"&gt;# Yarn users&lt;/span&gt;
yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; jest @types/jest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The unit to be tested in &lt;code&gt;isInteger.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// isInteger.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The unit test in &lt;code&gt;isInteger.spec.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// isInteger.spec.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isInteger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./isInteger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isInteger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;integerNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;integerNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;passes for integer value %j&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;floatNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;floatNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fails for non-integer value %j&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The test script in &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;jest &lt;span class="nt"&gt;--watchAll&lt;/span&gt; &lt;span class="nt"&gt;--coverage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#homework-and-next-steps"&gt;
  &lt;/a&gt;
  Homework and next steps
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Write more comprehensive tests. How are strings handled? Objects? &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;? Consider adding more fixtures to cover these cases.&lt;/li&gt;
&lt;li&gt;Fix the code so the tests pass or write a newer, better implementation.&lt;/li&gt;
&lt;li&gt;Achieve 100% code coverage in the coverage report.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thank you for taking the time to read through this article!&lt;/p&gt;

&lt;p&gt;Have you tried writing unit tests in Jest before? How do you feel about Jest?&lt;/p&gt;

&lt;p&gt;Leave a comment and start a discussion!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript Behind The Scenes: Execution Context &amp; The Call Stack</title>
      <author>Pawan Bhatt 👨‍💻</author>
      <pubDate>Sat, 24 Jul 2021 11:17:21 +0000</pubDate>
      <link>https://dev.to/bhattpawan/javascript-behind-the-scenes-execution-context-the-call-stack-240l</link>
      <guid>https://dev.to/bhattpawan/javascript-behind-the-scenes-execution-context-the-call-stack-240l</guid>
      <description>&lt;p&gt;Hey fellow developers, in the last blog, we learnt about &lt;a href="https://dev.to/bhattpawan/discovering-javascript-the-javascript-engine-runtime-5hia"&gt;&lt;strong&gt;The JavaScript Engine &amp;amp; The Runtime&lt;/strong&gt;&lt;/a&gt; . So today we continue our learnings on the &lt;em&gt;Behind The Scenes&lt;/em&gt; of JavaScript, by having a clear understanding of the &lt;strong&gt;Execution Context and The Call Stack&lt;/strong&gt;. Without any further ado, lets dive straight in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-execution-context"&gt;
  &lt;/a&gt;
  What is an Execution Context?
&lt;/h2&gt;

&lt;p&gt;Execution Context is an environment that executes our JavaScript Code. In addition to this, it also stores all the necessary information that is needed for execution like the variable names or the argument names passed to a function. &lt;br&gt;
&lt;em&gt;"Everything in JavaScript happens inside the Execution Context"&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#execution-context-made-easy"&gt;
  &lt;/a&gt;
  Execution Context made easy....
&lt;/h3&gt;

&lt;p&gt;To understand Execution Context in a better way, let us take an example of us ordering a burger from our favorite store. So, when we get our burger, we get the following things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Burger (of course)&lt;/li&gt;
&lt;li&gt;The Polybag / Paperbag (containing our order)&lt;/li&gt;
&lt;li&gt;Ketchup, Tissues, Fries, Cola and other add-ons, which enhance our burger eating experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So considering our order, we can draw the following comparisons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Burger -&amp;gt; Our JavaScript Code&lt;/li&gt;
&lt;li&gt;The Polybag / Paperbag -&amp;gt; Execution Context &lt;/li&gt;
&lt;li&gt;Ketchup, Tissues, Fries etc -&amp;gt; The functions, variables or arguments passed to the function which help/enhance our JavaScript code execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an illustration for the same:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3E2au8V8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627029139394/0p5ZR0kUv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3E2au8V8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627029139394/0p5ZR0kUv.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#whats-inside-an-execution-context"&gt;
  &lt;/a&gt;
  What's inside an Execution Context?
&lt;/h3&gt;

&lt;p&gt;An Execution Context primarily consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Variable Environment: The variable environment consists of the following:

&lt;ul&gt;
&lt;li&gt;let, const and var declarations&lt;/li&gt;
&lt;li&gt;functions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scope Chain (will be covered later)&lt;/li&gt;
&lt;li&gt;this keyword (will be covered later)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, for now, lets just forget that we know anything like the scope chain &amp;amp; this keyword (we'll cover it later, don't worry), and focus on the variable environment.&lt;/p&gt;

&lt;p&gt;If we consider code example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = 'Hello World';

function sayHello(){
console.log('Hello People');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Execution Context will look like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kzY66XCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8wx71tja8u6wctwqv7n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kzY66XCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8wx71tja8u6wctwqv7n.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Before moving on to how the JavaScript code is executed, let us have a look at what the &lt;strong&gt;Call Stack&lt;/strong&gt; is.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-call-stack"&gt;
  &lt;/a&gt;
  The Call Stack:
&lt;/h2&gt;

&lt;p&gt;The Call Stack is a place that stacks execution context on top of each other in order to keep track of the execution order. The Execution Contexts are processed in  LIFO manner i.e., Last-In-First-Out.&lt;br&gt;
Here is an illustration:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UeF6NHYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cvfer1foy0yllfl218l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UeF6NHYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cvfer1foy0yllfl218l.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-is-the-code-actually-executed"&gt;
  &lt;/a&gt;
  How is the code &lt;strong&gt;actually&lt;/strong&gt; Executed?
&lt;/h2&gt;

&lt;p&gt;So now that we are aware of the terminologies, let us see how our code gets executed. Take the following code snippet for instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = 'Pawan';

function sum(a, b){
let s = a + b;
return s;
}
const getSum = sum(2, 3);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code execution takes place mainly in two phases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;The Creation Phase:&lt;/strong&gt; In which the variables, functions are declared in the variable environment.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The Execution Phase:&lt;/strong&gt; In which the code is executed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1. The Creation Phase&lt;/strong&gt;&lt;br&gt;
During the creation phase, the variables and functions defined in global scope are allocated memory and assigned an initial value. For the code snippet above, the global execution context in creation phase will look like.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aaa98a97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dubi9peyuif0yq6kqcp4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aaa98a97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dubi9peyuif0yq6kqcp4.png" alt="image"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. The Execution Phase:&lt;/strong&gt;&lt;br&gt;
During the execution phase, the variables are assigned values and the code is executed &lt;em&gt;one-line-at-a-time&lt;/em&gt;. The execution context changes as follows:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6PQQIaQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ezf22j5djzpq88wqgek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6PQQIaQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ezf22j5djzpq88wqgek.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6UNbDTRr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yo7orefrwqp4ic71py20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6UNbDTRr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yo7orefrwqp4ic71py20.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now you must be thinking, for multiple functions we would have hundreds of execution contexts, so how would JavaScript track its execution? The answer is &lt;strong&gt;The Call Stack&lt;/strong&gt;. Below is how the call stack will be populated for our code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When the code is run for the first time, the call stack looks like:&lt;br&gt;
&lt;strong&gt;Creation Phase&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EzUB7BKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0u4b2ge5vesxxdoa9ug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EzUB7BKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0u4b2ge5vesxxdoa9ug.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Execution Phase&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0sqefyrd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e459ehu5ec5jxq8lju3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0sqefyrd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e459ehu5ec5jxq8lju3a.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the function, sum gets called, it gets its own execution context and now our call stack looks like:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Creation Phase:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ctttz6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nppdqxfcgy6jy2iwi7wb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ctttz6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nppdqxfcgy6jy2iwi7wb.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Execution Phase:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fNFaOTqE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xb07bmcceiesog2f4kx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fNFaOTqE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xb07bmcceiesog2f4kx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now that our function execution context has completed its execution, it gets removed from the call stack ( for now lets suppose that it does) and our getSum variable gets populated. So now our call stack will be:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---fHXa9hr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv930yuett697aj6bky7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---fHXa9hr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv930yuett697aj6bky7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After our global execution context is done executing all the statements, it will just remain like that waiting for any explicit calls/instructions including the click events or hover events etc. The execution context remains active so long as our browser window is active.&lt;/p&gt;

&lt;p&gt;So, I hope I was able to explain how the Execution Context and the Call Stack works together to execute our JavaScript code. To summarize it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Execution Context executes the JavaScript code.&lt;/li&gt;
&lt;li&gt;Call Stack maintains a stack of execution contexts to maintain an order of execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all for now. Any queries and recommendations can be posted in the comment box below.&lt;/p&gt;

&lt;p&gt;Stay Safe &amp;amp; Happy Learning 🙌.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Quick CSS : Make infinity loading animation for your next website.</title>
      <author>Modern Web</author>
      <pubDate>Sat, 24 Jul 2021 10:20:10 +0000</pubDate>
      <link>https://dev.to/kunaal438/quick-css-make-infinity-loading-animation-for-your-next-website-187k</link>
      <guid>https://dev.to/kunaal438/quick-css-make-infinity-loading-animation-for-your-next-website-187k</guid>
      <description>&lt;p&gt;Hello, welcome. Today we'll see a quick CSS tutorial on how to make gradient loading animation. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#loading-animation"&gt;
  &lt;/a&gt;
  Loading Animation
&lt;/h1&gt;

&lt;p&gt;Wonder, how to make a loading animation ? Let's see how you can make one very easily.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/89IFrt_Unj0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h1&gt;

&lt;p&gt;So, start with basic HTML structure. And after that, create a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with class &lt;code&gt;loading-box&lt;/code&gt; it will contain our loader. And inside that, create another &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with class &lt;code&gt;loader&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loading-box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for styling first, give basic style.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fefefe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.loading-box&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ededed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above CSS, we are using flex box to center our loading box.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OAoYtE9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2pvrgscvegit051bnea.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OAoYtE9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2pvrgscvegit051bnea.PNG" alt="Capture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, style loader.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.loader&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#b6b5ff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#ff9797&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--45qr7OLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5m3qxr2dj3sr5u90oe3a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--45qr7OLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5m3qxr2dj3sr5u90oe3a.PNG" alt="Capture-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see we are done with the loader, Now let's animate this. As you can notice, we have &lt;code&gt;left&lt;/code&gt; property set to &lt;code&gt;0%&lt;/code&gt; change it to &lt;code&gt;-100%&lt;/code&gt; and give animation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.loader&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="m"&gt;3s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LttRrcjg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0tksqdo2zzis9afoekn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LttRrcjg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0tksqdo2zzis9afoekn.gif" alt="Untitled design (2)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;So, it's done. I hope you understood each and everything. If you have doubt or I missed some point let me know in the comments.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#articles-you-may-found-useful"&gt;
  &lt;/a&gt;
  Articles you may found Useful
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-position-everything-you-need-for-good-developer-pfh"&gt;CSS Positions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/media-query-everything-you-need-for-responsive-design-b8g"&gt;CSS Media Query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/display-flex-complete-guide-on-css-flex-box-2021-5bi2"&gt;CSS flex box&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you like, you can subscribe my youtube channel. I create awesome web contents. &lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;Subscribe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks For reading.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Writing a function in Javascript</title>
      <author>anjan-dutta</author>
      <pubDate>Sat, 24 Jul 2021 09:24:02 +0000</pubDate>
      <link>https://dev.to/anjandutta/writing-a-function-in-javascript-35cf</link>
      <guid>https://dev.to/anjandutta/writing-a-function-in-javascript-35cf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-function"&gt;
  &lt;/a&gt;
  What is a function
&lt;/h2&gt;

&lt;p&gt;It is a way of writing a set of logic separately from the rest of the code. Functional coding is a clean, readable and reusable approach of programming.&lt;/p&gt;

&lt;p&gt;It is also assigned a name for the ease of accessibility. Can we write functions without names? The answer is yes. We call those anonymous functions. I have discussed it later in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#declaration-of-a-function-in-javascript"&gt;
  &lt;/a&gt;
  Declaration of a function in Javascript
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameter1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parameter2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;....)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;statement1&lt;/span&gt;
  &lt;span class="nx"&gt;statement2&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-write-a-function-in-javascript"&gt;
  &lt;/a&gt;
  How to write a function in Javascript
&lt;/h2&gt;

&lt;p&gt;A function declaration has three parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name&lt;/li&gt;
&lt;li&gt;Parameters&lt;/li&gt;
&lt;li&gt;Statements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://anjandutta.com/function-in-javascript"&gt;Read more...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>frontend</category>
      <category>programming</category>
    </item>
    <item>
      <title>What are Video on Demand API (Vod Api)?</title>
      <author>Sagar Kava</author>
      <pubDate>Sat, 24 Jul 2021 09:16:08 +0000</pubDate>
      <link>https://dev.to/sagarkava/what-are-video-on-demand-vod-4gag</link>
      <guid>https://dev.to/sagarkava/what-are-video-on-demand-vod-4gag</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cQ5aYFT2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://eastceylon.com/images/2021/07/24/Upload-video-from-anywhere.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cQ5aYFT2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://eastceylon.com/images/2021/07/24/Upload-video-from-anywhere.jpg" alt="Upload-video-from-anywhere.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.videosdk.live/"&gt;Video on Demand&lt;/a&gt; (VoD) creates an online video library for the viewers, which they can access anytime at their ease with any compatible device. Unlike the traditional media broadcasting channels, which demanded viewers to watch videos at the time of broadcast only, VoD is different. It allows viewers to view content at their comfort.&lt;/p&gt;

&lt;p&gt;Video on Demand technology, the future of online content delivery has witnessed a rapid engagement in the current times. Today, the majority of the content is found attractive when it is in video format. There comes the idea of VoD. VoD is an abbreviation for Video on Demand. This system provides the technology of storing video content on the cloud in a compressed file format. Researchers have found that more than a written article or an e-mail, today, video content looks more alluring to the reader who has turned into a viewer. It is well said that whatever we visualize has more worth than whatever we read or listen to. The content visualized always holds more significance.&lt;/p&gt;

&lt;p&gt;With the increasing global population, the use of smartphones and internet connection has also increased. This has in turn led to an increase in demand for online digital content. Today the businesses have witnessed a rise in demand for videos, and to assure you, this is a never-ending demand which is creating endless opportunities. Video on Demand is a technology that serves to reap benefits to the content creators as well. It allows users to view videos at their comfort, whenever they want, and in whatsoever manner they choose to view them. Video on Demand allows flexible viewing facilities to the users. This blog explains the term Video on Demand in detail, about what it is, how it works, and its benefits.&lt;/p&gt;

&lt;p&gt;On a Video on Demand platform, one can play videos, seek the video forward and backward, pause and play, and watch later. It helps in managing videos, and deliver the content with the help of CDNs, which helps in providing fast and reliable content delivery to the businesses. Professionally, it also helps businesses to have full control over the content delivery and its distribution. It helps to customize the content delivery for businesses to deliver the apt data consensual by them. It sets an arrangement of pre-recorded data, which can be reviewed in the future.&lt;/p&gt;

&lt;p&gt;Often live streaming and VoD are considered similar but in reality, they are pretty different. Let us understand what is live streaming.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-live-streaming"&gt;
  &lt;/a&gt;
  What is Live Streaming?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.videosdk.live/"&gt;Live streaming&lt;/a&gt; is a concept that allows businesses to stream their content online. Viewers can watch the content on a real-time basis. The viewers can watch the streaming which is happening live and can also watch them later, if recorded, using VoD. &lt;/p&gt;

&lt;p&gt;live stream, the viewers can also pause, play, and make the videos play backward. Live streaming is valuable as it connects to its customers, creating a live bond with them. It also allows live chat with the viewers. VoD lacks a live chat facility, though it allows a well-versed playback video facility for the same recorded live stream.&lt;/p&gt;

&lt;p&gt;Live streaming helps businesses to make announcements for the public, media releases, and press conferences to increase their PR activity with the external environment. Live streaming is a beneficial tool as it helps businesses to boost their marketing and branding strategies too. A live stream can be later accessed as a VoD. the stream can also be accessed later with the help of the VoD facility.&lt;br&gt;
Content creators can reach out to audiences by live streaming:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-behindthescenes-look-at-your-business-or-daily-routine"&gt;
  &lt;/a&gt;
  A behind-the-scenes look at your business or daily routine.
&lt;/h4&gt;

&lt;p&gt;Q&amp;amp;A session.&lt;br&gt;
Tutorials (makeup, yoga poses).&lt;br&gt;
Skills demonstrations (cooking, eLearning).&lt;br&gt;
Tips, tricks, and advice.&lt;br&gt;
Webinars.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-choose-an-ideal-video-on-demand-facility"&gt;
  &lt;/a&gt;
  How to choose an ideal Video on Demand facility?
&lt;/h3&gt;

&lt;p&gt;Choosing an ideal VoD facility is a must as it helps in making engagements better. The viewers are generally consumer-oriented which leads to a raised concern of security and a good system workforce, which doesn’t lag or create unusual issues for the general viewers. Analyzing business trends, good branding is necessary, but in the current trends, businesses have turned customer-oriented, where the features have been designed in accordance to the customer ease.&lt;/p&gt;

&lt;p&gt;Videosdk.live makes the client experience better. We infuse all the features of live streaming as well as video-on-demand at one platform. We make your experience worth sharing with others. We keep up with a huge product range, starting from&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Customizable API and SDK with UI library&lt;/li&gt;
&lt;li&gt;Low-latency scalable live streaming&lt;/li&gt;
&lt;li&gt;Video-on-demand facility&lt;/li&gt;
&lt;li&gt;Content Delivery Networks and more&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;All these products we serve to our clients on a single platform enhancing the consumer-development opportunities and user-friendly approach.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#video-on-demand-facilities"&gt;
  &lt;/a&gt;
  video on demand facilities
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;(1) Whitelabel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can host your videos on live streaming with the Whitelabel facility, engaging the screen with your branding and logo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2) Scalable streaming&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We cater to flawless, uninterrupted streaming, with the stream recording facility. We help you engage a million users&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(3) Compatibility&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are compatible with 98% of devices, including Android, iOS, and more. All we aim is to provide maximum engagement to your application&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(4) Customizable APIs and SDKs&lt;/strong&gt;&lt;br&gt;
Videosdk.live develop APIs and SDKs designed on the demand of its clients in any manner they wish&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(5) Video on demand facility&lt;/strong&gt;&lt;br&gt;
With the facility of live streaming, videosdk.live also allows a flexible VoD feature, where the clients can view the content at their ease.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(6) Video playback&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We also offer a facility of video playback, where the viewers get an option to loop the video, play and pause, and make their video fasten or slow as for their comfort.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(7) Secured accessibility&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We ensure secured access to your platform for your customers to make a better engagement platform for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(8) Adaptive Live Streaming&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Videosdk.live caters to scalable streaming based on the device, supportive quality, and  internet bandwidth&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;(9) Adaptive Video Streaming&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We also provide services for streaming videos, with effective scalability and VoD facility, supporting the majority of devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(10) Encoding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Videosdk.live helps in encoding videos and images, compressing them into digital format, saving them as fluid data making them compatible with all mobile devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(11) Hosting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We provide the facility of hosting videos, which are uploaded by the clients with us. We help in uploading the videos and hosting them to online platforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(12) Content Delivery Network&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We provide a global CDN with global geo-replication and edge location delivery. Protected with DDos, we ensure faster delivery with enterprise-grade security.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(13) Multi-platform Streaming&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Stream live on several social media platforms all at once. Enjoy going live, consuming less time. Build a strong branding strategy with us.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tips-for-starting-a-successful-vod-business"&gt;
  &lt;/a&gt;
  Tips for Starting a Successful VOD Business
&lt;/h4&gt;

&lt;p&gt;Whether you’re a professional content creator considering a video-based business or transitioning your company online to keep up with the times, streaming video can work for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vod-business-models"&gt;
  &lt;/a&gt;
  VOD Business Models
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-svod-subscription-videoondemand"&gt;
  &lt;/a&gt;
  (1) SVOD (Subscription Video-On-Demand)
&lt;/h4&gt;

&lt;p&gt;The SVOD, or Subscription Video-On-Demand, model gives viewers full access to a video library for a recurring monthly or annual fee.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Netflix&lt;br&gt;
Amazon Prime &lt;br&gt;
Disney+&lt;br&gt;
Hulu&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-tvod-transactional-videoondemand"&gt;
  &lt;/a&gt;
  (2) TVOD (Transactional Video-On-Demand)
&lt;/h4&gt;

&lt;p&gt;TVOD, or Transactional Video-On-Demand, uses a pay-per-view format. Customers make one-time purchases to access specific content. &lt;/p&gt;

&lt;p&gt;For example, buying full seasons or individual episodes of your favorite tv shows through Amazon Prime or iTunes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-avod-advertising-videoondemand"&gt;
  &lt;/a&gt;
  (3) AVOD (Advertising Video-On-Demand)
&lt;/h4&gt;

&lt;p&gt;AVOD, or Advertising Video-On-Demand, is essentially “free” for viewers because there’s no up-front cost to watch.&lt;/p&gt;

&lt;p&gt;AVOD revenue comes from businesses paying to advertise with short commercials throughout your videos.&lt;/p&gt;

&lt;p&gt;For viewers, this is a familiar setup because it feels like cable TV,  where they tune in to watch shows for the “price” of watching ads. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.videosdk.live/"&gt;Videosdk.live&lt;/a&gt; is an ideal platform for users to develop their streaming platforms flawless with no extra effort. We customize our APIs and SDKs according to client preferences to increase their app engagement. The CDNs we use for storing the digital content are exclusively secured enabling reliable and scalable streaming.Videosdk.live excels in its features.&lt;/p&gt;

&lt;p&gt;Apart from the above facilities, we also deliver some additional features making ourselves a reliable platform to use. Connect with us and explore what you never explored before.&lt;/p&gt;

&lt;p&gt;Reach us and get enriched with more such value content and an everlasting business corporate relation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-your-own-netflix"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.videosdk.live/"&gt;(Build Your Own Netflix)&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>rails</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Adding a detail data fetching screen in Flutter</title>
      <author>Chris Bongers</author>
      <pubDate>Sat, 24 Jul 2021 09:13:39 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/adding-a-detail-data-fetching-screen-in-flutter-3c41</link>
      <guid>https://dev.to/dailydevtips1/adding-a-detail-data-fetching-screen-in-flutter-3c41</guid>
      <description>&lt;p&gt;In today's article, I want to show you a combination of a couple of elements to create a functional app in Flutter.&lt;/p&gt;

&lt;p&gt;The basis of this application will be the &lt;a href="https://daily-dev-tips.com/posts/top-anime-shows-flutter-app/"&gt;Anime app in Flutter&lt;/a&gt; we built a couple of days ago.&lt;br&gt;
But then we'll use the option to &lt;a href="https://daily-dev-tips.com/posts/sending-data-to-a-new-screen-in-flutter/"&gt;send data to a new screen&lt;/a&gt; to get a detailed episode list per anime series.&lt;br&gt;
Lastly, we top it off by &lt;a href="https://daily-dev-tips.com/posts/how-to-import-a-local-widget-in-flutter/"&gt;moving these pages to their widgets in Flutter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Making the result look like this example below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hal7QZrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627117999713/TtBPC56jf_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hal7QZrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627117999713/TtBPC56jf_.png" alt="Adding a detail data fetching screen in Flutter"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#architectural-changes"&gt;
  &lt;/a&gt;
  Architectural changes
&lt;/h2&gt;

&lt;p&gt;Before we get started, if you do want to follow along, you should download the &lt;a href="https://github.com/rebelchris/flutter/tree/fetch-anime-shows"&gt;Anime app from GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first code we need to change is our main application. We want this to be a routed application.&lt;/p&gt;

&lt;p&gt;Change the &lt;code&gt;AnimeApp&lt;/code&gt; class to reflect this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnimeApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;'Anime app'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;debugShowCheckedModeBanner:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;initialRoute:&lt;/span&gt; &lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;routes:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="s"&gt;'/detail'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;DetailPage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;item:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By doing this, we create an app that contains multiple routes. The initial route is set to our &lt;code&gt;HomePage&lt;/code&gt;, which was our previous main application.&lt;/p&gt;

&lt;p&gt;The detailed route is added and comes with two parameters being the &lt;code&gt;item&lt;/code&gt; and the &lt;code&gt;title&lt;/code&gt;. We use these to render the top bar and fetch the details for this show.&lt;/p&gt;

&lt;p&gt;Now let's change the old anime app class to be the new home page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;_HomePageState&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_HomePageState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_HomePageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Same as before&lt;/span&gt;

    &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Anime app'&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="c1"&gt;// Same&lt;/span&gt;
      &lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing major changed here. I just changed the class names to be more representing of the widget they render.&lt;br&gt;
Also, we can return the Scaffold and not the whole material app in the body since we have that in our anime app widget now.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#retrieving-data-on-the-detail-page"&gt;
  &lt;/a&gt;
  Retrieving data on the detail page
&lt;/h2&gt;

&lt;p&gt;With the structure fixed, we can make a new widget that will be our detailed page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DetailPage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;DetailPage&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
      &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;_DetailPageState&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_DetailPageState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this looks a little bit different than the home page widget, as it contains two variables that we can pass to it.&lt;/p&gt;

&lt;p&gt;The state looks pretty similar to the homepage state, but it uses a different future.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_DetailPageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DetailPage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;late&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;episodes&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;episodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetchEpisodes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some minor things to note here is that we use the same idea to retrieve data using a future.&lt;br&gt;
However, we now pass a variable to this function that will fetch the data, the id of this series we clicked on.&lt;br&gt;
We retrieve this data by using the &lt;code&gt;widget.{variable}&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;Let's quickly go ahead and make the Episode class, just as we made the &lt;code&gt;Show&lt;/code&gt; class in the previous article.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Episode&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;episodeId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;episodeId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;factory&lt;/span&gt; &lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromJson&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;episodeId:&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'episode_id'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, an episode will have an id and title, which is all we need.&lt;/p&gt;

&lt;p&gt;The future also looks pretty similar to what we've seen before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fetchEpisodes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://api.jikan.moe/v3/anime/&lt;/span&gt;&lt;span class="si"&gt;${id}&lt;/span&gt;&lt;span class="s"&gt;/episodes/1'&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;episodesJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsonDecode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;'episodes'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;episodesJson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;episode&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromJson&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;episode&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Failed to load episodes'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can see that we merge the id of the series in the URL we are fetching.&lt;/p&gt;

&lt;p&gt;By this point, our state can call the API and retrieve the data into the episodes variable.&lt;/p&gt;

&lt;p&gt;Let's look at how the widget will be styled.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Scaffold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
  &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;FutureBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AsyncSnapshot&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasData&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;separated&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;padding:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="nl"&gt;itemCount:&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;!.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;itemBuilder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ListTile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;leading:&lt;/span&gt; &lt;span class="n"&gt;CircleAvatar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;${snapshot.data![index].episodeId}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
                &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;![&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;},&lt;/span&gt;
            &lt;span class="nl"&gt;separatorBuilder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Divider&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Something went wrong :('&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;CircularProgressIndicator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="nl"&gt;future:&lt;/span&gt; &lt;span class="n"&gt;episodes&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;)),&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, this code looks pretty similar to what we did on the home page. However, it renders slightly different.&lt;/p&gt;

&lt;p&gt;Note how we use the &lt;code&gt;widget.title&lt;/code&gt; to get the parameter title and set this as the AppBar title text.&lt;/p&gt;

&lt;p&gt;This will also create a list view based on the future builder.&lt;br&gt;
Inside the list, it will check if the future has data and return that.&lt;br&gt;
If it has an error, we also display that to the end-user.&lt;br&gt;
And while it's loading, we show a loader.&lt;/p&gt;

&lt;p&gt;In the list, we render a list tile, with a circle avatar containing the number of this episode and the title of the episode. Which will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7nUqT4jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626592626153/wX-leRtWA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7nUqT4jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626592626153/wX-leRtWA.png" alt="ListTile circle avatar in Flutter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To navigate to this page, we must add a tap listener to our home page items.&lt;/p&gt;

&lt;p&gt;Inside the list tile, add the following function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nl"&gt;onTap:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;MaterialPageRoute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;DetailPage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;item:&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;![&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;malId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;![&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#moving-page-widgets-to-their-own-file-in-flutter"&gt;
  &lt;/a&gt;
  Moving page widgets to their own file in Flutter
&lt;/h2&gt;

&lt;p&gt;We have our functional application ready. However, our &lt;code&gt;main.dart&lt;/code&gt; file is getting quite big.&lt;/p&gt;

&lt;p&gt;So let's go ahead and move some data to their own files.&lt;/p&gt;

&lt;p&gt;I've created a folder called screens inside the &lt;code&gt;lib&lt;/code&gt; folder.&lt;br&gt;
In there create these two files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;home.dart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detail.dart&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we can move everything related to the homepage into that &lt;code&gt;home.dart&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;That includes all these items: (Note I've minimized the functions)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter_app/screens/detail.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:http/http.dart'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:convert'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Widget code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_HomePageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// State code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Show&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Class code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fetchShows&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Future code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the same can be done for the detail page. Place that into the &lt;code&gt;detail.dart&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:http/http.dart'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:convert'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DetailPage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Widget code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_DetailPageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DetailPage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// State code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Episode&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Class code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fetchEpisodes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Future code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;main.dart&lt;/code&gt; file now should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter_app/screens/home.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter_app/screens/detail.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AnimeApp&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnimeApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;'Anime app'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;debugShowCheckedModeBanner:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;initialRoute:&lt;/span&gt; &lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;routes:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="s"&gt;'/detail'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;DetailPage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;item:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More maintainable, right?&lt;br&gt;
If you are looking for the complete code for any references, you can find the code on this &lt;a href="https://github.com/rebelchris/flutter/tree/anime-detail-page"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
    </item>
    <item>
      <title>Python basic skills: Lets create an 8 characters random password generator.</title>
      <author>Martin N Thuo</author>
      <pubDate>Sat, 24 Jul 2021 09:09:22 +0000</pubDate>
      <link>https://dev.to/mertoenjosh/python-basic-skills-lets-create-an-8-characters-random-password-generator-3bk</link>
      <guid>https://dev.to/mertoenjosh/python-basic-skills-lets-create-an-8-characters-random-password-generator-3bk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-python"&gt;
  &lt;/a&gt;
  What is python?
&lt;/h2&gt;

&lt;p&gt;According to the official &lt;a href="https://www.python.org/"&gt;&lt;code&gt;python&lt;/code&gt;&lt;/a&gt; website, &lt;strong&gt;Python is a programming language that lets you work quickly and integrate systems more effectively&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;A much more specific meaning would be: &lt;em&gt;its an &lt;code&gt;interpreted&lt;/code&gt;, &lt;code&gt;object-oriented&lt;/code&gt;, &lt;code&gt;high-level&lt;/code&gt; programming language with dynamic semantics&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;In this article we will code a python program that generates a random 8 characters long password.&lt;/p&gt;

&lt;p&gt;A password is a secret phrase that must be used to allow access to a computer system or service.&lt;/p&gt;

&lt;p&gt;To ensure each password generated is strong, it must contain each of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2 random lower case letters&lt;/li&gt;
&lt;li&gt;2 random upper case letters&lt;/li&gt;
&lt;li&gt;2 random numeric characters&lt;/li&gt;
&lt;li&gt;2 random symbols&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#breaking-down-the-process-"&gt;
  &lt;/a&gt;
  Breaking down the process ?
&lt;/h3&gt;

&lt;p&gt;The process involves generating two characters of each type (letters, numbers and symbols), combine them in a &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;shuffle&lt;/code&gt; them randomly and &lt;code&gt;join&lt;/code&gt; them to a string.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;List&lt;/strong&gt;: A list is a python data type used to store multiple items in a single variable.&lt;/p&gt;

&lt;p&gt;To begin writing the program, its important we understand the requirements.&lt;/p&gt;

&lt;p&gt;We need to make the password as unique and random as possible. For this we need to import &lt;code&gt;random&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Module&lt;/strong&gt;: A module is a Python file that's intended to be imported into scripts &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;library&lt;/strong&gt; : Python Libraries are a set of useful functions that eliminate the need for writing codes from scratch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-code-shall-we"&gt;
  &lt;/a&gt;
  Let's code, shall we?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Importing the required modules.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;String module has a pre-initialized string used as string constant, &lt;code&gt;string.printable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a helper function for slitting a string.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;split&lt;/code&gt; helper function will split &lt;code&gt;string.printable&lt;/code&gt; into a list of all the individual charters of ascii.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;all_strings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Split returns a list containing all of the ascii characters, which we store in a variable &lt;code&gt;all_strings&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extract new lists for each type of ascii characters&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;all_strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;lowerCase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;all_strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;upperCase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;all_strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;syms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;all_strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;94&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the indexing of each of the characters in the &lt;code&gt;all_strings&lt;/code&gt; list to extract from and to the required index of each type of character.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Indexing in python starts from 0.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Create helpers functions to generate random characters of each type&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# create helper functions to generate two random characters of each
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;randomLower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lowerCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lowerCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;randomUpper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upperCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upperCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;randomDigits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;randomSyms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;syms&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;syms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;random.choices&lt;/strong&gt;: The &lt;code&gt;choices()&lt;/code&gt; method returns a list with the randomly selected element from the specified sequence&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concatenate the random strings in one list&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randomSyms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;syms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;randomDigits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;randomLower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lowerCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;randomUpper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upperCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;passwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We &lt;code&gt;concatenate&lt;/code&gt; the generated string in one list and use the &lt;code&gt;shuffle()&lt;/code&gt; method to shuffle the list.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;join()&lt;/code&gt; method is used to join items in a list by a delimiter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now we can print out the result&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>datascience</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Dockerize your Go app</title>
      <author>Karan Pratap Singh</author>
      <pubDate>Sat, 24 Jul 2021 09:08:50 +0000</pubDate>
      <link>https://dev.to/karanpratapsingh/dockerize-your-go-app-46pp</link>
      <guid>https://dev.to/karanpratapsingh/dockerize-your-go-app-46pp</guid>
      <description>&lt;p&gt;Go is quickly becoming one of my favorite languages to work with. So, today we'll dockerize our Go app by taking advantage of builder pattern and multistage builds to reduce our docker image from &lt;code&gt;850mb&lt;/code&gt; to just &lt;code&gt;15mb&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article is part of the Dockerize series, make sure to checkout the &lt;a href="https://dev.to/karanpratapsingh/introduction-to-dockerize-series-28l1"&gt;Introduction&lt;/a&gt; where I go over some concepts which we are going to use. Code from this article is available &lt;a href="https://github.com/karanpratapsingh/tutorials/tree/master/go"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zUc2LihXjlw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I've also made a video, if you'd like to follow along&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h3&gt;

&lt;p&gt;I've initialized a simple api using &lt;a href="https://github.com/gorilla/mux"&gt;Mux&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── main.go
├── go.mod
└── go.sum
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's our &lt;code&gt;main.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;encoding/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;log&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;net/http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;github.com/gorilla/mux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;router&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rw&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;response&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello Docker!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Server is running!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:4000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-development"&gt;
  &lt;/a&gt;
  For development
&lt;/h3&gt;

&lt;p&gt;We'll be using &lt;a href="https://github.com/cespare/reflex"&gt;Reflex&lt;/a&gt; as part of our development workflow. If you're not familiar, Refelx provides live reload when developing.&lt;/p&gt;

&lt;p&gt;Let's continue our docker setup by adding a &lt;code&gt;Dockerfile&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; golang:1.16.5 as development&lt;/span&gt;
&lt;span class="c"&gt;# Add a work directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="c"&gt;# Cache and install dependencies&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; go.mod go.sum ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;go mod download
&lt;span class="c"&gt;# Copy app files&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="c"&gt;# Install Reflex for development&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;go &lt;span class="nb"&gt;install &lt;/span&gt;github.com/cespare/reflex@latest
&lt;span class="c"&gt;# Expose port&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 4000&lt;/span&gt;
&lt;span class="c"&gt;# Start app&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; reflex -g '*.go' go run api.go --start-service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's create a &lt;code&gt;docker-compose.yml&lt;/code&gt;. Here we'll also mount our code in a &lt;a href="https://www.cloudsavvyit.com/7500/what-are-docker-volumes-and-how-do-you-use-them/"&gt;volume&lt;/a&gt; so that we can sync our changes with the container while developing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app-dev&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app-dev&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;development&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/app&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;4000:4000&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start! Start! Start!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;we can also use the &lt;code&gt;-d&lt;/code&gt; flag to run in daemon mode&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Great, our dev server is up!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app-dev  | Starting service...
app-dev  | 2021/07/04 12:50:06 Server is running!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's checkout our image using &lt;code&gt;docker images&lt;/code&gt; command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REPOSITORY          TAG                   IMAGE ID       CREATED         SIZE
app-dev             latest                3063740d56d8   7 minutes ago   872MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Over &lt;code&gt;850mb&lt;/code&gt; for a hello world! While this might be okay for development, but for production let's see how we can reduce our image size&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-production"&gt;
  &lt;/a&gt;
  For production
&lt;/h3&gt;

&lt;p&gt;Let's update our &lt;code&gt;Dockerfile&lt;/code&gt; by adding a &lt;code&gt;builder&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt; stage&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; golang:1.16.5 as builder&lt;/span&gt;
&lt;span class="c"&gt;# Define build env&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; GOOS linux&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; CGO_ENABLED 0&lt;/span&gt;
&lt;span class="c"&gt;# Add a work directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="c"&gt;# Cache and install dependencies&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; go.mod go.sum ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;go mod download
&lt;span class="c"&gt;# Copy app files&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="c"&gt;# Build app&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;go build &lt;span class="nt"&gt;-o&lt;/span&gt; app

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; alpine:3.14 as production&lt;/span&gt;
&lt;span class="c"&gt;# Add certificates&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; ca-certificates
&lt;span class="c"&gt;# Copy built binary from builder&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=builder app .&lt;/span&gt;
&lt;span class="c"&gt;# Expose port&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 4000&lt;/span&gt;
&lt;span class="c"&gt;# Exec built binary&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ./app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add a build our production image&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t app-prod . --target production
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's check out our built production image&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using builder pattern we reduced out image size to just &lt;code&gt;~15mb&lt;/code&gt;!!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REPOSITORY                    TAG                   IMAGE ID       CREATED          SIZE
app-prod                      latest                ed84a3896251   50 seconds ago   14.7MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let's start our production container on port &lt;code&gt;80&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -p 80:4000 --name app-prod app-prod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also add a &lt;a href="https://opensource.com/article/18/8/what-how-makefile"&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt; to make our workflow easier&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="nl"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="err"&gt;docker-compose&lt;/span&gt; &lt;span class="err"&gt;up&lt;/span&gt;

&lt;span class="nl"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="err"&gt;docker&lt;/span&gt; &lt;span class="err"&gt;build&lt;/span&gt; &lt;span class="err"&gt;-t&lt;/span&gt; &lt;span class="err"&gt;app-prod&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="err"&gt;--target&lt;/span&gt; &lt;span class="err"&gt;production&lt;/span&gt;

&lt;span class="nl"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;docker run -p 80&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;4000 --name app-prod app-prod &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;With that, we should be able to take advantage of docker in our workflow and deploy our production images faster to any platform of our choice.&lt;/p&gt;

&lt;p&gt;Feel free to reach out to me on &lt;a href="https://twitter.com/karan_6864"&gt;Twitter&lt;/a&gt; if you face any issues.&lt;/p&gt;

</description>
      <category>go</category>
      <category>docker</category>
      <category>devops</category>
    </item>
    <item>
      <title>ClearCut Fullstack Developer Roadmap 2021 with 300+ Resources 🤩🚀</title>
      <author>Mohammed Junaid</author>
      <pubDate>Sat, 24 Jul 2021 09:07:56 +0000</pubDate>
      <link>https://dev.to/mdjunaidap/clearcut-fullstack-developer-roadmap-2021-with-300-resources-2690</link>
      <guid>https://dev.to/mdjunaidap/clearcut-fullstack-developer-roadmap-2021-with-300-resources-2690</guid>
      <description>&lt;h2&gt;
  &lt;a href="#frontend-developer-backend-developer-full-stack-developer"&gt;
  &lt;/a&gt;
  Frontend Developer + Backend Developer = Full Stack Developer.🤩😍🚀
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#frontend-developer-roadmap-2021"&gt;
  &lt;/a&gt;
  ⭕ Frontend Developer Roadmap 2021
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1-internet"&gt;
  &lt;/a&gt;
  1. Internet
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#2-html"&gt;
  &lt;/a&gt;
  2. HTML
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website-twitter-thread"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website, Twitter Thread.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#3-css"&gt;
  &lt;/a&gt;
  3. CSS
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website-twitter-thread"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website, Twitter Thread.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-paid-courses-to-learn-html-and-css"&gt;
  &lt;/a&gt;
  - Paid Courses to Learn HTML and CSS.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-improve-css-skills-by-playing-games"&gt;
  &lt;/a&gt;
  - Improve CSS Skills By Playing GAMES.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-build-projects-using-html-and-css-for-practice"&gt;
  &lt;/a&gt;
  - Build Projects Using HTML and CSS for PRACTICE.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-websites-to-practice-front-end-skills"&gt;
  &lt;/a&gt;
  - Websites to Practice front end Skills.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#4-javascript"&gt;
  &lt;/a&gt;
  4. JavaScript
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website-twitter-thread"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website, Twitter Thread.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-paid-courses-to-master-javascript"&gt;
  &lt;/a&gt;
  - Paid Courses to Master JavaScript
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-build-projects-using-javascript"&gt;
  &lt;/a&gt;
  - Build Projects Using JavaScript.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#5-git"&gt;
  &lt;/a&gt;
  5. Git
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-git-cheat-sheets"&gt;
  &lt;/a&gt;
  - Git Cheat sheets
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#6-css-frameworks"&gt;
  &lt;/a&gt;
  6. CSS Frameworks.
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#61-tailwind-css"&gt;
  &lt;/a&gt;
  6.1. Tailwind CSS.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-tailwind-css"&gt;
  &lt;/a&gt;
  - Projects to Practice Tailwind CSS.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#62-bootstrap"&gt;
  &lt;/a&gt;
  6.2. Bootstrap.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-bootstrap"&gt;
  &lt;/a&gt;
  - Projects to practice Bootstrap.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#63-bulma-css-framework"&gt;
  &lt;/a&gt;
  6.3. Bulma CSS Framework.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-bulma-css"&gt;
  &lt;/a&gt;
  - Projects to Practice BULMA CSS.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#7-javascript-frameworks"&gt;
  &lt;/a&gt;
  7. JavaScript Frameworks.
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#71-reactjs"&gt;
  &lt;/a&gt;
  7.1. REACTJs
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-paid-courses-to-learn-react-js"&gt;
  &lt;/a&gt;
  - Paid courses to learn React Js
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-build-projects-to-practice-reactjs"&gt;
  &lt;/a&gt;
  - Build Projects to Practice ReactJs.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#72-vue-js"&gt;
  &lt;/a&gt;
  7.2. Vue Js.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-paid-courses-for-vuejs"&gt;
  &lt;/a&gt;
  - Paid Courses for Vue.js
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-vuejs"&gt;
  &lt;/a&gt;
  - Projects to Practice VueJs
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#73-angular"&gt;
  &lt;/a&gt;
  7.3 Angular
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-paid-courses-to-learn-angular"&gt;
  &lt;/a&gt;
  - Paid Courses to Learn Angular.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-angular"&gt;
  &lt;/a&gt;
  - Projects to Practice Angular.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#74-svelte"&gt;
  &lt;/a&gt;
  7.4. Svelte
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-paid-course-to-learn-svelte-js"&gt;
  &lt;/a&gt;
  - Paid Course to Learn Svelte Js.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-svelte-js"&gt;
  &lt;/a&gt;
  - Projects to Practice Svelte Js.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#backend-developer-roadmap-2021"&gt;
  &lt;/a&gt;
  ⭕Backend Developer Roadmap 2021
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#learn-basics-of-html-css-amp-javascript"&gt;
  &lt;/a&gt;
  Learn basics of HTML CSS &amp;amp; Javascript
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#learn-git-amp-github"&gt;
  &lt;/a&gt;
  Learn Git &amp;amp; Github
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#1-apis"&gt;
  &lt;/a&gt;
  1. APIs
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practise-api"&gt;
  &lt;/a&gt;
  - Projects to Practise API
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#2-nodejs"&gt;
  &lt;/a&gt;
  2. NodeJS
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-nodejs"&gt;
  &lt;/a&gt;
  - Projects to Practice NodeJS
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#3-expressjs"&gt;
  &lt;/a&gt;
  3. ExpressJs
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-expressjs"&gt;
  &lt;/a&gt;
  - Projects to Practice ExpressJS
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#4-sql-vs-nosql"&gt;
  &lt;/a&gt;
  4. SQL Vs NoSQL
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#5-sql"&gt;
  &lt;/a&gt;
  5. SQL
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#6-postgresql"&gt;
  &lt;/a&gt;
  6. PostgreSQL
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#7-nosql"&gt;
  &lt;/a&gt;
  7. NoSQL
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#8-mongodb"&gt;
  &lt;/a&gt;
  8. MongoDB
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-mongodb"&gt;
  &lt;/a&gt;
  - Projects to Practice MongoDB
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#9-firebase"&gt;
  &lt;/a&gt;
  9. Firebase
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-for-practice-firebase"&gt;
  &lt;/a&gt;
  - Projects for Practice Firebase
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-paid-courses-for-above-technologies"&gt;
  &lt;/a&gt;
  - Paid Courses for Above Technologies
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#10-docker"&gt;
  &lt;/a&gt;
  10. Docker
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#11-cicd"&gt;
  &lt;/a&gt;
  11. CI/CD
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#12-devops"&gt;
  &lt;/a&gt;
  12. DevOps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-devops-projects"&gt;
  &lt;/a&gt;
  - DevOps Projects
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#above-mentioned-resources-at-one-place"&gt;
  &lt;/a&gt;
  Above Mentioned Resources at One Place..🤩❤️
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#grab-your-copy-now-now-now"&gt;
  &lt;/a&gt;
  Grab Your Copy Now Now Now👇👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdjunaidap.gumroad.com/l/fullstack-dev-roadmap"&gt;Full Stack Developer Roadmap 2021&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Fix Brightness Controller Missing on Linux XFCE Desktop?</title>
      <author>Mir Rahed Uddin</author>
      <pubDate>Sat, 24 Jul 2021 08:53:33 +0000</pubDate>
      <link>https://dev.to/rahedmir/how-to-fix-brightness-controller-missing-on-linux-xfce-desktop-269o</link>
      <guid>https://dev.to/rahedmir/how-to-fix-brightness-controller-missing-on-linux-xfce-desktop-269o</guid>
      <description>&lt;p&gt;XFCE is one of the most lightweight desktop environment among other Linux desktops, resource-friendly suitable for old PC/Computers. XFCE removed most of the non-essential elements such as glossy desktop design, animations, etc in terms of making it more resource-friendly. But the problem is, if you install XFCE on the top of another desktop environment (Such as installing XFCE desktop on Linux Mint Cinnamon environment), you will encounter this error due to the absence of XFCE meta-package.  &lt;/p&gt;

&lt;p&gt;If you are also not able to adjust your screen brightness due to this missing component follow these steps below to fix it.   &lt;/p&gt;

&lt;p&gt;1| Open your terminal and execute the following command...&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install xfce4-power-manager-plugins&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Git_sHNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jbo8dteazaezun5veqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Git_sHNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jbo8dteazaezun5veqs.png" alt="Linux Terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2| Enter your password and press the &lt;code&gt;y&lt;/code&gt; key to continue (if asked)&lt;/p&gt;

&lt;p&gt;3| Now, Right-click on the panel, Panel-&amp;gt; Add New Items...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUtUACyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mstginb461dtfjdsjsjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUtUACyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mstginb461dtfjdsjsjq.png" alt="Add New Items"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4| From the "Add New Items" list, search for &lt;code&gt;Power Manager Plugin&lt;/code&gt;, select it then click on the Add button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ygC_bru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbkwdqv8wvvhxkyyibfa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ygC_bru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbkwdqv8wvvhxkyyibfa.png" alt="Power Manager Plugins"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5| Now, you will see the &lt;code&gt;Power Manager icon&lt;/code&gt; appear on your panel, just click on that to begin adjusting your screen brightness. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rzOhXS6d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c19kke2ecrcdus2yvoi1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rzOhXS6d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c19kke2ecrcdus2yvoi1.png" alt="Adjust screen brightness"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Share your thoughts if you find any other essential components which are missing from the XFCE desktop...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#watch-on-youtube"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=237Sngl9N2I"&gt;Watch on YouTube&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Thanks for reading. Have a great day :)&lt;/p&gt;

&lt;p&gt;Coffee &lt;a href="https://www.buymeacoffee.com/rahedmir"&gt;https://www.buymeacoffee.com/rahedmir&lt;/a&gt; &lt;/p&gt;

</description>
      <category>linux</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
