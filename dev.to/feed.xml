<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>MongoDB through Mongoose...</title>
      <author>Roopali Singh</author>
      <pubDate>Thu, 04 Nov 2021 22:21:28 +0000</pubDate>
      <link>https://dev.to/roopalisingh/mongodb-through-mongoose-3fbd</link>
      <guid>https://dev.to/roopalisingh/mongodb-through-mongoose-3fbd</guid>
      <description>&lt;p&gt;Hi there👋,&lt;/p&gt;

&lt;p&gt;In this guide we will be learning how to integrate &lt;code&gt;MongoDB&lt;/code&gt; in your project using &lt;code&gt;Mongoose&lt;/code&gt;.&lt;br&gt;
We will be assuming that you have already setup your node.js app&lt;br&gt;
(&lt;em&gt;or the backend of your app&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MongoDB&lt;/strong&gt; is an open-source document database and leading &lt;code&gt;NoSQL&lt;/code&gt; database.&lt;br&gt;
&lt;strong&gt;Mongoose&lt;/strong&gt; is an Object Data Modelling(&lt;code&gt;ODM&lt;/code&gt;) library for &lt;code&gt;MongoDB&lt;/code&gt; and &lt;code&gt;Node.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead of connecting our node app directly to MongoDB, we will use Mongoose.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q8FYSgw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbqbu4banu389xdv2mp0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8FYSgw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbqbu4banu389xdv2mp0.PNG" alt="MongoDB managed via Mongoose" width="808" height="416"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fasten-your-seat-belt-cause-we-are-about-to-start-our-journey"&gt;
  &lt;/a&gt;
  🚀 Fasten your seat belt cause we are about to start our journey!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6Vt_Eq6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e58baslhwltqgptgbbwb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6Vt_Eq6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e58baslhwltqgptgbbwb.png" alt="are you ready" width="880" height="314"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this guide, we will be storing &lt;code&gt;user&lt;/code&gt; info. in our database.&lt;br&gt;
(&lt;em&gt;If you're working on complete MERN stack then all of these steps are meant to be perform in the backend of your app.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;span&gt;1.&lt;/span&gt; Start with installing &lt;code&gt;Mongoose&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;2.&lt;/span&gt; Create a file &lt;code&gt;userModel.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this file, we will create a &lt;code&gt;userSchema&lt;/code&gt;. A &lt;code&gt;schema&lt;/code&gt; is the structure of the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// It atomatically assigns a unique _id, so we don't need to&lt;/span&gt;
    &lt;span class="c1"&gt;// define another id for it.&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;timestamps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// Timestamp of creating a record and last update of record.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;3.&lt;/span&gt; Now we will call &lt;code&gt;mongoose.model()&lt;/code&gt; on our &lt;code&gt;schema&lt;/code&gt;. &lt;br&gt;
A &lt;code&gt;mongoose model&lt;/code&gt; is responsible for creating, querying and reading documents from the mongoDB database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userSchema&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#your-raw-usermodeljs-endraw-file-should-look-like-this-now"&gt;
  &lt;/a&gt;
  Your &lt;code&gt;userModel.js&lt;/code&gt; file should look like this now:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;timestamps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userSchema&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;4.&lt;/span&gt; Now lets create another file named &lt;code&gt;userRouter.js&lt;/code&gt; to define our API routes for performing &lt;strong&gt;CRUD operations&lt;/strong&gt; on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./userModel.js &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// express.Router() =&amp;gt;  a function to make code Modular, instead of&lt;/span&gt;
&lt;span class="c1"&gt;// creating all routes in server.js we can define multiple files&lt;/span&gt;
&lt;span class="c1"&gt;// to have our routers...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userRouter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// nature of mongoose operation is async&lt;/span&gt;
&lt;span class="c1"&gt;// so we will define the async functions here.&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;userRouter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;4.&lt;/span&gt; Before defining our routes in the &lt;code&gt;userRouter.js&lt;/code&gt;, we will first connect the &lt;code&gt;mongoose&lt;/code&gt; to the &lt;code&gt;database&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For this we need to add a few lines of code in the &lt;code&gt;server.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MONGODB_URL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongodb://localhost/your_app_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// to get rid of duplicated warnings&lt;/span&gt;
  &lt;span class="na"&gt;useNewUrlParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;useUnifiedTopology&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;useCreateIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;5.&lt;/span&gt; Just two more lines in the &lt;code&gt;server.js&lt;/code&gt; to connect &lt;code&gt;server.js&lt;/code&gt; to &lt;code&gt;userRouter.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;userRouter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./userRouter.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userRouter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#the-raw-serverjs-endraw-file-should-look-like-this-now"&gt;
  &lt;/a&gt;
  The &lt;code&gt;server.js&lt;/code&gt; file should look like this now:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// npm install dotenv&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;userRouter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./router/userRouter.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// to use .env file content&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="c1"&gt;// To connect mongoose to mongoDB database&lt;/span&gt;
&lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MONGODB_URL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongodb://localhost/your_app_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;useNewUrlParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;useUnifiedTopology&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;useCreateIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// To connect server.js to userRouter.js&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userRouter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// listen command&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Serve at http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#so-now-everything-is-connected-to-everything"&gt;
  &lt;/a&gt;
  🌏 So now everything is connected to everything 👩🏻‍💻
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aor01nHv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpmbsv61gs3n631ejpxf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aor01nHv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpmbsv61gs3n631ejpxf.PNG" alt="Everything is connected" width="742" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;6.&lt;/span&gt; It's time to go back to &lt;code&gt;userRouter.js&lt;/code&gt; file and define the routes to perform the &lt;strong&gt;CRUD operations&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./userModel.js &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userRouter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// 1) to read/fetch all users:&lt;/span&gt;

&lt;span class="nx"&gt;userRouter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/seed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// there is no condition defined in find, so it will&lt;/span&gt;
    &lt;span class="c1"&gt;// fetch all users.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;

    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;allUsers&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="c1"&gt;// 2) to create new user:&lt;/span&gt;

&lt;span class="nx"&gt;userRouter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/register&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// A request body is data sent by the client to your API.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createdUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;createdUser&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="c1"&gt;// 3) to update existing user:&lt;/span&gt;
&lt;span class="c1"&gt;// first we need to find that user and then update its info.&lt;/span&gt;

&lt;span class="nx"&gt;userRouter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/update&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;editUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;


    &lt;span class="c1"&gt;// When there are no matches find() returns [].&lt;/span&gt;
    &lt;span class="c1"&gt;// So we could not use the condition: if(!editUser){...}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;editUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No User Found&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;editUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;editUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;editUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;editUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;updatedUser&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="c1"&gt;// 4) to delete all users:&lt;/span&gt;
&lt;span class="c1"&gt;// first we need to find that user and then delete it.&lt;/span&gt;

&lt;span class="nx"&gt;userRouter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;


    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;deleteUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No User Found&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userDeleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;deleteUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User removed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;userRouter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#we-have-now-successfully-integrated-mongoose-in-our-webapp-"&gt;
  &lt;/a&gt;
  🏆 We have now successfully integrated Mongoose in our webapp 🔥.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---NGnpR3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djre3cqsmdqzrv6ornt1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---NGnpR3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djre3cqsmdqzrv6ornt1.png" alt="Mission Passed" width="500" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we just need to make a &lt;code&gt;request&lt;/code&gt; to our server.&lt;br&gt;
For eg. To fetch all users, make a &lt;code&gt;get&lt;/code&gt; request to:&lt;br&gt;
&lt;strong&gt;"/api/users/seed"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are several other functions with these, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sort()&lt;/li&gt;
&lt;li&gt;findById()&lt;/li&gt;
&lt;li&gt;findOne()&lt;/li&gt;
&lt;li&gt;findByIdAndUpdate()&lt;/li&gt;
&lt;li&gt;deleteMany() &lt;/li&gt;
&lt;li&gt;updateMany() and many more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could read more on this from &lt;a href="https://mongoosejs.com/docs/queries.html"&gt;mongoose docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---mhKD_aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8140wkb0mh1u1gag4bb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---mhKD_aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8140wkb0mh1u1gag4bb.jpg" alt="The End" width="820" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>How to Use Liquibase to Update the Schema of Your JHipster Application</title>
      <author>Anthony Viard 🥑</author>
      <pubDate>Thu, 04 Nov 2021 22:05:26 +0000</pubDate>
      <link>https://dev.to/entando/how-to-use-liquibase-to-update-the-schema-of-your-jhipster-application-1cm3</link>
      <guid>https://dev.to/entando/how-to-use-liquibase-to-update-the-schema-of-your-jhipster-application-1cm3</guid>
      <description>&lt;p&gt;Hey my fellow developers,&lt;/p&gt;

&lt;p&gt;Liquibase is an open-source solution that helps you track, version, and deploy database changes. It adds version control for changes to your database schema, makes database upgrades repeatable across environments, and supports rollbacks so you can undo changes when it’s needed.&lt;/p&gt;

&lt;p&gt;It’s the solution chosen by JHipster as well as Entando to manage database updates.&lt;/p&gt;

&lt;p&gt;In this blog post, we’ll explore the Liquibase architecture, and how we can incrementally upgrade the database schema for our own JHipster and Entando applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#liquibase-architecture"&gt;
  &lt;/a&gt;
  Liquibase Architecture
&lt;/h2&gt;

&lt;p&gt;Liquibase defines a master file (aka &lt;code&gt;master.xml&lt;/code&gt; in JHipster) as well as changelog files that represent the incremental updates to your database schema. A changelog file contains a changeSet (e.g add, edit or delete a table) while the master file defines the order in which the database updates are to be run.&lt;/p&gt;

&lt;p&gt;Here are some examples of what a Liquibase architecture looks like from the &lt;a href="https://www.liquibase.org/get-started/best-practices"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-directory-structure"&gt;
  &lt;/a&gt;
  The directory structure
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="s"&gt;com&lt;/span&gt;
      &lt;span class="s"&gt;example&lt;/span&gt;
        &lt;span class="s"&gt;db&lt;/span&gt;
          &lt;span class="s"&gt;changelog&lt;/span&gt;
            &lt;span class="s"&gt;db.changelog-master.xml&lt;/span&gt;
            &lt;span class="s"&gt;db.changelog-1.0.xml&lt;/span&gt;
            &lt;span class="s"&gt;db.changelog-1.1.xml&lt;/span&gt;
            &lt;span class="s"&gt;db.changelog-2.0.xml&lt;/span&gt;
          &lt;span class="s"&gt;DatabasePool.java&lt;/span&gt;
          &lt;span class="s"&gt;AbstractDAO.java&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-master-file"&gt;
  &lt;/a&gt;
  The master file
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;databaseChangeLog&lt;/span&gt; 
 &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.liquibase.org/xml/ns/dbchangelog"&lt;/span&gt; 
 &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2001/XMLSchema-instance"&lt;/span&gt; 
 &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;"http://www.liquibase.org/xml/ns/dbchangelog
                     http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
 &lt;span class="nt"&gt;&amp;lt;include&lt;/span&gt;  &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"com/example/db/changelog/db.changelog-1.0.xml"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;  
 &lt;span class="nt"&gt;&amp;lt;include&lt;/span&gt;  &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"com/example/db/changelog/db.changelog-1.1.xml"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;  
 &lt;span class="nt"&gt;&amp;lt;include&lt;/span&gt;  &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"com/example/db/changelog/db.changelog-2.0.xml"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/databaseChangeLog&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a-sample-changelog"&gt;
  &lt;/a&gt;
  A sample changelog
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;databaseChangeLog&lt;/span&gt;  
 &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.liquibase.org/xml/ns/dbchangelog"&lt;/span&gt;  
 &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2001/XMLSchema-instance"&lt;/span&gt;  
 &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;"http://www.liquibase.org/xml/ns/dbchangelog
                     http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
 &lt;span class="nt"&gt;&amp;lt;changeSet&lt;/span&gt;  &lt;span class="na"&gt;author=&lt;/span&gt;&lt;span class="s"&gt;"authorName"&lt;/span&gt;  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"changelog-1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
   &lt;span class="nt"&gt;&amp;lt;createTable&lt;/span&gt;  &lt;span class="na"&gt;tableName=&lt;/span&gt;&lt;span class="s"&gt;"TablesAndTables"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
     &lt;span class="nt"&gt;&amp;lt;column&lt;/span&gt;  &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"COLUMN1"&lt;/span&gt;  &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"TEXT"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
       &lt;span class="nt"&gt;&amp;lt;constraints&lt;/span&gt;  &lt;span class="na"&gt;nullable=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;  &lt;span class="na"&gt;primaryKey=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;  &lt;span class="na"&gt;unique=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
     &lt;span class="nt"&gt;&amp;lt;/column&amp;gt;&lt;/span&gt; 
   &lt;span class="nt"&gt;&amp;lt;/createTable&amp;gt;&lt;/span&gt; 
 &lt;span class="nt"&gt;&amp;lt;/changeSet&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;/databaseChangeLog&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#your-liquibase-survival-kit"&gt;
  &lt;/a&gt;
  Your Liquibase survival kit
&lt;/h2&gt;

&lt;p&gt;Every time you start your application, Liquibase checks if it is synchronized with the latest configuration in your master file, and deploys the new changesets if it’s not up to date. Liquibase uses the checksums of the previous changelogs to ensure their integrity and fires an alert if they have changed. Here are some tips to follow to ensure your database upgrades go smoothly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#1 Avoid modifying a changelog&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You should not change the content of a changelog once it has been executed on a database. Instead, perform a rollback or add a new changelog.&lt;/p&gt;

&lt;p&gt;If the validation fails, your database will not be able to start correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qCgBzJBh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fct8th8l8zz24wfew25o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qCgBzJBh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fct8th8l8zz24wfew25o.png" alt="Image description" width="880" height="454"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2 Keep database changes in order&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The master file executes the changelogs in the order they are defined. So, if you have a changelog that modifies a table created in a previous changelog, be sure to respect the order to have the proper plan executed. It’s recommended to keep a clear and maintainable file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#3 Keep changesets small&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The changeset is contained in a changelog and defines actions to perform in the database (e.g. create, drop, alter tables, etc.). By default, JHipster creates one changeset per entity. This is a good pattern to follow unless there’s a reason to make updates to multiple tables in a single changelog. Avoid creating BIG one-shot changesets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-update-your-schema-in-jhipster-6"&gt;
  &lt;/a&gt;
  How to Update Your Schema in JHipster 6
&lt;/h2&gt;

&lt;p&gt;JHipster makes it simple and intuitive to generate entities using JDL Studio or via the command line. Every time a new entity is created, a new changeset is generated and the master file is updated. However, modifying an existing entity will simply update the original changelog. If this changeset has already been run, we break rule #1.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consolidate-schema-changes-in-a-single-changeset"&gt;
  &lt;/a&gt;
  Consolidate schema changes in a single changeset
&lt;/h3&gt;

&lt;p&gt;When adding a new database entity, it’s quite common during local development to make several changes to the data model before arriving at the final schema. In this case, the easiest approach is to make updates to the entity as needed and only commit the final changelog that’s generated once you’ve finished development.&lt;/p&gt;

&lt;p&gt;However, a changelog that has already been applied to a given environment cannot be modified without risking potential data loss or other breaking changes.&lt;/p&gt;

&lt;p&gt;The solution is to generate incremental changes using Maven and Gradle plugins.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generate-incremental-changesets-with-plugins"&gt;
  &lt;/a&gt;
  Generate incremental changesets with plugins
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.liquibase.com/tools-integrations/maven/home.html"&gt;Maven&lt;/a&gt; and &lt;a href="https://github.com/liquibase/liquibase-gradle-plugin"&gt;Gradle&lt;/a&gt; plugins, combined with the &lt;a href="https://github.com/liquibase/liquibase-hibernate"&gt;Liquibase Hibernate&lt;/a&gt; plugin, can be used to generate incremental changesets without breaking rule &lt;strong&gt;#1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;JHipster provides the configuration to make it work out of the box with most databases but you may need to modify it in some circumstances. Check &lt;a href="https://docs.liquibase.com/tools-integrations/maven/maven-pom-file.html"&gt;the official guide&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;Below, we’ll cover &lt;a href="https://github.com/entando-samples/jhipster-sample-app-entando"&gt;a sample app from Entando&lt;/a&gt; that’s using an H2 database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maven-configuration"&gt;
  &lt;/a&gt;
  Maven configuration
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.liquibase&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;liquibase-maven-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${liquibase.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;changeLogFile&amp;gt;&lt;/span&gt;${project.basedir}/src/main/resources/config/liquibase/master.xml&lt;span class="nt"&gt;&amp;lt;/changeLogFile&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;diffChangeLogFile&amp;gt;&lt;/span&gt;${project.basedir}/src/main/resources/config/liquibase/changelog/${maven.build.timestamp}_changelog.xml&lt;span class="nt"&gt;&amp;lt;/diffChangeLogFile&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;driver&amp;gt;&lt;/span&gt;org.h2.Driver&lt;span class="nt"&gt;&amp;lt;/driver&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;jdbc:h2:file:${project.build.directory}/h2db/db/sample&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;defaultSchemaName&amp;gt;&amp;lt;/defaultSchemaName&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;username&amp;gt;&lt;/span&gt;sample&lt;span class="nt"&gt;&amp;lt;/username&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;password&amp;gt;&amp;lt;/password&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;referenceUrl&amp;gt;&lt;/span&gt;hibernate:spring:com.entando.sample.domain?dialect=org.hibernate.dialect.H2Dialect&lt;span class="ni"&gt;&amp;amp;amp;&lt;/span&gt;hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&lt;span class="ni"&gt;&amp;amp;amp;&lt;/span&gt;hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy&lt;span class="nt"&gt;&amp;lt;/referenceUrl&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;verbose&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/verbose&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;logging&amp;gt;&lt;/span&gt;debug&lt;span class="nt"&gt;&amp;lt;/logging&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;contexts&amp;gt;&lt;/span&gt;!test&lt;span class="nt"&gt;&amp;lt;/contexts&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;diffExcludeObjects&amp;gt;&lt;/span&gt;oauth_access_token, oauth_approvals, oauth_client_details, oauth_client_token, oauth_code, oauth_refresh_token&lt;span class="nt"&gt;&amp;lt;/diffExcludeObjects&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#workflow"&gt;
  &lt;/a&gt;
  Workflow
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Update your entity with JHipster using the command &lt;code&gt;jhipster entity yourEntityName&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Discard the changes made by JHipster in the Entity changelog &lt;code&gt;git checkout -- [ENTITY_CHANGELOG].xml&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;./mvnw liquibase:diff&lt;/code&gt; for Maven or &lt;code&gt;./gradlew liquibaseDiffChangelog -PrunList=diffLog&lt;/code&gt; for Gradle&lt;/li&gt;
&lt;li&gt;A new changelog will be generated that contains the diff between your updated Entity and the original database table.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In my application, I have added a customer entity with a field “name”. Later on, I want to add an “age” field so I update it with JHipster: &lt;code&gt;jhipster entity customer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CVMuslVa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxc6ffu52wo8ip8ccoyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CVMuslVa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxc6ffu52wo8ip8ccoyy.png" alt="Image description" width="720" height="322"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P-C-fxxQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v351kythiys38trim7kc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P-C-fxxQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v351kythiys38trim7kc.png" alt="Image description" width="621" height="104"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The changelog is now updated with the “age” field, but because my first version has already been run against my database I will break rule &lt;strong&gt;#1&lt;/strong&gt;. I’ll need to revert this file and replace it with the original version.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nxSxVt-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biutrjscc1gn2kpu36md.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nxSxVt-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biutrjscc1gn2kpu36md.png" alt="Image description" width="720" height="395"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Next, I can run &lt;code&gt;./mvnw liquibase:diff&lt;/code&gt;. I now have an incremental changelog that contains just the updates that I made. Now, I can add this new changelog to the &lt;code&gt;master.xml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tVjE8761--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk9qjkcns137rczhw4ca.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tVjE8761--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk9qjkcns137rczhw4ca.png" alt="Image description" width="559" height="133"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Note: This could not work if you’re using an H2 database. However, you can easily create incremental changelogs manually by extracting the generated XML code from the changelog generated by JHipster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#incremental-changelogs-in-jhipster-7"&gt;
  &lt;/a&gt;
  Incremental changelogs in JHipster 7
&lt;/h2&gt;

&lt;p&gt;With the release of JHipster 7, the &lt;code&gt;--incremental-changelog&lt;/code&gt; option allows us to generate a separate changelog when modifying an Entity.&lt;/p&gt;

&lt;p&gt;This means we don’t need to rollback the original changelog anymore, and we can generate incremental changelogs for our entities without breaking rule &lt;strong&gt;#1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can run JHipster with the incremental option: &lt;code&gt;jhipster --incremental-changelog&lt;/code&gt;. It also works when you import a JDL, e.g. &lt;code&gt;jhipster jdl app.jdl --incremental-changelog --with-entities&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can check the “incrementalChangelog” entry is set to “true” in &lt;code&gt;.yo-rc.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AREelzMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8plx2aa0ykao99v3kii6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AREelzMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8plx2aa0ykao99v3kii6.png" alt="Image description" width="610" height="130"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Then, create the entity as usual with &lt;code&gt;jhipster entity customer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GYoK1fWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cc59eg8bhkurzk8t3xk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GYoK1fWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cc59eg8bhkurzk8t3xk9.png" alt="Image description" width="880" height="393"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Finally, update the entity by running the same command to add a new field.&lt;/p&gt;

&lt;p&gt;Two new changelogs are generated, one for updating the entity and the second for injecting sample data for development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XKMPPsTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8erxvkh5z2m5uvqv31v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XKMPPsTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8erxvkh5z2m5uvqv31v.png" alt="Image description" width="850" height="90"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VWFfsP27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82qf0a6wvudbb029vkff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VWFfsP27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82qf0a6wvudbb029vkff.png" alt="Image description" width="880" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7tX-FQRZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fk258yhox71ciu1fpy3x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7tX-FQRZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fk258yhox71ciu1fpy3x.png" alt="Image description" width="880" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Incremental changelogs work well when you don’t need to execute a lot of changes for a given entity, but multiplying the number of changelogs can lead to complex change management. If there’s no risk of breaking your existing database, consider merging changelogs to simplify your project structure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Upgrading your database schema can be tricky, especially when working with multiple environments. In today’s blog, we learned how Liquibase helps you version control updates to your schema, and how to generate incremental changesets for entities generated by JHipster.&lt;/p&gt;

&lt;p&gt;Entando is an application composition platform for Kubernetes that adds support for generating micro frontends along with JHipster microservices. Entando 6.3.2 currently supports JHipster 6 and will be updated to JHipster 7 in the next Entando release.&lt;/p&gt;

</description>
      <category>jhipster</category>
      <category>liquibase</category>
      <category>database</category>
      <category>opensource</category>
    </item>
    <item>
      <title>GitHub Copilot blew my mind on a code-along exercise</title>
      <author>Damian Demasi</author>
      <pubDate>Thu, 04 Nov 2021 21:47:46 +0000</pubDate>
      <link>https://dev.to/colocodes/github-copilot-blew-my-mind-on-a-code-along-exercise-186n</link>
      <guid>https://dev.to/colocodes/github-copilot-blew-my-mind-on-a-code-along-exercise-186n</guid>
      <description>&lt;p&gt;GitHub Copilot has surprised me beyond what I could have ever expected. I guess artificial intelligence is more capable than I thought initially, and this is a great example of how it can help us to code faster and better.&lt;/p&gt;

&lt;p&gt;My idea about using GitHub Copilot as a web developer was that it will be suggesting function and method names with a hint of what the method could do given a comment previously written by the programmer. My mind exploded 🤯 when it actually suggested the full code on a video code-along exercise I was doing on Ruby!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-guessing-game"&gt;
  &lt;/a&gt;
  The guessing game
&lt;/h2&gt;

&lt;p&gt;I honestly had forgotten I installed the Copilot extension on VSCode (I have been very busy lately &lt;a href="https://dev.to/colocodes/how-ive-got-a-web-development-job-one-week-after-publishing-my-portfolio-3o6g"&gt;catching up on my new job&lt;/a&gt;). On a Saturday morning, I started with my regular studying ritual: I opened VSCode on half of the screen, which I had to update, something that included the &lt;em&gt;enabling&lt;/em&gt; of GitHub Copilot (more on that later), and on the other half I opened a Udemy course I'm doing on Ruby on Rails: &lt;a href="https://click.linksynergy.com/link?id=LO030NrbM0E&amp;amp;offerid=507388.519442&amp;amp;type=2&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fthe-complete-ruby-on-rails-developer-course%2F"&gt;The Complete Ruby on Rails Developer Course&lt;/a&gt;. The day before, I started working on a method and I was planning on continuing doing so.&lt;/p&gt;

&lt;p&gt;So, halfway through the video tutorial, I started typing away on my VSCode editor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I didn't have the chance to finish typing the name of the method that I was defining in Ruby, when suddenly, out of nowhere, GitHub Copilot suggested the rest of the code: not only the name of the method, but also its parameters, a loop, variable names, a return statement, and the whole logic. But that is not all: &lt;strong&gt;every single character was the same as the code in the Udemy video!&lt;/strong&gt; 🤯 It even suggested a part of code that was further ahead on the video.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jQmaWkXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7shl9cy6pw3gn76kptz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jQmaWkXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7shl9cy6pw3gn76kptz.png" alt="GitHub Copilot blowing my mind" width="880" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lZjAgjR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13nxoizs3ia5bwjqpwwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lZjAgjR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13nxoizs3ia5bwjqpwwa.png" alt="GitHub Copilot blowing my mind" width="880" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I couldn't contain my excitement, and I started smiling like a 6-years-old on a Christmas morning.&lt;/p&gt;

&lt;p&gt;But then I thought: 🤔 "I should disable this because otherwise, I won't be doing any code by myself, which is the whole point of the coding-along!".&lt;/p&gt;

&lt;p&gt;Even though I can see how useful and amazing this tool is, I won't be using it during my coding-along exercises. But I will definitely use it when building projects! It speeds up the development process greatly and helps to reduce mistakes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-github-copilot"&gt;
  &lt;/a&gt;
  What is GitHub Copilot
&lt;/h2&gt;

&lt;p&gt;GitHub Copilot is an extension that can be installed in most IDEs and text editors (including VSCode) and suggests lines of code, or entire functions, based on the &lt;a href="https://openai.com/"&gt;OpenAI engine&lt;/a&gt;. As it is trained on billions of lines of public code, I'm guessing the code from the Udemy video is on a public GitHub repository, allowing Copilot to match my code with the code in its database and make suggestions accordingly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1jsS_W5g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hns33svjv215w60jnay5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1jsS_W5g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hns33svjv215w60jnay5.png" alt="How GitHub Copilot works" width="880" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can learn more about this AI pair programmer on its &lt;a href="https://copilot.github.com/"&gt;official website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-github-copilot"&gt;
  &lt;/a&gt;
  How to get GitHub Copilot
&lt;/h2&gt;

&lt;p&gt;To get GitHub Copilot you need a GitHub account, and to sign up to the waiting list. It can take a while to receive the invite to start using it (in my case was around 4 weeks). You can request the invite on &lt;a href="https://github.com/features/copilot/signup"&gt;GitHub Copilot's signup page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-future"&gt;
  &lt;/a&gt;
  The future
&lt;/h2&gt;

&lt;p&gt;Is GitHub Copilot working for us, or are we working for it? This tool uses our code to, in turn, suggest code right back to us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/h4Hz4w9Jgrc1EY9VkL/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/h4Hz4w9Jgrc1EY9VkL/giphy.gif" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, the question many are pondering is: are we feeding a monster that will replace us as developers and unleash the power of &lt;a href="https://en.wikipedia.org/wiki/Skynet_(Terminator)"&gt;Skynet&lt;/a&gt; on the world?&lt;/p&gt;

&lt;p&gt;Or is it just a tool to improve our work, and still lacks the creativity that we, humans, have when coding?&lt;/p&gt;




&lt;p&gt;🗞️ &lt;strong&gt;NEWSLETTER -&lt;/strong&gt; &lt;em&gt;If you want to hear about my latest articles and interesting software development content, &lt;a href="https://chipper-designer-8106.ck.page/1a819bffe8"&gt;subscribe to my newsletter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;🐦 &lt;strong&gt;TWITTER -&lt;/strong&gt; &lt;em&gt;Follow me on &lt;a href="https://twitter.com/DamianDemasi"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Lessons Learned After Switching Jobs</title>
      <author>Daniel Starner</author>
      <pubDate>Thu, 04 Nov 2021 21:22:40 +0000</pubDate>
      <link>https://dev.to/dstarner/learned-lessons-of-switching-jobs-552g</link>
      <guid>https://dev.to/dstarner/learned-lessons-of-switching-jobs-552g</guid>
      <description>&lt;p&gt;Switching jobs in the tech industry can be an interesting adventure, especially if you've had years of experience at your previous position. The dramatic change can spur many emotions, experiences, and situations in your life; both good and bad. Since I know many are either actively going through this process or are considering it I figured I would leave my thoughts.&lt;/p&gt;

&lt;p&gt;For context, I recently went through a job transition and started working at &lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt; - aka &lt;a href="https://salesforce.com"&gt;Salesforce&lt;/a&gt; - this past September. I won't go into &lt;em&gt;why&lt;/em&gt; I left my previous position, but I want to discuss my discoveries once I started to get settled into my new position. I'm only &lt;a href="https://www.timeanddate.com/date/durationresult.html?d1=13&amp;amp;m1=9&amp;amp;y1=2021ti=on&amp;amp;"&gt;~51 days&lt;/a&gt; into this position, so while there is a lot more to learn, I find my immediate experiences to be most helpful for those considering switching.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#con-productivity-will-be-tough-at-first"&gt;
  &lt;/a&gt;
  Con: Productivity Will Be Tough at First
&lt;/h2&gt;

&lt;p&gt;During my transition phase, I decided to take almost a full month off between jobs. During this time, I went to Disney, played quite a bit of video games from my Steam backlog, and increased the amount of time that I was biking &amp;amp; exercising. It was all great! I felt like I had been revitalized as I was leaving behind some of the craziness of my old job, and I felt almost like a kid again with limited responsibilities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/26ufnwz3wDUli7GU0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/26ufnwz3wDUli7GU0/giphy.gif" alt="I was lazy" width="500" height="281"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The downside to this time off was that it was &lt;em&gt;very&lt;/em&gt; difficult to get back into the groove of working again, as I struggled to find the motivation the first few weeks to actually want to work. Obviously the paycheck 💰 is the ultimate motivator, but it was still an adjustment to get back to always logging on 9-5 when I was getting used to being able to do whatever I wanted during the days of my unemployment.&lt;/p&gt;

&lt;p&gt;I will say that this process was made easier by switching to a fully remote position with a globally-located team. Since everyone on my team lives in different timezones, it made the work-day hours less strict, and I feel more able to get away from the keyboard in the middle of the day to do something for myself, like a bike ride or a nap. Now that I've been around for more than a month, that productivity and motivation is back, but wow, it was rough at the beginning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grass-is-always-greener-on-the-other-side"&gt;
  &lt;/a&gt;
  Grass is Always Greener on the Other Side
&lt;/h2&gt;

&lt;p&gt;Without getting into specifics, I left my job because I was unhappy with something in their current position and I saw the opportunities of a better existence in a new environment. While I understood that no job was going to be perfect, I didn't realize the number of similarities that different companies shared, both good &amp;amp; bad. Many processes, experiences, and mindsets were similar to how my old job operated.&lt;/p&gt;

&lt;p&gt;It was nice to know that I could already be familiar with some things, but there were other places where I could build off that knowledge to learn the unique aspects of my new team. The two positions weren't as different as I had anticipated though.&lt;/p&gt;

&lt;p&gt;There was one area that I let myself be blind to during the transition process... &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#politics-exist-everywhere"&gt;
  &lt;/a&gt;
  Politics Exist Everywhere
&lt;/h3&gt;

&lt;p&gt;Without going into details, one of the reasons why I decided to find a new position was due to some internal bureaucratic decisions that I disagreed with. I got tired of playing politics for certain things that I thought were self-explanatory, and organization changes were occurring that went against some of the foundational ideals that my department had spent years building up.&lt;/p&gt;

&lt;p&gt;I had told myself, "Hey, these B.S politics are getting old, let's go somewhere else!" and I quickly realized that &lt;em&gt;every&lt;/em&gt; job has shitty politics and bureaucratic decisions to deal with. It's nothing against these companies, but at some point, business decisions have to be made and those are going to clash with engineering desires. Now, with that said, I believe that there is a line that can be crossed where one shouldn't keep putting up with politics, but to have the expectations of &lt;em&gt;never&lt;/em&gt; dealing with politics?...that is just unreasonably in the modern workplace.&lt;/p&gt;

&lt;p&gt;With this conclusion, I realized that I could change the angle that I was viewing some of these problems through. While I think the switch was still ultimately needed for me, I believe I've grown and have learned how to handle some of these situations better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#one-mans-trash"&gt;
  &lt;/a&gt;
  One Man's Trash...
&lt;/h3&gt;

&lt;p&gt;I find that the old adage of "&lt;em&gt;One man's trash is another man's treasure&lt;/em&gt;" is pretty true concerning jobs during &lt;a href="https://www.wired.com/story/great-resignation-misses-the-point/"&gt;&lt;em&gt;the Great Resignation&lt;/em&gt;&lt;/a&gt;. I saw pretty high levels of attrition at my old job - heck, I was one of those 😉 - and my new manager was pretty open that the team I was joining just faced some higher-than-average attrition levels.&lt;/p&gt;

&lt;p&gt;Does that raise red flags? 🚩🚩🚩🚩🚩🚩🚩 Hopefully not if you've done your due diligence before joining the company. I knew that this was occurring, and I knew the situation was changing; not for better or worse, it was just &lt;em&gt;changing&lt;/em&gt;. Changes meant new challenges and potential technology refreshers; it meant that I had the potential to make a bigger difference, and I was drawn to that opportunity.&lt;/p&gt;

&lt;p&gt;One thing that really excites me about starting a new job is that I can bring fresh perspectives to projects that may need it. If the same people are working on the same project for an extended period of time, it starts to create a silo of ideas and knowledge. By introducing new people to these projects - aka me onboarding - then these projects can get some new life. This allows them to be viewed in a way that allows us to make any needed changes that might have otherwise been overlooked.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-open-to-new-things"&gt;
  &lt;/a&gt;
  Be Open to New Things
&lt;/h2&gt;

&lt;p&gt;"&lt;em&gt;Of course I'm open to new things, I just quit my job for heaven's sake!&lt;/em&gt;" I tell myself as I write this. But really though, I switched jobs and immediately was thinking about how to jump on a project that is most similar to what I'd been doing previously. I worked with a lot of &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; cluster management at my old job, and I really wanted to just jump right into &lt;em&gt;more&lt;/em&gt; Kubernetes projects.&lt;/p&gt;

&lt;p&gt;Wanting to work with a specific technology is okay, but I wasn't really giving myself a full chance to grow more. With a new team &amp;amp; company came new opportunities, and I quickly realized that I was limiting myself by having such a small view of what I wanted to work on without knowing the full scope of projects and available capabilities. Once I saw myself doing this, I started giving other projects more of my time, and I found that I was learning a considerable amount in areas that I had limited familiarity in. This led to some of the confidence checks that I list below, but for the most part, its already been a pretty neat journey to connect the dots between my previous experience and the stuff that's totally new to me. &lt;strong&gt;By tackling these new problems, I am becoming a more well-rounded engineer&lt;/strong&gt;, and I can feel my confidence raising by a considerable amount in these areas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-confident-without-faking-it"&gt;
  &lt;/a&gt;
  Be Confident without Faking It
&lt;/h2&gt;

&lt;p&gt;So this section depends on what level you were at your previous company vs what you are joining as, but I feel like there's something for people of any level.&lt;/p&gt;

&lt;p&gt;For my situation, I was a newly minted Senior Engineer when leaving, and so I applied &amp;amp; received a Senior Engineer role at my new company. Do I deserve to be a senior right now? Well, my &lt;a href="https://medium.com/@dstarner/battling-imposter-syndrome-4650a73776cb"&gt;Imposter Syndrome&lt;/a&gt; says that I'm not good enough, but I've led projects, maintained critical systems, and built large complicated systems, so here I am as a senior. 🤷🏼‍♂️ I've solved enough problems and pulled out enough of my hairs to justify being a Senior - &lt;em&gt;I'm looking at you Jenkins/Groovy for most of those hairs pulled!!!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Being a senior brings with it a certain level of expectations and responsibility, which I was familiar with in my old job. The issue was that I was attempting to maintain that same level of expectations in a job where I barely knew what was going on. Most companies and teams expect onboarding new engineers to take at least a few months - based on the complexity of the system(s) - and my new team was no different. For some reason though, I was trying to shortcut this timeline and prove my skills as an engineer to those around me as quickly as possible, which led to some failed personal expectations and confidence issues that made me question my own abilities as an engineer.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ih4tzE3H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1445401963399634948/ZNHMcrPp_normal.jpg" alt="Dan Starner profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dan Starner
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @dan_starner
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I had a pretty nice blog post mostly together, but then _Imposter Syndrome_ hit, and I’m going to pretend like none of it was ever written because it doesn’t feel good anymore ¯\_(ツ)_/¯
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:28 PM - 01 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1455300847328534531" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1455300847328534531" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1455300847328534531" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;&lt;em&gt;Note: This isn't the blog post in question, but maybe I'll still post that other one implied in the Tweet&lt;/em&gt; 🤔&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-stress-about-proving-yourself"&gt;
  &lt;/a&gt;
  Don't Stress About Proving Yourself
&lt;/h3&gt;

&lt;p&gt;If you are like me who puts a lot of pressure on themself to succeed, then switching jobs will probably lead to some stress &amp;amp; Imposter Syndrome from facing problems against an unfamiliar position. &lt;strong&gt;It's okay to struggle the first few months in a new position.&lt;/strong&gt; Like I mentioned, teams expect around 3-6 months to onboard engineers, so don't expect to start dropping big &lt;a href="https://www.atlassian.com/git/tutorials/making-a-pull-request"&gt;Pull Requests&lt;/a&gt; by the end of your second week.&lt;/p&gt;

&lt;p&gt;I wish I told myself this earlier though. I've been in this position for &lt;a href="https://www.timeanddate.com/date/durationresult.html?d1=13&amp;amp;m1=9&amp;amp;y1=2021ti=on&amp;amp;"&gt;less than 60 days&lt;/a&gt; and I've already almost burned myself out 😅 Why? Because &lt;strong&gt;I set an incredibly high bar for myself where I tried to match the work output that I had at my old position&lt;/strong&gt;. The issue there is that I don't have the 3 years of institutional knowledge at my new job that I gained at my old job. During the beginning of my onboarding, I was constantly telling myself &amp;amp; my manager that I &lt;em&gt;needed&lt;/em&gt; to get some big contributions out as soon as possible to prove I was worth hiring.&lt;/p&gt;

&lt;p&gt;It's almost impossible to hit the ground running when starting a new job though. For example, its difficult when you have a system and multiple environments as complicated as Heroku's tech. &lt;em&gt;Note: This is nothing against Heroku, its just **impossible&lt;/em&gt;* for anyone to learn a large company's tech stack within 2 months*.&lt;/p&gt;

&lt;p&gt;As time progresses, I will get more comfortable with the systems and my productivity will rise. It's going to be bad for my mental health and productivity to assume that I will be able to solve all of my new problems with the same ease that I did at my old job. My manager &amp;amp; team are not putting that level of pressure on me, so why am I putting it on myself? This is still something that I struggle with occassionally, but being away of the problem is the first step to solving it, and I just need to take a deep breath and let myself relax a bit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/yvLgbrii0xnLpG1TT2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/yvLgbrii0xnLpG1TT2/giphy.gif" alt="Relax a bit" width="439" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pro-new-colleagues"&gt;
  &lt;/a&gt;
  Pro: New Colleagues
&lt;/h2&gt;

&lt;p&gt;Switching has allowed me to get a brand new group of work peers! I worked with some really great engineers at my old job, and my new position is no different. Having the opportunity to work, learn, and grow with some of the best engineers in the world is something that I do not take for granted. While I'm not surprised by the fact that I am growing relationships to my new coworkers, I am surprised at how quickly it's happening. I already feel like I have the support of my managers, architects, and colleagues, and I am gaining their trust more and more as time goes on.&lt;/p&gt;

&lt;p&gt;I really want to keep in touch with many of my old peers, and I'm sure I will to some extent, but I'm excited for the challenges that I'll be able to overcome with my new team. I just need to meet all of them first, which is okay, because I've been trying really hard to reach out and schedule 1:1s with everyone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initiate-11s-with-everyone-around-you"&gt;
  &lt;/a&gt;
  Initiate 1:1s with Everyone Around You
&lt;/h3&gt;

&lt;p&gt;An easy way that I started to build relationships with my team was by reaching out and setting up &lt;a href="https://www.small-improvements.com/resources/1-on-1-meetings/"&gt;1:1 introduction meetings&lt;/a&gt; with many of the people I work with day-to-day. This included those on my immediate team, sister teams, and my management chain.&lt;/p&gt;

&lt;p&gt;I tried to schedule meetings with the following approach, and I think it worked/is working pretty well!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;First 2 weeks&lt;/strong&gt;: Meet with my manager and immediate teammates&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;First 4 weeks&lt;/strong&gt;: Meet with some members you are interacting with that are on sister teams&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;First 6 weeks&lt;/strong&gt;: Meet with any senior/principal engineers in your work tree and architects if those exist at your company&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Heroku also uses &lt;a href="https://www.donut.com/"&gt;Donut&lt;/a&gt; to connect different people in the organization, and I've been trying to actually schedule meetings with the other individuals the app pairs me with. It's made it somewhat easier to introduce myself across the organization, and to meet people in a way that is normally difficult for a remote-only workforce.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-write-down-notes-for-everything"&gt;
  &lt;/a&gt;
  Bonus: Write Down Notes for EVERYTHING
&lt;/h2&gt;

&lt;p&gt;So I thought of this extra note about my onboarding experience, because I'm usually the one writing documentation or explaining a technical solution to others, and it's been a fun experience to turn the table on that notion as I get to learn everything my team interacts with.&lt;/p&gt;

&lt;p&gt;Sometimes i feel like I am asking too many questions, but I recognize that is just a part of the onboarding process, and I appreciate my colleagues' willingness to always help me get the answers I need to understand the systems a little bit better. To keep this process more enjoyable for them though, it's important that I note &amp;amp; remember as much of the information they give me as possible, so that I don't need to ask again. This note-taking process also helps, because it provides the opportunity to convert these notes into real documentation that can be used by others who find themselves in my same position...&lt;em&gt;then maybe they'll be asking me questions&lt;/em&gt;. 👀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3oz8xTUmZABI3PGwDe/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3oz8xTUmZABI3PGwDe/giphy.gif" alt="Writing notes" width="500" height="365"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As an extension, I'm glad that I found &lt;a href="https://obsidian.md/"&gt;Obsidian&lt;/a&gt; right as I was starting my new position, because my gosh I would be lost without a good note-taking app. Everything from onboarding requirements, to technical notes, to people's names/positions...you name it, and I have it in some notes from my onboarding. This has helped me stay on top of things while I start to climb the mountain of knowledge that my team works with, and I find that writing stuff down really helps me remember important details.&lt;/p&gt;




&lt;p&gt;I am excited to continuing growing in my new position, and I will probably have more posts to write about in the future regarding the cool work I get to do, but for now, I'm excited to just learn. The amount of information I'm getting to learn in my new position is truly incredible; it's like trying to drink from a fire hydrant sometimes. We'll see what I do and where the future takes me, but this transition period has been quite an experience, and I hope that some of my thoughts help you, wherever you may be in your own journey.&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Meeting our standards</title>
      <author>Hendrik</author>
      <pubDate>Thu, 04 Nov 2021 21:10:01 +0000</pubDate>
      <link>https://dev.to/hendr_ik/meeting-our-standards-pei</link>
      <guid>https://dev.to/hendr_ik/meeting-our-standards-pei</guid>
      <description>&lt;p&gt;We are building &lt;a href="https://www.offen.dev/?utm_source=forum&amp;amp;utm_campaign=0200"&gt;Offen,&lt;/a&gt; a fair and lightweight web analytics software that treats operators and users as equal parties. Here is what we have achieved in the past weeks. &lt;/p&gt;

&lt;p&gt;Statistics about the location of visitors had been on our to-do list for a fairly long time. Yet implementing it in a way that met our privacy standards proved to be a veritable challenge. After &lt;a href="https://github.com/offen/offen/issues/423"&gt;careful consideration&lt;/a&gt; and intense research, we finally decided on an approach based on time zones.&lt;/p&gt;

&lt;p&gt;To derive the geographical location, this method does not rely on an IP database, but asks the browser for the selected time zone and tries to assign it to a country. This fully protects the privacy of users and provides sufficiently accurate results for analysis as well.&lt;/p&gt;

&lt;p&gt;Furthermore, we have addressed the issue of user awareness in Offen. Since the only direct link to the User Auditorium is in the consent banner, it was important for us to provide additional features to increase the attention of users. Widgets now give operators the opportunity to easily integrate a reference to the User Auditorium. Preferably with a link on every page.&lt;/p&gt;

&lt;p&gt;While there are still a few improvements on the agenda, with the implementation of location statistics we are a major step closer to v1.0. Be sure to stay tuned and follow us here or on &lt;a href="https://twitter.com/hioffen"&gt;Twitter&lt;/a&gt; and &lt;a href="https://fosstodon.org/@offen"&gt;Mastodon&lt;/a&gt; for the next release updates.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>privacy</category>
    </item>
    <item>
      <title>Introducing Codecademy Docs</title>
      <author>Sonny Li</author>
      <pubDate>Thu, 04 Nov 2021 21:07:00 +0000</pubDate>
      <link>https://dev.to/codecademy/introducing-codecademy-docs-510b</link>
      <guid>https://dev.to/codecademy/introducing-codecademy-docs-510b</guid>
      <description>&lt;p&gt;We’re thrilled to announce that we just launched a brand new site called &lt;a href="https://www.codecademy.com/resources/docs"&gt;Codecademy Docs&lt;/a&gt; — an open-contribution coding documentation and glossary for popular languages and frameworks. 📕&lt;/p&gt;

&lt;p&gt;Every developer relies heavily on coding documentation to get their work done. At Codecademy, we wanted to build a beginner-friendly coding reference, where you can find the answer you're looking for all within three mouse-clicks. Think Wikipedia, but for coding!&lt;/p&gt;

&lt;p&gt;Poke around and let us know what you think. If you catch any bugs or typos, please feel free to make a Pull Request to the GitHub repo. You can find the &lt;a href="https://github.com/Codecademy/docs/blob/main/.github/CONTRIBUTING.md"&gt;contribution guide here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And lastly, we just launched on Product Hunt today. So please give it an upvote if you can:&lt;/p&gt;

&lt;p&gt;⬆️ &lt;strong&gt;&lt;a href="https://www.producthunt.com/posts/codecademy-docs"&gt;https://www.producthunt.com/posts/codecademy-docs&lt;/a&gt;&lt;/strong&gt; ⬆️&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>news</category>
      <category>codecademy</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How To Deploy Cost Effective Smart Contracts</title>
      <author>Waylon Jepsen</author>
      <pubDate>Thu, 04 Nov 2021 20:41:20 +0000</pubDate>
      <link>https://dev.to/0xjepsen/how-to-deploy-cost-effective-smart-contracts-3a3l</link>
      <guid>https://dev.to/0xjepsen/how-to-deploy-cost-effective-smart-contracts-3a3l</guid>
      <description>&lt;p&gt;When people think about smart contracts, you tend to think about Ehereum However. Many ecosystems are building or have built support for the distributed computing that smart contracts allow for. Hedera recently announced their support for Smart Contracts 2.0 that will allow the contracts to run with all the native costs, security, and speeds of the Hedera network, which are pretty impressive.&lt;/p&gt;

&lt;p&gt;This post will show you how to deploy a smart contract to the Hedera network with the JavaScrip SDK. We will first compile our smart contract into byte code. Then we will store the byte-code to the Hedera File Service, deploy our contact, and modify the state variable of our contract. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compiling-your-smart-contract"&gt;
  &lt;/a&gt;
  Compiling Your Smart Contract
&lt;/h2&gt;

&lt;p&gt;You will first need to compile your smart contract into byte-code. There are a few different ways you can do this, recommend using &lt;a href=""&gt;remix&lt;/a&gt;. Remix will output a file usually called &lt;code&gt;simple_storage.json&lt;/code&gt;. If you copy this file into your IDE, you will be able to initialize it in JavaScript like this: &lt;code&gt;let json = require('./compiledSmartContract.json')&lt;/code&gt;.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storing-the-bytecode-on-the-hedera-file-service"&gt;
  &lt;/a&gt;
  Storing the byte-code on the Hedera File Service
&lt;/h2&gt;

&lt;p&gt;We need the fileID of its byte code stored on the Hedera file service to deploy our contract. We can get this by using the FileCreateTransaction API from the hedera JS SDK and passing it the byte-code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compiled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bytecode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// Store Contact in file service. Different from eth. Transaction size is smaller on hedera for security &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mycontract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FileCreateTransaction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setContents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compiled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setKeys&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;PrivateKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myPrivateKey&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
        &lt;span class="c1"&gt;// The default max fee of 1 HBAR is not enough to make a file ( starts around 1.1 HBAR )&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMaxTransactionFee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Hbar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 2 HBAR&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TransactionReceipt&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mycontract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getReceipt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FileId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TransactionReceipt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file ID: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fileid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Afterward, we can get the FileID from the FileCreateTransaction receipt, as shown in the example above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying"&gt;
  &lt;/a&gt;
  Deploying
&lt;/h2&gt;

&lt;p&gt;Once you have a fileId of the byte-code from your contract, you can pass the fileId from the previous step to the ContractCreateTransaction() API call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// Deploy Contract&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deploy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ContractCreateTransaction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setGas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setBytecodeFileId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;receipt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getReceipt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Get the new contract &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newContractId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;receipt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contractId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The contract ID is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;newContractId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After deploying the contract you can await the receipt to get the contract ID.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#calling-the-smart-contract-functions"&gt;
  &lt;/a&gt;
  Calling the Smart Contract Functions
&lt;/h2&gt;

&lt;p&gt;When calling the smart contract functions, you have to know whether or not the function you want to call is modifying the state variables of the contract. If you are changing state variables, you will use the &lt;code&gt;ContractExecuteTransaction()&lt;/code&gt; endpoint. Otherwise, you will use the &lt;code&gt;ContractCallQuery()&lt;/code&gt; endpoint. You can think of this a doing reads vs doing writes. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modifying-state"&gt;
  &lt;/a&gt;
  Modifying State
&lt;/h3&gt;

&lt;p&gt;For example, I am calling the set function in the contract outlined in the solidity &lt;a href="https://docs.soliditylang.org/en/v0.8.8/introduction-to-smart-contracts.html"&gt;documentation&lt;/a&gt;, I am modifying the &lt;code&gt;storedData&lt;/code&gt; state variable. &lt;/p&gt;

&lt;p&gt;Using the Hedera API to call this function would look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ContractExecuteTransaction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setContractId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newContractId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setGas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;set&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ContractFunctionParameters&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;addUint256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMaxTransactionFee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Hbar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contractCallResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;setter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;testing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;contractCallResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Status Code:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modifying-state"&gt;
  &lt;/a&gt;
  !Modifying State
&lt;/h3&gt;

&lt;p&gt;The call to the corresponding getter would look something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ContractCallQuery&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// &lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setContractId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newContractId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setGas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMaxQueryPayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Hbar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// defaults to 1, if requires more than one need change&lt;/span&gt;
    &lt;span class="c1"&gt;// set should be around at least 3-5k gas&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contractGetter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;contractGetter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUint256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contract message: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>blockchain</category>
      <category>javascript</category>
      <category>solidity</category>
    </item>
    <item>
      <title>System design fundamentals: What is the CAP theorem?</title>
      <author>Erin Schaffer</author>
      <pubDate>Thu, 04 Nov 2021 20:27:48 +0000</pubDate>
      <link>https://dev.to/educative/system-design-fundamentals-what-is-the-cap-theorem-2458</link>
      <guid>https://dev.to/educative/system-design-fundamentals-what-is-the-cap-theorem-2458</guid>
      <description>&lt;p&gt;As you progress through your career as a developer, you’ll be required to think more and more about software architecture and system design. It’s important to be able to design efficient systems and make tradeoffs at scale. System design is a vast field that incorporates many important concepts. A fundamental concept within system design is the CAP theorem. Understanding the CAP theorem is key to understanding how to design strong distributed systems. Today, we’ll dive deeper into the CAP theorem, explaining its meaning, its components, and more.&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’ll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#whatiscaptheorem"&gt;What is the CAP theorem?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#captheoremexplained"&gt;Consistency, availability, and partition tolerance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#captheoremnosql"&gt;CAP theorem NoSQL databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#captheoremmicroservices"&gt;CAP theorem and microservices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nextsteps"&gt;Wrapping up and next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-cap-theorem"&gt;
  &lt;/a&gt;
  What is the CAP theorem?
&lt;/h2&gt;

&lt;p&gt;The CAP theorem, or Brewer’s theorem, is a fundamental theorem within the field of system design. It was first presented in 2000 by Eric Brewer, a computer science professor at U.C. Berkeley, during a talk on principles of distributed computing. In 2002, MIT professors Nancy Lynch and Seth Gilbert published a proof of Brewer’s Conjecture. The CAP theorem states that a distributed system can only provide two of three properties simultaneously: &lt;strong&gt;consistency&lt;/strong&gt;, &lt;strong&gt;availability&lt;/strong&gt;, and &lt;strong&gt;partition tolerance&lt;/strong&gt;. The theorem formalizes the tradeoff between consistency and availability when there’s a partition.&lt;/p&gt;

&lt;p&gt;A distributed system is a collection of computers that work together to form a single computer for end users. All of the distributed machines have one shared state and operate concurrently. With distributed systems, users must be able to communicate with any of the distributed machines without knowing it’s only one machine. The distributed system network stores its data on more than just a single node, using multiple physical or virtual machines at the same time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cap-theorem-proof"&gt;
  &lt;/a&gt;
  CAP theorem proof
&lt;/h3&gt;

&lt;p&gt;Let’s look at a simple proof of the CAP theorem. Imagine a distributed system consisting of two nodes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xpZFT08k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpyt1cq601oqta2cyogu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xpZFT08k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpyt1cq601oqta2cyogu.png" alt="Image description" width="880" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The distributed system acts as a plain register with the value of variable &lt;em&gt;X&lt;/em&gt;. There’s a network failure that results in a network partition between the two nodes in the system. An end-user performs a write request, and then a read request. Let’s examine a case where a different node of the system processes each request. In this case, our system has two options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It can fail at one of the requests, breaking the system’s &lt;em&gt;availability&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;It can execute both requests, returning a stale value from the read request and breaking the system’s &lt;em&gt;consistency&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The system can’t process both requests successfully while also ensuring that the read returns the latest value written by the write. This is because the results of the write operation can’t be propagated from node A to node B because of the network partition. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consistency-availability-and-partition-tolerance-explained"&gt;
  &lt;/a&gt;
  Consistency, availability, and partition tolerance explained
&lt;/h2&gt;

&lt;p&gt;Now that we have a basic understanding of the CAP theorem, let’s break down the acronym and discuss the meanings of consistency, availability, and partition tolerance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consistency"&gt;
  &lt;/a&gt;
  Consistency
&lt;/h3&gt;

&lt;p&gt;In a consistent system, all &lt;strong&gt;nodes see the same data simultaneously&lt;/strong&gt;. If we perform a read operation on a consistent system, it should return the value of the most recent write operation. The read should cause all nodes to return the same data. All users see the same data at the same time, regardless of the node they connect to. When data is written to a single node, it is then replicated across the other nodes in the system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#availability"&gt;
  &lt;/a&gt;
  Availability
&lt;/h3&gt;

&lt;p&gt;When availability is present in a distributed system, it means that the &lt;strong&gt;system remains operational all of the time&lt;/strong&gt;. Every request will get a response regardless of the individual state of the nodes. This means that the system will operate even if there are multiple nodes down. Unlike a consistent system, there’s &lt;strong&gt;no guarantee that the response will be the most recent write operation&lt;/strong&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#partition-tolerance"&gt;
  &lt;/a&gt;
  Partition tolerance
&lt;/h3&gt;

&lt;p&gt;When a distributed system encounters a partition, it means that there’s a &lt;strong&gt;break in communication between nodes&lt;/strong&gt;. If a system is partition-tolerant, the system does not fail, regardless of whether messages are dropped or delayed between nodes within the system. To have partition tolerance, the system must replicate records across combinations of nodes and networks.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cap-theorem-nosql-databases"&gt;
  &lt;/a&gt;
  CAP theorem NoSQL databases
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JlMzGG8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2q9k7mlybj968bzoow55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JlMzGG8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2q9k7mlybj968bzoow55.png" alt="Image description" width="638" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NoSQL databases are great for distributed networks. They allow for &lt;strong&gt;horizontal scaling&lt;/strong&gt;, and they can quickly scale across multiple nodes. When deciding which NoSQL database to use, it’s important to keep the CAP theorem in mind. NoSQL databases can be classified based on the two CAP features they support:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ca-databases"&gt;
  &lt;/a&gt;
  CA databases
&lt;/h3&gt;

&lt;p&gt;CA databases enable consistency and availability across all nodes. Unfortunately, CA databases &lt;strong&gt;can’t deliver fault tolerance&lt;/strong&gt;. In any distributed system, partitions are bound to happen, which means this type of database isn’t a very practical choice. That being said, you still can find a CA database if you need one. Some &lt;strong&gt;relational databases&lt;/strong&gt;, such as PostgreSQL, allow for consistency and availability. You can deploy them to nodes using replication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cp-databases"&gt;
  &lt;/a&gt;
  CP databases
&lt;/h3&gt;

&lt;p&gt;CP databases enable consistency and partition tolerance, but not availability. When a partition occurs, the system has to &lt;strong&gt;turn off inconsistent nodes until the partition can be fixed&lt;/strong&gt;. MongoDB is an example of a CP database. It’s a NoSQL database management system (DBMS) that uses documents for data storage. It’s considered schema-less, which means that it doesn’t require a defined database schema. It’s commonly used in big data and applications running in different locations. The CP system is structured so that there’s only one primary node that receives all of the write requests in a given replica set. Secondary nodes replicate the data in the primary nodes, so if the primary node fails, a secondary node can stand-in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ap-databases"&gt;
  &lt;/a&gt;
  AP databases
&lt;/h3&gt;

&lt;p&gt;AP databases enable availability and partition tolerance, but not consistency. In the event of a partition, all nodes are available, but they’re not all updated. For example, if a user tries to access data from a bad node, they &lt;strong&gt;won’t receive the most up-to-date version of the data&lt;/strong&gt;. When the partition is eventually resolved, most AP databases will sync the nodes to ensure consistency across them. Apache Cassandra is an example of an AP database. It’s a NoSQL database with no primary node, meaning that all of the nodes remain available. Cassandra allows for eventual consistency because users can resync their data right after a partition is resolved.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cap-theorem-and-microservices"&gt;
  &lt;/a&gt;
  CAP theorem and microservices
&lt;/h2&gt;

&lt;p&gt;Microservices are defined as loosely coupled services that can be independently developed, deployed, and maintained. They include their own stack, database, and database model, and communicate with each other through a network. Microservices have become &lt;strong&gt;especially popular in hybrid cloud and multi-cloud environments&lt;/strong&gt;, and they are also widely used in on-premises data centers. If you want to create a microservices application, you can use the CAP theorem to help you determine a database that will best fit your needs.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up-and-next-steps"&gt;
  &lt;/a&gt;
  Wrapping up and next steps
&lt;/h2&gt;

&lt;p&gt;Congrats on taking your first step with the CAP theorem and distributed systems! Distributed systems allow for lower latency, scalability, increased interconnectivity, and more. The CAP theorem is very important within distributed systems and system design as a whole. While we covered a lot today, there’s still so much more to learn about distributed systems. Some recommended topics to learn next include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Distributed data stores&lt;/li&gt;
&lt;li&gt;Distributed system algorithms&lt;/li&gt;
&lt;li&gt;Atomicity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started learning these concepts and more, check out Educative’s course &lt;a href="https://www.educative.io/courses/distributed-systems-practitioners"&gt;&lt;strong&gt;Distributed Systems for Practitioners&lt;/strong&gt;&lt;/a&gt;. In this hands-on course, you’ll explore the design of real-world distributed systems, how to efficiently design large-scale systems, and what concepts you need to know to get the most out of your distributed system.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-learning-about-system-design"&gt;
  &lt;/a&gt;
  Continue learning about system design
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/anatomy-machine-learning-system-design-interview"&gt;Anatomy of a machine learning system design interview question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/top-10-system-design-interview-questions"&gt;Top 10 system design interview questions for software engineers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/distributed-system-design-patterns"&gt;Top 5 distributed system design patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>C#10 e ASP.NET 6, oque esperar dessa dupla?</title>
      <author>Lucas Paes</author>
      <pubDate>Thu, 04 Nov 2021 20:15:43 +0000</pubDate>
      <link>https://dev.to/vaivoa/c10-e-aspnet-6-oque-esperar-dessa-dupla-14k6</link>
      <guid>https://dev.to/vaivoa/c10-e-aspnet-6-oque-esperar-dessa-dupla-14k6</guid>
      <description>&lt;p&gt;A Microsoft já anunciou que o lançamento do .Net6 está previsto para novembro de 2021, ou seja, para o próximo mês (ebaaa! 😊), pretendendo lançar uma nova versão todo ano nesta mesma data, como pode ser observado no cronograma abaixo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gUIEnlee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dc4d2eze7a85zt901ly8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gUIEnlee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dc4d2eze7a85zt901ly8.png" alt="Cronograma de lançamento .Net" width="880" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por conta dessa constante inovação da plataforma a empresa tende a realizar "poucas mudanças" e continuar com o suporte LTS de três anos, possibilitando migrações continuas de seus usuários para as novas atualizações de maneira mais fácil.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mais informações: &lt;a href="https://dotnet.microsoft.com/platform/support/policy/dotnet-core"&gt;Microsoft: Política de suporte .NET&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#gt-ok-mas-cad%C3%AA-as-novidades"&gt;
  &lt;/a&gt;
  &amp;gt; Ok, mas cadê as novidades? 🤔
&lt;/h3&gt;

&lt;p&gt;Alguns dos principais pontos que chegaram com a nova versão estão elencados aqui, caso queria se aprofundar no assunto recomendo visualizar as postagens do &lt;code&gt;Daniel Roth&lt;/code&gt; dentro do portal da Microsoft.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Documentação e Posts sobre atualizações: &lt;a href="https://devblogs.microsoft.com/aspnet/author/danroth27/"&gt;Daniel Roth&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o7TKUM3IgJBX2as9O/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o7TKUM3IgJBX2as9O/giphy.gif" width="267" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Minimal Api/hosting&lt;/strong&gt;: Está é a grande novidade que vai facilitar em muito a construção de pequenos Endpoints e melhorar a performance em geral do &lt;em&gt;warm-up&lt;/em&gt; (tempo de "aquecimento") para as Apis, esse ponto foi levado em consideração pela Microsoft pelo fato do BOOM do Serverless + functions que necessitam de um desempenho de inicialização maior. A Startup.cs "Morreu" 😥 e agora o Program.cs "faz tudo", sendo possível desenvolver apenas com ele, sim, com cara de Node.Js. Segue exemplo dos novos endpoints:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Github com exemplo de uso: &lt;a href="https://github.com/DamianEdwards/MinimalApiPlayground/blob/main/src/Todo.Dapper/Program.cs"&gt;DamianEdwards/MinimalApiPlayground&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
using System.ComponentModel.DataAnnotations;
using Microsoft.Data.Sqlite;
using Dapper;

var builder = WebApplication.CreateBuilder(args);

var connectionString = builder.Configuration.GetConnectionString("TodoDb") ?? "Data Source=todos.db";
builder.Services.AddScoped(_ =&amp;gt; new SqliteConnection(connectionString));
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

app.MapPut("/todos/{id}/mark-incomplete", async (int id, SqliteConnection db) =&amp;gt;
    await db.ExecuteAsync("UPDATE Todos SET IsComplete = false WHERE Id = @Id", new { id }) == 1
        ? Results.NoContent()
        : Results.NotFound())
    .WithName("MarkIncomplete")
    .Produces(StatusCodes.Status204NoContent)
    .Produces(StatusCodes.Status404NotFound);

app.MapDelete("/todos/{id}", async (int id, SqliteConnection db) =&amp;gt;
    await db.ExecuteAsync("DELETE FROM Todos WHERE Id = @id", new { id }) == 1
        ? Results.NoContent()
        : Results.NotFound())
    .WithName("DeleteTodo")
    .Produces(StatusCodes.Status204NoContent)
    .Produces(StatusCodes.Status404NotFound);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;MiniValidator / Metadata&lt;/strong&gt;: Com a chegada do conceito de Minimal Api o .Net6 também traz uma validação mais enxuta e performática, a biblioteca MiniValidator é uma versão minimalista dos DataAnnotations que adiciona suporte para as chamadas de validação de linha única e recursão com detecção de ciclo. E para fechar a concepção de Minimal foi desenvolvida diversas Metadatas para facilitar a documentação e estruturação dos novos recursos, como demostrado no exemplo a seguir.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.MapPost("/todos", async (Todo todo, SqliteConnection db) =&amp;gt;
    {
            //Realiza a validação da DTO
        if (!MiniValidator.TryValidate(todo, out var errors))
            return Results.ValidationProblem(errors); 

        var newTodo = await db.QuerySingleAsync&amp;lt;Todo&amp;gt;(
            "INSERT INTO Todos(Title, IsComplete) Values(@Title, @IsComplete) RETURNING * ", todo);

        return Results.Created($"/todos/{newTodo.Id}", newTodo);
    })
    .WithName("CreateTodo") //Define nome para o endpoint
    .ProducesValidationProblem()
    .Produces&amp;lt;Todo&amp;gt;(StatusCodes.Status201Created) // Documenta o retorno;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Suporte a HTTP/3&lt;/strong&gt;: A Microsoft já introduziu nativamente o suporte a nova versão do nosso conhecido e querido protocolo de transferência, que por sua vez promete manter os padrões atuais e atribuir mais desempenho por meio do uso QUIC, visando tirar o bloqueio das transações em paralelo quando um pacote era "perdido".&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Mais informações: &lt;a href="https://devblogs.microsoft.com/dotnet/http-3-support-in-dotnet-6/"&gt;HTTP/3 Support in .NET 6&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Hot Reload&lt;/strong&gt;: Este é um recurso muito bacana para nós desenvolvedores pois permite atualizar o código em tempo real sem perder o estado da aplicação, auxiliando em muito as validações UI e funcionando também com o &lt;code&gt;dotnet watch run&lt;/code&gt; no VSCode, já para o Visual Studio basta clicar sobre o ícone de "Fogo 🔥" na parte superior depois de realizar alguma mudança.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Mais informações: &lt;a href="https://devblogs.microsoft.com/dotnet/introducing-net-hot-reload/"&gt;Introducing the .NET Hot Reload experience for editing code at runtime&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Blazor / .NET MAUI / SPA&lt;/strong&gt;: A nova sensação do front que virá com o .Net6 é o MAUI que tem o foco em criar Apps com visuais mais modernos e compartilhando mais código entre as plataformas, ao longo do tempo ele será compatível com macOS e Windows, mas no momento o suporte é para Android e iOS. Também é importante mencionar a chegada da biblioteca ´Xamarin.Essentials´ que possibilita acessar recursos nativos dos dispositivos, como sensores, armazenamentos e afins. Já para o SPA agora é possível separar o front-end do back-end em dois projetos e foi acrescentado o ecossistema de estruturas JavaScript SPA no Visual Studio, com teste de unidade, gerenciamento de GUI npm, modelos baseados em CLI e mais novidades a serem anunciadas.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Mais informações: &lt;a href="https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-rc-2/"&gt;ASP.NET Core updates in .NET 6 Release&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Using Global&lt;/strong&gt;: Sim, ISSO MESMO!!🥳 Agora é possível definir usings globalmente, basta acrescentar a palavra global antes de declarar o using, muito útil quando usado em conjunto com arquivos de configuração geral da aplicação, permitindo que todos os outros arquivos possuam acesso aos usings.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;global using System;
global using System.Collections.Generic;
global using System.IO;
global using System.Linq;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://i.giphy.com/media/13hxeOYjoTWtK8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/13hxeOYjoTWtK8/giphy.gif" width="350" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;File-scoped namespace declaration&lt;/strong&gt;: Agora é possível declarar os namespaces de sua aplicação sem abrir e fechar as chaves, basta colocar um ; (ponto e virgula) no final, como no exemplo abaixo.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;namespace MyNamespace;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Extended property patterns&lt;/strong&gt;: O novo C#10 já está apto para trabalhar com  referência a propriedades ou campos aninhados em uma propriedade, como pode ser visto abaixo.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ Prop1: { Prop2: pattern } } // Antiga maneira
{ Prop1.Prop2: pattern } // Nova maneira
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;LINQ / CHUCK / MetodosBy&lt;/strong&gt;: Chegou também melhorias para os métodos OrDefault do Linq e afins, agora sendo possível definir no próprio método um valor default, um ponto muito interessante foi a vinda do IEnumerable Chunk para facilitar a paginação e manipulação de dados, em conjunto com diversos métodos *By para utilização de listas.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var list = Enumerable.Range(1, 100);
foreach(var chunk in list.Chunk(10))
  foreach(var item in chunk) 
    Console.WriteLine(item);

var foundValue = hayStack.FirstOrDefault(x =&amp;gt; x == needle, -1);

Console.Write(people.MaxBy(x =&amp;gt; x.Age));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Mais informações: &lt;a href="https://dotnetcoretutorials.com/2021/09/23/net-6-c-10-top-new-features-recap/"&gt;.NET 6 / C# 10 Top New Features Recap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#gt-legal-mas-existe-algo-para-chegar-ainda"&gt;
  &lt;/a&gt;
  &amp;gt; Legal, mas existe algo para chegar ainda?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0HlRnAWXxn0MhKLK/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0HlRnAWXxn0MhKLK/giphy.gif" width="400" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A Microsoft sempre tem projetos "escondidos" que estão sendo trabalhados por baixo dos panos para criar grandes mudanças na sua plataforma, aqui citarei dois desses projetos que estão sendo desenvolvidos para as próximas versões do .Net, o Houdini e o Bedrock.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Projeto Houdini&lt;/strong&gt;: A Microsoft quer modificar a sua Stack para deixa-la mais performática, e esse projeto vem com tudo para cima do MVC, com foco em ACABAR com ele, e tirar todo o peso que seus componentes geram para as Apis e afins.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Mais informações: &lt;a href="https://github.com/davidfowl/BedrockFramework"&gt;BedrockFramework&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Projeto BedRock&lt;/strong&gt;: Visando novamente a alta performance da plataforma, esse projeto tem o intuito de abstrair toda a camada de comunicação cliente-server, de forma que o .Net vai verificar as opções disponíveis e escolher a melhor forma de realizar essa troca de dados dependendo do ambiente e da situação. Esse projeto possui três pilares (transporte, middleware e protocolo) e será usado pelo IConnectionFactory e IConnectionListener.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Mais informações: &lt;a href="https://github.com/davidfowl/BedrockFramework"&gt;BedrockFramework&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#gt-por-enquanto-%C3%A9-isso-obrigado"&gt;
  &lt;/a&gt;
  &amp;gt; Por enquanto é isso, obrigado! ✌️
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/AeWoyE3ZT90YM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/AeWoyE3ZT90YM/giphy.gif" width="480" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Qualquer dúvida pode me chamar para um bate-papo, e agradeço a sua atenção até aqui, espero te ver em outras publicações.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__729246"&gt;
  
    .ltag__user__id__729246 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/lucastmp" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ln2l9t9n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fKel4vCK--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/729246/7aad6faa-411a-4ad6-91f2-098e361888e6.jpeg" alt="lucastmp image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/lucastmp"&gt;Lucas Paes&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/lucastmp"&gt;Brasileiro, 22 anos.

Amo tecnologia e estou sempre explorando novos conhecimentos.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--80xSK4Xm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cz1xbk1xbzlg8kyfy6ri.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--80xSK4Xm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cz1xbk1xbzlg8kyfy6ri.png" alt="Linha Horizontal" width="880" height="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h1&gt;

&lt;p&gt;A VaiVoa incentiva seus Desenvolvedores em seu processo de crescimento e aceleração técnica. Os artigos publicados não traduzem a opinião da VaiVoa. A publicação obedece ao propósito de estimular o debate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QJQcNDAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wmziqv74ghhgyi9p0om.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QJQcNDAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wmziqv74ghhgyi9p0om.png" alt="logo vaivoa" width="548" height="122"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>programming</category>
      <category>vaivoa</category>
      <category>net6</category>
    </item>
    <item>
      <title>Root to Linux: BIOS</title>
      <author>Christina Gorton</author>
      <pubDate>Thu, 04 Nov 2021 20:11:57 +0000</pubDate>
      <link>https://dev.to/coffeecraftcode/root-to-linux-bios-16jm</link>
      <guid>https://dev.to/coffeecraftcode/root-to-linux-bios-16jm</guid>
      <description>&lt;p&gt;At Forem a few coworkers and I have formed a Linux Club🤓. &lt;br&gt;
&lt;a href="https://twitter.com/jdoss"&gt;Joe Doss&lt;/a&gt; is leading us on this adventure into Linux.&lt;br&gt;&lt;br&gt;
The adventure starts by working through the &lt;a href="https://wiki.gentoo.org/wiki/Handbook:AMD64"&gt;Gentoo Handbook&lt;/a&gt; and installing Gentoo(a distribution of Linux) on Lenovo ThinkPads. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JzI9ILnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtbxxs54rzy84imedtx0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JzI9ILnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtbxxs54rzy84imedtx0.jpg" alt="Lenovo ThinkPad specs" width="880" height="660"&gt;&lt;/a&gt;&lt;br&gt;
&lt;small&gt; Our ThinkPad specs &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;During our meetings, I have been &lt;a href="https://github.com/cmgorton/linuxclub_notes"&gt;taking notes&lt;/a&gt;. These notes are useful for people in our club. &lt;br&gt;
I am writing this series to take what we have learned and share with a broader audience outside of the club. &lt;/p&gt;

&lt;p&gt;One of the first things we did when we got our laptops was set up our BIOS. &lt;/p&gt;

&lt;p&gt;This post will give a brief description of what BIOS is, how to navigate to it, and some of the common settings you might change. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-bios"&gt;
  &lt;/a&gt;
  What is BIOS?
&lt;/h2&gt;

&lt;p&gt;BIOS or Basic Input/Output System is a small piece of code that lives in a “read only” chip on your system board(motherboard). &lt;br&gt;
It controls low level/basic functions of a computer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  read-only means that a file can be opened or read but can't be deleted or renamed. &lt;/p&gt;

&lt;p&gt;The BIOS will identify, test, and configure your computer's hardware. It will also connect it to your OS. &lt;/p&gt;

&lt;p&gt;This is called the BOOT process. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#navigating-to-the-bios"&gt;
  &lt;/a&gt;
  Navigating to the BIOS
&lt;/h2&gt;

&lt;p&gt;The first software that runs on your computer is the BIOS. &lt;br&gt;
As you start your computer you may see a prompt that says &lt;code&gt;f2 = Setup&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This prompt will give you access to the BIOS setup utility. This is sometimes referred to as the Setup System. &lt;br&gt;
Other keys that can invoke BIOS depending on your computer are F1, F10, F12, Del, or Esc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-your-bios"&gt;
  &lt;/a&gt;
  Setting up your BIOS
&lt;/h2&gt;

&lt;p&gt;In general you should leave your BIOS settings as the default settings. &lt;/p&gt;

&lt;p&gt;When you set up your own Linux distribution you may need to change a few settings. You can also change settings to have more control over your hardware. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-settings-in-bios"&gt;
  &lt;/a&gt;
  Common Settings in BIOS
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;BOOT Priority Order&lt;/strong&gt;&lt;br&gt;
One common setting you can change is the BOOT Priority Order. &lt;/p&gt;

&lt;p&gt;This is a priority list that tells your computer which operating system to boot from. &lt;br&gt;
After the BIOS tests your hard drive it will check for a “bootable” drive. &lt;br&gt;
This is where tell your computer to use a Linux distribution to boot. &lt;/p&gt;

&lt;p&gt;The default BOOT Priority Order looks for your computer's OS. On our ThinkPads this was Windows 10. &lt;br&gt;
Our goal was to boot Gentoo instead of Windows 10. &lt;/p&gt;

&lt;p&gt;First, we downloaded Gentoo to a USB drive. Next, we changed the BOOT Priority Order to use our USB as the top priority. This meant our computer will look for our USB to boot up Gentoo instead of the ThinkPad's default OS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rjF--aQk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/198yhf7rayqgp4i1hbs6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rjF--aQk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/198yhf7rayqgp4i1hbs6.png" alt="BOOT Priority Order" width="792" height="597"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Secure Boot&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Secure Boot is technically a feature of UEFI and not legacy BIOS. &lt;br&gt;
Look at the image at the top of this post that shows our ThinkPad specs. You can see it mentions the computers UEFI BIOS version.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Secure Boot can help a computer resist attacks and infection from malware. You can find the setting for Secure Boot in the &lt;code&gt;Security&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;Typically, you want to keep this setting set to on. We disabled this setting because it prevents non-Microsoft OS's from working. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Date/Time&lt;/strong&gt;&lt;br&gt;
You can update your systems data and time in the &lt;code&gt;Main&lt;/code&gt; tab. We updated the date and time in our BIOS to reflect our timezones and correct day, month, and year. &lt;/p&gt;

&lt;p&gt;There are many other settings in BIOS that you can change. These are the common ones we updated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#save-and-exit-bios"&gt;
  &lt;/a&gt;
  Save and Exit BIOS
&lt;/h2&gt;

&lt;p&gt;To Exit out of the BIOS navigate to the Restart tab and choose &lt;code&gt;Exit Saving Changes&lt;/code&gt;.&lt;br&gt;
Or you can exit and save by pressing &lt;code&gt;F10&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-shift-to-uefi"&gt;
  &lt;/a&gt;
  A Shift to UEFI
&lt;/h2&gt;

&lt;p&gt;BIOS has a long history but there has been a shift away from using it. &lt;/p&gt;

&lt;p&gt;Companies like Intel are phasing out BIOS in favor of the Unified Extensible Firmware Interface(UEFI) I mentioned in the Secure Boot section. &lt;/p&gt;

&lt;p&gt;UEFI is a lightweight BIOS alternative and newer computers are shipped with it. It has several advantages over the traditional BIOS. This post won't cover everything about UEFI but some of the advantages of UEFI are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it can boot from drives of 2TB or greater. &lt;/li&gt;
&lt;li&gt;it has more access to &lt;a href="https://searchstorage.techtarget.com/definition/address-space"&gt;addressable space&lt;/a&gt;. The BIOS is limited to 1MB. &lt;/li&gt;
&lt;li&gt;it has a user-friendly interface. Unlike the BIOS, you can navigate it with a mouse. &lt;/li&gt;
&lt;li&gt;it ships with security features like Secure Boot.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>linux</category>
      <category>beginners</category>
      <category>devops</category>
    </item>
    <item>
      <title>hawk project</title>
      <author>Paulo Medeiros</author>
      <pubDate>Thu, 04 Nov 2021 20:01:03 +0000</pubDate>
      <link>https://dev.to/medpaf/hawk-project-30ig</link>
      <guid>https://dev.to/medpaf/hawk-project-30ig</guid>
      <description>&lt;p&gt;Hawk is a network and pentest utility that I developed so that I could perform different kinds of task using the same suite, instead of jumping from one tool to another.&lt;br&gt;
Currently, this script can perform a good variety of tasks such as ifconfig, ping, traceroute, port scans (including SYN, TCP, UDP, ACK, comprehensive scan, host discovery (scan for up devices on a local network), MAC address detection (get MAC address of a host IP on a local network), banner grabbing, DNS checks (with geolocation information), WHOIS, subdomain enumeration, vulnerability reconnaissance, packet sniffing, MAC spoofing, IP spoofing, SYN flooding, deauth attack and brute-force attack (beta).&lt;br&gt;
Other features are still being implemented. Future implementations may include WAF detection, DNS enumeration, traffic analysis, XSS vulnerability scanner, ARP cache poisoning, DNS cache poisoning, MAC flooding, ping of death, network disassociation attack (not deauth attack), OSINT, exploits, some automated tasks and others.&lt;br&gt;
If you want to become a contributor, make a pull request or issue.&lt;br&gt;
Waiting for your feedback. Kudos&lt;/p&gt;

&lt;p&gt;Link to the repository: &lt;a href="https://github.com/medpaf/hawk"&gt;https://github.com/medpaf/hawk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>opensource</category>
      <category>hacktoberfest</category>
      <category>security</category>
    </item>
    <item>
      <title>Using Network Link Conditioner to simulate bad network conditions on iOS and macOS</title>
      <author>Tarik Dahic</author>
      <pubDate>Thu, 04 Nov 2021 19:53:57 +0000</pubDate>
      <link>https://dev.to/daholino/using-network-link-conditioner-to-simulate-bad-network-conditions-on-ios-and-macos-1a4h</link>
      <guid>https://dev.to/daholino/using-network-link-conditioner-to-simulate-bad-network-conditions-on-ios-and-macos-1a4h</guid>
      <description>&lt;p&gt;&lt;strong&gt;Network Link Conditioner&lt;/strong&gt; is a network utility tool provided by Apple that can simulate various network conditions and help us to develop better apps. If you ever received a bug report where user mentioned slow network connection the Network Link Conditioner will help you to reproduce that issue.&lt;/p&gt;

&lt;p&gt;We are always on the go, using our mobile devices in different places with different network conditions and we need to adjust the apps that we develop for that conditions. For example, the elevators are ruthless, somehow the app that I work on has always issues with them! 😀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Network Link Conditioner is available on iOS and macOS and in this article I will cover how to install and use it on both platforms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ios"&gt;
  &lt;/a&gt;
  iOS
&lt;/h3&gt;

&lt;p&gt;To enable Network Link Conditioner on iOS device you will need to enable that device for &lt;strong&gt;development&lt;/strong&gt;. You can do that by connecting and building the app directly to your device. If your device is not enabled for development, Xcode will do that before building and installing your app.&lt;/p&gt;

&lt;p&gt;The other option is to go to &lt;em&gt;Window&lt;/em&gt; → &lt;em&gt;Devices and Simulators&lt;/em&gt; in Xcode and from there select your device and enable it for development.&lt;/p&gt;

&lt;p&gt;Inside the &lt;em&gt;Settings&lt;/em&gt; app you will now have a &lt;em&gt;Developer&lt;/em&gt; section and inside that section you will be able to use Network Link Conditioner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WHNthMo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tarikdahic.com/images/network-link-conditioner-ios.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WHNthMo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tarikdahic.com/images/network-link-conditioner-ios.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#macos"&gt;
  &lt;/a&gt;
  macOS
&lt;/h3&gt;

&lt;p&gt;You will need to go to &lt;em&gt;more downloads&lt;/em&gt; page on the Apple Developer portal to and search for appropriate &lt;strong&gt;Additional Tools&lt;/strong&gt; for your Xcode version. &lt;a href="https://developer.apple.com/download/all/?q=Additional%20Tools"&gt;This&lt;/a&gt; link will take you directly to those search results. Download the &lt;code&gt;dmg&lt;/code&gt; file, open it, and inside &lt;em&gt;Hardware&lt;/em&gt; folder you will find the file called &lt;code&gt;Network Link Conditioner.prefPane&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aL9lUlE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tarikdahic.com/images/network-link-conditioner-install.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aL9lUlE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tarikdahic.com/images/network-link-conditioner-install.png" alt="" width="880" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Double click on it to install it and when the installation is completed you can open the &lt;strong&gt;Network Link Conditioner&lt;/strong&gt; by going to the &lt;em&gt;Settings&lt;/em&gt; app and at the bottom of the window you will find it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TzW1Oi1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tarikdahic.com/images/network-link-conditioner-settings.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TzW1Oi1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tarikdahic.com/images/network-link-conditioner-settings.png" alt="" width="880" height="892"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Network Link Conditioner&lt;/strong&gt; comes with a lot of presets that you can use like &lt;em&gt;3G, Edge, Very Bad Network, LTE, 100% Loss&lt;/em&gt; and more. They are great for testing your app on bad network conditions and in most cases you will not need to create custom presets (profiles).&lt;/p&gt;

&lt;p&gt;To use it, pick a preset and just &lt;em&gt;flip the switch&lt;/em&gt; to enable it. It is that easy, but don’t forget to turn it off after you are done with testing because it is applied on the entire system.&lt;/p&gt;

&lt;p&gt;Every preset has following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Downlink&lt;/strong&gt; bandwidth, packet drop rate and delay in ms&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Uplink&lt;/strong&gt; bandwidth, packet drop rate and delay in ms&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNS Delay&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By tweaking these attributes you can simulate a lot of different network conditions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edge&lt;/strong&gt; is a great preset to see how your app behaves on very slow networks. &lt;strong&gt;Very Bad Network&lt;/strong&gt; preset is great when you want to test that you have connection to the Internet but that it is very unreliable.&lt;/p&gt;

&lt;p&gt;I am working with VoIP and I have found that custom profile with &lt;em&gt;60%&lt;/em&gt; packet loss in both directions is very great for testing reconnection and recovery mechanisms.&lt;/p&gt;

&lt;p&gt;If you are using &lt;strong&gt;iOS Simulator&lt;/strong&gt; you will need to install the Network Link Conditioner on macOS and apply it to entire system. This will affect the connection of your entire macOS.&lt;/p&gt;

&lt;p&gt;Here’s a little trick that I use for uploading. When I need to upload a large file and I don’t want to make my home network unusable I just turn on Network Link Conditioner with custom profile that limits my upload speed. It is configured like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BLsIb9Z2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tarikdahic.com/images/network-link-conditioner-upload-limit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BLsIb9Z2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tarikdahic.com/images/network-link-conditioner-upload-limit.png" alt="" width="880" height="575"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Network Link Conditioner&lt;/strong&gt; is a very useful tool and if you are not using it to test your apps your users might suffer! If you have any questions, please post them in the comments below.&lt;/p&gt;

</description>
      <category>ios</category>
      <category>xcode</category>
    </item>
  </channel>
</rss>
