<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Appwrite VS Code extension</title>
      <author>Alex Weininger</author>
      <pubDate>Sat, 22 May 2021 06:28:08 +0000</pubDate>
      <link>https://dev.to/streamlux/appwrite-vs-code-extension-1356</link>
      <guid>https://dev.to/streamlux/appwrite-vs-code-extension-1356</guid>
      <description>&lt;p&gt;In my very first post to dev.to I'll be talking about the Appwrite for VS Code extension, what you can use it for, and some features I hope to include in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;The team at Streamlux chose to utilize &lt;a href="https://appwrite.io/"&gt;Appwrite&lt;/a&gt; for many good reasons. One of my favorite reasons was that with Appwrite being relatively new, we'd have a great opportunity to contribute to the open source Appwrite community.&lt;/p&gt;

&lt;p&gt;To quickly summarize what Appwrite is, from their website:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that aims to make app development &lt;strong&gt;easier&lt;/strong&gt; with SDKs available in a variety of programming languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, after a few weeks after using Appwrite, our first contribution to the Appwrite community is the Appwrite extension for Visual Studio Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/streamlux/vscode-appwrite"&gt;View Appwrite for VS Code on GitHub&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://marketplace.visualstudio.com/items?itemName=Streamlux.vscode-appwrite"&gt;View on the Visual Studio Marketplace&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#current-features"&gt;
  &lt;/a&gt;
  Current features
&lt;/h1&gt;

&lt;p&gt;Here are the features we've built so far! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiproject-support"&gt;
  &lt;/a&gt;
  Multi-project support
&lt;/h3&gt;

&lt;p&gt;If you happen to be working with more than one Appwrite project, then the extension has you covered! Easily switch between as many projects as you'd like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SisJQIWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d38off1f69l8xg7nixmb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SisJQIWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d38off1f69l8xg7nixmb.gif" alt="Multi project gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;VS Code theme: &lt;a href="https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2"&gt;Cobalt2&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h3&gt;

&lt;p&gt;The comprehensive and robust database features that Appwrite &lt;br&gt;
 provides were one of the things that ultimately led to the team and I choosing it to power Streamlux.&lt;/p&gt;

&lt;p&gt;With the extension, you can manage databases, collections, and documents.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7mk2LiX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3629ya0lt79c9tup03uh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7mk2LiX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3629ya0lt79c9tup03uh.png" alt="Delete document image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also add, edit, and remove rules and permissions right from VS Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xsTt3nbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ez5bl6du3srp5mrag4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xsTt3nbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ez5bl6du3srp5mrag4.png" alt="Database permissions image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#users"&gt;
  &lt;/a&gt;
  Users
&lt;/h3&gt;

&lt;p&gt;Another feature that makes using Appwrite so simple are the features surrounding users. From authentication, to managing user sessions and preferences, Appwrite makes it a breeze.&lt;/p&gt;

&lt;p&gt;And we strive to match this experience in the extension. Easily view project users, as well as create new ones.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--psDnsybg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqcdtfuvtybcn7mazgon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--psDnsybg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqcdtfuvtybcn7mazgon.png" alt="Users image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#health"&gt;
  &lt;/a&gt;
  Health
&lt;/h3&gt;

&lt;p&gt;And last but not least, you can monitor the health and status of all the services that make up your Appwrite project to make sure everything is running properly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---4t9Hprf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0myqf9lhiefych25xh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4t9Hprf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0myqf9lhiefych25xh7.png" alt="Health image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-features"&gt;
  &lt;/a&gt;
  Future features
&lt;/h2&gt;

&lt;p&gt;One of the recently added features to Appwrite that also might be the best feature is &lt;a href="https://appwrite.io/docs/functions"&gt;Appwrite Functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We think we can provide a great experience for creating and debugging Appwrite Functions in VS Code. And so the next large feature we want to add is functions support.&lt;/p&gt;

&lt;p&gt;If you've made it this far through my first dev.to post, thank you for reading!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/streamlux/vscode-appwrite"&gt;View Appwrite for VS Code on GitHub&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://marketplace.visualstudio.com/items?itemName=Streamlux.vscode-appwrite"&gt;View on the Visual Studio Marketplace&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, I must mention it because the Appwrite team members provide absolute top tier support in their amazing &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;. If you're interested in Appwrite or already use Appwrite I highly recommend joining :)&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>30daysofappwrite</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Appwrite 0.8: ARM Support</title>
      <author>kodumbeats</author>
      <pubDate>Sat, 22 May 2021 06:27:38 +0000</pubDate>
      <link>https://dev.to/appwrite/appwrite-0-8-arm-support-59bc</link>
      <guid>https://dev.to/appwrite/appwrite-0-8-arm-support-59bc</guid>
      <description>&lt;p&gt;Appwrite 0.8 brings support for ARM64 processors - you can now install Appwrite on Amazon's &lt;strong&gt;Graviton2&lt;/strong&gt; instances, &lt;strong&gt;Apple M1&lt;/strong&gt; systems (without Rosetta 2), Raspberry Pi 4 SoCs, or any other 64-bit ARM device! To appreciate ARM's position in today's computing, let's take a brief tour of the history of CPU architectures. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that aims to make app development &lt;strong&gt;easier&lt;/strong&gt; with SDKs available in a variety of programming languages. We love chatting about Appwrite, Aliens 👽 or Unicorns 🦄 over at &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#beginning-with-the-8086"&gt;
  &lt;/a&gt;
  Beginning with the 8086
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gcp5Os70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvn9jvevyf2tp96hq4nc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gcp5Os70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvn9jvevyf2tp96hq4nc.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by Thomas Nguyen - &lt;a href="https://commons.wikimedia.org/w/index.php?curid=46809082"&gt;Own work&lt;/a&gt;, CC BY-SA 4.0, &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Intel 8086 processor was released in 1978 and was carried into households with the widespread success of the IBM 5150 Personal Computer, &lt;strong&gt;the&lt;/strong&gt; PC. Intel then built on the success of the 8086 with following processors: the 80286, 80386, 80486, and more, all the way through Pentium and beyond. The set of instructions used to command these processors, known now as "x86", is still supported on chips today - any assembly program written for the 8086 will run out-of-the-box on modern Intel processors, albeit much, &lt;em&gt;much&lt;/em&gt;, &lt;strong&gt;much&lt;/strong&gt; faster.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ever wonder how AMD is able to make x86-compatible processors without lawsuits from Intel? The legal landscape around the x86 architecture is fascinating - check out &lt;a href="https://jolt.law.harvard.edu/digest/intel-and-the-x86-architecture-a-legal-perspective"&gt;this commentary&lt;/a&gt; from Harvard Law to learn more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first "x86" instruction sets supported very basic processor-level operations: reading/writing from memory, basic arithmetic, and control flow logic, to name a few. To meet ever-growing computing demands, Intel needed to expand the x86 instruction set to handle more complex operations like handling memory in chunks, complicated maths like square root, logarithms, and trigonometry, and more. While the instruction set grew, so too did the power requirements. The computing industry was fine with power consumption, so long as their computers ran faster, that is, until power consumption mattered - the era of smartphones.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-tale-of-two-arms"&gt;
  &lt;/a&gt;
  The Tale of Two ARMs
&lt;/h2&gt;

&lt;p&gt;Smartphones require a specific balance of power consumption and performance, and x86 processors didn't fit the bill - the complex x86 instructions required extra electricity, logic gates, and silicon surface area, and mobile computing had opposite requirements. RISC (Reduced Instruction Set Computers) processors took a more specialized approach: only include the basic instructions required for a modern computer, and make those instructions &lt;em&gt;highly optimized&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;ARM, an English semiconductor company, designs RISC instruction sets and licenses them to manufacturers to handle production.You probably recognize a few of these manufactors: Samsung, Broadcom, Qualcomm, and NVidia, to name a few. These companies handle the manufacturing and distribution of ARM-based systems, including smartphones, tablets, smart TVs, washing machines, cars, printers, and so much more. &lt;/p&gt;

&lt;p&gt;Low-power processors aren't just for mobile/IoT devices anymore, nor are they less capable than x86 computers. Most notably, the Apple M1 (ARM-based) has made a big splash with ARM now powering iPads, Macbooks, Mac Minis, and now iMacs, with other manufacturers set to follow in their footsteps. Amazon has also been a pioneer of ARM in the datacenter - Amazon employs a 64-core(!) Neoverse N1 ARM processor in their &lt;a href="https://aws.amazon.com/ec2/graviton/"&gt;Graviton2&lt;/a&gt; virtual servers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's Next?
&lt;/h2&gt;

&lt;p&gt;You can get started with your favorite 64-bit ARM device now - follow the &lt;a href="https://appwrite.io/docs/installation"&gt;installation instructions&lt;/a&gt; to get started. The Appwrite community is very excited about Appwrite apps which are now possible thanks to Appwrite on RPi (especially me), and we've installed it on a variety of operating systems: PiOS, Ubuntu, and BalenaOS. You can see Appwrite running on a Raspberry Pi 4 2GB with Ubuntu 20.04:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3kS5LB9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/md3tuuj5xehlsps14bhu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3kS5LB9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/md3tuuj5xehlsps14bhu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What are you most excited to build? Do you have any homelab projects which just became easier thanks to Appwrite on ARM? Let us know on &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;, &lt;a href="https://twitter.com/appwrite_io"&gt;Twitter&lt;/a&gt;, &lt;a href="https://dev.to/appwrite"&gt;Dev.to&lt;/a&gt;, or anywhere you find a friendly Appwriter. :) Also, the &lt;a href="https://github.com/appwrite/awesome-appwrite"&gt;awesome-appwrite&lt;/a&gt; repo keeps growing with new tutorials, demos, videos, and more!&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>raspberrypi</category>
      <category>serverless</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Applying Code Linting in Test Automation Frameworks</title>
      <author>Raghwendra Sonu</author>
      <pubDate>Sat, 22 May 2021 05:52:48 +0000</pubDate>
      <link>https://dev.to/raghwendrasonu/applying-code-linting-in-test-automation-frameworks-9am</link>
      <guid>https://dev.to/raghwendrasonu/applying-code-linting-in-test-automation-frameworks-9am</guid>
      <description>&lt;p&gt;The QA team should use one of the linter e.g. checkstyle to apply a coding standard in the Automation framework.&lt;/p&gt;

&lt;p&gt;This helps us keep the code clean and consistent, make pull requests shorter and easier, overall saving us time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to run the linter&lt;/strong&gt;&lt;br&gt;
You can run the linter at any time with mvn checkstyle:checkstyle. This will log any errors. It will also generate a html report in the project folder which is at /target/site/checkstyle.html.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use the git hook&lt;/strong&gt;&lt;br&gt;
To use this you need to run this command - git config core.hooksPath .githooks so that git looks in the .githooks folder in the project for hooks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/raghwendra-sonu/GitHooks"&gt;https://github.com/raghwendra-sonu/GitHooks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you run this, from then on the linter will run automatically before a commit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Optional Intellij plugin&lt;/strong&gt;&lt;br&gt;
There is an Intellij plugin for checkstyle too.&lt;br&gt;
Add it by clicking Preferences → Plugins , search for “checkstyle” and install CheckStyle-IDEA plugin&lt;br&gt;
Once it’s installed you need to configure it - Preferences → Tools → Checkstyle. Select our custom checkstyle.xml file [The xml file is in the root of the project]:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1h3FlR7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/baedyfzwgdbcawywyn9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1h3FlR7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/baedyfzwgdbcawywyn9a.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you will have a checkstyle tool window at the bottom of your IDE.&lt;/p&gt;

&lt;p&gt;Use the checkstyle file as a formatter scheme&lt;br&gt;
This is another optional but helpful step.&lt;/p&gt;

&lt;p&gt;You can avoid any linter errors by importing our checkstyle file as a scheme in Intellij’s code formatter. &lt;/p&gt;

&lt;p&gt;To use it click Preferences → Editor → Code Style → Java&lt;/p&gt;

&lt;p&gt;Click the cog button then Import Scheme → Checkstyle Configuration then select the checkstyle.xml file:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--skCwtkf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzgtepbwn7tlsbkdqse2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--skCwtkf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzgtepbwn7tlsbkdqse2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now when you generate new code or format existing code it will apply the linter rules to it. To format your code just select the code/files then click Code → Reformat Code.&lt;/p&gt;

</description>
      <category>api</category>
      <category>automation</category>
      <category>linting</category>
    </item>
    <item>
      <title>How to use Flipper for Mobile UI element identification</title>
      <author>Raghwendra Sonu</author>
      <pubDate>Sat, 22 May 2021 05:39:05 +0000</pubDate>
      <link>https://dev.to/raghwendrasonu/how-to-use-flipper-for-mobile-ui-element-identification-53oo</link>
      <guid>https://dev.to/raghwendrasonu/how-to-use-flipper-for-mobile-ui-element-identification-53oo</guid>
      <description>&lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt;&lt;br&gt;
Download from: &lt;a href="https://fbflipper.com/"&gt;https://fbflipper.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AUT:&lt;/strong&gt; Woolworths Shopping App&lt;/p&gt;

&lt;p&gt;Find Activity and element Id&lt;br&gt;
Connect your device to your Mac and open the app&lt;/p&gt;

&lt;p&gt;Open Flipper&lt;br&gt;
In the “WOOLWORTHS” panel (on the left hand side), tap “Layout” to enable it&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qyT6SHoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cv5nm9v9s9nkwfmunhjo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qyT6SHoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cv5nm9v9s9nkwfmunhjo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To find the Activity that launches a screen, open the app and navigate to that same screen&lt;/p&gt;

&lt;p&gt;Flipper should now show you the name of the Activity&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v8ySY47V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rl9tdix5i1lpg7j8tqk1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v8ySY47V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rl9tdix5i1lpg7j8tqk1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To find an Element Id, open the app and navigate to the screen &lt;/p&gt;

&lt;p&gt;Once on the screen return to Flipper&lt;/p&gt;

&lt;p&gt;You can now use the arrow keys to navigate through each element until the correct one&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AuDy6q_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5874k161v6ompzm9ozre.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AuDy6q_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5874k161v6ompzm9ozre.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;View Shared Preference details&lt;br&gt;
Connect your device to your Mac and open the app&lt;/p&gt;

&lt;p&gt;Open Flipper&lt;br&gt;
In the “WOOLWORTHS” panel (on the left hand side), tap “Shared Preference Viewer” to enable it&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--22Dk8J8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqnxg5gfmu4gpl9gcit6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--22Dk8J8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqnxg5gfmu4gpl9gcit6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select any dropdown you want to see the different values stored in the app&lt;/p&gt;

&lt;p&gt;If you want to see the user details saved in the app, select “accountPrefs“ from the dropdown&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pe-2sZAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gy1uq4vtjznrxx78zfvi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pe-2sZAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gy1uq4vtjznrxx78zfvi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flipper</category>
      <category>ui</category>
      <category>testing</category>
      <category>android</category>
    </item>
    <item>
      <title>The Ember Times - Issue No. 180</title>
      <author>The Ember Times</author>
      <pubDate>Sat, 22 May 2021 05:28:06 +0000</pubDate>
      <link>https://dev.to/embertimes/the-ember-times-issue-no-180-jo</link>
      <guid>https://dev.to/embertimes/the-ember-times-issue-no-180-jo</guid>
      <description>&lt;p&gt;👋 Emberistas! 🐹&lt;/p&gt;

&lt;p&gt;Ember's 10 year anniversary, Prettier for Handlebars support, Embroider in 3.5 weeks, GAAD pledge, quickstart to authentication, built with Ember: Fleetbase, and new and shiny add-ons ✨&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#happy-10-year-anniversary-emberjs"&gt;
  &lt;/a&gt;
  Happy 10 year anniversary, Ember.js! 🎉
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dxVHVZT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E1XJGCKXEAAn5kY.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Hn_Adxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1158999373658951680/deOa-COd_normal.jpg" alt="Natasha Fel profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Natasha Fel
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @natalifel
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      We’re ready!!! &lt;a href="https://twitter.com/hashtag/emberjs"&gt;#emberjs&lt;/a&gt; 10YO anniversary 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:24 PM - 14 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1393240918258499589" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1393240918258499589" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1393240918258499589" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Many thanks to &lt;a href="https://twitter.com/NataliFel"&gt;Natasha Fel&lt;/a&gt; and &lt;a href="https://github.com/andreyfel"&gt;Andrey Fel (@andreyfel)&lt;/a&gt; for sharing their photos from &lt;a href="https://emberjs-nn.timepad.ru/event/1618665/"&gt;Ember Nizhny Novgorod's Meetup&lt;/a&gt;, which featured a celebratory Nizhny Novgorod Tomster cake for Ember's big anniversary! Check out more photos from the meetup &lt;a href="https://vk.com/album-183353390_279540779"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#prettier-for-handlebars-support"&gt;
  &lt;/a&gt;
  &lt;a href="https://prettier.io/blog/2021/05/09/2.3.0.html#ember--handlebars"&gt;Prettier for Handlebars support 🙌&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Prettier can now officially format HTML templates with Handlebars (HBS) in the newly released &lt;a href="https://prettier.io/blog/2021/05/09/2.3.0.html#ember--handlebars"&gt;version 2.3.0&lt;/a&gt;. Thank you to &lt;a href="https://github.com/dcyriller"&gt;Cyrille David (@dcyriller)&lt;/a&gt; for pushing this initiative, which started in 2017, through the finish line.&lt;/p&gt;

&lt;p&gt;Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and reprinting it with its own rules that take the maximum line length into account, wrapping code when necessary. This removes all bikeshedding on what rules we should have or shouldn’t have and instead provides one standard for everyone to use by default.&lt;/p&gt;

&lt;p&gt;In order to keep your project aligned with Prettier’s formatting we can use the Ember Template Lint plugin: &lt;a href="https://github.com/ember-template-lint/ember-template-lint-plugin-prettier"&gt;ember-template-lint-plugin-prettier&lt;/a&gt;. This plugin defines a &lt;em&gt;single rule&lt;/em&gt; that rule will compare your code with Prettier's output.&lt;/p&gt;

&lt;p&gt;So try it out today by using the &lt;strong&gt;glimmer parser&lt;/strong&gt; for Prettier!  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#embroider-from-zero-to-route-splitting-in-35-weeks"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/bendemboski/embroider-from-zero-to-route-splitting-in-3-5-weeks-5abo"&gt;Embroider: from zero to route splitting in 3.5 weeks 📝&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you have been part of the Ember community for a while now and have read &lt;a href="https://blog.emberjs.com/the-ember-times-issue-179#toc_readers-question-what%E2%80%99s-the-current-status-of-the-embroider-project-%F0%9F%A7%B5"&gt;The Ember Times' last issue&lt;/a&gt;, you have probably heard about &lt;a href="https://github.com/embroider-build/embroider"&gt;Embroider&lt;/a&gt;. This project is currently at version 0.41.0 and usable in Ember projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bendemboski"&gt;Ben Demboski (@bendemboski)&lt;/a&gt; wrote this &lt;a href="https://dev.to/bendemboski/embroider-from-zero-to-route-splitting-in-3-5-weeks-5abo"&gt;blog&lt;/a&gt; about how he implemented Embroider in a commercial, &lt;a href="https://ember-electron.js.org"&gt;&lt;code&gt;ember-electron&lt;/code&gt;&lt;/a&gt; app.&lt;/p&gt;

&lt;p&gt;Ben's &lt;a href="https://dev.to/bendemboski/embroider-from-zero-to-route-splitting-in-3-5-weeks-5abo"&gt;blog post&lt;/a&gt; explains in detail the app and the process used to make the app use Embroider. All the hard things he ran into, such as ES6 module compliance and third-party add-ons. Luckily, after 3.5 weeks, Ben achieved &lt;strong&gt;tree-shaking&lt;/strong&gt; and &lt;strong&gt;code splitting across routes&lt;/strong&gt;. So if you want to start taking advantage of what Embroider has to offer, this post is a great place to start.&lt;/p&gt;

&lt;p&gt;If you read the blog, start with this project yourself and look for a place to get more help, check out the &lt;code&gt;#dev-embroider&lt;/code&gt; channel on &lt;a href="https://discord.gg/emberjs"&gt;Ember.JS Discord&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ember-takes-the-gaad-pledge"&gt;
  &lt;/a&gt;
  &lt;a href="https://blog.emberjs.com/gaad-2021"&gt;Ember takes the GAAD Pledge 😍&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/MelSumner"&gt;Melanie Sumner (@MelSumner)&lt;/a&gt; authored a blog post in conjuction with this week's &lt;a href="https://globalaccessibilityawarenessday.org/"&gt;Global Accessibility Awareness Day&lt;/a&gt; (GAAD) to announce that Ember has taken the GAAD pledge &lt;strong&gt;to make accessibility a core value of our framework&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Be sure to read the &lt;a href="https://blog.emberjs.com/gaad-2021"&gt;post&lt;/a&gt; to learn more about what Ember has done so far in its efforts for “accessibility by default” , what accessibilty-related work is in the pipeline, and how you can get involved if you're interesting in contributing to Ember a11y efforts!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ember-simple-auth-video-%F0%9F%93%BD"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=bSWN4_EbTPI"&gt;Ember Simple Auth video 📽&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Are you looking for a friendly, step by step guide to adding authentication to your Ember app? Look no further than the Ember Simple Auth &lt;a href="https://www.youtube.com/watch?v=bSWN4_EbTPI"&gt;Quickstart video&lt;/a&gt; published by &lt;a href="https://simplabs.com/"&gt;Simplabs&lt;/a&gt;. This video provides helpful introduction to this popular authentication/authorization &lt;a href="https://ember-simple-auth.com/"&gt;Ember addon&lt;/a&gt;. &lt;a href="https://github.com/marcoow"&gt;Marco Otte-Witte (@marcoow)&lt;/a&gt; explains this tricky part of app development using the latest Ember Octane syntax.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#built-with-ember-fleetbase"&gt;
  &lt;/a&gt;
  &lt;a href="https://fleetbase.io/"&gt;Built with Ember: Fleetbase 🚀&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://fleetbase.io/"&gt;Fleetbase&lt;/a&gt; is a new logistics platform built with Ember by co-founders &lt;a href="https://github.com/roncodes"&gt;Ronald A. Richardson (@roncodes)&lt;/a&gt; and &lt;a href="https://github.com/shivthakker"&gt;Shiv Thakker (@shivthakker)&lt;/a&gt;. Fleetbase is an API-first logistics platform for developers and businesses. Customers can design, build, customize and control their logistics operations and experience using their APIs and console. Based in Singapore, Fleetbase has a mission to &lt;strong&gt;tech enable&lt;/strong&gt; traditional businesses.&lt;/p&gt;

&lt;p&gt;Check out Fleetbase on &lt;a href="https://www.producthunt.com/posts/fleetbase"&gt;ProductHunt&lt;/a&gt;!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#new-shiny-addons"&gt;
  &lt;/a&gt;
  New shiny addons ✨
&lt;/h2&gt;

&lt;p&gt;The Ember addon ecosystem is always expanding and we love to keep you up to date with all of them. So here is a summarized list of the latest addons made by the community for the community.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/retailnext/ember-bem-helpers"&gt;ember-bem-helpers&lt;/a&gt;: BEM helpers for Ember.js applications&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Windvis/ember-breadcrumb-trail"&gt;ember-breadcrumb-trail&lt;/a&gt;: Minimalistic but very flexible breadcrumb management solution for Ember applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/CrowdStrike/ember-url-hash-polyfill"&gt;ember-url-hash-polyfill&lt;/a&gt;: Support for in/inter page linking / scrolling with hashes in EmberJS&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/onehilltech/ember-cli-custom-properties"&gt;ember-cli-custom-properties&lt;/a&gt;: Adds support for CSS custom properties (variables) to components&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NullVoxPopuli/ember-statechart-component"&gt;ember-statechart-component&lt;/a&gt;: Statecharts as components. No classes. Pure declarative state transitions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gossi/ember-command"&gt;ember-command&lt;/a&gt;: An implementation of the command design pattern for #emberjs&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#contributors-corner"&gt;
  &lt;/a&gt;
  &lt;a href="https://guides.emberjs.com/release/contributing/repositories/"&gt;Contributors' corner 👏&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This week we'd like to thank &lt;a href="https://github.com/pzuraq" rel="noopener noreferrer"&gt;Chris Garrett (@pzuraq)&lt;/a&gt;, &lt;a href="https://github.com/bmish" rel="noopener noreferrer"&gt;Bryan Mishkin (@bmish)&lt;/a&gt;, &lt;a href="https://github.com/lin-ll" rel="noopener noreferrer"&gt;Lucy Lin (@lin-ll)&lt;/a&gt;, &lt;a href="https://github.com/rwjblue" rel="noopener noreferrer"&gt;Robert Jackson (@rwjblue)&lt;/a&gt;, &lt;a href="https://github.com/bgantzler" rel="noopener noreferrer"&gt;@bgantzler&lt;/a&gt;, &lt;a href="https://github.com/amk221" rel="noopener noreferrer"&gt;Andrew Kirwin (@amk221)&lt;/a&gt;, &lt;a href="https://github.com/fozy81" rel="noopener noreferrer"&gt;Tim (@fozy81)&lt;/a&gt;, &lt;a href="https://github.com/runnerboy22" rel="noopener noreferrer"&gt;Tyler (@runnerboy22)&lt;/a&gt;, &lt;a href="https://github.com/thomascchen" rel="noopener noreferrer"&gt;Tom Chen (@thomascchen)&lt;/a&gt;, &lt;a href="https://github.com/prasannavijayan" rel="noopener noreferrer"&gt;_pvy (@prasannavijayan)&lt;/a&gt;, &lt;a href="https://github.com/spham92" rel="noopener noreferrer"&gt;Steven Pham (@spham92)&lt;/a&gt;, &lt;a href="https://github.com/mansona" rel="noopener noreferrer"&gt;Chris Manson (@mansona)&lt;/a&gt;, &lt;a href="https://github.com/locks" rel="noopener noreferrer"&gt;Ricardo Mendes (@locks)&lt;/a&gt;, &lt;a href="https://github.com/chrisrng" rel="noopener noreferrer"&gt;Chris Ng (@chrisrng)&lt;/a&gt;, &lt;a href="https://github.com/jenweber" rel="noopener noreferrer"&gt;Jen Weber (@jenweber)&lt;/a&gt;, &lt;a href="https://github.com/dmuneras" rel="noopener noreferrer"&gt;Daniel Múnera Sánchez (@dmuneras)&lt;/a&gt;, &lt;a href="https://github.com/hannakim91" rel="noopener noreferrer"&gt;Hanna (she/her) (@hannakim91)&lt;/a&gt;, &lt;a href="https://github.com/snewcomer" rel="noopener noreferrer"&gt;Scott Newcomer (@snewcomer)&lt;/a&gt;, &lt;a href="https://github.com/amyrlam" rel="noopener noreferrer"&gt;Amy Lam (@amyrlam)&lt;/a&gt;, &lt;a href="https://github.com/rwwagner90" rel="noopener noreferrer"&gt;Robert Wagner (@rwwagner90)&lt;/a&gt;, &lt;a href="https://github.com/MelSumner" rel="noopener noreferrer"&gt;Melanie Sumner (@MelSumner)&lt;/a&gt;, &lt;a href="https://github.com/nlfurniss" rel="noopener noreferrer"&gt;Nathaniel Furniss (@nlfurniss)&lt;/a&gt;, &lt;a href="https://github.com/chiragpat" rel="noopener noreferrer"&gt;Chirag Patel (@chiragpat)&lt;/a&gt;, &lt;a href="https://github.com/lukemelia" rel="noopener noreferrer"&gt;Luke Melia (@lukemelia)&lt;/a&gt;, &lt;a href="https://github.com/acorncom" rel="noopener noreferrer"&gt;David Baker (@acorncom)&lt;/a&gt;, &lt;a href="https://github.com/chancancode" rel="noopener noreferrer"&gt;Godfrey Chan (@chancancode)&lt;/a&gt;, &lt;a href="https://github.com/ombr" rel="noopener noreferrer"&gt;Luc Boissaye (@ombr)&lt;/a&gt;, &lt;a href="https://github.com/brendenpalmer" rel="noopener noreferrer"&gt;Brenden Palmer (@brendenpalmer)&lt;/a&gt;, &lt;a href="https://github.com/ijlee2" rel="noopener noreferrer"&gt;Isaac Lee (@ijlee2)&lt;/a&gt;, &lt;a href="https://github.com/runspired" rel="noopener noreferrer"&gt;Chris Thoburn (@runspired)&lt;/a&gt;, &lt;a href="https://github.com/sly7-7" rel="noopener noreferrer"&gt;Sylvain MINA (@sly7-7)&lt;/a&gt;, &lt;a href="https://github.com/MinThaMie" rel="noopener noreferrer"&gt;Anne-Greeth van Herwijnen (@MinThaMie)&lt;/a&gt;, &lt;a href="https://github.com/igorT" rel="noopener noreferrer"&gt;Igor Terzic (@igorT)&lt;/a&gt;, &lt;a href="https://github.com/scalvert" rel="noopener noreferrer"&gt;Steve Calvert (@scalvert)&lt;/a&gt;, &lt;a href="https://github.com/danielpunkass" rel="noopener noreferrer"&gt;Daniel Jalkut (@danielpunkass)&lt;/a&gt;, &lt;a href="https://github.com/wise-introvert" rel="noopener noreferrer"&gt;Fardeen Panjwani (@wise-introvert)&lt;/a&gt;, and &lt;a href="https://github.com/anehx" rel="noopener noreferrer"&gt;Jonas Metzener (@anehx)&lt;/a&gt; for their contributions to Ember and related repositories! 💖&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#connect-with-us"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScqu7Lw_9cIkRtAiXKitgkAo4xX_pV1pdCfMJgIr6Py1V-9Og/viewform"&gt;Connect with us 🤓&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--90_zyYI9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6k14sk621r1zp5y5prz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90_zyYI9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6k14sk621r1zp5y5prz.png" alt="Ember Office Hours Tomster mascot"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Wondering about something related to Ember, Ember Data, Glimmer, or addons in the Ember ecosystem, but don't know where to ask? Readers’ Questions are just for you!&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Submit your own&lt;/strong&gt; short and sweet &lt;strong&gt;question&lt;/strong&gt; under &lt;a href="https://bit.ly/ask-ember-core"&gt;bit.ly/ask-ember-core&lt;/a&gt;. And don’t worry, there are no silly questions, we appreciate them all - promise! 🤞&lt;/p&gt;


&lt;p&gt;Want to write for the Ember Times? Have a suggestion for next week's issue? Join us at &lt;a href="https://discordapp.com/channels/480462759797063690/485450546887786506"&gt;#support-ember-times&lt;/a&gt; on the &lt;a href="https://discord.gg/emberjs"&gt;Ember Community Discord&lt;/a&gt; or ping us &lt;a href="https://twitter.com/embertimes"&gt;@embertimes&lt;/a&gt; on Twitter.&lt;/p&gt;


&lt;p&gt;Keep on top of what's been going on in Emberland this week by subscribing to our &lt;a href="https://embertimes.substack.com/"&gt;e-mail newsletter&lt;/a&gt;! You can also find our posts on the &lt;a href="https://blog.emberjs.com/tag/newsletter"&gt;Ember blog&lt;/a&gt;. See you in two weeks!&lt;/p&gt;
&lt;br&gt;




&lt;p&gt;That's another wrap! ✨&lt;/p&gt;

&lt;p&gt;Be kind,&lt;/p&gt;

&lt;p&gt;Tim Foster, Chris Ng, Anne-Greeth van Herwijnen, Amy Lam, and the Learning Team&lt;/p&gt;

</description>
      <category>ember</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>a11y</category>
    </item>
    <item>
      <title>The Sublime Text 4 | The editor that can make you quit VSCode</title>
      <author>Volt</author>
      <pubDate>Sat, 22 May 2021 05:21:17 +0000</pubDate>
      <link>https://dev.to/voltagex007/the-sublime-text-4-the-editor-that-can-make-you-quit-vscode-1pae</link>
      <guid>https://dev.to/voltagex007/the-sublime-text-4-the-editor-that-can-make-you-quit-vscode-1pae</guid>
      <description>&lt;h1&gt;
  &lt;a href="#the-brand-new-sublime-text-4"&gt;
  &lt;/a&gt;
  The brand new Sublime Text 4
&lt;/h1&gt;

&lt;p&gt;I was inside the pit of Web Dev for the past month or 2. Then I wanted to have some fun with my old buddy - "Python". As well as I was interested in making some complex algorithmic simulations (Inspired by Sebastian Lague) using pygame and pyglet and some few other OpenGL and SDL2 related stuffs and found to have some minimalism whist using Python. So I installed Sublime Text again after a loooooong time period. Then configured a lot and then was ready to go. The next day, I saw my updater app showing me 3 updates (which usually shows 2 updates, and those two are the updates that I ignore for a different reason). I was like 'hmmmmm, okay let's update it though' and then &lt;strong&gt;boom&lt;/strong&gt; saw sublime text wanted an update, the app shows what is the newer version and it told "4107". I was confused and quickly opened sublime text website and the website was updated and sublime text 4 was released. I was very sad that ST3 is dumb but I really wanted to fiddle with it (IDK why it was dumb though, I think I was overwhelmed with VSCode). But when I saw it I was really happy and quickly refereed the "Whats new" page and was thinking to go back. And the newer update and the newer look made me quit VSCode [ Because I like ST now :) ]. But still I will be using VSCode as well as Sublime Text. Whats wrong in using two text editors configured in different unique ways to use in different places.&lt;/p&gt;

&lt;p&gt;Okay, The Great Sweet Nice ST team explained What's New the amazing Sublime Text. What am I doing here. Well I'm going to tell about my Experience, Feedback, and how I configured it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Apart from this topic: I'm back in action on creating new posts.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#experience"&gt;
  &lt;/a&gt;
  Experience
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Answer in one word&lt;/strong&gt; : I'm speechless&lt;br&gt;
&lt;strong&gt;Answer in large&lt;/strong&gt; : Well, I'm really impressed with the defaults. Its like Way better than any of the other text editor's default. I thing the Team has understood what most of the people love to have the look of the Text Editor should be like. Though VSCode also has the same level of look. Can't compare though. Both of the editors are equal for me. One is better than the other in their own unique way and that's true for everything. Cows have horns whilst Humans doesn't. Humans have a better brain to go and invent newer things whilst Cows have that power in very low level.(Don't ask me which text editor is that Cow)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  Feedback
&lt;/h2&gt;

&lt;p&gt;The only thing which I want to tell the Team is to have a good Auto Completion like the IntelliSense in VSCode.&lt;/p&gt;

&lt;p&gt;And some few extra features like Git Integration, Inbuilt console and The ease of use in running or starting a debug process like in VSCode. In VSCode you can simply open the Command line and you can tell it to run the file, whilst you can also switch and select which interpreter to use. Also it has inbuilt Terminal, and I wish ST has the same option but with the support for color schemes for Terminal (Basically I use a Terminal Color Scheme which I don't know how to get it work inside VSCode)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#about-my-st-config"&gt;
  &lt;/a&gt;
  About my ST Config
&lt;/h2&gt;

&lt;p&gt;I installed some good  plugins, themes and color schemes to make ST a lot better&lt;/p&gt;

&lt;p&gt;I installed Sublime Text Profiles plugin and created some profiles like &lt;strong&gt;Python Dev&lt;/strong&gt; &lt;strong&gt;Web Dev&lt;/strong&gt; &lt;strong&gt;Writer&lt;/strong&gt;, etc.&lt;/p&gt;

&lt;p&gt;Writer profile is what I use to write articles.&lt;/p&gt;

&lt;p&gt;Basically Profiles are just to make it much easier to switch between a set of configuration to another. For example In writer profile I use &lt;strong&gt;Material&lt;/strong&gt; Color scheme, which I typed in the settings JSON file, and then saved it to my Profile. I also changed some other things like font, font size, gutter, line numbers, etc and saved them all. Whilst I can create a new Profile and edit the JSON file to make it better to write Python Code which enabled a different Theme and set of plugins and disabled unwanted plugins required by other Profiles like the Writer scheme and JavaScript Plugins.&lt;/p&gt;

&lt;p&gt;Okay let's enter my Python profile:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python Dev:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I normally use &lt;em&gt;IBM Plex Mono&lt;/em&gt; font with the size of 11 or 12. And I use the &lt;strong&gt;Material Theme&lt;/strong&gt; and &lt;strong&gt;Facebook Material Theme&lt;/strong&gt; both made by "equinusocio" as Color Schemes. And for the Theme I use &lt;strong&gt;Adaptive&lt;/strong&gt; which is a nice feature in ST. I disable JavaScript packages in this profile using the "Ignore" in JSON Settings file. Then I make some minor changes like the mini map outlines and I change the Tab style to "angled".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web Dev:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I use &lt;em&gt;JetBrains Mono&lt;/em&gt; font with font size 12 for Web Dev. And I use the same &lt;strong&gt;Material Theme&lt;/strong&gt; and its &lt;strong&gt;Facebook&lt;/strong&gt; variant for Web Dev. This time I disable Python plugins and make the tab style to Rounded.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Writer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I use &lt;em&gt;Writer&lt;/em&gt; font made my Tonsky - The creator of Fira Code with 13 as my Font Size. With the same &lt;strong&gt;Facebook Material&lt;/strong&gt; theme. I disabled most of the features that are required while coding rather than typing texts and markdowns. And I enable the the Distraction Free mode. Making it look like &lt;em&gt;IA Writer&lt;/em&gt; in Mac.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#then-more-about-the-color-scheme"&gt;
  &lt;/a&gt;
  Then, more about the Color Scheme
&lt;/h3&gt;

&lt;p&gt;I use the &lt;strong&gt;Darker&lt;/strong&gt; variant of the Material Theme. But I might change my Color scheme if I find something nice, and I will post an article about the Color Scheme and the Theme, and if the Theme provides File Icons, the that also will be included. Also If you can, recommend me some Sublime text plugins and Themes and Configurations and etc.&lt;/p&gt;

&lt;p&gt;Also recommend me a good Font, I will try it and post it in that future article.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#outro"&gt;
  &lt;/a&gt;
  Outro:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Bi&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>python</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to use Junit Annotation in Android UI Framework- Kotlin &amp; Espresso based</title>
      <author>Raghwendra Sonu</author>
      <pubDate>Sat, 22 May 2021 05:16:02 +0000</pubDate>
      <link>https://dev.to/raghwendrasonu/how-to-use-junit-annotation-in-android-ui-framework-2m4g</link>
      <guid>https://dev.to/raghwendrasonu/how-to-use-junit-annotation-in-android-ui-framework-2m4g</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;br&gt;
We need to add a capability in the framework, where they can Create and use JUnit tags to filter/group and run tests. e.g.&lt;/p&gt;

&lt;p&gt;@Sanity&lt;br&gt;
@Regression&lt;br&gt;
@MyAnnotation&lt;/p&gt;

&lt;p&gt;So, basically we will Run specific Android Espresso tests by creating custom annotations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;br&gt;
Step 1) Create a custom annotation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import java.lang.annotation.Retention
import java.lang.annotation.RetentionPolicy

//Create Annotation Class- Step3
@Target(
    AnnotationTarget.FUNCTION,
    AnnotationTarget.PROPERTY_GETTER,
    AnnotationTarget.PROPERTY_SETTER,
    AnnotationTarget.ANNOTATION_CLASS,
    AnnotationTarget.CLASS
)
@Retention(
    RetentionPolicy.RUNTIME
)
annotation class MyAnnotation\
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;@Target specifies the possible kinds of elements which can be annotated with the annotation (classes, functions, properties, expressions etc.)&lt;/p&gt;

&lt;p&gt;We used it for annotate some functions, so we use AnnotationTarget.FUNCTION&lt;/p&gt;

&lt;p&gt;@Retention specifies whether the annotation is stored in the compiled class files and whether it’s visible through reflection at runtime (by default, both are true).&lt;/p&gt;

&lt;p&gt;AnnotationRetention.RUNTIME makes sure that the Rat annotation is visible to the test runner during the runtime.&lt;/p&gt;

&lt;p&gt;Step 2) Annotate @MyAnnotation on the tests you want to run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Test @MyAnnotation
fun AddTaskToDoListTestAndMarkDone() {
   ......
   ......
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 3) Use gradlew to run only MyAnnotation tests&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./gradlew connectedAndroidTest -P android.testInstrumentationRunnerArguments.annotation=com.example.todolist.app.MyAnnotation

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>android</category>
      <category>framework</category>
      <category>kotlin</category>
      <category>espresso</category>
    </item>
    <item>
      <title>Why Indentation is more important than coding?</title>
      <author>Sanjay Singh Rajpoot</author>
      <pubDate>Sat, 22 May 2021 05:03:36 +0000</pubDate>
      <link>https://dev.to/sanjaysinghrajpoot/why-indentation-is-more-important-than-coding-4fn1</link>
      <guid>https://dev.to/sanjaysinghrajpoot/why-indentation-is-more-important-than-coding-4fn1</guid>
      <description>&lt;p&gt;As a beginner, I always thought that working of code is more important than how well it's indented. After write code for about a year now I realised how important it is to write good code. Good code here not only means indentation but how your code looks to other people. This will include how you name a variable, where you add comments and more. Let's begin with Indentation.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-indentation"&gt;
  &lt;/a&gt;
  What is Indentation?
&lt;/h1&gt;

&lt;p&gt;In computer programming languages, indentation is used to format program source code to improve readability. Indentation is generally only of use to programmers; compilers and interpreters rarely care how much whitespace is present in between programming statements. However, certain programming languages rely on the use of indentation to demarcate programming structure, often using a variation of the off-side rule. The Haskell, Occam, and Python programming languages rely on an indentation in this way.&lt;/p&gt;

&lt;p&gt;Let's look at a pseudo-code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;main() {
variable declaration;
for loop {
another for loop {
yet another for loop {
some work to be done;
another work;
}
again some work;
}
damn some more work;
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seems horrible? Huh? Thinking that who really code like this in real life? And it hurts. The more you see the more it hurts. Now let's have look at his indented brother :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;main() {
    variable declaration;
    for loop {
        another for loop {
            yet another for loop {
                some work to be done;
                another work;
            }
        again some work;
        }
    damn some more work;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we look at this code, we can clearly see that inside our main(), we have a nested for loop. It certainly is more readable, and understandable than his illiterate/ mismanaged brother. So now you got what I am talking about.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-use-good-indentation-in-your-code"&gt;
  &lt;/a&gt;
  How to use good indentation in your code?
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-spacing"&gt;
  &lt;/a&gt;
  1. Spacing
&lt;/h2&gt;

&lt;p&gt;Spacing forms the most important part of code indentation and formatting. It also makes the code more readable if properly maintained. So we should follow proper spacing throughout our coding and it should be consistent.&lt;/p&gt;

&lt;p&gt;Few tips :&lt;/p&gt;

&lt;p&gt;All array names should be immediately followed by a left square bracket.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// NOT Recommended
    arr [0];  

// Recommended
    arr[0];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All binary operators should maintain space on either side of the operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// NOT Recommended
    a=b-c;          
    a = b-c;        
    a=b - c;        

// Recommended
    a = b - c;      // NOT Recommended
    z = 6*x + 9*y;         

// Recommended
    z = 6 * x + 9 * y;     
    z = (7 * x) + (9 * y);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All casts must be written without any space&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// NOT Recommended
    (ClassA) m.get(3);  
    ( ClassA )m.get(3); 

// Recommended
    (ClassA)m.get(3);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-maximum-line-length"&gt;
  &lt;/a&gt;
  2. Maximum Line Length
&lt;/h2&gt;

&lt;p&gt;Try to fix a maximum line length for your code. The maximum line length should not exceed 120 characters. If it needs to be increased then put it in a different line. The reason behind it is due to the capability of editors and printing facilities. In general, normal editors and printers can handle 120 characters comfortably. So if it exceeds the limit then it’s become a problem to handle for the code editor itself. Try to get the lines of code to a near equal length. This will make the code look symmetric and organised.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-self-documenting-code"&gt;
  &lt;/a&gt;
  3. Self Documenting Code:
&lt;/h2&gt;

&lt;p&gt;Many a times we have heard that each and every piece of code should be documented properly so that it is easily understandable. And we start writing details of the method on top of it. But this is not the best practice. Because the code might be changed in future and the programmer forgot to change the documentation. So the best practice is to write the code in a way so that it can explain itself without any comment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// NOT recommended
    if ( (a == Good) &amp;amp;&amp;amp; ( (b == better) || (b == best) ) )// Recommended
    boolean isbetterbest = ( (b == better) || (b == best) );
    if ( (a == Good) &amp;amp;&amp;amp; isbetterbest )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-using-comments"&gt;
  &lt;/a&gt;
  4. Using Comments
&lt;/h2&gt;

&lt;p&gt;Try to explain your logic in simple words for other people to read it comfortably. With the help of comments, you will have fewer queries regarding your code and logic. One-line comments added in the above snippets are the best examples to convey to the reader what your code is about.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#some-rocksolid-reasons-to-use-indentation"&gt;
  &lt;/a&gt;
  Some rock-solid reasons to use indentation.
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;It shows levels of nesting, nested if statements, for loops, etc :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As shown above, indenting your code tell you when and what is nested inside what. Confusing? For example, you’ve asked WAP that takes the input of all elements of a 2D array. So simplest logic says, you’ll use a for/ while loop and inside that another for/while loop. So writing the code w/ proper indentation helps you in identifying the nesting level.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It shows scope :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s clear that if everything is indented you know the scope of variables. As in the above example, if the code’s indented, you can easily understand which variables are available where. And it also shows that where a specific block is starting and where it’s ending.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anyone reading your code can tell whats executing inside of what :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously, you’ll not use your own code in an isolated chamber for the lifetime, don’t say you will. You’ll obviously share your code (until you’re Windows/ Apple fanboy), and others will read it and may want to modify it. And in order to be able to modify, one must be able to understand the flow of execution of the program, which is possible only if the code is correctly formatted, commented and indented.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easier to read :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t think I need to explain this point. If you still want an explanation, read the above two examples again.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;From the above points, it is very clear that while writing even a 20 lines program, indentation saves a lot of time that one might waste in reading and understanding again. It also increases readability to others and well as the programmer. We have also understood the importance of writing good code with the best indentation and formatting practices. We need to remember that a proper indentation rule must be followed while coding so that the program is easily readable and maintainable in future. So we can conclude that indentation and formatting is an important part of programming practice and developers should follow It from the starting of their programming career.&lt;/p&gt;

&lt;p&gt;Nameste 🙏&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>syntex</category>
      <category>productivity</category>
      <category>pro</category>
    </item>
    <item>
      <title>Magia: GBA emulator written in golang.</title>
      <author>Akatsuki</author>
      <pubDate>Sat, 22 May 2021 04:42:08 +0000</pubDate>
      <link>https://dev.to/pokemium/magia-gba-emulator-written-in-golang-1i7n</link>
      <guid>https://dev.to/pokemium/magia-gba-emulator-written-in-golang-1i7n</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/pokemium/magia"&gt;https://github.com/pokemium/magia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/pokemium/magia"&gt;Magia&lt;/a&gt; is written in golang and ebiten!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/pokemium/magia"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N48Q_HER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xgkekozg7x7lfwxrjtw.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Creating a super simple Badge component in Angular using directives.</title>
      <author>Adithya Sreyaj</author>
      <pubDate>Sat, 22 May 2021 04:38:07 +0000</pubDate>
      <link>https://dev.to/angular/creating-a-super-simple-badge-component-in-angular-using-directives-ohc</link>
      <guid>https://dev.to/angular/creating-a-super-simple-badge-component-in-angular-using-directives-ohc</guid>
      <description>&lt;p&gt;So I'm back with another small post to show how you can leverage directives to do magical things in your Angular application. Directives are really powerful. Once you get to know about the, you can start leveraging it to move your imperative logic into directives.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-we-are-going-to-build"&gt;
  &lt;/a&gt;
  What we are going to build?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJHa2KF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7g2jczbk3ahfez19rdoq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJHa2KF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7g2jczbk3ahfez19rdoq.png" alt="Bade Component using directives"&gt;&lt;/a&gt;&lt;br&gt;
The component that we are going to build today is a very simple badge component. Badges are present in almost all of the UI frameworks I can think of. &lt;br&gt;
Badges are status descriptors that generally show information like the number of unread emails/notifications or maybe the number of selected items for deletion.&lt;/p&gt;

&lt;p&gt;We are going to use a pattern that is used by  &lt;a href="https://material.angular.io/"&gt;Angular Material&lt;/a&gt;. My intention with this post is to show you how these libraries do it. We just use what the library gives us, and most of the time we use it without actually knowing how it works.&lt;/p&gt;

&lt;p&gt;By the end of the post, you would definitely think Was it always this easy to make cool stuff? &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-directives"&gt;
  &lt;/a&gt;
  Why Directives?
&lt;/h2&gt;

&lt;p&gt;This is a very valid question that you can have. Why can't we just have a simple &lt;code&gt;div&lt;/code&gt; and then style it accordingly in our component? Well, you can do that. &lt;br&gt;
But when you want the same in multiple components, it's better to extract it out of the component and write it as a separate component.&lt;br&gt;
This way our component code would look much simpler.&lt;/p&gt;

&lt;p&gt;Directives can be easily added to HTML elements and it plays nicely with the template flow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button button-with-badge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My Button&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"badge some-class"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;18&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;badge=&lt;/span&gt;&lt;span class="s"&gt;"18"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My Button&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which do you think is better? &lt;/p&gt;

&lt;p&gt;Today we are going to build out &lt;code&gt;badge&lt;/code&gt; directive which adds a small badge on top of elements it's added to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planning-out"&gt;
  &lt;/a&gt;
  Planning out
&lt;/h2&gt;

&lt;p&gt;So what we ideally want the directive to do, is to add a new element with the badge content and then position it as &lt;code&gt;absolute&lt;/code&gt; to the host element. &lt;/p&gt;

&lt;p&gt;We need to create an element dynamically and attach it to the host element. Angular has just a thing for doing this sort of stuff. It's the &lt;code&gt;Renderer2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://angular.io/api/core/Renderer2#renderer2"&gt;Renderer2&lt;/a&gt;  is a class that provides us an elegant way to manipulate elements without having to touch the DOM directly. It's not advised to make direct changes to the DOM, instead, rely on this abstraction to manipulate elements. Why? This is especially helpful if your application used server-side rendering where you don't have access to DOM.&lt;/p&gt;

&lt;p&gt;So when we find that our &lt;code&gt;badge&lt;/code&gt; directive is attached to some element, we create a &lt;code&gt;span&lt;/code&gt; element and then append it to the host element. Simple, isn't it?&lt;/p&gt;

&lt;p&gt;Now let's see how we code it out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#badge-directive"&gt;
  &lt;/a&gt;
  Badge Directive
&lt;/h2&gt;

&lt;p&gt;As always, we start by creating a directive and a module for that directive. The module will declare and export our directive. So wherever we need to use our directive, just import the &lt;code&gt;BadgeModule&lt;/code&gt; and the directive should be available for use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CommonModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/common&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NgModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Badge&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./badge.directive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Badge&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;CommonModule&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Badge&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BadgeModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here are some customization options we will be providing to the directive:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sizes&lt;/li&gt;
&lt;li&gt;Badge Position&lt;/li&gt;
&lt;li&gt;Color Variants&lt;/li&gt;
&lt;li&gt;Custom Classes
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[badge]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Badge&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnChanges&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;badge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BadgeSizes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;medium&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BadgePositions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;top-right&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;customBadgeClasses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BadgeVariants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;secondary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Renderer2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;elRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;badge&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;badge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateBadgeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroyNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;updateBadgeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// If there is not badge element, create it&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createBadge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;createBadge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;badgeElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;span&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addClasses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;badge-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;addClasses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;vPos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hPos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;badge&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vPos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hPos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customBadgeClasses&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;customClasses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customBadgeClasses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;customClasses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;customClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;customClass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#code-breakdown"&gt;
  &lt;/a&gt;
  Code breakdown
&lt;/h2&gt;

&lt;p&gt;Once we set up all the needed &lt;code&gt;Inputs&lt;/code&gt; on the component, we create some functions that create the &lt;code&gt;span&lt;/code&gt; element and append it to the host.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;createBadge()&lt;/code&gt; the function is what is creating our badge and appending it to the host.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;badgeElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;span&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create the span element using the &lt;code&gt;createElement()&lt;/code&gt;(&lt;a href="https://angular.io/api/core/Renderer2#createelement"&gt;ref&lt;/a&gt;) method provided by &lt;code&gt;Renderer2&lt;/code&gt;. Then we add some classes to the span so we can style it later.&lt;br&gt;
We make use of the &lt;code&gt;addClass()&lt;/code&gt;(&lt;a href="https://angular.io/api/core/Renderer2#addclass"&gt;ref&lt;/a&gt;) method to do so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This sets the text inside the span, so we'll have something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"badge top right primary medium"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;20&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we append this span to the host element using the &lt;code&gt;appendChild()&lt;/code&gt;(&lt;a href="https://angular.io/api/core/Renderer2#appendchild"&gt;ref&lt;/a&gt;) method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;badgeElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tada! we have successfully created a span element and then attached it to our host element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TCptV0jX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk7lm836h9a8s2toep7p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TCptV0jX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk7lm836h9a8s2toep7p.png" alt="Badge attached to the host"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling"&gt;
  &lt;/a&gt;
  Styling
&lt;/h2&gt;

&lt;p&gt;Now you can style your badge to your liking. We attach classes for all the inputs like &lt;strong&gt;size&lt;/strong&gt;, &lt;strong&gt;variant&lt;/strong&gt;, &lt;strong&gt;position&lt;/strong&gt;, etc. So the styles can be targeted easily.&lt;br&gt;
Also, we add a &lt;code&gt;badge-container&lt;/code&gt; class to the host element so that we can add&lt;br&gt;
&lt;code&gt;position:relative&lt;/code&gt; to it.&lt;/p&gt;

&lt;p&gt;The directive also accepts custom classes if you want to do custom styling. You can pass it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;badge=&lt;/span&gt;&lt;span class="s"&gt;"12"&lt;/span&gt; &lt;span class="na"&gt;customBadgeClasses=&lt;/span&gt;&lt;span class="s"&gt;"custom-bagde my-badge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Online&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.badge-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.badge&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bg-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ellipsis&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.badge.primary&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--bg-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.badge.secondary&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--bg-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.badge.top&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.badge.bottom&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.badge.left&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.badge.right&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.badge.small&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.badge.medium&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;11px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.badge.large&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;28px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;28px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is how we use the directive in the template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;badge=&lt;/span&gt;&lt;span class="s"&gt;"4"&lt;/span&gt; &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;"small"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Test&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; 
      &lt;span class="na"&gt;badge=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt; 
      &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;"medium"&lt;/span&gt; 
      &lt;span class="na"&gt;position=&lt;/span&gt;&lt;span class="s"&gt;"top-left"&lt;/span&gt;
      &lt;span class="na"&gt;variation=&lt;/span&gt;&lt;span class="s"&gt;"secondary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Test&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also make sure to remove the element if the directive is destroyed.&lt;br&gt;
The above code can be optimized and also new features can be added to it, I'll leave you all to it. I just wanted to showcase how it was done and I hope I was able to do it with this blog post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/ene1t"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://codesandbox.io/embed/ng-custom-badge-ene1t"&gt;https://codesandbox.io/embed/ng-custom-badge-ene1t&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/AdiSreyaj"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adisreyaj"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do add your thoughts in the comments section.&lt;br&gt;
Stay Safe ❤️&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Rutas Relativas en JavaScript utilizando VSCode</title>
      <author>mrLuisFer</author>
      <pubDate>Sat, 22 May 2021 03:25:11 +0000</pubDate>
      <link>https://dev.to/mrluisfer/rutas-relativas-en-javascript-utilizando-vscode-5c7f</link>
      <guid>https://dev.to/mrluisfer/rutas-relativas-en-javascript-utilizando-vscode-5c7f</guid>
      <description>&lt;p&gt;Cuando tenemos un proyecto utilizando JavaScript o algún Framework como React, utilizamos el modulo &lt;code&gt;Import { } from ''&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Por ejemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../../components/Component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// Ö&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../../assets/principal/logo.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lo cual cuando tienes múltiples directorios y archivos se vuelve muy algo tedioso cuando necesitas importar algo&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtECP96g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fd00vmqf2ah1dwulz7aw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtECP96g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fd00vmqf2ah1dwulz7aw.png" alt="Multiples rutas importadas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Incluso puede suceder que por algún refactor muevas una carpeta a un nivel mas arriba, por ejemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../../assets/principal/logo.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// Y lo cambian a...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../../assets/logo.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Entonces tendríamos un error en todos los archivos donde importemos este "Logo" o Componente ya que la ruta no funcionara y no encontrara nuestro archivo que deseamos&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpD0wCTY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqkcd5amyd47r354rawr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpD0wCTY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqkcd5amyd47r354rawr.png" alt="Error de Visual Studio Code en React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por ejemplo, en la imagen de arriba nos mostrara que el modulo no fue encontrado o no se resolvió la ruta de donde importamos el archivo&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#por-suerte-existe-una-soluci%C3%B3n-d"&gt;
  &lt;/a&gt;
  Por suerte existe una solución :D
&lt;/h2&gt;

&lt;p&gt;Debemos crear en la ruta &lt;strong&gt;raiz&lt;/strong&gt; de nuestro proyecto un archivo &lt;code&gt;jsconfig.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Y dentro pondremos la siguiente estructura:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;compilerOptions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
 &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;include&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
 &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exclude&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#compileroptions"&gt;
  &lt;/a&gt;
  compilerOptions
&lt;/h3&gt;

&lt;p&gt;Son las opciones que le pasaremos al compilador que usemos de nuestro proyecto JavaScript&lt;/p&gt;

&lt;p&gt;Como la ruta base de nuestro proyecto, la versión de ecmascript que estemos usando&lt;/p&gt;

&lt;p&gt;Esto se refiere a si usamos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// Ó&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#include"&gt;
  &lt;/a&gt;
  Include
&lt;/h3&gt;

&lt;p&gt;Aquí es donde pasaremos la carpeta que hara referencia a nuestra ruta&lt;/p&gt;

&lt;p&gt;Por ejemplo si usamos la carpeta comúnmente usada &lt;code&gt;**src&lt;/code&gt;** &lt;/p&gt;

&lt;p&gt;Haremos referencia a ese directorio&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exclude"&gt;
  &lt;/a&gt;
  Exclude
&lt;/h3&gt;

&lt;p&gt;Lo que hace esta opción es excluir o ignorar las carpetas que le pasemos dentro de las opciones&lt;/p&gt;

&lt;p&gt;Por ejemplo la famosa carpeta de agujero negro, &lt;code&gt;node_modules&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ya que solo queremos que nuestros archivos de desarrollo tengan las rutas relativas&lt;/p&gt;

&lt;p&gt;Entonces con todo esto listo nuestro archivo se vería algo así:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;compilerOptions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;baseUrl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;target&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;es6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;include&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exclude&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node_modules&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Muy entonces dentro de nuestro proyecto podemos importar desde algún directorio que este dentro de &lt;code&gt;src&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Con esto estaría listo, cabe resaltar que algunos compiladores aun no aceptan por completo este tipo de archivo lo cual es raro ya que es una configuración de JavaScript pero aun así puedes intentarlo en tu proyecto :D&lt;/p&gt;

&lt;p&gt;Tambien puedes establecer rutas especificas dentro de otras carpetas agregando dentro de &lt;code&gt;compilerOptions&lt;/code&gt; la propiedad llamada &lt;strong&gt;paths&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Aquí un ejemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// El nombre de la izquierda puede ser cualquiera&lt;/span&gt;
&lt;span class="c1"&gt;// Solo que sea algo sencillo de entender&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;paths&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src/components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;carpeta&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src/carpeta/otraCarpeta&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y en tu archivo jsconfig.json se vería algo así:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i2lRZHeu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn67nzcparrwlzea2rv8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i2lRZHeu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn67nzcparrwlzea2rv8.png" alt="Archivo jsconfig.json"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ahora en caso estés utilizando &lt;strong&gt;Typescript&lt;/strong&gt; el proceso es el mismo solo que tu archivo deberá llamarse: &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Si deseas aprender y conocer muchas mas opciones puedes leer la documentacion oficial y aunque sea de Visual Studio Code, puede ser usada en cualquier editor como Vim, Sublime Text, Atom, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/docs/languages/jsconfig"&gt;🔗Documentacion Oficial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dime en los comentarios que te pareció, o si tienes algún error para ayudarte 💫&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vscode</category>
      <category>typescript</category>
      <category>react</category>
    </item>
    <item>
      <title>Do you want to or do you have to?</title>
      <author>rounakcodes</author>
      <pubDate>Sat, 22 May 2021 02:50:26 +0000</pubDate>
      <link>https://dev.to/rounakcodes/do-you-want-to-or-do-you-have-to-4f6i</link>
      <guid>https://dev.to/rounakcodes/do-you-want-to-or-do-you-have-to-4f6i</guid>
      <description>&lt;p&gt;A jubilant "Friday" meme made me write this. &lt;br&gt;
For more than 7 years, my work was something which I &lt;em&gt;had&lt;/em&gt; to do.&lt;br&gt;
I used to check the time every few minutes as soon as the second half started and wait for the clock to tell me when I could go home. I started counting the days left for the weekend to arrive as soon as the middle of the week was reached. I used to go late (was self employed) on Mondays to ease the pain of a new week of hardship. Eventually, when I had ruined enough of my life's time, at 31 I switched to professionally doing what I always loved to do: coding.&lt;/p&gt;

&lt;p&gt;Now, for the last four years, I work everyday, every possible minute I can. I take leaves only when I have dived too deep into a particular subject or tool and do not want to get interrupted with new tasks. I feel privileged to get paid for what I would have always done anyway, and I remind myself of this when I am feeling low.&lt;br&gt;
Yes, there are issues at work, will always be the case when you work with people, but I keep my focus on the machine and the results I produce shadow those issues.&lt;/p&gt;

&lt;p&gt;I wish everyone &lt;em&gt;had&lt;/em&gt; (or &lt;em&gt;created&lt;/em&gt; with savings) this opportunity to do what they truly want to, the results produced will cover up all other shortcomings. &lt;/p&gt;

&lt;p&gt;Even if you start late in life, you can race ahead of a very large percentage of people because they &lt;em&gt;have&lt;/em&gt; to do what they are doing. Your year's worth of effort will be far more than theirs and the difference will only increase exponentially with each passing year.&lt;/p&gt;

</description>
      <category>work</category>
      <category>job</category>
      <category>passion</category>
      <category>life</category>
    </item>
  </channel>
</rss>
