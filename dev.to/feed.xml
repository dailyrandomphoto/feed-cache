<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Advanced typescript for React developers</title>
      <author>Nadia Makarevich</author>
      <pubDate>Wed, 08 Dec 2021 18:01:20 +0000</pubDate>
      <link>https://dev.to/adevnadia/advanced-typescript-for-react-developers-8kc</link>
      <guid>https://dev.to/adevnadia/advanced-typescript-for-react-developers-8kc</guid>
      <description>&lt;p&gt;This is the second article in the series ‚Äútypescript for React developers‚Äù. In the first one, we figured out what Typescript generics are and how to use them to write re-usable react components: &lt;a href="/posts/typescript-generics-for-react-developers"&gt;Typescript Generics for React developers&lt;/a&gt;. Now it‚Äôs time to dive into other advanced typescript concepts and understand how and why we need things like &lt;strong&gt;type guards&lt;/strong&gt;, &lt;strong&gt;keyof&lt;/strong&gt;, &lt;strong&gt;typeof&lt;/strong&gt;, &lt;strong&gt;is&lt;/strong&gt;, &lt;strong&gt;as const&lt;/strong&gt; and &lt;strong&gt;indexed types&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As we found out from the article above, Judi is an ambitious developer and wants to implement her own online shop, a competitor to Amazon: she‚Äôs going to sell everything there! We left her when she implemented a re-usable select component with typescript generics. The component is pretty basic: it allows to pass an array of &lt;code&gt;values&lt;/code&gt;, assumes that those values have &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; for rendering select options, and have an &lt;code&gt;onChange&lt;/code&gt; handler to listen to the selected values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Base = {
  id: string;
  title: string;
};

type GenericSelectProps&amp;lt;TValue&amp;gt; = {
  values: TValue[];
  onChange: (value: TValue) =&amp;gt; void;
};

export const GenericSelect = &amp;lt;TValue extends Base&amp;gt;({ values, onChange }: GenericSelectProps&amp;lt;TValue&amp;gt;) =&amp;gt; {
  const onSelectChange = (e) =&amp;gt; {
    const val = values.find((value) =&amp;gt; value.id === e.target.value);

    if (val) onChange(val);
  };

  return (
    &amp;lt;select onChange={onSelectChange}&amp;gt;
      {values.map((value) =&amp;gt; (
        &amp;lt;option key={value.id} value={value.id}&amp;gt;
          {value.title}
        &amp;lt;/option&amp;gt;
      ))}
    &amp;lt;/select&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then this component can be used with any data types Judi has in her application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;GenericSelect&amp;lt;Book&amp;gt; onChange={(value) =&amp;gt; console.log(value.author)} values={books} /&amp;gt;
&amp;lt;GenericSelect&amp;lt;Movie&amp;gt; onChange={(value) =&amp;gt; console.log(value.releaseDate)} values={movies} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although, as the shop grew, she quickly found out that &lt;em&gt;any&lt;/em&gt; data type is an exaggeration: we are still limited since we assume that our data will always have &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; there. But now Judi wants to sell laptops, and laptops have &lt;code&gt;model&lt;/code&gt; instead of &lt;code&gt;title&lt;/code&gt; in their data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Laptop = {
  id: string;
  model: string;
  releaseDate: string;
}

// This will fail, since there is no "title" in the Laptop type
&amp;lt;GenericSelect&amp;lt;Laptop&amp;gt; onChange={(value) =&amp;gt; console.log(value.model)} values={laptops} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ideally, Judi wants to avoid data normalization just for select purposes and make the select component more generic instead. What can she do?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering-not-only-titles-in-options"&gt;
  &lt;/a&gt;
  Rendering not only titles in options
&lt;/h2&gt;

&lt;p&gt;Judi decides, that just passing the desired attribute as a prop to the select component would be enough to fulfil her needs for the time being. Basically, she‚Äôd have something like this in its API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;GenericSelect&amp;lt;Laptop&amp;gt; titleKey="model" {...} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the select component would then render Laptop models instead of titles in the options.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MxHus3b2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shcks3572ynz1btnrrsv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MxHus3b2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shcks3572ynz1btnrrsv.png" alt="Image description" width="880" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It would work, but there is one problem with this: not type-safe üôÇ. Ideally, we would want typescript to fail if this attribute doesn‚Äôt exist in the data model that is used in the select component. This is where typescript‚Äôs &lt;a href="https://www.typescriptlang.org/docs/handbook/2/keyof-types.html"&gt;&lt;strong&gt;keyof&lt;/strong&gt;&lt;/a&gt; operator comes in handy.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;keyof&lt;/code&gt; basically generates a type from an object‚Äôs keys. If I use &lt;code&gt;keyof&lt;/code&gt; on &lt;code&gt;Laptop&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Laptop = {
  id: string;
  model: string;
  releaseDate: string;
}

type LaptopKeys = keyof Laptop;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in &lt;code&gt;LaptopKeys&lt;/code&gt; I‚Äôll find a union of its keys: &lt;code&gt;"id" | "model" | "releaseDate"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And, most amazingly, typescript is smart enough to generate those types for generics as well! This will work perfectly:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZxrJi2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj71kq325grvhgbgjdc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZxrJi2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj71kq325grvhgbgjdc5.png" alt="Image description" width="880" height="132"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now I can use it with all selects and typescript will catch any typos or copy-paste errors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;GenericSelect&amp;lt;Laptop&amp;gt; titleKey="model" {...} /&amp;gt;
// inside GenericSelect "titleKey" will be typed to "id" | "model" | "releaseDate"

&amp;lt;GenericSelect&amp;lt;Book&amp;gt; titleKey="author" {...} /&amp;gt;
// inside GenericSelect "titleKey" will be typed to "id" | "title" | "author"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we can make the type &lt;code&gt;Base&lt;/code&gt; a little bit more inclusive and make the &lt;code&gt;title&lt;/code&gt; optional&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Base = {
  id: string;
  title?: string;
}

export const GenericSelect = &amp;lt;TValue extends Base&amp;gt;(props: GenericSelectProps&amp;lt;TValue&amp;gt;) =&amp;gt; {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/vigorous-neumann-0w1ti?file=/src/select.tsx"&gt;See full working example in codesandbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important&lt;/em&gt;: Although this example works perfectly, I would not recommend using it in actual apps. It lacks a bit of elegance and is not generic enough &lt;em&gt;yet&lt;/em&gt;. Read until the end of the article for a better example of a select component with customizable labels.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-list-of-categories-refactor-select"&gt;
  &lt;/a&gt;
  The list of categories - refactor select
&lt;/h2&gt;

&lt;p&gt;Now, that we have lists of goods covered with our generic select, it‚Äôs time to solve other problems on Judi‚Äôs website. One of them is that she has her catalog page clattered with all the selects and additional information that she shows when a value is selected. What she needs, she decides, is to split it into categories, and only show one category at a time. She again wants to use the generic select for it (well, who‚Äôs not lazy in this industry, right?).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bJ0qQ8M---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soql4jmh06f7u5la5ng5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJ0qQ8M---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soql4jmh06f7u5la5ng5.png" alt="Image description" width="880" height="561"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The categories is just a simple array of strings: &lt;code&gt;const categories = ['Books', 'Movies', 'Laptops'].&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, our current generic select unfortunately doesn‚Äôt work with string values. Let‚Äôs fix it! And interestingly enough, this seems-to-be-simple implementation will allow us to get familiar with five new advanced typescript technics: operators &lt;strong&gt;as const&lt;/strong&gt;, &lt;strong&gt;typeof&lt;/strong&gt;, &lt;strong&gt;is&lt;/strong&gt;, &lt;strong&gt;type guards&lt;/strong&gt; idea and &lt;strong&gt;indexed types&lt;/strong&gt;. But let‚Äôs start with the existing code and take a closer look at where exactly we depend on the &lt;code&gt;TValue&lt;/code&gt; type to be an object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ehPC6fqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqd5iltwqucvm9w1xz38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ehPC6fqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqd5iltwqucvm9w1xz38.png" alt="Image description" width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After careful examination of this picture, we can extract three major changes that we need to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Convert &lt;code&gt;Base&lt;/code&gt; type into something that understands strings as well as objects&lt;/li&gt;
&lt;li&gt;Get rid of reliance on &lt;code&gt;value.id&lt;/code&gt; as the unique identificator of the value in the list of options&lt;/li&gt;
&lt;li&gt;Convert &lt;code&gt;value[titleKey]&lt;/code&gt; into something that understands strings as well&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this step-by-step approach to refactoring, the next moves are more or less obvious.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;. Convert &lt;code&gt;Base&lt;/code&gt; into a union type (i.e. just a fancy ‚Äúor‚Äù operator for types) and get rid of &lt;code&gt;title&lt;/code&gt; there completely:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Base = { id: string } | string;

// Now "TValue" can be either a string, or an object that has an "id" in it
export const GenericSelect = &amp;lt;TValue extends Base&amp;gt;(props: GenericSelectProps&amp;lt;TValue&amp;gt;) =&amp;gt; {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;. Get rid of direct access of &lt;code&gt;value.id&lt;/code&gt; . We can do that by converting all those calls to a function &lt;code&gt;getStringFromValue&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bTlPJOv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cl731n6xst2f7sqrgl1t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bTlPJOv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cl731n6xst2f7sqrgl1t.png" alt="Image description" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;where the very basic implementation from the before-typescript era would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getStringFromValue = (value) =&amp;gt; value.id || value;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is not going to fly with typescript though: remember, our &lt;code&gt;value&lt;/code&gt; is Generic and can be a string as well as an object, so we need to help typescript here to understand what exactly it is before accessing anything specific.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Base = { id: string } | string;

const getStringFromValue = &amp;lt;TValue extends Base&amp;gt;(value: TValue) =&amp;gt; {
  if (typeof value === 'string') {
    // here "value" will be the type of "string"
    return value;
  }

  // here "value" will be the type of "NOT string", in our case { id: string }
  return value.id;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code in the function is known as &lt;a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html"&gt;&lt;strong&gt;type guard&lt;/strong&gt;&lt;/a&gt; in typescript: an expression that narrows down type within some scope. See what is happening? First, we check whether the &lt;code&gt;value&lt;/code&gt; is a string by using the standard javascript &lt;code&gt;typeof&lt;/code&gt; operator. Now, within the ‚Äútruthy‚Äù branch of &lt;code&gt;if&lt;/code&gt; expression, typescript will know for sure that value is a string, and we can do anything that we‚Äôd usually do with a string there. Outside of it, typescript will know for sure, that the value is &lt;strong&gt;not&lt;/strong&gt; a string, and in our case, it means it‚Äôs an object with an &lt;code&gt;id&lt;/code&gt; in it. Which allows us to return &lt;code&gt;value.id&lt;/code&gt; safely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;. Refactor the &lt;code&gt;value[titleKey]&lt;/code&gt; access. Considering that a lot of our data types would want to customise their labels, and more likely than not in the future we‚Äôd want to convert it to be even more custom, with icons or special formatting, the easiest option here is just to move the responsibility of extracting required information to the consumer. This can be done by passing a function to select that converts value on the consumer side to a string (or ReactNode in the future). No typescript mysteries here, just normal React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type GenericSelectProps&amp;lt;TValue&amp;gt; = {
  formatLabel: (value: TValue) =&amp;gt; string;
  ...
};

export const GenericSelect = &amp;lt;TValue extends Base&amp;gt;(props: GenericSelectProps&amp;lt;TValue&amp;gt;) =&amp;gt; {
  ...
  return (
    &amp;lt;select onChange={onSelectChange}&amp;gt;
      {values.map((value) =&amp;gt; (
        &amp;lt;option key={getStringFromValue(value)} value={getStringFromValue(value)}&amp;gt;
          {formatLabel(value)}
        &amp;lt;/option&amp;gt;
      ))}
    &amp;lt;/select&amp;gt;
  );
}

// Show movie title and release date in select label
&amp;lt;GenericSelect&amp;lt;Movie&amp;gt; ... formatLabel={(value) =&amp;gt; `${value.title} (${value.releaseDate})`} /&amp;gt;

// Show laptop model and release date in select label
&amp;lt;GenericSelect&amp;lt;Laptop&amp;gt; ... formatLabel={(value) =&amp;gt; `${value.model, released in ${value.releaseDate}`} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we have it! A perfect generic select, that supports all data formats that we need and allows us to fully customise labels as a nice bonus. The full code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Base = { id: string } | string;

type GenericSelectProps&amp;lt;TValue&amp;gt; = {
  formatLabel: (value: TValue) =&amp;gt; string;
  onChange: (value: TValue) =&amp;gt; void;
  values: TValue[];
};

const getStringFromValue = &amp;lt;TValue extends Base&amp;gt;(value: TValue) =&amp;gt; {
  if (typeof value === 'string') return value;

  return value.id;
};

export const GenericSelect = &amp;lt;TValue extends Base&amp;gt;(props: GenericSelectProps&amp;lt;TValue&amp;gt;) =&amp;gt; {
  const { values, onChange, formatLabel } = props;

  const onSelectChange = (e) =&amp;gt; {
    const val = values.find((value) =&amp;gt; getStringFromValue(value) === e.target.value);

    if (val) onChange(val);
  };

  return (
    &amp;lt;select onChange={onSelectChange}&amp;gt;
      {values.map((value) =&amp;gt; (
        &amp;lt;option key={getStringFromValue(value)} value={getStringFromValue(value)}&amp;gt;
          {formatLabel(value)}
        &amp;lt;/option&amp;gt;
      ))}
    &amp;lt;/select&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-list-of-categories-implementation"&gt;
  &lt;/a&gt;
  The list of categories - implementation
&lt;/h2&gt;

&lt;p&gt;And now, finally, time to implement what we refactored the select component for in the first place: categories for the website. As always, let‚Äôs start simple, and improve things in the process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tabs = ['Books', 'Movies', 'Laptops'];

const getSelect = (tab: string) =&amp;gt; {
  switch (tab) {
    case 'Books':
      return &amp;lt;GenericSelect&amp;lt;Book&amp;gt; onChange={(value) =&amp;gt; console.info(value)} values={books} /&amp;gt;;
    case 'Movies':
      return &amp;lt;GenericSelect&amp;lt;Movie&amp;gt; onChange={(value) =&amp;gt; console.info(value)} values={movies} /&amp;gt;;
    case 'Laptops':
      return &amp;lt;GenericSelect&amp;lt;Laptop&amp;gt; onChange={(value) =&amp;gt; console.info(value)} values={laptops} /&amp;gt;;
  }
}

const Tabs = () =&amp;gt; {
  const [tab, setTab] = useState&amp;lt;string&amp;gt;(tabs[0]);

  const select = getSelect(tab);


  return (
    &amp;lt;&amp;gt;
      &amp;lt;GenericSelect&amp;lt;string&amp;gt; onChange={(value) =&amp;gt; setTab(value)} values={tabs} /&amp;gt;
      {select}
    &amp;lt;/&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dead simple - one select component for choosing a category, based on the chosen value - render another select component.&lt;/p&gt;

&lt;p&gt;But again, not exactly typesafe, this time for the tabs: we typed them as just simple &lt;code&gt;string&lt;/code&gt;. So a simple typo in the &lt;code&gt;switch&lt;/code&gt; statement will go unnoticed or a wrong value in &lt;code&gt;setTab&lt;/code&gt; will result in a non-existent category to be chosen. Not good.&lt;/p&gt;

&lt;p&gt;And again, typescript has a handy mechanism to improve that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tabs = ['Books', 'Movies', 'Laptops'] as const;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This trick is known as &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions"&gt;&lt;strong&gt;const assertion&lt;/strong&gt;&lt;/a&gt;. With this, our &lt;code&gt;tabs&lt;/code&gt; array, instead of an array of any random string will turn into a read-only array of those specific values and nothing else.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// an array of values type "string"
const tabs = ['Books', 'Movies', 'Laptops'];

tabs.forEach(tab =&amp;gt; {
  // typescript is fine with that, although there is no "Cats" value in the tabs
  if (tab === 'Cats') console.log(tab)
})

// an array of values 'Books', 'Movies' or 'Laptops', and nothing else
const tabs = ['Books', 'Movies', 'Laptops'] as const;

tabs.forEach(tab =&amp;gt; {
  // typescript will fail here since there are no Cats in tabs
  if (tab === 'Cats') console.log(tab)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, all we need to do is to extract type &lt;code&gt;Tab&lt;/code&gt; that we can pass to our generic select. First, we can extract the &lt;code&gt;Tabs&lt;/code&gt; type by using the &lt;a href="https://www.typescriptlang.org/docs/handbook/2/typeof-types.html"&gt;&lt;strong&gt;typeof&lt;/strong&gt;&lt;/a&gt; operator, which is pretty much the same as normal javascript &lt;code&gt;typeof&lt;/code&gt;, only it operates on types, not values. This is where the value of &lt;code&gt;as const&lt;/code&gt; will be more visible:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tabs = ['Books', 'Movies', 'Laptops'];
type Tabs = typeof tabs; // Tabs will be string[];

const tabs = ['Books', 'Movies', 'Laptops'] as const;
type Tabs = typeof tabs; // Tabs will be ['Books' | 'Movies' | 'Laptops'];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second, we need to extract &lt;code&gt;Tab&lt;/code&gt; type from the Tabs array. This trick is called &lt;a href="https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html"&gt;&lt;strong&gt;‚Äúindexed access‚Äù&lt;/strong&gt;&lt;/a&gt;, it‚Äôs a way to access types of properties or individual elements (if array) of another type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Tab = Tabs[number]; // Tab will be 'Books' | 'Movies' | 'Laptops'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Same trick will work with object types, for example we can extract Laptop‚Äôs id into its own type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type LaptopId = Laptop['id']; // LaptopId will be string
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, that we have a type for individual Tabs, we can use it to type our categories logic:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ySTyRutY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2honjrewwmwhin6d5tg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ySTyRutY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2honjrewwmwhin6d5tg.png" alt="Image description" width="880" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now all the typos or wrong values will be caught by typescript! üí•&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/eager-brook-vuj8d?file=/src/tabs.tsx"&gt;See full working example in the codesandbox&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-type-guards-and-is-operator"&gt;
  &lt;/a&gt;
  Bonus: type guards and ‚Äúis‚Äù operator
&lt;/h2&gt;

&lt;p&gt;There is another very interesting thing you can do with type guards. Remember our &lt;code&gt;getStringFromValue&lt;/code&gt; function?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Base = { id: string } | string;

const getStringFromValue = &amp;lt;TValue extends Base&amp;gt;(value: TValue) =&amp;gt; {
  if (typeof value === 'string') {
    // here "value" will be the type of "string"
    return value;
  }

  // here "value" will be the type of "NOT string", in our case { id: string }
  return value.id;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While &lt;code&gt;if (typeof value === ‚Äòstring')&lt;/code&gt; check is okay for this simple example, in a real-world application you'd probably want to abstract it away into &lt;code&gt;isStringValue&lt;/code&gt;, and refactor the code to be something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Base = { id: string } | string;

const isStringValue = &amp;lt;TValue&amp;gt;(value: TValue) =&amp;gt; return typeof value === 'string';

const getStringFromValue = &amp;lt;TValue extends Base&amp;gt;(value: TValue) =&amp;gt; {
  if (isStringValue(value)) {
    // do something with the string
  }

  // do something with the object
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And again the same story as before, there is one problem with the most obvious solution: it‚Äôs not going to work. As soon as type guard condition is extracted into a function like that, it loses its type guarding capabilities. From typescript perspective, it‚Äôs now just a random function that returns a regular boolean value, it doesn‚Äôt know what‚Äôs inside. We‚Äôll have this situation now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getStringFromValue = &amp;lt;TValue extends Base&amp;gt;(value: TValue) =&amp;gt; {
  if (isStringValue(value)) { // it's just a random function that returns boolean
    // type here will be unrestricted, either string or object
  }

  // type here will be unrestricted, either string or object
  // can't return "value.id" anymore, typescript will fail
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And again, there is a way to fix it by using yet another typescript concept known as &lt;a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates"&gt;&lt;strong&gt;‚Äútype predicates‚Äù&lt;/strong&gt;&lt;/a&gt;. Basically, it‚Äôs a way to manually do for the function what typescript was able to do by itself before refactoring. Looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type T = { id: string };
// can't extend Base here, typescript doesn't handle generics here well
export const isStringValue = &amp;lt;TValue extends T&amp;gt;(value: TValue | string): value is string =&amp;gt; {
  return typeof value === 'string';
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the &lt;code&gt;value is string&lt;/code&gt; there? This is the predicate. The pattern is &lt;code&gt;argName is Type&lt;/code&gt;, it can be attached &lt;strong&gt;only&lt;/strong&gt; to a function with a single argument that returns a boolean value. This expression can be roughly translated into "when this function returns true, assume the value within your execution scope as &lt;code&gt;string&lt;/code&gt; type". So with the predicate, the refactoring will be complete and fully functioning:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type T = { id: string };
type Base = T | string;

export const isStringValue = &amp;lt;TValue extends T&amp;gt;(value: TValue | string): value is string =&amp;gt; {
  return typeof value === 'string';
};

const getStringFromValue = &amp;lt;TValue extends Base&amp;gt;(value: TValue) =&amp;gt; {
  if (isStringValue(value)) {
    // do something with the string
  }

  // do something with the object
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A pattern like this is especially useful when you have a possibility of different types of data in the same function and you need to do distinguish between them during runtime. In our case, we could define &lt;code&gt;isSomething&lt;/code&gt; function for every one of our data types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export type DataTypes = Book | Movie | Laptop | string;

export const isBook = (value: DataTypes): value is Book =&amp;gt; {
  return typeof value !== 'string' &amp;amp;&amp;amp; 'id' in value &amp;amp;&amp;amp; 'author' in value;
};
export const isMovie = (value: DataTypes): value is Movie =&amp;gt; {
  return typeof value !== 'string' &amp;amp;&amp;amp; 'id' in value &amp;amp;&amp;amp; 'releaseDate' in value &amp;amp;&amp;amp; 'title' in value;
};
export const isLaptop = (value: DataTypes): value is Laptop =&amp;gt; {
  return typeof value !== 'string' &amp;amp;&amp;amp; 'id' in value &amp;amp;&amp;amp; 'model' in value;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then implement a function that returns option labels for our selects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const formatLabel = (value: DataTypes) =&amp;gt; {
  // value will be always Book here since isBook has predicate attached
  if (isBook(value)) return value.author;

  // value will be always Movie here since isMovie has predicate attached
  if (isMovie(value)) return value.releaseDate;

  // value will be always Laptop here since isLaptop has predicate attached
  if (isLaptop(value)) return value.model;

  return value;
};

// somewhere in the render
&amp;lt;GenericSelect&amp;lt;Book&amp;gt; ... formatLabel={formatLabel} /&amp;gt;
&amp;lt;GenericSelect&amp;lt;Movie&amp;gt; ... formatLabel={formatLabel} /&amp;gt;
&amp;lt;GenericSelect&amp;lt;Laptop&amp;gt; ... formatLabel={formatLabel} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/immutable-wildflower-n4r8z?file=/src/tabs.tsx"&gt;see fully working example in the codesandbox&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-for-goodbye"&gt;
  &lt;/a&gt;
  Time for goodbye
&lt;/h2&gt;

&lt;p&gt;It‚Äôs amazing, how many advanced typescript concepts we had to use to implement something as simple as a few selects! But it‚Äôs for the better typing world, so I think it‚Äôs worth it. Let‚Äôs recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;‚Äúkeyof‚Äù&lt;/strong&gt; - use it to generate types from keys of another type&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;‚Äúas const‚Äù&lt;/strong&gt; - use it to signal to typescript to treat an array or an object as a constant. Use it with combination with &lt;strong&gt;‚Äútype of‚Äù&lt;/strong&gt; to generate actual type from it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;‚Äútypeof‚Äù&lt;/strong&gt; - same as normal javascript &lt;code&gt;‚Äútypeof‚Äù&lt;/code&gt;, but operates on types rather than values&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Type['attr']&lt;/code&gt; or &lt;code&gt;Type[number]&lt;/code&gt; - those are &lt;strong&gt;indexed types&lt;/strong&gt;, use them to access subtypes in an Object or an Array respectively&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;argName is Type&lt;/code&gt; - &lt;strong&gt;type predicate&lt;/strong&gt;, use it to turn a function into a safeguard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And now it‚Äôs time to build a better, typesafe future, and we‚Äôre ready for it!&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;Originally published at &lt;a href="https://www.developerway.com"&gt;https://www.developerway.com&lt;/a&gt;. Check out the website for more articles like this. Subscribe to the newsletter to get notified as soon as the next article comes out.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Day 84/100 CSS Color</title>
      <author>Rio Cantre</author>
      <pubDate>Wed, 08 Dec 2021 17:58:12 +0000</pubDate>
      <link>https://dev.to/riocantre/day-84100-css-color-1dch</link>
      <guid>https://dev.to/riocantre/day-84100-css-color-1dch</guid>
      <description>&lt;p&gt;A variety of color selection, not only specify colors in general but evaluate the whole concept of color syntax and usage of mixtures in details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IILl55Sp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykxrorp781ah5wulj1pc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IILl55Sp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykxrorp781ah5wulj1pc.png" alt="banner" width="726" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Colors in CSS can be described in three different ways:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Named colors&lt;/em&gt; ‚Äî English words that describe colors, also called &lt;em&gt;keyword colors&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;RGB&lt;/em&gt; ‚Äî numeric values that describe a mix of red, green, and blue&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;HSL&lt;/em&gt; ‚Äî numeric values that describe a mix of hue, saturation, and lightness&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dog-years"&gt;
  &lt;/a&gt;
  Dog Years
&lt;/h2&gt;

&lt;p&gt;Dogs mature at a faster rate than human beings. We often say a dog‚Äôs age can be calculated in ‚Äúdog years‚Äù to account for their growth compared to a human of the same age. In some ways we could say, time moves quickly for dogs ‚Äî 8 years in a human‚Äôs life equates to 45 years in a dog‚Äôs life. How old would you be if you were a dog?&lt;/p&gt;

&lt;p&gt;Here‚Äôs how you convert your age from ‚Äúhuman years‚Äù to ‚Äúdog years‚Äù:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first two years of a dog‚Äôs life count as 10.5 dog years each.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each year following equates to 4 dog years.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#code-snippets"&gt;
  &lt;/a&gt;
  Code Snippets
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// current age
var myAge = 30;
// number of years
var earlyYears = 2;
earlyYears *= 10.5;

let laterYears = myAge - earlyYears;
laterYears *= 4;
let dogYear = laterYears * 4;
let myAgeInDogYears = earlyYears + laterYears;

let myName = 'Riolette'.toLowerCase();

console.log(earlyYears);
console.log(laterYears);
console.log(dogYear);
console.log(myAgeInDogYears);
console.log(myName);
console.log(`My name is ${myName}. I am ${myAge} years old in human years which is ${myAgeInDogYears} years old in dog years.`);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a11y-myths"&gt;
  &lt;/a&gt;
  a11y myths
&lt;/h2&gt;

&lt;p&gt;*&lt;em&gt;We can quickly add accessibility before the release *&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Won't work. Maybe easy things such as alternative text or form labeling may be added at the end, but some complex UX should be planned to be accessible. In some cases, making features accessible at the end of development process may require the full refactoring. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/newsletter/222-a-note-about-color-variables/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3DCVqqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stlk1tns4zh7robhiygt.png" alt="resource" width="726" height="78"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>css</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Climatetech looking for a CTO</title>
      <author>adrien_climate</author>
      <pubDate>Wed, 08 Dec 2021 17:46:45 +0000</pubDate>
      <link>https://dev.to/adrienavril/climatetech-looking-for-a-cto-3j0d</link>
      <guid>https://dev.to/adrienavril/climatetech-looking-for-a-cto-3j0d</guid>
      <description>&lt;p&gt;Hello everyone, I'm Adrien (blue shirt), I'm looking at a CTO for our ClimateTech.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I'm the cofounder of adapt, a tool that helps our thousand of users to reduce the GHG emission of their energy consumption by visualising the "electricity weather forecast". Our users in Europe consume electricity wisely : they reduce consumption when carbon intensity is higher ("peak demand"), and they post pone some electricity consumption when carbon intensity is lower (e.g. "smartcharging of electric vehicles"). Our beta tool works with manual actions of our users, and we're automatising the process for significant electric uses (e.g. HVAC &amp;amp; EV charging) and GHG emissions reduction calculation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Our beta is available here: &lt;a href="https://dev.tourl"&gt;www.adapt.sh&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I started adapt with a friend of mine, working as part-time full stack developer, and we now have a junior full stack developer and some freelances. We have thousands of users and are working on some really interesting pilot projects with energy organisations. We're a non-profit and we're looking at a CTO willing to dedicate its coding skills to fighting climate change! Please send me an email at adrien [at] adapt.sh&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Our current tech FYI: Languages: css (especially twitter bootstrap 4), javascript (very little...), php 7.x ; Framework: symfony 4.x ; Web hosting: docker (local), AWS elasticbeanstalk (production)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks in advance!&lt;/p&gt;

</description>
      <category>php</category>
      <category>career</category>
      <category>startup</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Mocking the AWS SDK With Go</title>
      <author>Daniel Quackenbush</author>
      <pubDate>Wed, 08 Dec 2021 17:22:35 +0000</pubDate>
      <link>https://dev.to/danquack/mocking-the-aws-sdk-with-go-44hi</link>
      <guid>https://dev.to/danquack/mocking-the-aws-sdk-with-go-44hi</guid>
      <description>&lt;p&gt;Mocking a client library is a common technique when building test-driven development. In golang, this can be done by creating structs that implement interfaces and then override the methods you are trying to mock. This example of mocking can be done with any method, but for this post, I will use AWS Organizations to demonstrate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation-code"&gt;
  &lt;/a&gt;
  Implementation Code
&lt;/h3&gt;

&lt;p&gt;First, we want to create a struct that will be used as the methods' instance. As you see below, we are going to implement the interface of the SDK provided organizations API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Organizations&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="n"&gt;organizationsiface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrganizationsAPI&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then once we have defined that, we will have to instantiate the method we want to implement, which for the main implementation will be a pass-through for the method used by the client.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Organizations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ListAccounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccountsInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccountsOutput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, we will want to create a method we will test. We must parameterize the struct to help our test define which method to use.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;WhatAreMyAccounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Organizations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccountsOutput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccountsInput&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;MaxResults&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Int64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;NextToken&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#test-code"&gt;
  &lt;/a&gt;
  Test Code
&lt;/h3&gt;

&lt;p&gt;For testing, we will create our Mock struct, followed by our method override, and then wrap that within a given test. The MockOrganization struct will implement an interface, which we can later utilize as the organization's client.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;MockedOrganizations&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;organizationsiface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrganizationsAPI&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For the test, we want to guarantee a response. Therefore, we will define a separate implementation of the organization interface, of which we will return a constant value for the test suite.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MockedOrganizations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ListAccounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccountsInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccountsOutput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccountsOutput&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Accounts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Arn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test1@example.com"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"234567890"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test-1"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Arn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test2@example.com"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"123456789"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test-2"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;On the test code, by using our mocked interface, we can create an Organizations object. The application's function then calls our mocked response to yield the result to test.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestListAccounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Organizations&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;MockedOrganizations&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;WhatAreMyAccounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Accounts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚ûú  main go &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;span class="o"&gt;===&lt;/span&gt; RUN   TestListAccounts
&lt;span class="nt"&gt;---&lt;/span&gt; PASS: TestListAccounts &lt;span class="o"&gt;(&lt;/span&gt;0.00s&lt;span class="o"&gt;)&lt;/span&gt;
PASS
ok      main/cmd/main   0.117s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To see the full code, check out the below gists:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



</description>
      <category>mock</category>
      <category>go</category>
      <category>aws</category>
    </item>
    <item>
      <title>Looking for a remote job?</title>
      <author>Bryan</author>
      <pubDate>Wed, 08 Dec 2021 16:51:28 +0000</pubDate>
      <link>https://dev.to/bryanellis95/looking-for-a-remote-job-138c</link>
      <guid>https://dev.to/bryanellis95/looking-for-a-remote-job-138c</guid>
      <description>&lt;p&gt;Well we have some news for you! Today, we launched &lt;a href="https://www.remotestartup.io/"&gt;RemoteStartup&lt;/a&gt; a new platform to list your jobs, view jobs &amp;amp; apply and by far the coolest feature, our in-house chat system that notifies you anytime either side sends a message! That's right, apply for a job and instantly come in communication with the job poster! Of course, if you're listing a job you can just paste your link in there too and we will handle getting applicants to that link. The even better part is that listings are about 50% cheaper than other remote job sites and we give more features to our users. But wait! theres more, we are also contributing to stripe climate on every purchase made! &lt;/p&gt;

&lt;p&gt;Check us out and let me know if there are any questions!&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>career</category>
      <category>watercooler</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Artificial Intelligence Tutorial: What is AI? Basics for Beginners - Advance</title>
      <author>Coderzway</author>
      <pubDate>Wed, 08 Dec 2021 16:48:45 +0000</pubDate>
      <link>https://dev.to/huugg/artificial-intelligence-tutorial-what-is-ai-basics-for-beginners-advance-31la</link>
      <guid>https://dev.to/huugg/artificial-intelligence-tutorial-what-is-ai-basics-for-beginners-advance-31la</guid>
      <description>&lt;p&gt;This tutorial provides introductory knowledge on Artificial Intelligence. It would come to a great help if you are about to select Artificial Intelligence as a course subject. You can briefly know about the areas of AI in which research is prospering.&lt;/p&gt;

&lt;h1&gt;Audience&lt;/h1&gt;

&lt;p&gt;This tutorial is prepared for the students at beginner level who aspire to learn Artificial Intelligence.&lt;/p&gt;

&lt;h1&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;The basic knowledge of Computer Science is mandatory. The knowledge of Mathematics, Languages, Science, Mechanical or Electrical engineering is a plus. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.codelivly.com/what-is-ai-artificial-intelligence-tutorial-basics-for-beginners/" rel="noreferrer noopener"&gt;Artificial Intelligence Tutorial: What is AI? Basics for Beginners - Advance&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How i plan to maximise my learning to improve my skills</title>
      <author>ifrah</author>
      <pubDate>Wed, 08 Dec 2021 16:48:29 +0000</pubDate>
      <link>https://dev.to/ifrah/how-i-plan-to-maximise-my-learning-to-improve-my-skills-3gh4</link>
      <guid>https://dev.to/ifrah/how-i-plan-to-maximise-my-learning-to-improve-my-skills-3gh4</guid>
      <description>&lt;p&gt;I have recently completed my professional development plan and have come up with a few different ways to maximise my learning to reach my goals. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-practising-even-if-i-think-i-have-perfected-it"&gt;
  &lt;/a&gt;
  Keep practising even if I think I have perfected it!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jte7ZkGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zlyt3vpqgq2mgr281ns.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jte7ZkGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zlyt3vpqgq2mgr281ns.jpg" alt="Image description" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learning a topic or process may be easy, but it is just as easy to forget it in a couple of weeks if not put into practice.  I think the easiest way to keep on practising is to have a structure to follow instead of working out of my head from scratch. I have found a few challenges listed below which i am going to attempt to try at some point to keep practising my skills.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://100dayscss.com/"&gt;100 days of css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dailyui.co/"&gt;Daily UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/javascript-practical-coding-challenges-for-beginners-4bq3ugr"&gt;JavaScript Challenges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#teaching-someone-else-to-help-improve-my-understanding"&gt;
  &lt;/a&gt;
  Teaching someone else to help improve my understanding.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g6dTMc_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aglci21vx2ea50rkuw8f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g6dTMc_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aglci21vx2ea50rkuw8f.jpg" alt="Image description" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once I think I have an in-depth understanding of a topic. I think a great to cement it is to teach or collaborate with others. This will also help me to improve my communication and teamwork skills. This method is often referred to as the prot√©g√© effect. It has ben proven to  improves your learning process by increasing your metacognitive processing, increasing your use of effective learning strategies, increasing your motivation to learn the material, and increasing your feelings of competence and autonomy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#figure-out-what-time-management-system-works-best-for-me"&gt;
  &lt;/a&gt;
  Figure out what time management system works best for me
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VSzoSKO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjzqdrketwkv0bzqd1k4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VSzoSKO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjzqdrketwkv0bzqd1k4.jpg" alt="Image description" width="880" height="732"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many different learning methods out there and have yet to find the perfect one for me. I am going to try some of the few listed below to see what works best. Doing this will hopefully help me maximise my learning my using my time effectively. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.themuse.com/advice/take-it-from-someone-who-hates-productivity-hacksthe-pomodoro-technique-actually-works"&gt;Pomodoro Technique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.projectsmart.co.uk/pareto-principle/pareto-analysis-step-by-step.php"&gt;Pareto Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.eisenhower.me/eisenhower-matrix/"&gt;Eisenhower Matrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Git Cheat Sheet- 20 commands I Use Everyday</title>
      <author>Coderzway</author>
      <pubDate>Wed, 08 Dec 2021 16:43:18 +0000</pubDate>
      <link>https://dev.to/huugg/git-cheat-sheet-20-commands-i-use-everyday-afg</link>
      <guid>https://dev.to/huugg/git-cheat-sheet-20-commands-i-use-everyday-afg</guid>
      <description>&lt;p&gt;Hey Coders!&lt;br&gt;When I started coding, tracking changes in my codes was always painful and the fear of losing files was always there. But now we have Git to tackle these problems, it has everything you need to make your coding environment safe and easy. Git is so important for every programmer's daily life especially when you are working with a team. The software industry widely uses it but mastering all the commands can take time, so keep practising! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More&lt;/strong&gt;: &lt;strong&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/git-cheat-sheet-20-commands-i-use-everyday/" rel="noreferrer noopener"&gt;Git Cheat Sheet- 20 commands I Use Everyday&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Build a Dynamic REST API with Custom Functions</title>
      <author>Terra Roush</author>
      <pubDate>Wed, 08 Dec 2021 16:21:44 +0000</pubDate>
      <link>https://dev.to/terra_roush/build-a-dynamic-rest-api-with-custom-functions-54k5</link>
      <guid>https://dev.to/terra_roush/build-a-dynamic-rest-api-with-custom-functions-54k5</guid>
      <description>&lt;p&gt;I‚Äôm a new software developer here at HarperDB. So like many of you visiting the blog, I‚Äôve got fresh eyes on this product. Two weeks ago, my sights were set on HarperDB‚Äôs newest feature, Custom Functions. My task was to create a plug-and-play REST API template with our Custom Functions. As you read this I hope you‚Äôll feel confident to follow along, and after some practice implement this into your next project!&lt;/p&gt;

&lt;p&gt;So what are Custom Functions?&lt;/p&gt;

&lt;p&gt;Simply put, Custom Functions (CF) are serverless, highly customizable API endpoints that interact with our HarperDB Core operations, such as ‚Äúinsert‚Äù, ‚Äúsearch_by_hash‚Äù, ‚Äúupdate‚Äù, and &lt;a href="https://api.harperdb.io/"&gt;&lt;strong&gt;more&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You could define a CF using SQL to return all dog data records where the owner‚Äôs name is ‚ÄúGeena Davis‚Äù and sort them by the dog‚Äôs name. You can create a CF that deletes a dog‚Äôs data record using a route parameter and NoSQL. You can also make a CF with validation that saves a dog‚Äôs record with required properties. Custom Functions are powered by Fastify and are extremely flexible. To see possibilities, check out their &lt;a href="https://www.fastify.io/docs/latest/Routes/#routes-options"&gt;&lt;strong&gt;docs&lt;/strong&gt;&lt;/a&gt; on routes.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a simple CF that gets a data record from the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L0J4LvFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upz2f0diy5kvhtfdcmmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L0J4LvFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upz2f0diy5kvhtfdcmmm.png" alt="Image description" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YF3neVM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mswy349bg63202l638fh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YF3neVM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mswy349bg63202l638fh.png" alt="Image description" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gByUFL_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f53gx1tzht0p9qn9oi41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gByUFL_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f53gx1tzht0p9qn9oi41.png" alt="Image description" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And what about REST?&lt;/p&gt;

&lt;p&gt;You‚Äôre probably familiar with a REST API. This is an application programming interface that conforms to the constraints of REST architecture and allows for interaction with RESTful web services. They are flexible, scalable, and efficient. RESTful APIs utilize four common HTTP methods: POST, GET, PUT, and DELETE, which correspond with CRUD functionality: create, read, update, and delete.&lt;/p&gt;

&lt;p&gt;So why am I combining the two?&lt;/p&gt;

&lt;p&gt;A REST API and HarperDB‚Äôs Custom Functions combine to make development easy and performance fast. A large aim of HarperDB is to collapse the stack. Traditionally you would need a server running a REST application and a server that runs the database. In this case, you‚Äôre only running HarperDB, hence, collapsing the stack.¬†&lt;/p&gt;

&lt;p&gt;To the task at hand: build a dynamic REST API with Custom Functions.&lt;/p&gt;

&lt;p&gt;I‚Äôll describe what I‚Äôve built first, and then I‚Äôll show how you can use it for your own devices. Instead of going one by one through the routes, I‚Äôll highlight the POST for its simplicity and the PUT for its complexity. All routes can be viewed in the &lt;a href="https://github.com/HarperDB/hdb-cf-rest"&gt;&lt;strong&gt;repo&lt;/strong&gt;&lt;/a&gt;.¬†&lt;/p&gt;

&lt;p&gt;For this project, the routes have a URL, an HTTP method, and a handler. The handlers have access to hdbCore and I‚Äôm using its requestWithoutAuthentication method for simplicity‚Äôs sake. In defining routes, I specified a dynamic URL to satisfy a plug-and-play approach. As for HTTP methods, I wanted to make endpoints for standard CRUD so in routes/index.js I built two GET routes (get one and get all), a POST, a PUT, a PATCH, and a DELETE. I included a PUT and a PATCH as they both have their advantages. The PUT updates by replacing an entire record, and PATCH only updates any given values. With that said, the GET, POST, and DELETE aligned beautifully with HarperDB, and the PUT and PATCH required a bit of finessing. In general, the handlers connect the request to hdbCore using a specified HarperDB operation, they utilize route parameters to access the correct data, and they return a response. I‚Äôve chosen to mostly use NoSQL operations, as they work lightning fast with HDB, although you may use SQL as well.¬†&lt;/p&gt;

&lt;p&gt;Here‚Äôs what the dynamic POST Custom Function looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LWtWuZiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0f2g4w41rrpij4o5rdk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LWtWuZiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0f2g4w41rrpij4o5rdk.png" alt="Image description" width="880" height="262"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QCkJurR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7v0jja92t5mqodrd0se.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QCkJurR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7v0jja92t5mqodrd0se.png" alt="Image description" width="880" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ND4X9Zha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnbd7oh1u4j5g30fsy5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ND4X9Zha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnbd7oh1u4j5g30fsy5x.png" alt="Image description" width="880" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The POST is pretty simple. It uses the ‚Äúinsert‚Äù HDB Core operation, gets schema and table from the request route parameters, and the record sent along with is provided in the request body. An example of what that might look like is provided with the Postman screenshot. The GETs and the DELETE follow the same pattern of simplicity, although use different operations.&lt;/p&gt;

&lt;p&gt;And what about the routes that needed more finesse?&lt;/p&gt;

&lt;p&gt;In order for the PUT to perform as expected, any given attribute in the request body object will be updated, and any left out attribute will be null. Herein required getting all attributes on the table, done so with an HDB Core operation, ‚Äúdescribe_table.‚Äù Once that was attained, each attribute of the table was iterated to assign a null value for any attribute that was left out of the request body object. HDB assigned attributes ‚Äú&lt;strong&gt;createdtime&lt;/strong&gt;‚Äù and ‚Äú&lt;strong&gt;updatedtime&lt;/strong&gt;‚Äù are skipped to maintain their values. And finally, a second HDB Core operation is performed within putHandler.js. This one is ‚Äúupdate.‚Äù A variable, ‚Äúput_query_body‚Äù has all needed attributes, either assigned through the request body, or made null, and it has the correct unique identifier, the hash_attribute from route params. This is provided to records to perform the update.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---2nQyChU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4pm9cd3i2hw0bioidiu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---2nQyChU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4pm9cd3i2hw0bioidiu.png" alt="Image description" width="880" height="229"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VILCrQ4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbyype9ger1r4d8zkjac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VILCrQ4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbyype9ger1r4d8zkjac.png" alt="Image description" width="880" height="951"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here‚Äôs what that means for your data:&lt;/p&gt;

&lt;p&gt;Let‚Äôs say the table in question is ‚Äúdog‚Äù, and it has ‚Äúdog_name‚Äù, ‚Äúage‚Äù, ‚Äúweight_lbs‚Äù, and ‚Äúowner_name‚Äù attributes. Below is the record to be updated:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9v-GdRq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/al3olb9i2innam3lzjpj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9v-GdRq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/al3olb9i2innam3lzjpj.png" alt="Image description" width="486" height="278"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To update the record with PUT, you‚Äôd provide this in the request body:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Su-Zgwpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2axivd8ms0su5b34rwqj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Su-Zgwpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2axivd8ms0su5b34rwqj.png" alt="Image description" width="374" height="36"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your record will be completely replaced with the provided values and it will replace weight, and owner_name with null. This is the desired behavior of a PUT request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9v1MwLD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/feppow8uxlrh7tbvcxhf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9v1MwLD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/feppow8uxlrh7tbvcxhf.png" alt="Image description" width="466" height="274"&gt;&lt;/a&gt;¬†&lt;/p&gt;

&lt;p&gt;A few words on the PATCH...The PATCH is very similar in terms of logic and code. The difference being that there‚Äôs no need to nullify any attributes. I still needed to get the attributes from the table with HDB Core to get the hash_attribute and then assign the route param. And finally to send a record object along with the update call to HDB Core. With the PATCH, all that needs updating is what‚Äôs provided in the request body. Using the example above, the same beginning record, and the same request body, the PATCH updated record would be:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUPeX9Cs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v1gp2nvq0kc0bepjysz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUPeX9Cs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v1gp2nvq0kc0bepjysz.png" alt="Image description" width="464" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How can you use this dynamic REST API Custom Functions template?&lt;/p&gt;

&lt;p&gt;To use this template, you'll need to be logged in, running HarperDB, have a local instance, and have some data to work with. If you don‚Äôt, please follow the steps below. I recommend following &lt;a href="https://www.youtube.com/watch?v=fAKZxK-XamM"&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; video (from the beginning until about 4:30) to get you through 1-3. I recommend &lt;a href="https://www.youtube.com/watch?v=rz6prItVJZU"&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; demo video if you‚Äôd like a visual aid for steps 4 and 5 (pick up around 13:00 until about 15:00).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Sign up/log in &lt;a href="https://studio.harperdb.io/sign-up"&gt;here&lt;/a&gt;&lt;/strong&gt;‚Ä®&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Install and run HarperDB‚Ä®&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Create a local instance (in Studio)‚Ä®&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Build some demo data (in Studio)‚Ä®&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Enable Custom Functions (in Studio)‚Ä®&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Clone this Custom Functions template and party! (open in IDE)‚Ä®&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, if you‚Äôve been following along you will have gotten some familiarity with HarperDB Studio. It‚Äôs super easy to use and is a great tool for working with the core product. From here on, it‚Äôs great to open your Custom Functions project in your favorite IDE, like WebStorm. The ‚Äúcustom_functions‚Äù folder lives in the ‚Äúhdb‚Äù folder. Any project you create in Custom Functions lives here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;      &lt;strong&gt;Test your endpoints with Postman‚Ä®&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The repository includes a Postman collection, which will allow you to test the endpoints against your data. As the REST API template was dynamic, so are the URLs in the Postman collection. Here's a &lt;a href="https://identity.getpostman.com/login?continue=https%3A%2F%2Fgo.postman.co%2Fworkspace%2FMy-Workspace~58429cc6-621f-475d-8f01-b3cdfe0c9dd6%2Fenvironment%2F18074441-ed8f2c6b-63dd-4121-a71d-178ec5206cd0"&gt;&lt;strong&gt;link&lt;/strong&gt;&lt;/a&gt; to this project's environment variables. You will likely need to change some values to fit your project. You may also choose to hard-code the route for your needs, (ex: &lt;a href="http://localhost:9926/project/schema/table"&gt;http://localhost:9926/project/schema/table&lt;/a&gt; plus any necessary route parameter such as "id".)&lt;/p&gt;

&lt;p&gt;Reflection and/or TL;DR&lt;/p&gt;

&lt;p&gt;I made a dynamic REST API using HarperDB‚Äôs Custom Functions for developers to implement in their projects. The combination of a REST API and HarperDB reduces the number of servers needed, collapsing the stack, making your project just that much faster!&lt;/p&gt;

</description>
      <category>database</category>
      <category>javascript</category>
      <category>node</category>
      <category>serverless</category>
    </item>
    <item>
      <title>How to  fix the broken experience for Screenreader (Search field)</title>
      <author>Neha Sharma </author>
      <pubDate>Wed, 08 Dec 2021 16:20:53 +0000</pubDate>
      <link>https://dev.to/hellonehha/how-to-fix-the-broken-experience-for-screenreader-search-field-1d39</link>
      <guid>https://dev.to/hellonehha/how-to-fix-the-broken-experience-for-screenreader-search-field-1d39</guid>
      <description>&lt;p&gt;Hey Folks!!&lt;/p&gt;

&lt;p&gt;Do you know how screen readers perceive your code? How even a screenreader works? &lt;/p&gt;

&lt;p&gt;Today I will show you the experience of screenreader users. I will highlight the issues in the app and how to fix them. &lt;/p&gt;

&lt;p&gt;Let's consider an example: Header with brand logo, search input, and a button.&lt;/p&gt;

&lt;p&gt;You will learn:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;aria-label&lt;/li&gt;
&lt;li&gt;input type&lt;/li&gt;
&lt;li&gt;aria-live&lt;/li&gt;
&lt;li&gt;aria-role&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;All the demo is from Apple Mac and voiceover.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://youtu.be/wbjYUibJG_I"&gt;Watch the demo here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem:
&lt;/h2&gt;

&lt;p&gt;1) Screenreader is not able to recognize what field is it&lt;/p&gt;

&lt;p&gt;2) Screenreader is not able to notify when the error message comes on the screen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-dig-into-the-code"&gt;
  &lt;/a&gt;
  Let's dig into the code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Brand Logo&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"product name..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"search-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Search&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hide"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"search-errorMessage"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-fix-the-code"&gt;
  &lt;/a&gt;
  Lets fix the code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Brand Logo&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;submit=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Search"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Search items"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"search-button"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Search&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hide"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"region"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"search-errorMessage"&lt;/span&gt; &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"assertive"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1) We have added the &lt;code&gt;role=search&lt;/code&gt; with form&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;submit=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) We have added the &lt;code&gt;type=search&lt;/code&gt; and &lt;code&gt;aria-label="search"&lt;/code&gt; this will help the screen reader users. &lt;/p&gt;

&lt;p&gt;It is a must to have a label with every input tag. If the label is not there due to design then it is best to use &lt;code&gt;aria-label&lt;/code&gt; for screen readers.&lt;/p&gt;

&lt;p&gt;It is a must to add the correct attribute with the input tag. These attributes guide the screen reader's users on what the field is about.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Search"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Search items"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) We have added the &lt;code&gt;role&lt;/code&gt; and &lt;code&gt;aria-live&lt;/code&gt;. This will help screen reader users get notified as soon as the message change. (PS: I used JavaScript to add the dynamic content and change the visibility of the div)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;aria-live&lt;/code&gt; notify the screen reader users of any dynamic content change. Here I have to use the value &lt;code&gt;assertive&lt;/code&gt; which will announce all the notifications and pause other announcements (you can call it rude :) )&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hide"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"region"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"search-errorMessage"&lt;/span&gt; &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"assertive"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://youtu.be/x8bZQBHx_RA"&gt;Watch the video of demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Learning!!&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Let the games begin: My DevOps Journey starts today!</title>
      <author>Dominic Ross</author>
      <pubDate>Wed, 08 Dec 2021 16:20:28 +0000</pubDate>
      <link>https://dev.to/devops_dodo/let-the-games-begin-my-devops-journey-starts-today-234l</link>
      <guid>https://dev.to/devops_dodo/let-the-games-begin-my-devops-journey-starts-today-234l</guid>
      <description>&lt;p&gt;Today is the day!&lt;/p&gt;

&lt;p&gt;Today, I will go from knowing almost nothing about DevOps to... well, I hope &lt;em&gt;something&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I've been waiting for this day for nearly 2 months, and have slowly been getting nervous as the day has approached. I would be working a regular job at the moment, but my health has taken another turn, so I've been at home almost as long as I've been waiting for the course.&lt;/p&gt;

&lt;p&gt;2 months is a long time to be at home doing nothing. I've kept myself busy with little house chores I can physically do, but otherwise, my days have been very empty.&lt;/p&gt;

&lt;p&gt;Or at least they would have if I hadn't set myself a goal.&lt;/p&gt;

&lt;p&gt;In this post, I will share with you the lessons I've learnt from self-study and how I have adapted them to allow me to enter my virtual classroom today excited and ready to learn about DevOps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#potential-pitfalls-of-learning-from-home"&gt;
  &lt;/a&gt;
  Potential pitfalls of learning from home:
&lt;/h2&gt;

&lt;p&gt;This will not be the first time I try to learn an IT role and enter the field. This will actually be the fourth attempt at learning an IT skill. I have previously attempted to learn to become a Cisco Certified Network Associate (CCNA), become a web developer, and become an Android App developer from scratch. All three have failed for varying reasons, but the common reasons are &lt;strong&gt;Discipline&lt;/strong&gt;, &lt;strong&gt;Support&lt;/strong&gt; and &lt;strong&gt;set goals&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In all of my previous attempts, I have been very enthusiastic for the first couple of months of learning a new skill. My learning in the first few months has been excellent, as I've devoured the content to try and learn everything as quickly as possible.&lt;br&gt;
Eventually, the enthusiasm has worn off, and I've maybe sat down to learn once or twice a week. Eventually, it's been months since I looked at it, and can barely remember what I learned. There's just been no &lt;strong&gt;Discipline&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On those occasions, it's not unfair to say that my support has been minimal at best. Because I was learning alone, I had no one interested enough to bounce ideas off of, and no one to go and see to ask questions. Yes, I had access to resources online like StackOverflow and Reddit, but that's not the same as sitting down with someone who explains it to you till you 'get it'. There simply was no &lt;strong&gt;Support&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, as I said above, I had no discipline in my learning, it was all or nothing. This not only leads to burnout, but also to losing interest quite quickly. There were no &lt;strong&gt;Set Goals&lt;/strong&gt; that would help me see progress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keeping-the-mind-ticking-over"&gt;
  &lt;/a&gt;
  Keeping the mind ticking over:
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"If you wait to be offered an opportunity to learn, you will be&lt;br&gt;
waiting a long time."&lt;br&gt;
Peter Hutton | TEDxMelbourne&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I first heard about the possibility of doing a Skills Bootcamp (read about that in my &lt;a href="https://devops-dodo.hashnode.dev/devops-minus-1-day-what-is-a-skills-bootcamp"&gt;previous blog post in this series&lt;/a&gt;) I knew I was going to need to work hard and dedicate myself as much as I could to this program. Part of the requirements for getting on the course is that you agree to attend at least 90% of the sessions. This can be a big ask for someone trying to hold down a full-time job, or deal with a young family at the same time. Of course, exceptions can be made, all Purple Beard ask is that you keep your learning assistant advised.&lt;br&gt;
Still, I knew that going in without "warming up" wouldn't be best conducive to learning or retention. &lt;br&gt;
On many of the courses I looked at before choosing one, an ability to code was a strong recommendation (although not a requirement. Plenty of people have started these courses with very little knowledge and come out the other end fully capable). As I wasn't a stranger to coding (as mentioned above), I decided it was time to blow out the cobwebs and get my coding gears in workable shape before my course.&lt;/p&gt;

&lt;p&gt;I settled on learning Python, as it had often been recommended as a beginner-friendly language to learn. I started with apps like Mimo, SoloLearn and others, but found their "courses" rather skimpy on the details. I decided it was time to hit the books.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dummies-leads-the-way"&gt;
  &lt;/a&gt;
  "Dummies" Leads the way:
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"Tell me and I forget, teach me and I may remember, involve me and I learn.‚Äù&lt;br&gt;
‚Äï Benjamin Franklin.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have used the "For Dummies" series of books for many things in the past, from Buddhism and meditation to Coding and cooking. I have always found their writing style and structure to be engaging and educational, so when it came to choosing a book to learn Python, there was no hesitancy to head straight to their books.&lt;/p&gt;

&lt;p&gt;The first one I bought was useless, as it was 15 years out of date and was talking about the old version of Python. I managed to find a 7-in-1 book on Python from the "Dummies" series for the same price as the out of date one online, so promptly got it.&lt;/p&gt;

&lt;p&gt;The book that arrived teaches all the basics of Python in the first three mini-books and then allows you to expand and use that knowledge to learn a little about Artificial Intelligence (AI), Data Science, hardware interaction and finally robotics.&lt;/p&gt;

&lt;p&gt;I have so far finished the first three mini-books, and therefore learnt the basics of Python (more than enough for my DevOps course, my learning assistant tells me), but I would highly recommend this book to any new learners of Python. It's by no means perfect, I've found plenty of mistakes and typos as I read it, but will certainly give you a great understanding of Python and how it's used in various popular fields.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#book-and-language-chosen-how-did-i-learn-from-home"&gt;
  &lt;/a&gt;
  Book and language chosen, how did I learn from home?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---qvfAD_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638974715616/CWutnO5j6.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---qvfAD_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638974715616/CWutnO5j6.jpeg" alt="self-education-quotes-1.jpg" width="720" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I had my medium and subject chosen, I want to tell you what I did to prepare for my course.&lt;/p&gt;

&lt;p&gt;Being off work for so long and with no concrete date of when (or if) I would be going back, it would have been too easy to sit and watch Netflix all day or play on my Playstation till my manager let me go back to work (in fact, that's exactly what I'd done on previous occasions off sick from work). But with a goal in mind this time, I knew I couldn't 'slack off' for 6 weeks and then go in all guns blazing to 10-15 hours of study per week without feeling it.&lt;/p&gt;

&lt;p&gt;I, therefore, decided to use my Python learning as a warm-up for the course itself. I split each chapter into their sections and set myself a rota of doing a certain amount each day. I used the Pomodoro method (where you work for 25 minutes, rest for 5, work 25, rest 5, work 25, rest 5, work 25, rest 15) and during my work session, I would read my book and write the notes.&lt;/p&gt;


&lt;blockquote&gt; &lt;a href="https://www.instagram.com/p/CV_H69SD4gA/?utm_source=ig_embed&amp;amp;utm_campaign=loading"&gt;       View this post on Instagram            &lt;/a&gt;&lt;p&gt;&lt;a href="https://www.instagram.com/p/CV_H69SD4gA/?utm_source=ig_embed&amp;amp;utm_campaign=loading"&gt;A post shared by Dominic Ross (@youngdad33)&lt;/a&gt;&lt;/p&gt;


&lt;/blockquote&gt; 

&lt;h3&gt;
  &lt;a href="#tools-for-notes"&gt;
  &lt;/a&gt;
  Tools for notes:
&lt;/h3&gt;

&lt;p&gt;In my previous learning journey, I had used an app called &lt;a href="https://apps.apple.com/us/app/quiver-take-better-notes/id866773894?mt=12"&gt;Quiver&lt;/a&gt; on my MacBook, but seeing as I was now on a Chromebook, that was no longer a possibility. I did some research and found a suitable alternative in &lt;a href="//www.notion.so"&gt;Notion&lt;/a&gt;, and started writing my notes. Each chapter was a new page in my Notion workbook, and it slowly grew to have over a dozen pages split into separate topics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kArGZdWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638975824492/3dYXe3v1O.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kArGZdWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638975824492/3dYXe3v1O.png" alt="Screenshot of my Notion Python Notebook" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The benefit of using Notion (and other similar programmes) is that you can mix Markdown Text with Code snippets and images. I typically wrote my code in the code snippet feature, then paste a screenshot of the outcome from VS Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--USDRc_Kp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638976068225/GjBHiyVBiP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--USDRc_Kp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638976068225/GjBHiyVBiP.png" alt="Screenshot of one of my Python notes showing code, markdown and images" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-to-know-the-ide"&gt;
  &lt;/a&gt;
  Getting to know the IDE:
&lt;/h3&gt;

&lt;p&gt;Before I bought the Python All In One For Dummies book, I was using the text editor &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt;, created by the good people at Github. I had previously used and liked working with it (although I'm fairly sure I wasn't using it to its full potential).&lt;/p&gt;

&lt;p&gt;When I started reading the book, however, they encouraged you to use &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; (aka code) from Microsoft. I'll admit I was a little reluctant to do so, as I did like using Atom, but since both were available for Linux (the only way I could get it to run on our Chromebook), and I didn't have time to try and translate what they were doing in the book to what I needed to do on Atom, I opted to at least try VS Code.&lt;/p&gt;

&lt;p&gt;To my delight, I found that using Code was very much like using Atom and didn't appear to have anything missing. I was able to follow along with the instructions in the book (despite a few technical difficulties they didn't provide for as they wrote the book for windows and mac users) and got the same results they did. As it turns out, when we had our Onboarding session with Purple Beard, it turns out they teach using VS Code too, so that was a nice bonus.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good-working-environment"&gt;
  &lt;/a&gt;
  Good working environment:
&lt;/h3&gt;

&lt;p&gt;All of the above is great, but if you're exhausted and restless after one session, you won't be able to give your full attention to the rest of the course.&lt;br&gt;
Set yourself up for success with a good working environment all set up and ready to go for when your course starts.&lt;/p&gt;

&lt;p&gt;I've had nearly 2 months to prepare, and as well as the above steps, I've made sure that, when the time comes, I would be comfortable and ready to learn when my class started.&lt;/p&gt;

&lt;p&gt;Sitting on the sofa or bed with books dotted around you and your laptop balanced on your knee is not ideal. You need a dedicated space set up to learn from.&lt;/p&gt;

&lt;p&gt;I started out in a comfy chair with my legs up and a table to my side, and slowly added elements to help make the area more conducive to learning. I started with a book stand, to keep my book within view and readable without bending in all sorts of funny positions, I got a light to shine directly down on me to make sure I wasn't straining my eyes, and eventually went the whole 9 yards and got a desk and chair to stop me from getting a painful back and neck and to allow me to use a second screen.&lt;/p&gt;


&lt;blockquote&gt; &lt;a href="https://www.instagram.com/p/CWn9YNZD_Kt/?utm_source=ig_embed&amp;amp;utm_campaign=loading"&gt;       View this post on Instagram            &lt;/a&gt;&lt;p&gt;&lt;a href="https://www.instagram.com/p/CWn9YNZD_Kt/?utm_source=ig_embed&amp;amp;utm_campaign=loading"&gt;A post shared by Dominic Ross (@youngdad33)&lt;/a&gt;&lt;/p&gt;


&lt;/blockquote&gt; 

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;Learning from home can be tricky, and has the potential to leave you burnt out or disinterested altogether. With &lt;strong&gt;Discipline&lt;/strong&gt;, &lt;strong&gt;Support&lt;/strong&gt;, setting yourself easy to accomplish &lt;strong&gt;goals&lt;/strong&gt; and setting up a suitable working environment is crucial to successful studying and enjoying your topic.&lt;/p&gt;

&lt;p&gt;The same can be true of working on a Bootcamp, but going from nothing to BootCamp is difficult and could lead to burnout. If you're going to use a BootCamp to learn to code (or write or exercise or cook) be sure to build up those "muscles" so that you don't set yourself up to fail, but instead set yourself up for success.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>bootcamp</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to Build community centric Products in Tech</title>
      <author>Joshua Poddoku</author>
      <pubDate>Wed, 08 Dec 2021 16:19:49 +0000</pubDate>
      <link>https://dev.to/aviyel/how-to-build-community-centric-products-in-tech-28np</link>
      <guid>https://dev.to/aviyel/how-to-build-community-centric-products-in-tech-28np</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Community is the greatest asset for any product&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recently, I met Anirudh Warrier, a passionate community builder, ex-HackerEarthian on a community call. He is also a mental health ally, leading a Non-profit org, Citta India, as Head of Growth.&lt;/p&gt;

&lt;p&gt;From my observation, every community builder has some experience in diverse fields. Anirudh also has experience in Product Design, Mental Health, and Tech Evangelism. Understanding the Community becomes easier when you explore and learn people. Because in the end, you have to build a product for the people and not for yourself.&lt;/p&gt;

&lt;p&gt;He is currently working as Developer Marketing Manager at SAWO Labs, a Passwordless Authentication tool. His primary focus is to understand the Developers and improve the tool experience.&lt;/p&gt;

&lt;p&gt;Researching about UX, Design thinking helps build products that are compelling to use and habitual for users. Every community manager must learn to bridge the gap by analyzing what community needs and what should be avoided.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-community-a-funnel-for-acquisition"&gt;
  &lt;/a&gt;
  Is Community a funnel for acquisition?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZPpDMSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ia7zhn4gulrt9zqm0hm8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZPpDMSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ia7zhn4gulrt9zqm0hm8.png" alt="Image description" width="880" height="722"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-old-approach"&gt;
  &lt;/a&gt;
  The Old Approach
&lt;/h4&gt;

&lt;p&gt;Earlier, many communities and organizations acquired users for the product by funneling. It gives away the entire space and sets up the constraints for further processes by the organizations. This is a big mistake by many budding products and can also have higher chances of shifting from a community-centric approach.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Shows some good metrics&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Looks promising at the beginning&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Heads towards an inorganic audience&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Less scope of Engagement&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Diverts the entire product roadmap&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#community-is-a-loop"&gt;
  &lt;/a&gt;
  Community is a Loop
&lt;/h2&gt;

&lt;p&gt;To build a community-centric product, community has to be stronger more than anything! It plays a vital role in the entire journey of the product.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YmaaXfxY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecpyskwanmmhzu4c729p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YmaaXfxY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecpyskwanmmhzu4c729p.png" alt="Image description" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visitors/ Sign-ups might be high, but not many of them would be community members. Eventually, there wouldn't be any dynamic product evolution. But this can be quickly resolved when you make your community a loop and not a funnel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uOhTroEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5gb4exgtfchgls437yr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uOhTroEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5gb4exgtfchgls437yr.png" alt="Image description" width="500" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-community-is-a-recurring-loop"&gt;
  &lt;/a&gt;
  Why Community is a Recurring Loop?
&lt;/h3&gt;

&lt;p&gt;Let us take an example of 100 members, with 20 of them interested in a selected activity. If you take feedback from all of them, only one quality feedback may precisely match the company's vision. So, you can deprioritize the other feedback/ feature requests and proceed with the one you picked. All visitors are not community members in reality. There are three major activities in this loop: Acquisition, Engagement, and Revenue.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#acquisition"&gt;
  &lt;/a&gt;
  Acquisition
&lt;/h4&gt;

&lt;p&gt;This phase will also give you an idea of the user group to be acquired for your product. In the acquisition phase - you find your "actual" community members.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#engagement"&gt;
  &lt;/a&gt;
  Engagement
&lt;/h4&gt;

&lt;p&gt;Engaging the Community is the most crucial aspect of any product. In this phase, exclusive value-based content should be given to the acquired community members. This can be in the form of events, AMAs, Expert content, or anything that helps an individual member scale and stay with you.&lt;/p&gt;

&lt;p&gt;Remember to make the community "exclusive", not inclusive. Otherwise, This will cause delayed product updates in the future due to slower community growth.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#revenue"&gt;
  &lt;/a&gt;
  Revenue
&lt;/h4&gt;

&lt;p&gt;In this phase, we can see the outcome of the community-centric product.  &lt;strong&gt;Quality Acquisition&lt;/strong&gt; and &lt;strong&gt;Valuable Engagement&lt;/strong&gt; are the significant determinants. Here is where the Community starts to give back on its own. A Community can be either a USP for you or the direct consumer of the product. So these help in creating a revenue model which benefits the entire Community, and revenue increases organically.&lt;/p&gt;

&lt;p&gt;And it takes time, and you need to keep churning out more cycles of Acquisition and Revenue specifically.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-get-in-return-from-this-loop"&gt;
  &lt;/a&gt;
  What do you get in return from this loop?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;More matured Community.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dynamics of the product become faster and scalable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any individual does not set the constraints.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Values replace the constraints&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hit-the-sweet-spot"&gt;
  &lt;/a&gt;
  Hit the Sweet Spot
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SWfjQg3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s08p4fzgc29qkp2165je.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SWfjQg3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s08p4fzgc29qkp2165je.png" alt="Image description" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have ever used &lt;a href="https://www.dunzo.com/"&gt;Dunzo app&lt;/a&gt;, it has eye-catchy notifications - aka sweet spot; it helps deliver the message and value to the users. It is not traditional "marketing", &lt;strong&gt;but the conclusion is that the users should connect with the product very quickly&lt;/strong&gt;. Dunzo's creative approach increased their open rates by 40%, directly contributing to their revenue model. It can be something that differentiates your product.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Community also works similarly. Product is only one part of what you want to build.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#three-checkers-to-hit-the-sweet-spot"&gt;
  &lt;/a&gt;
  Three checkers to hit the sweet spot
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Will the Community care about my product? (product)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can the product add any kind of value for the Community? (value)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What am I trying to convey to my community at the moment? (messaging)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Make your messaging part - creative and connecting.&lt;/strong&gt;&lt;br&gt;
Make 2/10 people very special, and let them do the evangelism for you.&lt;br&gt;
The Messaging part should focus on a particular set of high-quality users and connect with their thought processes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-leverage-communities"&gt;
  &lt;/a&gt;
  How to leverage communities
&lt;/h2&gt;

&lt;p&gt;As an individual community member, you can leverage the power of communities by giving value. This section is exclusively for community enthusiasts to get started in this ecosystem. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-have-your-niche-double-down-on-it"&gt;
  &lt;/a&gt;
  1. Have your niche, double down on it
&lt;/h4&gt;

&lt;p&gt;Contribute to one great Community which connects you instead of joining so many communities and staying inactive. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-its-a-twoway-street"&gt;
  &lt;/a&gt;
  2. It's a two-way street
&lt;/h4&gt;

&lt;p&gt;If you're jumping into channels just for the resources, swags, or LoRs- then it will ultimately take you downwards.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-collaborate-within-the-community"&gt;
  &lt;/a&gt;
  3. Collaborate within the Community
&lt;/h4&gt;

&lt;p&gt;Connect with people, help each other by answering queries and respond by sharing thoughts.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-build-a-social-presence"&gt;
  &lt;/a&gt;
  4. Build a social presence
&lt;/h4&gt;

&lt;p&gt;Convert your activities into a meaningful social media post that helps you to boost your network.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started-to-enhance-the-community-experience"&gt;
  &lt;/a&gt;
  Get started to enhance the community experience.
&lt;/h2&gt;

&lt;p&gt;We have learnt that communities are the heart of the product. It is essential to keep an eye on effective engagement and acquisition of members. Giving actual value to the Community plays a massive role in improving the product experience. The Internet has enabled De-centralization, Remote communities, and digital sustainability.&lt;/p&gt;

&lt;p&gt;Aviyel is on a mission to scalable and monetizable avenues, and you can learn about opensource projects which can turn into potential products with the power of Community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aviyel.com/discussions#login"&gt;Get early access&lt;/a&gt; to our beta community and make your first step to building sustainable Opensource projects.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>watercooler</category>
      <category>product</category>
      <category>web3</category>
    </item>
  </channel>
</rss>
