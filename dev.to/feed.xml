<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why Python is the best Programming Language for Data Science? </title>
      <author>javinpaul</author>
      <pubDate>Fri, 17 Dec 2021 07:55:43 +0000</pubDate>
      <link>https://dev.to/javinpaul/why-python-is-the-best-programming-language-for-data-science-2a29</link>
      <guid>https://dev.to/javinpaul/why-python-is-the-best-programming-language-for-data-science-2a29</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/python-data-analysis-and-visualization?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n2GN1TbX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/cdn-cgi/image/f%3Dauto%2Cfit%3Dcover%2Cw%3D600/v2api/collection/5757739470946304/5476264494235648/image/6509442108489728" alt="Python Data Analysis and Visualization - Learn Interactively" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs, If you want to become a Data Scientist in 2022 and are curious about which programming language should you learn then you have come to the right place. In the past, I have shared the &lt;a href="https://javarevisited.blogspot.com/2018/10/data-science-and-machine-learning-courses-using-python-and-R-programming.html"&gt;best data science courses&lt;/a&gt; and the &lt;a href="https://medium.com/better-programming/top-5-courses-to-learn-python-in-2018-best-of-lot-26644a99e7ec"&gt;best Python courses&lt;/a&gt;, and today, I will tell why learning Python is the best choice for Data Science.&lt;/p&gt;

&lt;p&gt;When it comes to learning Data Science and Machine learning, you have mainly have two programming languages to choose, either use &lt;strong&gt;Python or R&lt;/strong&gt;, but you will find that most Data Scientists and Machine Learning specialists use Python. &lt;/p&gt;

&lt;p&gt;I was thinking about it for quite some time; why Data scientists love Python so much? And what makes Python an absolute choice for Data Science and Machine learning exploration.&lt;/p&gt;

&lt;p&gt;I set out to research this and read many articles, &lt;a href="https://medium.com/javarevisited/6-best-python-books-for-data-science-and-machine-learning-in-2021-2f41d9fbf8be"&gt;books&lt;/a&gt;, and joined Data Science courses with both Python and R to figure out myself and what found was nothing more than surprising. &lt;/p&gt;

&lt;p&gt;I mean, it was the simple reason which makes Python than any mystery advantage over R or any other mainstream programming languages like &lt;a href="https://javarevisited.blogspot.com/2018/05/top-5-java-courses-for-beginners-to-learn-online.html"&gt;Java&lt;/a&gt;, &lt;a href="https://medium.com/@javinpaul/top-10-courses-to-learn-c-for-beginners-best-and-free-4afc262a544e"&gt;C++&lt;/a&gt;, &lt;a href="https://www.java67.com/2018/02/5-free-ruby-and-rails-courses-to-learn-online.html"&gt;Ruby&lt;/a&gt;, or &lt;a href="https://javarevisited.blogspot.com/2018/06/top-10-courses-to-learn-javascript-in.html"&gt;JavaScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Python is loved by everyone from beginner to experienced programmers for its simplicity and powerful set of libraries and tools which makes working with data really easy.&lt;/p&gt;

&lt;p&gt;For example, you can easily cleanse raw data acquired from a survey to create your Machine learning Model using Padas library.  If you try to do the same thing in other programming languages like Java, you will have to write tons of code and it's not as easy as it is in &lt;a href="https://javarevisited.blogspot.com/2019/09/5-websites-to-learn-python-for-free.html"&gt;Python&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This combination of simplicity, easier learning curve, powerful toolset, and a library make Python the best programming language for Data Science and Machine learning in 2022. &lt;/p&gt;

&lt;p&gt;By the way, if you already made your mind to learn Data Science with Python and looking for resources where you can learn Data Science with Python programming language, tools, and practices then &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprofessional-certificates%2Fibm-data-science"&gt;&lt;strong&gt;IBM Data Science Professional Certificate&lt;/strong&gt;&lt;/a&gt; on Coursera is a great program to start with. This program is specially designed for people who wants to become a Data Scientist in 2022 by learning Python programming language and tools. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprofessional-certificates%2Fibm-data-science"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uftAPoNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.credly.com/images/28944969-813a-43b9-944f-7910111ce764/Professional_Certificate_-_Data_Science.png" alt="Best Data Science Professional Certificate - IBM Training for python developers" width="600" height="600"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now, let's take a look at all of these reasons in detail before you choose Python to start your Machine Learning and Data Science journey with Python in 2022.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-reasons-to-learn-python-for-data-science-in-2022"&gt;
  &lt;/a&gt;
  5 Reasons to learn Python for Data Science in 2022
&lt;/h2&gt;

&lt;p&gt;Anyway, here are the top 5 reasons why Python is so popular among Data Scientists and Machine Learning enthusiasts and why you should learn Python if you want to become a Data Scientist.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-pythons-readability-and-simplicity"&gt;
  &lt;/a&gt;
  1. Python's readability and simplicity
&lt;/h3&gt;

&lt;p&gt;One of the main advantages of Python is that it's intuitive and straightforward, and that's what makes it likable for anyone who wants to get a result rather than lost in code.&lt;/p&gt;

&lt;p&gt;Python is also very readable and easy to learn, which means a shallow entry barrier as compared to other programming languages like &lt;a href="https://www.java67.com/2018/09/top-5-free-R-programming-courses-for-Data-Science-Machine-Learning-Programmers.html"&gt;R&lt;/a&gt;, &lt;a href="https://www.java67.com/2018/08/top-10-free-java-courses-for-beginners-experienced-developers.html"&gt;Java&lt;/a&gt;, or &lt;a href="https://www.java67.com/2018/02/5-free-cpp-courses-to-learn-programming.html"&gt;C+&lt;/a&gt;+, which requires a proper environment to be set up to do anything other than running a trivial HelloWorld program.&lt;/p&gt;

&lt;p&gt;And, If you are already convinced that Python is the best programming language for Data Science in 2022 and looking for an online course that teaches you Python from a Data Science point of view then I highly recommend you to join Kirill Erenemko and SuperDataScience Team's &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-coding%2F"&gt;Python A-Z: Python For Data Science With Real Exercises!&lt;/a&gt;&lt;/strong&gt;  course on Udemy.  This hands-on course is the best course to learn Python for Data Science.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-coding%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTFxr61m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-pPtZfbklaYM/X2LcBqpLFJI/AAAAAAAAjag/xyo6FIQLS78xvFRbUs103DhSAI12eotwACLcBGAsYHQ/s400/Python%252BA-Z%252BPython%252BFor%252BData%252BScience%252BWith%252BReal%252BExercises%252521%252Bbest%252BUdemy%252Bpython%252Bcourse%252Bfor%252Bdata%252Bscience.png" alt="Best Programming language for Data Science - Python" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-tools-and-libraries"&gt;
  &lt;/a&gt;
  2. Tools and Libraries
&lt;/h3&gt;

&lt;p&gt;One of the main primary responsibility of Data scientists is to analyze the Data, and in the real-world Data comes in all shapes. They are often raw and not suitable to run any kind of analytics; hence Data wrangling is applied to that.&lt;/p&gt;

&lt;p&gt;It's a process to clean and transform the data so that you can analyze and model it to create insights.&lt;/p&gt;

&lt;p&gt;Python helps Data Scientists here; it comes with so many &lt;a href="https://javarevisited.blogspot.com/2018/10/top-8-python-libraries-for-data-science-machine-learning.html"&gt;open-source Python libraries&lt;/a&gt; that can do all these tasks for them. &lt;/p&gt;

&lt;p&gt;These are the libraries that are regularly get updated, and all you need to do is use them in your Python scripts.&lt;/p&gt;

&lt;p&gt;You don't need to &lt;strong&gt;learn how NumPy works&lt;/strong&gt; or &lt;strong&gt;how Pandas works&lt;/strong&gt;, as long as you can get your Data clean, apply some mathematical formulas, run some statistical equation you are happy.&lt;/p&gt;

&lt;p&gt;Isn't that a result-oriented person will like? Well, I certainly do. All you need to learn is how to import a Python module, and you are done. &lt;/p&gt;

&lt;p&gt;If you are curious about which Python module to use for which job, then just Google it, you will find your answers. You don't need to remember which Python libraries I should use.&lt;/p&gt;

&lt;p&gt;In reality, after working with few scripts, you will automatically get familiar with essential Python libraries for Data Scientists like &lt;a href="https://javarevisited.blogspot.com/2021/10/top-5-courses-to-learn-numpy-for-python.html"&gt;NumPy&lt;/a&gt;, which stands for Numerical Python, &lt;a href="https://javarevisited.blogspot.com/2019/10/top-5-courses-to-learn-pandas-for-data-analysis-python.html"&gt;Pandas&lt;/a&gt;, which is the most critical tool for Data cleanup and Analysis, and &lt;a href="https://matplotlib.org/"&gt;MatPlotLib&lt;/a&gt; for visualizing data, creating charts and generating insights.&lt;/p&gt;

&lt;p&gt;You also have &lt;a href="https://becominghuman.ai/top-10-courses-to-learn-tensorflow-for-machine-learning-in-2020-39a31e7cd84b"&gt;TensorFlow&lt;/a&gt;, &lt;a href="https://becominghuman.ai/10-free-courses-to-learn-python-machine-learning-libraries-scikit-learn-numpy-pandas-keras-3c77ba1a6907"&gt;Sci-kit&lt;/a&gt;, &lt;a href="https://www.java67.com/2020/06/top-5-courses-to-learn-pytorch-and-keras.html"&gt;PyTorch&lt;/a&gt;, which provide some Scientific and Machine learning capability and continuously being enhanced and updated by talented people around the world. &lt;/p&gt;

&lt;p&gt;For example, Facebook has recently added a lot of machine learning capability on &lt;a href="https://www.java67.com/2020/06/top-5-courses-to-learn-pytorch-and-keras.html"&gt;PyTorch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a Data Scientist and Machine learning enthusiast, you don't need to worry about updating libraries, adding new functionalities, etc., as someone else is doing that job for you. You just need to use the library to do your job.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcomplete-python-bootcamp%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ycTymrRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-aM0F_MP5BRc/XrQLerBkDvI/AAAAAAAAe28/GvgJH3MBOScr7tsixGVuUGb4ffXkLexKQCLcBGAsYHQ/w400-h300/Matplotlib%252BPython%252Bmachine%252Blearning%252Blibrary.png" alt="5 Reasons Why Python is the Best Choice for Machine Learning" width="400" height="300"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-jupyter-notebook"&gt;
  &lt;/a&gt;
  3. Jupyter Notebook
&lt;/h3&gt;

&lt;p&gt;Another reason why Data scientists love Python is Jupyter Notebook, which allows you to code and collaborate with other Data Scientists using a web browser. &lt;/p&gt;

&lt;p&gt;Jupyter Notebook was born from IPython, an interactive command-line terminal for &lt;a href="https://medium.com/swlh/5-free-python-courses-for-beginners-to-learn-online-e1ca90687caf"&gt;Python&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since working on the command line is not easy for everyone, they created a powerful web interface to Python and named it Jupyter Notebook.&lt;/p&gt;

&lt;p&gt;The Jupyter Notebook is an incredibly powerful tool for developing and presenting Data Science projects. IT allows you to integrate code and its output into a single document, combining Visualization, mathematical formulas, and explanations.&lt;/p&gt;

&lt;p&gt;In fact, most of the online courses I have taken about &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprofessional-certificates%2Fgcp-data-engineering"&gt;&lt;strong&gt;Machine learning on Google Cloud&lt;/strong&gt;&lt;/a&gt; on Coursera uses Jupyter Notebook for a hands-on example. Because of its impressive capabilities, Jupyter Notebook is very popular among Data Scientists, and it's one of the must-have tools for them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprofessional-certificates%2Fgcp-data-engineering"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iyee2yXa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-uUIvheOVCDg/XrQKXxLwy0I/AAAAAAAAe2s/W_EF2C_-sC0GG87lawx6qUFppZjQFw93ACLcBGAsYHQ/w400-h267/Jupytor%252Bnotebook%252Bfor%252Bpython.png" alt="Why Python is the best Programming language for Machine Learninge?" width="397" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if all these good things are not enough, you would be surprised to know that Jupiter Notebook can also handle R code, which means you can also collaborate with a fellow Data Scientist who is using the &lt;a href="https://becominghuman.ai/top-5-free-courses-to-learn-r-programming-for-data-science-and-statistics-in-2020-305bf1c6f24e"&gt;R programming language&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-community-support"&gt;
  &lt;/a&gt;
  4. Community Support
&lt;/h3&gt;

&lt;p&gt;Another reason which I found behind the popularity of Python among people learning Data Science in the community. Since Python has an active community, and many people are doing &lt;a href="https://becominghuman.ai/5-best-courses-to-learn-pythons-pandas-libary-for-data-analysis-and-data-science-34b62abb0e96"&gt;Data Science using Python&lt;/a&gt;, you already have an active community to call upon when you get stuck.&lt;/p&gt;

&lt;p&gt;You also benefit from their work as most of the things are shared as open source.&lt;/p&gt;

&lt;p&gt;Many big organizations like Google and Facebook have contributed to &lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-tensorflow-and-machine-learning-courses-online-programmers.html"&gt;TensorFlow&lt;/a&gt; and &lt;a href="https://www.java67.com/2020/06/top-5-courses-to-learn-pytorch-and-keras.html"&gt;PyTorch&lt;/a&gt;, some of the most popular Python libraries for Data Science and Machine Learning.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-pandas"&gt;
  &lt;/a&gt;
  5. Pandas
&lt;/h3&gt;

&lt;p&gt;This is an extension of the second point, but Pandas is such an essential tool for Data Scientists that It warrants a special mention. Most of the Data Science project I have worked upon starts with &lt;a href="https://javarevisited.blogspot.com/2019/10/top-5-courses-to-learn-pandas-for-data-analysis-python.html"&gt;Pandas&lt;/a&gt; and finishes with it. &lt;/p&gt;

&lt;p&gt;It not only allows you to clean and massage your Data but also to analyze the data. You can load data from various data sources like CSV files, &lt;a href="https://medium.com/javarevisited/7-best-microsoft-excel-courses-for-beginners-33a069708680"&gt;Excel&lt;/a&gt;, Databases, and many other sources.&lt;/p&gt;

&lt;p&gt;Pandas contain a large variety of functions for data import, export, indexing, and data manipulation. It also provides a handy data structure like DataFrames (a series of rows and columns) and Series (1-dimensional array)and efficient methods for handling them.&lt;/p&gt;

&lt;p&gt;For example, you can use Pandas to reshape, merge, split, and aggregate data. In short, Pandas is an indispensable tool for Data Scientists along with the Jupyter Notebook. &lt;/p&gt;

&lt;p&gt;If you want to learn Pandas better, I also recommend you to check out the &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-analysis-with-pandas%2F"&gt;&lt;strong&gt;Data Analysis with Python and Pandas&lt;/strong&gt;&lt;/a&gt; course on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-analysis-with-pandas%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5uUVwNp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-F4X0t8fxAQ4/XqglDUHnACI/AAAAAAAAeoU/uEXonnv3rfk5UotxkKBxY8NpQuz-_9oKQCLcBGAsYHQ/w400-h225/Data%252BAnalysis%252Bwith%252BPandas%252Band%252BPython%252BUdemy%252Bcourse.jpg" alt="why python is the best programming language for machine learning" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Coming back to the topic, because of all these excellent tools, frameworks, libraries, and simplicity of the Python programming language, Data Scientists love Python and continue to love it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In short, here are &lt;strong&gt;5 main reasons why Python is the most popular and best programming language&lt;/strong&gt; for Data Science and Machine Learning&lt;/p&gt;

&lt;p&gt;1. Python is Simple and Intuitive.&lt;br&gt;
2. Jupyter Notebook allows Data scientists to collaborate and combine cod and output.&lt;br&gt;
3. Python packages and libraries like &lt;a href="https://www.java67.com/2021/11/top-5-free-courses-to-learn-numpy-for.html"&gt;NumPy&lt;/a&gt; and Pandas help with data cleanup and Analysis.&lt;br&gt;
4. Community support&lt;br&gt;
5. Pandas&lt;/p&gt;

&lt;p&gt;If you still have doubts, here is a chart from IBM's survey about the most popular programming language for Machine learning from the last couple of years. &lt;/p&gt;

&lt;p&gt;It's a bit old, but it shows a clear trend that Python is way ahead with mainstream programming language like Java, C++, JavaScript when it comes to Data Science and Machine learning&lt;/p&gt;

&lt;p&gt;That's all about &lt;strong&gt;why Python is the most popular programming language for Data Science and Machine learning&lt;/strong&gt;. I am also from the same camp. I did try R but not more than a couple of days. Why? Because I wanted to spend my time on something which I can use in places other than Data Science, and on that parameter, Python is well ahead with R.&lt;/p&gt;

&lt;p&gt;If you also think that &lt;a href="https://javarevisited.blogspot.com/2020/05/why-python-is-best-programming-language.html"&gt;Python is the best Programming language for Data Science&lt;/a&gt;, here are some courses you may want to checkout to learn Python from the Data Scientist point of view.&lt;/p&gt;

&lt;p&gt;Other Articles &lt;strong&gt;Programmers and Data Scientist&lt;/strong&gt; may like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://javarevisited.blogspot.com/2019/08/top-5-python-books-for-data-science-and-machine-learning.html"&gt;5 Books to learn Python for Data Science &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/12/want-to-build-chat-bots-using-ai.html"&gt;Top 5 Courses to build Chatbots using Python and AI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/10/top-8-python-libraries-for-data-science-machine-learning.html"&gt;Top 8 Python Libraries for Data Science and Machine Learning&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://hackernoon.com/top-5-courses-to-learn-python-in-2018-best-of-lot-26644a99e7ec"&gt;Top 5 Courses to Learn Python for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dev.to/javinpaul/10-of-the-best-tensorflow-courses-to-learn-machine-learning-from-coursera-and-udemy-37bf"&gt;Top 10 TensorFlow courses for Data Scientist&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://hackernoon.com/top-5-courses-to-learn-python-in-2018-best-of-lot-26644a99e7ec"&gt;10 Machine Learning and Deep Learning Courses for Programmers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/09/top-5-statistics-and-mathematics-course-for-data-science.html"&gt;5 Courses to learn Maths and Stats for Data Science&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2019/01/5-free-courses-to-learn-machine-and-deep-learning-in-2019.html"&gt;Top 5 Free Courses to Learn Machine Learning&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2021/11/top-5-free-pandas-courses-for-beginners.html"&gt;Top 5 Courses to learn Pandas for Data Analysis&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/my-favorite-data-science-and-machine-learning-courses-from-coursera-udemy-and-pluralsight-eafc73acc73f"&gt;10 Best Data Science and Machine Certification in 2022 &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/07/top-5-tableau-online-courses-and-certifications-for-data-science-engineers.html"&gt;Top 5 Courses to Learn Tableau for Data Science&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://hackernoon.com/10-free-python-programming-courses-for-beginners-to-learn-online-38312f3b9912"&gt;10 Free Courses to Learn Python for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-coursera-certificates-to-start-your-career-in-cloud-data-science-ai-mainframe-and-it-558690c83587"&gt;10 Coursera Certificate to Start Career in Cloud and Data Science&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/08/top-10-coursera-certifications-to-learn-Data-Science-Visualization-and-Data-Analysis.html"&gt;Best Courses Courses for Data Analysis and Data Science&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you have any other reasons why Python is so popular among Data Scientists and &lt;em&gt;Why Python is the best programming language for Data Science and Machine Learning in 2022&lt;/em&gt;, then please chip in and share it with us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you don't know Python but want to learn Python now then I also suggest you check The &lt;a href="http://bit.ly/2AHe393"&gt;&lt;strong&gt;Python Mega Course: Build 10 Real World Applications&lt;/strong&gt;&lt;/a&gt; course to learn Python in-depth. It's a great hands-on course to further boost your training on Machine learning and Artificial Intelligence. It's one of the must-have tools in your arsenal.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Day 16: Icon buttons should be labelled with aria-label</title>
      <author>Masa Kudamatsu</author>
      <pubDate>Fri, 17 Dec 2021 07:35:32 +0000</pubDate>
      <link>https://dev.to/masakudamatsu/day-16-icon-buttons-should-be-labelled-with-aria-label-551g</link>
      <guid>https://dev.to/masakudamatsu/day-16-icon-buttons-should-be-labelled-with-aria-label-551g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Use &lt;code&gt;aria-label&lt;/code&gt; to give accessible names to icon buttons. Browsers may fail to recognize an icon image's own accessible name as its parent &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element's accessible name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;My Ideal Map App&lt;/em&gt;, a web app I'm building, has four icon buttons on its main screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z170bHq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3ow89ok7ecmf8sdckh3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z170bHq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3ow89ok7ecmf8sdckh3.png" alt="An iPhone screen showing four icon buttons over a full-screen street map" width="880" height="645"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My Ideal Map App's main screen&lt;/strong&gt; (screenshot by the author)&lt;/p&gt;

&lt;p&gt;When clicked:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the top-left button with a hamburger menu icon will show a menu; &lt;/li&gt;
&lt;li&gt;the top-right button with a magnifier icon will show a search box; &lt;/li&gt;
&lt;li&gt;the bottom-right button with a flight-takeoff icon will show the user's current location on the street map; and &lt;/li&gt;
&lt;li&gt;the bottom right button with a plus sign icon will show a dialog to save a place on the map. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(For more detail on these buttons, in particular on why they take an unusual button shape, see &lt;a href="https://dev.to/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po"&gt;&lt;strong&gt;Day 7 of this blog series&lt;/strong&gt;&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;To make these buttons accessible for screen reader users, I need to assign an &lt;em&gt;accessible name&lt;/em&gt; to each button. &lt;/p&gt;

&lt;p&gt;An &lt;em&gt;accessible name&lt;/em&gt; is what screen readers will announce to the visually impaired user (see &lt;a href="https://www.tpgi.com/what-is-an-accessible-name/"&gt;Watson 2017&lt;/a&gt; for more detail). If a button has text as its label, its accessible name is the label text. If a button has only an icon image, we need to figure out how to give it an accessible name. Otherwise, screen readers will just announce "button", leaving the user unsure of what will happen after they press the button.&lt;/p&gt;

&lt;p&gt;So I want to give accessible names to these four buttons as &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;“Show menu”&lt;/li&gt;
&lt;li&gt;“Search place”&lt;/li&gt;
&lt;li&gt;“Track your location”&lt;/li&gt;
&lt;li&gt;“Save place”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This way, screen reader users will be able to tell what will happen after they press these buttons.&lt;/p&gt;

&lt;p&gt;Today I've learned something about how to implement this with HTML. So I'd like to share it with you below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initial-attempt"&gt;
  &lt;/a&gt;
  Initial attempt
&lt;/h2&gt;

&lt;p&gt;Initially, I defined an accessible name to the icon image (an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element), hoping that it would be equivalent of the button's label text. Taking the top-left menu button as an example, here's the HTML code I initially wrote:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 56 48"&lt;/span&gt;
       &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"56px"&lt;/span&gt;
       &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"48px"&lt;/span&gt;
       &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt;
       &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"menu"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"menu"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Show menu
    &lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="na"&gt;SVG&lt;/span&gt; &lt;span class="na"&gt;image&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt; &lt;span class="na"&gt;be&lt;/span&gt; &lt;span class="na"&gt;inserted&lt;/span&gt; &lt;span class="na"&gt;--&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding &lt;code&gt;role="img"&lt;/code&gt; to the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element will indicate that the SVG image is not decorative (so screen readers won't skip it). To give an "alt text" to the inline SVG image, I added a &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element as the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element's child and referred to its &lt;code&gt;id&lt;/code&gt; attribute value with  &lt;code&gt;aria-labelledby&lt;/code&gt; in the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; tag. This is the best practice to make an inline SVG image accessible, according to &lt;a href="https://www.smashingmagazine.com/2021/03/good-better-best-untangling-complex-world-accessible-patterns/#accessible-svg-patterns"&gt;Fisher (2021)&lt;/a&gt;. See also &lt;a href="https://css-tricks.com/accessible-svgs/#2-inline-svg"&gt;Migliorisi (2016)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, using this method as a button label turns out to be not a good idea. &lt;a href="https://www.scottohara.me/blog/2019/05/22/contextual-images-svgs-and-a11y.html"&gt;O'Hara (2019)&lt;/a&gt; notes that some combinations of browsers and screen readers won't recognize the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element's accessible name as its parent &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element's accessible name.&lt;/p&gt;

&lt;p&gt;I myself experienced the same issue with Chrome (version 96.0.4664.110). Two of the four buttons don't have accessible names, even though I used exactly the same HTML code structure for all the four buttons...&lt;/p&gt;

&lt;p&gt;Here's &lt;a href="https://2567b1ff.mima.pages.dev/"&gt;a demo&lt;/a&gt;. Using Chrome DevTools' accessibility panel, you can see:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The top-left button shows an accessible name of "Show menu", which is the same as its SVG icon's (defined in the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element): &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LGJY7x6w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqq2edisa8inp7ffsddy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LGJY7x6w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqq2edisa8inp7ffsddy.png" alt="" width="856" height="870"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The top-right button &lt;strong&gt;has no accessible name&lt;/strong&gt;, even though its SVG icon does have an accessible name of "Search place": &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kGl0JLEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jjmhnyblqr5duplgn2x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kGl0JLEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jjmhnyblqr5duplgn2x.png" alt="" width="856" height="870"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The bottom-right button with the airplane icon shows an accessible name of "Track your location", which is the same as its SVG icon's: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qLRrd5Xc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/znyhp2jnyq1ao4lbdb72.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qLRrd5Xc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/znyhp2jnyq1ao4lbdb72.png" alt="" width="856" height="870"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The bottom-right button with the plus sign icon &lt;strong&gt;has no accessible name&lt;/strong&gt;, even though its SVG icon has an accessible name of "Save place":      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iqdgAIhe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ga0n81fya1tgrndyzm02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iqdgAIhe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ga0n81fya1tgrndyzm02.png" alt="" width="856" height="870"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is so weird... Seems like browsers do not consistently recognize an accessible name of the icon image as a button's label text.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#digression-how-ive-noticed-this-bug"&gt;
  &lt;/a&gt;
  Digression: How I've noticed this bug
&lt;/h3&gt;

&lt;p&gt;Incidentally, I noticed the bug thanks to &lt;a href="https://testing-library.com/docs/cypress-testing-library/intro/"&gt;Cypress Testing Library&lt;/a&gt;. While I was writing some tests for &lt;a href="https://cypress.io/"&gt;Cypress&lt;/a&gt; to test-drive the search feature of the app, I wrote this line of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Search place&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This simulates the user's action of clicking the button whose accessible name is 'Search place'. However, I got an error while running this test, because there was no button with its accessible name being 'Search place'. &lt;/p&gt;

&lt;p&gt;What's great about &lt;a href="https://testing-library.com/docs/cypress-testing-library/intro/"&gt;Cypress Testing Library&lt;/a&gt; is that accessibility tests are effectively build-in. It forces us to simulate the user's action as if the user were using screen readers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-using-raw-arialabel-endraw-instead"&gt;
  &lt;/a&gt;
  Solution: Using &lt;code&gt;aria-label&lt;/code&gt; instead
&lt;/h2&gt;

&lt;p&gt;Rather than figuring out how to solve this bug, I go with an alternative approach to give an accessible name to an icon button: the use of &lt;code&gt;aria-label&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; 
  &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Show menu"&lt;/span&gt;
  &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; 
    &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;  
    &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 56 48"&lt;/span&gt;
    &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"56px"&lt;/span&gt;
    &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"48px"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="na"&gt;SVG&lt;/span&gt; &lt;span class="na"&gt;image&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt; &lt;span class="na"&gt;be&lt;/span&gt; &lt;span class="na"&gt;inserted&lt;/span&gt; &lt;span class="na"&gt;--&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;aria-label&lt;/code&gt; attribute gives an accessible name (see &lt;a href="https://www.tpgi.com/what-is-an-accessible-name/"&gt;Watson 2017&lt;/a&gt; for more detail). It is usually not recommended because the sighted users won't be able to read it. For icon buttons, however, the sighted users can tell what the button is for, by seeing the button's icon. So the use of &lt;code&gt;aria-label&lt;/code&gt; is justified. This is an approach recommended by &lt;a href="https://www.sarasoueidan.com/blog/accessible-icon-buttons/"&gt;Soueidan (2019)&lt;/a&gt; and &lt;a href="https://www.scottohara.me/blog/2019/05/22/contextual-images-svgs-and-a11y.html"&gt;O'Hara (2019)&lt;/a&gt; for labelling icon buttons.&lt;/p&gt;

&lt;p&gt;Now the inline SVG image is no longer meaningful for screen readers. So the &lt;code&gt;role="img"&lt;/code&gt; attribute and the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element are both removed, and the &lt;code&gt;aria-hidden="true"&lt;/code&gt; is added to hide the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element from screen readers. &lt;/p&gt;

&lt;p&gt;Here's &lt;a href="https://5df230c6.mima.pages.dev/"&gt;the demo after the fix&lt;/a&gt;. Now all the buttons have accessible names:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The top-left button with a hamburger menu icon shows an accessible name of "Show menu": &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mBbTeghR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u14nge7sdap3wyt2q0uk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mBbTeghR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u14nge7sdap3wyt2q0uk.png" alt="" width="850" height="848"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The top-right button with a magnifier icon shows an accessible name of "Search place": &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vxYUSkwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1dc051vbnx4mdri9dko.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vxYUSkwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1dc051vbnx4mdri9dko.png" alt="" width="850" height="866"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The bottom-right button with the airplane icon shows an accessible name of "Track your location": &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yWWepJsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5840dux6msxe3vx2p2v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yWWepJsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5840dux6msxe3vx2p2v.png" alt="" width="850" height="792"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The bottom-right button with the plus sign icon shows an accessible name of "Save place": &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3OMZuibv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rly1y4kjfxaz9zbcpkeg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3OMZuibv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rly1y4kjfxaz9zbcpkeg.png" alt="" width="850" height="792"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#other-approaches"&gt;
  &lt;/a&gt;
  Other approaches
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.sarasoueidan.com/blog/accessible-icon-buttons/"&gt;Soueidan (2019)&lt;/a&gt; suggests two other approaches to give accessible names to icon buttons: using text "visible" only to screen readers (while hiding SVG to them) or using  &lt;code&gt;aria-labelledby&lt;/code&gt; to refer to a hidden &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element that contains text. But the use of &lt;code&gt;aria-label&lt;/code&gt; is much more straightforward to implement.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todays-lesson"&gt;
  &lt;/a&gt;
  Today's lesson
&lt;/h2&gt;

&lt;p&gt;I've learned something today. For icon buttons, use &lt;code&gt;aria-label&lt;/code&gt; to define its accessible name. Don't rely on the icon SVG image's accessible name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;Fisher, Carie (2021) “&lt;a href="https://www.smashingmagazine.com/2021/03/good-better-best-untangling-complex-world-accessible-patterns/"&gt;Good, Better, Best: Untangling The Complex World Of Accessible Patterns&lt;/a&gt;”, &lt;em&gt;Smashing Magazine&lt;/em&gt;, Mar 16, 2021.&lt;/p&gt;

&lt;p&gt;Migliorisi, Heather (2016) “&lt;a href="//ttps://css-tricks.com/accessible-svgs"&gt;Accessible SVGs&lt;/a&gt;”, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Jul 6, 2016.&lt;/p&gt;

&lt;p&gt;O'Hara, Scott (2019) “&lt;a href="https://www.scottohara.me/blog/2019/05/22/contextual-images-svgs-and-a11y.html"&gt;Contextually Marking up accessible images and SVGs&lt;/a&gt;”, &lt;em&gt;scottohara.me&lt;/em&gt;, May 22, 2019.&lt;/p&gt;

&lt;p&gt;Soueidan, Sara (2019) “&lt;a href="https://www.sarasoueidan.com/blog/accessible-icon-buttons/"&gt;Accessible Icon Buttons&lt;/a&gt;”, &lt;em&gt;sarasoueidan.com&lt;/em&gt;, May 22, 2019.&lt;/p&gt;

&lt;p&gt;Watson, Léonie (2017) "&lt;a href="https://www.tpgi.com/what-is-an-accessible-name/"&gt;What is an accessible name?&lt;/a&gt;", &lt;em&gt;TPGi&lt;/em&gt;, Apr 11, 2017.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>html</category>
      <category>button</category>
      <category>svg</category>
    </item>
    <item>
      <title>How do we improve PHP in the future?</title>
      <author>Anders Björkland</author>
      <pubDate>Fri, 17 Dec 2021 07:32:14 +0000</pubDate>
      <link>https://dev.to/andersbjorkland/how-do-we-improve-php-in-the-future-2o9a</link>
      <guid>https://dev.to/andersbjorkland/how-do-we-improve-php-in-the-future-2o9a</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Just the Gist&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
While many are contributing to PHP, there are a few core developers with knowledge and expertise that we are relying on. But there are initiatives to incentivize more developers to contribute their expertise to the language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-core-of-the-issue"&gt;
  &lt;/a&gt;
  The Core of the Issue
&lt;/h2&gt;

&lt;p&gt;We are many developers who love to work with PHP. But there are also many designers and website owners using the power of PHP to create beautiful and functional websites. Considering that there may be about &lt;a href="https://w3techs.com/technologies/details/pl-php"&gt;80% of websites&lt;/a&gt; (where server-side language is known) using PHP, we may be mislead to believe that there is a strong core of PHP developers. While there are many people contributing to the PHP language, some core features are beholden to just a couple of persons. &lt;/p&gt;

&lt;p&gt;One feature that is integral to PHP 8 and giving it such a performance boost is the Just-in-time compiler. According to the post &lt;a href="https://blog.krakjoe.ninja/2021/05/avoiding-busses.html"&gt;Avoiding busses&lt;/a&gt; by Joe Watkins, there may now be two people understanding the integral parts of this system. Now, seeing one of these people move on to other projects, we are swiftly made aware of some of the challenges we face as a community. &lt;/p&gt;

&lt;p&gt;Not only are there few people who currently understand some integral parts, but there are also few who have a full time job to orchestrate the development of the language. Since it's an open source project, there hasn't been the mission for one single corporation to drive the development. Despite this, many individuals, companies, and organizations has made some significant contributions. But this is not enough.  &lt;/p&gt;

&lt;p&gt;It's not all dark though. We have a foundation being formed to help the community. And the more people who are aware of what is known as &lt;strong&gt;the bus factor&lt;/strong&gt;, the more are willing to help. C is the building block of PHP, and perhaps this is something you would be interested to build with. Get to know the internals from &lt;a href="https://www.phpinternalsbook.com/index.html"&gt;PHP Internals Book&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-you"&gt;
  &lt;/a&gt;
  What about you?
&lt;/h2&gt;

&lt;p&gt;Have you thought about who builds the core of PHP? Would you like to contribute? Are there other critical internal features you would like to highlight? Comment below and let us know what you think ✍&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Joe Watkins about &lt;em&gt;the bus factor&lt;/em&gt;: &lt;a href="https://blog.krakjoe.ninja/2021/05/avoiding-busses.html"&gt;https://blog.krakjoe.ninja/2021/05/avoiding-busses.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Exploring the PHP JIT compiler: &lt;a href="https://www.zend.com/blog/exploring-new-php-jit-compiler"&gt;https://www.zend.com/blog/exploring-new-php-jit-compiler&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Public Solving: Nice or Naughty list</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 17 Dec 2021 07:20:17 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/public-solving-nice-or-naughty-list-2nj</link>
      <guid>https://dev.to/dailydevtips1/public-solving-nice-or-naughty-list-2nj</guid>
      <description>&lt;p&gt;Santa cannot give naughty kids a present, so he asked us to help him evaluate how the kids behaved.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/devadvent/puzzle-6"&gt;You can find the puzzle here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Luckily, the elves did an excellent job keeping track of each kid's events.&lt;/p&gt;

&lt;p&gt;They provided us with a JSON file with all the kids and the events that occurred.&lt;br&gt;
It's up to us to determine if a kid was naughty or nice.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#thinking-about-the-solution"&gt;
  &lt;/a&gt;
  Thinking about the solution
&lt;/h2&gt;

&lt;p&gt;First of all, we need to import the JSON array to use it.&lt;br&gt;
My first thought was to just import it, but I noticed in the package.json this was disabled.&lt;/p&gt;

&lt;p&gt;So let's play along and determine we can't change that.&lt;br&gt;
This means we need to manually load the JSON file as if we are loading it from an external resource.&lt;/p&gt;

&lt;p&gt;Once that's done, we need to evaluate the events for the kids and sum the score. &lt;/p&gt;

&lt;p&gt;Then we need to filter out the nice kids into one array and the naughty kids into another.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#building-the-nice-or-naughty-list"&gt;
  &lt;/a&gt;
  Building the nice or naughty list
&lt;/h2&gt;

&lt;p&gt;As mentioned, we need to manually load the JSON vs. importing it.&lt;br&gt;
A quick way to do this is to use the &lt;a href="https://nodejs.org/api/esm.html#esm_no_json_module_loading"&gt;node filesystem API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This basically works the same as using the &lt;code&gt;require&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;readFile&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs/promises&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;kids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../data/sampleData.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We make sure to parse the file as JSON, and now we have a kids variable that includes the full JSON array.&lt;/p&gt;

&lt;p&gt;So for the first task, return the kids we can use the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getKids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;kids&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It couldn't get easier than that, right?&lt;/p&gt;

&lt;p&gt;The next task is to determine if the kid is nice or naughty.&lt;br&gt;
We can do this by evaluating the kid's scores for each event.&lt;/p&gt;

&lt;p&gt;Meaning we can sum the score of all events. If the total score is below 0, the kid was naughty! Else the kid was nice.&lt;/p&gt;

&lt;p&gt;This is a perfect option for the &lt;a href="https://daily-dev-tips.com/posts/javascript-reduce-method/"&gt;&lt;code&gt;reduce&lt;/code&gt; method&lt;/a&gt;, which can be used to calculate things.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findOutIfNaughtyOrNice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;kid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;NAUGHTY&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NICE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we do here is call the reduce function. The first parameter, &lt;code&gt;total&lt;/code&gt;, is the accumulator. The second one is the current row.&lt;br&gt;
We say take the total and add the current row's score.&lt;br&gt;
At the end, you see &lt;code&gt;, 0&lt;/code&gt;. This is the starting value.&lt;/p&gt;

&lt;p&gt;Then we simply return the &lt;code&gt;NAUGHTY&lt;/code&gt; or &lt;code&gt;NICE&lt;/code&gt; constants we define at the top of the file like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NAUGHTY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;naughty&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NICE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next task is the retrieve arrays with all naughty kids and one with all the nice kids.&lt;/p&gt;

&lt;p&gt;This is where the &lt;a href="https://daily-dev-tips.com/posts/javascript-filter-method/"&gt;&lt;code&gt;filter&lt;/code&gt; method&lt;/a&gt; comes in handy. It filters out an array of specific criteria.&lt;/p&gt;

&lt;p&gt;In our case, we want to get the &lt;code&gt;findOutIfNaughtyOrNice&lt;/code&gt; function for a kid and add them to the specific array if it matches.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getNiceKids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;kids&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;kid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;findOutIfNaughtyOrNice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;NICE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So for each kid, we call the &lt;code&gt;findOutIfNaughtyOrNice&lt;/code&gt; function, and if the score is &lt;code&gt;NICE&lt;/code&gt;, we add the kid to this output.&lt;/p&gt;

&lt;p&gt;The same can be used for the naughty list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getNaughtyKids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;kids&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;kid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;findOutIfNaughtyOrNice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;NAUGHTY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it, time to run the test and see if it worked.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gpq_qXIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638806813564/wDnrPMnQK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gpq_qXIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638806813564/wDnrPMnQK.png" alt="All test green!" width="642" height="286"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Santa can be happy! &lt;br&gt;
We have provided him with all the nice and naughty kids!&lt;/p&gt;

&lt;p&gt;Where you on the nice or naughty list?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Creating A Flip Book Animation With React: The declarative way</title>
      <author>Harsh Choudhary</author>
      <pubDate>Fri, 17 Dec 2021 07:00:18 +0000</pubDate>
      <link>https://dev.to/harshkc/creating-a-flip-book-animation-with-react-the-declarative-way-4kgb</link>
      <guid>https://dev.to/harshkc/creating-a-flip-book-animation-with-react-the-declarative-way-4kgb</guid>
      <description>&lt;p&gt;In today's post, we will learn to create a flipbook style animation by converting a simple class-based component into a functional component.&lt;/p&gt;

&lt;p&gt;If you used React Hooks for more than a few hours, you probably ran into an intriguing problem: using &lt;code&gt;setInterval&lt;/code&gt; just doesn’t work as you’d expect. We will also learn to use it in a more declarative way. More on that later, let's focus on our flipbook nostalgia.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l46CrdPgxGUn3tKN2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l46CrdPgxGUn3tKN2/giphy.gif" alt="1000 years ago gif" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just like in school with a notebook full of doodles we will be only creating the illusion of movement but hey it’s still pretty fun. Before diving into the nitty-gritty details let’s review the motivation behind this blog.&lt;/p&gt;

&lt;p&gt;I stumbled upon this &lt;a href="https://medium.com/@ryanwiemer/creating-a-flip-book-animation-with-react-a45902905455"&gt;blog&lt;/a&gt; when I just started learning React, I found it to be a very simple and interesting approach and challenged myself to convert the class-based implementation into functional components. I migrated the code in minutes but then some issue shot me in the face, I was down for hours searching for answers like why I chose this life, and then Dan's blog resurrected me. Oh wait, I came a long way in the flow, let's rewind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-we-building"&gt;
  &lt;/a&gt;
  What are we building?
&lt;/h2&gt;

&lt;p&gt;We are building a component that takes an array of images as a prop and then loop through them to create a moving picture all while retaining the benefits of regular still images on the web.&lt;br&gt;
Like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/4kz9g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But Harsh we can achieve the same thing with GIF and video, then why so much work? I was out of blog ideas, just kidding, you didn't read that blog? did you? It has explained all the pros and cons of using the different approaches and why the author went with this approach.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#migrating-to-functional-component"&gt;
  &lt;/a&gt;
  Migrating to functional component
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/0xvkn"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Yay! we did it! &lt;br&gt;
I read &lt;a href="https://overreacted.io/making-setinterval-declarative-with-react-hooks/"&gt;Dan Abramov's blog&lt;/a&gt; thoroughly some days back and realized although our code is working fine, it is not the best way to work with &lt;code&gt;setInterval&lt;/code&gt; and he also insists to make it more declarative because you can make arguments “dynamic”, give that blog a read you will understand.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus-the-declarative-way"&gt;
  &lt;/a&gt;
  Bonus: The declarative way
&lt;/h2&gt;

&lt;p&gt;The declarative use Interval hook looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;savedCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;savedCallback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;tick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;savedCallback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For deep dive into particular part check &lt;a href="https://overreacted.io/making-setinterval-declarative-with-react-hooks/"&gt;Dan Abramov's blog&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;I used above hook to refactor our code, take a look:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/0xvkn"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I know using &lt;code&gt;useInterval&lt;/code&gt; is overkill for this case but I hope you got something out of it which can help you in future with imperative &lt;code&gt;setInterval&lt;/code&gt; pesky behaviour.&lt;/p&gt;

&lt;p&gt;A little about me, I am Harsh and I love to play with code and football, I feel at home while building web apps with React. I am currently learning Remix.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you liked this blog, I am planning to bring more such fun blogs in Future, Let's keep in touch!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Check my &lt;a href="https://dev.to/harshkc/a-quick-guide-to-testing-custom-react-hooks-48ce"&gt;Testing hooks blog&lt;/a&gt;  or  &lt;a href="https://dev.to/harshkc/i-promise-this-hook-will-blow-up-your-1000-lines-of-async-codept-2-3ofb"&gt;how to build generic custom hook blog&lt;/a&gt; to manage async code.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.twitter.com/harshkc99"&gt;Twitter&lt;/a&gt; &lt;br&gt;
&lt;a href="https://www.linkedin.com/in/harshkc99"&gt;Linkedin&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Check my portfolio: &lt;a href="https://www.harshkc.tech"&gt;harshkc.tech&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>functional</category>
    </item>
    <item>
      <title>GitHub Students Developer Pack: Get $10000+ benefits</title>
      <author>Nomadev💻🔱</author>
      <pubDate>Fri, 17 Dec 2021 06:21:40 +0000</pubDate>
      <link>https://dev.to/thenomadevel/github-students-developer-pack-get-10000-benefits-4e8i</link>
      <guid>https://dev.to/thenomadevel/github-students-developer-pack-get-10000-benefits-4e8i</guid>
      <description>&lt;p&gt;Hello, techies  &lt;a href="https://twitter.com/thenomadevel"&gt;Nomadev &lt;/a&gt; here, back with another blog on tech. Today I will share what is possibly the best deal in tech, the  &lt;a href="https://education.github.com/pack"&gt;&lt;strong&gt;GitHub Student Developer Pack&lt;/strong&gt;&lt;/a&gt;. If you are wondering it's clickbait, the answer is a big no. GitHub Student Developer Pack is one of the most underrated and the most useful free developer pack of tools and resources a student can have. Before moving further first let's know about GitHub first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-github"&gt;
  &lt;/a&gt;
  What is GitHub?
&lt;/h2&gt;

&lt;p&gt;It is a web-based version-control and collaboration platform for software developers. GitHub facilitates social coding by providing a web interface to the Git code repository and management tools for collaboration. GitHub is owned by &lt;strong&gt;Microsoft&lt;/strong&gt; and it is well known for being the best code hosting platform for version control and collaboration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-student-developer-pack"&gt;
  &lt;/a&gt;
  GitHub Student Developer Pack
&lt;/h2&gt;

&lt;p&gt;GitHub Student Developer Pack is a super collection of all the things you need to learn how to code. This is made for the student developers to help them to have hands-on experience in various technologies. As for most students, real-world tools can be cost-prohibitive. GitHub created Student Developer Pack with some of their partners to help students to learn to code effectively for &lt;strong&gt;free&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2tyy4RVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639552850180/_5p_LFPZWD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2tyy4RVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639552850180/_5p_LFPZWD.png" alt="gsdp.png" width="880" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-it"&gt;
  &lt;/a&gt;
  How to get it?
&lt;/h2&gt;

&lt;p&gt;You have to go to GitHub Education and select the Students section, there you will find an option named Get your Student Developer Pack.&lt;br&gt;
Or you can get there directly -  &lt;a href="https://education.github.com/pack"&gt;GitHub Student Developer Pack&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;To be eligible for the GitHub Student Developer Pack, you must:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be currently enrolled in a degree or diploma-granting course of studies such as a high school, secondary school, college, university, homeschool, or similar educational institution&lt;/li&gt;
&lt;li&gt;Have a verifiable school-issued email address or upload documents that prove your current student status&lt;/li&gt;
&lt;li&gt;Have a GitHub user account&lt;/li&gt;
&lt;li&gt;Be at least 13 years old&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;In most of the cases, they will only ask your student email id&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-the-pack"&gt;
  &lt;/a&gt;
  What's in the pack?
&lt;/h2&gt;

&lt;p&gt;GitHub Student Developers Pack contains many real-world tools and numerous benefits. Here are some top offers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canva"&gt;
  &lt;/a&gt;
  Canva
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FhNOk9_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639554822848/1iWwoPHed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FhNOk9_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639554822848/1iWwoPHed.png" alt="canva.png" width="300" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Canva, anyone can create professional-looking graphics and designs. Featuring thousands of templates and an easy-to-use editor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Free 12 month subscription of Canva's Pro tier.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jetbrains"&gt;
  &lt;/a&gt;
  JETBRAINS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---6WNWK0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559300103/k7pRLwlyX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---6WNWK0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559300103/k7pRLwlyX.png" alt="jet.png" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;About JetBrains - &lt;/p&gt;

&lt;p&gt;Professional desktop IDEs: IntelliJ IDEA, PyCharm, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benifit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A free subscription for students, to be renewed annually.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#microsoft-azure"&gt;
  &lt;/a&gt;
  Microsoft Azure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AuZZQXCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559287643/Qq-IcKSgk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AuZZQXCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559287643/Qq-IcKSgk.png" alt="azure.png" width="284" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Access to Microsoft Azure cloud services and learning resources – no credit card required&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benifit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Free access to 25+ Microsoft Azure cloud services plus $100 in Azure credit.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bootstrap-studio"&gt;
  &lt;/a&gt;
  Bootstrap Studio
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7QfVZr4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559425415/Y2dvsWsyE.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7QfVZr4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559425415/Y2dvsWsyE.jpeg" alt="boot.jfif" width="389" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bootstrap Studio is a powerful desktop app for creating responsive websites using the Bootstrap framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benifit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A free license for Bootstrap Studio while you are a student.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#digitalocean"&gt;
  &lt;/a&gt;
  DigitalOcean
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DlJze93---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559439674/rnqahzlx0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DlJze93---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559439674/rnqahzlx0.png" alt="digi.png" width="323" height="156"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple cloud hosting, built for developers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benifit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;$100 in platform credit for new users.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  GitHub
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--brLy1oR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559462347/0qyCG_tRrp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--brLy1oR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559462347/0qyCG_tRrp.png" alt="github.png" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Powerful collaboration, code review, and code management&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benifit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Free GitHub Pro while you are a student.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#datacamp"&gt;
  &lt;/a&gt;
  DataCamp
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f9nqRgVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559494167/iBXTW8QPs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f9nqRgVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559494167/iBXTW8QPs.png" alt="datacamp.png" width="367" height="137"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DataCamp helps companies and individuals make better use of data. Our users build data fluency while learning from the world’s top data scientists.&lt;/p&gt;

&lt;p&gt;Benefit&lt;/p&gt;

&lt;p&gt;Free 3-month individual subscription for students.&lt;/p&gt;




&lt;p&gt;and much more in the list, you can see explore them from here -  &lt;a href="https://education.github.com/pack"&gt;GitHub Education&lt;/a&gt; and get your real-time tools ready.&lt;/p&gt;

&lt;p&gt;I hope you liked it and for other such information make sure to follow me on  &lt;a href="https://twitter.com/thenomadevel"&gt;Twitter&lt;/a&gt; and here also.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/thenomadevel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oXBZZGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638859846607/CmXZ9RBvb.jpeg" alt="Twitter.jpg" width="880" height="418"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And if you want to appreciate my work you can  &lt;a href="https://www.buymeacoffee.com/nomadevel"&gt;buy me a coffee&lt;/a&gt;, &lt;strong&gt;Your appreciation is my motivation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/nomadevel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Vno0upf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637869195331/r4SfPP57h.jpeg" alt="coffee.jfif" width="880" height="441"&gt;&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>github</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Install Shoelace with Rails 7, esbuild, and PostCSS</title>
      <author>Jared White</author>
      <pubDate>Fri, 17 Dec 2021 05:27:36 +0000</pubDate>
      <link>https://dev.to/jaredcwhite/how-to-install-shoelace-with-rails-7-esbuild-and-postcss-1cg9</link>
      <guid>https://dev.to/jaredcwhite/how-to-install-shoelace-with-rails-7-esbuild-and-postcss-1cg9</guid>
      <description>&lt;p&gt;&lt;a href="https://shoelace.style"&gt;Shoelace&lt;/a&gt; is a fantastic library of frontend components that are framework-agnostic and work well with Hotwire-style web projects. I wanted to try out the brand-new release of &lt;a href="https://rubyonrails.org/2021/12/15/Rails-7-fulfilling-a-vision"&gt;Rails 7&lt;/a&gt; along with Shoelace, but I quickly ran into a snag.&lt;/p&gt;

&lt;p&gt;Rails 7 ships by default with a frontend pipeline based on import maps and Sprockets. I'm going on public record here that I don't like it, not at all. I ran into several insurmountable problems attempting to "pin" Shoelace and install my pick of components as well as load Shoelace's global set of CSS variables. Boo.&lt;/p&gt;

&lt;p&gt;Thankfully, what is far more appealing regarding Rails 7 is its additional support for &lt;a href="https://esbuild.github.io"&gt;esbuild&lt;/a&gt; and &lt;a href="https://postcss.org"&gt;PostCSS&lt;/a&gt;, two very fast, very capable, and extremely customizable frontend build tools. While I'm bummed that there's no real config file shipping out of the box for esbuild, such things can be put together with the right resources. Maybe the community can step up.&lt;/p&gt;

&lt;p&gt;In the meantime, you can definitely use this setup as-is for common use cases such as installing Shoelace. There are however a couple of gotchas which I'll help you resolve herein.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-rails"&gt;
  &lt;/a&gt;
  Setting Up Rails
&lt;/h2&gt;

&lt;p&gt;First, create a new Rails 7 app using this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails new rails7demo &lt;span class="nt"&gt;-j&lt;/span&gt; esbuild &lt;span class="nt"&gt;-c&lt;/span&gt; postcss
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;-j esbuild&lt;/code&gt; argument tells Rails you'd like to use esbuild for JavaScript bundling, and &lt;code&gt;-c postcss&lt;/code&gt; for CSS bundling.&lt;/p&gt;

&lt;p&gt;From here on, you can simply run &lt;code&gt;bin/dev&lt;/code&gt; to boot up Rails along with both esbuild and PostCSS watch processes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-shoelace"&gt;
  &lt;/a&gt;
  Installing Shoelace
&lt;/h2&gt;

&lt;p&gt;This part is very easy! Simply run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @shoelace-style/shoelace
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you can add a few components to your &lt;code&gt;app/javascript/application.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@shoelace-style/shoelace/dist/components/button/button.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@shoelace-style/shoelace/dist/components/icon/icon.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@shoelace-style/shoelace/dist/components/spinner/spinner.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and make the site styles look a bit better overall via &lt;code&gt;app/assets/stylesheets/application.postcss.css&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-apple-system&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's test Shoelace out in an HTML view. First, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/rails generate controller Articles index &lt;span class="nt"&gt;--skip-routes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then we'll update the &lt;code&gt;config/routes.rb&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# Define your application routes per the DSL in https://guides.rubyonrails.org/routing.html&lt;/span&gt;

  &lt;span class="c1"&gt;# Defines the root path route ("/")&lt;/span&gt;
  &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="s2"&gt;"articles#index"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can add the Shoelace components to &lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;sl-button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;sl-icon&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"prefix"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/sl-icon&amp;gt;&lt;/span&gt;
  Follow on Twitter
&lt;span class="nt"&gt;&amp;lt;/sl-button&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;sl-spinner&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 3rem; --track-width: 6px;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/sl-spinner&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;bin/dev&lt;/code&gt; and go to &lt;code&gt;http://localhost:3000&lt;/code&gt; and…oh no, that doesn't look right at all! We forgot to add Shoelace's global stylesheet to include its CSS variables on the site!&lt;/p&gt;

&lt;p&gt;Er, how do we do that? Hmm. If you try to import the stylesheet in the &lt;code&gt;application.js&lt;/code&gt; file, esbuild and PostCSS will take turns clobbering the output &lt;code&gt;application.css&lt;/code&gt; file in &lt;code&gt;app/assets/builds&lt;/code&gt;. 🙁 And if you try to import the stylesheet directly inside of &lt;code&gt;application.postcss.css&lt;/code&gt;, it doesn't work at all, because the PostCSS config doesn't do anything special to &lt;code&gt;@import&lt;/code&gt; statements so you can't actually import anything from the &lt;code&gt;node_modules&lt;/code&gt; folder. ☹️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixing-the-import-problem"&gt;
  &lt;/a&gt;
  Fixing the Import Problem 😃👍
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;There are two possible solutions to this:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One is to fix the esbuild/PostCSS clobbering issue by changing the output file in the &lt;code&gt;build:css&lt;/code&gt; script inside &lt;code&gt;package.json&lt;/code&gt; to something other than &lt;code&gt;application.css&lt;/code&gt;, then adding a second &lt;code&gt;stylesheet_link_tag&lt;/code&gt; to your application layout. This is probably the best solution overall. But I thought it would be worthwhile to see if we could keep the existing build configuration as-is, and simply fix the PostCSS import issue instead. So let's try that.&lt;/p&gt;

&lt;p&gt;First, run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add postcss-import
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, update your &lt;code&gt;postcss.config.js&lt;/code&gt; file so it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;atImport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcss-import&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;atImport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;postcss-nesting&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autoprefixer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add this to the top of your &lt;code&gt;application.postcss.css&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"@shoelace-style/shoelace/dist/themes/light.css"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when you boot up your server and try the site again, it should actually work this time! Except…the button is missing its icon. Where's the icon?!&lt;/p&gt;

&lt;p&gt;We need to set up a process whereby we copy the icons out of Shoelace's assets folder, and then we tell Shoelace how to find them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#copying-icon-assets"&gt;
  &lt;/a&gt;
  Copying Icon Assets
&lt;/h2&gt;

&lt;p&gt;We'll do this the easy way. Since it's unlikely for Shoelace icons to change with any frequency, we don't need to worry about fingerprinting them for cache busting purposes. We can just dump them in &lt;code&gt;public&lt;/code&gt; and call it a day.&lt;/p&gt;

&lt;p&gt;First, update your scripts in &lt;code&gt;package.json&lt;/code&gt; so they look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;esbuild app/javascript/*.* --bundle --sourcemap --outdir=app/assets/builds&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build:css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn shoelace:copy-assets &amp;amp;&amp;amp; postcss ./app/assets/stylesheets/application.postcss.css -o ./app/assets/builds/application.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shoelace:copy-assets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mkdir -p public/shoelace-assets &amp;amp;&amp;amp; cp -r node_modules/@shoelace-style/shoelace/dist/assets public/shoelace-assets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we did here is add &lt;code&gt;yarn shoelace:copy-assets&lt;/code&gt; in front of the PostCSS command, and then in the copy-assets script we create a new folder and copy the files out of &lt;code&gt;node_modules&lt;/code&gt;. We do this every time we boot up the site, so in future if you upgrade Shoelace, you'll always have the most up-to-date icon set.&lt;/p&gt;

&lt;p&gt;Next, we'll add the following to &lt;code&gt;application.js&lt;/code&gt; so Shoelace knows where to find the icon assets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setBasePath&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@shoelace-style/shoelace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;setBasePath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/shoelace-assets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;bin/dev&lt;/code&gt; and presto! Your Shoelace button now has a Twitter icon to go with it.&lt;/p&gt;

&lt;p&gt;And that's how you can use Shoelace components with your shiny new Rails 7 + esbuild + PostCSS app. Enjoy! 🥳&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webcomponents</category>
      <category>shoelace</category>
    </item>
    <item>
      <title>My journey from QA to Frontend Development</title>
      <author>Sadanand Akshay Pai</author>
      <pubDate>Fri, 17 Dec 2021 05:25:56 +0000</pubDate>
      <link>https://dev.to/sadanandpai/my-journey-from-qa-to-frontend-development-4415</link>
      <guid>https://dev.to/sadanandpai/my-journey-from-qa-to-frontend-development-4415</guid>
      <description>&lt;p&gt;Hello folks,&lt;/p&gt;

&lt;p&gt;I am very much excited to share my career journey, on how I moved to development after &lt;strong&gt;six&lt;/strong&gt; years of testing experience. Also, I will cover my preparation strategy, in brief, to motivate &amp;amp; inspire those who are on this similar path.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Campus placement&lt;/strong&gt; (A little bit about my background)&lt;/p&gt;

&lt;p&gt;I did my &lt;strong&gt;B&lt;/strong&gt;achelor of &lt;strong&gt;E&lt;/strong&gt;ngineering in Electronics &amp;amp; Communication from a college that most refer to as &lt;em&gt;TIER 3&lt;/em&gt; college. I did not even attempt for any of the core companies in my final year. Like the most, I appeared for the mass recruiting companies and fortunately got an opportunity at Infosys Ltd. After the completion of my education, I had to wait for eight months to be onboarded at Infosys as they postponed the joining dates by a few months. Mine was among the first few batches to whom online training was introduced by Infosys. &lt;/p&gt;

&lt;p&gt;I started my career journey with Infosys, Mysore as a trainee engineer in the second month of 2013. I was trained in Java, SQL &amp;amp; a few more computer science topics. These helped me to understand the basics of the software development life cycle.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Career as a QA&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After completing training, I started working at Infosys, Mangalore as a &lt;em&gt;Test engineer&lt;/em&gt; (Quality assurance engineer). The project was in the apple account, and we were working in an offshore development center (ODC) at Infosys. My work expectations were to understand the requirements, write the test cases, execute them, raise the bugs, &amp;amp; so on. It continued for a few more years in different domains (retail, manufacturing, etc.), which offered me some knowledge of these domains too.&lt;/p&gt;

&lt;p&gt;By the time I understood what was going on, it was already mid of &lt;em&gt;2016&lt;/em&gt;. With such an experience, my typing and excel skills had improved a lot. As these skills were nowhere in demand, I decided to move to Silicon Valley of India, Bengaluru. I got the opportunity to work at the client location &lt;em&gt;Huawei&lt;/em&gt; from Infosys. Here I got some exposure to coding on automation testing (Java + Selenium). At the end of 2017, I decided to make at least some progress in my career.&lt;/p&gt;

&lt;p&gt;I joined &lt;em&gt;Sears Holdings&lt;/em&gt; as a senior test engineer. The company faced an unexpected challenge within a few weeks of my joining. They decided to lay off employees. Being the recent joiner, I was at the top of the list. My 2nd company did not even add two months to my resume.&lt;/p&gt;

&lt;p&gt;As I was jobless, many companies were strategically trying to hire me at discounts. Fortunately, I got an offer from TEKSystems to work for Schneider Electric. I started working as a test engineer on core authentication and authorization integration software product.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;What made me change my mind !!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I started exploring different tools and technologies in the testing domain; Performance testing, Automation testing, API testing, Robotic Process Automation. Also, I evaluated my long-term career possibilities in the domain which was either Test Manager or Test Architect. Scrum Master is another option that I was not interested in. As I was not convinced with the options I have, I decided to move out of the testing domain. (personal choice, no offense intended)&lt;/p&gt;

&lt;p&gt;I talked to many developers and took their suggestions regarding the same. But many were skeptical about the chances of getting a decent development opportunity after five-plus years of testing experience. After spending a month evaluating all the possibilities, I decided to start my studies to become a developer. (Better late than never)&lt;/p&gt;

&lt;p&gt;Now the question remaining was about the tech stack. I picked frontend development. The reasons for choosing frontend were&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frontend development was booming with frameworks such as React, Angular during 2018&lt;/li&gt;
&lt;li&gt;We can quickly see the results of what we code&lt;/li&gt;
&lt;li&gt;Entry barrier is lower compared to backend dev, machine learning&lt;/li&gt;
&lt;li&gt;Good number of books and materials to study from&lt;/li&gt;
&lt;li&gt;JavaScript is everywhere (backend, frontend, mobile, ML, AI, ...)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;However, there are fewer materials for intermediate and advanced levels (frontend system design, architecture, WASM, ...)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Frontend preparation 👨‍💻&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I already had some exposure to HTML, CSS, and JavaScript, web development was not something alien to me. I created a &lt;strong&gt;roadmap&lt;/strong&gt; for myself for the next four months. It included 80% of JavaScript and 20% of HTML &amp;amp; CSS. I chose &lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;You don't know JS&lt;/a&gt; for JavaScript and &lt;a href="https://www.udemy.com/user/maximilian-schwarzmuller/"&gt;Maximilian&lt;/a&gt; courses from Udemy for the rest.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A roadmap is a step-by-step guide that helps us to plan our learning. It is very important to create a roadmap for our needs and goals. It also helps us to be focused on our goals and track our progress.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Regularly, I spent 3 hours studying JavaScript after my office hours. I was mainly reliant on the book and a few video courses (Udemy, Youtube) for additional information. On weekends I used to spend 12 to 16 hours. Was it easy? Of course not. It was damn hard for me. I was frequently getting demotivated; I wasn't able to complete even a single topic in a whole day sometimes; sometimes I did not even feel like opening the laptop and practicing; I had to push myself in the evening after the hectic day 😦. However, the studies continued for about three months. The next one month I spent on HTML and CSS. &lt;/p&gt;

&lt;p&gt;Now it was time for &lt;em&gt;frameworks&lt;/em&gt;. Yeaaaa 🕺!!! The most awaited one. Considering the market demands, I had to choose either React or Angular. I started with AngularJS 1.7, building a project. Neither video tutorials nor books; created a project with only its documentation. WoW moment for me. I was able to build and host the project on my own. Now it was the time for React 😎. I converted the same project into React. &lt;/p&gt;

&lt;p&gt;As AngularJS was outdated, I had to learn Angular.  I knew AngularJS was outdated, and it was international to practice it first before moving to Angular. I figured out a practical challenge that our testing team was facing in the daily work. Solving it using a web application would both make the life of testers simple and also give me a real-time frontend project experience. I built a small frontend project in a few weeks, using Angular. My teammates loved it as it reduced the manual effort by 90%. Now I had one good frontend project to showcase in my resume.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Frontend interviews&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As it was already five months from the day I started learning frontend development, I was in a position to start giving the interviews. It was the 1st month of 2019. I updated my resume with the relevant frontend details &amp;amp; projects and activated my job search through &lt;em&gt;Naukri&lt;/em&gt; and &lt;em&gt;Linkedin&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I was overwhelmed with the number of interview calls I got. It was not because of my knowledge but purely due to the demand. Few interviews were scheduled for the same weekends after the initial telephonic round. I cleared all the interview rounds at Trelleborg and got my first offer as a frontend developer 🎊 🎉 🎆. I was ecstatic. I was satisfied with the &lt;em&gt;UI developer&lt;/em&gt; role at Trelleborg and happily accepted the offer immediately. Also, I could clear the interviews at Tredence and Pearson. My job search ended successfully in a short span of 4-5 days which I had never imagined.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Frontend journey till today&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Trelleborg&lt;/em&gt; helped me to get a lot of frontend experience as a beginner and gave me exposure to different frameworks. I worked on legacy codebase as well as modern codebases. I developed projects from scratch as well as handled maintenance projects. I added enhancements to the products as well as architected the projects. From building applications with complex logic to pixel-perfect user interfaces, I was involved.&lt;/p&gt;

&lt;p&gt;After 1 year at Trelleborg, due to covid most of us started working from home. I tried to utilize this time to enhance my core skills. I focused more on HTML &amp;amp; CSS part this time as I was not proficient enough. I also strengthened my problem-solving skills by practicing data structures and algorithms. I started building multiple &lt;a href="https://github.com/sadanandpai"&gt;personal projects&lt;/a&gt; and started sharing my knowledge over Github. I became an active member in various frontend communities. Also, I started actively attending and giving sessions on frontend-related topics. During this time, I connected well with an open frontend community called &lt;a href="https://t.me/teamdevkode"&gt;TeamDevkode&lt;/a&gt; which helped me to grow in the frontend world and gave me the required exposure.&lt;/p&gt;

&lt;p&gt;By then it was 2021. To try out newer challenges, to grow faster 🚀🚀🚀 in my career, I decided to explore the opportunities in the frontend domain. I moved to CoinDCX as a frontend developer in the 1st week of April 2021. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To read more about my interview experience at CoinDCX, &lt;a href="https://frontendpro.hashnode.dev/frontend-interview-experience-at-coindcx"&gt;click here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I see my career transition journey, it makes me feel happy. Now I enjoy being a frontend developer that I aspired to be in my past. It makes me feel like an achiever (though not huge). It helps me to empathize with the feelings of those, who are striving hard for the same. At the same time, it also makes me realize that I am still a beginner and, there is a long way to go.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I did not do it alone&lt;/em&gt;. l am grateful to all those who guided, helped, and morally supported me. I hardly spent money on resources as most of the high-quality resources were available online for free. Thanks to open-source materials, projects, tools, and free youtube channels.&lt;/p&gt;

&lt;p&gt;However, one question was bugging me a lot during my preparation phase. "What if I fail?" The worst thing that can happen is, I gain a good amount of knowledge on something. It is better to try and fail than never to try at all.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An investment in knowledge pays the best interest - Franklin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hope my journey motivates you and ignites that fire 🔥 to excel at the things you are wishing.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>testing</category>
    </item>
    <item>
      <title>X-Mas Wisher in python</title>
      <author>SpandyBoss</author>
      <pubDate>Fri, 17 Dec 2021 05:05:51 +0000</pubDate>
      <link>https://dev.to/spandyboss/x-mas-wisher-in-python-1f5d</link>
      <guid>https://dev.to/spandyboss/x-mas-wisher-in-python-1f5d</guid>
      <description>&lt;h1&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h1&gt;

&lt;p&gt;Hello everyone sorry for the late post as you might now that I am a student so that's why I got loads of classwork to do that's why this post is late . So as you know that X-Mas / Christmas is coming close so in today's post I will be telling you how to make an X-Mas Wisher in Python.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-get-started-"&gt;
  &lt;/a&gt;
  Let's Get started !
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#importing-the-required-modules"&gt;
  &lt;/a&gt;
  Importing the required modules
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#mainpy"&gt;
  &lt;/a&gt;
  main.py
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Making an X-Mas Wisher using python
&lt;/span&gt;
&lt;span class="c1"&gt;#importing the required modules
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For printing the wishes we also need a file which contains wishes so first create a file named wishes.txt &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wishestxt"&gt;
  &lt;/a&gt;
  Wishes.txt
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Happy X-Mas
Santa Claus is coming with some exciting gifts!
Wishing you a Christmas that's merry and bright!
I hope your holiday season is full of peace, joy and happiness!
Merry Christmas with lots of love
I hope your Christmas is filled with joy this year!
May this season find you among those you love, sharing in the twin glories of generosity and gratitude.
Christmas is not an external event at all, but a piece of one’s home that one carries in one’s heart.
We clap hands and welcome the Peace of Christmas.
We beckon this good season to wait a while with us.
Christmas isn’t just a day. It’s a frame of mind.
Wishing you a season that’s merry and bright with the light of God’s love.
Christmas gives us an opportunity to pause and reflect on the important things around us.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#now-we-will-open-the-file-and-choose-a-random-line-to-print-from-it"&gt;
  &lt;/a&gt;
  Now we will open the file and choose a random line to print from it
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#opening and reading the file
&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'wishes.txt'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#using random to choose any random line from the file
&lt;/span&gt;&lt;span class="n"&gt;Wish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#printing the line
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Wish&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now with this done we have successfully created a X-Mas Wisher in python.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this post.&lt;br&gt;
feel free to write down your suggestions/doubts in the comments section and comment "&lt;strong&gt;X-Mas Yaay!&lt;/strong&gt;" if you see this&lt;/p&gt;

&lt;p&gt;That's it for today, stay safe and do take very good care of yourselves.&lt;br&gt;
Thanks &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Styling in React.js</title>
      <author>Kunal Garg</author>
      <pubDate>Fri, 17 Dec 2021 04:13:31 +0000</pubDate>
      <link>https://dev.to/gargkunal/styling-in-reactjs-364a</link>
      <guid>https://dev.to/gargkunal/styling-in-reactjs-364a</guid>
      <description>&lt;p&gt;Today we are going to learn styling in css and how to declare variables and all.&lt;/p&gt;

&lt;p&gt;For styling we can use inline and external file css which can be component based or page based. So we are going to use className for naming the component.&lt;/p&gt;

&lt;p&gt;Also we can use variable for reuse value through the component.&lt;/p&gt;

&lt;p&gt;Given below the example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;div className="nav-wrapper"&amp;gt;
      &amp;lt;nav className='nav-heading'&amp;gt;{c}&amp;lt;/nav&amp;gt;
      &amp;lt;ul className='nav-items'&amp;gt;
        &amp;lt;li&amp;gt;Home&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Contact&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;About&amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Css Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.nav-wrapper{
    display: flex;
    height: 80px;
    background-color: aliceblue;
    width: 100vw;
    padding: 0 !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/y5ZsVNcpiLM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Build a Unique Web Application with React Js?</title>
      <author>Daniel Jackson</author>
      <pubDate>Fri, 17 Dec 2021 04:10:52 +0000</pubDate>
      <link>https://dev.to/tbihitesh/how-to-build-a-unique-web-application-with-react-js-2ho0</link>
      <guid>https://dev.to/tbihitesh/how-to-build-a-unique-web-application-with-react-js-2ho0</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bnn7OXMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2019/03/Create-a-Web-App-Using-React-and-Backendless-Feature-e1553111666711.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bnn7OXMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2019/03/Create-a-Web-App-Using-React-and-Backendless-Feature-e1553111666711.png" alt="Build a Unique Web Application with React Js" title="React js" width="880" height="521"&gt;&lt;/a&gt;&lt;br&gt;
With the advancement of technology, the development of mobile-friendly web applications has become standard. We all know that when it comes to researching different businesses, most individuals prefer to use their phones rather than their computers. That is why companies are looking for a new web framework capable of producing scalable and robust web applications. Therefore, most of them prefer React js development services to build web applications for their company.&lt;/p&gt;

&lt;p&gt;Look no farther than the React Js framework if you're planning to build a website for your company or want to make changes to an existing one. It will not only help you increase your ROI, but it will also help you attract more visitors. Therefore, one should hire react js developer to get their web application development.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#steps-to-create-a-new-web-application-using-react-js"&gt;
  &lt;/a&gt;
  Steps to Create a New Web Application Using React Js
&lt;/h2&gt;

&lt;p&gt;Here, we have discussed all the basic points through which you can easily develop your react js web application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1-first-install-the-reactjs-project"&gt;
  &lt;/a&gt;
  Step 1:  First, Install the ReactJS project
&lt;/h3&gt;

&lt;p&gt;Type the following command in the visual display unit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;npm install –g create-react-app &lt;/li&gt;
&lt;li&gt;create-react-app we-react-app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start the project, with the following command after installing the project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Npm start &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-2-create-an-account-for-a-service-worker"&gt;
  &lt;/a&gt;
  Step 2: Create an account for a service worker.
&lt;/h3&gt;

&lt;p&gt;Services workers operate as intermediary servers between the app and the network. You must use a service worker to capture network requests and serve the cached data. It allows your website to work even if a system is down. On the other hand,  Reactjs provides a single registerWorker.js file in the src folder. Create a blank service-worker.js file in the public folder to begin. To it, add the following code:&lt;/p&gt;

&lt;p&gt;Then, inside index.html, add the required code to see if the browser supports the service-workers file or not.&lt;br&gt;
After you've added the code, look in your browser's console panel for a message that says something like "service worker registration successful." This indicates that the service worker is supported by your browser.&lt;br&gt;
If you are still not able to register then you can &lt;a href="https://www.brihaspatitech.com/hire-react-js-developer"&gt;hire React js developer&lt;/a&gt; from a well-known web development agency.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-3-inform-the-browser-that-you-are-using-a-web-application"&gt;
  &lt;/a&gt;
  Step 3: Inform the browser that you are using a web application
&lt;/h3&gt;

&lt;p&gt;Then you'll need to add some code to tell the browser that this isn't just any web app; this is the web app. So, in the index.html file, add the following code to the head&amp;gt; element.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;'&amp;lt; meta name = “ mobile-web-app-capable ” content = ”yes ”&amp;gt;'&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Similarly, the code is dame for mobile devices also and especially for the iPhone.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;''&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-4-make-a-few-bootstraps-react-components"&gt;
  &lt;/a&gt;
  Step 4: Make a few bootstraps react components
&lt;/h3&gt;

&lt;p&gt;Add the bootstrap to the project first. You must make use of a CDN. As a result, include the URL in the index.html file. Create a component folder inside the src folder as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel=”stylesheet” href=”https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css” integrity=”sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm” crossorigin=”anonymous”&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Now, under the components folder, build a component called Navbar.js.&lt;br&gt;
Now, inside the App.js file, add the Navbar.js component.&lt;/p&gt;

&lt;p&gt;Create a new component called content.js in the components folder. Finally, you'll develop a critical component that is powered by the web application. To make your work easier, get react js development services at a cost-effective price.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-integrate-splash-icons"&gt;
  &lt;/a&gt;
  Step 5: Integrate splash icons
&lt;/h3&gt;

&lt;p&gt;To display the splash screen, you must alter the manifest.json and place the image in the public folder.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-install-the-app-on-firebase"&gt;
  &lt;/a&gt;
  Step 6: Install the app on Firebase
&lt;/h3&gt;

&lt;p&gt;We are only lacking HTTP and caching at this point in the process, which will be fixed after the project is released. In a service-worker.js file, fix the doCache flag. Next, in the firebase console, create a new project called React web application app. In a project directory, run the following commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;npm install –g firebase –tools&lt;/li&gt;
&lt;li&gt;firebase login&lt;/li&gt;
&lt;li&gt;firebase init&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;ReactJS is a formidable framework that enables big businesses to build scalable, feature-rich web applications. With tastefully built websites, it enables enterprises to excel in the dynamic market! Therefore, why not get React js development services for your next project.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>Mocking HTTP Call in Golang a Better Way</title>
      <author>Clavin June</author>
      <pubDate>Fri, 17 Dec 2021 04:02:44 +0000</pubDate>
      <link>https://dev.to/clavinjune/mocking-http-call-in-golang-a-better-way-293b</link>
      <guid>https://dev.to/clavinjune/mocking-http-call-in-golang-a-better-way-293b</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clDxyony--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1532726635173-491f83dcce3c%3Fq%3D50%26w%3D1920" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clDxyony--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1532726635173-491f83dcce3c%3Fq%3D50%26w%3D1920" alt="Photo by @jim_reardan on Unsplash" title="Photo by @jim\_reardan on Unsplash" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As a software engineer, you need to learn every day to keep your knowledge up-to-date. Any improvement in any aspect would help you write a better code. After writing more and more Golang code, I realized that I could improve &lt;a href="https://clavinjune.dev/en/blogs/mocking-http-call-in-golang/"&gt;this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you see in that post, you need to &lt;a href="https://clavinjune.dev/en/blogs/mocking-http-call-in-golang/#http-client-mock"&gt;mock the HTTP Client&lt;/a&gt; to make the HTTP call simulated correctly. Also, you are required to change your &lt;a href="https://clavinjune.dev/en/blogs/mocking-http-call-in-golang/#api-implementation-struct"&gt;API implementation&lt;/a&gt; to use the HTTPClient interface. That's quite a problem in the long run because you don't know what improvement will the HTTP Client got in the next version of the Golang code base. That's the problem you got if you mock the HTTP client. Instead, you can change the perspective and start to mock the HTTP Server.&lt;/p&gt;

&lt;p&gt;In this blog post, you will learn how to mock the HTTP server using a built-in testing library. There's no need to create your own interfaces because it is all provided by the Golang standard library called &lt;code&gt;httptest&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-structure"&gt;
  &lt;/a&gt;
  Directory Structure
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go mod init example
go: creating new go.mod: module example
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; external
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;external/&lt;span class="o"&gt;{&lt;/span&gt;external.go,external_test.go&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;tree &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
├── external
│   ├── external.go
│   └── external_test.go
└── go.mod

1 directory, 3 files
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementation-file-content"&gt;
  &lt;/a&gt;
  Implementation File Content
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// external.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"context"&lt;/span&gt;
    &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;
    &lt;span class="s"&gt;"errors"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ErrResponseNotOK&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"response not ok"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ID&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"id"`&lt;/span&gt;
        &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"name"`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;External&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;FetchData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;baseURL&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;
        &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baseURL&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;baseURL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;FetchData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s/?id=%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRequestWithContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodGet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%w. %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ErrResponseNotOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewDecoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is a little bit different to the one you implemented before, but the goal remains the same is to make an HTTP call to the external service. Let's focus on the &lt;code&gt;External interface&lt;/code&gt; that you need to mock.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-file-content"&gt;
  &lt;/a&gt;
  Test File Content
&lt;/h2&gt;

&lt;p&gt;First, you need to mock the HTTP server and the &lt;code&gt;External object&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;external_test&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"example/external"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http/httptest"&lt;/span&gt;
    &lt;span class="s"&gt;"testing"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;httptest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;
    &lt;span class="n"&gt;ext&lt;/span&gt;    &lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;External&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestMain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mocking server"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httptest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// mock here&lt;/span&gt;
    &lt;span class="p"&gt;}))&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mocking external"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"run tests"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see on line 24:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;ext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use the &lt;code&gt;server.URL&lt;/code&gt; as the &lt;code&gt;baseURL&lt;/code&gt; so all the HTTP Call to the &lt;code&gt;baseURL&lt;/code&gt; will be handled by the &lt;code&gt;httptest.Server&lt;/code&gt;. That's how you mock the HTTP server instead of the HTTP call.&lt;/p&gt;

&lt;p&gt;After creating the mock server, you need to mock the endpoint also. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;mockFetchDataEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusBadRequest&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"mock"&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"mock"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, put the endpoint inside your mock server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httptest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrimSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mockFetchDataEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotFoundHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServeHTTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The advantage of mocking the HTTP server that way is, you can put all the endpoints needed on one server only. It will be created once, before the &lt;code&gt;m.Run()&lt;/code&gt; and then used by all your tests in the same package.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-unit-test"&gt;
  &lt;/a&gt;
  Create the Unit Test
&lt;/h2&gt;

&lt;p&gt;Now you have mocked the HTTP Server, there's nothing special on the unit test itself. You can start writing your unit test as usual. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;got&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Helper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;`want: %v, got: %v`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;got&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestExternal_FetchData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tt&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;     &lt;span class="kt"&gt;string&lt;/span&gt;
        &lt;span class="n"&gt;id&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt;
        &lt;span class="n"&gt;wantData&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;
        &lt;span class="n"&gt;wantErr&lt;/span&gt;  &lt;span class="kt"&gt;error&lt;/span&gt;
    &lt;span class="p"&gt;}{&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="s"&gt;"response not ok"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;wantData&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;wantErr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ErrResponseNotOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"data found"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s"&gt;"mock"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;wantData&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s"&gt;"mock"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"mock"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;wantErr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;tt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tc&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parallel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="n"&gt;gotData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gotErr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FetchData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gotErr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wantErr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wantErr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gotErr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeepEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gotData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wantData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wantData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gotData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;By changing the perspective, you have improved the unit test a lot. Instead of mocking the HTTP Call, mocking the HTTP server is way more readable and proper. You don't need to create interfaces of the HTTP client and start using the standard way to mock the call by using the &lt;code&gt;httptest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

</description>
      <category>go</category>
      <category>test</category>
      <category>improvement</category>
    </item>
  </channel>
</rss>
