<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My favourite Kotlin features
</title>
      <author>Luke Garrigan</author>
      <pubDate>Sun, 08 Aug 2021 16:52:49 +0000</pubDate>
      <link>https://dev.to/lukegarrigan/my-favourite-kotlin-features-2ma3</link>
      <guid>https://dev.to/lukegarrigan/my-favourite-kotlin-features-2ma3</guid>
      <description>&lt;p&gt;Last Saturday I sat down with a strong cup of coffee and  &lt;a href="https://codeheir.com/2021/07/31/katas-in-kotlin/"&gt;got stuck into some Kotlin&lt;/a&gt;. I thoroughly enjoyed the process and likewise, thoroughly enjoyed the language. Its simplicity, elegance and to-the-pointedness make me envy those lucky devs that use it day-to-day.&lt;/p&gt;

&lt;p&gt;Engineers whose job is to create tools for popular programming languages — and the best ones at that — would certainly know a thing or two about each language’s strengths and weaknesses. It was the perfect recipe, and the oven was set at the perfect temperature.&lt;/p&gt;

&lt;p&gt;Coincedentally — and to my astonishment — Kotlin is celebrating its  &lt;a href="https://www.youtube.com/watch?v=uE-1oF9PyiY"&gt;10th anniversary.&lt;/a&gt;  I still consider it the new kid on the block, even if 142,000 apps are using it with upwards of  &lt;a href="https://www.appbrain.com/stats/libraries/details/kotlin/kotlin"&gt;380,000,000,000 downloads&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My knowledge of the language is embryonic, to say the least. I’ve roughly spent a total of 7 hours coding in Kotlin, that’s around 3 hours solving  &lt;a href="https://codeheir.com/2021/07/31/katas-in-kotlin/"&gt;Katas on Codewars&lt;/a&gt;  and around 4 hours creating very simple Android applications — details of which I’ll go into in my next blog. So, I am by no means an expert. Yet, I’ve still managed to compile 5 things that I  &lt;strong&gt;love&lt;/strong&gt;  about the language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clean-syntax"&gt;
  &lt;/a&gt;
  Clean syntax
&lt;/h2&gt;

&lt;p&gt;The language is clean. And by clean I mean not verbose. As a Java turned C# developer I can acknowledge that sometimes the code I write is verbose. Verbosity however, is sometimes needed for code clarity. Kotlin has managed to reduce verbosity whilst keeping clarity and — somehow — managed to improve code readability (In my opinion). Here’s a few examples of how they’ve achieved it:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final made simple&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Java to create a final variable — that is, a variable that can only be initialised once — you’d have the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;AGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whereas in Kotlin you have two different keywords to declare variables:  &lt;code&gt;val&lt;/code&gt;  and  &lt;code&gt;var&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;val&lt;/code&gt;  being the final equivalent. Much like TypeScript’s  &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, you may have noticed that semi-colons are not required. Oh, and there are inferred types, which there are too in Java and C# now, but it’s worth pointing out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No new keyword&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This one caught me off guard. There I was, trying to create my first object in Kotlin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;person&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// unresolved reference new&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The  &lt;code&gt;new&lt;/code&gt;  keyword is so embedded in my hippocampus for object-oriented programming that I thought I’d made some syntactical error, which, of course, I had.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s have some fun&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kotlin is fun, but to define a function all you need is  &lt;code&gt;fun&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// doing something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Such a trivial thing, but having a vital keyword only being 3 characters allows you to focus on what’s important.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-so-nullable-types"&gt;
  &lt;/a&gt;
  Not so nullable types
&lt;/h2&gt;

&lt;p&gt;Null references — known as the  &lt;a href="https://www.wikiwand.com/en/Tony_Hoare#/Apologies_and_retractions"&gt;billion-dollar mistake&lt;/a&gt;  — have plagued developers for half a century. I can’t imagine a single developer who has not been stung by this hornet. We’ve all attempted to access a member of a null object at some point.  &lt;code&gt;NullPointerException&lt;/code&gt;  or  &lt;code&gt;NullReferenceException&lt;/code&gt;  or  &lt;code&gt;Cannot read property of null&lt;/code&gt;, I’m sure one of these inflicts PTSD in some of you.&lt;/p&gt;

&lt;p&gt;In Kotlin, references are not nullable by default. You have to explicitly make them nullable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Luke"&lt;/span&gt; 
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="c1"&gt;// compilation error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want string to be nullable you’d have to use the nullable syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Luke"&lt;/span&gt; 
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="c1"&gt;// all good&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what happens if you want to access a property of  &lt;code&gt;name&lt;/code&gt;  in this scenario? It’d just throw a null reference exception wouldn’t it? Nope:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Luke"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;nameLength&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type String?&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead, you get a compile-time error explaining what you need to do to access the member, brilliant.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extension-functions"&gt;
  &lt;/a&gt;
  Extension functions
&lt;/h2&gt;

&lt;p&gt;Okay, this one may be a bit of a cop-out as I am predominantly a C# developer and have on numerous occasions, expressed my love for extension methods. Having the ability to write new functions for third-party code whose source is not easily editable is a game-changer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;half&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nc"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;half&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Double&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also prefer the implementation of extension functions in Kotlin to other languages, there’s less syntactic sugar, which is always a plus from me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#convert-to-kotlin"&gt;
  &lt;/a&gt;
  Convert to Kotlin
&lt;/h2&gt;

&lt;p&gt;One of the best parts of Kotlin is its interoperability with Java, making it easy for Java devs to make the transition. JetBrains IDEs allow you to directly convert Java code to Kotlin, by the click of a button, amazing. This is not so much a feature of the language but rather a feature of the tooling.&lt;/p&gt;

&lt;p&gt;I don’t believe there’s any tooling to convert Kotlin code to Java, but, why would you? Well, I’m sure somebody, somewhere has this requirement, but for me I’d stick to Kotlin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Kotlin has met me well. Many decisions have been made with careful consideration from a team of talented individuals oozing knowledge in programming languages.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, I’m new to the language, but I like what I’m seeing. And I intend to see more of it.&lt;/p&gt;

&lt;p&gt;I’m currently coding an android app to  &lt;a href="https://github.com/LukeGarrigan/pace-calculator"&gt;calculate running paces&lt;/a&gt;, which will be written about in my next blog if you’re interested.&lt;/p&gt;

&lt;p&gt;Thank you for reading this blog, I hope you’ve enjoyed it! Please signup  &lt;a href="https://codeheir.com/newsletter/"&gt;to my newsletter&lt;/a&gt;  if you did.&lt;/p&gt;

</description>
      <category>kotlin</category>
    </item>
    <item>
      <title>Web Developer Complete Roadmap</title>
      <author>Hahauga</author>
      <pubDate>Sun, 08 Aug 2021 16:51:46 +0000</pubDate>
      <link>https://dev.to/hahauga/web-developer-complete-roadmap-4pi7</link>
      <guid>https://dev.to/hahauga/web-developer-complete-roadmap-4pi7</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;p&gt;There has never been a better time to learn to code or make a career change to software engineering. The demand for web developers is at an all-time high, and it’s only increasing. There are both free and premium tutorials online that teach you the skills to get a job as a developer — no CS degree required 🤓.&lt;/p&gt;
&lt;p id="561d"&gt;This article details the needed skills and the corresponding tutorials to learn them effectively. The illustrated guide is provided by &lt;b&gt;&lt;a href="http://www.codelivly.com"&gt;Codelivly&lt;/a&gt;&lt;/b&gt; and can be found on codelivly  — Codelivly work is excellent so be sure to star the repo and subscribe to his newsletter to support his efforts. Don’t be intimidated by the map. It may seem like a lot, but I’ll break it down so you can learn each part step-by-step.&lt;/p&gt;
&lt;p id="dda0"&gt;This article will be divided into the following sections:&lt;/p&gt;
&lt;p id="dda0"&gt;1. &lt;b&gt;&lt;a href="https://www.codelivly.com/web-developer-roadmap-2021/"&gt;Full Stack Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p id="dda0"&gt;2. &lt;b&gt;&lt;a href="https://www.codelivly.com/frontend-web-developer-roadmap/"&gt;Frontend Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p id="dda0"&gt;3. &lt;b&gt;&lt;a href="https://www.codelivly.com/backend-web-developer-roadmap/"&gt;Backend Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p id="dda0"&gt;4. &lt;b&gt;&lt;a href="https://www.codelivly.com/the-best-python-frameworks-for-web-development-in-2021/"&gt;Best Python Framework For Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;







</description>
      <category>webdev</category>
    </item>
    <item>
      <title>10 Magical JavaScript Tips for Every Web Developer</title>
      <author>Hahauga</author>
      <pubDate>Sun, 08 Aug 2021 16:40:59 +0000</pubDate>
      <link>https://dev.to/hahauga/10-magical-javascript-tips-for-every-web-developer-24na</link>
      <guid>https://dev.to/hahauga/10-magical-javascript-tips-for-every-web-developer-24na</guid>
      <description>&lt;p id="f6cc"&gt;In this article, we will discuss the 15 useful JavaScript tips for every web developer to save their valuable and precious time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p id="e1bb"&gt;I am always ready to learn although I do not always like being taught&lt;/p&gt;

&lt;p id="0fe5"&gt;— Winston Churchill&lt;/p&gt;


&lt;/blockquote&gt;
&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;h1 id="fa85"&gt;Tip 1. Flatten the array of the array&lt;/h1&gt;
&lt;p id="4e31"&gt;This tip will help you to flatten a deeply nested array of arrays by using &lt;code&gt;Infinity&lt;/code&gt; in &lt;code&gt;flat&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;span id="e3aa"&gt;var array = [123, 500, [1, 2, [34, 56, 67, [234, 1245], 900]], 845, [30257]]&lt;/span&gt;&lt;span id="16da"&gt;//flatten array of array&lt;br&gt;array.flat(Infinity)&lt;/span&gt;&lt;span id="b0d8"&gt;// output:&lt;br&gt;// [123, 500, 1, 2, 34, 56, 67, 234, 1245, 900, 845, 30257]&lt;/span&gt;&lt;/pre&gt;
&lt;h1 id="902c"&gt;Tip 2. Easy Exchange Variables&lt;/h1&gt;
&lt;p id="ebf9"&gt;You probably swap the two variables using a third variable &lt;code&gt;temp&lt;/code&gt;. But this tip will show you a new way to exchange variables using destructuring.&lt;/p&gt;
&lt;pre&gt;&lt;span id="298c"&gt;//example 1&lt;/span&gt;&lt;span id="3316"&gt;var a = 6;&lt;br&gt;var b = 7;&lt;/span&gt;&lt;span id="b133"&gt;[a,b] = [b,a]&lt;/span&gt;&lt;span id="aa36"&gt;console.log(a,b) // 7 6&lt;/span&gt;&lt;/pre&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/magical-javascript-tips-for-every-web-developer/"&gt;10 Magical JavaScript Tips for Every Web Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Top 20 JavaScript tips and tricks to increase your Speed and Efficiency</title>
      <author>Hahauga</author>
      <pubDate>Sun, 08 Aug 2021 16:36:58 +0000</pubDate>
      <link>https://dev.to/hahauga/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-3bh3</link>
      <guid>https://dev.to/hahauga/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-3bh3</guid>
      <description>&lt;h3&gt;Convenient and useful techniques to reduce the lines of code and pace up your Dev Work!&lt;/h3&gt;
&lt;p&gt;In our daily tasks, we get to write functions such as sorting, searching, finding unique values, passing parameters, swapping values etc, so here I present my list of shorthand techniques to write all of them as a Pro!✌🏻&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;img alt="Increase Your Performance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftNfvGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;JavaScript is truly an awesome language💛 to learn and work with. And there can be more than one approach to reach to the same solution for given problem. In this article, we will discuss only the quickest ones.🚀&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;These approaches will definitely help you in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducing the number of LOC(lines of code),&lt;/li&gt;
&lt;li&gt;Coding Competitions,&lt;/li&gt;
&lt;li&gt;Hackathons or&lt;/li&gt;
&lt;li&gt;Other time bound tasks.⏱&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these JavaScript Hacks uses techniques from ECMAScript6(ES2015) onwards, though the latest version is ECMAScript11(ES2020).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: All below tricks have been tested on the Console of Google Chrome.&lt;/em&gt;&lt;/p&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/top-20-javascript-tips-and-tricks/"&gt;Top 20 JavaScript tips and tricks to increase your Speed and Efficiency&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>10 VS Code extensions every Frontend Developer should use</title>
      <author>Hahauga</author>
      <pubDate>Sun, 08 Aug 2021 16:34:37 +0000</pubDate>
      <link>https://dev.to/hahauga/10-vs-code-extensions-every-frontend-developer-should-use-jie</link>
      <guid>https://dev.to/hahauga/10-vs-code-extensions-every-frontend-developer-should-use-jie</guid>
      <description>&lt;p&gt; &lt;span&gt;Hello everyone, my name is suman and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code. &lt;/span&gt;&lt;span&gt;Let's Jump in!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
    </item>
    <item>
      <title>Why Every Software Engineer Should Learn Computer Architecture</title>
      <author>Hahauga</author>
      <pubDate>Sun, 08 Aug 2021 16:27:09 +0000</pubDate>
      <link>https://dev.to/hahauga/why-every-software-engineer-should-learn-computer-architecture-1b16</link>
      <guid>https://dev.to/hahauga/why-every-software-engineer-should-learn-computer-architecture-1b16</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I believe that success greatly correlates to two things, how you see the world and how much you truly understand it. We can say the same about software engineering; where computer architecture is the very essence of software engineering, if you understand it well enough, software engineering will be a piece of cake.&lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/voider/why-everyone-software-engineer-should-learn-computer-architecture-2nb2#what-is-computer-architecture"&gt;&lt;/a&gt;What is Computer Architecture?&lt;/h2&gt;
&lt;p&gt;According to Wikipedia:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Computer architecture is a set of rules and methods that describe the functionality, organization, and implementation of computer systems.&lt;br&gt;Some definitions of architecture define it as describing the capabilities and programming model of a computer but not a particular implementation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In a nutshell, CA is basically the set of rules that control how hardware and software interact together.&lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/voider/why-everyone-software-engineer-should-learn-computer-architecture-2nb2#why-study-computer-architecture"&gt;&lt;/a&gt;Why Study Computer Architecture?&lt;/h2&gt;
&lt;p&gt;Computer Architecture can help you more than you think.&lt;br&gt;For example, most F1 drivers know a lot about their car's engine, to the point they can determine any problem with their engine, even before their engineers can!&lt;/p&gt;
&lt;p&gt;They also know about Physics and Aerodynamics, hence this helps them give precise instructions to their mechanics in the Pitstop, like adjusting the nose or the wheels leading them to win more races.&lt;/p&gt;
&lt;p&gt;Well, what does all this have to do with CA? It’s the same concept! When you understand and know more about the cornerstone of Software Engineering, you know how to handle problems and achieve what you need, more efficiently.&lt;/p&gt;
&lt;p&gt;Why you should learn Computer Architecture:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You will likely use it for the rest of your life.&lt;/li&gt;
&lt;li&gt;Computer Architecture is one of the most fundamental subjects in Computer Science. As without computers, the field of Computer Science would not exist.&lt;/li&gt;
&lt;li&gt;You need to understand how the instructions and operations actually work and interact together, to make your software better; because whatever you do, no matter what, it is on top of CA.&lt;/li&gt;
&lt;li&gt;Computer Architecture will help you design, develop, and implement applications that are better, faster, cheaper, more efficient, and easier to use because you will be able to make informed decisions instead of guessing estimating and assuming.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/voider/why-everyone-software-engineer-should-learn-computer-architecture-2nb2#example-on-how-computer-architecture-can-affect-the-way-you-code"&gt;&lt;/a&gt;Example On How Computer Architecture Can Affect The Way You Code:&lt;/h2&gt;
&lt;p&gt;Branch Prediction: Let's say you are on a train, your job is to observe the way and you are at a railway junction:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A-IeYOQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ca.emap.com/wp-content/uploads/sites/9/2014/01/bigstock_railway_6220241-1024x685.jpg"&gt;&lt;img alt="Railway" src="https://res.cloudinary.com/practicaldev/image/fetch/s--wxekU5WO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--A-IeYOQr--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://cdn.ca.emap.com/wp-content/uploads/sites/9/2014/01/bigstock_railway_6220241-1024x685.jpg" title="Railway junction"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You have to choose a side and you don't know which side to go on; so you either choose the right path or the wrong path, if you do choose the right path you will keep going, if you choose the wrong path however, you will go back and choose the other path. So if you keep choosing the right path you won't have to go back again and if you choose the wrong path you will keep having to go back and forth,&lt;br&gt;makes sense?&lt;/p&gt;
&lt;p&gt;Consider an if-statement: At the processor level, it is a branch instruction:&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kuYFUMXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/pyfwC.png"&gt;&lt;img alt="code" src="https://res.cloudinary.com/practicaldev/image/fetch/s---DcaFoab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--kuYFUMXp--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://i.stack.imgur.com/pyfwC.png" title="Railway junction"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you are a processor and you see a branch, you have no idea which path to go, so you will have to enter.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you guess right the execution will never have to stop.&lt;/li&gt;
&lt;li&gt;If you guess wrong, you spend more time going back and restarting the execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So how do we make the better choice each time?&lt;br&gt;We observe. If the process, usually takes left then we guess left. If it takes right most of the time, we guess right. If it alternates, then we alternate our choice as well&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/voider/why-everyone-software-engineer-should-learn-computer-architecture-2nb2#this-is-more-or-less-how-branch-prediction-works"&gt;&lt;/a&gt;This is, more or less, how Branch Prediction works.&lt;/h3&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/voider/why-everyone-software-engineer-should-learn-computer-architecture-2nb2#conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Learn Computer Architecture, become a better software engineer.&lt;/p&gt;

</description>
      <category>computerscience</category>
    </item>
    <item>
      <title>I do dotfiles!</title>
      <author>Siddharth</author>
      <pubDate>Sun, 08 Aug 2021 15:54:45 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/i-do-dotfiles-5ap6</link>
      <guid>https://dev.to/siddharthshyniben/i-do-dotfiles-5ap6</guid>
      <description>&lt;p&gt;Just a quick post to let you know about my &lt;a href="https://github.com/siddshy/dotfiles"&gt;dotfiles&lt;/a&gt; repository. It contains my Vim, Zsh, tmux, and git config, and it's mostly geared at Typescript/Angular/Node.js development. Feel free to check it out!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>zsh</category>
      <category>git</category>
      <category>vim</category>
    </item>
    <item>
      <title>Rust's Vector</title>
      <author>Nicolas Frankel</author>
      <pubDate>Sun, 08 Aug 2021 15:40:35 +0000</pubDate>
      <link>https://dev.to/nfrankel/rust-s-vector-2fnj</link>
      <guid>https://dev.to/nfrankel/rust-s-vector-2fnj</guid>
      <description>&lt;p&gt;I'll be honest: I initially wanted to describe all collections available in Rust as well as their related concepts. Then, I started to dig a bit into it, and I decided it would have been (much) too long. For that reason, I'll restrict the scope to the &lt;code&gt;Vec&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;Here's the diagram we will dive into:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pp2zDgTl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eguknq7s243ysx0sgawx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pp2zDgTl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eguknq7s243ysx0sgawx.png" alt="Rust's Vector &amp;quot;class&amp;quot; diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basics-of-vector"&gt;
  &lt;/a&gt;
  Basics of Vector
&lt;/h2&gt;

&lt;p&gt;From the &lt;a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A contiguous growable array type, written as &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; and pronounced 'vector'.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just as with Java's &lt;code&gt;ArrayList&lt;/code&gt;, &lt;code&gt;Vec&lt;/code&gt; is backed by an array. When the array reaches full capacity, &lt;code&gt;Vec&lt;/code&gt; reserves a new array with more capacity and copies elements from the original array to the newly-created one. Then, it frees the former. Note that the collection may allocate a larger array than necessary to avoid frequent reallocations.&lt;/p&gt;

&lt;p&gt;To add values to a &lt;code&gt;Vec&lt;/code&gt;, we need to use an additional step, &lt;em&gt;e.g.&lt;/em&gt;, the &lt;code&gt;push()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Vec&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Functions that create new &lt;code&gt;Vec&lt;/code&gt; initialize them with no items. If we want to create a &lt;code&gt;Vec&lt;/code&gt; and values simultaneously, Rust offers the &lt;code&gt;vec!&lt;/code&gt; macro. We can replace the above code with the following one-liner:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At that point, if you've already dabbled a bit in Rust, you probably learned nothing new. Instead of describing every function on &lt;code&gt;Vec&lt;/code&gt; - they are pretty similar to those found in other languages - let's explore around a bit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vector-and-iterator"&gt;
  &lt;/a&gt;
  Vector and Iterator
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Iterator&lt;/em&gt; is a design pattern described in the classic &lt;em&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt; book:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Intent:&lt;/strong&gt; Provide an object which traverses some aggregate structure, abstracting away assumptions about the implementation of that structure.&lt;/p&gt;

&lt;p&gt;-- &lt;a href="https://wiki.c2.com/?IteratorPattern"&gt;Iterator pattern&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Though the book describes &lt;em&gt;Iterator&lt;/em&gt;, nothing limits the pattern to OOP languages. It's a pretty widespread abstraction.&lt;/p&gt;

&lt;p&gt;Rust provides the &lt;code&gt;Iterator&lt;/code&gt; trait, and &lt;code&gt;Vec&lt;/code&gt; implements it. Hence, we can traverse its values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;                       &lt;span class="c"&gt;// 1&lt;/span&gt;
&lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="nf"&gt;.next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;                   &lt;span class="c"&gt;// 2&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="nf"&gt;.is_some&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create the iterator. Because calling &lt;code&gt;next()&lt;/code&gt; changes the state of &lt;code&gt;iter&lt;/code&gt;, it must be &lt;em&gt;mutable&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Get the next value&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If I had received a dollar for each bug originating from a misplaced &lt;code&gt;break&lt;/code&gt; statement, I'd surely be rich now. If you break too early, you lose values; too late, and all hell breaks loose (pun intended). For that reason, &lt;code&gt;for&lt;/code&gt; along with iterator is a better fit. We can rewrite the above code as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                        &lt;span class="c"&gt;// 1&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Shorter, safer, hence better&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#too-many-iterators-to-iterate-from"&gt;
  &lt;/a&gt;
  Too many iterators to iterate from
&lt;/h2&gt;

&lt;p&gt;Interestingly enough, we can slightly change the above code to remove the call to &lt;code&gt;iter()&lt;/code&gt;. It still works!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                               &lt;span class="c"&gt;// 1&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Magic!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's actually not magic but Rust' syntactic sugar in action. &lt;code&gt;for&lt;/code&gt; loops accept iterators. Yet, some instances can be transformed into iterators "on the fly". The type must implement the &lt;code&gt;IntoIterator&lt;/code&gt; trait and its &lt;code&gt;into_iter()&lt;/code&gt; function to be eligible. As seen from the diagram above, that's the case of &lt;code&gt;Vec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you ask yourself the difference between &lt;code&gt;iter()&lt;/code&gt; and &lt;code&gt;into_inter()&lt;/code&gt;, take comfort in the fact that I wondered as well.&lt;br&gt;
After some research, I found this brilliant answer:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The iterator returned by &lt;code&gt;into_iter&lt;/code&gt; may yield any of &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;&amp;amp;T&lt;/code&gt; or &lt;code&gt;&amp;amp;mut T&lt;/code&gt;, depending on the context.&lt;/li&gt;
&lt;li&gt;The iterator returned by &lt;code&gt;iter&lt;/code&gt; will yield &lt;code&gt;&amp;amp;T&lt;/code&gt;, by convention.&lt;/li&gt;
&lt;li&gt;The iterator returned by &lt;code&gt;iter_mut&lt;/code&gt; will yield &lt;code&gt;&amp;amp;mut T&lt;/code&gt;, by convention.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-- &lt;a href="https://stackoverflow.com/questions/34733811/what-is-the-difference-between-iter-and-into-iter"&gt;What is the difference between iter and into_iter?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, you can create a &lt;code&gt;Vec&lt;/code&gt; &lt;em&gt;from&lt;/em&gt; an &lt;code&gt;Iterator&lt;/code&gt; thanks to &lt;code&gt;FromIterator&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u8&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                           &lt;span class="c"&gt;// 1&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nn"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.count&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="c"&gt;// 2&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="c"&gt;// 2&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;None&lt;/span&gt;                             &lt;span class="c"&gt;// 2&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Vec&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                        &lt;span class="c"&gt;// 3&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Implement our own &lt;code&gt;Iterator&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;First, return &lt;code&gt;1&lt;/code&gt;, then &lt;code&gt;5&lt;/code&gt;, then nothing&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;Vec&lt;/code&gt; from our iterator&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#memory-allocation"&gt;
  &lt;/a&gt;
  Memory allocation
&lt;/h2&gt;

&lt;p&gt;We have overlooked one aspect of &lt;code&gt;Vec&lt;/code&gt; so far: the definition is actually &lt;code&gt;Vec&amp;lt;T, A: Allocator = Global&amp;gt;&lt;/code&gt;. While &lt;code&gt;T&lt;/code&gt; is the type of items that the &lt;code&gt;Vec&lt;/code&gt; contains, we didn't look at &lt;code&gt;A&lt;/code&gt;, which is &lt;strong&gt;what allocates memory&lt;/strong&gt;. I won't describe the subject in much detail because I currently lack the relevant knowledge. Yet, I believe it's interesting to mention it, as no other language I know about provides this kind of hook.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An implementation of &lt;code&gt;Allocator&lt;/code&gt; can allocate, grow, shrink, and deallocate arbitrary blocks of data described via &lt;code&gt;Layout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;-- &lt;a href="https://doc.rust-lang.org/stable/std/alloc/trait.Allocator.html"&gt;std::alloc::Allocator&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgmfHTPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btrzjltw8jf86j11tk6f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgmfHTPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btrzjltw8jf86j11tk6f.png" alt="Rust's Allocator &amp;quot;class&amp;quot; diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rust uses the &lt;code&gt;Global&lt;/code&gt; memory allocator by default. It delegates to another allocator: it's &lt;code&gt;System&lt;/code&gt; unless you register one with the &lt;code&gt;#[global_allocator]&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;Vec&amp;lt;T, A&amp;gt;&lt;/code&gt;, it's thus possible to use a different allocator than the one defined centrally. One possible use-case would be to create an allocator that keeps track of allocated bytes only for a &lt;code&gt;Vec&lt;/code&gt; instance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This concludes my dabbling in &lt;code&gt;Vec&lt;/code&gt;. In this post, I tried to avoid the usual handling of this kind of post and explore a bit around. While a dedicated memory allocator won't be necessary in most cases, I think it's one good trick to keep in mind just in case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To go further:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://doc.rust-lang.org/std/collections/index.html"&gt;Module std::collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doc.rust-lang.org/book/ch08-01-vectors.html"&gt;Storing Lists of Values with Vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"&gt;Struct std::vec::Vec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/34733811/what-is-the-difference-between-iter-and-into-iter"&gt;What is the difference between iter and into_iter?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://blog.frankel.ch/start-rust/9/"&gt;A Java Geek&lt;/a&gt; on August 8&lt;sup&gt;th&lt;/sup&gt;, 2021&lt;/em&gt;&lt;/p&gt;

</description>
      <category>rust</category>
      <category>beginners</category>
      <category>basics</category>
      <category>collection</category>
    </item>
    <item>
      <title>Best Domain Name Generator</title>
      <author>CodeXtreame</author>
      <pubDate>Sun, 08 Aug 2021 15:30:53 +0000</pubDate>
      <link>https://dev.to/codextreame/best-domain-name-generator-4ocl</link>
      <guid>https://dev.to/codextreame/best-domain-name-generator-4ocl</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Name Mesh&lt;/li&gt;
&lt;li&gt;Domain Wheel&lt;/li&gt;
&lt;li&gt;Lean Domain Search&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Article Link - &lt;a href="https://rb.gy/hzypuz"&gt;https://rb.gy/hzypuz&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blogging</category>
      <category>seo</category>
      <category>domain</category>
      <category>generator</category>
    </item>
    <item>
      <title>What To Do If Coding Is Hard..?</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Sun, 08 Aug 2021 15:26:21 +0000</pubDate>
      <link>https://dev.to/unitybuddy/what-to-do-if-coding-is-hard-559e</link>
      <guid>https://dev.to/unitybuddy/what-to-do-if-coding-is-hard-559e</guid>
      <description>&lt;p&gt;Hello, buddies! This article is to the coding learners and to the people who think &lt;em&gt;" I'm not good at coding.."&lt;/em&gt; No one should think like that since anyone can be good at coding. The problem is they don't know how to be &lt;strong&gt;&lt;em&gt;Good&lt;/em&gt;&lt;/strong&gt; at coding. So, Let's learn what we can do if we're not good at coding..?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-coding-is-hard-if-yes-why-coding-is-hard"&gt;
  &lt;/a&gt;
  Is coding is Hard? If yes, Why Coding Is Hard?
&lt;/h2&gt;

&lt;p&gt;Is coding hard? Many of the people who learning to code will answer &lt;em&gt;"Yes."&lt;/em&gt; But Why coding is hard? Then they will say &lt;em&gt;" I'm not smart enough to do that.",&lt;/em&gt;"I’m just not cut out for coding".*But that’s not necessarily true. Coding isn’t hard, it just requires more time and practice than you might expect. &lt;/p&gt;

&lt;p&gt;To be a competent coder, you need to learn how to produce products, not just write code. To be a web developer, you need to be able to make a website, not just write out HTML tags. To be a Game developer, you need to learn how to use at least one Game Engine, not to learn all the Languages used in Game Development. I leant Coding when I started Game Developing. I also thought I won't be able to Develop games without learning to code but If I decided to learn coding first, I'm not a Game Developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reasons-to-be-coding-is-hard-for-many-people-and-how-to-challenge-them"&gt;
  &lt;/a&gt;
  Reasons To Be Coding Is Hard For Many People And How To Challenge Them
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#reason-1-learning-to-code-is-like-learning-a-language"&gt;
  &lt;/a&gt;
  Reason 1 - Learning to Code Is Like Learning a Language
&lt;/h3&gt;

&lt;p&gt;C++, Java, Python, Objective-C – these are just four languages that happen to be among the most popular programming languages in the world. There are hundreds more. And learning a coding language is like learning a foreign language – quite literally. “So where should I begin?” you may ask. Learn with an End Goal in your mind. Maybe you want to build mobile apps or become a Game developer. Or maybe you want to start your own website-building agency or even work for Google. Whatever your end goal is, find which languages you’ll need to learn and start there. Just to start!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reason-2-learning-to-code-is-time-consuming"&gt;
  &lt;/a&gt;
  Reason 2 - Learning to Code is Time Consuming
&lt;/h3&gt;

&lt;p&gt;Many aspiring developers walk away from a bootcamp or tutorial proclaiming that coding is a world reserved for geniuses and the whole thing is unfair. Actually, most devs who “fail” at coding, do so because they are not prepared to put in the time and research that it takes to learn. Attending a bootcamp is great place to start, but the work does not end there. Unlike other learning programs, coding isn’t a qualification you can get and walk straight into a job, never to learn any theory again. Coding requires ongoing learning. So in conjunction with a bootcamp, you’ll want to try tutorials, engaging with other devs on github and spending time on basic trial-and-error. And also there are great sources to learn programming freely. Check this &lt;a href="https://catalins.tech/20-best-places-to-learn-programming-for-free"&gt;article&lt;/a&gt;by @&lt;a href="https://dev.to@Catalinpit"&gt;Catalin Pit&lt;/a&gt;&lt;br&gt;
Tips to lean Programming Faster is in the end.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reason-3-confidence-vs-competence"&gt;
  &lt;/a&gt;
  Reason 3 - Confidence Vs Competence
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P9AQdrDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619525780575/cIJ4LsZWE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P9AQdrDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619525780575/cIJ4LsZWE.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Source - Thinkful.com&lt;/p&gt;

&lt;p&gt;Consider the above graph that illustrates a theory by Erik Trautman.  The theory itself is quite involved, but the above graph is a snapshot of his main hypothesis, which is that “your confidence is highly correlated with your happiness and…the point where your confidence and capabilities match is the best proxy for the sweet spot when you’re officially job ready.”&lt;/p&gt;

&lt;p&gt;For some, building a career in coding takes months, while for others it takes years. What it comes down to is experience and hardcore grit. As an aspiring developer, you need to be prepared to experience moments of confusion, frustration and general hair-pulling craziness. But on the other side of those feelings, are feelings of satisfaction and the kind of “Eureka” moments that make it all seem worthwhile. Tip  is Start with the basics and put in extra hours – time is your most valuable commodity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-to-learn-coding-faster"&gt;
  &lt;/a&gt;
  Tips to learn Coding faster
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-learn-by-doing-always-play-with-the-code-while-learning"&gt;
  &lt;/a&gt;
  1. Learn by doing. Always play with the code while learning
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hint: Build a project as you go through the material. A personal project is often the best starting point.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-grasp-the-fundamentals-for-longterm-benefits"&gt;
  &lt;/a&gt;
  2. Grasp the fundamentals for long-term benefits
&lt;/h3&gt;

&lt;p&gt;As elementary as they may appear at first, programming fundamentals always need to come first: the better you understand them, the easier it is to learn more advanced concepts. Check this great article - &lt;a href="https://howtoprogramwithjava.com/programming-101-the-5-basic-concepts-of-any-programming-language/"&gt; 5 Basic Concepts of Any Programming Language&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-ask-for-help-youll-need-it"&gt;
  &lt;/a&gt;
  3. Ask for help. You’ll need it
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hint: &lt;a href="https://stackoverflow.com/"&gt;Stackoverlfow&lt;/a&gt; and &lt;a href="https://www.reddit.com/r/learnprogramming/"&gt;learn programming(Reddit)&lt;/a&gt; are gold mines for online programming assistance.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-dont-just-read-the-sample-code-tinker-with-it"&gt;
  &lt;/a&gt;
  4. Don’t just read the sample code. Tinker with it!
&lt;/h3&gt;

&lt;p&gt;Reading sample code is not enough to understand how it works. To develop a true understanding, you need to actually run the code and tinker with it. With the additions of comments and instructions, sample code is packaged to be by the reader; but in reality, it’s pretty difficult to replicate from scratch. Reading is not the same as understanding, and actually trying to write the code yourself, or at least running it, will facilitate the learning process much more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-take-breaks-when-debugging"&gt;
  &lt;/a&gt;
  5. Take breaks when debugging
&lt;/h3&gt;

&lt;p&gt;When debugging, it’s easy to go down the rabbit hole for hours, and there’s no guarantee that you will fix the problem. To avoid this, it’s best to step away from the for a few hours, and return with a fresh perspective. Not only is this a guaranteed way to help solve the problem, but you’ll also save yourself hours of headache. So if help isn’t available – to touch on our previous tip about seeking advice – consider taking a break to clear your mind and return later. In the meantime, &lt;strong&gt;the bug won’t be going anywhere, and you’ll at least restore some needed sanity to improve productivity.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So buddies, hope you leant something and I think you won't think 'Coding is hard..' anymore! Don't forget to read these articles about programming! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ayushirawat.com/become-a-better-programmer"&gt;Become a Better Programmer&lt;/a&gt; by @&lt;a href="https://dev.to@ayushi7rawat"&gt;Ayushi Rawat&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blogdolipe.com.br/5-tips-to-become-a-better-developer"&gt;5 tips to become a better developer&lt;/a&gt; by @&lt;a href="https://dev.to@luizfilipezs"&gt;Luiz Filipe da Silva&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://movi.hashnode.dev/tips-for-every-programmer-ckfbuxqh505gd2zs1hb55c9p6"&gt;Tips for every Programmer&lt;/a&gt; by @&lt;a href="https://dev.to@movi"&gt;Anita Ihuman&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://adiati.com/10-tips-for-new-self-taught-developers-in-learning-to-code"&gt;10 Tips For New Self-Taught Developers In Learning To Code&lt;/a&gt; by @&lt;a href="https://dev.to@ayuadiati"&gt;Ayu Adiati&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://mr-unity-buddy.hashnode.dev/what-to-do-if-coding-is-hard"&gt;Originally&lt;/a&gt; publish on Hashnode&lt;/p&gt;

</description>
      <category>developer</category>
      <category>generalprogramming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Benefits Of Global Internship</title>
      <author>practern</author>
      <pubDate>Sun, 08 Aug 2021 14:41:38 +0000</pubDate>
      <link>https://dev.to/practern/benefits-of-global-internship-2544</link>
      <guid>https://dev.to/practern/benefits-of-global-internship-2544</guid>
      <description>&lt;p&gt;Internships sound daunting, don’t they?&lt;/p&gt;

&lt;p&gt;It may be your first real job, the pay is low, the hours long, and you are at the bottom of whichever career ladder you seek to climb.&lt;/p&gt;

&lt;p&gt;However, though these points are true in most cases, there are many benefits of internships, as well. In fact, taking that internship now may just help you skip a few rungs on your way up that career ladder in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-internship"&gt;
  &lt;/a&gt;
  What is an Internship?
&lt;/h2&gt;

&lt;p&gt;An internship is a limited-time work program offered by an organization to an individual, often a student or recent graduate, looking to build experience or skills in a particular field. A person accepted into an internship program is called an intern. In essence, internships are segue jobs, a stepping stone on your career path. The most common scenario is of a college student or recent university graduate looking to get their foot in the door of the industry they want to base their career around.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ugXW4kYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ruialeres67rwh967bd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ugXW4kYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ruialeres67rwh967bd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An internship program gives this individual the opportunity to get the first-hand experience in their chosen field, develop crucial skills they’ll need, and add some important work history onto their resume. Internships are temporary affairs and tend to attract those with no existing experience but looking to gain some expertise in a particular field. However, as internships get more competitive, say for a Google internship or one at Facebook, some companies find interns who do have existing experience, making an internship position at top brands quite difficult to land.&lt;/p&gt;

&lt;p&gt;Companies that can help you to get your first global internship:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="//www.practern.com"&gt;Practern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Internshala&lt;/li&gt;
&lt;li&gt;stuMagz Platform&lt;/li&gt;
&lt;li&gt;Twenty19&lt;/li&gt;
&lt;li&gt;Letsintern&lt;/li&gt;
&lt;li&gt;Internworld&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, why are internships important?&lt;/p&gt;

&lt;p&gt;In this post, we’re going to list all the benefits of an internship program, both obvious ones and those less so. Here are 10 benefits of internships and reasons why internship programs are important:&lt;/p&gt;

&lt;p&gt;1.) Actual Work Experience:&lt;/p&gt;

&lt;p&gt;When you’re in college or a fresh grad, your resume probably looks as if it was printed in invisible ink — there’s not much on there, right? The number one reason for taking an internship is for gaining actual work experience. Sure, you may have worked as a barista or SAT tutor part-time, and you can definitely add those items to your resume. However, if your dream is to be a web developer at Facebook or practice environmental law to help fight climate change, those high school jobs or college gigs are nothing more than filler on your job resume or cover letter. On the other hand, internships are where you get to obtain experience in the field you’ll pursue on your career path. It’s a job, and likely the first one on your resume and cover letter that’ll make a future hiring manager sit up and take notice.&lt;/p&gt;

&lt;p&gt;2.) Application of Knowledge:&lt;/p&gt;

&lt;p&gt;On top of the great work history you’ll be able to show off on your future CV and cover letter, an internship provides you with the perfect opportunity to apply knowledge you’ve gained up to this point. Perhaps you’re a computer science major dreaming of working in cybersecurity. Maybe you’re taking textile studies at FIT with hopes of one day being a part of New York Fashion Week. Whatever the case may be, an internship in your field will be where you can put all that book knowledge to actual use.&lt;/p&gt;

&lt;p&gt;3.) Networking With Professionals:&lt;/p&gt;

&lt;p&gt;One of the best benefits of an internship is the access you’re given to network with professionals in your chosen field. When you start an internship, you have the enviable advantage of being in close proximity to top minds in your field and influential names to drop in the future. From fellow interns to give you support to mentors who are key players in your industry, you’ll be surrounded by all the right people.&lt;/p&gt;

&lt;p&gt;4.) Learn Firsthand:&lt;/p&gt;

&lt;p&gt;You get to apply your studies in an actual work environment, but internships also give you the opportunity to gain new industry insights and knowledge. As a travel enthusiast, I know that even the most accurately detailed tourist guide can’t describe how it feels to visit a place for myself. Likewise, you can learn all you want, but you won’t understand working, from the physical labor to the mental tasks, until you’re in the trenches yourself. Furthermore, there are many things they just can’t, or don’t, teach you in school, such as proprietary software or the soft skills that you need to use. Learning them firsthand is one of the best internship benefits, for sure.&lt;/p&gt;

&lt;p&gt;5.) Field Experimentation:&lt;/p&gt;

&lt;p&gt;Are you sure you want to have a career in the field you’ve chosen? Are you sure-sure? One of the greatest advantages of doing an internship is that you can experiment, with no strings attached. Maybe you don’t want to work for Google, after all. Or it could be that you want to change your entire career path. Either way, a 3-month summer internship lets you give it a try and walk away with no hard feelings once your contract is up. And, that experience you’ve gained is yours to keep!&lt;/p&gt;

&lt;p&gt;6.) College Credit:&lt;/p&gt;

&lt;p&gt;Not all programs offer college credit, but those that do are definitely one of the major reasons for applying for an internship when in university. One thing to keep in mind is that it’s not up to the company you wish to intern with whether you’ll earn university credits. Rather, the school, the appropriate professor, and your chosen major determine whether you can earn college credits. Check with your school’s guidelines before applying!&lt;/p&gt;

&lt;p&gt;7.) A Paycheck:&lt;/p&gt;

&lt;p&gt;For most intern programs that don’t offer college credits, and even for some that do, a regular paycheck is one of the most desired benefits of internships. While interns’ paychecks are usually considered peanuts when compared to the “real” employees at the company, were you to compare, it’s still money in the bank. Rather than bartending to help you pay for college expenses (unless that’s where your heart lies), a paid internship in your chosen field will put some cash in your wallet while earning invaluable industry experience — a win-win, right?&lt;/p&gt;

&lt;p&gt;8.) Increased Professional Confidence:&lt;/p&gt;

&lt;p&gt;There’s nothing quite like ending a first date with optimism for what the future has in store for the two of you. Similarly, an internship program arms you with the confidence you need to take on the challenges in store for you later in your professional life. And, becoming better equipped with confidence will give you an edge in any future candidate pool you find yourself in, as well.&lt;/p&gt;

&lt;p&gt;9.) Boost in Understanding of How Jobs Work:&lt;/p&gt;

&lt;p&gt;We’ve talked about how internships benefit college students, graduates, and other people, but mostly in terms of how they’ll help with your field or industry. However, internships also help you understand the world of employment, as well. As likely your first true job, internships introduce you to it all, from job hunting to interviewing to the ins and outs of office life. With an intern program under your belt, you’ll be well-prepared for subsequent resumes, cover letters, and job applications around the corner.&lt;/p&gt;

&lt;p&gt;10.) A Job Contract Possibility:&lt;/p&gt;

&lt;p&gt;Last but not least on the benefits of internships, it may just turn into an actual job offer upon completion! While certainly not a requirement, many companies who feel positive about you as an intern at the end of the program may decide to keep you on. After all, they have invested time, resources, and money over your summer or semester, so it’s in their interest, as well. And, even if you don’t want to sign a full job contract when it’s all over, at least you can leverage a positive job recommendation letter from them!&lt;/p&gt;

&lt;p&gt;credits :- &lt;a href="https://www.goodwall.io/blog/benefits-of-internships/"&gt;Goodwall&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>internship</category>
      <category>computerscience</category>
      <category>technology</category>
    </item>
    <item>
      <title>Styled Components 101 💅 Lecture 3: SSR with Next.js + Custom Icon Fonts 😍</title>
      <author>_CODE</author>
      <pubDate>Sun, 08 Aug 2021 14:09:13 +0000</pubDate>
      <link>https://dev.to/underscorecode/styled-components-101-lecture-3-ssr-with-next-js-custom-icon-fonts-g6o</link>
      <guid>https://dev.to/underscorecode/styled-components-101-lecture-3-ssr-with-next-js-custom-icon-fonts-g6o</guid>
      <description>&lt;p&gt;Hello, everybody! 👋&lt;br&gt;
And welcome to the 3rd lecture of the &lt;strong&gt;Styled Components 101 series&lt;/strong&gt; 🙌&lt;/p&gt;

&lt;p&gt;In this lecture, we'll be covering:&lt;/p&gt;

&lt;p&gt;1️⃣  How we can use &lt;strong&gt;Styled Components within a Next.js configuration&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;2️⃣  How to use &lt;strong&gt;custom icon fonts&lt;/strong&gt; within our &lt;em&gt;styled&lt;/em&gt; components.&lt;/p&gt;

&lt;p&gt;If you're new to Styled Components and this lecture is the first one you run into, I suggest taking a look at the previous lectures first, where we covered some basic concepts and examples of Styled Components.&lt;/p&gt;

&lt;p&gt;With all this said, let's move on to today's topic 👇&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#how-to-get-styled-components-to-work-if-were-using-nextjs"&gt;
  &lt;/a&gt;
  How to get Styled Components to work if we're using Next.js 😺
&lt;/h1&gt;

&lt;p&gt;Let's first see what happens if no configuration for Styled Components has been defined for our Next.js project and we try to use the library.&lt;/p&gt;

&lt;p&gt;To start off, we're going to create a &lt;code&gt;StyledButton&lt;/code&gt; component (already known to all at this point 😜) and render it within the main component of our app.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;StyledButton.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
    background-color: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
    color: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
    border: none;
    border-radius: 5px;
    padding: 20px;
    font-size: 1.5rem;
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;StyledButton&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/StyledButton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt; &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#c64dff"&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#fff"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Styled Button in Next.js&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we run our app, this is the resultant button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GDtKBX3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rklszwnr3kz3ns1w1ew0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GDtKBX3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rklszwnr3kz3ns1w1ew0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where in the world are our styles? 🤔 Let's find out what's going on in here.&lt;/p&gt;

&lt;p&gt;First, if we go to the &lt;strong&gt;Console&lt;/strong&gt; Tab in the browser's &lt;em&gt;dev tools&lt;/em&gt;, we see that something is throwing an &lt;strong&gt;error&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYTGd7U7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69hc575gg07q80nx3hre.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYTGd7U7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69hc575gg07q80nx3hre.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The error reads:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_Warning: Prop `classname` did not match. Server: "sc-pNWdM kcTaxf" Client: "sc-bdnxRM gSuzZs" at button...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It seems like two different classes are being assigned on the server and the client, resulting in an &lt;strong&gt;inconsistency&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Let's now have a look at the &lt;strong&gt;Elements&lt;/strong&gt; tab:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLlO7Ror--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59ux7ot96qsk3n4ntn6n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLlO7Ror--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59ux7ot96qsk3n4ntn6n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our button is there and we can confirm that the class provided by Styled Components has been &lt;strong&gt;assigned correctly&lt;/strong&gt;, but the &lt;strong&gt;styles are&lt;/strong&gt; completely &lt;strong&gt;missing&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-can-we-do-to-solve-this"&gt;
  &lt;/a&gt;
  So, what can we do to solve this? 😩
&lt;/h2&gt;

&lt;p&gt;Well, this is neither a bug nor even a big deal. It's just that a &lt;strong&gt;further configuration is required by Next.js&lt;/strong&gt; to get to work Styled Components in our project in order to use it.&lt;/p&gt;

&lt;p&gt;So, first, we're going to install the &lt;code&gt;babel-plugin-styled-components&lt;/code&gt;, which is required for &lt;strong&gt;SSR&lt;/strong&gt; (&lt;em&gt;Server Side Rendering&lt;/em&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;babel-plugin-styled-components
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's create a &lt;code&gt;.babelrc&lt;/code&gt; file if we haven't already done so (it's not created by default when creating a Next.js app) and write the following configuration for the newly installed plugin on it:&lt;/p&gt;

&lt;p&gt;On the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .babelrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;.babelrc&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"presets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"next/babel"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"styled-components"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"ssr"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"preprocess"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}]]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we're not done yet, we still need a little bit more of configuration.&lt;/p&gt;

&lt;p&gt;Now we need to inject the &lt;strong&gt;server side rendered styles&lt;/strong&gt; in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element of our HTML file. For this purpose, we need to override the &lt;em&gt;Document&lt;/em&gt; file, which is provided by Next.js.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Document&lt;/em&gt; file is extendable, which means that we can add content to it if needed, and it's mainly used to &lt;strong&gt;add custom content&lt;/strong&gt; to the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; elements of the HTML main file. Note that this file is only rendered on the server.&lt;/p&gt;

&lt;p&gt;This &lt;em&gt;document&lt;/em&gt; is automatically generated with the creation of the Next.js app, but since we need to extend it, we're going to create another file called &lt;code&gt;_document.js&lt;/code&gt; to &lt;strong&gt;override the original one&lt;/strong&gt;. This new file should be placed within the &lt;code&gt;/pages&lt;/code&gt; directory and it will look like this 👇&lt;/p&gt;

&lt;p&gt;&lt;code&gt;_document.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/document&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ServerStyleSheet&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyDocument&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getInitialProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ServerStyleSheet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;originalRenderPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderPage&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;originalRenderPage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;enhanceApp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collectStyles&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;),&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInitialProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;initialProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;initialProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getStyleElement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;renderPage&lt;/code&gt; should only be modified when working with &lt;em&gt;CSS-in-JS&lt;/em&gt; libraries, like Styled Components, since they need the app to be &lt;strong&gt;wrapped to work on server side&lt;/strong&gt;. Otherwise the default configuration should always remain 👍&lt;/p&gt;

&lt;p&gt;If we're not planning to use any of these libraries, the following configuration could be a good starting point if we need to add something to the structure of our HTML document, being able to remove all that we don't need to change (note that we're &lt;strong&gt;overriding&lt;/strong&gt;), like &lt;code&gt;getInitialProps&lt;/code&gt; or even the &lt;code&gt;render&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextScript&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/document&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyDocument&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getInitialProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInitialProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;initialProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NextScript&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyDocument&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In any other case, there's no need to extend the original &lt;em&gt;Document&lt;/em&gt; and we can forget about it 😜.&lt;/p&gt;

&lt;p&gt;Once we've made all of these arrangements, let's re-run our application and see what happens!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CVAnc-yk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz2kvlnuks7kxza9exkj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CVAnc-yk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz2kvlnuks7kxza9exkj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There we go! Our Styled Button is finally rendering properly 👏&lt;/p&gt;

&lt;p&gt;And that would be all the configuration needed to work with &lt;strong&gt;Styled Components + Next.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's now dive into how we can add a &lt;strong&gt;custom icon font&lt;/strong&gt; to a &lt;em&gt;styled&lt;/em&gt; component 👇&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#custom-icon-fonts-in-styled-components"&gt;
  &lt;/a&gt;
  Custom Icon Fonts in Styled Components ❤️
&lt;/h1&gt;

&lt;p&gt;This topic is totally separate from the previous one, &lt;strong&gt;since an extra configuration for fonts is no longer required in Next.js&lt;/strong&gt;, but anyway, let's extend our &lt;em&gt;styled&lt;/em&gt; button by adding an icon from a custom icon font and let's see what we need to do to make it work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-of-all-what-is-an-icon-font"&gt;
  &lt;/a&gt;
  First of all... What is an icon font? 🐔
&lt;/h2&gt;

&lt;p&gt;Unlike regular fonts, which contain letters and numbers, an icon font is nothing more than a &lt;strong&gt;collection of symbols and glyphs&lt;/strong&gt; that works as a typeface. Its use is widely extended because they are really easy to style with CSS.&lt;/p&gt;

&lt;p&gt;The tool we're going to use to get our icon font is &lt;strong&gt;&lt;em&gt;Icomoon&lt;/em&gt;&lt;/strong&gt;, but this example works for every downloaded fonts coming from any font resource.&lt;/p&gt;

&lt;p&gt;Let's say we have already downloaded our font files after generating the custom set and we're all set and ready to go. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrating-a-custom-icon-font-set-into-our-project"&gt;
  &lt;/a&gt;
  Integrating a custom icon font set into our project 🐸
&lt;/h2&gt;

&lt;p&gt;What we're going to do in this section is to &lt;strong&gt;add an icon&lt;/strong&gt; from our custom icon font as an &lt;code&gt;::after&lt;/code&gt; pseudo-element, to place it after the text of our button.&lt;/p&gt;

&lt;p&gt;So, first, we're going to add a new &lt;em&gt;prop&lt;/em&gt; to our styled button call and pass it the content value of an icon of our choice.&lt;/p&gt;

&lt;p&gt;Note that every icon has a sort of &lt;em&gt;id&lt;/em&gt;, which is the value we'll pass in to the &lt;em&gt;prop&lt;/em&gt; named &lt;strong&gt;&lt;em&gt;icon&lt;/em&gt;&lt;/strong&gt;. This content value is always provided by the tool, so you don't need to assign it yourself.&lt;/p&gt;

&lt;p&gt;In this case, the content value for our icon is &lt;code&gt;\e900&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt; &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#c64dff"&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#fff"&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"\e900"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Styled Button in Next.js&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll just add the &lt;code&gt;::after&lt;/code&gt; pseudo-element to the &lt;em&gt;StyledButton&lt;/em&gt; definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
    background-color: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
    color: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
    border: none;
    border-radius: 5px;
    padding: 20px;
    font-size: 1.2rem;
    &amp;amp;::after{
        font-family: "icomoon";
        content: "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;";
        padding-left: 8px;
    }   
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#time-to-create-a-global-style-%EF%B8%8F"&gt;
  &lt;/a&gt;
  Time to create a global style ⚡️
&lt;/h2&gt;

&lt;p&gt;In the previous lecture, we had a glimpse on &lt;strong&gt;how to create a global style&lt;/strong&gt;, as part of the example where we created a light/ dark theme toggler. So don't hesitate to take a look at it for further reference if needed 😀&lt;/p&gt;

&lt;p&gt;But in case you missed it or you don't have the time to read one more article, keep reading: everything's explained ahead ✌️&lt;/p&gt;

&lt;p&gt;First, we are going to &lt;strong&gt;create our global styles file&lt;/strong&gt;, that will be called &lt;code&gt;IconFont.js&lt;/code&gt;, and which will &lt;strong&gt;host the CSS definition&lt;/strong&gt; to import custom fonts. It's just plain CSS inside a &lt;em&gt;styled&lt;/em&gt; component. Nothing new 😎 And it will look like this: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;IconFont.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createGlobalStyle&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;createGlobalStyle&lt;/span&gt;&lt;span class="s2"&gt;`
@font-face {
   font-family: "icomoon";
   src: url("/fonts/icomoon.eot");
   src: url("/fonts/icomoon.eot?#iefix")
   format("embedded-opentype"),
   url("/fonts/icomoon.svg#icomoon") format("svg"),
   url("/fonts/icomoon.woff") format("woff"),
   url("/fonts/icomoon.ttf") format("truetype");
};
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#things-to-consider-at-this-point"&gt;
  &lt;/a&gt;
  Things to consider at this point
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Pay attention to the &lt;strong&gt;routes&lt;/strong&gt; and the &lt;strong&gt;filenames&lt;/strong&gt;: the ones you're seeing above work for the configuration that we're going to see in a minute. &lt;strong&gt;You should always use the actual routes of your project and the names you provided to your font files&lt;/strong&gt;. Otherwise, it won't work ❌ &lt;br&gt;
It may sound obvious but sometimes it happens that we make a mistake in writing this definition and we go nuts for the rest of the day trying to figure out what's going on. Believe me, it happens more often that you may think 😝&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In case you're using a &lt;strong&gt;&lt;em&gt;theme&lt;/em&gt;&lt;/strong&gt;, you're supposed to already have a global styles file. In such case, just add the &lt;code&gt;@font-face&lt;/code&gt; definition to it and you'd be set and done.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then, &lt;strong&gt;how do I have to structure my project&lt;/strong&gt; to make the previous &lt;code&gt;@font-face&lt;/code&gt; definition work?&lt;/p&gt;

&lt;p&gt;First, and as mentioned before, you need to use the &lt;strong&gt;actual names of your font files&lt;/strong&gt; and define every possible format you have for that font (you will likely have something like &lt;em&gt;.ttf&lt;/em&gt;, &lt;em&gt;.otf&lt;/em&gt;, &lt;em&gt;.svg&lt;/em&gt;, and/or &lt;em&gt;.woff&lt;/em&gt;, but there are others, too).&lt;/p&gt;

&lt;p&gt;And, second, and &lt;strong&gt;key to this configuration&lt;/strong&gt; 👉 You need to create a &lt;code&gt;fonts&lt;/code&gt; directory inside the &lt;code&gt;/public&lt;/code&gt; directory. &lt;/p&gt;

&lt;p&gt;This is necessary because &lt;strong&gt;Next.js serves static files under the &lt;code&gt;/public&lt;/code&gt; folder&lt;/strong&gt;, so since fonts are a static resource, they have to be located in there.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that every resource placed in the &lt;code&gt;/public&lt;/code&gt; directory should be routed using a slash &lt;code&gt;/&lt;/code&gt; before its name.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#making-our-global-theme-accessible-by-the-app"&gt;
  &lt;/a&gt;
  Making our global theme accessible by the app
&lt;/h3&gt;

&lt;p&gt;As a final step to be able to start using our custom icon font, we just need to &lt;strong&gt;import&lt;/strong&gt; the &lt;code&gt;IconFont&lt;/code&gt; component into our main app component, &lt;code&gt;_app.js&lt;/code&gt;, like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;_app.jsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;IconFont&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/IconFont&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IconFont&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything goes as expected, this will be the &lt;strong&gt;result&lt;/strong&gt; of our &lt;em&gt;styled&lt;/em&gt; button, to which we have appended a &lt;strong&gt;heart icon&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jHZCoQru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xppa5n45y6u9iu7upda1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jHZCoQru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xppa5n45y6u9iu7upda1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Otherwise, &lt;strong&gt;if something went wrong&lt;/strong&gt; along the way, this is what we'll see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TBI4aQCD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36gb38hazu5y4casr6bw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TBI4aQCD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36gb38hazu5y4casr6bw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting a &lt;em&gt;square&lt;/em&gt; instead of the actual icon can mean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The icon font has been found but the value for the content you have provided &lt;strong&gt;is not part of the list of values of that font&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;There's a &lt;strong&gt;problem with the location of the fonts&lt;/strong&gt;: the specified font files are not located at the route you have provided.&lt;/li&gt;
&lt;li&gt;Something &lt;strong&gt;wasn't configured properly&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#older-versions-of-nextjs"&gt;
  &lt;/a&gt;
  Older versions of Next.js
&lt;/h3&gt;

&lt;p&gt;As of Next.js 11, &lt;strong&gt;no extra configuration for Webpack is required&lt;/strong&gt; to &lt;em&gt;translate&lt;/em&gt; font file formats. If you're using an older version, it's highly recommended that you &lt;strong&gt;update&lt;/strong&gt; your package version by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;next@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you need to use an &lt;strong&gt;outdated version&lt;/strong&gt; for whatever reasons, keep in mind that &lt;strong&gt;a little bit of further configuration&lt;/strong&gt; will be required: you'll need to install the &lt;code&gt;file-loader&lt;/code&gt; Webpack loader, which will handle font formats appropriately and bundle them up to include them in the final bundle that will be served to the browser, and then, you'll have to add the corresponding configuration in &lt;code&gt;next.config.js&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;And this is all for the third Styled Components 101 lecture! &lt;/p&gt;

&lt;p&gt;Stay tuned to know more about Styled Component in future episodes of the series.&lt;/p&gt;

&lt;p&gt;A big thanks for reading  🤗  and don't hesitate to reach out to me if you any questions or doubts about today's lecture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/XFuQ4InwtXBE4DDPHM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/XFuQ4InwtXBE4DDPHM/giphy.gif" alt='Rachel Green from Friends TV Show behind a desk saying "Ask me anything"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you found this article useful and I see you all in the next 👋&lt;/p&gt;

&lt;p&gt;🎉 Don't forget to follow &lt;a class="mentioned-user" href="https://dev.to/underscorecode"&gt;@underscorecode&lt;/a&gt;
 on &lt;a href="https://instagram.com/underscorecode"&gt;Instagram&lt;/a&gt; and &lt;a href="https://twitter.com/underscorecode"&gt;Twitter&lt;/a&gt; for more daily webdev content 🖥🖤&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#and-last-but-not-least-a-quick-friendly-reminder-before-we-go"&gt;
  &lt;/a&gt;
  And last but not least... A quick friendly reminder before we go 😊
&lt;/h4&gt;

&lt;p&gt;We all know there are million ways to get things done when it comes to programming and development, and we're here to &lt;strong&gt;help and learn&lt;/strong&gt;, so, if you know another possible way to do what others are sharing (&lt;strong&gt;not better, not worse, just different&lt;/strong&gt;), feel free to share it if you feel like it, but, please, &lt;strong&gt;always be kind and respectful&lt;/strong&gt; with the author and the rest of the community. Thank you and happy coding!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
