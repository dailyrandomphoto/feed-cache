<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Onboarding to a new codebase quickly and efficiently</title>
      <author>AppMap Ruby</author>
      <pubDate>Thu, 08 Apr 2021 11:17:47 +0000</pubDate>
      <link>https://dev.to/appland/onboarding-to-a-new-codebase-quickly-and-efficiently-55l2</link>
      <guid>https://dev.to/appland/onboarding-to-a-new-codebase-quickly-and-efficiently-55l2</guid>
      <description>&lt;p&gt;A short demonstration of how to use AppMaps to shorten the time it takes to get productive on a new-to-you codebase.&lt;/p&gt;

&lt;p&gt;I use the open source extension for VS Code called &lt;a href="https://marketplace.visualstudio.com/items?itemName=appland.appmap"&gt;AppMap&lt;/a&gt;, and the ecommerce Rails application &lt;a href="https://github.com/solidusio/solidus"&gt;Solidus&lt;/a&gt; as an example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=appland.appmap"&gt;AppMap&lt;/a&gt; works by recording the code execution paths of your app. A good way to create AppMaps is by recording unit, functional or integration test cases.&lt;/p&gt;

&lt;p&gt;To check it out search for 'AppMap' in the VS Code extensions tab or in the &lt;a href="https://marketplace.visualstudio.com/items?itemName=appland.appmap"&gt;VS Code marketplace&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>I made a Text-to-handwriting tool to write my college assignments for me ü§ì</title>
      <author>pawanbhayde</author>
      <pubDate>Thu, 08 Apr 2021 11:16:29 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/i-made-a-text-to-handwriting-tool-to-write-my-college-assignments-for-me-3mdi</link>
      <guid>https://dev.to/pawanbhayde/i-made-a-text-to-handwriting-tool-to-write-my-college-assignments-for-me-3mdi</guid>
      <description>&lt;p&gt;Hi everyone, I hope you all are safe and doing fine!&lt;/p&gt;

&lt;p&gt;I prefer typing over writing and college told us to write some assignments and I was bored.&lt;/p&gt;

&lt;p&gt;So instead of spending 1 hour to write assignments, I spent 3 hours to build a tool that writes assignments for me üéâ. It is called Text-to-handwriting (see... I'm really good at naming my projects)&lt;/p&gt;

&lt;p&gt;Text to Handwriting converts text content to an image that looks like handwriting. So this is what the output looks like:&lt;/p&gt;

&lt;p&gt;Features&lt;/p&gt;

&lt;p&gt;Draw diagrams&lt;br&gt;
Change font-size, ink color, spacing, etc.&lt;br&gt;
Upload font button for custom handwritings (so you can create a font of your handwriting from other online tools and upload the font file)&lt;/p&gt;

&lt;p&gt;URLs&lt;br&gt;
Tool&lt;br&gt;
&lt;a href="https://github.com/pawanbhayde/text-to-handwriting"&gt;https://github.com/pawanbhayde/text-to-handwriting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub&lt;br&gt;
Do ‚≠ê the repository&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>How to add Dialog Component to Vuejs App</title>
      <author>loizenai</author>
      <pubDate>Thu, 08 Apr 2021 10:26:33 +0000</pubDate>
      <link>https://dev.to/loizenai/how-to-add-dialog-component-to-vuejs-app-49i9</link>
      <guid>https://dev.to/loizenai/how-to-add-dialog-component-to-vuejs-app-49i9</guid>
      <description>&lt;p&gt;&lt;a href="https://ozenero.com/how-to-add-dialog-component-to-vuejs-app"&gt;https://ozenero.com/how-to-add-dialog-component-to-vuejs-app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial, grokonez.com shows you way to add a Dialog Component to Vuejs App.&lt;/p&gt;

&lt;h3&gt;Demo&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Hms__cq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://grokonez.com/wp-content/uploads/2019/06/vue-dialog-component-example.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Hms__cq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://grokonez.com/wp-content/uploads/2019/06/vue-dialog-component-example.gif" alt="vue-dialog-component-example" width="604" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Create Dialog component&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;src&lt;/strong&gt; folder, create &lt;strong&gt;components&lt;/strong&gt;, then add &lt;strong&gt;GkzDialog.vue&lt;/strong&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/components/GkzDialog.vue&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;template&amp;gt;
  &amp;lt;div class="modal" v-show="show"&amp;gt;
    &amp;lt;div class="modal-dialog"&amp;gt;
      &amp;lt;div class="modal-content"&amp;gt;
        &amp;lt;div class="modal-header"&amp;gt;
          &amp;lt;h5 class="modal-title mx-auto"&amp;gt; { { title}}&amp;lt;/h5&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="modal-body" v-if="announcement"&amp;gt;
          &amp;lt;p&amp;gt; { { announcement}}&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="modal-footer"&amp;gt;
          &amp;lt;button @click="dismiss" type="button" class="btn btn-primary mx-auto"&amp;gt;OK&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  props: {
    show: {
      type: Boolean,
      required: true
    },
    title: {
      type: String,
      required: true
    },
    announcement: {
      type: String,
      required: false
    }
  },
  methods: {
    dismiss() {
      this.$emit("close");
    }
  },
  created() {
    const escHandler = e =&amp;gt; {
      if (e.key === "Escape" &amp;amp;&amp;amp; this.show) {
        this.dismiss();
      }
    };

    document.addEventListener("keydown", escHandler);
    this.$once("hook:destroyed", () =&amp;gt; {
      document.removeEventListener("keydown", escHandler);
    });
  }
};
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
.modal {
  background: #aaa;
  display: flex;
}
&amp;lt;/style&amp;gt;
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
.modal {
  background: #aaa;
  display: flex;
}
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More at: &lt;a href="https://ozenero.com/how-to-add-dialog-component-to-vuejs-app"&gt;https://ozenero.com/how-to-add-dialog-component-to-vuejs-app&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>component</category>
    </item>
    <item>
      <title>Prioritize tasks like a BOSS with the Eisenhower method üòé</title>
      <author>Amelia Vieira Rosado</author>
      <pubDate>Thu, 08 Apr 2021 10:09:39 +0000</pubDate>
      <link>https://dev.to/technoglot/prioritize-tasks-like-a-boss-with-the-eisenhower-method-5a5e</link>
      <guid>https://dev.to/technoglot/prioritize-tasks-like-a-boss-with-the-eisenhower-method-5a5e</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@carlheyerdahl?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Carl Heyerdahl&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/productivity?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hello fam! How's life treating you? &lt;/p&gt;

&lt;p&gt;I truly hope you are doing well. If not, here's a small dose of inspiration for you! üòÅ&lt;/p&gt;

&lt;p&gt;If you liked my previous blog, you may enjoy this one too! üòä&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-the-eisenhower-method-really"&gt;
  &lt;/a&gt;
  What is the Eisenhower method really? ü§î
&lt;/h1&gt;

&lt;p&gt;For those unfamiliar, the Eisenhower method (also referred to as the Eisenhower matrix or Eisenhower box) is a technique that allows you to organize and prioritize your tasks.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-little-background-history"&gt;
  &lt;/a&gt;
  A little background history... ü§ì
&lt;/h1&gt;

&lt;p&gt;If you are curious to know where this method got its name from, you are in the right place. If you don't care about its history, you can continue to the next section.&lt;/p&gt;

&lt;p&gt;This method was initially ideated by the 34th President of the United States, Dwight D. Eisenhower. He was the President of the US from 1953 to 1961. Before assuming the role of President, Eisenhower served as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a general in the US Army, &lt;/li&gt;
&lt;li&gt;Supreme Commander of the Allied Forces during World War II and&lt;/li&gt;
&lt;li&gt;first Supreme Commander of NATO.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, Eisenhower was a man involved in various important roles. These roles constantly required him to make important and swift decisions. And for that reason, he decided to put together a method for prioritizing tasks. This method is still used til this day.&lt;/p&gt;

&lt;p&gt;Now, you may be thinking: "Cool, thanks for the unsolicited history class. But how does this work? And why should I, a mere mortal, even care?". Good thing you asked... Let us move on to the next point!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-does-this-eisenhower-method-work"&gt;
  &lt;/a&gt;
  How does this Eisenhower method work? üëÄ
&lt;/h1&gt;

&lt;p&gt;The Eisenhower matrix is made up of four quadrants, as illustrated below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SCYN2Vyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cfw.paymoapp.com/wp-content/uploads/2020/09/eisenhower-decision-matrix-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SCYN2Vyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cfw.paymoapp.com/wp-content/uploads/2020/09/eisenhower-decision-matrix-1.png" alt="Eisenhower Matrix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.paymoapp.com/blog/eisenhower-matrix/"&gt;Image Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, note that these quadrants are formed by analyzing the importance and the urgency of the task at hand. So, on the y-axis the importance of the task is measured and categorized as important or not important. Conversely, the x-axis is concerned with urgency and categorizes tasks by either urgent or not urgent. Easy, right? &lt;/p&gt;

&lt;p&gt;Let us take a closer look at each quadrant, shall we?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quadrant-urgent-amp-important"&gt;
  &lt;/a&gt;
  Quadrant 1Ô∏è‚É£: Urgent &amp;amp; Important
&lt;/h2&gt;

&lt;p&gt;This first quadrant is where your most urgent and important tasks will live. Examples of such tasks are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Putting out a fire&lt;/li&gt;
&lt;li&gt;Resolving a conflict within your team&lt;/li&gt;
&lt;li&gt;Fixing a critical bug in production&lt;/li&gt;
&lt;li&gt;Replying to that mail from your boss or team lead&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally, you should start your day by tackling tasks in this quadrant. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quadrant-not-urgent-but-important"&gt;
  &lt;/a&gt;
  Quadrant 2Ô∏è‚É£: Not Urgent but Important
&lt;/h2&gt;

&lt;p&gt;The second quadrant is where your non-urgent yet important tasks live. Examples of such tasks are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checking your other emails&lt;/li&gt;
&lt;li&gt;Exercising&lt;/li&gt;
&lt;li&gt;Booking your worked hours&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#quadrant-urgent-but-not-important"&gt;
  &lt;/a&gt;
  Quadrant 3Ô∏è‚É£: Urgent but Not Important
&lt;/h2&gt;

&lt;p&gt;The third quadrant of the Eisenhower matrix is where urgent yet unimportant tasks will be located. These tasks should be delegated to others whenever possible. After all, these are the tasks that you risk putting off time and time again. You have been warned.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quadrant-neither-urgent-nor-important"&gt;
  &lt;/a&gt;
  Quadrant 4Ô∏è‚É£: Neither Urgent, Nor Important
&lt;/h2&gt;

&lt;p&gt;The last and fourth quadrant of the Eisenhower matrix is where your non-urgent and unimportant tasks reside. Tasks that fall under this quadrant are typically eliminated since they contribute little or nothing to your productivity or the goal you are pursuing. However, you could use this quadrant to add tasks that help you catch a break from work. You could put recreational activities here or small rewards that you want to give yourself for your hard work. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tip"&gt;
  &lt;/a&gt;
  Tip üí°
&lt;/h1&gt;

&lt;p&gt;I'll drop a tip to help you decide in which quadrant to place your tasks. Ready?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Now, ask yourself... ü§î
1) Is the task at hand urgent? true or false?
2) Is the task at hand important? true of false?
*/&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;urgent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yourAnswer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;important&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yourAnswer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urgent&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Quadrant #1: DO IT NOW&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;urgent&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Quadrant #2: SCHEDULE IT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urgent&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Quadrant #3: DELEGATE IT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Quadrant #4: DROP IT/DO LATER&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words üôáüèª‚Äç‚ôÄÔ∏è
&lt;/h1&gt;

&lt;p&gt;And there you have it! (Sounds familiar? No? Okay...) That should be about everything you need to know about the Eisenhower method/matrix/box. Let me know what you think in the comments below. üëáüèª Have you tried it before? Will you try it? Why or why not? &lt;/p&gt;

&lt;p&gt;Go on and crunch these tasks! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--55nYHRgj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252F68.media.tumblr.com%252Ftumblr_m5meihMmFK1rvpggto1_500.gif%26f%3D1%26nofb%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--55nYHRgj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252F68.media.tumblr.com%252Ftumblr_m5meihMmFK1rvpggto1_500.gif%26f%3D1%26nofb%3D1" alt="Oh you got it dude"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you next time! Happy hacking! üë©üèª‚Äçüíªüë®üèª‚Äçüíª&lt;/p&gt;

&lt;p&gt;Sources&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Time_management#The_Eisenhower_Method"&gt;Good ol' Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.paymoapp.com/blog/eisenhower-matrix/"&gt;From the Paymoapp blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.eisenhower.me/eisenhower-matrix-canvas/"&gt;Download the Eisenhower Canvas in PDF format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>productivity</category>
      <category>writing</category>
      <category>watercooler</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How does AWS CodeBuild &amp; AWS CodePipeline Compare?</title>
      <author>Adit Modi</author>
      <pubDate>Thu, 08 Apr 2021 10:04:28 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-does-aws-codebuild-aws-codepipeline-compare-3e08</link>
      <guid>https://dev.to/aws-builders/how-does-aws-codebuild-aws-codepipeline-compare-3e08</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-is-aws-codebuild-what-is-aws-codepipeline"&gt;
  &lt;/a&gt;
  What is AWS CodeBuild? What is AWS CodePipeline?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;AWS CodeBuild&lt;/strong&gt; is a fully managed build service in the cloud. AWS CodeBuild compiles the source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale own build servers. It provides prepackaged build environments for popular programming languages and build tools such as Apache Maven, Gradle, and more. You can also customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CodePipeline&lt;/strong&gt; on the other hand, is a fully managed continuous delivery service that helps to automate the release pipelines for fast and reliable application and infrastructure updates. CodePipeline automates the build, test, and deploy phases of the release process every time there is a code change, based on the release model you define. This enables a rapid and reliable delivery of features and updates. AWS CodePipeline can easily integrate with third-party services such as GitHub or any other custom plugin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nw2lBo_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzvxteb1vwu50a3winfd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nw2lBo_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzvxteb1vwu50a3winfd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Background: I am Cloud , DevOps &amp;amp; Big Data Enthusiast | 4x AWS Certified | 3x OCI Certified | 3x Azure Certified . &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-differences"&gt;
  &lt;/a&gt;
  What are the differences?
&lt;/h2&gt;

&lt;p&gt;The main difference between the two is; AWS CodeBuild can be classified as a tool in the Continuous Integration category, while AWS CodePipeline is grouped under Continuous Deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-continuous-integration"&gt;
  &lt;/a&gt;
  What is Continuous Integration?
&lt;/h2&gt;

&lt;p&gt;Continuous integration is a software development method where members of the team can integrate their work at least once a day. In this method, every integration is checked by an automated build to search the error.&lt;/p&gt;

&lt;p&gt;In continuous integration after a code commit, the software is built and tested immediately. In a large project with many developers, commits are made many times during a day. With each commit code is built and tested. If the test is passed, build is tested for Deployment. If the Deployment is a success, the code is pushed to production. This commit, build, test, and deploy is a continuous process, and hence the name continuous integration/deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-continuous-delivery"&gt;
  &lt;/a&gt;
  What is Continuous Delivery?
&lt;/h2&gt;

&lt;p&gt;Continuous delivery is a software engineering method in which a team develops software products in a short cycle. It ensures that software can be easily released at any time.&lt;/p&gt;

&lt;p&gt;The main aim of continuous delivery is to build, test, and release software with good speed and frequency. It helps you to reduce the cost time and risk of delivering changes by allowing for frequent updates in production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-continuous-deployment"&gt;
  &lt;/a&gt;
  What is Continuous Deployment
&lt;/h2&gt;

&lt;p&gt;Continuous deployment is a software engineering process in which product functionalities are delivered using automatic deployment. It helps testers to validate whether the codebase changes are correct and stable or not.&lt;/p&gt;

&lt;p&gt;The team can achieve continuous deployment by relying on infrastructure that automates different testing steps. Once each integration meets this release criteria, the application is updated with a new code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-run-aws-codebuild-and-aws-codepipeline"&gt;
  &lt;/a&gt;
  How do you run AWS CodeBuild and AWS CodePipeline?
&lt;/h2&gt;

&lt;p&gt;You can use the AWS CodeBuild or AWS CodePipeline console to run CodeBuild. You can also automate the running of CodeBuild by using the AWS Command Line Interface (AWS CLI) or the AWS SDKs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--STo82-TW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u8085gkpy5bihz6d53h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--STo82-TW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u8085gkpy5bihz6d53h.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: stackshare.io&lt;/p&gt;

&lt;p&gt;You can then add CodeBuild as a build or test action to the build or test stage of a pipeline in AWS CodePipeline. AWS CodePipeline is a continuous delivery service that you can use to model, visualize, and automate the steps required to release your code. This includes building your code. &lt;/p&gt;

&lt;p&gt;A pipeline is a workflow construct that describes how code changes go through a release process. See the illustration below; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6X0rKk0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esp0wlxm5cdtcog793kx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6X0rKk0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esp0wlxm5cdtcog793kx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: stackshare.io&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-some-of-the-tools-that-integrate-with-aws-codebuild-and-aws-codepipeline"&gt;
  &lt;/a&gt;
  What are some of the tools that integrate with AWS CodeBuild and AWS CodePipeline?
&lt;/h2&gt;

&lt;p&gt;Some of the tools that integrate with AWS CodeBuild include; GitHub, GitHub Enterprise, Jenkins, Bitbucket, AWS CodeCommit, AWS CodeFormation, AWS Elastic Beanstalk, and Amazon S3.&lt;/p&gt;

&lt;p&gt;On the other hand, some of the tools that integrate with AWS CodePipeline include; GitHub, AWS Elastic Beanstalk, Amazon EC2, Amazon S3, Jenkins, Cloudbees, and Runscope. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-some-alternatives-to-aws-codebuild-and-aws-codepipeline"&gt;
  &lt;/a&gt;
  What are some alternatives to AWS CodeBuild and AWS CodePipeline?
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#jenkins"&gt;
  &lt;/a&gt;
  Jenkins
&lt;/h4&gt;

&lt;p&gt;Jenkins is the leading open-source continuous integration server. Built with Java, it provides over 300 plugins to support building and testing virtually any project.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#aws-codedeploy"&gt;
  &lt;/a&gt;
  AWS CodeDeploy
&lt;/h4&gt;

&lt;p&gt;AWS CodeDeploy is a service that automates code deployments to Amazon EC2 instances. AWS CodeDeploy makes it easier to rapidly release new features, helps you avoid downtime during deployment, and handles the complexity of updating your applications.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#aws-codestar"&gt;
  &lt;/a&gt;
  AWS CodeStar
&lt;/h4&gt;

&lt;p&gt;AWS CodeStar provides a unified user interface, enabling you to easily manage your software development activities in one place. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#apache-maven"&gt;
  &lt;/a&gt;
  Apache Maven
&lt;/h4&gt;

&lt;p&gt;Maven allows a project to build using its project object model (POM) and a set of plugins that are shared by all projects using Maven, providing a uniform build system.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#gitlab-ci"&gt;
  &lt;/a&gt;
  GitLab CI
&lt;/h4&gt;

&lt;p&gt;GitLab offers a continuous integration service. If you add a .gitlab-ci.yml file to the root directory of your repository, and configure your GitLab project to use a Runner, then each merge request or push triggers your CI pipeline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Every project has its own requirements and every CI/CD is unique. But when you have such great and easy to use tools available for you, you might as well want to make smarter use of them. AWS CodeBuild and AWS CodePipeline protects your secrets, automates jobs, reduces chances of error, and saves time and effort. In a poll by Stackshare in its community, ‚ÄúPay per minute‚Äù is the primary reason why developers consider AWS CodeBuild over the competitors, whereas ‚ÄúSimple to set up‚Äù was stated as the key factor in picking AWS CodePipeline.&lt;/p&gt;

&lt;p&gt;Hope this guide helps you understand the key differences between two of most used CI/CD services of aws, feel free to contact me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn.&lt;/a&gt;&lt;br&gt;
You can view my badges &lt;a href="https://www.youracclaim.com/users/adit-modi/badges"&gt;here.&lt;/a&gt;&lt;br&gt;
If you are interested in learning more about AWS then follow me on &lt;a href="https://github.com/AditModi"&gt;github.&lt;/a&gt;&lt;br&gt;
If you liked this content then do clap and share it . Thank You .&lt;/p&gt;

</description>
      <category>devops</category>
      <category>beginners</category>
      <category>cloudskills</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>React Custom Hooks Tutorial - Creating useOnline, Testing and Publishing It</title>
      <author>Shahed Nasser</author>
      <pubDate>Thu, 08 Apr 2021 10:02:58 +0000</pubDate>
      <link>https://dev.to/shahednasser/react-custom-hooks-tutorial-creating-useonline-testing-and-publishing-it-1bbl</link>
      <guid>https://dev.to/shahednasser/react-custom-hooks-tutorial-creating-useonline-testing-and-publishing-it-1bbl</guid>
      <description>&lt;p&gt;&lt;em&gt;This was originally posted on &lt;a href="https://blog.shahednasser.com/react-custom-hooks-tutorial-creating-useonline/"&gt;my personal blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll go over how to create a simple custom React hook, testing it locally, and then publishing it on NPM. The React hook we'll create is&lt;code&gt;useOnline&lt;/code&gt;which detects if the user goes offline and shows them a message that they're offline.&lt;/p&gt;

&lt;p&gt;After implementing it, we'll check how we can test it locally, then publishing it on NPM.&lt;/p&gt;

&lt;p&gt;If you're checking out this tutorial to learn only how to create a custom hook to use it in an existing project without intending on publishing it as a package on NPM, then you can stop before the testing and publishing part of this tutorial. You probably also won't need to go through the Setup part as well.&lt;/p&gt;

&lt;p&gt;The code for this tutorial is available on &lt;a href="https://github.com/shahednasser/use-online"&gt;this GitHub Repository&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-are-custom-hooks"&gt;
  &lt;/a&gt;
  What are Custom Hooks?
&lt;/h3&gt;

&lt;p&gt;Custom hooks hold a certain logic that makes use of React's hooks like useState, useEffect, etc... You usually create custom hooks when a certain part of your project is reusable and makes use of React's hooks. So, you create a custom hook that you can use throughout your project just like you would use React's hooks. It should also start with &lt;code&gt;use&lt;/code&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;Let's start by creating a new directory and changing to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;use-online
&lt;span class="nb"&gt;cd &lt;/span&gt;use-online
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll initialize our NPM project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll have to enter some information that will go into &lt;code&gt;package.json&lt;/code&gt; like package name, description, author, main entry, etc... You can use the default settings for now.&lt;/p&gt;

&lt;p&gt;Once you're done, you'll have an empty NPM package at your hand. Let's now install the dependencies we'll be using to develop our custom React hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; react @babel/cli copyfiles
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're installing React since we are developing a custom hook. We're also installing babel's CLI to build our code later on, and we're installing copyfiles which we will use later as well when we are getting our package ready for publishing.&lt;/p&gt;

&lt;p&gt;Once we're done with that, we're ready to implement our custom hook.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#implementing-useonline"&gt;
  &lt;/a&gt;
  Implementing useOnline
&lt;/h3&gt;

&lt;p&gt;As I mentioned in the beginning,&lt;code&gt;useOnline&lt;/code&gt;will detect whenever the user is online or offline. This means that it will manage a state for the user's connectivity status, and listen to any changes in the user's connectivity and update it accordingly.&lt;/p&gt;

&lt;p&gt;So,&lt;code&gt;useOnline&lt;/code&gt;will make use of&lt;code&gt;useStatus&lt;/code&gt;to keep track of the user's connectivity, and will use&lt;code&gt;useEffect&lt;/code&gt;to register event listeners for the events&lt;code&gt;online&lt;/code&gt;and&lt;code&gt;offline&lt;/code&gt;to set the state accordingly. In the end,&lt;code&gt;useOnline&lt;/code&gt;will just return the state which we can use in other components to track the user's connectivity without repeating the logic behind it.&lt;/p&gt;

&lt;p&gt;Let's start by creating the file that will hold our custom hook. Create&lt;code&gt;src/useOnline.js&lt;/code&gt;with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useOnline&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useOnline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're just importing&lt;code&gt;useState&lt;/code&gt;and&lt;code&gt;useEffect&lt;/code&gt;to use them in a bit, declaring the custom hook&lt;code&gt;useOnline&lt;/code&gt;and exporting it.&lt;/p&gt;

&lt;p&gt;Now, let's get to the code of the hook. First, let's create the state that will hold the user's connectivity:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useOnline&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOnline&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onLine&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;online&lt;/code&gt;will hold the state of the user's connectivity and it will be a boolean. If the user is online it will be true, if not it will be false. For its initial value, we are using the value of&lt;code&gt;navigator.onLine&lt;/code&gt;which returns the online status of the browser.&lt;/p&gt;

&lt;p&gt;Next, we need to listen to the&lt;code&gt;online&lt;/code&gt;and&lt;code&gt;offline&lt;/code&gt;events. The&lt;code&gt;online&lt;/code&gt;event occurs when the user goes online, and the&lt;code&gt;offline&lt;/code&gt;event occurs when the user goes offline. To add the listeners, we will use&lt;code&gt;useEffect&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useOnline&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOnline&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//TODO change state to online&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;offline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//TODO change state to offline&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, we are adding event listeners to the &lt;code&gt;online&lt;/code&gt; and &lt;code&gt;offline&lt;/code&gt; events inside&lt;code&gt;useEffect&lt;/code&gt;callback. We are also passing an empty array as a second parameter for&lt;code&gt;useEffect&lt;/code&gt;. This ensures that the callback is only called on mounting the component.&lt;/p&gt;

&lt;p&gt;Now, let's add the logic inside each of the listeners. We just need to change the value of&lt;code&gt;online&lt;/code&gt;based on the event. To do this, we will use&lt;code&gt;setOnline&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setOnline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;offline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setOnline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty easy. Our code now adds an event listener to both &lt;code&gt;online&lt;/code&gt; and &lt;code&gt;offline&lt;/code&gt; events, which changes the value of our state &lt;code&gt;online&lt;/code&gt; based on the user's connectivity.&lt;/p&gt;

&lt;p&gt;When adding event listeners or adding any kind of subscriptions, we need to make sure that we are cleaning up after the component unmounts. To do that, we return a function in&lt;code&gt;useEffect&lt;/code&gt;that removes the event listeners on unmount.&lt;/p&gt;

&lt;p&gt;Since we will be using&lt;code&gt;removeEventListener&lt;/code&gt;to remove the event listeners, which takes the event listener we are moving as a second parameter, let's remove our event listeners to functions that we can reference:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;offlineHandler&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setOnline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onlineHandler&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setOnline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onlineHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;offline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;offlineHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onlineHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;offline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;offlineHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We moved our event listeners to functions outside&lt;code&gt;useEffect&lt;/code&gt;(you can also add them inside instead) and we are passing them as the event listeners in&lt;code&gt;addEventListener&lt;/code&gt;and&lt;code&gt;removeEventListener&lt;/code&gt;inside&lt;code&gt;useEffect&lt;/code&gt;for both the&lt;code&gt;online&lt;/code&gt;and&lt;code&gt;offline&lt;/code&gt;events.&lt;/p&gt;

&lt;p&gt;The last thing we need to do in our custom hook is return the state we are changing. This way we can use this state in other components with all the logic behind it in one place.&lt;/p&gt;

&lt;p&gt;So, the full code for&lt;code&gt;useOnline&lt;/code&gt;will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useOnline&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOnline&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;offlineHandler&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setOnline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onlineHandler&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setOnline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setOnline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onlineHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;offline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;offlineHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onlineHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;offline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;offlineHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;online&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useOnline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! We created a custom hook that makes use of React hooks like&lt;code&gt;useState&lt;/code&gt;and&lt;code&gt;useEffect&lt;/code&gt;to determine the user's connectivity.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#preparing-the-npm-package"&gt;
  &lt;/a&gt;
  Preparing the NPM Package
&lt;/h3&gt;

&lt;p&gt;If you want to publish your custom hook on NPM, you need to prepare the package to be published and used. There are certain things that need to be done, especially in&lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the beginning, we installed&lt;code&gt;@babel/cli&lt;/code&gt;and&lt;code&gt;copyfiles&lt;/code&gt;. This is where we'll put them into use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Package Information&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you first run&lt;code&gt;npm init&lt;/code&gt;you are asked to enter a few information like package name, description, author, version, license, etc... If you've used the default information, or you want to change this information, make sure you change them prior to publishing. You can do that in the&lt;code&gt;package.json&lt;/code&gt;file.&lt;/p&gt;

&lt;p&gt;Note that the&lt;code&gt;name&lt;/code&gt;in&lt;code&gt;package.json&lt;/code&gt;is the package name that people will use to install it. So, make sure it's exactly what you want to call it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When publishing a package, make sure you are listing the dependencies required correctly. If some dependencies are only required during development and are not necessary to install when they are being used, then include them under&lt;code&gt;devDependencies&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In our example, we should have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@babel/cli"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.13.14"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"copyfiles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.4.1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the versions might be different in your project but that's fine.&lt;/p&gt;

&lt;p&gt;There's one more thing to note: In a React project, only one installation or instance of&lt;code&gt;react&lt;/code&gt;is allowed. Meaning that your package shouldn't install React as well when installing it in a project.&lt;/p&gt;

&lt;p&gt;So, let's change&lt;code&gt;react&lt;/code&gt;to be a peer dependency like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"peerDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^16.8.0 || ^17.0.1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@babel/cli"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.13.14"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"copyfiles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.4.1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When adding a dependency in&lt;code&gt;peerDependencies&lt;/code&gt;, the&lt;code&gt;react&lt;/code&gt;package you are using in your project that will include this package will be used instead of installing a new one. We are also allowing the version to be at least&lt;code&gt;16.8.0&lt;/code&gt;since that's when React Hooks were introduced.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scripts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To make sure our package is ready for use, we will add scripts that will build our React custom hook using&lt;code&gt;babel&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prebuild"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm i"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"babel src --out-dir dist"&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, whenever we run&lt;code&gt;build&lt;/code&gt;,&lt;code&gt;prebuild&lt;/code&gt;will run first to ensure that the dependencies required are installed, then the build script will compile the Javascript files in our&lt;code&gt;src&lt;/code&gt;directory (which is&lt;code&gt;useOnline.js&lt;/code&gt;) and outputs the result in&lt;code&gt;dist&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;main&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we want our package to be used like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useOnline&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use-online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to specify what we are exporting and which file will be used for the import. It's the&lt;code&gt;main&lt;/code&gt;file in our package.&lt;/p&gt;

&lt;p&gt;In our case, it will be the output of the&lt;code&gt;build&lt;/code&gt;script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist/useOnline.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;files&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When publishing a package, by default, it will publish all the files and directories starting from the root directory. This can increase the package's size significantly, especially if there are a lot of redundant files or files that are not necessary for the package to be used.&lt;/p&gt;

&lt;p&gt;In our example, if you look at the&lt;a href="https://github.com/shahednasser/use-online"&gt;GitHub Repository&lt;/a&gt;, ¬†you can see that there's an&lt;code&gt;example&lt;/code&gt;directory. We will get to what that holds later, but a lot of times you might have examples, images, or other files that might be necessary for the package development-wise, but not when it's published.&lt;/p&gt;

&lt;p&gt;To decrease the package size and make sure only relevant files are included, we use the&lt;code&gt;files&lt;/code&gt;key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"files"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"dist"&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;files&lt;/code&gt;takes an array that holds all the files or directories that should be included in the package once published. In our case, it will just be the&lt;code&gt;dist&lt;/code&gt;directory that will hold our built code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;types&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This one is purely optional and I'm using it in its simplest form. You can add a Typescript declaration for your package. To do so, we'll create&lt;code&gt;src/useOnline.d.ts&lt;/code&gt;with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use-online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useOnline&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will declare the module&lt;code&gt;use-online&lt;/code&gt;which exports the function&lt;code&gt;useOnline&lt;/code&gt;that returns boolean which is the online status.&lt;/p&gt;

&lt;p&gt;Next, we will add a new script in&lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prebuild"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm i"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"babel src --out-dir dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"postbuild"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"copyfiles -u 1 ./src/useOnline.d.ts ./dist"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The&lt;code&gt;postbuild&lt;/code&gt;script will run after the&lt;code&gt;build&lt;/code&gt;script is finished. It will copy&lt;code&gt;src/useOnline.d.ts&lt;/code&gt;to the&lt;code&gt;dist&lt;/code&gt;directory.&lt;/p&gt;

&lt;p&gt;Last, we will add the&lt;code&gt;types&lt;/code&gt;key in&lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"types"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist/useOnline.d.ts"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will make your package a Typescript package, although in Typescript packages you wouldn't really be doing it this way. This is just a simple form of how to do it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#testing-our-custom-hook-locally"&gt;
  &lt;/a&gt;
  Testing Our Custom Hook Locally
&lt;/h3&gt;

&lt;p&gt;If you are adding your custom hook to your existing project, then you can probably just test it there. However, if you are creating a custom hook to publish online, and you want to test it as a separate package, this section is for you.&lt;/p&gt;

&lt;p&gt;In the&lt;a href="https://github.com/shahednasser/use-online"&gt;GitHub Repository&lt;/a&gt;I created for this tutorial, ¬†you can see an&lt;code&gt;example&lt;/code&gt;folder. This folder holds a website built using&lt;code&gt;create-react-app&lt;/code&gt;that is just used to test our&lt;code&gt;use-online&lt;/code&gt;package that holds the&lt;code&gt;useOnline&lt;/code&gt;hook.&lt;/p&gt;

&lt;p&gt;If you don't have a project to test&lt;code&gt;use-online&lt;/code&gt;, let's create one just for the purpose by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new directory&lt;code&gt;example&lt;/code&gt;that will hold a Single Page Application (SPA) built with React.&lt;/p&gt;

&lt;p&gt;Before changing into that directory. Let's look into how we'd use&lt;code&gt;use-online&lt;/code&gt;if it's not actually a package on NPM. As you probably already know, you can install any package on NPM using the&lt;code&gt;install&lt;/code&gt;or&lt;code&gt;i&lt;/code&gt;command like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &amp;lt;PACKAGE_NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, how do we install a package that is only available locally? We will you&lt;a href="https://docs.npmjs.com/cli/v7/commands/npm-link"&gt;linking&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm-link&lt;/code&gt;allows us to create a symlink of our package in the global folder on our machine. This way, we can "install" local packages in other projects on our machine for purposes like testing.&lt;/p&gt;

&lt;p&gt;What we will do is we will create a link of&lt;code&gt;use-online&lt;/code&gt;, then use it in the&lt;code&gt;example&lt;/code&gt;project we just created.&lt;/p&gt;

&lt;p&gt;Inside the root directory of&lt;code&gt;use-online&lt;/code&gt;run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;link&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this is done, a symbolic link will be created to this package. We can now change to the example directory and "install" the&lt;code&gt;use-online&lt;/code&gt;package by linking to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;example
npm &lt;span class="nb"&gt;link &lt;/span&gt;use-online
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once linked, you can now use&lt;code&gt;use-online&lt;/code&gt;in this project as if it was installed like any other NPM package. Any changes you make in&lt;code&gt;use-online&lt;/code&gt;will automatically be portrayed in the package.&lt;/p&gt;

&lt;p&gt;Before we can use&lt;code&gt;use-online&lt;/code&gt;, let's go its root directory and run the build command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will run NPM install, compiles the code with&lt;code&gt;babel&lt;/code&gt;, then (if you followed along with the typescript part) copies the typescript declaration file to&lt;code&gt;dist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I recommend before testing it you remove the&lt;code&gt;node_modules&lt;/code&gt;directory. As we mentioned before, when using&lt;code&gt;peerDependencies&lt;/code&gt;React will not be installed if the project you are installing&lt;code&gt;use-online&lt;/code&gt;into already has it installed. However, when we ran the build command, the package was on its own and there was no&lt;code&gt;react&lt;/code&gt;dependencies installed so it installed&lt;code&gt;react&lt;/code&gt;. Since we are linking to it and not actually installing it in&lt;code&gt;example&lt;/code&gt;, the&lt;code&gt;node_modules&lt;/code&gt;directory of&lt;code&gt;use-online&lt;/code&gt;will be inside the&lt;code&gt;node_modules&lt;/code&gt;directory of&lt;code&gt;example&lt;/code&gt;, which will lead to two&lt;code&gt;react&lt;/code&gt;instances inside&lt;code&gt;example&lt;/code&gt;. So, make sure to delete&lt;code&gt;node_modules&lt;/code&gt;in&lt;code&gt;use-online&lt;/code&gt;before testing it.&lt;/p&gt;

&lt;p&gt;We will just be adding three 3 lines in&lt;code&gt;example/src/App.js&lt;/code&gt;. First, we will import our custom hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useOnline&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use-online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second, inside the&lt;code&gt;App&lt;/code&gt;component, we will use the&lt;code&gt;useOnline&lt;/code&gt;hook to get the&lt;code&gt;online&lt;/code&gt;state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;online&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useOnline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;//... rest of the code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Third and last, we will add in the rendered part a condition to display to the user that they're offline:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App-header&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;You&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;re Offline&amp;lt;/p&amp;gt;}
        &amp;lt;img src={logo} className="App-logo" alt="logo" /&amp;gt;
        &amp;lt;p&amp;gt;
          Edit &amp;lt;code&amp;gt;src/App.js&amp;lt;/code&amp;gt; and save to reload.
        &amp;lt;/p&amp;gt;
        &amp;lt;a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        &amp;gt;
          Learn React
        &amp;lt;/a&amp;gt;
      &amp;lt;/header&amp;gt;
    &amp;lt;/div&amp;gt;
  );
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the line we added:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;You&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;re Offline&amp;lt;/p&amp;gt;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When&lt;code&gt;online&lt;/code&gt;is false, it means that the user is offline so we're showing them the message. Remember that the logic behind changing the state based on the user's connectivity is actually done inside&lt;code&gt;useOnline&lt;/code&gt;. We just have to use the returned&lt;code&gt;online&lt;/code&gt;value and everything else is done inside the custom hook.&lt;/p&gt;

&lt;p&gt;Let's now start the development server by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will just be the default React page that we see everytime we start a new&lt;code&gt;create-react-app&lt;/code&gt;project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7cZBR5cB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l07s1f17d65tcpqxjg12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7cZBR5cB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l07s1f17d65tcpqxjg12.png" alt="React Project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The best way to test&lt;code&gt;useOnline&lt;/code&gt;by simulating going offline. To do that, open the devtools then go to the Application tab&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1HRXfa4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1klmh56dk314jn3u7dmr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1HRXfa4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1klmh56dk314jn3u7dmr.png" alt="DevTools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see there's a checkbox to simulate an offline browser. This is used for testing service workers but it will still work for any kind of testing regarding the user's connectivity.&lt;/p&gt;

&lt;p&gt;Once you check the Offline checkbox, you should see the "You're Offline" message we added:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Py1exu5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dluxm6olhqi4pgr7kfgb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Py1exu5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dluxm6olhqi4pgr7kfgb.png" alt="Offline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our custom hook works! Try turning it on and off. When you check the Offline checkbox, the message will show. When you check it off, the message will be removed.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#publishing-your-custom-hook"&gt;
  &lt;/a&gt;
  Publishing Your Custom Hook
&lt;/h3&gt;

&lt;p&gt;Now that we're done testing our custom hook, and we configured everything in our package, we are ready to publish it on NPM.&lt;/p&gt;

&lt;p&gt;First, make sure you have an account on&lt;a href="https://www.npmjs.com/"&gt;NPM&lt;/a&gt;. If you don't, you need to create one first.&lt;/p&gt;

&lt;p&gt;In your terminal run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll have to enter your username, password, and email. If it's all correct, you will be authenticated and authorized to publish your package.&lt;/p&gt;

&lt;p&gt;In the root directory of your package, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unless any errors occur, that's all you'll have to do! Your package will be live once this command is done running.&lt;/p&gt;

&lt;p&gt;If you get an error regarding an existing package with a similar name, make sure to rename your package inside&lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"NEW_PACKAGE_NAME"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then try again.&lt;/p&gt;

&lt;p&gt;If your package was published successfully, you will receive an email to notify you about it and you can go ahead and view it on NPM. You can then inside your project run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;PACKAGE_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it will be installed just like any package out there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updating Your Package&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you later on decided to fix some bugs or make any changes in your package and you want to update it, just run in the root directory of the package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm version TYPE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where TYPE can either be&lt;code&gt;patch&lt;/code&gt;(for small bug fixes),&lt;code&gt;minor&lt;/code&gt;(for small changes), and&lt;code&gt;major&lt;/code&gt;for big changes. You can read more about it &lt;a href="https://docs.npmjs.com/about-semantic-versioning"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>RoadRunner here and now</title>
      <author>Max Bantsevich</author>
      <pubDate>Thu, 08 Apr 2021 09:58:46 +0000</pubDate>
      <link>https://dev.to/dev_family/roadrunner-here-and-now-2oo9</link>
      <guid>https://dev.to/dev_family/roadrunner-here-and-now-2oo9</guid>
      <description>&lt;p&gt;Recently the &lt;a href="https://github.com/laravel/octane"&gt;Laravel Octane&lt;/a&gt; package was released. It was created to make Laravel with Swoole and RoadRunner more friendly. We are using RoadRunner instead of php-fpm in &lt;a href="https://dev.family/?utm_source=devto&amp;amp;utm_medium=article&amp;amp;utm_campaign=roadrunner-zdes-i-sejchas"&gt;dev.family&lt;/a&gt; for some time now, and we decided to share our experience and to reveal what advantages it has.&lt;/p&gt;

&lt;p&gt;RoadRunner is a high-performance, open-source PHP application server written in Go. The main difference from php-fpm is that RoadRunner interacts with long-lived php processes, unlike php-fpm, which creates and kills a new php process with each request. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of a long-lived process:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No time wasted on booting&lt;/li&gt;
&lt;li&gt;No time is spent on creating a connection to the database&lt;/li&gt;
&lt;li&gt;The ability to use the in-memory cache directly in the process&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The disadvantage of this approach is that it is not suitable for all PHP applications, because often when you are writing code, it is taken into account that the PHP process will die after the request. Thus, you need to be able to monitor memory leaks, work carefully with the global state. Therefore, legacy projects, probably, can‚Äôt be started on the Roadrunner. &lt;/p&gt;

&lt;p&gt;However, Roadrunner has other useful functions, such as static feedback, response compression, and balancing. These functions in a typical bundle are falling on nginx. And if you are using the PHP roadrunner, the application can be raised without it at all (nginx).&lt;/p&gt;

&lt;p&gt;RoadRunner is also quite easy to expand. You can use its components for your own application server and get the opportunity, for example, to process some requests directly on Go, to work with websockets.&lt;/p&gt;

&lt;p&gt;RoadRunner itself is not a new development, it is already a couple of years old. However, with official support of Laravel Octane, you can be sure that the framework is ready to work with it.&lt;/p&gt;

&lt;p&gt;We conducted a small test on a real project, where we compared the speed of php-fpm and roadrunner. The results were as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;php-fpm:&lt;/strong&gt;&lt;br&gt;
plain text: 1150 RPS&lt;br&gt;
single query: 530 RPS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;roadrunner:&lt;/strong&gt;&lt;br&gt;
plain text: 2200 RPS&lt;br&gt;
single query: 1600 RPS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;plain text&lt;/strong&gt; -- a query that returns a constant JSON&lt;br&gt;
&lt;strong&gt;single query&lt;/strong&gt; -- a query that returns the result of a single query to the database in JSON format&lt;/p&gt;

&lt;p&gt;There is a significant increase in speed, which is due to the lack of time for booting and the use of a permanent connection to the database.&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>go</category>
    </item>
    <item>
      <title>Cross application drag 'n drop using Transmat</title>
      <author>Jorik</author>
      <pubDate>Thu, 08 Apr 2021 09:43:38 +0000</pubDate>
      <link>https://dev.to/jorik/cross-application-drag-n-drop-using-transmat-48mc</link>
      <guid>https://dev.to/jorik/cross-application-drag-n-drop-using-transmat-48mc</guid>
      <description>&lt;p&gt;&lt;strong&gt;With &lt;a href="https://google.github.io/transmat"&gt;Transmat&lt;/a&gt; you can add drag-drop and copy-paste interactions to your webpage. That is nothing new, but with its ability to interact with external applications by simply dragging (or copying!) elements, a new world of possibilities open up!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Transmat library providing a wrapper around the browser's DataTransfer API, and makes it easy to respond to drag-drop interactions. This interaction is &lt;a href="https://caniuse.com/mdn-api_datatransfer_setdata"&gt;supported by all desktop browsers&lt;/a&gt; that have been released after Internet Explorer 11 (10 years ago!)&lt;/p&gt;

&lt;p&gt;In this post, you'll learn how to transfer data to external applications, receive incoming external data, and how to highlight drop areas.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jtangelder/embed/eYgWVoo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-transferable-elements-in-your-html"&gt;
  &lt;/a&gt;
  1. Transferable elements in your HTML
&lt;/h1&gt;

&lt;p&gt;Add a draggable and focusable element to your webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"source"&lt;/span&gt; &lt;span class="na"&gt;draggable=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;tabindex=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Drag or copy me
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"target"&lt;/span&gt; &lt;span class="na"&gt;tabindex=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Drop here!
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The elements need to be marked as such in order to enable the browser's native Drag and Drop interactions. The tabindex will make the element selectable, which enables the user to trigger a copy.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-setting-up-drag-and-copy-interactions"&gt;
  &lt;/a&gt;
  2. Setting up drag and copy interactions
&lt;/h1&gt;

&lt;p&gt;The examples below have the transmat library imported. You can get it from npm, &lt;code&gt;npm install transmat&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Transmat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addListeners&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;transmat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;source&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Add listeners for 'drag' and 'copy'.&lt;/span&gt;
&lt;span class="nx"&gt;addListeners&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;transmit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create a Transmat instance based on the incoming event.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transmat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Transmat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;transmat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="c1"&gt;// Text data. This will show up in Text fields, &lt;/span&gt;
    &lt;span class="c1"&gt;// but also as the fallback for text/html when pasting &lt;/span&gt;
    &lt;span class="c1"&gt;// to WYSIWYG editors.&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/plain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi there!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;// HTML data. This will be accepted by many WYSIWYG &lt;/span&gt;
    &lt;span class="c1"&gt;// editors like Google Docs, Gmail, Microsoft Word, etc.&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
         &amp;lt;h1&amp;gt;This is formatted!&amp;lt;/h1&amp;gt;
         &amp;lt;p&amp;gt;
           Pretty cool, and you can also add
           &amp;lt;a href="https://example.com/"&amp;gt;links&amp;lt;/a&amp;gt;!
         &amp;lt;/p&amp;gt;
         &amp;lt;img src="https://example.com/test.jpg" /&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;// URL data. This URL will open when dropping on the&lt;/span&gt;
    &lt;span class="c1"&gt;// URL bar of your browser, will create a shortcut file &lt;/span&gt;
    &lt;span class="c1"&gt;// when dropping on the desktop.&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/uri-list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://example.com/foobar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;// Share a structured JS object. Transmat with serialize &lt;/span&gt;
    &lt;span class="c1"&gt;// this object using JSON.stringify()&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Transmat works as following;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;addListeners&lt;/code&gt; method assigns the event &lt;code&gt;transmit&lt;/code&gt; listeners for &lt;code&gt;dragstart&lt;/code&gt; and &lt;code&gt;copy&lt;/code&gt; events. The event callback gets invoked when one of these interactions get triggered.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;new Transmat(event)&lt;/code&gt; instance is created using the &lt;code&gt;event&lt;/code&gt; object. This instance makes it easier for you to interact with the underlying DataTransfer API and ensures the same behavior across browsers.&lt;/li&gt;
&lt;li&gt;Provide data with the &lt;code&gt;setData(data)&lt;/code&gt; method. By providing MIME types, you will describe the type of data. The MIME types listed in the code example below are primitives that have wide support across the operating system. See the code comments to see the behavior for each of these.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now if you'll run this example, see what happens when you drag-drop the example object to your favourite text editor (&lt;a href="https://codepen.io/pen"&gt;Codepen&lt;/a&gt;, Sublime, VS Code), WYSIWYG editor (&lt;a href="https://doc.new"&gt;Google Docs&lt;/a&gt;, Apple Pages, Microsoft Word) and browser windows. It will show and open the content you provided in this element. &lt;em&gt;Like magic!&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-listening-for-incoming-data"&gt;
  &lt;/a&gt;
  3. Listening for incoming data
&lt;/h1&gt;

&lt;p&gt;The same way as listening for the &lt;code&gt;transmit&lt;/code&gt; event, you can listen to incoming data using the &lt;code&gt;receive&lt;/code&gt; event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;target&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Add listeners for 'drop' and 'paste'.&lt;/span&gt;
&lt;span class="nx"&gt;addListeners&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;receive&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create a Transmat instance based on the incoming event.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transmat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Transmat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// Only want to accept JSON data.&lt;/span&gt;
    &lt;span class="nx"&gt;transmat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
    &lt;span class="c1"&gt;// Call this in order to accept incoming data.&lt;/span&gt;
    &lt;span class="nx"&gt;transmat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Get the JSON string data, parse it, and log.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;transmat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Like as transmitting data, you will need to set up a &lt;code&gt;receive&lt;/code&gt; event listener to listen for incoming data transfers.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;new Transmat(event)&lt;/code&gt; is created to interact with the underlying incoming data.&lt;/li&gt;
&lt;li&gt;In this example, you only want to accept &lt;code&gt;application/json&lt;/code&gt; data. The &lt;code&gt;hasType(type)&lt;/code&gt; method will return whether this payload is being tranferred.&lt;/li&gt;
&lt;li&gt;In order to accept the tranfer, you need to call the &lt;code&gt;accept()&lt;/code&gt; method. This will prevent the document from doing its default behavior, like navigating to an URL when the &lt;code&gt;text/uri-list&lt;/code&gt; payload is present.&lt;/li&gt;
&lt;li&gt;When accepted, you will use the &lt;code&gt;getData(type)&lt;/code&gt; to read the string payload. In this example, you expect JSON data which needs to be parsed first using JSON.parse. &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#4-highlight-drop-areas"&gt;
  &lt;/a&gt;
  4. Highlight drop areas
&lt;/h1&gt;

&lt;p&gt;It can be hard for the user to discover valid drop areas. You can use the &lt;code&gt;TransmatObserver&lt;/code&gt; class to observe incoming transfer events on targets, and respond to them. The example below will add a className when a JSON payload is being transferred.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.drag-active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.drag-over&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Observe Transmat (drag) events happening on your page.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TransmatObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transmat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Transmat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Only want to highlight elements containing JSON data.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transmat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Add a className when an element is dragged over &lt;/span&gt;
      &lt;span class="c1"&gt;// your page.&lt;/span&gt;
      &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;drag-active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;// Add a className when an element is dragged over &lt;/span&gt;
      &lt;span class="c1"&gt;// the observed target.&lt;/span&gt;
      &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;drag-over&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isTarget&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Observe the target element.&lt;/span&gt;
&lt;span class="nx"&gt;obs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#theres-more"&gt;
  &lt;/a&gt;
  There's more!
&lt;/h1&gt;

&lt;p&gt;You should now know the basics of the &lt;a href="https://google.github.io/transmat"&gt;Transmat&lt;/a&gt; library. But there's more! The library offers utilities for interacting with JSON-LD for a connected web, and a minimalistic drag-image to integrate with your existing drag-drop implementation. &lt;/p&gt;

&lt;p&gt;Curious to hear what your ideas are with this &lt;em&gt;barrier breaking&lt;/em&gt; technique!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Star Wars Crawl Text Html Css</title>
      <author>ali-dev-hash</author>
      <pubDate>Thu, 08 Apr 2021 09:37:44 +0000</pubDate>
      <link>https://dev.to/alidevhash/star-wars-crawl-text-html-css-51hd</link>
      <guid>https://dev.to/alidevhash/star-wars-crawl-text-html-css-51hd</guid>
      <description>&lt;p&gt;Star Wars Crawl Text Html Css&lt;/p&gt;

&lt;p&gt;demo ==&amp;gt; &lt;a href="https://codepen.io/Bilal1909/pen/BapRYBz"&gt;https://codepen.io/Bilal1909/pen/BapRYBz&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Solution: Letter Combinations of a Phone Number</title>
      <author>seanpgallivan</author>
      <pubDate>Thu, 08 Apr 2021 09:13:54 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-letter-combinations-of-a-phone-number-1n91</link>
      <guid>https://dev.to/seanpgallivan/solution-letter-combinations-of-a-phone-number-1n91</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/discuss/1148310"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-17-medium-letter-combinations-of-a-phone-number"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/"&gt;Leetcode Problem #17 (&lt;em&gt;Medium&lt;/em&gt;): Letter Combinations of a Phone Number&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given a string containing digits from &lt;code&gt;2-9&lt;/code&gt; inclusive, return all possible letter combinations that the number could represent. Return the answer in &lt;strong&gt;any order&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A mapping of digit to letters (just like on the telephone buttons) is given below. Note that &lt;code&gt;1&lt;/code&gt; does not map to any letters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j0syFEqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j0syFEqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="Description Visual 1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;digits = "23"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;["ad","ae","af","bd","be","bf","cd","ce","cf"]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;digits = ""&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;digits = "2"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;["a","b","c"]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= digits.length &amp;lt;= 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;digits[i]&lt;/code&gt; is a digit in the range &lt;code&gt;['2', '9']&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Since each digit can possibly mean one of several characters, we'll need to create code that branches down the different paths as we iterate through the input digit string (&lt;strong&gt;D&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;This quite obviously calls for a &lt;strong&gt;depth-first search&lt;/strong&gt; (&lt;strong&gt;DFS&lt;/strong&gt;) approach as we will check each permutation of characters and store them in our answer array (&lt;strong&gt;ans&lt;/strong&gt;). For a DFS approach we can use one of several options, but a &lt;strong&gt;recursive&lt;/strong&gt; solution is generally the cleanest.&lt;/p&gt;

&lt;p&gt;But first, we'll need to set up a lookup table (&lt;strong&gt;L&lt;/strong&gt;) to convert a digit to its possible characters. Since the digits are actually low-indexed integers, we can actually choose between an &lt;strong&gt;array&lt;/strong&gt; or &lt;strong&gt;map&lt;/strong&gt;/&lt;strong&gt;dictionary&lt;/strong&gt; here with little difference.&lt;/p&gt;

&lt;p&gt;For our DFS function (&lt;strong&gt;dfs&lt;/strong&gt;), we'll have to feed it the current position (&lt;strong&gt;pos&lt;/strong&gt;) in &lt;strong&gt;D&lt;/strong&gt; as well as the string (&lt;strong&gt;str&lt;/strong&gt;) being built. The function will also need to have access to &lt;strong&gt;D&lt;/strong&gt;, &lt;strong&gt;L&lt;/strong&gt;, and &lt;strong&gt;ans&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The DFS function itself is fairly simple. It will push a completed &lt;strong&gt;str&lt;/strong&gt; onto &lt;strong&gt;ans&lt;/strong&gt;, otherwise it will look up the characters that match the current &lt;strong&gt;pos&lt;/strong&gt;, and then fire off new recursive functions down each of those paths.&lt;/p&gt;

&lt;p&gt;Once we're done, we should be ready to &lt;strong&gt;return ans&lt;/strong&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Javascript and Python will have scoped access to &lt;strong&gt;D&lt;/strong&gt;, &lt;strong&gt;L&lt;/strong&gt;, and &lt;strong&gt;ans&lt;/strong&gt; inside &lt;strong&gt;dfs&lt;/strong&gt;, so won't need to pass in references via arguments.&lt;/p&gt;

&lt;p&gt;Java should make sure to use a &lt;strong&gt;char[][]&lt;/strong&gt; and a &lt;strong&gt;StringBuilder&lt;/strong&gt; for better performance here.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;def&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ghi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jkl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mno&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pqrs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tuv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;9&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wxyz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;letterCombinations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;D&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;D&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bfs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;D&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;bfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;bfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'2'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"abc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"def"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'4'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"ghi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'5'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"jkl"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s"&gt;'6'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"mno"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'7'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"pqrs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'8'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"tuv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'9'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"wxyz"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;letterCombinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;lenD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;lenD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;bfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="no"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{{},{},{&lt;/span&gt;&lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'b'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'c'&lt;/span&gt;&lt;span class="o"&gt;},{&lt;/span&gt;&lt;span class="sc"&gt;'d'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'e'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'f'&lt;/span&gt;&lt;span class="o"&gt;},{&lt;/span&gt;&lt;span class="sc"&gt;'g'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'h'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'i'&lt;/span&gt;&lt;span class="o"&gt;},{&lt;/span&gt;&lt;span class="sc"&gt;'j'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'k'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'l'&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;'m'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'n'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'o'&lt;/span&gt;&lt;span class="o"&gt;},{&lt;/span&gt;&lt;span class="sc"&gt;'p'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'q'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'r'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'s'&lt;/span&gt;&lt;span class="o"&gt;},{&lt;/span&gt;&lt;span class="sc"&gt;'t'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'u'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'v'&lt;/span&gt;&lt;span class="o"&gt;},{&lt;/span&gt;&lt;span class="sc"&gt;'w'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'x'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'y'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'z'&lt;/span&gt;&lt;span class="o"&gt;}};&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;letterCombinations&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="no"&gt;D&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;D&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;bfs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;D&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bfs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="no"&gt;D&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;L&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Character&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNumericValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;D&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;))];&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
                &lt;span class="n"&gt;bfs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;D&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;unordered_map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt;&lt;span class="sc"&gt;'2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"abc"&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="sc"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"def"&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="sc"&gt;'4'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"ghi"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;'5'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"jkl"&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="sc"&gt;'6'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"mno"&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="sc"&gt;'7'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"pqrs"&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="sc"&gt;'8'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"tuv"&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="sc"&gt;'9'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"wxyz"&lt;/span&gt;&lt;span class="p"&gt;}});&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;letterCombinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;bfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;bfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;bfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>How to use ES6 import syntax in Node.js</title>
      <author>Aman Mittal</author>
      <pubDate>Thu, 08 Apr 2021 09:00:22 +0000</pubDate>
      <link>https://dev.to/amanhimself/how-to-use-es6-import-syntax-in-node-js-3df2</link>
      <guid>https://dev.to/amanhimself/how-to-use-es6-import-syntax-in-node-js-3df2</guid>
      <description>&lt;p&gt;A module is a JavaScript file that exports one or more values. The exported value can be a variable, an object, or a function.&lt;/p&gt;

&lt;p&gt;An ES6 import syntax allows importing modules exported from a different JavaScript file. It is a common pattern to use modules across React and React Native applications. The syntax is composed of the following ES module standard:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;XXX&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An ES module is the ECMAScript standard of working with modules. Node.js uses the CommonJS standard to import modules. The syntax for this type of standard can be described as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;XXX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Node js doesn‚Äôt support ES6 import directly. Try writing the &lt;code&gt;import&lt;/code&gt; syntax in a JS file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApolloServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apollo-server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the Node.js server either by using &lt;code&gt;npm start&lt;/code&gt; or &lt;code&gt;npm run dev&lt;/code&gt; and you will encounter the following error:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--twIp5sRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lbHW7pl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--twIp5sRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lbHW7pl.png" alt="ss1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The solution to this error is in the first line of the above error snippet and is now &lt;a href="https://nodejs.org/api/esm.html#esm_enabling"&gt;a recommend way by Node.js&lt;/a&gt;. Set the &lt;code&gt;"type": "module"&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"module"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This solution works for the latest Node.js versions (which is &lt;code&gt;15.4.x&lt;/code&gt; at the time of writing) and versions above &lt;code&gt;14.x.x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--umPhKVVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Mm92hul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--umPhKVVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Mm92hul.png" alt="ss2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-environments-using-node-version-lower-than-14"&gt;
  &lt;/a&gt;
  What about environments using Node version lower than 14
&lt;/h2&gt;

&lt;p&gt;Another solution to this problem is to use &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;. It's a JavaScript compiler and allows you to write JS using the latest syntax. Babel is not framework or platform opinionated. This means that it can be used in any project that is written in JavaScript and thus, in a Node.js project as well.&lt;/p&gt;

&lt;p&gt;Start by installing the following dev dependencies from a terminal window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; @babel/core @babel/preset-env @babel/node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a file at the root of the Node.js project called &lt;code&gt;babel.config.json&lt;/code&gt; and add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"presets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"@babel/preset-env"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The package &lt;code&gt;@babel/node&lt;/code&gt; is a CLI utility that compiles JS code in a Node.js project with Babel presets and plugins before running it. It means it will read and apply any configuration mention in &lt;code&gt;babel.config.json&lt;/code&gt; before executing the Node project.&lt;/p&gt;

&lt;p&gt;Replace the &lt;code&gt;node&lt;/code&gt; with &lt;code&gt;babel-node&lt;/code&gt; to execute the server in the &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;dev&lt;/code&gt; scripts.&lt;/p&gt;

&lt;p&gt;An example of running Node server using &lt;code&gt;npm run dev&lt;/code&gt; script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon --exec babel-node server.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/photos/Q_RBVFFXR_g"&gt;Jake Weirick&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>45 useful mobile apps that I use as a developer</title>
      <author>Andrew Baisden</author>
      <pubDate>Thu, 08 Apr 2021 08:56:45 +0000</pubDate>
      <link>https://dev.to/andrewbaisden/45-useful-mobile-apps-that-i-use-as-a-developer-2ko4</link>
      <guid>https://dev.to/andrewbaisden/45-useful-mobile-apps-that-i-use-as-a-developer-2ko4</guid>
      <description>&lt;p&gt;These days everyone owns a smartphone and we all have our preferences when it comes to operating system and the apps that we use. I currently have an Android phone. Here are 45 mobile apps which are installed on my phone that I find are useful for productivity and day to day work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ecommerce"&gt;
  &lt;/a&gt;
  E-commerce
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#amazon-shopping"&gt;
  &lt;/a&gt;
  Amazon Shopping
&lt;/h3&gt;

&lt;p&gt;For buying internal and external storage as well as other computer related stuff&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ebay"&gt;
  &lt;/a&gt;
  eBay
&lt;/h3&gt;

&lt;p&gt;For buying internal and external storage as well as other computer related stuff&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#food"&gt;
  &lt;/a&gt;
  Food
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#deliveroo"&gt;
  &lt;/a&gt;
  Deliveroo
&lt;/h3&gt;

&lt;p&gt;For buying lunch/dinner as we need energy to work&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dominos"&gt;
  &lt;/a&gt;
  Domino's
&lt;/h3&gt;

&lt;p&gt;For buying lunch/dinner as we need energy to work&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#just-eat"&gt;
  &lt;/a&gt;
  Just Eat
&lt;/h3&gt;

&lt;p&gt;For buying lunch/dinner as we need energy to work&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uber-eats"&gt;
  &lt;/a&gt;
  Uber Eats
&lt;/h3&gt;

&lt;p&gt;For buying lunch/dinner as we need energy to work&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloud-storage"&gt;
  &lt;/a&gt;
  Cloud Storage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#google-drive"&gt;
  &lt;/a&gt;
  Google Drive
&lt;/h3&gt;

&lt;p&gt;For storing media assets and documents online&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dropbox"&gt;
  &lt;/a&gt;
  Dropbox
&lt;/h3&gt;

&lt;p&gt;For storing media assets and documents online&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#onedrive"&gt;
  &lt;/a&gt;
  OneDrive
&lt;/h3&gt;

&lt;p&gt;For storing media assets and documents online&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mindfulnesshealth"&gt;
  &lt;/a&gt;
  Mindfulness/Health
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#calm"&gt;
  &lt;/a&gt;
  Calm
&lt;/h3&gt;

&lt;p&gt;For meditation and mindfulness &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#daylio"&gt;
  &lt;/a&gt;
  Daylio
&lt;/h3&gt;

&lt;p&gt;For tracking daily, monthly and yearly moods and habits&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#headspace"&gt;
  &lt;/a&gt;
  Headspace
&lt;/h3&gt;

&lt;p&gt;For meditation and mindfulness &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h3&gt;

&lt;p&gt;For getting daily motivational quotes and affirmations which push you forward&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nike-training"&gt;
  &lt;/a&gt;
  Nike Training
&lt;/h3&gt;

&lt;p&gt;For doing exercise&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#travel"&gt;
  &lt;/a&gt;
  Travel
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#citymapper"&gt;
  &lt;/a&gt;
  Citymapper
&lt;/h3&gt;

&lt;p&gt;For travelling to different locations&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google-maps"&gt;
  &lt;/a&gt;
  Google Maps
&lt;/h3&gt;

&lt;p&gt;For travelling to different locations&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#communication"&gt;
  &lt;/a&gt;
  Communication
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#discord"&gt;
  &lt;/a&gt;
  Discord
&lt;/h3&gt;

&lt;p&gt;For communicating in different developer groups&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#slack"&gt;
  &lt;/a&gt;
  Slack
&lt;/h3&gt;

&lt;p&gt;For communicating in different developer groups&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zoom"&gt;
  &lt;/a&gt;
  Zoom
&lt;/h3&gt;

&lt;p&gt;For communicating with different teams and interviews&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#productivity"&gt;
  &lt;/a&gt;
  Productivity
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#calculator"&gt;
  &lt;/a&gt;
  Calculator
&lt;/h3&gt;

&lt;p&gt;For doing calculations &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google-calendar"&gt;
  &lt;/a&gt;
  Google Calendar
&lt;/h3&gt;

&lt;p&gt;For managing events and meetings&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chrome"&gt;
  &lt;/a&gt;
  Chrome
&lt;/h3&gt;

&lt;p&gt;For searching and testing apps locally on a device&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google-docs"&gt;
  &lt;/a&gt;
  Google Docs
&lt;/h3&gt;

&lt;p&gt;For writing and managing online documents&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gmail"&gt;
  &lt;/a&gt;
  Gmail
&lt;/h3&gt;

&lt;p&gt;For communicating with people&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notion"&gt;
  &lt;/a&gt;
  Notion
&lt;/h3&gt;

&lt;p&gt;For overall project management &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dropbox-paper"&gt;
  &lt;/a&gt;
  Dropbox Paper
&lt;/h3&gt;

&lt;p&gt;For writing and managing online documents in markdown&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pocket"&gt;
  &lt;/a&gt;
  Pocket
&lt;/h3&gt;

&lt;p&gt;For managing website bookmarks&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google-sheets"&gt;
  &lt;/a&gt;
  Google Sheets
&lt;/h3&gt;

&lt;p&gt;For writing and managing online spreadsheets  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ticktick"&gt;
  &lt;/a&gt;
  TickTick
&lt;/h3&gt;

&lt;p&gt;For managing to do lists&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trello"&gt;
  &lt;/a&gt;
  Trello
&lt;/h3&gt;

&lt;p&gt;For managing projects and communicating with teams&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#entertainmentlearning"&gt;
  &lt;/a&gt;
  Entertainment/Learning
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#apple-music"&gt;
  &lt;/a&gt;
  Apple Music
&lt;/h3&gt;

&lt;p&gt;For listening to music while I work&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#audible"&gt;
  &lt;/a&gt;
  Audible
&lt;/h3&gt;

&lt;p&gt;For listening to books&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pocket-casts"&gt;
  &lt;/a&gt;
  Pocket Casts
&lt;/h3&gt;

&lt;p&gt;For listening to developer podcasts&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#spotify"&gt;
  &lt;/a&gt;
  Spotify
&lt;/h3&gt;

&lt;p&gt;For listening to music while I work&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  YouTube
&lt;/h3&gt;

&lt;p&gt;For watching developer related videos and entertainment&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-media"&gt;
  &lt;/a&gt;
  Social Media
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#instagram"&gt;
  &lt;/a&gt;
  Instagram
&lt;/h3&gt;

&lt;p&gt;For developer marketing and content management&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linkedin"&gt;
  &lt;/a&gt;
  Linkedin
&lt;/h3&gt;

&lt;p&gt;For looking for work and connecting with developers and recruiters&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reddit"&gt;
  &lt;/a&gt;
  Reddit
&lt;/h3&gt;

&lt;p&gt;For communicating with the developer community and finding resources and help&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#twitter"&gt;
  &lt;/a&gt;
  Twitter
&lt;/h3&gt;

&lt;p&gt;For communicating with the developer community and finding resources and help &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#authy"&gt;
  &lt;/a&gt;
  Authy
&lt;/h3&gt;

&lt;p&gt;For using two-factor authentication (2FA) to login to apps&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bitwarden"&gt;
  &lt;/a&gt;
  Bitwarden
&lt;/h3&gt;

&lt;p&gt;For managing the passwords to all of my accounts&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer"&gt;
  &lt;/a&gt;
  Developer
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dev-community"&gt;
  &lt;/a&gt;
  DEV Community
&lt;/h3&gt;

&lt;p&gt;For communicating with the developer community and finding resources and help &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#expo-go"&gt;
  &lt;/a&gt;
  Expo Go
&lt;/h3&gt;

&lt;p&gt;For testing React Native Apps&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  GitHub
&lt;/h3&gt;

&lt;p&gt;For looking for repos and managing my own repo&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#udemy"&gt;
  &lt;/a&gt;
  Udemy
&lt;/h3&gt;

&lt;p&gt;For finding and doing developer related courses&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;I really hope that you enjoyed reading this article and learned something from it. As a content creator and technical writer I am passionate about sharing my knowledge and helping other people reach their goals. Let's connect on &lt;a href="https://twitter.com/andrewbaisden"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/andrew-baisden/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://github.com/andrewbaisden"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also check out my website &lt;a href="https://andrewbaisden.com/"&gt;https://andrewbaisden.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will just leave you one last easter egg ü•ö. These are lyrics from a song lets see if you can find it üòâ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"If we'll be united&lt;br&gt;
We're stronger together&lt;br&gt;
We always have the high hope&lt;br&gt;
Not all for one but one for all"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Peace ‚úåÔ∏è&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>watercooler</category>
      <category>android</category>
      <category>ios</category>
    </item>
  </channel>
</rss>
