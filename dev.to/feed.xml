<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A huge list of web design tools</title>
      <author>Rezaul karim</author>
      <pubDate>Sat, 07 Aug 2021 09:59:46 +0000</pubDate>
      <link>https://dev.to/rezaulkarim/a-huge-list-of-web-design-tools-40ab</link>
      <guid>https://dev.to/rezaulkarim/a-huge-list-of-web-design-tools-40ab</guid>
      <description>&lt;p&gt;This is a very big list of Wen Design tools for designers. If you want improve your skills and be a productive designer, hope these resources help a lot. Maybe, some resources you known already and some you find here that you don't know before.&lt;/p&gt;

&lt;p&gt;We categorize all the resources as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Typography&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Infographics&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Colors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stock Photos&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stock Graphics&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Graphics/Pictures Editor&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Logo Design&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prototyping&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Collaboration&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inspiration&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-typography"&gt;
  &lt;/a&gt;
  1. Typography
&lt;/h2&gt;

&lt;p&gt;★ Google Fonts&lt;br&gt;
&lt;a href="https://fonts.google.com/"&gt;https://fonts.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find and use high quality fonts for your website.&lt;/p&gt;

&lt;p&gt;★ Fonts Ninja&lt;br&gt;
&lt;a href="https://www.fonts.ninja/"&gt;https://www.fonts.ninja/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Identify that cool font on the page you are browsing.&lt;/p&gt;

&lt;p&gt;★ FontStruct&lt;br&gt;
&lt;a href="https://fontstruct.com/"&gt;https://fontstruct.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FontStruct is a free, font-building tool. With FontStruct you can easily create fonts using geometrical shapes.&lt;/p&gt;

&lt;p&gt;★ Font Squirrel&lt;br&gt;
&lt;a href="https://www.fontsquirrel.com/"&gt;https://www.fontsquirrel.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take advantage of the best database of free fonts.&lt;/p&gt;

&lt;p&gt;★ 1001 Fonts&lt;br&gt;
&lt;a href="https://www.1001fonts.com/"&gt;https://www.1001fonts.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scan a huge library of fonts for personal or commercial use.&lt;/p&gt;

&lt;p&gt;★ What font is&lt;br&gt;
&lt;a href="https://www.whatfontis.com/"&gt;https://www.whatfontis.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using a catalogue of 790K+ fonts (commercial or free) and font finder AI, for every image uploaded It shows over 60 fonts. Upload your image and easily determine its font.&lt;/p&gt;

&lt;p&gt;★ Type Light&lt;br&gt;
&lt;a href="https://www.cr8software.net/typelight.html"&gt;https://www.cr8software.net/typelight.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;freeware, bare-bones font editor. With Type light you can design, edit and convert OpenType TrueType and PostScript fonts.&lt;/p&gt;

&lt;p&gt;★ Font Flame&lt;br&gt;
&lt;a href="https://besttoolsfor.webflow.io/tool/fontflame"&gt;https://besttoolsfor.webflow.io/tool/fontflame&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s the Tinder for font pairing. Easily see what fonts work together.Swipe to find the best match.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-infographics"&gt;
  &lt;/a&gt;
  2. Infographics:
&lt;/h2&gt;

&lt;p&gt;★ Canva&lt;br&gt;
&lt;a href="https://www.canva.com/"&gt;https://www.canva.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazingly simple design graphic software to create any content you need.&lt;/p&gt;

&lt;p&gt;★ Easelly&lt;br&gt;
&lt;a href="https://easel.ly/"&gt;https://easel.ly/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Easelly is a simple infographic maker that lets you visualize any kind of information.&lt;/p&gt;

&lt;p&gt;★ Infogram&lt;br&gt;
&lt;a href="https://infogram.com/"&gt;https://infogram.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create engaging infographics and reports in minutes. Infogram is an intuitive visualization tool that empowers people and teams to create beautiful content.&lt;/p&gt;

&lt;p&gt;★ Visage&lt;br&gt;
&lt;a href="https://visage.co"&gt;https://visage.co&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyone can create effective, on-brand graphics to engage audiences of any size.&lt;/p&gt;

&lt;p&gt;★ Vizualize me&lt;br&gt;
&lt;a href="https://vizualize.me"&gt;https://vizualize.me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your CV is boring? Turn it into an original infographics.&lt;/p&gt;

&lt;p&gt;★ Venngage&lt;br&gt;
&lt;a href="https://venngage.com/"&gt;https://venngage.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make hundreds of infographics, media, posts and reports with this simple tool.&lt;/p&gt;

&lt;p&gt;★ Draw.io – Diagrams.net&lt;br&gt;
&lt;a href="https://app.diagrams.net/"&gt;https://app.diagrams.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A complete flowchart maker suitable for both internal and external projects.&lt;/p&gt;

&lt;p&gt;★ Piktochart&lt;br&gt;
&lt;a href="https://piktochart.com"&gt;https://piktochart.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Improve your internal and external communication with Piktochart. Quickly turn any text- or data-heavy content into a visual story that your audience will love.&lt;/p&gt;

&lt;p&gt;★ Visme&lt;br&gt;
&lt;a href="https://visme.co"&gt;https://visme.co&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create visual brand experiences for your business whether you are a seasoned designer or a total novice.&lt;/p&gt;

&lt;p&gt;★ Gliffy&lt;br&gt;
&lt;a href="https://www.gliffy.com/"&gt;https://www.gliffy.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gliffy’s diagramming software was built by a pair of engineers who wanted all the ease of drawing diagrams on a whiteboard packed into one powerful, enterprise-grade diagram tool.&lt;/p&gt;

&lt;p&gt;Recommended:  &lt;a href="https://mrezaulkarim.com/free-resources-to-learn-front-end-development/"&gt;Free Resources to Learn Front End Development&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-graphicspicture-editor"&gt;
  &lt;/a&gt;
  3. Graphics/Picture editor:
&lt;/h2&gt;

&lt;p&gt;★ Illustrator&lt;br&gt;
&lt;a href="https://www.adobe.com/products/illustrator.html"&gt;https://www.adobe.com/products/illustrator.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the best web design tools. Build amazing vector arts with this must have tool.&lt;/p&gt;

&lt;p&gt;★ Photoshop&lt;br&gt;
&lt;a href="https://www.photoshop.com/en"&gt;https://www.photoshop.com/en&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another most used web design tools. Create and enhance your photoshops, webdesigns and even your 3D Artworks.&lt;/p&gt;

&lt;p&gt;★ Daz Studio&lt;br&gt;
&lt;a href="https://www.daz3d.com/"&gt;https://www.daz3d.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make incredibly realstick humans and animals in 3D.&lt;/p&gt;

&lt;p&gt;★ DrawPlus&lt;br&gt;
&lt;a href="https://download.cnet.com/Serif-DrawPlus-Starter-Edition/3000-2191_4-75547730.html"&gt;https://download.cnet.com/Serif-DrawPlus-Starter-Edition/3000-2191_4-75547730.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Draw handsome vector arts at a reasonable price&lt;/p&gt;

&lt;p&gt;★ Pixlr&lt;br&gt;
&lt;a href="https://pixlr.com/"&gt;https://pixlr.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pixlr the Online Photo Editor that lets you edit photos and create great designs right in your browser for Free.&lt;/p&gt;

&lt;p&gt;★ Inkspace&lt;br&gt;
&lt;a href="https://inkscape.org/"&gt;https://inkscape.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The open source alternative of Illustrator.&lt;/p&gt;

&lt;p&gt;★ Aviary&lt;br&gt;
&lt;a href="https://aviary.en.uptodown.com/android"&gt;https://aviary.en.uptodown.com/android&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Edit your photo from a mobile app or web app.&lt;/p&gt;

&lt;p&gt;★ Blender&lt;br&gt;
&lt;a href="https://blender.org"&gt;https://blender.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open source and entirely free 3D creation software.&lt;/p&gt;

&lt;p&gt;★ GIMP&lt;br&gt;
&lt;a href="https://www.gimp.org/"&gt;https://www.gimp.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GIMP is a cross-platform image editor available for GNU/Linux, OS X, Windows and more operating systems. It is free software, you can change its source code and distribute your changes.&lt;/p&gt;

&lt;p&gt;★ Affinity Photo&lt;br&gt;
&lt;a href="https://affinity.serif.com/en-gb/photo/"&gt;https://affinity.serif.com/en-gb/photo/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Professional Photo editing software for Mac Only&lt;/p&gt;

&lt;p&gt;Recommended:  &lt;a href="https://mrezaulkarim.com/psd-to-html-with-source-code-free/"&gt;Download Free PSD to HTML With Source Code&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;For full articles in more organized way on my blog please &lt;a href="https://mrezaulkarim.com/useful-web-design-tools-for-designers/"&gt;Continue Reading&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more exciting tips and tricks about programming and coding please read our  &lt;a href="https://mrezaulkarim.com/blog/"&gt;others articles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find My page on Instagram:  &lt;a href="https://instagram.com/stack.content"&gt;@stack.content&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find Me on Twitter:   &lt;a href="https://twitter.com/rezaulkarim014"&gt;@rezaulkarim014&lt;/a&gt; &lt;/p&gt;

</description>
      <category>design</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Testing post4</title>
      <author>Rodchananat</author>
      <pubDate>Sat, 07 Aug 2021 09:52:39 +0000</pubDate>
      <link>https://dev.to/rod41732/testing-post4-4bfk</link>
      <guid>https://dev.to/rod41732/testing-post4-4bfk</guid>
      <description>&lt;p&gt;just testing devto's API&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Another testing</title>
      <author>roadtest</author>
      <pubDate>Sat, 07 Aug 2021 09:48:28 +0000</pubDate>
      <link>https://dev.to/roadtest5/another-testing-3hkm</link>
      <guid>https://dev.to/roadtest5/another-testing-3hkm</guid>
      <description>&lt;p&gt;Foo bar baz Kappa&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 Magical JavaScript Tips for Every Web Developer</title>
      <author>Hhfty</author>
      <pubDate>Sat, 07 Aug 2021 09:41:31 +0000</pubDate>
      <link>https://dev.to/hhfty/10-magical-javascript-tips-for-every-web-developer-2h48</link>
      <guid>https://dev.to/hhfty/10-magical-javascript-tips-for-every-web-developer-2h48</guid>
      <description>&lt;p id="f6cc"&gt;In this article, we will discuss the 15 useful JavaScript tips for every web developer to save their valuable and precious time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p id="e1bb"&gt;I am always ready to learn although I do not always like being taught&lt;/p&gt;

&lt;p id="0fe5"&gt;— Winston Churchill&lt;/p&gt;


&lt;/blockquote&gt;
&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;h1 id="fa85"&gt;Tip 1. Flatten the array of the array&lt;/h1&gt;
&lt;p id="4e31"&gt;This tip will help you to flatten a deeply nested array of arrays by using &lt;code&gt;Infinity&lt;/code&gt; in &lt;code&gt;flat&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;span id="e3aa"&gt;var array = [123, 500, [1, 2, [34, 56, 67, [234, 1245], 900]], 845, [30257]]&lt;/span&gt;&lt;span id="16da"&gt;//flatten array of array&lt;br&gt;array.flat(Infinity)&lt;/span&gt;&lt;span id="b0d8"&gt;// output:&lt;br&gt;// [123, 500, 1, 2, 34, 56, 67, 234, 1245, 900, 845, 30257]&lt;/span&gt;&lt;/pre&gt;
&lt;h1 id="902c"&gt;Tip 2. Easy Exchange Variables&lt;/h1&gt;
&lt;p id="ebf9"&gt;You probably swap the two variables using a third variable &lt;code&gt;temp&lt;/code&gt;. But this tip will show you a new way to exchange variables using destructuring.&lt;/p&gt;
&lt;pre&gt;&lt;span id="298c"&gt;//example 1&lt;/span&gt;&lt;span id="3316"&gt;var a = 6;&lt;br&gt;var b = 7;&lt;/span&gt;&lt;span id="b133"&gt;[a,b] = [b,a]&lt;/span&gt;&lt;span id="aa36"&gt;console.log(a,b) // 7 6&lt;/span&gt;&lt;/pre&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/magical-javascript-tips-for-every-web-developer/"&gt;10 Magical JavaScript Tips for Every Web Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>This is just testing</title>
      <author>roadtest</author>
      <pubDate>Sat, 07 Aug 2021 09:33:25 +0000</pubDate>
      <link>https://dev.to/roadtest5/this-is-just-testing-3kn5</link>
      <guid>https://dev.to/roadtest5/this-is-just-testing-3kn5</guid>
      <description>&lt;p&gt;plz ignore this sorry&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Right Mindset To Solve Complex Problems</title>
      <author>Tomer Raitz</author>
      <pubDate>Sat, 07 Aug 2021 09:20:55 +0000</pubDate>
      <link>https://dev.to/tomeraitz/the-right-mindset-to-solve-complex-problems-1gc6</link>
      <guid>https://dev.to/tomeraitz/the-right-mindset-to-solve-complex-problems-1gc6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1uJEDrhL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja49uc0ecyg32oolcusx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1uJEDrhL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja49uc0ecyg32oolcusx.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Hi all, I know that all of my articles are very technical. This time I will talk about something a little bit different, more abstract - the mindset of a developer when assigned to a new task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-to-notice-our-mindset-when-assigned-a-new-task"&gt;
  &lt;/a&gt;
  Why do we need to notice our mindset when assigned a new task?
&lt;/h2&gt;

&lt;p&gt;Lately, I have tried to be more self-aware of myself and my surrounding. I notice something significant when I'm dealing with a complex coding problem &lt;strong&gt;it always starts with "oh shit, it's too hard," and if this feeling stays with me, it impacts the quality and the amount of time that I spend on this task.&lt;/strong&gt; So, I believe to be a better developer We need to notice our attitude to the task we are currently working on. &lt;strong&gt;I think the right mindset is to be fully confident that you can succeed in finishing the task.&lt;/strong&gt; (Many people will say you can't always succeed in developing exactly what you wanted in the beginning, they are mostly correct, but you can always try to :)... I will talk about it in the "Importance of critical thinking with the right mindset" section).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-steps-to-change-your-mindset"&gt;
  &lt;/a&gt;
  The steps to change your mindset
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1-be-aware-of-your-attitude-when-working-on-something-new"&gt;
  &lt;/a&gt;
  Step 1: be aware of your attitude when working on something new
&lt;/h3&gt;

&lt;p&gt;Try to follow your mood when you are working on something new. In my opinion, it doesn't matter how you follow it (write your thoughts in a diary or try to remember when you think about it), the important thing is to develop an awareness of this subject.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-find-your-weaknesses-and-your-strengths"&gt;
  &lt;/a&gt;
  Step 2: Find your weaknesses and your strengths.
&lt;/h3&gt;

&lt;p&gt;For example, I know that one of my weaknesses is trying many things myself without asking for help. This mindset can cause a waste of time (even though I know I can finish it by myself) - &lt;strong&gt;I can waste a few hours instead of someone helps me&lt;/strong&gt;, and it can be done in a half-hour. If you think about it, in this situation I  can save the company I work for, a lot of money (my half-hour + my co-worker half-hour &amp;lt; few hours of my time). But on the other side of this example, it's one of my strengths - &lt;strong&gt;I will never quit on something I need to do.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-choose-one-weakness-you-found-from-the-last-step-and-work-on-it"&gt;
  &lt;/a&gt;
  Step 3: Choose one weakness you found from the last step and work on it.
&lt;/h3&gt;

&lt;p&gt;If we take my previous example for the explanation - my plan is not always to ask for help (because it can cause the opposite of what I try to achieve). I need to see when I spend too much time on something and need to think about the cost of someone else who will help me. If I know the cost is worth it, I need to ask for help. &lt;strong&gt;But, more importantly, remember your strengths and make them your primary mindset.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-confident-you-can-do-the-task-you-got"&gt;
  &lt;/a&gt;
  Be confident you can do the task you got
&lt;/h2&gt;

&lt;p&gt;In my opinion, this is one of the most important mindsets when you solve a challenging task. Why? &lt;strong&gt;without it, you are mentally weak&lt;/strong&gt;, when you don't believe in yourself, the task you received seems too hard. &lt;strong&gt;But, if you do believe in yourself, you will do anything to complete the task.&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-of-the-right-mindset"&gt;
  &lt;/a&gt;
  Example of the right mindset
&lt;/h3&gt;

&lt;p&gt;Let me give you an example from one of my last private projects - a game called "Gold Rush." The main goal of this game is to collect more coins than your opponent. There are two options - single-player and multiplayer. I will talk only about the single-player option. The user plays vs. the computer in the single-player option. The computer will collect the coins and pass obstacles, &lt;strong&gt;so I needed to implement a path-finding algorithm.&lt;/strong&gt; At that time, it didn't sound to me that hard, so I decided to write the code myself. My design was very simple - matrix with two-player (0,0 and n-1,n-1) and random obstacles (there are obstacles in the game that the players need to pass). The main goal was - when the computer player moves, he will search for the coin, obstacle, or player 1. &lt;strong&gt;This design failed completely&lt;/strong&gt; for a lot of reasons, but the main was - when he detected an obstacle or player 1 - he tried to do random index generation from the indexes in the matrix near to him (search up, down, right, or left - only four random options in this case). What happened was he repeated the same moves again and again, and the game seems stuck. &lt;strong&gt;I must admit, at that point, I felt like a loser, But I told myself I am not giving up yet...&lt;/strong&gt; I searched for a solution on the internet, and I found this article: &lt;a href="https://briangrinstead.com/blog/astar-search-algorithm-in-javascript/"&gt;A* Search Algorithm in JavaScript (briangrinstead.com/blog)&lt;/a&gt;. &lt;strong&gt;Even though it was written very clearly, I didn't succeed to implement it in my code.&lt;/strong&gt; Honestly, I felt like shit, it's been a week, and I didn't do anything. &lt;strong&gt;But, I knew I am getting very close&lt;/strong&gt;. Eventually, I found this npm package - &lt;a href="https://www.npmjs.com/package/pathfinding"&gt;pathfinding&lt;/a&gt; and succeeded in ending this task (after a week and a half). If you want to play the game here is the link : &lt;a href="https://gold-rush.netlify.app/"&gt;Gold Rush Game&lt;/a&gt; and here is the code I talk about (the backend): &lt;a href="https://github.com/tomeraitz/gold-rush-server"&gt;Gold Rush - backend&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#importance-of-critical-thinking-with-the-right-mindset"&gt;
  &lt;/a&gt;
  Importance of critical thinking with the right mindset
&lt;/h3&gt;

&lt;p&gt;I believe that you understand the importance of the right mindset after this example. But, &lt;strong&gt;I think the important in all attitudes is to remember that your approach will impact other things.&lt;/strong&gt; for example, if you take the mindset I talked about, you can mistakenly think you can finish the task in no time, &lt;strong&gt;and this why is important to have critical thinking with the right mindset&lt;/strong&gt;. Let's take, for example, the following scenario: you received a task to build a new service that no one in your company ever developed before. &lt;strong&gt;The mindset in this scenario should be "I can do it, and I will do anything to complete the task," but don't be arrogant, don't say you will complete the task in a few hours or a short time.&lt;/strong&gt; Be honest with yourself and think how long it would take to do it.&lt;/p&gt;

&lt;p&gt;Thank you for reading. I really would appreciate it if you comment your opinion about this subject because this is a new subject I explore and will be happy to learn more from others.&lt;/p&gt;

</description>
      <category>career</category>
      <category>discuss</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>GitHub awesome-sources</title>
      <author>UlugbekMuslitdinov</author>
      <pubDate>Sat, 07 Aug 2021 09:18:46 +0000</pubDate>
      <link>https://dev.to/ulugbekmuslitdinov/github-awesome-sources-1i30</link>
      <guid>https://dev.to/ulugbekmuslitdinov/github-awesome-sources-1i30</guid>
      <description>&lt;p&gt;Hi everyone. &lt;br&gt;
This is my GitHub repository project: &lt;a href="https://github.com/UlugbekMuslitdinov/awesome-sources"&gt;awesome-sources&lt;/a&gt;&lt;br&gt;
I am self-taught programmer and I know how it is difficult to find free books in the Internet or what to read to learn particular programming language. So I decided to make an open-source project where everyone can upload book they'd suggest other programmers and others can download and read them.&lt;br&gt;
For now there are more than 1GB of books on different programming languages and tools(e.g. Docker or Kubertenes) and this number is increasing day by day. Except books, there are bunch of useful resources, such as websites and other github repositories that are related to the programming.&lt;br&gt;
This project is advancing and I am ready to receive your suggestions and criticism in order to make this project more advanced. Moreover, I want you to make some contribution to this repository and enrich this library of programming books and different sources.&lt;/p&gt;

</description>
      <category>github</category>
      <category>opensource</category>
      <category>books</category>
      <category>programming</category>
    </item>
    <item>
      <title>Hacky: *Fun*ctional component-based UI library</title>
      <author>Aiden Bai</author>
      <pubDate>Sat, 07 Aug 2021 08:58:21 +0000</pubDate>
      <link>https://dev.to/aidenybai/hacky-fun-ctional-component-based-ui-library-2m5d</link>
      <guid>https://dev.to/aidenybai/hacky-fun-ctional-component-based-ui-library-2m5d</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;You can find the &lt;a href="https://github.com/aidenybai/hacky"&gt;GitHub&lt;/a&gt; here: &lt;a href="https://github.com/aidenybai/hacky"&gt;https://github.com/aidenybai/hacky&lt;/a&gt;. This was mostly a learning project, but some people could find this useful.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#hacky"&gt;
  &lt;/a&gt;
  🔧 Hacky
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#functional-componentbased-ui-library"&gt;
  &lt;/a&gt;
  *Fun*ctional component-based UI library
&lt;/h3&gt;

&lt;p&gt;Writing React for applications is alright. Sure, it probably works for most use cases and the DX is great! But some of the time, you just want to &lt;del&gt;limit your potential&lt;/del&gt; build a super simple application with basic state and components—That's what Hacky is for!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Plug: Hacky is built on &lt;a href="https://github.com/aidenybai/million"&gt;Million&lt;/a&gt;, a &amp;lt;1kb compiler-focused virtual DOM. It's fast!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#installing-hacky"&gt;
  &lt;/a&gt;
  Installing Hacky
&lt;/h2&gt;

&lt;p&gt;It is highly recommended you use a build tool, such as Vite (you can see &lt;a href="https://github.com/aidenybai/hacky/blob/master/vite.config.js"&gt;how we configured our settings&lt;/a&gt; under the &lt;code&gt;esbuild&lt;/code&gt; field). You can use NPM to directly install.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install hacky
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#clicker-game-example"&gt;
  &lt;/a&gt;
  Clicker Game Example
&lt;/h2&gt;

&lt;p&gt;Below is an extremely simple implementation of a Clicker Game example using Hacky.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hacky&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// HTML is just &amp;lt;div id="app"&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#acknowledgments"&gt;
  &lt;/a&gt;
  Acknowledgments
&lt;/h2&gt;

&lt;p&gt;Hacky takes heavy inspiration from &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;, and believes in the core philosophies and values behind &lt;a href="https://million.js.org"&gt;Million&lt;/a&gt;. Feel free to check them out if you interested in an alternative library to use.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why is it called "Hacky"? The name originated from a quote from &lt;a href="https://twitter.com/HeyArav"&gt;@HeyArav&lt;/a&gt;: "&lt;del&gt;Hack Club Framework when&lt;/del&gt;"&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;Million is &lt;a href="https://github.com/aidenybai/hacky/blob/master/LICENSE"&gt;MIT-licensed&lt;/a&gt; open-source software by &lt;a href="https://github.com/aidenybai"&gt;Aiden Bai&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Basics of Functions in JS</title>
      <author>Sankalp Swami</author>
      <pubDate>Sat, 07 Aug 2021 08:08:46 +0000</pubDate>
      <link>https://dev.to/swamisankalp/basics-of-functions-in-js-473p</link>
      <guid>https://dev.to/swamisankalp/basics-of-functions-in-js-473p</guid>
      <description>&lt;p&gt;Here we will be going through the very basics of javascript. &lt;br&gt;
functions are one of the core fundamental building blocks in javascript.&lt;br&gt;
Functions are like programs in your programs.It is a block of code designed to perform a particular task. Javascript function can be executed when you invoke or call it any time you want same as Hermione gives a wave to her wand anytime she wants&lt;br&gt;
&lt;a href="https://i.giphy.com/media/RyLtUMBdogHvO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/RyLtUMBdogHvO/giphy.gif" alt="hermione"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  &lt;em&gt;&lt;strong&gt;SYNTAX&lt;/strong&gt;&lt;/em&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;wingardiumLeviosa&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameter1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parameter2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code to be executed&lt;/span&gt;
  &lt;span class="c1"&gt;// make objects fly&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;wingardiumLeviosa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;argument1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;argument2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;JS Function is defined with &lt;code&gt;function&lt;/code&gt; keyword followed by its name and parantheses &lt;code&gt;()&lt;/code&gt;. Parantheses may contain parameters. Inside the curly braces, the code to be executed is placed. The function is executed by invoking by its name with parantheses and arguments if any.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parameters - Parameters are nothing but named variables passed into a function.&lt;/li&gt;
&lt;li&gt;Arguments - The arguments are the values passed into a function.&lt;/li&gt;
&lt;li&gt;Code - Code to be executed in the function placed inside the curly braces.&lt;/li&gt;
&lt;li&gt;Return - Return statement ends the function and returns control to the calling function.It returns value to the calling function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets write a function &lt;code&gt;greetFullName&lt;/code&gt; which takes &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; as arguments and returns full name of a person.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#invoking-or-calling-a-function"&gt;
  &lt;/a&gt;
  Invoking or Calling a Function
&lt;/h2&gt;

&lt;p&gt;You cannot execute a function by just defining it. For executing a function you need to invoke (call) a function.&lt;br&gt;
You can call a function by just its name with parantheses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The return value is stored in the calling function.&lt;br&gt;
You can log the value to the console by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sankalp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Swami&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will print: Sankalp Swami&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some examples -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Harry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Potter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hermione&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Granger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ronald&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Weasley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lord&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Voldemort&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will print: Harry Potter&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will print: Hermione Granger&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will print: Ronald Weasley&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will print: You know who // just kidding&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#argument-defaults"&gt;
  &lt;/a&gt;
  Argument Defaults
&lt;/h2&gt;

&lt;p&gt;When you have declared an parameter but nothing is passed as an argument you can set an parameter to default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example if one of the argument is not passed, it gets default value of &lt;code&gt;-&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dobby&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will print: Dobby -&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#function-scope"&gt;
  &lt;/a&gt;
  Function Scope
&lt;/h2&gt;

&lt;p&gt;Functions create a new local scope. This contains variables defined in the function body as well as the arguments passed in the functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError: result is not defined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here function &lt;code&gt;add&lt;/code&gt; is defined at Global scope but variable &lt;code&gt;num1&lt;/code&gt; is passed as an argument inside the &lt;code&gt;add&lt;/code&gt; function so, it is not accesible outside the function.&lt;/p&gt;

&lt;p&gt;Once a function is defined, it can be used over and over and over again. You can invoke the same function many times in your program, which saves lot of your work.&lt;br&gt;
Thanks for reading, keep learning, Peace and Bubbyyee&lt;br&gt;
&lt;a href="https://i.giphy.com/media/2gGEWrIGVioP6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2gGEWrIGVioP6/giphy.gif" alt="Bubbyee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Javascript call by value or by reference, actually by sharing</title>
      <author>Adrian Matei </author>
      <pubDate>Sat, 07 Aug 2021 07:28:36 +0000</pubDate>
      <link>https://dev.to/codepedia/javascript-call-by-value-reference-actually-by-sharing-4ege</link>
      <guid>https://dev.to/codepedia/javascript-call-by-value-reference-actually-by-sharing-4ege</guid>
      <description>&lt;p&gt;Still confused about how passing variables in Javascript functions works? So was I, until recently. It took me some effort to understand, and I'd like to share my understanding with an example.&lt;/p&gt;

&lt;p&gt;First try guessing the outcome of the following javascript snippet&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#input"&gt;
  &lt;/a&gt;
  Input
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1983&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Adrian&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;obj1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;obj2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numberParam&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stringParam&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj1Param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj2Param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj4Param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;START logs in function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;numberParam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numberParam&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;stringParam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ionut&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numberParam - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numberParam&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stringParam - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stringParam&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;obj1Param.value in function before obj1Param = obj2Param assignment - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj1Param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;obj1Param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj2Param&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;obj1Param.value in function after obj1Param = obj2Param assignment - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj1Param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;obj2Param.value in function before obj2Param.value change - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj2Param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;obj2Param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;changed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// obj1Param.value = 'changed'; would yield the same result&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;obj1Param.value in function after obj2Param.value change - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj1Param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;obj2Param.value in function after obj2Param.value change - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj2Param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//obj4Param = ['b'];&lt;/span&gt;
    &lt;span class="nx"&gt;obj4Param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;obj4Parma - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj4Param&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;END logs in function &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number final - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string final - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;obj1.value final - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;obj2.value final - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;obj3.value final - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;obj4 final - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Before you read the output I suggest you read the explanation of &lt;a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing"&gt;Call by sharing&lt;/a&gt; on Wikipedia, which is the best explanation on the topic I found.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;START&lt;/span&gt; &lt;span class="nx"&gt;logs&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;
&lt;span class="nx"&gt;numberParam&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="mi"&gt;19830&lt;/span&gt;
&lt;span class="nx"&gt;stringParam&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nx"&gt;Ionut&lt;/span&gt;
&lt;span class="nx"&gt;obj1Param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="nx"&gt;obj1Param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj2Param&lt;/span&gt; &lt;span class="nx"&gt;assignment&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nx"&gt;obj1&lt;/span&gt;
&lt;span class="nx"&gt;obj1Param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="nx"&gt;obj1Param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj2Param&lt;/span&gt; &lt;span class="nx"&gt;assignment&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nx"&gt;obj2&lt;/span&gt;
&lt;span class="nx"&gt;obj2Param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="nx"&gt;obj2Param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nx"&gt;obj2&lt;/span&gt;
&lt;span class="nx"&gt;obj1Param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="nx"&gt;obj2Param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nx"&gt;changed&lt;/span&gt;
&lt;span class="nx"&gt;obj2Param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="nx"&gt;obj2Param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nx"&gt;changed&lt;/span&gt;
&lt;span class="nx"&gt;obj4Parma&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;END&lt;/span&gt; &lt;span class="nx"&gt;logs&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;

&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;final&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="mi"&gt;1983&lt;/span&gt;
&lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="nx"&gt;final&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nx"&gt;Adrian&lt;/span&gt;
&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="nx"&gt;final&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nx"&gt;obj1&lt;/span&gt;
&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="nx"&gt;final&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nx"&gt;changed&lt;/span&gt;
&lt;span class="nx"&gt;obj3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="nx"&gt;final&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nx"&gt;changed&lt;/span&gt;
&lt;span class="nx"&gt;obj4&lt;/span&gt; &lt;span class="nx"&gt;final&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, so what's going on?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;number&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; primitives are "boxed"&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;
in &lt;code&gt;Number&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt; objects&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt; before passing. &lt;strong&gt;Boxed objects are always a copy of the value object&lt;/strong&gt;, hence new objects (Number and String) are created in memory with the same primitive values. In the function execution (scope) they get "unboxed", their value is changed and placed in the new memory space, but once the function is over the new space in memory is cleared, with the original remaining unaffected.&lt;/li&gt;
&lt;li&gt;a copy reference to &lt;code&gt;obj1&lt;/code&gt; and &lt;code&gt;obj2&lt;/code&gt; is passed to the function, pointing to the same address of the "original" objects in memory (&lt;strong&gt;call by sharing&lt;/strong&gt;)&lt;sup id="fnref3"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt;. With the &lt;code&gt;obj1Param = obj2Param&lt;/code&gt; assignment in the function, both &lt;code&gt;obj1Param&lt;/code&gt; and &lt;code&gt;obj2Param&lt;/code&gt; to the original &lt;code&gt;obj2&lt;/code&gt; object in memory, so when changing its property &lt;code&gt;obj2Param.value = 'changed'&lt;/code&gt; it will also be visible outside of the function scope, after it is terminated. &lt;code&gt;obj1Param.value = 'changed'&lt;/code&gt; would have had the same effect after the assignment.&lt;/li&gt;
&lt;li&gt;what about &lt;code&gt;obj4&lt;/code&gt;? &lt;code&gt;obj4param&lt;/code&gt; is also a copy reference to the &lt;code&gt;obj4&lt;/code&gt; object (remember in Javascript arrays are objects),
but with the &lt;code&gt;obj4Param = ['b']&lt;/code&gt; assignment it's pointing now to a newly created object (the &lt;code&gt;['b']&lt;/code&gt; array object), which is visible only in the function's scope and is destroyed when the function is over. Thus, it has no effect on the original object. On the other hand, a statement like &lt;code&gt;obj4param.push('b')&lt;/code&gt; would have changed the original array and would display a &lt;code&gt; ["a", "b"]&lt;/code&gt; value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  Shared with love from &lt;a href="https://www.codever.land/snippets/610d3e31f52006531138d835/details"&gt;Codever&lt;/a&gt;.
  Use the &lt;a href="https://www.codever.land/snippets/610d3e31f52006531138d835/details"&gt; Copy to mine&lt;/a&gt; functionality to copy this snippet to your own personal collection and easy manage your code snippets.
&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Object_type_(object-oriented_programming)#Boxing"&gt;https://en.wikipedia.org/wiki/Object_type_(object-oriented_programming)#Boxing&lt;/a&gt; &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&lt;/a&gt; &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharinghttps://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing"&gt;https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharinghttps://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing&lt;/a&gt; &lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>snippets</category>
      <category>codever</category>
    </item>
    <item>
      <title>End-to-End Testing: What, Why and How?
</title>
      <author>DEEPIKA K</author>
      <pubDate>Sat, 07 Aug 2021 06:52:02 +0000</pubDate>
      <link>https://dev.to/deepika83008768/end-to-end-testing-what-why-and-how-3pfj</link>
      <guid>https://dev.to/deepika83008768/end-to-end-testing-what-why-and-how-3pfj</guid>
      <description>&lt;p&gt;Considering the present scenario, software applications are built on various layers of code, subsystem networks, and third-party integrations. The whole system has become so complex, that even if one component fails, the entire product crashes. &lt;/p&gt;

&lt;p&gt;Hence, the importance of the stability of each component in the application system is vital for the success of the overall product. That’s where end-to-end testing comes into play.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-endtoend-testing"&gt;
  &lt;/a&gt;
  What is End-to-End Testing?
&lt;/h2&gt;

&lt;p&gt;End-to-end testing is a methodology which is used to verify that the functionality and performance of an application flow match the expectations from start to end. &lt;/p&gt;

&lt;p&gt;Generally, end-to-end testing is executed after performing functional and system testing. The main objective of carrying out end-to-end testing is to make sure that correct information is being passed between various systems, components, networks, interfaces, and databases.&lt;/p&gt;

&lt;p&gt;And that the integrated components in an application function as per the expectations. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#different-endtoend-testing-methods"&gt;
  &lt;/a&gt;
  Different End-to-End Testing Methods
&lt;/h2&gt;

&lt;p&gt;End-to-end testing is performed in two ways which includes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Horizontal End-to-End Testing:&lt;/strong&gt; It works from the user’s perspective. It goes through an application’s business login from start to end. It is performed once changes to systems or subsystems are complete.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Vertical End-to-End Testing:&lt;/strong&gt; This type of testing tests an application’s architecture in layers or in other words - the tests happen sequentially from top to bottom. Under this, each subsystem  or component is tested independently from start to finish. &lt;/p&gt;

&lt;p&gt;Vertical end-to-end testing helps achieve higher test coverage as each component is tested with a special focus. If there is a layer that does not have a user interface, then vertical testing is the recommended testing for it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w3PNkaSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rslksbd8fblpmp746c4f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w3PNkaSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rslksbd8fblpmp746c4f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PC:&lt;a href="https://stackoverflow.com/questions/19378183/difference-between-system-testing-and-end-to-end-testing"&gt;https://stackoverflow.com/questions/19378183/difference-between-system-testing-and-end-to-end-testing&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-endtoend-testing"&gt;
  &lt;/a&gt;
  Benefits of End-to-End Testing
&lt;/h2&gt;

&lt;p&gt;Here are some of the benefits of end-to-end testing:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Expands Test Coverage:&lt;/strong&gt; End-to-end testing helps achieve increased test coverage which mitigates risk and ensures a quality software release.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Validates Software Functions:&lt;/strong&gt; End-to-end testing validates all the given software functions at every level on multiple systems and ensures that the end user experience is working as per the expectations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Enhances Application Productivity:&lt;/strong&gt; End-to-end testing ensures that all components communicate in expected ways with each other. This way, all bugs that could hinder a user are detected and corrected faster. Thus, helping increase application productivity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Reduces Effort and Costs Significantly:&lt;/strong&gt; When done regularly and before the release, end-to-end testing helps catch bugs earlier, before the change is deployed in production. Thus, saving time and cost of fixing those bugs in production.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Ensures Interaction Accuracy:&lt;/strong&gt; As end-to-end testing also involves front-end testing, it ensures that the application behaves as expected with a consistent user experience across multiple platforms, devices and environments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Reusability of the Test Cases:&lt;/strong&gt; End-to-end testing can be used to execute tests that are repeatable during the different processes of an application’s development cycle. Thus, end-to-end are reusable test cases too, usually.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Easy to Locate Errors in Distributed Environment:&lt;/strong&gt; End-to-end testing allows testing an application on cloud environments easily too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Reduces Future Risks:&lt;/strong&gt; As an application is tested thoroughly after every iteration and sprint in end-to-end testing, the chances of failure and future risks gets diminished.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Build Confidence in the Application:&lt;/strong&gt; End-to-end testing increases confidence in the functioning and performance of the application as the application goes through a comprehensive testing of the user flows at different points across different platforms and devices before its release.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-endtoend-test-cases"&gt;
  &lt;/a&gt;
  How to Create End-to-End Test Cases?
&lt;/h2&gt;

&lt;p&gt;End-to-end test cases can be classified in three parts:&lt;/p&gt;

&lt;p&gt;End-to-end testing involves testing the user flows from start to end. &lt;/p&gt;

&lt;p&gt;Thus test cases can be created by following below steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go through all the business requirement specifications&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go through all acceptance criterias&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Based on steps 1 and 2, construct all end-to-end user flows/journeys and mark them as test cases&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;From the test cases created in step 3, also see what would happen if the user did something unexpected - like entering wrong data, clicking on something by mistake etc and create all edge scenarios&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;5.Figure out what test cases might need different types of data for testing and arrange that&lt;/p&gt;

&lt;p&gt;6.Figure out what all environments - devices and browsers would be needed for test execution and mark test cases accordingly&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-perform-endtoend-testing"&gt;
  &lt;/a&gt;
  How to Perform End-to-End Testing?
&lt;/h2&gt;

&lt;p&gt;End-to-end testing can only be done once all the components are ready for testing and are communicating with each other. Usually, by this time, testers are ready with the test cases.&lt;/p&gt;

&lt;p&gt;There are two different approaches to doing this testing:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manually&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Automated&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For horizontal end-to-end testing, manual testing makes sense the first time this testing is done for a product. This is because &lt;a href="https://testsigma.com/automated-testing"&gt;automated testing&lt;/a&gt; is beneficial only when the product is stable and is known to work as expected.&lt;/p&gt;

&lt;p&gt;Above statement does vary in case of vertical end-to-end testing, such that unit testing can be done by the developer along with other development tasks. And then the integration tests and the end-to-end tests can be executed manually. &lt;/p&gt;

&lt;p&gt;Now let's break down the above steps when you have to do manual testing and then automate those test cases too.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Execute all the positive end-to-end test cases&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Execute all the negative and edge cases&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure that the test cases are executed on all environments - devices and browsers that your target users might be using &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure to report all the bugs and discrepancies found, as soon as they are found&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once all the reported bugs (at least the major ones) have been fixed and verified, run all the end-to-end test cases once again and repeat steps 1 to 3&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the product is majorly stable, start with test automation. But before that mark the test cases that you will automate first. Start with automating the test case that is the main user scenario. This ensures that the main user scenario is executed every time there is a change. And, any discrepancies are reported sooner rather than later&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After that automate other test cases and scenarios that are supposed to remain stable and unchanged in future. Always start with automating the high priority test cases first.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you don’t have a test automation setup yet and you are looking for one then here is an article that can help you choose a test automation tool that will suit you - &lt;a href="https://testsigma.com/blog/10-points-to-help-you-choose-the-right-test-automation-tool/"&gt;10 Points to Help You Choose the Right Test Automation Tool&lt;/a&gt;&lt;/p&gt;

</description>
      <category>endtoendtesting</category>
      <category>softwaretesting</category>
      <category>automationtesting</category>
      <category>testautomation</category>
    </item>
    <item>
      <title>Building A Minimal AutoSuggest</title>
      <author>Mads Stoumann</author>
      <pubDate>Sat, 07 Aug 2021 06:42:43 +0000</pubDate>
      <link>https://dev.to/madsstoumann/building-a-minimal-autosuggest-4big</link>
      <guid>https://dev.to/madsstoumann/building-a-minimal-autosuggest-4big</guid>
      <description>&lt;p&gt;It took the Web a lot of years to introduce the &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;-tag, essential in creating one of the most widely used UI-components: the “AutoSuggest”. In this tutorial we'll be building a minimal “AutoSuggest”, both &lt;em&gt;with&lt;/em&gt; and &lt;em&gt;without&lt;/em&gt; JavaScript.&lt;/p&gt;




&lt;p&gt;In one of the first books I read about UI-design, “The Windows Interface Guidelines for Software Design” from 1995, it was called &lt;em&gt;a Combobox&lt;/em&gt; — because it's a &lt;em&gt;combination&lt;/em&gt; of a &lt;em&gt;drop-down list&lt;/em&gt; and a &lt;em&gt;text-input&lt;/em&gt;. I personally think that term makes more sense than “AutoSuggest” or “Type Ahead”, but it seems the world has chosen “AutoSuggest” — so let's stick with that!&lt;/p&gt;

&lt;p&gt;jQueryUI has the “AutoComplete”-plugin, incorrectly named, as “autocomplete” is a slightly different thing, as seen in this image from a &lt;a href="https://ux.stackexchange.com/questions/40104/how-to-provide-autocomplete-and-autosuggest-on-the-same-search-box-at-the-same-t"&gt;UX Stackexchange&lt;/a&gt; post:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dlXl-Qip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04e3trgwhp84fo75avd3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dlXl-Qip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04e3trgwhp84fo75avd3.jpg" alt="nXHX2"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#basic-structure"&gt;
  &lt;/a&gt;
  Basic Structure
&lt;/h2&gt;

&lt;p&gt;In most of the examples you'll see online, a &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; is used with the &lt;code&gt;&amp;lt;input type="text"&amp;gt;&lt;/code&gt;. I prefer to use &lt;code&gt;&amp;lt;input type="search"&amp;gt;&lt;/code&gt;. Why? Because this type adds some nice, extra, accessibility-friendly features out-of-the-box:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;Escape&lt;/code&gt;-key clears the list-selection, a second press clears the input altogether.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In Chrome and Safari, an event — &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/search_event"&gt;onsearch&lt;/a&gt; — is triggered when you press &lt;code&gt;Escape&lt;/code&gt; or &lt;code&gt;Enter&lt;/code&gt;, or when you click the little “reset cross”.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#the-markup"&gt;
  &lt;/a&gt;
  The markup
&lt;/h2&gt;

&lt;p&gt;The suggestions themselves are &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;s in a &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;datalist&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"browsers"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Firefox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Chrome"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Opera"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Safari"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/datalist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Chrome, this format is also supported:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"MSE"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Microsoft Edge&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;innerText&lt;/code&gt; will show up in the list, but only &lt;code&gt;value&lt;/code&gt; will be inserted, when you select an item.&lt;/p&gt;

&lt;p&gt;To link a &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; with an input, just take the &lt;code&gt;id&lt;/code&gt; and use as a &lt;code&gt;list&lt;/code&gt;-attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Pick a browser&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
    &lt;span class="na"&gt;autocomplete=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt;
    &lt;span class="na"&gt;autocorrect=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt;
    &lt;span class="na"&gt;list=&lt;/span&gt;&lt;span class="s"&gt;"browsers"&lt;/span&gt;
    &lt;span class="na"&gt;spellcheck=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don't want &lt;code&gt;autocomplete&lt;/code&gt; or &lt;code&gt;spellcheck&lt;/code&gt; to interfere, so we set them to &lt;code&gt;off&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;autocorrect&lt;/code&gt; is a Safari-only property, that should also be disabled in this case.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-css"&gt;
  &lt;/a&gt;
  The CSS
&lt;/h2&gt;

&lt;p&gt;Not much here. We can use &lt;code&gt;-webkit-appearance: none&lt;/code&gt; to clear the default browser-styling, and add our own. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"search"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#AAA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;margin-block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;min-inline-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt; &lt;span class="m"&gt;0.75rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you probably &lt;strong&gt;do&lt;/strong&gt; want to change, is that little “cross-icon”, that resets the input:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q6o5yNl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s67cgoo2ijye0docdh21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q6o5yNl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s67cgoo2ijye0docdh21.png" alt="Reset Cross"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I use a SVG-icon in a &lt;code&gt;url()&lt;/code&gt;, that I store in a &lt;em&gt;CSS Custom Property&lt;/em&gt;, so it can be used as both a &lt;code&gt;mask-image&lt;/code&gt; and a &lt;code&gt;-webkit-mask-image&lt;/code&gt; for browser-compatibility:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"search"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-search-cancel-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--reset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('data:image/svg+xml,&amp;lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"&amp;gt;&amp;lt;path d="M17.016 15.609l-3.609-3.609 3.609-3.609-1.406-1.406-3.609 3.609-3.609-3.609-1.406 1.406 3.609 3.609-3.609 3.609 1.406 1.406 3.609-3.609 3.609 3.609zM12 2.016q4.125 0 7.055 2.93t2.93 7.055-2.93 7.055-7.055 2.93-7.055-2.93-2.93-7.055 2.93-7.055 7.055-2.93z"/&amp;gt;&amp;lt;/svg&amp;gt;')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;currentColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;mask-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--reset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-mask-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--reset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Chrome adds a drop-down-arrow to an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; with a &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;, which we can hide:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;list&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-calendar-picker-indicator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There, much better:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6HpA84UX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73jaxeyi90441ekte26v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6HpA84UX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73jaxeyi90441ekte26v.png" alt="Reset Cross Styled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On mobile devices, the &lt;code&gt;&amp;lt;input type="search"&amp;gt;&lt;/code&gt; will trigger a virtual keyboard with a “Search”-button. If you &lt;strong&gt;don't&lt;/strong&gt; want that, look into &lt;a href="https://css-tricks.com/everything-you-ever-wanted-to-know-about-inputmode/"&gt;inputmode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On an iPhone, a &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; is displayed like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yb-RrjL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q9kdeesayyis88sjonn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yb-RrjL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q9kdeesayyis88sjonn.png" alt="iphonedatalist"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Far from perfect, but still much better than many custom solutions, where the virtual keyboard makes the “AutoSuggest” jump up and down!&lt;/p&gt;




&lt;p&gt;That's the minimalistic, JavaScript-free &lt;em&gt;AutoSuggest!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Excellent for things like a &lt;a href="https://madsstoumann.github.io/autosuggest/countries.html"&gt;country selector&lt;/a&gt; — and &lt;em&gt;much better&lt;/em&gt; than the minified &lt;strong&gt;224kb&lt;/strong&gt; jQueryUI's “AutoComplete”-plugin consumes (including it's CSS, and jQuery itself).&lt;/p&gt;

&lt;p&gt;But what if you want to use an API, creating &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;s dynamically?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#adding-an-api"&gt;
  &lt;/a&gt;
  Adding an API
&lt;/h2&gt;

&lt;p&gt;Before we look at the JavaScript, let's add some extra attributes to the &lt;code&gt;&amp;lt;input type="search"&amp;gt;&lt;/code&gt;-markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;data-api="//domain.com?q="
data-api-cache="0"
data-api-key="key"
min-length="3"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;data-api&lt;/code&gt; is for the &lt;code&gt;url&lt;/code&gt; we want to &lt;code&gt;fetch()&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
The search-text will be appended to this.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;data-api-cache&lt;/code&gt; can either be &lt;code&gt;0&lt;/code&gt; (disabled) or &lt;code&gt;1&lt;/code&gt; (enabled). If enabled, the &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;-options will not be overwritten after the initial &lt;code&gt;fetch()&lt;/code&gt;, and as you type in more text, the native browser-filtering of a &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; will be used.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;data-api-key&lt;/code&gt; is the “key / property” in the result-objects, you want to search and display as &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;min-length&lt;/code&gt; is a standard-attribute. In this case, it indicates how many characters you need to type, before the &lt;code&gt;fetch()&lt;/code&gt; is triggered.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;For the JavaScript, I'm going to explain all the methods I'm using, so you can build your own, customized &lt;em&gt;AutoSuggest&lt;/em&gt; with just the features you need.&lt;/p&gt;

&lt;p&gt;First, we add a function, &lt;code&gt;autoSuggest(input)&lt;/code&gt; with a single parameter: the &lt;code&gt;input&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, a boolean indicating whether cache should be used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apiCache&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The returned data, will be stored in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order not to crash the service, we're calling, we need a &lt;em&gt;debounce&lt;/em&gt;-method to filter out events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;debounced&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timerId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timerId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timerId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;timerId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;timerId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We store a reference to the &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;… and add an &lt;code&gt;eventListener&lt;/code&gt; on the &lt;code&gt;input&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;debounced&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;onentry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;200&lt;/code&gt; is the delay used in the &lt;code&gt;debounce&lt;/code&gt;-method. You can modify this, or add it to a settings-object or similar.&lt;/p&gt;

&lt;p&gt;Finally, there's the &lt;code&gt;onentry&lt;/code&gt;-method called from within the &lt;code&gt;debounce&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onentry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minLength&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;option value="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's an async function, that first checks whether the input has the minimal amount of characters. If not, it simply returns.&lt;/p&gt;

&lt;p&gt;If no data exists already, or if the cache is set to &lt;code&gt;0: false&lt;/code&gt;, a &lt;code&gt;fetch()&lt;/code&gt; is triggered, and the &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;s are updated.&lt;/p&gt;

&lt;p&gt;Cool, we now have dynamic options, and a minified script, that's just &lt;strong&gt;497 bytes&lt;/strong&gt;, approx. &lt;strong&gt;349 bytes gzipped!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But I think it lacks a few features. I want to trigger a &lt;em&gt;Custom Event&lt;/em&gt;, when I select an option from the list, and I want the &lt;em&gt;object&lt;/em&gt; from the matching search-result in that event.&lt;/p&gt;

&lt;p&gt;Let's modify the &lt;code&gt;onentry&lt;/code&gt;-method a bit. We can use the &lt;code&gt;event.inputType&lt;/code&gt; to detect, when the user clicks on a list item, or selects it using &lt;code&gt;Enter&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;insertReplacementText&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autoSuggestSelect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;selected&lt;/code&gt;-method looks up and returns the current input-text in the array of objects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now — in another script! — we can listen for that event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autoSuggestSelect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What if we want to &lt;em&gt;reset&lt;/em&gt; the list? In Safari and Chrome, there's the &lt;code&gt;onsearch&lt;/code&gt;-event, that's triggered on both reset and &lt;code&gt;Enter&lt;/code&gt;.&lt;br&gt;
Let's add a &lt;code&gt;reset()&lt;/code&gt;-method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;option value=""&amp;gt;`&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And trigger it, when a user clicks the “reset-cross” or presses &lt;code&gt;Escape&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;search&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;// Do something on Enter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The blank &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; in the &lt;code&gt;reset()&lt;/code&gt;-method is a hack for Firefox and Safari, that otherwise has some issues with a dynamic &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;. It can therefore be a good idea to add an empty option by default in the markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;datalist&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"suggest"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/option&amp;gt;&amp;lt;/datalist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The script is now &lt;strong&gt;544 bytes&lt;/strong&gt; gzipped. Is there anything else, we can do?&lt;/p&gt;

&lt;p&gt;In Firefox, we can add a small “polyfill” for &lt;code&gt;onsearch&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;onsearch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keydown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Escape&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#what-else"&gt;
  &lt;/a&gt;
  What Else?
&lt;/h2&gt;

&lt;p&gt;You can continue to add stuff yourself. But before you do that, let's add a &lt;code&gt;settings&lt;/code&gt;-object to hold the configuration parameters for what we already have — and whatever you want to add! First, we'll change the main function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;autoSuggest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll merge the &lt;code&gt;args&lt;/code&gt; into a settings-object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;api&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;apiCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;datasetToType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;datasetToType&lt;/code&gt; is a small helper-function, that'll convert dataset-entries to correct types (non-string values prefixed with a &lt;code&gt;:&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;datasetToType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, we can call the &lt;code&gt;autoSuggest&lt;/code&gt;-method with &lt;em&gt;either&lt;/em&gt; a standard JavaScript-object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;autoSuggest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;apiCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;— or with it's &lt;code&gt;dataset&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;autoSuggest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the markup, we'll replace the &lt;code&gt;0&lt;/code&gt;'s with &lt;code&gt;:false&lt;/code&gt; and the &lt;code&gt;1&lt;/code&gt;'s with &lt;code&gt;:true&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;data-api-cache=":false"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to replace &lt;code&gt;input.dataset.api&lt;/code&gt; with &lt;code&gt;settings.api&lt;/code&gt;, remove the &lt;code&gt;cache&lt;/code&gt; constant, and replace it with &lt;code&gt;settings.cache&lt;/code&gt; (and various other places, check the final example!), but we now have a &lt;code&gt;settings&lt;/code&gt;-object, we can extend with new features.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#limiting-choices"&gt;
  &lt;/a&gt;
  Limiting choices
&lt;/h2&gt;

&lt;p&gt;Do you want to limit the &lt;code&gt;value&lt;/code&gt; to &lt;strong&gt;only&lt;/strong&gt; allow values from the list? Let's extend the &lt;code&gt;settings&lt;/code&gt;-object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;invalid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not a valid selection&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll add a new method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setCustomValidity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkValidity&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reportValidity&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;invalid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, we'll update the &lt;code&gt;onsearch&lt;/code&gt;-event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;search&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method uses HTML5's default validation api — and currently does &lt;em&gt;nothing&lt;/em&gt; (apart from logging to the &lt;code&gt;console&lt;/code&gt;!). You can/should tweak it, to use your own way of handling invalid state.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;The first &lt;a href="https://madsstoumann.github.io/autosuggest/"&gt;example&lt;/a&gt; is DAWA, a danish service for looking up addresses &lt;em&gt;(try typing “park”):&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;DAWA - Danish Address Lookup&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
    &lt;span class="na"&gt;autocomplete=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt;
    &lt;span class="na"&gt;autocorrect=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt;
    &lt;span class="na"&gt;data-api=&lt;/span&gt;&lt;span class="s"&gt;"//dawa.aws.dk/adresser/autocomplete?side=1&amp;amp;per_side=10&amp;amp;q="&lt;/span&gt;
    &lt;span class="na"&gt;data-api-cache=&lt;/span&gt;&lt;span class="s"&gt;":false"&lt;/span&gt;
    &lt;span class="na"&gt;data-api-key=&lt;/span&gt;&lt;span class="s"&gt;"tekst"&lt;/span&gt;
    &lt;span class="na"&gt;data-limit=&lt;/span&gt;&lt;span class="s"&gt;":true"&lt;/span&gt;
    &lt;span class="na"&gt;list=&lt;/span&gt;&lt;span class="s"&gt;"dawa"&lt;/span&gt;
    &lt;span class="na"&gt;minlength=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt;
    &lt;span class="na"&gt;spellcheck=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;datalist&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"dawa"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/option&amp;gt;&amp;lt;/datalist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below that is JSON placeholder &lt;em&gt;(try typing “lorem”):&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;JSON placeholder&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
    &lt;span class="na"&gt;autocomplete=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt;
    &lt;span class="na"&gt;autocorrect=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt;
    &lt;span class="na"&gt;data-api=&lt;/span&gt;&lt;span class="s"&gt;"//jsonplaceholder.typicode.com/albums/?_limit=10&amp;amp;q="&lt;/span&gt;
    &lt;span class="na"&gt;data-api-key=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;
    &lt;span class="na"&gt;list=&lt;/span&gt;&lt;span class="s"&gt;"jsonplaceholder"&lt;/span&gt;
    &lt;span class="na"&gt;minlength=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt;
    &lt;span class="na"&gt;spellcheck=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;datalist&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"jsonplaceholder"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/option&amp;gt;&amp;lt;/datalist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick way to run the &lt;code&gt;autoSuggest&lt;/code&gt;-method on all elements with an associated &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;autoSuggest&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./autosuggest.mjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[list]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autoSuggestSelect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;autoSuggest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is not meant to be a tried and tested “AutoSuggest”, you can use “as-is” in a project. It's more a set of principles and ideas, so you can go ahead and make your own, customizing it to your needs: minimal or bloated with features!&lt;/p&gt;

&lt;p&gt;More importantly, it's meant to show how a “native first”-approach, using built-in tags and their built-in functionality, can often result in much less JavaScript and less overhead.&lt;/p&gt;

&lt;p&gt;I've made a &lt;a href="https://github.com/madsstoumann/autosuggest"&gt;repository&lt;/a&gt;, from where you can grab the demo-files. Open the folder in &lt;em&gt;VS Code&lt;/em&gt;, and start it with &lt;em&gt;Live Server&lt;/em&gt; or similar. &lt;a href="https://madsstoumann.github.io/autosuggest/"&gt;Live demo here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
