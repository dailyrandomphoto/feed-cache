<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What you can build with JavaScript</title>
      <author>Liudmila Mzhachikh</author>
      <pubDate>Wed, 10 Nov 2021 19:29:53 +0000</pubDate>
      <link>https://dev.to/lucyhackwrench/what-you-can-build-with-javascript-4ei</link>
      <guid>https://dev.to/lucyhackwrench/what-you-can-build-with-javascript-4ei</guid>
      <description>&lt;p&gt;JavaScript was originally invented to "bring web pages to life". In nowadays JS feels comfortable on a server and continues to explore new areas.&lt;/p&gt;

&lt;p&gt;I was interested in existing non-trivial uses of JavaScript. I have researched the question and made this overview. It includes examples from flying drone controlling to machine learning. In this article you can find links helpful for beginners.&lt;/p&gt;

&lt;p&gt;There probably is much more that could have been mentioned here. Please add other interesting JavaScript use cases in the comments, let's make a complete list.&lt;/p&gt;

&lt;p&gt;Let's Begin üëá&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#native-and-hybrid-mobile-apps"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£ Native and Hybrid Mobile Apps
&lt;/h3&gt;

&lt;p&gt;You can build cross platform app with &lt;a href="https://reactnative.dev/"&gt;React Native&lt;/a&gt;, &lt;a href="https://ionicframework.com/"&gt;Ionic&lt;/a&gt; or &lt;a href="http://phonegap.com"&gt;PhoneGap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVSynPgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/em35fqsxk2uafq0p8jnl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVSynPgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/em35fqsxk2uafq0p8jnl.png" alt="Image description" width="880" height="412"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#desktop-apps"&gt;
  &lt;/a&gt;
  2Ô∏è‚É£ Desktop Apps
&lt;/h3&gt;

&lt;p&gt;Desktop applications are built with the &lt;a href="https://www.electronjs.org/"&gt;Electron&lt;/a&gt; framework. VS Code, Skype, Slack are also written in JS, by the way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T5klQdbo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxwfe32g5pxs76pjhjyu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T5klQdbo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxwfe32g5pxs76pjhjyu.png" alt="Image description" width="880" height="301"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browser-extensions"&gt;
  &lt;/a&gt;
  3Ô∏è‚É£ Browser Extensions
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.chrome.com/docs/extensions/mv3/getstarted/"&gt;Writing a browser extension is pretty easy&lt;/a&gt;. You can write your own extension in vanilla JS for your own goals.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y_7aB7cB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8xhg1ro7gurs57fwgam.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y_7aB7cB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8xhg1ro7gurs57fwgam.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-plugins"&gt;
  &lt;/a&gt;
  4Ô∏è‚É£ Software Plugins
&lt;/h3&gt;

&lt;p&gt;Extensions for Photoshop and Sketch can be written in JS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EW1g8sP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdmxt8a48snyxbmt3u9p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EW1g8sP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdmxt8a48snyxbmt3u9p.png" alt="Image description" width="880" height="389"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gamedev"&gt;
  &lt;/a&gt;
  5Ô∏è‚É£ GameDev
&lt;/h3&gt;

&lt;p&gt;Nowadays, a lot of games are being developed with JS. Among them are many &lt;a href="https://skillcrush.com/blog/free-coding-games/"&gt;games that help you learn coding&lt;/a&gt;. There is a great &lt;a href="https://developer.mozilla.org/en-US/docs/Games"&gt;article on MDN&lt;/a&gt; with resources for JS game development. You can write games in both vanilla JS and engines like &lt;a href="https://pixijs.com/"&gt;PixiJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Anna1L8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwym2tlaa0zqc8hp1ssx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Anna1L8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwym2tlaa0zqc8hp1ssx.png" alt="Image description" width="800" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3d-graphics"&gt;
  &lt;/a&gt;
  6Ô∏è‚É£ 3D Graphics
&lt;/h3&gt;

&lt;p&gt;WebGL can &lt;a href="https://webglsamples.org/"&gt;do really cool things&lt;/a&gt;. The &lt;a href="https://threejs.org/"&gt;Three.js&lt;/a&gt; library is by far the most popular for working with WebGL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JwBk-YrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jrd1lw4zaevr25igkkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JwBk-YrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jrd1lw4zaevr25igkkg.png" alt="Image description" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-and-audio-players"&gt;
  &lt;/a&gt;
  7Ô∏è‚É£ Video and Audio Players
&lt;/h3&gt;

&lt;p&gt;You can play video and audio in browser using HTML5 and JS. The &lt;a href="https://videojs.com/"&gt;VideoJS&lt;/a&gt; library can be helpful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TYJ8N_AU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/viam281mj52fav427r3o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TYJ8N_AU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/viam281mj52fav427r3o.png" alt="Image description" width="880" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#internet-of-things"&gt;
  &lt;/a&gt;
  8Ô∏è‚É£ Internet of Things
&lt;/h3&gt;

&lt;p&gt;IOT is a plenty of devices controlled over the Internet: a refrigerator that orders products itself, all kinds of sensors and remote monitoring systems - everything that can be automated. Through Node.js, you can interact with robots and other devices. There are even &lt;a href="http://www.nodecopter.com/"&gt;quadcopters&lt;/a&gt; that you can install a Node.js on. There are a lot of &lt;a href="https://blog.bitsrc.io/10-javascript-iot-libraries-to-use-in-your-next-projects-bef5f9136f83"&gt;libraries for IOT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3sZsJXoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xj7yaxp0dfaghf5s2lyx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3sZsJXoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xj7yaxp0dfaghf5s2lyx.png" alt="Image description" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smart-tv"&gt;
  &lt;/a&gt;
  9Ô∏è‚É£ Smart TV
&lt;/h3&gt;

&lt;p&gt;You can write JS applications using the &lt;a href="https://developer.samsung.com/smarttv/develop/legacy-platform-library/art00015/index.html"&gt;Samsung SDK&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4jJuSL9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrstpvlew8ktewjkls91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jJuSL9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrstpvlew8ktewjkls91.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smart-watch"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£0Ô∏è‚É£ Smart Watch
&lt;/h3&gt;

&lt;p&gt;The Pebble smartwatch company has released the &lt;a href="https://medium.com/@sejoker/pebble-app-development-with-pebble-js-ab9af8c8ce50"&gt;Pebble.js framework&lt;/a&gt; for writing applications for their platform in JS. You cannot write applications for iOS and Android in JS... but who knows what will happen in the future :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jODFRGy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9h4me3l7qlwuif4m5emd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jODFRGy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9h4me3l7qlwuif4m5emd.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smart-columns"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£1Ô∏è‚É£ Smart Columns
&lt;/h3&gt;

&lt;p&gt;Applications (skills) for smart columns (voice assistants) are written in Node.js.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zfq7a9Uk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clg0srxuarmpiza0dgdc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zfq7a9Uk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clg0srxuarmpiza0dgdc.png" alt="Image description" width="800" height="449"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#payment-terminals"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£2Ô∏è‚É£ Payment Terminals
&lt;/h3&gt;

&lt;p&gt;Interfaces of payment and information terminals and other self-service devices can be built with JS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TG3RmAEo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cpm2z17y7ggyujk71h3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TG3RmAEo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cpm2z17y7ggyujk71h3.png" alt="Image description" width="416" height="416"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webrtc"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£3Ô∏è‚É£ WebRTC
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API"&gt;WebRTC&lt;/a&gt; is technology that allows Web applications to capture and selectively transmit audio and/or video media streams and exchange data directly between browsers, without additional plugins, in real time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YkBrEgOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjio8dhequns1fm6ag8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YkBrEgOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjio8dhequns1fm6ag8m.png" alt="Image description" width="400" height="300"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arvr"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£4Ô∏è‚É£ AR/VR
&lt;/h3&gt;

&lt;p&gt;Virtual and augmented reality in browser using the WebVR API and 3D graphics. Take a look what &lt;a href="https://medium.com/samsung-internet-dev/eleven-examples-of-how-webvr-is-being-used-today-cbcb214b816c"&gt;cool things&lt;/a&gt; can be done with this technologies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UT68Ilyu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtpm18v6f34jh25mpf5d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UT68Ilyu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtpm18v6f34jh25mpf5d.png" alt="Image description" width="880" height="444"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#machine-learning"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£5Ô∏è‚É£ Machine Learning
&lt;/h3&gt;

&lt;p&gt;With JS you can create and train your own neural networks, as well as use ready-made solution developed in other languages. &lt;a href="https://www.tensorflow.org/js"&gt;TensorFlow.js&lt;/a&gt; is the most popular JS library for ML. Using ML, you can, for example, teach a website to catalog goods for an online store right at the frontend, or show suggestions for you text while typing and do many other cool things.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZK3n5ZXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/EX4CuuhWAAkGJK_.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8txDMLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1049810942882590720/O7WH5RXH_normal.jpg" alt="Jason Mayes profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jason Mayes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jason_mayes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      So &lt;a href="https://twitter.com/devdevcharlie"&gt;@devdevcharlie&lt;/a&gt; just made a tutorial for making fruit ninja in the browser with &lt;a href="https://twitter.com/hashtag/TensorFlowJS"&gt;#TensorFlowJS&lt;/a&gt; - go check it out - it looks super fun! Check the video tutorial here: &lt;a href="https://t.co/64uhWEVsvL"&gt;youtube.com/watch?v=lSMJ-3‚Ä¶&lt;/a&gt;&lt;br&gt;Blog: &lt;a href="https://t.co/Qxp7353fa3"&gt;dev.to/devdevcharlie/‚Ä¶&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/MadeWithTFJS"&gt;#MadeWithTFJS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/FruitNinja"&gt;#FruitNinja&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/JavaScript"&gt;#JavaScript&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/WebDev"&gt;#WebDev&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/JS"&gt;#JS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Creative"&gt;#Creative&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      05:54 AM - 13 May 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1260448312316084231" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1260448312316084231" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1260448312316084231" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#space"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£6Ô∏è‚É£ Space
&lt;/h3&gt;

&lt;p&gt;And what if I told you that JS flew into space ü§Ø&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SuQqQZ6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EZYY_gxUwAEtkPa.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8txDMLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1049810942882590720/O7WH5RXH_normal.jpg" alt="Jason Mayes profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jason Mayes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jason_mayes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      So &lt;a href="https://twitter.com/hashtag/JS"&gt;#JS&lt;/a&gt; made it into space! &lt;a href="https://twitter.com/hashtag/SpaceX"&gt;#SpaceX&lt;/a&gt; uses &lt;a href="https://twitter.com/hashtag/Chromium"&gt;#Chromium&lt;/a&gt; + &lt;a href="https://twitter.com/hashtag/JavaScript"&gt;#JavaScript&lt;/a&gt; for the Dragon 2 flight interface along with C++ for flight computers. JavaScript is not a toy folk, time to accept it. &lt;a href="https://twitter.com/hashtag/NASA"&gt;#NASA&lt;/a&gt;  &lt;a href="https://twitter.com/BrendanEich"&gt;@BrendanEich&lt;/a&gt; &lt;a href="https://t.co/yq2C5fnjOG"&gt;space.stackexchange.com/questions/9243‚Ä¶&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:53 PM - 31 May 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1267227834096861184" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1267227834096861184" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1267227834096861184" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;p&gt;And finally, check this inspirational collection of &lt;a href="https://www.creativebloq.com/web-design/examples-of-javascript-1233964"&gt;JS examples&lt;/a&gt; and &lt;a href="https://github.com/bradtraversy/vanillawebprojects"&gt;vanilla JS projects examples&lt;/a&gt;. They might suggest an idea for your pet project. Also here is the &lt;a href="https://javascript30.com/"&gt;30 Day Vanilla JS Coding Challenge&lt;/a&gt; - 30 tutorials on different JS features.&lt;/p&gt;

&lt;p&gt;Happy Coding! :)&lt;/p&gt;

&lt;p&gt;Follow me ‚û°Ô∏è&lt;br&gt;
&lt;a href="https://twitter.com/lucyhackwrench"&gt;https://twitter.com/lucyhackwrench&lt;/a&gt;&lt;br&gt;
&lt;a href="https://tglink.ru/frontend_thoughts"&gt;https://tglink.ru/frontend_thoughts&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>.Net Core vs NodeJS</title>
      <author>Ariel Calix</author>
      <pubDate>Wed, 10 Nov 2021 19:28:51 +0000</pubDate>
      <link>https://dev.to/arielcalix/net-core-vs-nodejs-4c0b</link>
      <guid>https://dev.to/arielcalix/net-core-vs-nodejs-4c0b</guid>
      <description>&lt;p&gt;Hola Amigos y bienvenidos a este vs entre dos tecnolog√≠as, hablaremos sobre que son cada una y en que podemos implementarlas y sin m√°s les presento a nuestro primer contendiente &lt;strong&gt;.Net Core&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#net-sus-inicios"&gt;
  &lt;/a&gt;
  .Net ¬øSus Inicios?
&lt;/h2&gt;

&lt;p&gt;para conocer .Net Core debemos hablar un poco sobre los inicios de .Net.&lt;/p&gt;

&lt;p&gt;.Net nacio en el a√±o 2001, con la publicacion de los primeros estandares (334 y 335) en ECMA para C# y CLR(Common Language Runtime). Y en 2002 se libera .Net Framework 1.&lt;/p&gt;

&lt;p&gt;Para el a√±o 2008 Microsoft da el anuncio que el proyecto ASP.Net MVC ser√° de tipo &lt;a href="https://es.wikipedia.org/wiki/C%C3%B3digo_abierto"&gt;Open Source&lt;/a&gt;, ese mismo a√±o en la conferencia &lt;a href="https://es.wikipedia.org/wiki/Build_(conferencia_desarrolladores)"&gt;//build/&lt;/a&gt; &lt;a href="https://es.wikipedia.org/wiki/Anders_Hejlsberg"&gt;Anders Hejlsberg&lt;/a&gt; anuncia que el compilador Roslyn de C# sera de tipo Open Source. Y es en 2008 que comienza el desarrollo de .Net Core.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#net-core-qu%C3%A9-es"&gt;
  &lt;/a&gt;
  .Net Core ¬øQu√© es?
&lt;/h2&gt;

&lt;p&gt;Esta es la plataforma de desarrollo de Microsoft m√°s moderna, su lanzamiento oficial fue en 2016 con .Net Core 1.0. Actualmente nos encontramos con la version 5 lanzada apenas en el a√±o 2020 y en la que se unifican .Net Framework, .Net Core y Mono en una sola plataforma. Es un lenguaje del tipo Open Source, es multiplataforma y de un rendimiento muy alto para crear todo tipo de aplicaciones.&lt;/p&gt;

&lt;p&gt;Dentro de las principales caracter√≠sticas de .Net Core tenemos.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiplataforma y con soporte para uso en contenedores Docker.&lt;/li&gt;
&lt;li&gt;Alto rendimiento (fue dise√±ado desde 0).&lt;/li&gt;
&lt;li&gt;Asincronia, este patron en todas las librer√≠as comunes para mejorar el rendimiento en las llamadas I/O.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#net-core-en-que-lo-uso"&gt;
  &lt;/a&gt;
  .Net Core ¬øEn que lo uso?
&lt;/h2&gt;

&lt;p&gt;.Net Core nos permite implementar todo tipo de aplicaciones desde:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web, mismas que pueden ser desplegadas en Windows, Linux o Mac OS.&lt;/li&gt;
&lt;li&gt;Aplicaciones con Docker, en cualquiera de las nubes ya sea (Azure, AWS o GCP).&lt;/li&gt;
&lt;li&gt;Aplicaciones de Escritorio UWP lo que permite que tus apps sean ejecutadas en Windows 10, XBOX y HoloLens.&lt;/li&gt;
&lt;li&gt;IoT.&lt;/li&gt;
&lt;li&gt;IA.&lt;/li&gt;
&lt;li&gt;Desarrollo de juegos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#net-core-su-futuro"&gt;
  &lt;/a&gt;
  .Net Core ¬øSu Futuro?
&lt;/h2&gt;

&lt;p&gt;A lo largo de muchos a√±os han sido creadas diferentes plataformas de .Net como ser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.Net Framework.&lt;/li&gt;
&lt;li&gt;.Net Core.&lt;/li&gt;
&lt;li&gt;Mono.
Y otras como:&lt;/li&gt;
&lt;li&gt;Silverlight&lt;/li&gt;
&lt;li&gt;Windows Phone&lt;/li&gt;
&lt;li&gt;.Net Compact Framework
Mismas que de alguna forma ayudaron a perfilar .Net como lo que es hoy en d√≠a.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Desde la version 3 de .Net Core no se han continuado con la migracion de caracter√≠sticas desde .Net Clasico. Por lo que las siguientes tecnolog√≠as ya no tienen un equivalente.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Web Forms.&lt;/li&gt;
&lt;li&gt;WCF.&lt;/li&gt;
&lt;li&gt;Workflow Foundation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ahora bien Aunque existe Blazor, mismo que es su sustituto no existe una migraci√≥n directa. Si quieres migrar tus servicios WCF, tienes que utilizar Web API's.&lt;/p&gt;

&lt;p&gt;Lo anterior no significa que tengas que migrar todas tus aplicaciones actuales a .Net Core si ya son funcionales. Recuerda que son paltaformas diferentes, por lo que migrar puede llevar m√°s tiempo del que crees.&lt;/p&gt;

&lt;p&gt;Abordaremos m√°s sobre .Net en una serie especial para este framework pero por el momento esto es lo que necesitas saber para este versus entre estas dos tecnolog√≠as.&lt;/p&gt;

&lt;p&gt;Imagen por &lt;a href="https://unsplash.com/@m4r1vs?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Marius Niveri&lt;/a&gt; en &lt;a href="https://unsplash.com/@m4r1vs?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>programming</category>
    </item>
    <item>
      <title>Patr√≥n modelo vista controlador</title>
      <author>Marcos</author>
      <pubDate>Wed, 10 Nov 2021 19:22:27 +0000</pubDate>
      <link>https://dev.to/marcodeev/patron-modelo-vista-controlador-4k32</link>
      <guid>https://dev.to/marcodeev/patron-modelo-vista-controlador-4k32</guid>
      <description>&lt;p&gt;Para implementar este modelo vamos utilizar librer√≠as en tareas como el renderizado de vistas o el sistema de rutas con el fin de que la tarea sea mas practica &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/marcodeev/MVC"&gt;Repositorio de la platilla en GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sistema-de-carpetas"&gt;
  &lt;/a&gt;
  Sistema de carpetas
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJLLy1Zd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/27PdL48/estructuradecarpetas.png%2522" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJLLy1Zd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/27PdL48/estructuradecarpetas.png%2522" alt="sistema b√°sico de MVC" width="344" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#app"&gt;
  &lt;/a&gt;
  app
&lt;/h3&gt;

&lt;p&gt;Contiene la mayor parte de la l√≥gica de nuestro sistema (modelos y controladores)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#controllers"&gt;
  &lt;/a&gt;
  controllers
&lt;/h3&gt;

&lt;p&gt;Contiene los controladores de nuestra aplicaci√≥n&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#models"&gt;
  &lt;/a&gt;
  models
&lt;/h3&gt;

&lt;p&gt;Contiene los modelos de nuestra aplicaci√≥n, desde ac√° manipulamos los datos alojados en nuestra base de datos   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#public"&gt;
  &lt;/a&gt;
  public
&lt;/h3&gt;

&lt;p&gt;Esta carpeta poseen los archivos que tendr√°n un alcance publico. Esta carpeta tiene el √≠ndex que esta cumpliendo el patr√≥n de Front Controller (muy importante para un sistema robusto ya que solo permite una sola entrada a los archivos de nuestra soluci√≥n).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vendor"&gt;
  &lt;/a&gt;
  Vendor
&lt;/h3&gt;

&lt;p&gt;Carpeta creada y gestionada por composer, ac√° se alojan las librer√≠as implementadas a trav√©s de la terminal de composer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#view"&gt;
  &lt;/a&gt;
  view
&lt;/h3&gt;

&lt;p&gt;Contiene las vistas de nuestra soluci√≥n &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#modelo-vista-controlador"&gt;
  &lt;/a&gt;
  Modelo Vista Controlador
&lt;/h1&gt;

&lt;p&gt;El siguiente esquema muestra el funcionamiento de un sistema funcionando con el patr√≥n de dise√±o modelo vista controlador &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ChKgioX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Vgm5Gxj/mvc.png%2522" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ChKgioX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Vgm5Gxj/mvc.png%2522" alt="Esquema MVC" width="640" height="929"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>programming</category>
    </item>
    <item>
      <title>Add some spice to your HTML file fields with an image preview pane
</title>
      <author>Ayush Newatia</author>
      <pubDate>Wed, 10 Nov 2021 19:20:16 +0000</pubDate>
      <link>https://dev.to/ayushn21/add-some-spice-to-your-html-file-fields-with-an-image-preview-pane-11b7</link>
      <guid>https://dev.to/ayushn21/add-some-spice-to-your-html-file-fields-with-an-image-preview-pane-11b7</guid>
      <description>&lt;p&gt;The default HTML file field is rather boring. It's quite painful to style and not really flexible either.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcd7GOYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.chapter24.blog/1621025515Azu55yPnIAhULLDIcQswwg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcd7GOYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.chapter24.blog/1621025515Azu55yPnIAhULLDIcQswwg" width="368" height="114"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With a little bit of JavaScript though, we can spice up the file input field a bit and add a preview pane for images; so the user can see the image they've selected before submitting the form.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2aiRLsA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.chapter24.blog/162102562726Fpo3bp9Jz8SaLKOAezQQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2aiRLsA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.chapter24.blog/162102562726Fpo3bp9Jz8SaLKOAezQQ" width="506" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A good way to encapsulate the logic for this field is to use a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"&gt;JavaScript Custom Element&lt;/a&gt;. We'll create a class called &lt;code&gt;ImageInputField&lt;/code&gt; and define it to use the tag name &lt;code&gt;image-input-field&lt;/code&gt;. Let's start with our HTML markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;image-input-field&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;preview&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Select Image&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Remove Image&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/image-input-field&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code should be pretty self explanatory. To bring this to life, we need to create and define our custom element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ImageInputField&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="c1"&gt;// Configure click listeners for the two buttons&lt;/span&gt;
    &lt;span class="c1"&gt;// and a change listener for the input field&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configureListeners&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;// Hide the remove button by default as initially&lt;/span&gt;
    &lt;span class="c1"&gt;// there won't be a file selected&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="c1"&gt;// Hide the input field as it's only used under&lt;/span&gt;
    &lt;span class="c1"&gt;// the hood.&lt;/span&gt;
    &lt;span class="c1"&gt;// The user clicks on the "Select Image" button&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="c1"&gt;// Restrict the input field to images only&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input[type=file]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;selectButton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button[select]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;removeButton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button[remove]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img[preview]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;removeImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Read the image off the disk and set it to our img element&lt;/span&gt;
  &lt;span class="nx"&gt;showPreview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FileReader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readAsDataURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;display&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;configureListeners&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showPreview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="c1"&gt;// Register our custom element with the CustomElementRegistry&lt;/span&gt;
&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image-input-field&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ImageInputField&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;br&gt;&lt;br&gt;
With the above element, our component is complete. Users will now see a preview of the image they've selected. We're also free to style any of the contained elements as we wish. So for example, we might want to limit the width of the image preview so a large image doesn't mess up the layout of the whole page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;image-input-field&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codepen.io/ayushn21/pen/KKWzEQj"&gt;Here's a CodePen&lt;/a&gt; demonstrating the component in action!¬†&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hacktoberfest Action</title>
      <author>Arya Narayan Tiwari</author>
      <pubDate>Wed, 10 Nov 2021 19:12:08 +0000</pubDate>
      <link>https://dev.to/aryanarayantiwari/hacktoberfest-action-3hig</link>
      <guid>https://dev.to/aryanarayantiwari/hacktoberfest-action-3hig</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;I created my workflow by customizing the pr-labeler github action by TimonVS on github action marketplace. This workflow works by matching branch patterns name such that whenever a branch with matching pattern makes a pull request and when that branch is merged and closed it adds the hacktoberfest and hacktoberfest-accepted label to the PRs, which automates the task for hacktoberfest maintainers to manually add the labels. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;When a pull request is closed with the branch name hack/218-add-emoji-support the Action will automatically apply the hacktoberfest and hacktoberfest-acccepted label once the PR is merged.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category-maintainer-musthaves"&gt;
  &lt;/a&gt;
  Submission Category: Maintainer Must-Haves
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Github Repository Link&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/aryanarayantiwari"&gt;
        aryanarayantiwari
      &lt;/a&gt; / &lt;a href="https://github.com/aryanarayantiwari/hacktoberfest-pr-labeler"&gt;
        hacktoberfest-pr-labeler
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is a github action that adds hacktoberfest and hacktoberfest-accepted label to a merged pull request with matching branch name patterns.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Hacktoberfest Action&lt;/h1&gt;
&lt;h2&gt;
&lt;em&gt;Merge pull request with ease&lt;/em&gt;
&lt;/h2&gt;
&lt;p&gt;This is a github action made by using and customizing the &lt;a href="https://github.com/marketplace/actions/pr-labeler"&gt;pr-labeler&lt;/a&gt; github action by TimonVS from the github actions marketplace.&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add labels to pull request with matching patterns in branch-name.&lt;/li&gt;
&lt;li&gt;Automatically adds the lables once the PR is merged.&lt;/li&gt;
&lt;li&gt;The current matching pattern for branchname is 'hack/*' but one can customise it by editing the 'pr-labeler.yml' file in .github folder.&lt;/li&gt;
&lt;li&gt;Easy to Use&lt;/li&gt;
&lt;li&gt;Automates the task of adding labels manually to a PR while merging during Hacktoberfest&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Add &lt;code&gt;.github/workflows/pr-labeler.yml&lt;/code&gt; with the following:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;PR Labeler&lt;/span&gt;
&lt;span class="pl-ent"&gt;on&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;pull_request&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;types&lt;/span&gt;: &lt;span class="pl-s"&gt;[closed]&lt;/span&gt;

&lt;span class="pl-ent"&gt;jobs&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;pr-labeler&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;if&lt;/span&gt;: &lt;span class="pl-s"&gt;github.event.pull_request.merged == true&lt;/span&gt;
    &lt;span class="pl-ent"&gt;runs-on&lt;/span&gt;: &lt;span class="pl-s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="pl-ent"&gt;steps&lt;/span&gt;:
      - &lt;span class="pl-ent"&gt;uses&lt;/span&gt;: &lt;span class="pl-s"&gt;TimonVS/pr-labeler-action@v3&lt;/span&gt;
        &lt;span class="pl-ent"&gt;with&lt;/span&gt;:
          &lt;span class="pl-ent"&gt;configuration-path&lt;/span&gt;: &lt;span class="pl-s"&gt;.github/pr-labeler.yml &lt;/span&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; optional, .github/pr-labeler.yml is the default value&lt;/span&gt;
        &lt;span class="pl-ent"&gt;env&lt;/span&gt;:
          &lt;span class="pl-ent"&gt;GITHUB_TOKEN&lt;/span&gt;: &lt;span class="pl-s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Configuration&lt;/h2&gt;
&lt;p&gt;Configure by creating a &lt;code&gt;.github/pr-labeler.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;hacktoberfest&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aryanarayantiwari/hacktoberfest-pr-labeler"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#yaml-file"&gt;
  &lt;/a&gt;
  Yaml File
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: PR Labeler
on:
  pull_request:
    types: [closed]

jobs:
  pr-labeler:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: TimonVS/pr-labeler-action@v3
        with:
          configuration-path: .github/pr-labeler.yml # optional, .github/pr-labeler.yml is the default value
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/pr-labeler"&gt;TimonVS PR-labeler&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>The Principle of Least Astonishment</title>
      <author>Matthew Lucas</author>
      <pubDate>Wed, 10 Nov 2021 18:58:20 +0000</pubDate>
      <link>https://dev.to/notmattlucas/the-principle-of-least-astonishment-3f9k</link>
      <guid>https://dev.to/notmattlucas/the-principle-of-least-astonishment-3f9k</guid>
      <description>&lt;p&gt;We usually think of a computer system ending at the screen and keyboard, but the user is part of the system. If the computer and user don‚Äôt get on the system isn‚Äôt working ‚Äî it‚Äôs a frustrating, surprising, and even infuriating experience.&lt;/p&gt;

&lt;p&gt;The principle of least astonishment is a design principle the emphasizes the importance of predictability. Software should behave in ways a user has come to expect.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúIf a necessary feature has a high astonishment factor, it may be necessary to redesign the feature.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#in-user-experience-control"&gt;
  &lt;/a&gt;
  In User Experience (Control)
&lt;/h2&gt;

&lt;p&gt;Pick up an entry-level psychology textbook and you‚Äôll learn about the idea of &lt;em&gt;Learned Helplessness&lt;/em&gt;. In short ‚Äî a bunch of psychologists spent their valuable time zapping maze-imprisoned rats with high voltage tasers. There was no pattern to their zapping, it was done at random. The rats slowly spiralled into a malaise of confusion, frustration and depression due to their inability to control the situation.&lt;/p&gt;

&lt;p&gt;Control is the key factor here. The rats couldn‚Äôt start or stop doing something to change the outcome ‚Äî they had zero control ‚Äî so they just gave up on their pretty miserable lives.&lt;/p&gt;

&lt;p&gt;A lot of software aligns with this sentiment ‚Äî although (in most cases) I‚Äôm sure it‚Äôs unintentional. Users wander around some maze of a programmer‚Äôs design, trying to figure out the best way to get their job done. Each time a button doesn‚Äôt do what they expect, a search doesn‚Äôt return a sensible set of results, or half a day‚Äôs work is lost because they forgot to click the save button, a tiny notch of frustration is logged. Over days and weeks, these fragments of frustration build up until, one thankless day, the laptop gets thrown out of the 12th-floor window in an utter rampage!&lt;/p&gt;

&lt;p&gt;Software should be predictable. The user has to feel in control, and unpredictability takes that away. Stick to the usual conventions, and make software as intuitive as possible.&lt;/p&gt;

&lt;p&gt;Software should be transparent. It should be possible to build a simple mental model of what the application is doing. If it has murky corners it‚Äôll sneak up on you by surprise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-programming-side-effects"&gt;
  &lt;/a&gt;
  In Programming (Side Effects)
&lt;/h2&gt;

&lt;p&gt;Take the following (admittedly terrible) function to print everything in a list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;print_ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# uh oh! ls is empty
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At a cursory glance, you might think it‚Äôs just a harmless function to print the content of your list, but there‚Äôs an insidious side-effect lying in wait. By using pop to get the elements from the list the function is stealing all your data! When you go to use it after the print, there‚Äôs nothing left.&lt;/p&gt;

&lt;p&gt;Functional programming attempts to combat side effects through immutability. You can‚Äôt just change the content of a list. If you want to mutate, you (in general) have to copy the data first. The original copy is left untouched.&lt;/p&gt;

&lt;p&gt;Rust takes a different approach called ownership. To allow a function to change inputs, you have to move the data into that function, transferring ownership of it. Only once owned can a function mutate data.&lt;/p&gt;

&lt;p&gt;But in general, most languages allow unfettered mutation of data. Be a good coder by adhering to the principle of least astonishment. Make it clear, through naming and documentation, when your code mutates an argument. Even better, tread carefully and don‚Äôt do it ‚Äî if you need to change data return a copy instead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment"&gt;Principle of Least Astonishment ‚Äî Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://principles-wiki.net/principles:principle_of_least_surprise"&gt;Principle of Least Surprise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://uxplanet.org/the-principle-of-least-astonishment-bc3f67991510"&gt;UX Planet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.joelonsoftware.com/2000/04/10/controlling-your-environment-makes-you-happy/"&gt;Controlling Your Environment Makes You Happy ‚Äî Joel on Software&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-final-word"&gt;
  &lt;/a&gt;
  A final word
&lt;/h2&gt;

&lt;p&gt;This post was written as part of a series on laws of software development for #PragProWriMo 2021 run by the &lt;a href="https://medium.com/@pragprog"&gt;The Pragmatic Programmers&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>design</category>
      <category>architecture</category>
      <category>psychology</category>
    </item>
    <item>
      <title>Cypress Best Practices</title>
      <author>Jordan Powell</author>
      <pubDate>Wed, 10 Nov 2021 18:57:05 +0000</pubDate>
      <link>https://dev.to/cypress/cypress-best-practices-55j0</link>
      <guid>https://dev.to/cypress/cypress-best-practices-55j0</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PPZSySI5ooc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#organizing-tests-logging-in-controlling-state"&gt;
  &lt;/a&gt;
  Organizing Tests, Logging In, Controlling State
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Sharing page objects, using your UI to log in, and not taking shortcuts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Test specs in isolation, programmatically log into your application, and take control of your application's state.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#selecting-elements"&gt;
  &lt;/a&gt;
  Selecting Elements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Using highly brittle selectors that are subject to change.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Use &lt;code&gt;data-*&lt;/code&gt; attributes to provide context to your selectors and isolate them from CSS or JS changes&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Recommended&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cy.get('button').click()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Never&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Worst - too generic, no context&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cy.get('.btn.btn-large').click()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Never&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Bad. Coupled to styling. Highly subject to change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cy.get('#main').click()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Sparingly&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Better. But still coupled to styling or JS event listeners.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cy.get('[name=submission]').click()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Sparingly&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Coupled to the name attribute which has HTML semantics.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cy.contains('Submit').click()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Depends&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Much better. But still coupled to text content that may change.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cy.get('[data-cy=submit]').click()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Always&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Best. Isolated from all changes.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#assigning-return-values"&gt;
  &lt;/a&gt;
  Assigning Return Values
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Trying to assign the return value of Commands with &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;var&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Use &lt;a href="https://docs.cypress.io/guides/core-concepts/variables-and-aliases"&gt;closures to access and store&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#visiting-external-sites"&gt;
  &lt;/a&gt;
  Visiting External Sites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; trying to visit or interact with sites or servers you do not control&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Only test what you control. Try to avoid requiring a 3rd party server. When necessary, always use &lt;code&gt;cy.request()&lt;/code&gt; to talk to 3rd party servers via their APIs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#having-tests-rely-on-the-state-of-previous-tests"&gt;
  &lt;/a&gt;
  Having tests rely on the state of previous tests
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Coupling multiple tests together&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Tests should always be able to be run independently from one another &lt;strong&gt;and still pass.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-tiny-tests-with-a-single-assertion"&gt;
  &lt;/a&gt;
  Creating "tiny" tests with a single assertion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Acting like you're writing unit tests.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Add multiple assertions and don't worry about it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#using-raw-after-endraw-or-raw-aftereach-endraw-hooks"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;after&lt;/code&gt; or &lt;code&gt;afterEach&lt;/code&gt; hooks
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Using &lt;code&gt;after&lt;/code&gt; or &lt;code&gt;afterEach&lt;/code&gt; hooks to clean up state.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Clean up state &lt;strong&gt;before&lt;/strong&gt; tests run.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#unnecessary-waiting"&gt;
  &lt;/a&gt;
  Unnecessary Waiting
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Waiting for arbitrary time periods using &lt;code&gt;cy.wait(Number)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Use route aliases or assertions to guard Cypress from proceeding until an explicit condition is met&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#web-servers"&gt;
  &lt;/a&gt;
  Web Servers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Trying to start a web server from within Cypress scripts with &lt;code&gt;cy.exec()&lt;/code&gt; or &lt;code&gt;cy.task()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Start a web server prior to running Cypress&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-a-global-baseurl"&gt;
  &lt;/a&gt;
  Setting a global baseUrl
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Using &lt;code&gt;cy.visit()&lt;/code&gt; without setting a &lt;code&gt;baseUrl&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Set a &lt;code&gt;baseUrl&lt;/code&gt; in your &lt;a href="https://docs.cypress.io/guides/references/configuration"&gt;configuration file (cypress.json by default)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read our entire Best Practices Guide at &lt;a href="https://docs.cypress.io/guides/references/best-practices"&gt;https://docs.cypress.io/guides/references/best-practices&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
      <category>e2e</category>
      <category>bestpractices</category>
    </item>
    <item>
      <title>Welcome Thread - v150</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 10 Nov 2021 18:54:58 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v150-33go</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v150-33go</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/0N8jZKHBq3smKbyITd/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/0N8jZKHBq3smKbyITd/giphy.gif" alt="Howdy" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. üëã &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Adding Radial Gradients to Tailwind CSS</title>
      <author>Mark Mead</author>
      <pubDate>Wed, 10 Nov 2021 18:52:42 +0000</pubDate>
      <link>https://dev.to/markmead/adding-radial-gradients-to-tailwind-css-1pe</link>
      <guid>https://dev.to/markmead/adding-radial-gradients-to-tailwind-css-1pe</guid>
      <description>&lt;p&gt;Recently, I added radial gradient classes to &lt;a href="https://hypercolor.dev/"&gt;Hypercolor&lt;/a&gt;. This is currently not something Tailwind CSS supports and it's unlikely it ever will. &lt;/p&gt;

&lt;p&gt;However, to add radial gradient classes into Tailwind CSS is very easy so don't worry. &lt;/p&gt;

&lt;p&gt;Simply add the following to your &lt;code&gt;tailwind.config.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;backgroundImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at center, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-t&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at top, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at bottom, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-l&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at left, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-r&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at right, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-tl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at top left, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-tr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at top right, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-bl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at bottom left, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-br&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at bottom right, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;},&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will allow you to write classes like &lt;code&gt;bg-gradient-radial-at-l from-fuchsia-300 via-green-400 to-rose-700&lt;/code&gt;, it's hard to tell if that would look awful or amazing, so I recommend using the &lt;a href="https://hypercolor.dev/generator"&gt;gradient generator on Hypercolor&lt;/a&gt; to see what works and what doesn't.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Learn SQL: Microsoft SQL Server - Episode 9: Aggregation in Where Clause</title>
      <author>Goran Kortjie</author>
      <pubDate>Wed, 10 Nov 2021 18:48:00 +0000</pubDate>
      <link>https://dev.to/ifierygod/learn-sql-microsoft-sql-server-episode-9-aggregation-in-where-clause-25bb</link>
      <guid>https://dev.to/ifierygod/learn-sql-microsoft-sql-server-episode-9-aggregation-in-where-clause-25bb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wr8_7tr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tele45r212abw91j336.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wr8_7tr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tele45r212abw91j336.png" alt="goran-says-hi" width="398" height="398"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many times we might need to use aggregated values in our &lt;strong&gt;Where Clause&lt;/strong&gt;, as a way of limiting the result set of aggregated values. You would think it would be as easy as adding a &lt;strong&gt;Where Clause&lt;/strong&gt; in our query statement, however we will see in this episode, this is not the case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gr3Bf7q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix1pr53eupqnfaio6gsb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gr3Bf7q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix1pr53eupqnfaio6gsb.gif" alt="skid-12" width="879" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By using the previous episode as an example, you can check that out on the link below to get up to speed. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's a quick read so once you're done head on back here! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IgeY80f2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0me8zjay4n4i68r464ie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IgeY80f2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0me8zjay4n4i68r464ie.png" alt="skid-cover-4" width="880" height="73"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ifierygod" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--piBIAdwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_sKyIPjI--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/444037/92f14527-35d0-4c0e-9079-d9fae6ffa61b.jpeg" alt="ifierygod"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ifierygod/learn-sql-microsoft-sql-server-episode-8-null-values-in-aggregation-22d2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn SQL: Microsoft SQL Server - Episode 8: NULL values in Aggregation&lt;/h2&gt;
      &lt;h3&gt;Goran Kortjie „Éª Nov 6 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#sql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#challenge&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
. 

&lt;p&gt;We might want to select all those customers whose order count is less than two times or more than two, three, four, five etc...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zJVC8ca6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8281hpafx5y20o5ahz4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJVC8ca6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8281hpafx5y20o5ahz4.gif" alt="skid-11" width="880" height="61"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Count&lt;/strong&gt; is in this example the aggregated value. However a &lt;strong&gt;Where Clause&lt;/strong&gt; does not take in an aggregated value. In this episode we are going to discuss how to use aggregated values to select our records.&lt;/p&gt;

&lt;p&gt;Lets move into SMSS and see this in practice.&lt;/p&gt;

&lt;p&gt;In this example we will be using the &lt;strong&gt;Sales.SalesOrderHeader&lt;/strong&gt; table. As we know this table stores the information for every order the customer has placed. There is essentially one record for each sales order, then there are &lt;strong&gt;CustomerID's&lt;/strong&gt; that stores information about the customer who placed this order.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zJVC8ca6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8281hpafx5y20o5ahz4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJVC8ca6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8281hpafx5y20o5ahz4.gif" alt="skid-11" width="880" height="61"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What we are trying to do here is to find the &lt;strong&gt;CustomerID&lt;/strong&gt; &lt;em&gt;Where&lt;/em&gt; the sales count is more &lt;code&gt;than X / less than X&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First we will start by using a &lt;strong&gt;SELECT&lt;/strong&gt; statement and select the &lt;strong&gt;CustomerID&lt;/strong&gt; and the &lt;strong&gt;SalesOrderID&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7UaFgAZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vcyz11kumb2zrzk4mkj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7UaFgAZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vcyz11kumb2zrzk4mkj.gif" alt="discussion-1" width="600" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What we need now is the &lt;strong&gt;Count&lt;/strong&gt; of &lt;strong&gt;Sales Orders&lt;/strong&gt;. Therefore we wrap the &lt;strong&gt;salesOrderId&lt;/strong&gt; in the &lt;strong&gt;Count&lt;/strong&gt; function. Notice we are grouping by the &lt;strong&gt;Customer level&lt;/strong&gt;, meaning for each customer give us the count of their &lt;strong&gt;salesOrderId's&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1NI9FBZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuug4oqwb2fnr1gwn4xm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1NI9FBZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuug4oqwb2fnr1gwn4xm.gif" alt="skid-7" width="879" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally we need to tell SQL where to group it by and in this case we group it by the &lt;strong&gt;CustomerID&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k0KqS_C6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxv72b9ai3791f4dulsi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k0KqS_C6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxv72b9ai3791f4dulsi.gif" alt="discussion-2" width="600" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make it easier to understand we could add an &lt;strong&gt;Alias&lt;/strong&gt; to the &lt;strong&gt;Count&lt;/strong&gt; function that wraps around &lt;strong&gt;salesOrderId&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1NI9FBZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuug4oqwb2fnr1gwn4xm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1NI9FBZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuug4oqwb2fnr1gwn4xm.gif" alt="skid-7" width="879" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to only select the &lt;em&gt;customers&lt;/em&gt; whose &lt;em&gt;sales order&lt;/em&gt; &lt;em&gt;Count&lt;/em&gt; is less than two, in this scenario, normally we would use the &lt;strong&gt;Where clause&lt;/strong&gt;. However if we try this we will see SSMS throws an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sJvz4Qpo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8oid9kl767fuu10601z4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sJvz4Qpo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8oid9kl767fuu10601z4.gif" alt="discussion-3" width="600" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of &lt;strong&gt;Where&lt;/strong&gt;, we replace it with &lt;strong&gt;Having&lt;/strong&gt;. Also notice we cannot use an &lt;strong&gt;Alias&lt;/strong&gt; when we use &lt;strong&gt;Having&lt;/strong&gt;, we must use the complete &lt;strong&gt;Count&lt;/strong&gt; function query string containing the &lt;strong&gt;salesOrderId&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kd1QhKW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfx32rkh0ly1zixlmb9y.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kd1QhKW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfx32rkh0ly1zixlmb9y.gif" alt="discussion-4" width="600" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voila! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gr3Bf7q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix1pr53eupqnfaio6gsb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gr3Bf7q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix1pr53eupqnfaio6gsb.gif" alt="skid-12" width="879" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can see all the &lt;em&gt;customers&lt;/em&gt; whose &lt;em&gt;sales order&lt;/em&gt; &lt;em&gt;Count&lt;/em&gt; is less than two. We could even change the operator to less than equal to two, which in this case will return customers whose sale orders are two and less than two in the result set.&lt;/p&gt;

&lt;p&gt;Awesome right!ü•≥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UIBWAxqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpchmuphmj1xueik4m90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UIBWAxqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpchmuphmj1xueik4m90.png" alt="sql" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keep in mind, for any of the &lt;em&gt;aggregated functions&lt;/em&gt;, such as &lt;strong&gt;MIN&lt;/strong&gt;, &lt;strong&gt;MAX&lt;/strong&gt;, &lt;strong&gt;AVG&lt;/strong&gt; or &lt;strong&gt;SUM&lt;/strong&gt;, you will have to use &lt;strong&gt;HAVING&lt;/strong&gt; if you want to restrict your result set, by those aggregated values.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IgeY80f2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0me8zjay4n4i68r464ie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IgeY80f2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0me8zjay4n4i68r464ie.png" alt="skid-cover-4" width="880" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this episode, happy learning...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---0aaf1vl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s61js9hqsv5datguo9hu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---0aaf1vl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s61js9hqsv5datguo9hu.gif" alt="meditation" width="640" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>sql</category>
      <category>database</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Who can be a Programmer?</title>
      <author>Vicki (she/they)</author>
      <pubDate>Wed, 10 Nov 2021 18:41:36 +0000</pubDate>
      <link>https://dev.to/vickilanger/who-can-be-a-programmer-33fm</link>
      <guid>https://dev.to/vickilanger/who-can-be-a-programmer-33fm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#who-can-be-a-programmer"&gt;
  &lt;/a&gt;
  Who can be a programmer?
&lt;/h2&gt;

&lt;p&gt;Everyone! &lt;/p&gt;

&lt;p&gt;Coding is for everyone and anyone regardless of our differences. Coding also doesn‚Äôt require you to be a math wizard. That doesn‚Äôt mean understanding some math won‚Äôt make things easier. At the very least, a basic understanding of addition, subtraction, multiplication, division, and remainders from division will be helpful.&lt;/p&gt;

&lt;p&gt;There are tons of people, just like you, throughout the not-too-distant past and the present who have done and are doing amazing things with code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#people-who-have-done-and-are-doing-cool-things-with-code"&gt;
  &lt;/a&gt;
  People who have done and are doing cool things with code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--axCiFv7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn45pajv2i2monb2cj7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--axCiFv7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn45pajv2i2monb2cj7x.png" alt="photo of Timnit Gebru, an Ethiopian computer scientist wearing a beautiful red scarf" width="500" height="500"&gt;&lt;/a&gt;&lt;br&gt;
Timnit Gebru is a computer scientist who led a team on the ethics of artificial intelligence (AI). She works to remove bias that has been built into programs that make unethical decisions. She helps others make programs that are inclusive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ibX9Y0Zh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pphqlk0gpnaz8z39xqkm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ibX9Y0Zh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pphqlk0gpnaz8z39xqkm.png" alt="photo of Victoria Ch√°vez, a Latina computer scientist wearing a pretty burgundy shirt standing next to a lion thingy" width="500" height="500"&gt;&lt;/a&gt;&lt;br&gt;
Victoria Ch√°vez took a coding class in school and was hooked. During a hackathon, she built an app, SNAPy, that helped people find out which stores accept food stamps. She‚Äôs also helping disabled people have better access to programming.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9QGw3h3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v9jyiupbg49pvq219w3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9QGw3h3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v9jyiupbg49pvq219w3.png" alt="photo of John Henry Thompson, an Jamaican computer scientist sitting at a table with a laptop" width="500" height="500"&gt;&lt;/a&gt;&lt;br&gt;
John Henry Thompson created a whole language that makes visuals in computer software. He basically made video games, modern cartoons, and web design possible&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MZEkvZJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ggf3g0aijpleowhws8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MZEkvZJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ggf3g0aijpleowhws8e.png" alt="Photo of Ra√∫l Rojas Gonz√°lez, a hispanic computer scientist standing next to one of his robots" width="500" height="500"&gt;&lt;/a&gt;&lt;br&gt;
Ra√∫l Rojas Gonz√°lez led a self-driving car company. He has also won a Robot Soccer World Cup competition with a team of small AI robots. He also created a prize for scientific achievement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UnuQKQqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgv6xf5c5nq5y9zu7y2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UnuQKQqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgv6xf5c5nq5y9zu7y2y.png" alt="Photo of Raj Reddy, an Indian computer scientist wearing smart blazer" width="500" height="500"&gt;&lt;/a&gt;&lt;br&gt;
Raj Reddy has done many things with robotics and AI. He laid the groundwork for us to have the voice assistants like Siri, Google Home, Alexa, and more. He also founded the Robotics Institute at Carnegie Mellon University.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ki3qjQow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rsfvytdd48m6qr3u12t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ki3qjQow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rsfvytdd48m6qr3u12t.png" alt='lots of squiggly arrows pointing at the word "you" in the center of a square' width="500" height="500"&gt;&lt;/a&gt;&lt;br&gt;
You are reading this and are about to create so many cool projects. Whether or not you pursue a career with code, you will have learned many new ways to think about things. You will go on to do big things with your life.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Incident Remediation With Jenkins and Terraform</title>
      <author>Scott Lasica</author>
      <pubDate>Wed, 10 Nov 2021 18:38:24 +0000</pubDate>
      <link>https://dev.to/youngshatner/incident-remediation-with-jenkins-and-terraform-4a7i</link>
      <guid>https://dev.to/youngshatner/incident-remediation-with-jenkins-and-terraform-4a7i</guid>
      <description>&lt;p&gt;Experienced DevOps personnel are very familiar with tools like Jenkins to create workflows and Terraform to automate orchestration. But are these the best tools to use when firefighting production cloud incidents?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Jenkins?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.jenkins.io/"&gt;Jenkins&lt;/a&gt; is an open source automation server for &lt;a href="https://www.fylamynt.com/post/sre-vs-devops"&gt;DevOps&lt;/a&gt;. Jenkins has ~1800 plugins that support many of the tools used in build and deployment scenarios. The plugins cover build management, source code management, administration, platforms and UI. Jenkins was designed specifically for CI/CD (continuous integration / continuous delivery) environments as well as automating other routine development tasks.&lt;/p&gt;

&lt;p&gt;Jenkins still requires scripts to be written for the steps, but gives a framework for integrating the entire chain of build / test / deploy. These "pipeline scripts" are stored in a file called Jenkinsfile, which is stored in your repo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Terraform?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt; is an open source infrastructure as code (IaC) software tool. Terraform allows you to write code in a higher level language to manage operations in the cloud. Terraform supports ~100 cloud providers, and gives you the ability to create new resources, manage existing ones and destroy those that are no longer needed.&lt;/p&gt;

&lt;p&gt;Terraform has a concept called modules. Terraform modules are like functions in programming languages. They provide a standard interface (input/output) for creating resources. Essentially, modules allow for consistent (and debugged) common actions‚Ää-‚Ääagain just like you'd create a function that encapsulates many actions to perform a higher level action.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are Jenkins and Terraform suitable for incident remediation?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To answer this question, we can look at the tools used to respond to and resolve cloud incidents. First, a monitoring tool needs to detect the issue. Popular products in this space include Datadog and New Relic. When inspecting the Datadog plugin for Terraform, you quickly learn that Terraform is simply configuring and deploying Datadog resources. When you get the next step in resolution, you typically use an incident management tool like PagerDuty or Opsgenie. Inspecting the Terraform plugins for those tools reveals the same situation. Terraform is designed primarily for creation, configuration and destruction of cloud resources due to its declarative nature.&lt;/p&gt;

&lt;p&gt;Could Terraform be used to automate portions of a cloud incident &lt;a href="https://www.fylamynt.com/post/whats-a-runbook"&gt;runbook&lt;/a&gt;/workflow? Absolutely, but since this wasn't the intended use case a lot of custom code will need to be written to tie the tools together, requiring not only on-going maintenance but also opens the door to edge-cases and bugs. Facebook's outage in late 2021 is a classic example of this problem. They stated they had written code to check for errors in deployment scripts but that code had a bug in it, and allowed the error to propagate across the entire Facebook/Instagram/WhatsApp footprint cutting it off from the Internet.&lt;/p&gt;

&lt;p&gt;Now take a look at Jenkins. Again, incident response and remediation was never the intended use case for Jenkins. It excels at CI/CD automation, making the lives of developers and DevOps personnel much easier. However, This is even more of a square peg into a round hole type of approach. The pipelines do operate like workflows, but have none of the logic or connections built in for the remediation steps required. You would essentially be writing most of the code required to make this work, and at that point you might as well just ditch Jenkins and wire everything together by hand.&lt;/p&gt;

&lt;p&gt;Fylamynt has created the world's first enterprise ready low code platform for building, running and analyzing SRE cloud workflows. With Fylamynt an &lt;a href="https://www.fylamynt.com/post/who-are-sres-and-what-do-they-do"&gt;SRE&lt;/a&gt; can automate the parts of the runbook that are the most time consuming, allowing them to make decisions where their expertise is needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fylamynt.com/"&gt;Try Fylamynt for free -&amp;gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sre</category>
      <category>devops</category>
      <category>cloudnative</category>
      <category>cloudskills</category>
    </item>
  </channel>
</rss>
