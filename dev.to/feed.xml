<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Push Notifications in ReactJS with OneSignal</title>
      <author>Pato</author>
      <pubDate>Mon, 25 Jan 2021 01:08:50 +0000</pubDate>
      <link>https://dev.to/devpato/push-notifications-in-reactjs-with-onesignal-5bon</link>
      <guid>https://dev.to/devpato/push-notifications-in-reactjs-with-onesignal-5bon</guid>
      <description>&lt;p&gt;In this tutorial, you are going to learn how to communicate with the users of your application by integrating push notifications and subscriptions into your ReactJS application using OneSignal. &lt;/p&gt;

&lt;h2&gt;Topics covered in this tutorial&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ReactJS&lt;/li&gt;
&lt;li&gt;Push Notifications&lt;/li&gt;
&lt;li&gt;OneSignal Segments&lt;/li&gt;
&lt;li&gt;Audience&lt;/li&gt;
&lt;li&gt;Subscriptions&lt;/li&gt;
&lt;li&gt;One Signal's SDK&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we begin, it's important to define what a push notification is.&lt;/p&gt;

&lt;h2&gt;What is a Push Notification?&lt;/h2&gt;

&lt;p&gt;Push notifications are clickable pop-up messages that appear on your users’ browsers irrespective of which device they use or which browser they are on. Subscribers can be anywhere on the browser and still receive these messages even if the website or app are not running.&lt;/p&gt;

&lt;p&gt;Browser push notifications are different from in-app notifications because in-app notifications appear only when triggered by an existing application on your mobile device; browser push notifications can be triggered through browsers on any device as long as the user subscribes to receive your notifications. It is an instant mode of automated, direct communication between a website and its end users. &lt;/p&gt;

&lt;h2&gt;Time to get our hands dirty!!! 🎊&lt;/h2&gt;

&lt;p&gt;In this tutorial, we are going to use OneSignal to send the push notifications and handle the subscriptions.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;OneSignal is the market leader in customer engagement, powering mobile + web push, email, SMS &amp;amp; in-app messages.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;The first thing that we have to do is to create an account inside of &lt;a href="https://onesignal.com/"&gt;OneSignal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) Once you have created an account, you will create a new application&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f82_Hfgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5yotjpw61gjafolh46fy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f82_Hfgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5yotjpw61gjafolh46fy.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) When creating the app, you can give it whatever name you want. Make sure sure the "No Organization" option is selected from the organizations dropdown. Lastly, click on Web Push and click &lt;strong&gt;NEXT&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BtSZbHP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gyx66uy5zprn0jtobiva.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BtSZbHP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gyx66uy5zprn0jtobiva.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Configure your Web Push by entering the website's name and by entering the site's URL then click &lt;strong&gt;SAVE&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Notes&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;-Keep in mind that your application has to be hosted in a server for the Push Notifications to work. If you want to deploy your website in a quick and easy way, follow &lt;a href="https://dev.to/thisdotmedia/web-app-deployment-with-firebase-in-2-minutes-4bo8"&gt;this&lt;/a&gt;  2min tutorial.&lt;/i&gt; &lt;/p&gt;

&lt;p&gt;&lt;i&gt;-You can enter a default URL icon but this is an option, not mandatory&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qShkVCfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6fxe2rvvhsbf3coib32m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qShkVCfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6fxe2rvvhsbf3coib32m.png" alt="OneSignal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) Download the SDK files and save them in a place you will remember in your computer because we are going to use them later on.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;The .zip file you are downloading contains 2 files. These are the Service Workers provided by OneSignal. To learn more about Service Workers in general read &lt;a href="https://dev.to/thisdotmedia/intro-to-pwa-and-service-workers-15d4"&gt;this&lt;/a&gt; article.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DO NOT CLOSE THE CONFIG PAGE. WE WILL BE BACK TO IT SOON.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Integrating OneSignal To Your ReactJS App&lt;/h2&gt;

&lt;p&gt;Feel free to clone the repo with the basic structure of the React application where we will integrate OneSignal or follow the steps given in this tutorial to integrate OneSignal into your own React application.&lt;/p&gt;

&lt;h3&gt;Github repo&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/devpato/onesignal-demo"&gt;https://github.com/devpato/onesignal-demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-initial state branch (INIT)&lt;br&gt;
-final code branch (MAIN)&lt;/p&gt;

&lt;p&gt;5) Inside of the React project, the first thing you are going to do is to add the services worker files you downloaded into your &lt;strong&gt;PUBLIC&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;You should be adding 2 files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OneSignalSDKUpdaterWorker.js&lt;/li&gt;
&lt;li&gt;OneSignalSDKWorker.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tohJdvtW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7d7cpa213fzer286v3xy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tohJdvtW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7d7cpa213fzer286v3xy.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6) In the same folder (PUBLIC) you have a file called &lt;strong&gt;Index.html&lt;/strong&gt;. Go to that file and paste the following line of code inside of you &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.onesignal.com/sdks/OneSignalSDK.js"&lt;/span&gt; &lt;span class="na"&gt;async=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Your file should look something like &lt;a href="https://github.com/devpato/onesignal-demo/blob/main/public/index.html"&gt;this&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
.
.
.
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;One Signal - React&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.onesignal.com/sdks/OneSignalSDK.js"&lt;/span&gt; &lt;span class="na"&gt;async=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;7) Open the App.js file located inside of the &lt;strong&gt;SRC&lt;/strong&gt; folder and paste the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OneSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OneSignal&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;OneSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OneSignal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This code will allows us to have access to the OneSignal object that we injected into our app thanks to the SDK we added in the &lt;strong&gt;index.html&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;8) In the same file, inside of the &lt;code&gt;useEffect&lt;/code&gt; add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;OneSignal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;OneSignal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1a9bbed2-9294-4192-a736-01b461cb389a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//STEP 9&lt;/span&gt;
          &lt;span class="na"&gt;promptOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;slidedown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;actionMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;We'd like to show you notifications for the latest news and updates about the following categories.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;acceptButtonText&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;OMG YEEEEESS!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;cancelButtonText&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NAHHH&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                      &lt;span class="p"&gt;{&lt;/span&gt;
                          &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ReactJS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="p"&gt;},&lt;/span&gt;
                      &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;angular&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Angular&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="p"&gt;},&lt;/span&gt;
                      &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;VueJS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="p"&gt;},&lt;/span&gt;
                      &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="p"&gt;}&lt;/span&gt;
                  &lt;span class="p"&gt;]&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;     
          &lt;span class="p"&gt;}&lt;/span&gt; 
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;welcomeNotification&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;One Signal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Thanks for subscribing!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; 
      &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;//Automatically subscribe to the new_app_version tag&lt;/span&gt;
        &lt;span class="nx"&gt;OneSignal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendTag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new_app_version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new_app_version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagsSent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Callback called when tag has finished sending&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new_app_version TAG SENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagsSent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's talk about the previous code. The OneSignal object can only be initialized once &lt;code&gt;.init()&lt;/code&gt;. In this example we are triggering the initialization as soon as the App component loads. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;promptOptions&lt;/code&gt; property will hold all the information related to the &lt;a href="https://documentation.onesignal.com/docs/permission-requests"&gt; prompt message &lt;/a&gt; we are displaying to the user.&lt;/p&gt;

&lt;p&gt;slidedown property is the type prompt that will slide down from the top of your page. This type of prompt has multiple properties you can use to customize it. Let's take a look to some of those properties:&lt;/p&gt;

&lt;p&gt;-actionMessage: This is the main message to display in the prompt.&lt;/p&gt;

&lt;p&gt;-acceptButtonText: Text for the accept button inside of the prompt.&lt;/p&gt;

&lt;p&gt;-cancelButtonText: Text for the cancel button inside of the prompt.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-aAVMDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iqhwdixo65ibdj06o3cb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-aAVMDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iqhwdixo65ibdj06o3cb.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;categories: Property that takes an array of tags. The &lt;a href="https://documentation.onesignal.com/docs/slide-prompt#category-tags"&gt;Category Slidedown&lt;/a&gt; works just like the regular Slide Prompt except it also allows subscribers to opt-in or opt-out of notification categories set as Data Tags.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UbJhtron--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wypcvjp05oi05gfkb598.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UbJhtron--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wypcvjp05oi05gfkb598.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;welcomeNotification: Displays a in-app notification after we have clicked on the accept button inside of the prompt and after the user has allowed the notifications in the app and after.&lt;/p&gt;

&lt;p&gt;Finally, at the bottom of the code provided above, you will see the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;OneSignal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendTag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new_app_version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new_app_version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagsSent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new_app_version TAG SENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagsSent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://documentation.onesignal.com/docs/data-tag-implementation#sdk-tagging-methods"&gt;sendTags&lt;/a&gt; will send a tag to OneSignal specifying the tag the users belong too. We can use these tags to target users by creating segments for things like marketing campaigns. The cool thing about sendTag is that you can use this method in other parts of your app without the need of a prompt. For example you can use them on a click of a button. &lt;/p&gt;

&lt;p&gt;9) Now, let's go back to the configuration page inside the OneSignal website. Once you are in there, you are going to copy the &lt;i&gt;appId&lt;/i&gt; inside of the "Add code to site" section. Your app ID is unique per application. If you try to use mine, it won't work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6FQdVOcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n8coi256xi4fhht5mz54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6FQdVOcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n8coi256xi4fhht5mz54.png" alt="OneSignal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you have copied the appId, go back to your App.js file inside of your ReactJS app and inside of the OneSignal object assign your copied appId to the appId property.&lt;/p&gt;

&lt;p&gt;10) Now build you app and deploy it to your server.&lt;/p&gt;

&lt;h3&gt;YAY! we are done with the code part!&lt;/h3&gt;

&lt;p&gt;11) Navigate to your app's website. You should see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HIL7Ofqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kkqkpo57dprfcmesyyn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HIL7Ofqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kkqkpo57dprfcmesyyn7.png" alt="OneSignal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-Click on Allow on the OneSignal prompt&lt;/p&gt;

&lt;p&gt;After you have clicked allow on the OneSignal prompt we will see this browser message&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9JXPSBdO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p1av7crv0kpzp7tydtwi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9JXPSBdO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p1av7crv0kpzp7tydtwi.png" alt="OneSignal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click "Allow" and you will see the in-app (welcomeNotification)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rbn-dMkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/85m2ihxgatlu8e8z79oq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rbn-dMkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/85m2ihxgatlu8e8z79oq.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;The OneSignal Platform&lt;/h2&gt;

&lt;p&gt;12) Let's go back to the OneSignal website. We are going to create a new &lt;a href="https://documentation.onesignal.com/docs/segmentation"&gt;Segment&lt;/a&gt; to target specific users for our marketing campaign.&lt;/p&gt;

&lt;p&gt;On the top navigation bar of the website, click where it says "audience". Once you are in that section, click the blue button that says "New Segment"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UI2b-jeL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/61sjul9hxjf8uvsc58ci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UI2b-jeL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/61sjul9hxjf8uvsc58ci.png" alt="OneSignal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A modal as the following will appear&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yh0cKDv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xtgqnfgq0olot0qakc35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yh0cKDv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xtgqnfgq0olot0qakc35.png" alt="OneSignal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter whatever name you want for you Segment and click on "User tag".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A1rn50IB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/atql60ln12ktmvq6mif5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A1rn50IB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/atql60ln12ktmvq6mif5.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create the user segments rules. Once you are done, click on the blue button "Create Segment".&lt;/p&gt;

&lt;h3&gt;YAY! you have officially created you first Segment.&lt;/h3&gt;

&lt;h2&gt;Time to test our application!&lt;/h2&gt;
 

&lt;p&gt;13) We are going to create our first Push Notification using OneSignal. Navigate to Messages and click on the blue button "New Push".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--no4nDi9Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfubtltq7j7ij14ld9mt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--no4nDi9Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfubtltq7j7ij14ld9mt.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the "Audience" section select "Send to Particular Segment(s)". Remove the segment of "Subscribed Users" and add the Segment you just created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TK1rq1jr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z2grbfw8l82prox0hc3j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TK1rq1jr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z2grbfw8l82prox0hc3j.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the "Message" section enter the title, message, and icon you want the Push notification to have.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8LhqoDq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ata48hg1k0xju9z1pxc9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8LhqoDq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ata48hg1k0xju9z1pxc9.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, in the "Schedule" section select "Begin sending immediately" and "Send immediately" and click on the blue button "Confirm"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bLHE7BS6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qkjrbimxxos4llm4d0b1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bLHE7BS6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qkjrbimxxos4llm4d0b1.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Review your message before sending and click "Send message" and see the magic happening :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rp96O98c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e1uviep6se76o6uwahox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rp96O98c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e1uviep6se76o6uwahox.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will receive see your first Push notification coming from OneSignal!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JNyhwXTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sbw66gmadezddvirknnj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JNyhwXTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sbw66gmadezddvirknnj.png" alt="OneSignal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;OneSignal is a great tool to interact with the application's users. OneSignal is a great communication tool. This tool allows you not only to send Push notifications but also to target specific segments of users you want to interact with. OneSignal has a great Dashboard where you can keep track of how your users are interacting with your Push notifications or any other tool inside of OneSignal used to communicate with the users like SMS, emails, and more. I have used other technologies to send Push notifications and from my point of view, OneSignal was the one that was the easiest to integrate into your website. You can integrate it to a regular HTML/CSS/JS website with almost no programming experience.&lt;/p&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://vwo.com/push-notifications/"&gt;https://vwo.com/push-notifications/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://documentation.onesignal.com/docs"&gt;https://documentation.onesignal.com/docs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>My 2020 Annual Review: Strange Ride</title>
      <author>Piotr Murach</author>
      <pubDate>Sun, 24 Jan 2021 21:56:28 +0000</pubDate>
      <link>https://dev.to/piotrmurach/my-2020-annual-review-strange-ride-b25</link>
      <guid>https://dev.to/piotrmurach/my-2020-annual-review-strange-ride-b25</guid>
      <description>&lt;p&gt;For a few days I debated whether there is much point in writing this review. I had a lot of enthusiasm going into 2020 and couldn't wait to begin working on my ideas. But then this C letter thing happened, spelling the end for all of my best laid plans. I went from feeling what can best be described as an emoji face with starry eyes to looking like the Edvard Munch's screamer.&lt;/p&gt;

&lt;p&gt;Despite all the turmoil, there were many good events and experiences that had a positive influence on me and provided valuable insights worth sharing. Similar to the previous year, my process will be guided by the following questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What went well this year?&lt;/li&gt;
&lt;li&gt;What didn't go so well this year?&lt;/li&gt;
&lt;li&gt;What did I learn?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, grab your favourite beverage and make yourself comfortable. We're going to look through some of my personal highlights and disappointments. We will finish by trying to tease out some lessons and talk about my aspirations for the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-what-went-well-this-year" class="anchor"&gt;
  &lt;/a&gt;
  1. What went well this year?
&lt;/h2&gt;

&lt;p&gt;Here's how I turned these chaotic times into positive outputs:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open-sourcing software.&lt;/strong&gt; This was probably one of the most productive times I had in open source. Compared to previous years, I didn't publish as many new Ruby gems. Instead, my focus shifted to maintenance and improving the quality of what I already created.&lt;/p&gt;

&lt;p&gt;I resolved many outstanding issues. Without being exact, I think I've dealt with more than a hundred open tickets and pull requests. On top of that, I worked on many long requested features. As a result, there are many projects without any open issues now. An open source maintainer dream turning into reality.&lt;/p&gt;

&lt;p&gt;All this activity resulted in 56 Ruby gem releases. To my surprise, by the end of the year the total gem download count crossed the &lt;a href="https://rubygems.org/profiles/piotrmurach"&gt;150 million&lt;/a&gt; mark. A 50 million increase in one year alone feels crazy. Knowing that more and more people use my libraries motivates me.&lt;/p&gt;

&lt;p&gt;My main focus went to updating all of the TTY toolkit components. That's nearly 25 gems. Whilst doing the various updates, I couldn't resist creating new components. So in February, I released the &lt;a href="https://github.com/piotrmurach/tty-exit"&gt;tty-exit&lt;/a&gt; gem. This is a relatively small but essential gem that will fill a need in the TTY framework for more readable exit codes.&lt;/p&gt;

&lt;p&gt;In May, I published the &lt;a href="https://github.com/piotrmurach/tty-option"&gt;tty-option&lt;/a&gt; gem for parsing command line arguments, flags and environment variables. I put tons of work into the release. More than 300 commits made it into the first 0.1 version. This is probably the most solid first release I've ever done. It brings many powerful features like parsing map arguments which is a common way of specifying flag values in terminal tools like the Docker.&lt;/p&gt;

&lt;p&gt;Now that all of the TTY components are updated(as evidenced in the image below), the plan is to release a new version of the toolkit in 2021. I'm excited about the future and where the TTY ecosystem of gems is going to be!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TTfAnspT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m1hllvvmuvediqyqf85s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TTfAnspT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m1hllvvmuvediqyqf85s.jpg" alt="TTY Ruby gems and their dependency graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sponsorship.&lt;/strong&gt; GitHub made it super easy for individual developers and now companies to sponsor open source projects and their creators. This has a huge potential to make open source more sustainable. I'm grateful and feel fortunate to have gained a few new &lt;a href="https://github.com/sponsors/piotrmurach"&gt;sponsors&lt;/a&gt;. I appreciate their generosity and support!&lt;/p&gt;

&lt;p&gt;To me, the sponsorship is more than money, it's a real vote of confidence and shows approval that what I create matters. I'm humbled to learn that there are people wanting for the TTY and the newer Strings ecosystem of gems to succeed. I hope that companies will also contribute to supporting the future development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reading.&lt;/strong&gt; What do you do when there is nowhere to go? You stay home and read books! I read more than 50 books. Honestly, I haven't planned to read that many but they served as a great escape. The topics that I've picked were a true mixture. Sticking with the more technical theme of this review, a couple of books stood out for me the most.&lt;/p&gt;

&lt;p&gt;The first book that I enjoyed a lot is the Phoenix Project. A tale about DevOps that didn't disappoint and lived up to its hype. I never read a book that introduces technical concepts by telling a fictional story. Who could expect that telling a story is such a good concept, heh? Though the characters were made up, the story felt real and very believable. I could relate to many issues found in bridging the gap between IT services and the Development team. I'd even say that's where I spent most of my energy in the recent years. So yes, sometimes, the dialogues and problems really felt close to the bone.&lt;/p&gt;

&lt;p&gt;The Working in Public was also a very relatable book. Nadia Eghbal did a great job analysing the open source community and discussing the evolution of open source. I felt a bit like a lab rat in an experiment. It was a weird feeling being in a way analysed as part of an open source ecosystem. The quadrant diagram that explains four different ways that open source projects are structured was particularly novel and interesting. As I recall, I classified myself as the Stadium type open source developer. The book definitely grew my awareness and strengthened my thoughts around maintenance and long-term sustainability in open source.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coding.&lt;/strong&gt; Given the extra hours in the day, I dove into Crystal programming language. Even though Crystal is still below major release, I haven't had any issues with it. The experience felt rather smooth. The language has Ruby inspired syntax but you would be wrong to think that it doesn't offer much beyond that. Quite the contrary. Crystal is a compiled language and thus super fast. It also provides strong type guarantees that lead to features not present in Ruby. For example, you can overload method definitions. In most cases, the compiler doesn't force you to provide type signatures as the type inference is very good.&lt;/p&gt;

&lt;p&gt;At last, I also dipped my toes into a Lisp-like language. I chose to learn the Racket language. This experience certainly felt like a bigger departure than Crystal. Even though it is a dynamic language, it's hard to find parallels with any languages that I had a chance to code in so far. The syntax feels rather strange to type and look at in my editor. Writing an equivalent of a class is a journey into many nested methods in an ever growing forest of brackets. It is an aesthetic that I haven't had to deal with before. I like it though when a language stretches my coding skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-what-didnt-go-so-well-this-year" class="anchor"&gt;
  &lt;/a&gt;
  2. What didn't go so well this year?
&lt;/h2&gt;

&lt;p&gt;Now let's look at some things from my “not so great” list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Blogging.&lt;/strong&gt; I started the year with an intention of publishing one article per month. This seemed like a reasonable goal given my workloads and past experience. But I managed to only write three articles which includes a yearly review.&lt;/p&gt;

&lt;p&gt;Out of the three articles, the "&lt;a href="https://dev.to/piotrmurach/writing-a-ruby-gem-specification-5e4g"&gt;Writing a Ruby Gem Specification&lt;/a&gt;" article attracted the most interest. It was featured in a prominent Ruby community newsletter Ruby Weekly underneath a biblical image with a prophetic feel to it. I got a chuckle out of it. Based on comments, emails and reviews a lot of people found the article useful. In the third and, as it turned out, the last article of 2020 titled "&lt;a href="https://dev.to/piotrmurach/looking-inside-a-ruby-gem-34id"&gt;Looking Inside a Ruby Gem&lt;/a&gt;&lt;a&gt;&lt;/a&gt;", I further built on the topic of explaining RubyGems packaging system.&lt;/p&gt;

&lt;p&gt;Then my enthusiasm waned. I lost momentum and found it hard to get back into writing again. I tried writing for a while on a few other topics but nothing felt solid enough or ready to be published. Maybe the weight of expectations that I put on myself gave me the famous writer's block? Not sure. Despite my meagre effort my blog readership has tripled. I want to turn the corner in 2021 and write more but without expectation of a regular publishing schedule. The bar is set very low indeed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Travel and conferences.&lt;/strong&gt; By the end of 2019, I made a grand plan to visit a few countries mostly in Europe. France, Finland, Russia and Japan were top of my list. I was excited! Well... as you probably expect the grand tour of Europe didn't happen. I visited only one country from the list, France. In the middle of February, I boarded the Eurostar train from London to Paris to attend the &lt;a href="https://2020.rubyparis.org/"&gt;ParisRB&lt;/a&gt;&lt;a&gt;&lt;/a&gt; conference. The first and only conference I attended in person that year. At that point I was still blissfully unaware.&lt;/p&gt;

&lt;p&gt;The ParisRB was a two day conference held in a university setting. I travelled on the crowded metro and trams to reach the venue which now feels surreal. The conference hosted many great speakers. In particular, Paolo "Nusco" Perrotta told a great origin story of what we now know as a deep learning domain. I was impressed with his presentation skills and the ability to draw in the audience. In another talk I liked a lot, a duet of Mélanie and Alexandre from the Doctolib company talked about challenges with onboarding new developers to a large codebase. I enjoyed hearing about how they structure their inhouse mentoring programs and automate workflows to keep their large codebase consistent.&lt;/p&gt;

&lt;p&gt;In between the presentations, I talked to many developers and had a chance to speak with some of the speakers. Being able to talk to like-minded people in real life is what I miss the most from the conference. Only now I realise what a privilege that was. The conference ended in quite an emotional way and a few people had tears as if they knew that this could be the last such conference in a long time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercising.&lt;/strong&gt; I continued going to the gym until the middle of March. I kept my gym membership for a few months longer expecting this whole pandemic will end soon and normal life resume. It shouldn't be a surprise that my general well being plummeted. I continued exercising at home, but lack of weights and a small space made it impossible to match my prior training routines.&lt;/p&gt;

&lt;p&gt;During the summer, I bought a basketball and started playing at a nearby court. Initially, I had little stamina and gassed out pretty quickly. I didn't give up though as basketball was always my number one sport. Playing has rekindled my passion and I even got to do a few dunks. In autumn, I bought some cycling gear and rode my bike regularly around woods and lakes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-what-did-i-learn" class="anchor"&gt;
  &lt;/a&gt;
  3. What did I learn?
&lt;/h2&gt;

&lt;p&gt;My monk-like living has made me realise and stressed the importance of some things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep reaching out.&lt;/strong&gt; I can be a bit of hermit and I'm generally fine with minimal social interactions. This pandemic made me realise that more than ever it's important to keep frequently in touch with friends and loved ones. But it is equally key to seek out virtual opportunities to meet new people. In 2021 I want to engage more with the Ruby community via social media and other means.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cook your meals.&lt;/strong&gt; Self-isolation has made it clear to me that one cannot subsist for a very long time on porridge and fish and chips diet. If anything, eating the same thing every day gets boring. The nutritious value of my meals was also questionable. I developed a craving for soups. So with the help of my mum, I dedicated myself to learning how to cook a different soup every week. Every time, I cooked a big pot that lasted me a few days. Cooking is one of the survival skills that I view as essential to living a better quality of life. It can also save you a bit of money.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lower your standards.&lt;/strong&gt; Hear me out before you cast your look of disdain at me. I'm not suggesting you release crappy work. Far from it. This is to say that whatever you wish to do, whether it is writing a piece of code or a blog article, you need to let go of expectations and dive straight in. Leave perfection out the door. Don't worry about applying design patterns or figuring out domain models. Just write that piece of code and have fun. You can always come back and make things better. Once an initial version exists, you can improve the design and refactor messy code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Becomome more decisive.&lt;/strong&gt; I can be stuck in a perpetual circle of indecision. Debating, sometimes for days, whether I should go ahead and do something or not. Should I include this feature in a library? Should I write this article? Should I buy this? What's worse, I may never actually pull the trigger and instead let the decision sit there for weeks. I need to stop this and learn how to make quicker and better decisions. The guidance from basketball's greatest really resonates with me:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I always say, decisions I make, I live with them. There are always ways you can correct them or ways you can do them better. At the end of the day, I live with them." - LeBron James&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Execute on your ideas.&lt;/strong&gt; I have ideas. You have them. Everyone has them. Time passes and nothing happens. I research, think and procrastinate. The list of ideas I wish to tackle is constantly growing. The only way out is to start working on the stuff. Create a quick code spike. Write an article outline. Record a video intro. Whatever. Nothing will give you more clarity than a dose of action. My new motto comes from Thomas Edison who said "Vision without execution is hallucination.".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onwards-and-upwards" class="anchor"&gt;
  &lt;/a&gt;
  Onwards and upwards
&lt;/h2&gt;

&lt;p&gt;What a year it was! As I mentioned in my last review I'm not keen on setting goals. After 2020 that's probably even more true than ever. But this doesn't mean I don't have a vision for what I'd like 2021 to be like. I'd like to dedicate more time to help and encourage more people to write command line applications in Ruby. I want to build resources and a community of Ruby terminal applications enthusiasts.&lt;/p&gt;

&lt;p&gt;I have many thoughts around how this can be done. I will try to promote and highlight Ruby projects that are meant to be used in the terminal. I plan to increase my participation in other open source projects. I'd especially like to provide support for people using TTY components. I receive questions on how to use my various libraries and I feel I could be doing more to help. Making more code contributions to other projects, giving feedback or making suggestions for improvements are a few that come to mind.&lt;/p&gt;

&lt;p&gt;I think we can all agree that 2020 has been a strange ride, but one thing I've learned for sure is to embrace the uncertainty. Whatever comes my way I will do my best to turn it into a positive. Let's make 2021 a good one!&lt;/p&gt;




&lt;p&gt;Intro photo of all attendees at the end of the two-day ParisRB conference.&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>opensource</category>
      <category>productivity</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Shiny Glass Hover Effect (Glassmorphism)</title>
      <author>crayoncode</author>
      <pubDate>Sun, 24 Jan 2021 20:40:17 +0000</pubDate>
      <link>https://dev.to/crayoncode/shiny-glass-hover-effect-glassmorphism-17n7</link>
      <guid>https://dev.to/crayoncode/shiny-glass-hover-effect-glassmorphism-17n7</guid>
      <description>&lt;p&gt;Today let's work with the backdrop-filter property and a skewed ::before element, to create a nice shiny glass hover effect.&lt;/p&gt;

&lt;p&gt;Read the full article or watch me code this on Youtube (TL;DW):&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RbwhHvu1xlM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/crayon-code/embed/abmgooe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#first-things-first-background" class="anchor"&gt;
  &lt;/a&gt;
  First Things First - Background
&lt;/h2&gt;

&lt;p&gt;Let's start with the background by overlaying three different gradients. Each gradient is running from one color to transparent and by varying the angles they blend nicely into each other.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;322deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
      &lt;span class="mh"&gt;#ba4aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;#ba4aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;178deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="mh"&gt;#008aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;#008aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;24deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="mh"&gt;#00ffc6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;#00ffc6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;35%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#markup" class="anchor"&gt;
  &lt;/a&gt;
  Markup
&lt;/h2&gt;

&lt;p&gt;The markup consists of a container having a ruler producing the line in the middle and a container hosting the five icon buttons whereas each button contains an icon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"ruler"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-phone"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-images"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-envelope-open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-comment"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-music"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#basics-amp-ruler" class="anchor"&gt;
  &lt;/a&gt;
  Basics &amp;amp; Ruler
&lt;/h2&gt;

&lt;p&gt;Let's put a few variables, resets and center the whole thing in the viewport:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;--foreground-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The ruler is going to be put in the lower half of the viewport. By setting the top border to slight white the actual ruler is produced:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.ruler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-the-container" class="anchor"&gt;
  &lt;/a&gt;
  Setting up the container
&lt;/h2&gt;

&lt;p&gt;The most important thing about the container is the grid layout configuration, which consist implicitly of one single row - as no row config is given. The columns are configured such that each of them takes the same amount of space (&lt;code&gt;1fr&lt;/code&gt;) after the gap of &lt;code&gt;1.25rem&lt;/code&gt; has been taken into account.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="mi"&gt;.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#button-setup" class="anchor"&gt;
  &lt;/a&gt;
  Button Setup
&lt;/h2&gt;

&lt;p&gt;Let's first setup some variables allowing easy customization:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;--size&lt;/code&gt; variable controls how large each button appears. Since it's set to &lt;code&gt;6rem&lt;/code&gt; by default, it will also respond to the documents font size.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--transition-duration&lt;/code&gt; and &lt;code&gt;--transition-easing&lt;/code&gt; allow us to synchronously modify both hover transitions which we'll add later.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;...&lt;/span&gt;
  &lt;span class="nc"&gt;.icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;--transition-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;--transition-easing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The icon buttons configuration itself is quite straight forward. It has a quadratic shape whereas the content is centered horizontally as well as vertically. Additionally a slight border, a strongly blurred box shadow and a translucent white for background color are added. Note that the box shadow is calculated relatively to the size of the button. So whenever the button size changed, the box-shadow is scaled along with it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;...&lt;/span&gt;
  &lt;span class="nc"&gt;.icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// quadratic shape&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// center content horizontally&lt;/span&gt;
    &lt;span class="c1"&gt;// and vertically&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// apply text/font styling&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;foreground-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Add a slight border and a &lt;/span&gt;
    &lt;span class="c1"&gt;// strongly blurred box shadow&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
      &lt;span class="m"&gt;0px&lt;/span&gt; 
      &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#glassmorphism" class="anchor"&gt;
  &lt;/a&gt;
  Glassmorphism
&lt;/h2&gt;

&lt;p&gt;Now, if you came for this, this one-liner is all you need for the "classic" glassmorphism effect. This effect works best if there is a clear structure in the background which is why the ruler was added.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;...&lt;/span&gt;
  &lt;span class="nc"&gt;.icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Be aware that the &lt;code&gt;backdrop-filter&lt;/code&gt; property currently only works in webkit based browsers, so in Firefox you'll just see the translucent background, but not the blurred line of the ruler.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#shinyness" class="anchor"&gt;
  &lt;/a&gt;
  Shinyness
&lt;/h2&gt;

&lt;p&gt;To emphasize the glassy character of each button, let's add a shiny stripe which runs from bottom left to top right every time the button is hovered. So first we ensure that the button is optically lifted up a little bit. Therefore the &lt;code&gt;transform&lt;/code&gt; property is made transitionable and the button is lifted up by 25% of its size through the &lt;code&gt;translateY&lt;/code&gt; transformation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;...&lt;/span&gt;
  &lt;span class="nc"&gt;.icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; 
      &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition-easing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-25%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The shiny stripe is simply created by adding a &lt;code&gt;::before&lt;/code&gt; pseudo-element which has a slightly stronger white as background color and is skewed by 45 degrees. Especially the skewing makes a strong contribution to the effect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;...&lt;/span&gt;
  &lt;span class="nc"&gt;.icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;skew&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt; 
        &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition-easing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Initially the shiny stripe is positioned left outside the button and shifted to the very right each time the button is hovered. And that's already it. 😎&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;...&lt;/span&gt;
  &lt;span class="nc"&gt;.icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;...
    &amp;amp;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-125%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;      
      &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>css</category>
      <category>tutorial</category>
      <category>ui</category>
    </item>
    <item>
      <title>DNS Explained. Resolution</title>
      <author>Blake Khan</author>
      <pubDate>Sun, 24 Jan 2021 19:54:43 +0000</pubDate>
      <link>https://dev.to/blake/dns-explained-resolution-a2i</link>
      <guid>https://dev.to/blake/dns-explained-resolution-a2i</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is an article in the &lt;em&gt;DNS Explained.&lt;/em&gt; series. Click &lt;a href="https://dev.to/blake/dns-explained-introduction-history-1an7"&gt;here&lt;/a&gt; to read the introduction post. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Resolution is the process of asking for the resource records of a fully-qualified domain name (FQDN) and receiving back an answer. Every time that your computer does not have an IP address cached for a required FQDN, a resolution takes place. In this post, I discuss the main components involved in DNS resolution and explain the two main methods in which resolution is performed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#components" class="anchor"&gt;
  &lt;/a&gt;
  Components
&lt;/h1&gt;

&lt;p&gt;There are five main components that play a role in DNS resolution.&lt;/p&gt;

&lt;p&gt;The first component is the &lt;strong&gt;client&lt;/strong&gt;. This is the host that is asking the question, "Where is &lt;a href="http://www.netflix.com"&gt;www.netflix.com&lt;/a&gt; on the internet?"&lt;/p&gt;

&lt;p&gt;The second component is the &lt;strong&gt;DNS resolver&lt;/strong&gt;. Typically provided by your ISP, this serves as the first component that the client reaches out to if the answer to the DNS query is not cached by the client. Its role is to query the other components to find the answer to the original question. The way it does this depends on the type of DNS resolution being performed.&lt;/p&gt;

&lt;p&gt;Clients can configure their settings to use a DNS resolver not provided by their ISP. &lt;a href="https://developers.google.com/speed/public-dns"&gt;Google&lt;/a&gt;, &lt;a href="https://one.one.one.one/"&gt;Cloudflare&lt;/a&gt;, &lt;a href="https://www.verisign.com/en_US/security-services/public-dns/index.xhtml"&gt;Verisign&lt;/a&gt;, and &lt;a href="https://www.opendns.com/"&gt;Cisco&lt;/a&gt; are just a handful of companies that offer free-alternative DNS resolvers. Be aware of which resolver you choose though! Every site you visit will likely send a DNS query which is handled by your chosen DNS resolver. This gives that resolver an ability to see what you request and may sell this data to advertisers. Always read the policies of DNS resolvers that you are considering to use.&lt;/p&gt;

&lt;p&gt;The third component is the &lt;strong&gt;DNS Root Zone&lt;/strong&gt;, which is questioned if the DNS resolver does not have the answer in cache. Its role is to return the nameservers for the requested TLD. There are 13 root servers in the world operated by 12 organizations. These servers are anycasted and I go into more detail about them in my &lt;a href="https://dev.to/blake/dns-explained-hierarchy-and-architecture-18pj"&gt;DNS Architecture&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;The fourth component is the &lt;strong&gt;TLD's Nameservers&lt;/strong&gt;. Its role is to return the authoritative nameservers of the requested second-level domain.&lt;/p&gt;

&lt;p&gt;Finally, the fifth component is the &lt;strong&gt;Authoritative Nameservers&lt;/strong&gt;. These servers are the responsibility of the registrant to provide, and their role is to return the resource record for the requested third-level domain (or apex domain).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#iterative-resolution" class="anchor"&gt;
  &lt;/a&gt;
  Iterative Resolution
&lt;/h1&gt;

&lt;p&gt;There are two types of resolution, the first is iterative. In an iterative resolution, it is the responsibility of the DNS resolver to keep querying nameservers until it gets an answer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5KgHsEBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DpK9H6o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5KgHsEBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DpK9H6o.png" alt="A flowchart describing iterative resolution."&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let's go through each step in more detail.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client sends an iterative DNS query for &lt;code&gt;www.blakes.site.&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The DNS resolver receives this query. If it doesn't have an answer for this query already cached, it will continue by asking a root server where the nameservers for &lt;code&gt;.site&lt;/code&gt; are. If it is cached, the answer will be returned here and the process will terminate. Sidenote: The DNS resolver could also store cache entries for the &lt;code&gt;.site&lt;/code&gt; TLD nameservers and the &lt;code&gt;blakes.site&lt;/code&gt; authoritative nameservers and skip the appropriate steps.&lt;/li&gt;
&lt;li&gt;The root server returns the IP addresses for the &lt;code&gt;.site&lt;/code&gt; nameservers. It also can cache the &lt;code&gt;.site&lt;/code&gt; nameservers for future usage.&lt;/li&gt;
&lt;li&gt;The DNS resolver now has to ask the &lt;code&gt;.site&lt;/code&gt; TLD nameservers for the IP addresses of the &lt;code&gt;blakes.site&lt;/code&gt; authoritative nameservers. It also can cache the &lt;code&gt;.site&lt;/code&gt; nameservers for future usage.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;.site&lt;/code&gt; TLD nameservers return the IP addresses for the &lt;code&gt;blakes.site&lt;/code&gt; authoritative nameservers. The DNS resolver can cache the &lt;code&gt;blakes.site&lt;/code&gt; authoritative nameservers for future usage.&lt;/li&gt;
&lt;li&gt;The DNS resolver asks the &lt;code&gt;blakes.site&lt;/code&gt; authoritative nameservers for the resource records for the entry &lt;code&gt;www&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;blakes.site&lt;/code&gt; authoritative nameservers return the resource records for the entry &lt;code&gt;www&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The DNS resolver caches the response and returns it back to the client.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#recursive-resolution" class="anchor"&gt;
  &lt;/a&gt;
  Recursive Resolution
&lt;/h1&gt;

&lt;p&gt;The alternative to iterative resolution is recursive resolution. Instead of an address to the next nameserver being sent back to the DNS resolver to then query, the nameserver makes the request itself and returns the result all the way back up to the DNS resolver.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eshz2rh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KNpCaLc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eshz2rh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KNpCaLc.png" alt="A flowchart describing recursive resolution."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's also go through this resolution step-by-step.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client sends a recursive DNS query for &lt;code&gt;www.blakes.site.&lt;/code&gt;. Nothing new.&lt;/li&gt;
&lt;li&gt;The DNS resolver receives this query. If it doesn't have an answer for this query already cached, it will continue by asking a root server for the answer to &lt;code&gt;www.blakes.site.&lt;/code&gt;. If it is cached, the answer will be returned here and the process will terminate.&lt;/li&gt;
&lt;li&gt;If the root server did not have an answer cached, then it asks the next component that could have an answer: the TLD nameservers. The root servers can also cache the TLD nameservers for the requested domain for future use.&lt;/li&gt;
&lt;li&gt;If the TLD nameservers did not have an answer cached, then it asks the next component that could have an answer: the authoritative nameservers. The TLD nameservers can also cache the authoritative nameservers for the requested domain for future use.&lt;/li&gt;
&lt;li&gt;The authoritative nameservers find an answer for &lt;code&gt;www.blakes.site.&lt;/code&gt; and pass the answer up back to the TLD nameservers.&lt;/li&gt;
&lt;li&gt;The TLD nameservers pass the answer back up to the root server.&lt;/li&gt;
&lt;li&gt;The root server passes the answer back to the DNS resolver.&lt;/li&gt;
&lt;li&gt;The DNS resolver caches and passes the answer back to the client.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is caching at each component, so it is possible that only a partial resolution has to take place for a query. If the requested FQDN is popular and the DNS resolver is being used by a lot of people, then it is completely possible that the root servers are never contacted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recursive-resolution-proscons" class="anchor"&gt;
  &lt;/a&gt;
  Recursive Resolution: Pros/Cons
&lt;/h2&gt;

&lt;p&gt;In general, recursive resolution tends to be faster than its iterative counterpart due to caching of final answers. However, this type of resolution creates security flaws including &lt;a href="https://www.cloudflare.com/learning/dns/dns-cache-poisoning/"&gt;cache poisoning&lt;/a&gt; and &lt;a href="https://www.cloudflare.com/learning/ddos/dns-amplification-ddos-attack/"&gt;DNS amplification attacks&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responsibility-recursive-vs-iterative" class="anchor"&gt;
  &lt;/a&gt;
  Responsibility: Recursive vs Iterative
&lt;/h2&gt;

&lt;p&gt;In recursive resolution, the burden of having to contact nameservers belongs to the server. On the flip side, for iterative resolution, the burden of contacting nameservers belongs to the client.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dns-resolver-observation" class="anchor"&gt;
  &lt;/a&gt;
  DNS Resolver Observation
&lt;/h2&gt;

&lt;p&gt;It should be noted that for both recursive and iterative resolution, it is required that the DNS resolver already know the IP addresses of the 13 root servers. Implementation wise, these addresses are simply hardcoded and &lt;a href="https://root-servers.org/"&gt;publicly available&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>dns</category>
      <category>networking</category>
      <category>domains</category>
      <category>internet</category>
    </item>
    <item>
      <title>How to Check a User's Location with JavaScript</title>
      <author>Nathan Pasko</author>
      <pubDate>Sun, 24 Jan 2021 17:35:41 +0000</pubDate>
      <link>https://dev.to/sprite421/how-to-check-a-user-s-location-with-javascript-142b</link>
      <guid>https://dev.to/sprite421/how-to-check-a-user-s-location-with-javascript-142b</guid>
      <description>&lt;p&gt;This little series is all about expanding our definition of "responsive design" to consider more than just screen size. Last time we talked about using CSS media queries to automatically shift between light and dark display modes. Today, let's talk about another part of the environment we can respond to: the user's location.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#locationbased-responsiveness" class="anchor"&gt;
  &lt;/a&gt;
  Location-Based Responsiveness
&lt;/h1&gt;

&lt;p&gt;Responsiveness is all about embracing the &lt;strong&gt;context&lt;/strong&gt; that surrounds our users and their devices. The most urgent responsive concerns are undoubtedly the wide variety of screen sizes that those devices might employ, but there's a lot more context beyond screen size that designers can respond to. &lt;strong&gt;What if our responsive designs could respond not just to screen size, but to the user's location as well?&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#geolocation" class="anchor"&gt;
  &lt;/a&gt;
  Geolocation
&lt;/h1&gt;

&lt;p&gt;To achieve this, we can use the &lt;strong&gt;Geolocation API&lt;/strong&gt;. This API is available only in secure contexts—HTTPS—in some supporting browsers, and yet it provides a super easy way to read a device's location. Today we'll look at two different geolocation approaches: one to check location a single time, and one to watch location continuously.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-the-users-location-once" class="anchor"&gt;
  &lt;/a&gt;
  How to Get the User's Location Once
&lt;/h2&gt;

&lt;p&gt;Let's start with a blank HTML page to try getting device location. We'll just add a button that will trigger the location check. Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"get-location"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Get Location&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We want to be able to click this button and &lt;strong&gt;get location data in the console&lt;/strong&gt;. To achieve this, we'll write three JavaScript functions. The first is the function we'll stick to our button via event listener. We can access the Geolocation API at &lt;code&gt;navigator.geolocation&lt;/code&gt;. Inside our first function, we'll check whether the Geolocation API is supported by testing &lt;code&gt;navigator.geolocation&lt;/code&gt;, and if it is supported, we can get our location data using &lt;code&gt;navigator.geolocation.getCurrentPosition()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getLocation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geolocation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Geolocation API not supported by this browser.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Checking location...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geolocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCurrentPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The Geolocation API provides &lt;code&gt;getCurrentPosition()&lt;/code&gt; so we can quickly locate users. This function will get the job done quite easily, but you might have noticed that it &lt;strong&gt;expects two arguments&lt;/strong&gt;, called &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; in this example. These are the two other functions we need to write.&lt;/p&gt;

&lt;p&gt;The first argument should be a function to call if geolocation is &lt;strong&gt;successful&lt;/strong&gt;. We need to carve out an argument in this function, too; this argument is called &lt;code&gt;position&lt;/code&gt; and it's how the browser will pass the geolocation results back to us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;error()&lt;/code&gt; function will only be called if the &lt;strong&gt;geolocation fails&lt;/strong&gt;. Hopefully we won't even hit this function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Geolocation error!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Don't forget to attach &lt;code&gt;getLocation()&lt;/code&gt; to the button by adding a click event listener!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;get-location&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getLocation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we have all the JavaScript we need to grab some location data. If we try it out by clicking the Get Location button, it'll ultimately result in a GeolocationPosition object being printed in the console. This object is a packet of the &lt;strong&gt;results from our geolocation check&lt;/strong&gt;. Its keys include a timestamp and another object called &lt;code&gt;coords&lt;/code&gt; that contains data like latitude, longitude, and so on. &lt;strong&gt;The data found in &lt;code&gt;coords&lt;/code&gt; is what we can work with to create a responsive design that consider's the user's location.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can use the console to poke around the &lt;code&gt;coords&lt;/code&gt; object or we can directly log values from &lt;code&gt;coords&lt;/code&gt; to the console in &lt;code&gt;success()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Latitude:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Longitude:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;em&gt;Note!&lt;/em&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Latitude traditionally precedes longitude. If you explore location APIs on the web you might see latitude and longitude out of order, but just remember they should usually appear in alphabetical order!&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#how-to-continuously-watch-the-users-location" class="anchor"&gt;
  &lt;/a&gt;
  How to Continuously Watch the User's Location
&lt;/h2&gt;

&lt;p&gt;Instead of getting the user's location once, we can also watch their location continuously. Using the &lt;code&gt;watchPosition()&lt;/code&gt; function we can set up a handler function that will be called each time geolocation updates. We need to pass in a function to call when a new location is successfully returned, so let's reuse our &lt;code&gt;success()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;This example is pretty easy to set up for our purposes. We can just add one line of JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geolocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;watchPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we can continuously get location data! This comes with the processing, data, and energy overhead that you'd expect, but maybe you're as pleased as I was to learn how simple it is to start working with the Geolocation API.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-word-of-caution" class="anchor"&gt;
  &lt;/a&gt;
  A Word of Caution
&lt;/h1&gt;

&lt;p&gt;This series offers practical examples illustrating how to add different kinds of responsiveness, but it's also a conversation starter; a brain teaser. It's worthwhile to look at a user's location as part of the context they bring to our app or website, especially as a mental exercise, but devices will need to get permission to check location, and this will prove a UX wrinkle.&lt;/p&gt;

&lt;p&gt;It's really not a good idea for our users to be faced with a dialog in the browser immediately upon arriving at our site, however the kind of location-based responsiveness that we used as an example above will trigger those dialogs to get permissions for the location check. That's not ideal. Putting this stuff into practice will require a more thoughtful approach, or at least the deferral of location responsiveness away from the initial landing experience. Nevertheless, I think you'll find the expansion of the commonly held definition of responsiveness to include location is an exciting addition to your web design playbook. &lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Do you plan upcoming weeks on Sundays 🏖? If yes how?🤷🏻‍♂️</title>
      <author>Sarthak Sharma</author>
      <pubDate>Sun, 24 Jan 2021 17:18:40 +0000</pubDate>
      <link>https://dev.to/sarthology/do-you-plan-upcoming-weeks-on-sundays-if-yes-how-hkj</link>
      <guid>https://dev.to/sarthology/do-you-plan-upcoming-weeks-on-sundays-if-yes-how-hkj</guid>
      <description>&lt;p&gt;Sunday is day the when I sit back, relax and reflect on my past week. Then I set goals for upcoming week using my &lt;a href="https://gumroad.com/l/NVgre"&gt;Notion Template&lt;/a&gt;. One of my personal way to plan is using weekly batching recommended by Tim Ferriss and block my Calendar ahead of time. Check it out &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ghVdzAeX0bg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>productivity</category>
    </item>
    <item>
      <title>5 Things I've Learned as a Female Developer</title>
      <author>Eevis (she/her)</author>
      <pubDate>Sun, 24 Jan 2021 17:16:00 +0000</pubDate>
      <link>https://dev.to/eevajonnapanula/5-things-i-ve-learned-as-a-female-developer-p19</link>
      <guid>https://dev.to/eevajonnapanula/5-things-i-ve-learned-as-a-female-developer-p19</guid>
      <description>&lt;p&gt;In a few months, I will have been a professional software developer for four years. It has been fun, challenging, marvelous, exhausting, and an incredible learning journey.  It has contained much that I wouldn't have chosen and an astonishing amount of positive surprises. &lt;/p&gt;

&lt;p&gt;In Finland, of software developers, about 10% are women. (Source: &lt;a href="https://yle.fi/uutiset/3-10687050"&gt;Yle.fi&lt;/a&gt;, unfortunately only in Finnish). The exact amount of female developers, of course, varies from company to company, but in the big picture, we are a minority. Important programs, such as &lt;a href="https://mimmitkoodaa.ohjelmistoebusiness.fi/in-english/"&gt;Mimmit Koodaa&lt;/a&gt;,  are working to change that, but it takes time to improve these numbers.&lt;/p&gt;

&lt;p&gt;In this blog post, I will share some learnings from the perspective of a  female developer. These opinions are my own and are my experience. I'm happy if you haven't encountered anything negative in your career, but please, do respect the fact that not all of us are so lucky. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nobody-knows-everything" class="anchor"&gt;
  &lt;/a&gt;
  Nobody Knows Everything
&lt;/h2&gt;

&lt;p&gt;When I first started working as a software developer, I looked up to every software developer in the company. I had this idea that they know so much, some of them even everything. Some of them also played the part and were acting like they knew everything. Later, it has become clear that those who acted that way didn't actually know much. &lt;/p&gt;

&lt;p&gt;Some experiences in other companies have taught me this: Nobody knows everything. They might be deep specialists in certain areas but don't know anything about the others. The problem is that some people act like they are subject matter experts in everything when they're subject matter experts only in one thing. &lt;/p&gt;

&lt;p&gt;In 2018, Dan Abramov, one of the core developers in React, tweeted a blog post he had written about things he doesn't know:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--F1YgPzW6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1336281436685541376/fRSl8uJP_normal.jpg" alt="Dan Abramov profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dan Abramov
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/dan_abramov"&gt;@dan_abramov&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      📝 New on Overreacted: Things I Don’t Know as of 2018. We can admit our knowledge gaps without devaluing our expertise. &lt;a href="https://t.co/0VJ76yPvzg"&gt;overreacted.io/things-i-dont-…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:53 PM - 28 Dec 2018
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1078650200221204480" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1078650200221204480" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1078650200221204480" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It was circulating in my networks, and many felt that it was a reassuring piece of knowledge. Someone, who's been seen as a great expert, admits that he does not know some things that others might think of as very simple!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This realization has helped me in the evergoing fight with impostor syndrome.&lt;/strong&gt; I don't know everything, but I don't even have to. I keep learning every day. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-interviews-everybody-lies-usually-unintentionally" class="anchor"&gt;
  &lt;/a&gt;
  In Interviews Everybody Lies - Usually Unintentionally
&lt;/h2&gt;

&lt;p&gt;During these years, I have gone through many interview processes. I've realized that interviewers give a more rosy picture of the company than it actually is. This is about selling the company to the candidate. In most cases, this is done purely unintentionally and without any evil purposes. &lt;/p&gt;

&lt;p&gt;It is possible interviewers don't have a truthful image of the company's situation. They may be selling an idea they would like the company to be like. This can be about the work environment, the clients, the projects, or any other thing.  &lt;/p&gt;

&lt;p&gt;So, a piece of advice: Always be skeptical about what the company promises. Ask questions, ask for proof if the thing they promise is significant for you.  &lt;/p&gt;

&lt;p&gt;Of course, something unforeseen can happen. Last year alone has proven that. Some things that were promised can change when something unexpected happens. But then again, those unexpected situations reveal a lot about how much the company respects its employees. By this, I mean that hard times uncover the company's true values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-is-always-someone-with-a-genderbias" class="anchor"&gt;
  &lt;/a&gt;
  There is Always Someone with a Gender-Bias
&lt;/h2&gt;

&lt;p&gt;I have been lucky to work with people who don't underestimate me because I'm not a man. I would say that most of the colleagues have been incredible in this matter. &lt;/p&gt;

&lt;p&gt;However, as you might have guessed from the title, there have been people who see me as being less competent because I'm a woman. I think nobody has said this straight to my face, but the bias has been pretty evident from how they talk.&lt;/p&gt;

&lt;p&gt;Example: There was a group conversation in which the topic was something I was really good at, and everybody knew it. Next to me was standing another developer, let's call him developer A. Third developer, B, needed help with the subject. The fourth developer, C, instantly said that A is the best one for this. The truth was that I knew the most about that subject (and the fourth developer knew this), but his bias made him forget about my experience.&lt;/p&gt;

&lt;p&gt;I have to give credits to developer A in that case - he brought up that he's not actually the expert here, but I am. It was essential for me that someone called this out. You might think that this is nothing, but let me tell you, it is. Seeing someone as being less competent because of some characteristic instead of the actual competence is the core of discrimination.&lt;/p&gt;

&lt;p&gt;The funny thing is that I've heard the words "I have no bias towards women in tech" only from people who have, with their actions, made it clear that they do. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#most-technical-interviews-suck" class="anchor"&gt;
  &lt;/a&gt;
  Most Technical Interviews Suck
&lt;/h2&gt;

&lt;p&gt;As said before, I've been in many interview processes. I've noticed about the technical interviews that they are as far from the actual job as they ever could be. Let's take the example of whiteboard code solving puzzles. Do you ever do that in your daily job? I haven't. &lt;/p&gt;

&lt;p&gt;Some say that it is a good test for how the candidate performs under pressure. I don't think so. This approach feels a bit like dropping someone in the middle of woods without any tools and then saying "good luck." Jobs I've had have not been like that. &lt;/p&gt;

&lt;p&gt;This tweet sums it up pretty beautifully:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fI-xidSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/CfNJTAHWAAAik5I.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--YW-SOVqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1171381674753630208/3xNHuta1_normal.jpg" alt="DEV Community 👩‍💻👨‍💻 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        DEV Community 👩‍💻👨‍💻
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      How to make the hiring process as arbitrary and subject to bias as possible. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:34 PM - 04 Apr 2016
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=716997357624287232" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=716997357624287232" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=716997357624287232" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Also, putting the candidate through a tech grill is not a good approach. Again, you could say something about the stress test and that people know their stuff even when grilled if they're professionals. Well, how many times those interviewers use search engines throughout the day? Shouldn't they know their stuff, right?&lt;/p&gt;

&lt;p&gt;Stressful situations make many people freeze, and they can't show how good they actually are. In the actual job, it is a rare occasion when someone asks questions in the same way as in those tech grill interviews.&lt;/p&gt;

&lt;p&gt;My favorite kind of technical interview has been one where I showed some code I had written. That was some free time code, so not a task for the interview process. It was a starting point for conversations, and interviewers asked me questions based on that. I knew the code inside out, and it was so much easier to just have a conversation without all the time fearing that I might answer wrong. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#communities-matter" class="anchor"&gt;
  &lt;/a&gt;
  Communities Matter
&lt;/h2&gt;

&lt;p&gt;When I started learning to code, I was alone. I lived in a city where there were no developer communities. The closest town with meetups was something like 100 km away. The communities online (like Stack Overflow) felt hostile, so I didn't feel like being part of them either. So when I moved to Helsinki because of my first developer job, I was thrilled about all the possible meetups and other events.&lt;/p&gt;

&lt;p&gt;In these four years, I've gotten to know quite a few people from various workplaces I've been in. Another critical community for me has been &lt;a href="https://oslevelupkoodarit.github.io/about.html"&gt;LevelUp Koodarit&lt;/a&gt; - a Facebook group and Slack-space for women and gender minorities. &lt;/p&gt;

&lt;p&gt;People I've gotten to know through these communities are fantastic, and I'm super happy about the connections I've made. They've also been a support group and door opener for many things - be it public speaking, blogging, or hosting a study group about accessibility. And for job opportunities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;So, the last almost four years have been a journey. There have been ups, and there have been downs. I've seen a lot and learned even more. There is still a lot of work to do for equal treatment in the tech industry, especially for those who are more in the margins than I am. &lt;/p&gt;

&lt;p&gt;I hope you learned something from these points, and if you have any similar experiences, I'd love to hear them! 😊&lt;/p&gt;

</description>
      <category>career</category>
      <category>womenintech</category>
      <category>inclusion</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Get familiar with the SeleniumBase API</title>
      <author>Automation Bro</author>
      <pubDate>Sun, 24 Jan 2021 16:13:39 +0000</pubDate>
      <link>https://dev.to/automationbro/get-familiar-with-the-seleniumbase-api-59b5</link>
      <guid>https://dev.to/automationbro/get-familiar-with-the-seleniumbase-api-59b5</guid>
      <description>&lt;p&gt;SeleniumBase framework comes with a set of pre-defined &lt;a href="https://seleniumbase.io/help_docs/method_summary/"&gt;APIs&lt;/a&gt; or helper methods for us to use. In this post, we will get familiar with some of the common APIs such as click, get_text, assert_text, etc… and understand how it works and which ones to use when.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-seleniumbase-api" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;💭 Why use SeleniumBase API?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;SeleniumBase API provides us with helper wrapper methods to use that are built on top of regular selenium commands. These wrapper methods make working with Selenium a lot easier as it comes with in-built smart wait features to make your tests more reliable. So, you do not have to worry about adding waits or sleeps after every other command, as all of that gets dealt with by SeleniumBase APIs.&lt;/p&gt;

&lt;p&gt;It even comes with some additional helper methods which you typically would have to create on your own when directly using Selenium commands.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#scenario-1-click-on-a-button-and-assert-url" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Scenario #1 – Click on a button and assert URL&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P5EH_K21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u3k1ru7f6mnxoqousd9q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P5EH_K21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u3k1ru7f6mnxoqousd9q.png" alt="Scenario1"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#scenario-2-scroll-and-assert-the-text-of-the-element" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Scenario #2 – Scroll and assert the text of the element&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b6yFFQgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/26hold5zdoumkzqz2top.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b6yFFQgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/26hold5zdoumkzqz2top.png" alt="Scenario2"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#check-out-the-video-below-to-learn-more-about-the-seleniumbase-apis-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Check out the video below to learn more about the SeleniumBase APIs –&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wXBT0XZ2RfA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;📧 Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this &lt;br&gt;
👍 Follow &lt;a href="https://twitter.com/automationbro"&gt;automationbro&lt;/a&gt; on Twitter for the latest updates&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;I love coffees! And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and buying me a cup of coffee -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>python</category>
      <category>testing</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Products Quantity Counter Using HTML CSS &amp; JavaScript</title>
      <author>Stackfindover</author>
      <pubDate>Sun, 24 Jan 2021 15:08:31 +0000</pubDate>
      <link>https://dev.to/stackfindover/products-quantity-counter-using-html-css-javascript-663</link>
      <guid>https://dev.to/stackfindover/products-quantity-counter-using-html-css-javascript-663</guid>
      <description>&lt;p&gt;Hello, guys in this &lt;a href="https://blogs.stackfindover.com/category/tutorials/" rel="dofollow"&gt;tutorial&lt;/a&gt; we will create a Products Quantity Counter Using HTML CSS &amp;amp; JavaScript.&lt;/p&gt;

&lt;p&gt;First, we need to create two files &lt;strong&gt;index.html&lt;/strong&gt; and &lt;strong&gt;style.css&lt;/strong&gt; then we need to do code for it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#products-quantity-counter-step1" class="anchor"&gt;
  &lt;/a&gt;
  Products Quantity Counter Step:1
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Add below code inside index.html&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Products Quantity Counter&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"ie=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&amp;amp;display=swap"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"counter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"down"&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;'decreaseCount(event, this)'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;-&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"up"&lt;/span&gt;  &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;'increaseCount(event, this)'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;+&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;increaseCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;previousElementSibling&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
        &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;decreaseCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextElementSibling&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#products-quantity-counter-step2" class="anchor"&gt;
  &lt;/a&gt;
  Products Quantity Counter Step:2
&lt;/h3&gt;

&lt;p&gt;Then we need to add code for &lt;strong&gt;style.css&lt;/strong&gt; which code I provide in the below screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'IBM Plex Sans'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.counter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.counter&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0052cc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.counter&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0052cc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#products-quantity-counter-video-output" class="anchor"&gt;
  &lt;/a&gt;
  Products Quantity Counter Video Output:
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BrwEhCT1YJM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#products-quantity-counter-codepen-output" class="anchor"&gt;
  &lt;/a&gt;
  Products Quantity Counter CodePen Output:
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stack-findover/embed/OJReWrK?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Transaction in Spring Boot as simple as possible</title>
      <author>Fabio Hiroki</author>
      <pubDate>Sun, 24 Jan 2021 14:09:14 +0000</pubDate>
      <link>https://dev.to/fabiothiroki/transaction-in-spring-boot-as-simple-as-possible-5ecf</link>
      <guid>https://dev.to/fabiothiroki/transaction-in-spring-boot-as-simple-as-possible-5ecf</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;A few days ago I had to investigate a bug in production that involved a database transaction, specifically defined by &lt;br&gt;
&lt;a href="https://spring.io/guides/gs/managing-transactions/"&gt;&lt;code&gt;@Transaction&lt;/code&gt;&lt;/a&gt; annotation. That sounded like a great opportunity to review the basic concepts and hopefully fix the bug.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#no-bug-yet" class="anchor"&gt;
  &lt;/a&gt;
  No bug yet
&lt;/h1&gt;

&lt;p&gt;Before the bug was introduced, this is how the application looked like: an endpoint that received some payload and then performed write on different tables in the same transactional annotation, using its respective dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Autowired&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;TableOneService&lt;/span&gt; &lt;span class="n"&gt;tableOneService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@Autowired&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;TableTwoService&lt;/span&gt; &lt;span class="n"&gt;tableTwoService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


&lt;span class="nd"&gt;@PostMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@Transactional&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@RequestBody&lt;/span&gt; &lt;span class="nc"&gt;Payload&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;tableOneService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;tableTwoService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So far, so good, the application was behaving as expected.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#requirements-change" class="anchor"&gt;
  &lt;/a&gt;
  Requirements change
&lt;/h1&gt;

&lt;p&gt;After observing the data persisted in table two, we've decided to change the business rule, validate the payload persisted based on its values. If you don't know the entire application and just focus on changing the &lt;code&gt;tableTwoService&lt;/code&gt; code based on these specific requirements, this is a possible solution that you may consider:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add some king of validation on &lt;code&gt;save&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;Throw an exception that will be translated to a &lt;code&gt;Bad Request&lt;/code&gt; response to the client.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Don't feel guilty if you've considered this solution, we've also done this and deployed it to production.&lt;/p&gt;

&lt;p&gt;This is what the code looked like now. As developers, we're so wrongly proud.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TableTwoService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Payload&lt;/span&gt; &lt;span class="n"&gt;paylod&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isValid&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// persists on database&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// throw some exception&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#bug-detected" class="anchor"&gt;
  &lt;/a&gt;
  Bug detected
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xTiTnGuHmcaQeWSryE/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xTiTnGuHmcaQeWSryE/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After some days, someone raised the hand:&lt;/p&gt;

&lt;p&gt;"Hey something feels wrong, we're missing some data on table one since the deployment of the validation code".&lt;/p&gt;

&lt;p&gt;Damn, we didn't even change the &lt;code&gt;tableOneService&lt;/code&gt; neither the API controller code, for sure this is someone else's problem.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#database-transaction" class="anchor"&gt;
  &lt;/a&gt;
  Database Transaction
&lt;/h1&gt;

&lt;p&gt;In short words, this is what defines the behavior of a method annotated by &lt;code&gt;@Transaction&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Begin the transaction.&lt;/li&gt;
&lt;li&gt;Execute a set of data manipulations and/or queries.&lt;/li&gt;
&lt;li&gt;If no error occurs, then commit the transaction.&lt;/li&gt;
&lt;li&gt;If an error occurs, then roll back the transaction.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Transactional&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@RequestBody&lt;/span&gt; &lt;span class="nc"&gt;Payload&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Both operations should work for transaction commit&lt;/span&gt;
  &lt;span class="c1"&gt;// Otherwise no operation will persist&lt;/span&gt;
  &lt;span class="n"&gt;tableOneService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;tableTwoService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Besides the code of &lt;code&gt;tableOneService&lt;/code&gt; was executing without errors on runtime, the exception thrown on &lt;code&gt;tableTwoService&lt;/code&gt; was rollbacking its persistence.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-fix-the-bug" class="anchor"&gt;
  &lt;/a&gt;
  Let's fix the bug
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Wsju5zAb5kcOfxJV9i/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Wsju5zAb5kcOfxJV9i/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The solution I've decided to use was to remove the exception thrown and instead just log the payload received so I could have better observability of this flow. An exception now won't trigger the transaction rollback.&lt;/p&gt;

&lt;p&gt;In this case, my solution works because it's ok for the client that sent this request to not receive a &lt;code&gt;Bad Request&lt;/code&gt; response whenever it sends an invalid payload, and just have its payload ignored.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TableTwoService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Payload&lt;/span&gt; &lt;span class="n"&gt;paylod&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isValid&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// persists on database&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// log a message and do nothing&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-end" class="anchor"&gt;
  &lt;/a&gt;
  The end
&lt;/h1&gt;

&lt;p&gt;The bug is now fixed and I've learned a little more about the &lt;code&gt;@Transaction&lt;/code&gt; annotation. I hope this story helps someone else in the future.&lt;/p&gt;

</description>
      <category>java</category>
      <category>database</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What is the best routine for a Dev?</title>
      <author>Rishabh Singh</author>
      <pubDate>Sun, 24 Jan 2021 13:41:26 +0000</pubDate>
      <link>https://dev.to/mindninjax/what-is-the-best-routine-for-a-dev-23o2</link>
      <guid>https://dev.to/mindninjax/what-is-the-best-routine-for-a-dev-23o2</guid>
      <description>&lt;p&gt;As a Dev, we often have to follow strict deadlines, meet the expectations of our clients or bosses &amp;amp; make time for our personal projects or leisure.&lt;/p&gt;

&lt;p&gt;None of these would be possible if we cant follow along with our daily routine which makes us comfortable and provide us with the flexibility to help stretch our horizons to do more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TSlEOnOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p86ifdqyx3leenc84gif.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TSlEOnOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p86ifdqyx3leenc84gif.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-routine" class="anchor"&gt;
  &lt;/a&gt;
  My Routine
&lt;/h3&gt;




&lt;p&gt;&lt;strong&gt;Here's my routine:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;6:30 AM:&lt;/strong&gt; Wake up&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;7 AM:&lt;/strong&gt; Hit Gym&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;9 AM:&lt;/strong&gt; Start Coding :D&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;12 PM:&lt;/strong&gt; Lunch (I usually like to skip breakfasts as it helps me with Ketosis)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;3 PM:&lt;/strong&gt; Nap&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;4 PM:&lt;/strong&gt; Anime&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;6 PM:&lt;/strong&gt; Go out with friends&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;8 PM:&lt;/strong&gt; Back to work&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;10 PM:&lt;/strong&gt; Dinner&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;11 PM:&lt;/strong&gt; Time for bed&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#discuss" class="anchor"&gt;
  &lt;/a&gt;
  Discuss
&lt;/h3&gt;




&lt;p&gt;Now it's your turn to share your routine.&lt;/p&gt;

&lt;p&gt;Feel free to discuss the routine which makes you feel most productive in the discussions/comments.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>discuss</category>
      <category>watercooler</category>
      <category>programming</category>
    </item>
    <item>
      <title>Date &amp; Time in JavaScript</title>
      <author>Himanshu Tiwari 🌼</author>
      <pubDate>Sun, 24 Jan 2021 13:07:39 +0000</pubDate>
      <link>https://dev.to/himanshutiwari15/date-time-in-javascript-1lmd</link>
      <guid>https://dev.to/himanshutiwari15/date-time-in-javascript-1lmd</guid>
      <description>&lt;p&gt;Let’s meet someone amazing today 😁, haha a new built-in object: Date. In Javascript, we can easily work with Date &amp;amp; Time using the Date class. To create an object of this type we use the &lt;em&gt;new&lt;/em&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;// Creating a Date object&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dateObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateObj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By doing this, we create an object with the current date and time formed by weekday, month, day, year, hours, minutes, seconds, and timezone. Now that's friggin precise 😝.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#methods-of-the-date-object" class="anchor"&gt;
  &lt;/a&gt;
  Methods of the Date object   😵
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;getDate()&lt;/td&gt;
&lt;td&gt;Returns the day of the month (1 to 31)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getDay()&lt;/td&gt;
&lt;td&gt;Returns the weekday (0 - Sunday to 6 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Saturday)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getFullYear()&lt;/td&gt;
&lt;td&gt;Returns the full year (YYYY)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getMonth()&lt;/td&gt;
&lt;td&gt;Returns the month (0 to 11)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getHours()&lt;/td&gt;
&lt;td&gt;Returns the hours (0 to 23)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getMinutes()&lt;/td&gt;
&lt;td&gt;Return the minutes (0 to 59)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getSeconds()&lt;/td&gt;
&lt;td&gt;Returns the seconds (0 to 59)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getMilliseconds()&lt;/td&gt;
&lt;td&gt;Returns the milliseconds (0 to 999)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getTime()&lt;/td&gt;
&lt;td&gt;Returns the number of milliseconds since the&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Epoch(Jan 1st, 1970, 00:00:00)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setTime()&lt;/td&gt;
&lt;td&gt;Creates a specific date from milliseconds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;since the epoch.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#what-is-unix-epoch" class="anchor"&gt;
  &lt;/a&gt;
  What is UNIX EPOCH?😰
&lt;/h5&gt;

&lt;p&gt;The Epoch is present in most programming languages. We can consider it the starting point of counting the time. This is useful to do calculations with date and time.&lt;/p&gt;

&lt;p&gt;Javascript uses the Unix Epoch, which is: Jan 1st, 1970, 00:00:00, UTC.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-time-chart-for-reference" class="anchor"&gt;
  &lt;/a&gt;
  A Time Chart for reference   😅
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Milliseconds (ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1 second&lt;/td&gt;
&lt;td&gt;1,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 minute&lt;/td&gt;
&lt;td&gt;60,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 hour&lt;/td&gt;
&lt;td&gt;3,600,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 day&lt;/td&gt;
&lt;td&gt;86,400,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 year (365 days)&lt;/td&gt;
&lt;td&gt;31,536,000,000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#how-to-calculate-how-many-hours-have-passed-since-the-epoch" class="anchor"&gt;
  &lt;/a&gt;
  How to calculate how many hours have passed since the Epoch?   😬
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;Obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Obj&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3600000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#passing-argument-to-date" class="anchor"&gt;
  &lt;/a&gt;
  Passing Argument to &lt;strong&gt;Date()&lt;/strong&gt;   😷
&lt;/h3&gt;

&lt;p&gt;We created date objects without passing any arguments, this is why they represented the current time but we can also use them with specific objects or better to say a specific number of objects.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Numeric arguments&lt;/th&gt;
&lt;th&gt;Time represents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;One&lt;/td&gt;
&lt;td&gt;milliseconds since the epoch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Two&lt;/td&gt;
&lt;td&gt;years and month (months go from 0 to 11)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Three&lt;/td&gt;
&lt;td&gt;years, month, and day&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Four&lt;/td&gt;
&lt;td&gt;years, month, day, and hours&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Five&lt;/td&gt;
&lt;td&gt;years, month, days, hours, minutes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Six&lt;/td&gt;
&lt;td&gt;years, month, day, hours, minutes, and&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;Obj&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can also pass strings as an argument and in different formats&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ISO date: "2020-03-18" (YYYY-MM-DD)&lt;/li&gt;
&lt;li&gt;Short Date: "03/18/2020" (MM/DD/YYYY)&lt;/li&gt;
&lt;li&gt;Long Date: "Mar 18 2020" or "18 Mar 2020"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you guys have learnt and saved it for later reference&lt;br&gt;
and if you found my grammatical mistakes then don't forget to comment them 😂&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>computerscience</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
