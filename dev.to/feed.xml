<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>7 JavaScript Data Structures you must know</title>
      <author>Neha Soni</author>
      <pubDate>Wed, 12 May 2021 04:07:52 +0000</pubDate>
      <link>https://dev.to/nehasoni__/7-javascript-data-structures-you-must-know-57ah</link>
      <guid>https://dev.to/nehasoni__/7-javascript-data-structures-you-must-know-57ah</guid>
      <description>&lt;p&gt;Data Structures is one of the most frequently tested subjects by a lot of companies. It is the base of IT industries and is largely used in the areas of Artificial Intelligence, operating systems, graphics, etc.&lt;br&gt;
In this blog post, I will cover the seven most used JavaScript data structures that every JS developer should know.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#this-blog-post-will-cover"&gt;
  &lt;/a&gt;
  This Blog Post will cover:-
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- What are Data Structures?
- 7 most used data structures
  - Arrays
  - Stack
  - Queues
  - Linked List
  - Trees
  - Graphs
  - Hashtable
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#what-is-data-structures"&gt;
  &lt;/a&gt;
  What is Data Structures?
&lt;/h2&gt;

&lt;p&gt;Data Structure is the way of storing and organizing the data in such a way that it can be used efficiently.  More precisely, Data Structure refers to a group of data values, how they relate to each other, and the operations or functions that can be carried out on them.&lt;br&gt;&lt;br&gt;
&lt;code&gt;Data structures= group of data values+allowed operations on that data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Data structure enables us to manage and utilize large datasets, handle multiple requests from users at once, and speed up the data processing. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Types of data structures in JS:-&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_nqttmjZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619611250125/8tZFEKg3Y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_nqttmjZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619611250125/8tZFEKg3Y.png" alt="Screenshot (210).png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-array"&gt;
  &lt;/a&gt;
  1.) Array
&lt;/h2&gt;

&lt;p&gt;Arrays are the most basic data structure. It is a group of similar types of elements stored together at contiguous memory locations and each cell has a corresponding numeric index used to select its data. Like all scripting languages​​, JavaScript has &lt;strong&gt;dynamic arrays&lt;/strong&gt; i.e their size is not predetermined, nor the type of data.&lt;/p&gt;

&lt;p&gt;An array literal is the easiest way to create a JavaScript Array. &lt;br&gt;
Let's see the simple example of creating an array using an array literal:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
var users=["neha","ayushi","gauri"];  // creating an array
//iterate over an array 
for (i=0;i&amp;lt;user.length;i++){  
document.write(emp[i] + ", ");  
}  
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:-&lt;/strong&gt; &lt;code&gt;neha, ayushi, gauri&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-javascript-array-methods"&gt;
  &lt;/a&gt;
  Common JavaScript Array Methods:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pLKNRmT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619523636447/hCdUdd-wA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pLKNRmT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619523636447/hCdUdd-wA.png" alt="Screenshot (205).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linked-list"&gt;
  &lt;/a&gt;
  Linked List
&lt;/h2&gt;

&lt;p&gt;The linked list is a linear data structure in which elements are not in contiguous memory locations. It consists of a group of nodes and each node has its own &lt;strong&gt;data&lt;/strong&gt; and &lt;strong&gt;address to the next node&lt;/strong&gt;. In an array, the elements are indexed and you can instantly get to an element but in a linked list, you have to start with the head and work your way through until you get to the desired element. The advantage of the linked list is that the insertion and deletion in linked list are easier than array, as the elements in an array are stored in a consecutive location. Also, its memory consumption is efficient as the size of the linked list can grow or shrink according to our requirements.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gukqRKbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619623950414/hFovrOEhj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gukqRKbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619623950414/hFovrOEhj.png" alt="Screenshot (216).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-operations-on-linked-list"&gt;
  &lt;/a&gt;
  Basic Operations on Linked List
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RkhmIm6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619625266982/xq4I6d54B.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RkhmIm6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619625266982/xq4I6d54B.png" alt="Screenshot (218).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Check the implementation of the linked list in JS &lt;a href="https://www.freecodecamp.org/news/implementing-a-linked-list-in-javascript/#:~:text=A%20linked%20list%20is%20a%20linear%20data%20structure%20similar%20to%20an%20array.&amp;amp;text=Rather%20each%20element%20is%20a,be%20any%20valid%20data%20type."&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stack"&gt;
  &lt;/a&gt;
  Stack
&lt;/h2&gt;

&lt;p&gt;Stack is a linear data structure that follows the &lt;strong&gt;LIFO&lt;/strong&gt;(Last In First Out) or &lt;strong&gt;FILO&lt;/strong&gt;(First In Last Out) principle. It contains only one pointer the &lt;strong&gt;top pointer&lt;/strong&gt; that points to the topmost element of the stack. Whenever we add an element to the stack, it is added at the top of the stack and also whenever we delete an element from the stack it is deleted from the top of the stack.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQVb0uUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619525079548/nmLn6pEVy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQVb0uUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619525079548/nmLn6pEVy.jpeg" alt="stack exaamples.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-operations-implemented-on-the-stack"&gt;
  &lt;/a&gt;
  Common operations implemented on the stack:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9cTWdwcp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619526090516/2P5WskswF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9cTWdwcp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619526090516/2P5WskswF.png" alt="Screenshot (207).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Check the implementation of stack in JS  &lt;a href="https://betterprogramming.pub/implementing-a-stack-in-javascript-73d1aa0483c1"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#queues"&gt;
  &lt;/a&gt;
  Queues
&lt;/h2&gt;

&lt;p&gt;Queue is a linear data structure that follows the &lt;strong&gt;FIFO&lt;/strong&gt;(First In First Out) principle. It contains two-pointers, 1) &lt;strong&gt;front pointer&lt;/strong&gt;, 2) &lt;strong&gt;rear pointer&lt;/strong&gt;. The front pointer contains the address of the starting element and the rear pointer contains the address of the last element of the queue. The two main methods used for the implementation of the queue are the &lt;strong&gt;enqueue&lt;/strong&gt; and &lt;strong&gt;dequeue&lt;/strong&gt; method. Enqueuing is the process of adding an element in the queue and dequeuing is the process of removing an element from the queue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I2JzCIZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619612564546/wKa7IZvmD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I2JzCIZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619612564546/wKa7IZvmD.png" alt="queue example.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-operations"&gt;
  &lt;/a&gt;
  Basic operations:-
&lt;/h3&gt;

&lt;p&gt;A queue is an object that allows the following operations-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3W8a_Sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619613224843/jiUo18FFX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3W8a_Sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619613224843/jiUo18FFX.png" alt="Screenshot (212).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Check the implementation of queue in JS  &lt;a href="https://dmitripavlutin.com/javascript-queue/"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trees"&gt;
  &lt;/a&gt;
  Trees
&lt;/h2&gt;

&lt;p&gt;The tree is a non-linear hierarchical data structure consists of nodes connected by edges. Each node contains some data and the link of other nodes that can be called children. The topmost node of the tree is known as a &lt;strong&gt;root&lt;/strong&gt; node. Nodes with linked child nodes are called internal nodes while those without child nodes are external nodes(leaf nodes).&lt;br&gt;
There are a number of different types of trees:-&lt;br&gt;&lt;br&gt;
1.) Binary Tree&lt;br&gt; 2.) Binary Search Tree &lt;br&gt;3.) AVL Tree&lt;br&gt;4.) Balanced tree &lt;br&gt;5.) Red black tree&lt;br&gt;6.) 2-3 tree&lt;br&gt;7.) N-ary tree&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Binary Tree&lt;/strong&gt; and &lt;strong&gt;Binary Search Tree&lt;/strong&gt; are typically the most often used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tree Representation:-&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9CQr3s2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619673843805/_hGOGZEAT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9CQr3s2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619673843805/_hGOGZEAT.png" alt="Screenshot (224).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-terminology"&gt;
  &lt;/a&gt;
  Basic Terminology
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Node =&amp;gt;&lt;/strong&gt; A &lt;strong&gt;node&lt;/strong&gt; is an entity that contains a data and pointer to its child nodes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Edge =&amp;gt;&lt;/strong&gt; The connecting link between any two nodes is called as &lt;strong&gt;Edge.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Root =&amp;gt;&lt;/strong&gt; It is the topmost node of a tree.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Parent =&amp;gt;&lt;/strong&gt;  The node which is a predecessor of any node is called as &lt;strong&gt;Parent Node.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Child =&amp;gt;&lt;/strong&gt; The node which is a descendant of any node is called as &lt;strong&gt;Child Node.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Siblings =&amp;gt;&lt;/strong&gt; Nodes that belong to the same parent are called &lt;strong&gt;Siblings.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Leaf =&amp;gt;&lt;/strong&gt; The node which does not have a child is called &lt;strong&gt;Leaf Node.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Internal Nodes =&amp;gt;&lt;/strong&gt; The node which has atleast one child is called &lt;strong&gt;Internal Node.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Degree =&amp;gt;&lt;/strong&gt; The total number of children of a node is called as &lt;strong&gt;DEGREE&lt;/strong&gt; of that Node.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Level =&amp;gt;&lt;/strong&gt; Each step from top to bottom is called the &lt;strong&gt;Level&lt;/strong&gt; of a tree. The root node is said to be at Level 0 and the children of the root node are at Level 1 and the children of the nodes which are at Level 1 will be at Level 2 and so on...&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Height of a Node =&amp;gt;&lt;/strong&gt; The &lt;strong&gt;Height of a Node&lt;/strong&gt; is the number of edges from the node to the deepest leaf (ie. the longest path from the node to a leaf node).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Height of a Tree =&amp;gt;&lt;/strong&gt; The &lt;strong&gt;Height of a Tree&lt;/strong&gt; is the height of the root node or the depth of the deepest node.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Depth of a Node =&amp;gt;&lt;/strong&gt; The &lt;strong&gt;Depth of a Node&lt;/strong&gt; is the number of edges from the root to the node.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Depth of a Tree =&amp;gt;&lt;/strong&gt; The &lt;strong&gt;Depth of a Tree&lt;/strong&gt; is the total number of edges from the root node to a leaf node in the longest path.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Check the implementation of tree in JS  &lt;a href="https://code.tutsplus.com/articles/data-structures-with-javascript-tree--cms-23393"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#graphs"&gt;
  &lt;/a&gt;
  Graphs
&lt;/h2&gt;

&lt;p&gt;A graph is a common data structure consists of a finite set of &lt;strong&gt;nodes&lt;/strong&gt; and &lt;strong&gt;edges.&lt;/strong&gt;  A graph can be seen more like a network. The interconnected objects are represented by points known as vertices, and the links that connect the vertices are called edges. A vertex is just similar to the linked list nodes and the pair (x,y) referred as an edge which means that the &lt;strong&gt;x&lt;/strong&gt; vertex connects to the &lt;strong&gt;y&lt;/strong&gt; vertex.  The graphs can be represented using an &lt;strong&gt;adjacency matrix&lt;/strong&gt; or &lt;strong&gt;adjacency list.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Graphs are the ultimate abstraction for many real-world problems. Some of the best use cases for Graph Data Structures include Social Graph APIs(like LinkedIn, Facebook, etc.), Path Optimization Algorithms(like Google maps), Web Analytics and Scientific Computations.&lt;/p&gt;

&lt;p&gt;There are two common types of graphs:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Undirected Graphs =&amp;gt;&lt;/strong&gt; In an undirected graph, edges are not associated with the directions with them. It means if an edge exists between vertex &lt;strong&gt;X&lt;/strong&gt; and &lt;strong&gt;Y&lt;/strong&gt; then the vertices can be traversed from &lt;strong&gt;Y&lt;/strong&gt; to &lt;strong&gt;X&lt;/strong&gt; as well as &lt;strong&gt;X&lt;/strong&gt; to &lt;strong&gt;Y&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Directed Graphs =&amp;gt;&lt;/strong&gt; In a directed graph, edges are associated with the directions with them. It means if an edge exists between vertex &lt;strong&gt;X&lt;/strong&gt; and &lt;strong&gt;Y&lt;/strong&gt; then the vertices can be traversed from &lt;strong&gt;X&lt;/strong&gt; to &lt;strong&gt;Y&lt;/strong&gt; only. Here, vertex A is called the initial node while vertex B is called the terminal node.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--phbRt-pX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619682270680/KHwQoSq_Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--phbRt-pX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619682270680/KHwQoSq_Q.png" alt="Screenshot (226).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-terminology"&gt;
  &lt;/a&gt;
  Basic Terminology
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Path =&amp;gt;&lt;/strong&gt;  Path represents a sequence of edges between the two vertices.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Simple Path =&amp;gt;&lt;/strong&gt; A simple path is a path in which all the nodes of the graph are distinct with an exception0=VN.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Closed Path =&amp;gt;&lt;/strong&gt; A simple path is a path in which the initial node is same as a terminal node. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cycle =&amp;gt;&lt;/strong&gt; A cycle can be defined as the path which has no repeated edges or vertices except the first and last vertices.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Complete Graph =&amp;gt;&lt;/strong&gt; A graph in which every vertex is directly connected to all other vertices.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Connected Graph =&amp;gt;&lt;/strong&gt; A Connected graph has a path between every pair of vertices&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Weighted Graph =&amp;gt;&lt;/strong&gt; A weighted graph associates a value (weight) with every edge in the graph.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Loop =&amp;gt;&lt;/strong&gt; An edge that is associated with similar endpoints can be called a Loop.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Degree =&amp;gt;&lt;/strong&gt; The degree of a vertex in a graph is the total number of edges incident to it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Adjacent Nodes(vertices) =&amp;gt;&lt;/strong&gt; Two vertices are called adjacent if they are connected via same edge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#basic-operations-on-graph"&gt;
  &lt;/a&gt;
  Basic Operations on Graph
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pceC6j66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619689452989/44OkV4BZV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pceC6j66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619689452989/44OkV4BZV.png" alt="Screenshot (228).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Check the implementation of graph in JS  &lt;a href="https://www.freecodecamp.org/news/8-essential-graph-algorithms-in-javascript/"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hash-tables"&gt;
  &lt;/a&gt;
  Hash Tables
&lt;/h2&gt;

&lt;p&gt;Hash Table(also called a hash, hash map) is a data structure that stores the data in an associative manner using hashing. &lt;strong&gt;Hashing&lt;/strong&gt; is the technique of mapping keys, values into the hash table by using a hash function.  Here “&lt;strong&gt;key&lt;/strong&gt;” is a searched string and the “&lt;strong&gt;value&lt;/strong&gt;” is the data paired with that key. By using a good hash function, hashing can work well. In the hash table, the insertion and search operations are very fast irrespective of the size of the data. Hash tables are built using arrays. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0x8BqVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619693189772/3q-I1nCBt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0x8BqVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619693189772/3q-I1nCBt.png" alt="Screenshot (230).png"&gt;&lt;/a&gt;&lt;br&gt;
Real-life examples of the hash table:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In school/universities, each student is assigned a unique roll number that can be used to retrieve information about them.&lt;/li&gt;
&lt;li&gt;In libraries, each book is assigned a unique number that can be used to determine information about the book,&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#basic-operations"&gt;
  &lt;/a&gt;
  Basic Operations
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Insert:-&lt;/strong&gt; inserts an element in a hash table.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Delete:-&lt;/strong&gt; Deletes an element from a hash table.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Search:-&lt;/strong&gt; Searches an element in a hash table.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Check the implementation of hash tables in JS  &lt;a href="https://www.educative.io/blog/data-strucutres-hash-table-javascript"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts-on-data-structures"&gt;
  &lt;/a&gt;
  Final Thoughts on Data Structures
&lt;/h2&gt;

&lt;p&gt;For many developers and programmers, data structures are most important for cracking Javascript coding interviews. Each data structure has a number of different applications and uses. So, having a basic understanding of data structures is a critical first step to becoming a good programmer.&lt;/p&gt;

&lt;p&gt;In this blog, we have just scratched the surface of data structures in JavaScript. If you enjoyed learning and find it useful please do like and share so that, it reaches others as well 🤝&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 😃
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;br&gt;
Let me know in the comment section if you have any doubt or feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/javascript-data-structures"&gt;https://www.educative.io/blog/javascript-data-structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.devmountain.com/what-you-should-know-about-data-structures/"&gt;https://blog.devmountain.com/what-you-should-know-about-data-structures/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/siliconwat/data-structures-in-javascript-1b9aed0ea17c"&gt;https://medium.com/siliconwat/data-structures-in-javascript-1b9aed0ea17c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bitsrc.io/data-structures-you-should-know-as-a-javascript-developer-9a35eb3b319c"&gt;https://blog.bitsrc.io/data-structures-you-should-know-as-a-javascript-developer-9a35eb3b319c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the  &lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt; JavaScript Algorithms and Data Structures &lt;/a&gt; repository on GitHub. It has a collection of classic algorithms and data structures implemented in ES6 JavaScript with explanations and links to further readings and YouTube videos.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>HASH.JS | A JavaScript library ( easy to use)</title>
      <author>Raghav Yadav</author>
      <pubDate>Wed, 12 May 2021 04:02:31 +0000</pubDate>
      <link>https://dev.to/raghav9official/hash-js-a-javascript-library-easy-to-use-2f6p</link>
      <guid>https://dev.to/raghav9official/hash-js-a-javascript-library-easy-to-use-2f6p</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZDdjarD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://netopa.github.io/hash.js/logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZDdjarD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://netopa.github.io/hash.js/logo.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hashjs"&gt;
  &lt;/a&gt;
  &lt;a href="https://netopa.github.io/hash.js"&gt;hash.js&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Link to the file&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://netopa.github.io/hash.js/hashtag_1.0.1.js"&gt;https://netopa.github.io/hash.js/hashtag_1.0.1.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
size: 1/6&lt;sup&gt;th&lt;/sup&gt; of jQuery!&lt;br&gt;&lt;br&gt;
(when completed)&lt;br&gt;
&lt;br&gt;&lt;br&gt;
how to use&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Just use it like jQuery :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animationName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animationName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;by tag&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: you must first enable animation by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;enableAnime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which enables it for all element on the page&lt;br&gt;&lt;br&gt;
Then enable it for an element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jackInTheBox&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//animation name, duration ,delay&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;We use animate.css engine for animating elements so the list could be a whole lot familiar...&lt;br&gt;
&lt;br&gt;&lt;br&gt;
list of animation inclues : &lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Attention seekers:

bounce
flash
pulse
rubberBand
shakeX
shakeY
headShake
swing
tada
wobble
jello
heartBeat

Back entrances:

backInDown
backInLeft
backInRight
backInUp
Back exits
backOutDown
backOutLeft
backOutRight
backOutUp

Back exits:

backOutDown
backOutLeft
backOutRight
backOutUp
Bouncing entrances
bounceIn
bounceInDown
bounceInLeft
bounceInRight
bounceInUp

Bouncing exits:

bounceOut
bounceOutDown
bounceOutLeft
bounceOutRight
bounceOutUp

Fading entrances:

fadeIn
fadeInDown
fadeInDownBig
fadeInLeft
fadeInLeftBig
fadeInRight
fadeInRightBig
fadeInUp
fadeInUpBig
fadeInTopLeft
fadeInTopRight
fadeInBottomLeft
fadeInBottomRight

Fading exit:

fadeOut
fadeOutDown
fadeOutDownBig
fadeOutLeft
fadeOutLeftBig
fadeOutRight
fadeOutRightBig
fadeOutUp
fadeOutUpBig
fadeOutTopLeft
fadeOutTopRight
fadeOutBottomRight
fadeOutBottomLeft

Flippers:

flip
flipInX
flipInY
flipOutX
flipOutY

Lightspeed:

lightSpeedInRight
lightSpeedInLeft
lightSpeedOutRight
lightSpeedOutLeft

Rotating entrances:

rotateIn
rotateInDownLeft
rotateInDownRight
rotateInUpLeft
rotateInUpRight

Rotating exits:

rotateOut
rotateOutDownLeft
rotateOutDownRight
rotateOutUpLeft
rotateOutUpRight

Specials:

hinge
jackInTheBox
rollIn
rollOut

Zooming entrances:

zoomIn
zoomInDown
zoomInLeft
zoomInRight
zoomInUp

Zooming exits:

zoomOut
zoomOutDown
zoomOutLeft
zoomOutRight
zoomOutUp

Sliding entrances:

slideInDown
slideInLeft
slideInRight
slideInUp

Sliding exits:

slideOutDown
slideOutLeft
slideOutRight
slideOutUp

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding an event listener:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
   &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Append text:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;someText&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Prepend text: &lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;someText&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set or get attributes:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns body&lt;/span&gt;
&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// sets I'd to body&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the style of an element:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//changes the css to background: black;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ajax: change the content of an element with remote file content:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://url-to-file.com/TXT.txt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//the second one is the method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set a cookie 🍪:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;setCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hashtag&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;session&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//key, value, expires, path&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get a cookie by name:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//returns "hashtag"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add an element:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addElm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;element name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id of elm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// You can use the set attribute function to add attributes or to change text into the element&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Configure local storage:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// action list:&lt;/span&gt;
&lt;span class="c1"&gt;//     "clear" clears the local storage&lt;/span&gt;
&lt;span class="c1"&gt;//     "get".  Gets the iten with specified key&lt;/span&gt;
&lt;span class="c1"&gt;//     "set"   set the key with the respective value&lt;/span&gt;
&lt;span class="c1"&gt;//     "remove" remove the item with the specified key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Toogle hide and show:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.element&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toogle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More features comming soon!!!&lt;/p&gt;

&lt;p&gt;If you liked this article don't forget to hit a like.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>library</category>
      <category>showdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 Ways I Overcome Impostor Syndrome As A Developer</title>
      <author>Kingsley Ubah</author>
      <pubDate>Wed, 12 May 2021 03:51:30 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/5-ways-i-overcome-impostor-syndrome-as-a-developer-2p0d</link>
      <guid>https://dev.to/ubahthebuilder/5-ways-i-overcome-impostor-syndrome-as-a-developer-2p0d</guid>
      <description>&lt;p&gt;&lt;strong&gt;"I am not good enough"&lt;/strong&gt;.&lt;br&gt;
&lt;strong&gt;"I am not worthy of this position"&lt;/strong&gt;.&lt;br&gt;
&lt;strong&gt;"I am a fraud"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We all have these negative thoughts every once in a while. It happens even to the best of us. When it comes, it saps away your self-confidence like a leech and leaves you low, drained and demotivated.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Impostor Syndrome is the belief that you're not as competent, successful, intelligent, talented or wise as you claim or are regarded to be and that your success or achievement was based on luck and hence, undeserving of that position.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Software developers are particularly prone to impostor syndrome. &lt;strong&gt;It's very easy to get overwhelmed by the sheer number of tools and concepts a contemporary web developer is expected to know.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Personally, I have been affected by impostor syndrome a couple of times and the feeling of it really sucks.&lt;/p&gt;

&lt;p&gt;Below are five effective ways I handle impostor syndrome.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-find-high-profile-failures"&gt;
  &lt;/a&gt;
  I Find High Profile Failures
&lt;/h3&gt;

&lt;p&gt;Whenever I am held down or feeling low, I tried searching for some  high profile failures and mistakes by experts and then try to imagine how they must have felt following their incidents.&lt;/p&gt;

&lt;p&gt;I kind of tell myself this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"If Mr X, a well renowned and highly educated professional could make this kind of mistake and still bounce back then you have a chance"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What I essentially do is that I use the enormity of their mistakes to excuse or justify mine, I use it to boost my confidence and motivate myself to rise up from my self-pity.&lt;/p&gt;

&lt;p&gt;It fills me with the notion that no one &lt;strong&gt;"knows it all".&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This works almost all the time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-up-and-ask-for-help"&gt;
  &lt;/a&gt;
  Open Up And Ask For Help
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xYi9RQGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620790402604/yj7MJynMO.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xYi9RQGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620790402604/yj7MJynMO.jpeg" alt="pexels-buro-millennial-1438072.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a very important step to take. Opening up for me is one of the single most effective way to lighten your mood and restore your self-belief.&lt;/p&gt;

&lt;p&gt;Whether it's a fellow developer on social media or a team member at work, opening up to him about your feelings can be very helpful as he/she is most likely to give you words of encouragement in hopes of allaying your doubts and motivating you.&lt;/p&gt;

&lt;p&gt;Of course, you should be very careful of the kind of person you open up to. Some might actually aggravate the feeling  by making jokes and cruel comments.&lt;/p&gt;

&lt;p&gt;You should only reach out to someone with delicate demeanour who you are positive will listen and help you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hark-back-to-a-point-you-did-something-incredible"&gt;
  &lt;/a&gt;
  Hark Back To A Point You Did Something Incredible
&lt;/h3&gt;

&lt;p&gt;This is the ultimate reinvigoration.&lt;/p&gt;

&lt;p&gt;Once I got so low in spirit that depression completely beclouded me. I lost a lot of belief in my ability to code. Then I had an epiphany. I suddenly recalled a time when I had successfully set up a back-end in a language I barely knew. It was one of the most proud and triumphant feeling I ever had in my life. &lt;br&gt;
Just think back at it filled me with renewed energy and boosted my spirit to lift myself up and try again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#watch-more-tutorials"&gt;
  &lt;/a&gt;
  Watch More Tutorials
&lt;/h3&gt;

&lt;p&gt;I know you're probably wondering what the hell I'm driving at, but here me out.&lt;/p&gt;

&lt;p&gt;The aim is boosting your spirit and your self-belief.&lt;/p&gt;

&lt;p&gt;Watching tutorial makes you think, or gives you the illusion that you finally understand how it's done.&lt;/p&gt;

&lt;p&gt;You can channel this renewed interest and zeal into actually finding the solution to your problems and who knows, that might turn out to be your break-through moment.&lt;/p&gt;

&lt;p&gt;You might disagree with me on this, but it works a lot for me.&lt;/p&gt;

&lt;p&gt;What a new tutorial. Energize yourself by thinking you now understand everything. Trying and fix the issue. Fail. Repeat. Success.&lt;/p&gt;

&lt;p&gt;This process also tries to make you better. So it's a win-win for both your confidence and your actual abilities.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;N/B: If you're looking for some beginner-friendly tutorial on web development, I'll highly recommend  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React By Sleepless Yogi&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#think-about-how-success-would-feel"&gt;
  &lt;/a&gt;
  Think About How Success Would Feel
&lt;/h3&gt;

&lt;p&gt;Sometimes all you need to motivate yourself is by visualizing what you stand to benefit from succeeding. The goal is to lift you up and keep you going.&lt;/p&gt;

&lt;p&gt;Whether it's the income or other kind of rewards, visualizing what it would look or feel like is a great way to bolster your already depleted self-esteem.&lt;/p&gt;

&lt;p&gt;Impostor Syndrome is a phase every professional go through at one point of their career. These are the most effective ways I use to subdue mine.&lt;/p&gt;

&lt;p&gt;I emphasized the word "subdue" because I still get impostor syndrome sometimes. I don't know if it's really possible to completely get rid of the feeling.&lt;/p&gt;

&lt;p&gt;However this time, I am mentally more equipped to combat it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you enjoyed this article and want to support me, feel free to buy me my favourite fruit:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you for your time and see you soon!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How I built my Blog With Next.js 🌟</title>
      <author>JudeTejada</author>
      <pubDate>Wed, 12 May 2021 03:43:52 +0000</pubDate>
      <link>https://dev.to/judetejada/how-i-built-my-blog-4j0</link>
      <guid>https://dev.to/judetejada/how-i-built-my-blog-4j0</guid>
      <description>&lt;p&gt;Post Originally at my &lt;a href="https://judetejada.vercel.app/blog/how-i-built-my-blog"&gt;website&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I decided to revamp my portfolio as there were a lot of things that I wanted to add on such as sub-pages and even dynamically generated pages, while my previous portfolio still gets the job done I figure out it's now the right time to further revamp my portfolio.&lt;/p&gt;

&lt;p&gt;When I'm working on a project I like to structure out my process into workflows that help me get an organized roadmap of achieving the project till the end result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#research"&gt;
  &lt;/a&gt;
  Research
&lt;/h2&gt;

&lt;p&gt;The first process is to do research, this includes finding inspirations from other people's portfolios and setting the right theme to fit my portfolio website, I also created a mood-board in which I could use as my reference when I'm building out a portfolio. Creating a unique concept takes time and so following what's already been used would help us on focusing on the important matters and will save us time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design"&gt;
  &lt;/a&gt;
  Design
&lt;/h2&gt;

&lt;p&gt;One big mistake that I had while building out my portfolio as I didn't sketch out nor created a wireframe of what my actual website would look like. I straight up got myself into coding and that's where things had gone awry, there were a lot of times that I iterated a particular section and a lot of inconsistencies with my colors, font sizes but either way, it turned out pretty well and I had learned a lesson&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Always start with wireframing your website as it helps you get a clear sense of the idea of what you're trying to build and you won't get end up with multiple revisions which could potentially waste so much of your time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#coding-the-website"&gt;
  &lt;/a&gt;
  Coding the website
&lt;/h2&gt;

&lt;p&gt;This is the most exciting part of revamping my portfolio and it's when I get to choose what tools, technologies that I would plan to use. I had chosen to use Tailwind, Next.js, and MDX. I've been using Next.js in my previous project and I had grown to absolutely enjoy it, it's my go framework for building a project, I use to design my project from scratch with CSS but this time I decided to use Tailwind and explore with it, One of the things that I like about Tailwind is that it doesn't lock you in their design system and instead it lets you be the one to create for yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;After a couple of days building out my portfolio website I had learned a couple of things and also explore new technologies. I'll continue to improve my website as I think there is still a couple of improvements, especially with MDX since I could use JSX component inside of markdown.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Secrets to using REM in CSS: CSS Tips</title>
      <author>Emma Turner</author>
      <pubDate>Wed, 12 May 2021 02:39:07 +0000</pubDate>
      <link>https://dev.to/turneremma21/secrets-to-using-rem-in-css-css-tips-2gkh</link>
      <guid>https://dev.to/turneremma21/secrets-to-using-rem-in-css-css-tips-2gkh</guid>
      <description>&lt;p&gt;As device sizes proceed to wander and programs give more client alternatives, utilizing static units simply doesn't cut it any longer. Some such countless individuals set their browser inclination to bigger content with no impact on the sites they visit. &lt;/p&gt;

&lt;p&gt;While pixels will permit clients to zoom in and out, their content settings on their PC or program won't have any impacts. &lt;/p&gt;

&lt;p&gt;By utilizing REM units you make Scalable sites that keep up the proportions between components while likewise scaling to the client's inclination. So if a client sets their settings to have bigger content - your site ought to react so they can appreciate it like every other person!&lt;/p&gt;

&lt;p&gt;Over the last couple of years, I have stopped using pixel units and also advising people to do the same. Let's see why you should use REM units. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#rem-vs-em"&gt;
  &lt;/a&gt;
  REM vs EM
&lt;/h3&gt;

&lt;p&gt;But first, we must clear up the difference between EM and REM units. Both units are calculated to form the font size and use a base value the number of ems/rems is the multiple of that value. &lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/*Base fontsize 16px*/&lt;/span&gt;
&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;16&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;
&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;32&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;

&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;em&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;16&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;
&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;em&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;32&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference is that REM values always use the root base value (set on the HTML element), whereas EM units are relative to their container. &lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/*Base fontsize 16px*/&lt;/span&gt;
&lt;span class="c"&gt;/*Container fontsize 20px*/&lt;/span&gt;

&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;16&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;
&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;32&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;

&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;em&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;
&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;em&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;40&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-the-root-base-value"&gt;
  &lt;/a&gt;
  What is the root base value?
&lt;/h3&gt;

&lt;p&gt;The default base font size is set by the browser and on most of the browser 1 rem = 16px.  This means you can even use the standardized 8px grid since 0.5rem = 8px. &lt;br&gt;
It is possible to set your base value by changing the &lt;code&gt;font-size&lt;/code&gt; of the HTML element but the beauty f letting the browser control the default value is that users can change it. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fluid-elements"&gt;
  &lt;/a&gt;
  Fluid Elements
&lt;/h3&gt;

&lt;p&gt;By using REM units and letting the browser (and user control the base value, you create scalable elements that will keep their form when they are sized up or down. This created truly fluid and flexible layouts that will scale beautifully no matter the users' personal preference and settings. &lt;/p&gt;

&lt;p&gt;Example:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The title will be always larger than the paragraph text no matter what the base size is. They scale together. And this is the same with the buttons too, &lt;code&gt;font-size&lt;/code&gt;, &lt;code&gt;border-radius&lt;/code&gt; and padding all scales with the base size. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-px-units"&gt;
  &lt;/a&gt;
  What about PX units?
&lt;/h3&gt;

&lt;p&gt;The pixel has a place on the web through ad there are plenty of times when you require a fixed value that isn't scald based on the user's preference. For example, pixels are still good for setting borders that don't always need to scale. &lt;/p&gt;




&lt;p&gt;Thank you for showing interest and reading. So use REM instead of PX🤗. &lt;/p&gt;

</description>
      <category>css</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Go Crash Course Part VIII: if, switch and for</title>
      <author>Mofizur Rahman</author>
      <pubDate>Wed, 12 May 2021 01:57:33 +0000</pubDate>
      <link>https://dev.to/moficodes/go-crash-course-part-viii-if-switch-and-for-1g5j</link>
      <guid>https://dev.to/moficodes/go-crash-course-part-viii-if-switch-and-for-1g5j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#if"&gt;
  &lt;/a&gt;
  If
&lt;/h2&gt;

&lt;p&gt;In programming often we have to have conditional execution of certain statements. In most programming languages we have the idea of &lt;code&gt;if&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"x is greater than 5"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example we have a variable &lt;code&gt;x&lt;/code&gt; which has value of 10. Then we check whether or not &lt;code&gt;x&lt;/code&gt; is greater than 5. If it is, we print something. Otherwise we do nothing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-else-if-else"&gt;
  &lt;/a&gt;
  if - else if - else
&lt;/h3&gt;

&lt;p&gt;Often we are checking for more than one related thing. Lets take the example of &lt;a href="https://en.wikipedia.org/wiki/Fizz_buzz"&gt;FizzBuzz&lt;/a&gt; problem. For any number n, we want to print &lt;code&gt;Fizz&lt;/code&gt; if n is divisible by 3, &lt;code&gt;Buzz&lt;/code&gt; if n is divisible by 5, &lt;code&gt;FizzBuzz&lt;/code&gt; if n is divisible by both 3 and 5 and n if its not divisible by either 3 or 5.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"FizzBuzz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Buzz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fizz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can chain as many if-else if as we want. else is a special case where we do not have to have a conditional operator. It matches the case that no if - else if conditions match. &lt;/p&gt;

&lt;p&gt;It is almost always possible to skip the else branch in functions. For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of having a else block we can just return the default case. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-with-statement"&gt;
  &lt;/a&gt;
  If with statement
&lt;/h3&gt;

&lt;p&gt;Sometimes we want to check some condition of variable we just created and we only need the variable for the condition. An example might help clear this up a bit more.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;minRand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a random number &lt;code&gt;v&lt;/code&gt; and if v is greater than &lt;code&gt;min&lt;/code&gt; we return &lt;code&gt;v&lt;/code&gt; if not we would just return &lt;code&gt;min&lt;/code&gt;. We do not need access to &lt;code&gt;v&lt;/code&gt; outside the if condition. This helps us with readability as well as variable naming. In go we are not allowed to redefine a variable with a different type. In a large function having every variable in the same scope might cause trouble.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for"&gt;
  &lt;/a&gt;
  For
&lt;/h2&gt;

&lt;p&gt;In programming we sometimes need to do something multiple times. We achieve this using loops. Go has only one construct for looping. It is the &lt;code&gt;for&lt;/code&gt; keyword. But &lt;code&gt;for&lt;/code&gt; is pretty versatile in go where we do not need anything else like &lt;code&gt;do-while&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; like in some other language. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anatomy-of-for"&gt;
  &lt;/a&gt;
  Anatomy of for
&lt;/h3&gt;

&lt;p&gt;Generally a &lt;code&gt;for&lt;/code&gt; loop has this structure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a init that initializes our loop invariant. Then we have a condition that is used to terminate the loop and we have a change that is run after each loop iteration. &lt;/p&gt;

&lt;p&gt;All three of these are optional and can be used or omitted as we need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are all possible combination of a for loop with a single invariant. All of these for loop do the exact same thing. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#break"&gt;
  &lt;/a&gt;
  Break
&lt;/h3&gt;

&lt;p&gt;At any point in the &lt;code&gt;for&lt;/code&gt; execution we can use the &lt;code&gt;break&lt;/code&gt; statement to break out of the closest &lt;code&gt;for&lt;/code&gt; loop. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mutli-invariant-for-loop"&gt;
  &lt;/a&gt;
  Mutli invariant for loop
&lt;/h3&gt;

&lt;p&gt;We can also have for loops where we have two variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The basic structure is the same. We have a init where we initialize &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;. Condition to chech &lt;code&gt;i != j&lt;/code&gt; and then we increase &lt;code&gt;i&lt;/code&gt; and decrease &lt;code&gt;j&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#forever"&gt;
  &lt;/a&gt;
  Forever
&lt;/h3&gt;

&lt;p&gt;If we run a for loop with no exit condition we runt he for loop forever. There are times we want to run a process indefinitely.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c"&gt;// do work indefinitely &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example if we look at the source code for &lt;a href="https://golang.org/src/net/http/server.go?s=99574:99629#L2980"&gt;net/http&lt;/a&gt; we can see an example of indefinite for loop that waits for new connection to server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;This is Part 8 of this Go crash course series.&lt;/p&gt;

</description>
      <category>go</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>History of Java And JavaScript names</title>
      <author>Starmanaman</author>
      <pubDate>Wed, 12 May 2021 01:46:06 +0000</pubDate>
      <link>https://dev.to/starmanaman/history-of-java-and-javascript-names-3lm7</link>
      <guid>https://dev.to/starmanaman/history-of-java-and-javascript-names-3lm7</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zTLZlxdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eisbvuypwdta34xvah6n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTLZlxdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eisbvuypwdta34xvah6n.png" alt="name history of java and javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read the difference between Java &amp;amp; JavaScript&lt;br&gt;
&lt;a href="https://buggyprogrammer.com/difference-between-java-and-javascript/"&gt;https://buggyprogrammer.com/difference-between-java-and-javascript/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>javascript</category>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>On decision of embracing utility-first CSS</title>
      <author>🅰️ GEEK</author>
      <pubDate>Wed, 12 May 2021 01:41:51 +0000</pubDate>
      <link>https://dev.to/ageekdev/on-decision-of-embracing-utility-first-css-k79</link>
      <guid>https://dev.to/ageekdev/on-decision-of-embracing-utility-first-css-k79</guid>
      <description>&lt;p&gt;&lt;strong&gt;Utility-First CSS is trending in 2021&lt;/strong&gt;. If you hate it, you will feel annoyed seeing people promoting it. If you love it, you'll question why people hate it. If you're still skeptical then there's a high chance you've already read all following articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://adamwathan.me/css-utility-classes-and-separation-of-concerns/"&gt;CSS Utility Classes and "Separation of Concerns"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontstuff.io/in-defense-of-utility-first-css"&gt;In Defense of Utility-First CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/lets-define-exactly-atomic-css/"&gt;Let’s Define Exactly What Atomic CSS is&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mrmrs.io/writing/2016/03/24/scalable-css/"&gt;CSS and Scalability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zeldman.com/2017/01/03/kiss-my-classname/"&gt;Kiss My Classname&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can't ignore it anymore when it's gaining so much attention and potentially becomes something big that you and your team don't want to miss. Same thing happens to Svelte. It's moving in an unpopular direction, it pushes you to make decision at this point — ignore it, embrace it, or question your current direction:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is it worth the learning?&lt;/li&gt;
&lt;li&gt;Is it considered harmful in long term?&lt;/li&gt;
&lt;li&gt;Will it scale well in my team or company?&lt;/li&gt;
&lt;li&gt;Does it have same abstraction as web frameworks (React, Vue, Angular)?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you still couldn't pick a side, then I'm here to help you. This post focuses on the decision of embracing &lt;strong&gt;utility-first CSS&lt;/strong&gt; in general and &lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt; in more specific.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-really-care-about"&gt;
  &lt;/a&gt;
  What you really care about
&lt;/h2&gt;

&lt;p&gt;All CSS technologies like &lt;a href="https://ageek.dev/css-frameworks"&gt;CSS frameworks&lt;/a&gt;, &lt;a href="https://ageek.dev/css-methodologies"&gt;CSS methodologies&lt;/a&gt;, or &lt;a href="https://ageek.dev/css-in-js"&gt;CSS-in-JS libraries&lt;/a&gt; try to fix &lt;a href="https://ageek.dev/problems-of-css"&gt;problems of CSS at scale&lt;/a&gt; one way or another. Following are major deciding factors before picking a CSS solution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Naming classnames&lt;/strong&gt;: Short, scoped, and collision-free.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Output bundle sizes&lt;/strong&gt;: The smaller the better, even better if modular&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Optimization chances&lt;/strong&gt;: Removing unused styles, caching extracted CSS files.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Developer experience&lt;/strong&gt;: Fast development, easy refactoring, linting.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learning investment&lt;/strong&gt;: fast to learn, works well between tech stacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Different years of experience and project sizes have different expectations on above factors like beginners care more about &lt;strong&gt;learning investment&lt;/strong&gt; and big projects care more about &lt;strong&gt;optimization chances&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Be aware of learning something backwards, modern developers often stumbled into trending CSS-like, JavaScript-like, HTML-like and find themselves never actually learn vanilla HTML, CSS, JavaScript which considered harmful picking up new web technologies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-idea-behind-utilityfirst-css"&gt;
  &lt;/a&gt;
  The idea behind utility-first CSS
&lt;/h2&gt;

&lt;p&gt;The main idea behind utility-first CSS movement is to style everything based on predefined utility classes — developed by yourself or frameworks.&lt;/p&gt;

&lt;p&gt;People love it because it promotes &lt;strong&gt;rapid prototyping&lt;/strong&gt; by reusing tons of &lt;strong&gt;useful ready-to-use CSS classes&lt;/strong&gt; at a &lt;strong&gt;very strict manner&lt;/strong&gt;. People hate it because it produces &lt;strong&gt;ugly HTML markup with long string of classes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt; comes prepacked with a lot of options and styles for users to choose from, and it packs all these variations to reduce the tendency to write your own CSS.&lt;/p&gt;

&lt;p&gt;Majority of time you don't do that much of customization as you expected, there is a chance that you'll never create any custom CSS in small projects, that's why Tailwind has been gaining so much momentum.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-decision-on-utilityfirst-css"&gt;
  &lt;/a&gt;
  The decision on utility-first CSS
&lt;/h2&gt;

&lt;p&gt;I have a background on mobile development where I always styled components programmatically. When I moved to web development, component-based CSS-in-JS seemed so obvious and future-proof. The transition was right and pleasant in the beginning.&lt;/p&gt;

&lt;p&gt;I already experienced &lt;strong&gt;utmost dynamic component-based architecture&lt;/strong&gt; when writing styles, layouts, and logics in one file using general-purpose programming languages. I resist all technologies go against my principles, I may try them, but not going to embrace any of them!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I don't like Angular because it uses HTML templates.&lt;/li&gt;
&lt;li&gt;I don't like Vue because it uses template structures in &lt;code&gt;.vue&lt;/code&gt; files.&lt;/li&gt;
&lt;li&gt;I don't like Svelte because it uses template structures in &lt;code&gt;.svelte&lt;/code&gt; files and ugly template APIs.&lt;/li&gt;
&lt;li&gt;I don't like utility-first CSS because it promotes heavy uses of predefined classes instead of well-known CSS properties, and obviously ugly classnames in HTML.&lt;/li&gt;
&lt;li&gt;I like React and &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt; when it translates very well to mobile apps and desktop apps, I prefer reusable fully-functional components than reusable CSS or HTML alone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You see the point here, it's not about right or wrong decision. It's all about define principles in your developer career and technologies will fall into the right bucket for you and only you.&lt;/p&gt;




&lt;p&gt;Originally published at &lt;a href="https://ageek.dev"&gt;ageek.dev&lt;/a&gt; as part of online book &lt;a href="https://ageek.dev/css"&gt;Advanced CSS&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>
Create an NLP model without code</title>
      <author>Byeongal</author>
      <pubDate>Wed, 12 May 2021 01:11:47 +0000</pubDate>
      <link>https://dev.to/byeongal/create-an-nlp-model-without-code-7hd</link>
      <guid>https://dev.to/byeongal/create-an-nlp-model-without-code-7hd</guid>
      <description>&lt;p&gt;Hi all,&lt;/p&gt;

&lt;p&gt;Today I will introduce a service that creates an NLP model without code. Its name is "Teachable-NLP". To use Teachable-nlp, you only need to prepare the data(txt). &lt;/p&gt;

&lt;p&gt;And if you have a good idea, try the "Teachable NLP Challenge"&lt;/p&gt;

&lt;p&gt;Teachable NLP Challenge is free and open to everyone interested in training their own AI. All you need to be prepared for is good ideas and datasets.&lt;/p&gt;

&lt;p&gt;When: 05/05/2021 – 05/18/2021 11:59 EDT&lt;/p&gt;

&lt;p&gt;How: You just need to submit your AI model link and explanations on your AI (Good example: &lt;a href="https://forum.ainetwork.ai/c/ai-showcase/11"&gt;https://forum.ainetwork.ai/c/ai-showcase/11&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Prizes: Apple Store gift cards, Winners’ interviews will be broadcasted through AI Network Youtube Channel(1.48K subscribers)&lt;/p&gt;

&lt;p&gt;To participate, submit your info via &lt;a href="https://forms.gle/XfUuNSS2heAn7JtH7"&gt;https://forms.gle/XfUuNSS2heAn7JtH7&lt;/a&gt;. You will receive an invitation email!&lt;/p&gt;

&lt;p&gt;Check how Teachable NLP works: &lt;a href="https://forum.ainetwork.ai/t/teachable-nlp-how-to-use-teachable-nlp/65Or"&gt;https://forum.ainetwork.ai/t/teachable-nlp-how-to-use-teachable-nlp/65Or&lt;/a&gt; watch a 1-minute tutorial video: &lt;a href="https://youtu.be/hzujZOT1qz8"&gt;https://youtu.be/hzujZOT1qz8&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Mock Intl and Date globals in Jest (easily!)</title>
      <author>Jeff Sheets</author>
      <pubDate>Wed, 12 May 2021 01:01:45 +0000</pubDate>
      <link>https://dev.to/jeffsheets/mock-intl-and-date-globals-in-jest-easily-1co5</link>
      <guid>https://dev.to/jeffsheets/mock-intl-and-date-globals-in-jest-easily-1co5</guid>
      <description>&lt;p&gt;In Javascript land, mocking the browser global objects can be a bit of a pain for tests. Searching StackOverflow gives plenty of complicated answers. Some suggesting using 3rd party mock libraries. Some that overwrite the global object itself.... But Jest already has this capability built-in and it isn't so bad:&lt;/p&gt;

&lt;p&gt;So let's say you have a method that gets the user's timezone or the timezone offset. (the timezone offset is used sometimes since &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions#browser_compatibility"&gt;IE11 doesn't support easily reading the timezone&lt;/a&gt;, but I digress)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Useful when passing the browser timezone to a backend Java API that reads a timezone in using ZoneId.of(tz),
 *  as both 'America/Chicago' and '-0600' are valid values when passed to the Java API.
 *  The Offset is used to handle IE11 and other older browsers.
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUserTimeZoneOrOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;timeZone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Intl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DateTimeFormat&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resolvedOptions&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Ignore if this happens, and just use the fallback&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Could not get a browser timezone, maybe IE11, so instead use timezoneOffset formatted for Java&lt;/span&gt;
    &lt;span class="c1"&gt;// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#of(java.lang.String)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getTimezoneOffset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;//Yeah this offset +/- seems backwards,&lt;/span&gt;
    &lt;span class="c1"&gt;// but JS actually returns a positive when local tz is behind UTC (like for US tzs)&lt;/span&gt;
    &lt;span class="c1"&gt;// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset&lt;/span&gt;
    &lt;span class="c1"&gt;// e.g. offset = 300, timeZone='-0500'&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;plusMinus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//leftpad a 0 when needed for two digits&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;timeZone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;plusMinus&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to test this, we'll need to mock out both the Intl and Date Javascript globals. We can do this using &lt;a href="https://jestjs.io/docs/jest-object#jestspyonobject-methodname"&gt;Jest's spyOn&lt;/a&gt; method to temporarily replace the global method with our own implementation. Notice that we setup the spy in the &lt;strong&gt;beforeEach&lt;/strong&gt; and reset everything in the &lt;strong&gt;afterEach&lt;/strong&gt;. The setup works something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getUserTimeZoneOrOffset&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./timeZoneUtils.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;getUserTimeZoneOrOffset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mockOffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mockTimezone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;mockTimezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Intl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DateTimeFormat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;mockImplementation&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;resolvedOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mockTimezone&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}));&lt;/span&gt;

      &lt;span class="nx"&gt;mockOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;jest&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;getTimezoneOffset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mockImplementation&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mockOffset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;afterEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;restoreAllMocks&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;returns timezone name when found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;mockTimezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;America/Chicago&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserTimeZoneOrOffset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;America/Chicago&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-0500&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-0230&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+0100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;330&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+0530&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+0000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;765&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+1245&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;])(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;timezoneOffset for %i is %s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;mockOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserTimeZoneOrOffset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But that's it! No need to import an extra library. This is all supplied directly in Jest itself!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>testing</category>
      <category>jest</category>
    </item>
    <item>
      <title>React no Windows com WSL</title>
      <author>Tulio Calil</author>
      <pubDate>Wed, 12 May 2021 00:55:36 +0000</pubDate>
      <link>https://dev.to/tuliocalil/react-no-windows-com-wsl-3951</link>
      <guid>https://dev.to/tuliocalil/react-no-windows-com-wsl-3951</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ClIRuHLj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devblogs.microsoft.com/cse/wp-content/uploads/sites/55/2016/05/featured.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ClIRuHLj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devblogs.microsoft.com/cse/wp-content/uploads/sites/55/2016/05/featured.png" alt="Windows React"&gt;&lt;/a&gt;&lt;br&gt;
Se você tem Windows e usa React (ou qualquer outra lib/framework que dependa do Nodejs) e já teve algum problema com o ambiente Node.js no Windows ou mesmo tem a curiosidade de utilizar o WSL (Windows subsystem for linux), esse post vai te ajudar a configurar essa ferramenta incrível que é o WSL.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#instalando-wsl-%F0%9F%96%A5"&gt;
  &lt;/a&gt;
  Instalando WSL 🖥
&lt;/h2&gt;

&lt;p&gt;Vamos começar habilitando o WSL no nosso Windows, para isso vamos executar o seguinte comando no PowerShell (execute como administrador):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos habilitar o recurso de maquina virtual no Windows, basta executar o seguinte comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Em seguida, &lt;em&gt;reinicie&lt;/em&gt; o sistema para continuar.&lt;br&gt;
Após reiniciar o sistema, &lt;a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi"&gt;baixe esse instalador e execute&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;E por fim, vamos definir o WSL 2 como padrão quando baixarmos novas imagens linux:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wsl &lt;span class="nt"&gt;--set-default-version&lt;/span&gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#escolhendo-imagem-linux"&gt;
  &lt;/a&gt;
  Escolhendo imagem Linux 🐧
&lt;/h2&gt;

&lt;p&gt;Temos &lt;a href="https://docs.microsoft.com/pt-br/windows/wsl/install-win10#step-6---install-your-linux-distribution-of-choice"&gt;algumas imagens linux&lt;/a&gt; para escolher, vamos até a Windows Store e pesquise por "Linux" e escolha a que você preferir.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---CKpzjIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/pt-br/windows/wsl/media/store.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---CKpzjIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/pt-br/windows/wsl/media/store.png" alt="Windows Store"&gt;&lt;/a&gt;&lt;br&gt;
Após escolher, basta baixar e seguir o passo a passo de instalação (que é bem simples)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#windows-terminal"&gt;
  &lt;/a&gt;
  Windows Terminal 💻
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aKCQpY-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/pt-br/windows/terminal/images/overview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aKCQpY-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/pt-br/windows/terminal/images/overview.png" alt="Windows Terminal"&gt;&lt;/a&gt;&lt;br&gt;
Vamos agora instalar o &lt;a href="https://github.com/microsoft/terminal"&gt;Windows Terminal&lt;/a&gt;, é um passo opcional, mas super legal, além de bonito, tem &lt;a href="https://docs.microsoft.com/pt-br/windows/terminal/"&gt;ótimas funcionalidades&lt;/a&gt;.&lt;br&gt;
Para isso, basta irmos até a Windows Store novamente e pesquisarmos por "Windows Terminal", vamos baixar e instala-lo.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EaCRAKcx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guyt9z3xv7vz0iq0wnr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EaCRAKcx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guyt9z3xv7vz0iq0wnr7.png" alt="Windows terminal Windows Store"&gt;&lt;/a&gt;&lt;br&gt;
Após instalar, vamos configura-lo para abrir a aba da nossa maquina Linux:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5RDxZUi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3howhh1qbjeii67cvet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5RDxZUi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3howhh1qbjeii67cvet.png" alt="Windows terminal tabs"&gt;&lt;/a&gt;&lt;br&gt;
Para isso, clique na seta ao lado das abas e vá em "configurações", vamos até a categoria "Perfis" e clique em "Adicionar novo". Na tela que irá se abrir, vamos preencher o campo "Linha de comando" com o nome do executável do nosso subsistema Linux.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cL9n8mUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arjfm5cm7db5im3se1w4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cL9n8mUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arjfm5cm7db5im3se1w4.png" alt="Windows Terminal Settings"&gt;&lt;/a&gt;&lt;br&gt;
Para descobrir o nome do executável, podemos iniciar o nosso Linux e em seguida abrir o gerenciador de tarefas, encontrar o processo e clicar com botão direito do mouse sobre ele e escolher a opção "Abrir local do arquivo", em seguida basta copiar o nome do executável e colar no campo anterior.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fHSzhDV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwkfbsg4cgtsjzkadzir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fHSzhDV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwkfbsg4cgtsjzkadzir.png" alt="Task manager"&gt;&lt;/a&gt;&lt;br&gt;
O Windows terminal irá identificar automaticamente o nome e ícone do sistema, bastando apenas clicar em "Salvar" agora.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configurando-ambiente-no-linux-%F0%9F%9B%A0"&gt;
  &lt;/a&gt;
  Configurando ambiente no Linux 🛠
&lt;/h2&gt;

&lt;p&gt;Agora vamos para o nosso sistema Linux, apara isso, execute o Windows Terminal e abra uma nova aba com o seu Linux.&lt;br&gt;
Vamos começar instalando o Nodejs, para isso podemos utilizar o &lt;a href="https://github.com/nvm-sh/nvm"&gt;NVM&lt;/a&gt; para facilitar e para gerenciar as versões do Node na nossa maquina.&lt;br&gt;
Vamos começar executando o seguinte comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-o-&lt;/span&gt; https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Após baixar, precisamos recarregar nosso arquivo &lt;code&gt;bashrc&lt;/code&gt; para que o comando "nvm" seja reconhecido, para isso, execute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, podemos rodar o comando para listar as versões do node disponiveis para nós, rode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nvm ls-remote
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E teremos como resultado a lista de versões que podemos instalar, busque sempre uma versão LTS e mais recente, no meu caso é a 14.16.1.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6e3CRN7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uwtjn0y3nha9ftjvizi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6e3CRN7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uwtjn0y3nha9ftjvizi.png" alt="Nvm list"&gt;&lt;/a&gt;&lt;br&gt;
Para instalar a versão mais recente(altere para a sua versão caso seja diferente), execute o comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nvm &lt;span class="nb"&gt;install &lt;/span&gt;14
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E para testarmos, basta executarmos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;span class="c"&gt;# e&lt;/span&gt;
npm &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#iniciar-novo-projeto-com-o-cra"&gt;
  &lt;/a&gt;
  Iniciar novo projeto com o CRA ⚛️
&lt;/h2&gt;

&lt;p&gt;Dentro do nosso Linux, vamos criar um novo projeto React, vamos navegar até a pasta que desejar, no meu caso &lt;code&gt;Documents&lt;/code&gt; e executar o comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app meuAppTest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Caso você já tenha o Visual Studio Code instalado, basta digitar &lt;code&gt;code .&lt;/code&gt; dentro da pasta do projeto e o VSCode irá abrir com o projeto já carregado.&lt;br&gt;
Agora, vamos rodar o projeto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bz8cPXfT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e9tmgtun26cbbsjhqald.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bz8cPXfT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e9tmgtun26cbbsjhqald.png" alt="Npm start"&gt;&lt;/a&gt;&lt;br&gt;
Com o projeto rodando, podemos perceber que o hot reloading não está funcionando. &lt;br&gt;
Isso por que o React utiliza o &lt;a href="https://www.npmjs.com/package/chokidar"&gt;chokidar&lt;/a&gt; para monitorar os arquivos que são modificados, e por padrão ele vem com a opção de &lt;a href="https://en.wikipedia.org/wiki/Polling_(computer_science)"&gt;polling&lt;/a&gt; desativado, desta forma não conseguimos notificar essas alterações entre o Windows e o nosso subsistema.&lt;br&gt;
Para resolver, vamos no nosso &lt;code&gt;package.json&lt;/code&gt; e na parte dos scripts vamos substituir o script de start para o seguinte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"CHOKIDAR_USEPOLLING=true react-scripts start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com o polling ativado, pare o servidor e rode novamente.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MDjskcuj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf7salgmieye01ou8doa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MDjskcuj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf7salgmieye01ou8doa.png" alt="React Windows"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#algumas-coisas-a-mais"&gt;
  &lt;/a&gt;
  Algumas coisas a mais 🍉
&lt;/h2&gt;

&lt;p&gt;Aqui vai algumas dicas bem legais para melhorar ainda mais a experiência:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extensão &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl"&gt;Remote - WSL&lt;/a&gt; do VSCode.&lt;/li&gt;
&lt;li&gt;Instale o &lt;a href="https://yarnpkg.com/getting-started/install"&gt;Yarn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tuliocalil.blogspot.com/2019/09/meu-ambiente-linux.html"&gt;Oh my Zsh&lt;/a&gt; com temas.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tuliocalil.blogspot.com/2020/07/unix-alias-atalhos-produtivos-no.html"&gt;Utilize Alias&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>windows</category>
      <category>wsl</category>
      <category>linux</category>
    </item>
    <item>
      <title>Quick Sass Cheat Sheet</title>
      <author>Lâm</author>
      <pubDate>Wed, 12 May 2021 00:50:31 +0000</pubDate>
      <link>https://dev.to/hoanganhlam/quick-sass-cheat-sheet-2l4d</link>
      <guid>https://dev.to/hoanganhlam/quick-sass-cheat-sheet-2l4d</guid>
      <description>&lt;h3&gt;
  &lt;a href="#see-also"&gt;
  &lt;/a&gt;
  See also
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="http://sass-lang.com/documentation/Sass/Script/Functions.html"&gt;http://sass-lang.com/documentation/Sass/Script/Functions.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#sassscript"&gt;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#sassscript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://cheatsheetmaker.com/sass"&gt;Sass Cheat Sheet&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#other-features-maps"&gt;
  &lt;/a&gt;
  [Other features] Maps
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;map-get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;map&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;key1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#other-features-lists"&gt;
  &lt;/a&gt;
  [Other features] Lists
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;nth&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;list&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;starts&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;
&lt;span class="nt"&gt;length&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;list&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nt"&gt;each&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;item&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;list&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#other-features-interpolation"&gt;
  &lt;/a&gt;
  [Other features] Interpolation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$klass&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;      &lt;span class="c1"&gt;// Class&lt;/span&gt;
&lt;span class="nt"&gt;call&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;function-name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Functions&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nt"&gt;media&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$tablet&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;font&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$line-height&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$background&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.jpg"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#other-features-conditionals"&gt;
  &lt;/a&gt;
  [Other features] Conditionals
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@if&lt;/span&gt; &lt;span class="nv"&gt;$position&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'left'&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@else&lt;/span&gt; &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$position&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'right'&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loops-while-loops"&gt;
  &lt;/a&gt;
  [Loops] While loops
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@while&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.item-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loops-each-loops-nested"&gt;
  &lt;/a&gt;
  [Loops] Each loops (nested)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$backgrounds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'home.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'about.jpg'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;@each&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$image&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$backgrounds&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.photo-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url($image)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loops-each-loops-simple"&gt;
  &lt;/a&gt;
  [Loops] Each loops (simple)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$menu-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@each&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$menu-items&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.photo-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('images/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;.jpg')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loops-for-loops"&gt;
  &lt;/a&gt;
  [Loops] For loops
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@for&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="ow"&gt;from&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;through&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.item-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#feature-checks-features"&gt;
  &lt;/a&gt;
  [Feature checks] Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;global-variable-shadowing&lt;/li&gt;
&lt;li&gt;extend-selector-pseudoclass&lt;/li&gt;
&lt;li&gt;units-level-3&lt;/li&gt;
&lt;li&gt;at-error&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>sass</category>
      <category>style</category>
      <category>css</category>
      <category>cheatsheet</category>
    </item>
  </channel>
</rss>
