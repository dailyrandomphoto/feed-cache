<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Collecting Data to Map Housing Prices</title>
      <author>Ander Rodriguez</author>
      <pubDate>Mon, 07 Jun 2021 18:25:26 +0000</pubDate>
      <link>https://dev.to/anderrv/collecting-data-to-map-housing-prices-1omh</link>
      <guid>https://dev.to/anderrv/collecting-data-to-map-housing-prices-1omh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-map"&gt;
  &lt;/a&gt;
  The Map
&lt;/h2&gt;

&lt;p&gt;We bring this post to share what high-quality data can do for you. This time, we show you a sample dataset of real estate in Bilbao, Spain. All data comes directly from a &lt;a href="https://app.zenrows.com/register?task=real-estate"&gt;ZenRows Task&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The content was collected from a well-known real estate website and plugged here with minimum effort. The original dataset contained some irrelevant fields for the demo, so we removed them for the sake of simplicity. Anyway, the map will ignore the additional fields. So you can use your dataset and make it work for you. You can find the working example and everything you need to play with it in this &lt;a href="https://github.com/ZenRows/house-pricing-map"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wAmFp4ta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15m5co11d0enhfeerfvy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAmFp4ta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15m5co11d0enhfeerfvy.jpg" alt="Housing Price in Bilbao"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;We cannot embed the map with functionality here, visit &lt;a href="https://www.zenrows.com/blog/collecting-data-to-map-housing-prices"&gt;the original post&lt;/a&gt; to check it out&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-the-map-represents"&gt;
  &lt;/a&gt;
  What the map represents
&lt;/h2&gt;

&lt;p&gt;We took 3.000 houses on sale from Bilbao and plotted them on this map by geolocation. Without adding further info, that would be just a geographical representation. We could do that with map markers to show where houses are on sale.&lt;/p&gt;

&lt;p&gt;But we decided to add some extra weight by adding data related to the pricing. Taking a look at several representations and real estate information, we chose heatmap by price per area (square meter in this case). That means that each listing will be a point on the map. Therefore, the higher the price per square meter, the redder it will be shown.&lt;/p&gt;

&lt;p&gt;A small confession: we love experimenting. If you are interested in getting dataset samples for research - or fun - &lt;a href="https://www.zenrows.com/contact"&gt;contact us&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#heatmap-meaning"&gt;
  &lt;/a&gt;
  Heatmap meaning
&lt;/h2&gt;

&lt;p&gt;This mapping tool allows drawing attention to the areas with the highest price per square meter. Take into account this is an approximation, so don't blindly trust results. Consider it a representation, and therefore may not represent the whole picture.&lt;/p&gt;

&lt;p&gt;Heatmaps are just one among many graph types. So it's convenient first to analyze your use case and the information available and then think about representing it best.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-we-obtained-the-data"&gt;
  &lt;/a&gt;
  How we obtained the data
&lt;/h2&gt;

&lt;p&gt;The essential part is data; the map is just a way to express graphically what that info represents. It can help experts point in the right direction or investigate further in some areas. But high-quality data is mandatory to take actions supported by facts.&lt;/p&gt;

&lt;p&gt;In our case, the data proceeds directly from a well-known real estate website, and we obtained it using &lt;a href="https://app.zenrows.com/register?task=real-estate"&gt;ZenRows Tasks&lt;/a&gt;. We identified the source, got the idea for this demo, and then easily created a Task to extract all the information. It collected almost 3.000 data points in under a minute.&lt;/p&gt;

&lt;p&gt;Here are two snippets of the data: the first one comes directly from the task, and the second one is treated manually by us to reduce its size. The original one is incomplete for the same reason; we will publish an example dataset in the &lt;a href="https://github.com/ZenRows/house-pricing-map"&gt;demo repository&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;475000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"formattedPrice"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"475.000 €"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"dateTimestamp"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1622565227557&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"latitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;43.25794&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"longitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;-2.925409&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"country"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"España"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"neighborhood"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Casco Viejo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"city"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bilbao"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"bathrooms"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"rooms"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"surface"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;189&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"latitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;43.25794&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"longitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;-2.925409&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"pricePerArea"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2513&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#zenrows-tasks"&gt;
  &lt;/a&gt;
  ZenRows tasks
&lt;/h2&gt;

&lt;p&gt;The process is straightforward.&lt;br&gt;
Choose a Name for the task, fill a set of URLs, and hit Run. That's all you need. Well, an idea or a hypothesis to validate would help, but that's on you ;)&lt;/p&gt;

&lt;p&gt;We provide a simple process to obtain datasets, either one-time or recurring. In this case, we set a one-time task to collect a few thousand URLs since it didn't seem necessary to get the data over time. But if we, for instance, wanted to analyze how price evolves, a recurring task would be the ideal choice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-you-effortlessly-obtain-the-data-you-need"&gt;
  &lt;/a&gt;
  How can you effortlessly obtain the data you need
&lt;/h2&gt;

&lt;p&gt;One of the most challenging parts is obtaining data and then turning it in a structured way with some automation. And later extract the insights. So the process is not easy after all. The good news is, we can help you there.&lt;/p&gt;

&lt;p&gt;We encourage you to do some research beforehand to identify trustworthy data sources that fill your needs. Only then start the automation process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-use-cases-does-this-have"&gt;
  &lt;/a&gt;
  What use cases does this have
&lt;/h2&gt;

&lt;p&gt;Some other cases for real estate&lt;br&gt;
Following the example with real estate, we could change the data to highlight the largest houses or the most expensive ones. And for agencies or investors, plotting some of the data and looking for outliers or opportunities can help extract some good insights.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Population density&lt;br&gt;
Lately, there has been a lot of talk about internal migrations and if population density will change due to remote work. That is a great use case for heatmaps, primarily if you use a map with state shapes or equivalent in your area.&lt;br&gt;
Here is an example of population density (people per km&lt;sup&gt;2&lt;/sup&gt;) by country, &lt;a href="https://en.wikipedia.org/wiki/Population_density"&gt;credit to Wikipedia&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q-Vp6DSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/1/15/Countries_by_population_density.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q-Vp6DSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/1/15/Countries_by_population_density.svg" alt="Countries by population density"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mean salaries&lt;br&gt;
Not much to add here, this is an ongoing discussion forever, and we will not settle it down. But we can at least shed some light. As with the previous point, maps with shapes can help to understand the data thoroughly. In this case, municipalities even better than states.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Common flight origin and destinations&lt;br&gt;
We all know the big, known airports in our area, but maybe there are many outliers that we ignore. We can plot all that info in a heatmap or a flow chart. If you are, for some reason, planning on opening a new airport, you could include the population density on the map to find the best match. Not a typical case, I'd say.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stores and potential markets&lt;br&gt;
Maybe this is a better use case for the previous example. Think of any chain store that is looking for a new place. You could set markers for the existing one and a heatmap with the population. Or even better, add weight to your customer type - mid-aged females, for example.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Drought control&lt;br&gt;
With a direct application in farming, early detection of droughts is paramount. We are not meteorologists, but we can turn temperature and raining data points into maps and then help the experts interpret the raw data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Restaurant density or pricing&lt;br&gt;
We could draw something very similar effortlessly by replacing the price per square meter with the restaurant price. You can try it out using a &lt;a href="https://github.com/ZenRows/house-pricing-map"&gt;small repository&lt;/a&gt; that we created for this demo and get the data from Yelp or Tripadvisor.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;A geographical heatmap is just one of the multiple ways of representing data. We need an accurate source of information, an automated way of extracting structured data from there, and a process for shedding some light into insights.&lt;/p&gt;

&lt;p&gt;Our hassle-free process will help you quickly get the data you need. So check our content for inspiration in data sources and representations. And, of course, contact us and &lt;a href="https://app.zenrows.com/register?task=real-estate"&gt;try ZenRows for free&lt;/a&gt; to start automatizing in a minute.&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Unconventional Warfare and the Anatomy of a Weapon System AI</title>
      <author>yugely</author>
      <pubDate>Mon, 07 Jun 2021 18:19:43 +0000</pubDate>
      <link>https://dev.to/yugely/unconventional-warfare-and-the-anatomy-of-a-weapon-system-ai-58en</link>
      <guid>https://dev.to/yugely/unconventional-warfare-and-the-anatomy-of-a-weapon-system-ai-58en</guid>
      <description>&lt;p&gt;I was able to find something I though I had lost. Since October 2020 I have been at odds with various organization due to getting hacked that month. This project on whole is now defunct, gone and left me high and dry. But I believe it a good opportunity to provide a glimpse into something most people do have any familiarity with on a daily basis and even entire lifetimes (which is undoubtedly a good thing)&lt;/p&gt;

&lt;p&gt;I was building out a  Real-Risk Risk Analysis system for MOUT Operations (*Urban Ops) using a semi-decentralized hivemind in a near-autonomous near-gps denied territory. The MAV's working as a hivemind would asses areas of risk utilizing different (reported, theoretical, not teaching kids to do this) attack vectors to consume data. This would feed back into an Agent Based system with a hierarchical structured modeled after infantry division and the conceptualization of Actions &amp;lt;-&amp;gt; Reactions with UpChain and DownChain commands (more on that). This will be a multi part paper as its too much for one post and and each system has a individual ecosystem that may spread some knowledged. Without further wait, NAO Nerve Agent O&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vfr5Omai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9immb0cee2scfydtbuk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vfr5Omai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9immb0cee2scfydtbuk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wire Diagram&lt;br&gt;
&lt;a href="https://www.darpa.mil/news-events/2018-07-18"&gt;https://www.darpa.mil/news-events/2018-07-18&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F1sge493--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myi660l73ljvsskto7w2.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F1sge493--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myi660l73ljvsskto7w2.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post we'll be going over the general idea behind the system starting and the ingress system, the incision if you will. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-are-the-mavs-collecting-information"&gt;
  &lt;/a&gt;
  How are the MAVs Collecting Information
&lt;/h1&gt;

&lt;p&gt;To understand the basic mechanisms behind the system we must first understand the basic of the Electro Magnetic Spectrum and how we and everything around us interact and emit (IR) to that wave spectrum.&lt;/p&gt;

&lt;p&gt;How do our digital devices interact with the world around us? It's a very cool thing that people way smarter than me figured out. We can thank Nikola Tesla, but we need more to that who? &lt;br&gt;
Mathematician Joseph Fourier &lt;br&gt;
[&lt;a href="https://en.wikipedia.org/wiki/Joseph_Fourier"&gt;https://en.wikipedia.org/wiki/Joseph_Fourier&lt;/a&gt;] &lt;/p&gt;

&lt;p&gt;Why? Fourier Transforms. Without Fourier Transforms none of the smart phones, the bluetooth speakers, would exist. There'd be no radio, no TV, no phones. Nothing you enjoy today would be possible without Fourier Transforms and (A)nalogue to (D)igital (C)onversion. ADC is the process in which we convert analogue (natural, flowy waves) into digital power.&lt;/p&gt;

&lt;p&gt;Take a look at this graph, on the top you see top is an analogue wave and the dots are "quantized values". &lt;br&gt;
[&lt;a href="https://en.wikipedia.org/wiki/Quantization_(signal_processing)"&gt;https://en.wikipedia.org/wiki/Quantization_(signal_processing)&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;There is a lot of information there, but for our purpose I just want you to think of those points as rounded real numbers. Quantization induces a tick, or a disturbance/error to indicate sampling length. By doing this is allows for sampling as the receiver would otherwise just never stop collecting (because waves can be eternally continuous). Lets look at an example of these a digital output and an analogue input:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DvcinKyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ff7tsdpqdaorhbacpp1h.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DvcinKyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ff7tsdpqdaorhbacpp1h.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is how they match up and the quantized points. The quantized points allow us use&lt;br&gt;
 "discrete time" to establish periods of flux. &lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Discrete_time_and_continuous_time"&gt;https://en.wikipedia.org/wiki/Discrete_time_and_continuous_time&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note there is more but I don't want to get in the weeds yet&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then those move through digital transform to become consumable information because if you look to the last graph, the digital output is either up or down. &lt;br&gt;
So, its a 1 or a 0. (binary)&lt;br&gt;
Because conceptually at the end of the day you're really feeding in a looooooong line of 1-dimensional arrays that have a binary value. And those values essentially map to electrical discharges going through logical gates.&lt;/p&gt;

&lt;p&gt;So now we understand a little bit about the mechanism of datatransfer, how are we getting the information in the first place?&lt;/p&gt;

&lt;p&gt;Well, if you are not aware, your conversations can be recorded through lightbulbs. &lt;/p&gt;

&lt;p&gt;Yes, yes, indeed I do mean Lightbulbs.&lt;br&gt;
[&lt;a href="https://www.nassiben.com/lamphone"&gt;https://www.nassiben.com/lamphone&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;This essentially works by reading the EM output of how our vocal harmonic vibrations interact with the electromagnetic emissions of a lightbulb and this is a fascinating thing. Vocal harmonic resonance is a special thing because it almost spherical, unidirectional.&lt;/p&gt;

&lt;p&gt;Human resonance cavities allow also for a naturally occuring signal of state change. That point may or may not be contested by some individuals. However, if you want to read about a cool anomaly, look no further than&lt;/p&gt;

&lt;p&gt;Schumann Resonance:&lt;br&gt;
[&lt;a href="https://en.wikipedia.org/wiki/Schumann_resonances"&gt;https://en.wikipedia.org/wiki/Schumann_resonances&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;There is a lot to unpack there, but if you have the itch there are great resources surrounding the duality of particles and waves around that may give some keen insights.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#well-thats-a-single-methodology-what-about-phones"&gt;
  &lt;/a&gt;
  Well, thats a single methodology, what about phones?
&lt;/h1&gt;

&lt;p&gt;In comes the Harris Stingray:&lt;br&gt;
[&lt;a href="https://en.wikipedia.org/wiki/Stingray_phone_tracker"&gt;https://en.wikipedia.org/wiki/Stingray_phone_tracker&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;The methodologies here listed are different than the most current ones in the field today as these modules at genesis relied heavily on the 2G protocol, and the 3G Protocol. In fact, these machines would do "downgrade service" attacks on targeted individuals from 4G to 3G. They use them with 4G, but the methodologies are far more complex because of how eNodeB stations (think cell towers) have aperiodic device checks that do latency tests.&lt;/p&gt;

&lt;p&gt;So building rogue stations are harder as the decibel strength alone would be a flag in any array. So to do this you have to.. well I guess you'd have to read about it and figure it out on your own! hahaaa okay. &lt;/p&gt;

&lt;p&gt;There is more to it, but I think that should be consumable enough for the EM interactions.&lt;/p&gt;

&lt;p&gt;So what do we do with all this data? What we do with all data:&lt;br&gt;
Sanitize -&amp;gt; Realize -&amp;gt; Reify&lt;/p&gt;

&lt;p&gt;Essentially the SDRs would be able to send live feed data to a gateway model using a LoRa and/or OAI eNodeB station. Both technologies are designed to use existing infrastructure to "catch a ride" to the destination. Now the question now to ask is "how and why is it weaponized and what does it do?"&lt;/p&gt;

&lt;p&gt;&lt;em&gt;No sugar coating, this is an unapproached topic in many circles for good reasons. Discussing the design patterns behind advanced warfare systems isn't kosher and I wouldn't bring up the topic unsolicited to my grandma. and not your grandma either&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#but-lets-take-a-look-at-your-average-urban-environment"&gt;
  &lt;/a&gt;
  But, let's take a look at your average urban environment.
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You have enclosed spaces&lt;br&gt;
High risk theatre operations rely on extremely quick and potentially life ending consequences. Internals can house any manner of person and weapon. Clearing a house has a high cost as successful MOUT Operations (at the time of the building) had a 60% Casualty rate as a definition of success. Thats 6 out of every 10 grunts tagged. And tagged in all manner of ways because coordinated live fire in confined areas in a fast paced, life threatening situation cause a good amount of accidental friendly fire, accidental discharges and mistakes in identity will get made. By knowing who is inside the structure you are about to clear, you minimize the potential danger as you can "vet" occupants by knowing the intimate characteristics contained on devices around them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Everything and anything can be an IED: One of the lesser talked about ground patrols is the fact that anything around you, I mean empty cans, trash, any pile of junk could hide an environmental threat that can be used to mame or kill. The method of deliver in Urban Ops can be as imaginative as the guy building it. But cheap cell phones being used as a detonation mechanism is a typical choice as it allows for the exiting of the hostile party to detonate away from danger. Now, we already are able to pick up any manner of phone traffic including that of potential IED detonation devices. With current technologies there are methodologies to essentially "storm" and entire radius at a low-weight and 98% efficacy. By essentially DDOSing the cell tower we can deny the ability to detonate by denying the transfer of signal.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Less innocent people get hurt the better a squad or team can assess the area for threats prior to entry. With vocal recognition techniques we can consume everything from a baby crying to water running. Being able to know that a situation may cost more to the lives of the people around the target area.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These mechanisms were also being developed to be used in GPS Denied rescue mission, not only Unconventional and Urban warfare.&lt;/p&gt;

&lt;p&gt;This is part one of what will be a multi part look at how mission critical systems operate in different high risk theatres and the tacit knowledge of "what if it's fubar'd?". This was just an intro to ingress and data collection method using radio and low band EM interactions.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Animating Angular Route Transitions</title>
      <author>ng-conf</author>
      <pubDate>Mon, 07 Jun 2021 17:07:03 +0000</pubDate>
      <link>https://dev.to/ngconf/animating-angular-route-transitions-1akb</link>
      <guid>https://dev.to/ngconf/animating-angular-route-transitions-1akb</guid>
      <description>&lt;p&gt;Jared Youtsey | ng-conf | Oct 2019&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#add-style-to-your-application-by-animating-your-route-transitions"&gt;
  &lt;/a&gt;
  Add style to your application by animating your route transitions!
&lt;/h4&gt;

&lt;p&gt;For this article I’m going to assume you already understand the basics of Angular routing and components. I won’t bore you with building an entire application. We’ll get right to adding animations so you can see immediate results!&lt;/p&gt;

&lt;p&gt;The finished code for this example can be found &lt;a href="https://github.com/fivedice/ng-router-animation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#add-browseranimationsmodule"&gt;
  &lt;/a&gt;
  Add BrowserAnimationsModule
&lt;/h4&gt;

&lt;p&gt;In your &lt;code&gt;app.module.ts&lt;/code&gt; add &lt;code&gt;BrowserAnimationsModule&lt;/code&gt; to the module &lt;code&gt;imports&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
@NgModule({
    imports: [
        ...,
        BrowserAnimationsModule
    ],
    ...
})
export class AppModule {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#a-note-on-unit-testing"&gt;
  &lt;/a&gt;
  A Note On Unit Testing
&lt;/h4&gt;

&lt;p&gt;For unit testing, import &lt;code&gt;NoopAnimationsModule&lt;/code&gt; instead. This fulfills the contracts while isolating unit tests from having to deal with the transitions.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#animation-affects-user-experience"&gt;
  &lt;/a&gt;
  Animation Affects User Experience
&lt;/h4&gt;

&lt;p&gt;Have you ever seen a PowerPoint presentation that had a thousand different transitions, fonts, and colors? Yuck. Take a lesson and keep your transitions simple and consistent to avoid confusing or overwhelming your users.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-premise"&gt;
  &lt;/a&gt;
  The Premise
&lt;/h4&gt;

&lt;p&gt;For this example, I’ll present a simple set of animations that make sense in the context of navigating forward and backward. Views are animated left or right based on the direction the router is navigating. We’ll have three components named &lt;code&gt;OneComponent&lt;/code&gt;, &lt;code&gt;TwoComponent&lt;/code&gt;, and &lt;code&gt;ThreeComponent&lt;/code&gt;, for simplicity’s sake. When navigating from &lt;em&gt;One&lt;/em&gt; to &lt;em&gt;Two&lt;/em&gt;, &lt;em&gt;One&lt;/em&gt; will slide out to the left while &lt;em&gt;Two&lt;/em&gt; will slide in from the right. &lt;em&gt;Two&lt;/em&gt; to &lt;em&gt;Three&lt;/em&gt; will do the same. When navigating from &lt;em&gt;Three&lt;/em&gt; to &lt;em&gt;Two&lt;/em&gt; the animations will be reversed. In addition, the opacity of the views will be animated as they leave and enter the page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#states-transitions-and-triggers-oh-my"&gt;
  &lt;/a&gt;
  States, Transitions, and Triggers, Oh My!
&lt;/h4&gt;

&lt;p&gt;State is a static style definition. A transition defines how a property in the style will change. A trigger defines what action will cause one state to transition to another state.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;State = What&lt;/li&gt;
&lt;li&gt;Transition = How&lt;/li&gt;
&lt;li&gt;Trigger = When&lt;/li&gt;
&lt;li&gt;“animation” = &lt;em&gt;Triggered transition(s)&lt;/em&gt; from one &lt;em&gt;state&lt;/em&gt; to another.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#router-configuration"&gt;
  &lt;/a&gt;
  Router Configuration
&lt;/h4&gt;

&lt;p&gt;To connect animations to the router we must add a &lt;code&gt;data&lt;/code&gt; property to the route configuration. Here are our modified routes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const routes: Routes = [
 {
  path: '',
  children: [
   {
    path: 'one',
    component: OneComponent,
    data: { animationState: 'One' }
   },
   {
    path: 'two',
    component: TwoComponent,
    data: { animationState: 'Two' }
   },
   {
    path: 'three',
    component: ThreeComponent,
    data: { animationState: 'Three' }
   },
   {
    path: '**',
    redirectTo: 'one'
   }
  ]
 },
 {
  path: '**',
  redirectTo: 'one'
 }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The name &lt;code&gt;animationState&lt;/code&gt; is arbitrary. But, you’ll need to keep track of what you use. I’ve used this name because we’re defining &lt;strong&gt;what&lt;/strong&gt; animation state this route represents. State = What.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#appcomponent-configuration"&gt;
  &lt;/a&gt;
  AppComponent Configuration
&lt;/h4&gt;

&lt;p&gt;Start by configuring the &lt;code&gt;AppComponent&lt;/code&gt; to set up the animations for the route changes. In &lt;code&gt;app.component.ts&lt;/code&gt; add a method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;prepareRoute(outlet: RouterOutlet) {
  return outlet &amp;amp;&amp;amp; 
    outlet.activatedRouteData &amp;amp;&amp;amp; 
    outlet.activatedRouteData['animationState'];
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the check for a route with data for the state specified property, &lt;code&gt;animationState&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, hook up the template. First, let’s add a template variable so that we can get a reference to the &lt;code&gt;&amp;lt;router-outlet&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;router-outlet #outlet="outlet"&amp;gt;&amp;lt;/router-outlet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, add a synthetic property to the container element of the &lt;code&gt;&amp;lt;router-outlet&amp;gt;&lt;/code&gt;. It’s critical that it be on a container div, not on the &lt;code&gt;&amp;lt;router-outlet&amp;gt;&lt;/code&gt; itself. This synthetic property’s name is arbitrary, but it’s good to understand that it will correspond to an animation trigger’s name. For the sake of this example, let’s call it &lt;code&gt;triggerName&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div [@triggerName]="prepareRoute(outlet)"&amp;gt;
  &amp;lt;router-outlet #outlet="outlet"&amp;gt;&amp;lt;/router-outlet&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We pass the method &lt;code&gt;prepareRoute&lt;/code&gt; with the argument of the template variable &lt;code&gt;outlet&lt;/code&gt; to the synthetic property &lt;code&gt;@triggerName&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point, if you run the application, you’ll find that there is an error in the console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ERROR Error: Found the synthetic property @triggerName. Please 
include either "BrowserAnimationsModule" or "NoopAnimationsModule" 
in your application.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, wait, we did that already?! Angular is confused because we haven’t actually defined the trigger yet! So, let’s do that now.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#define-the-animation"&gt;
  &lt;/a&gt;
  Define the Animation
&lt;/h4&gt;

&lt;p&gt;Remember, an animation is caused by a trigger that causes a transition from one state to another state. When we define an animation we start with the trigger and work inward on that definition.&lt;/p&gt;

&lt;p&gt;Create a new file named &lt;code&gt;route-transition-animations.ts&lt;/code&gt; next to &lt;code&gt;app.component.ts&lt;/code&gt;. This will contain the trigger definition, &lt;code&gt;triggerName&lt;/code&gt;, and the transitions from and to the states we wish to animate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { trigger } from '@angular/animations';
export const routeTransitionAnimations = trigger('triggerName', []);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we finally define the trigger &lt;code&gt;triggerName&lt;/code&gt;! The array argument is where we will define the transitions.&lt;/p&gt;

&lt;p&gt;Before we define the transitions, let’s hook the &lt;code&gt;app.component.ts&lt;/code&gt; to the trigger definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
import { routeTransitionAnimations } from './route-transition-animations';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss'],
  animations: [routeTransitionAnimations]
})
export class AppComponent {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let’s go back and flesh out the trigger’s transitions in the &lt;code&gt;route-transition-animations.ts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Angular uses simple arrow syntax to define the transition from one state to another. For example, if we want to handle the navigation from &lt;em&gt;One&lt;/em&gt; to &lt;em&gt;Two&lt;/em&gt; we use &lt;code&gt;One =&amp;gt; Two&lt;/code&gt;. If we want to handle both directions, we can use a bi-directional arrow, &lt;code&gt;One &amp;lt;=&amp;gt; Two&lt;/code&gt;, and then the transition will be applied going from &lt;em&gt;One&lt;/em&gt; to &lt;em&gt;Two&lt;/em&gt; and from &lt;em&gt;Two&lt;/em&gt; to &lt;em&gt;One&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Angular has some powerful pre-defined concepts in addition to the named states.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;void&lt;/code&gt; = an element is entering or leaving the view.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;*&lt;/code&gt; = any state&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:enter&lt;/code&gt; and &lt;code&gt;:leave&lt;/code&gt; are aliases for the &lt;code&gt;void =&amp;gt; *&lt;/code&gt; and &lt;code&gt;* =&amp;gt; void&lt;/code&gt; transitions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s review the animations we wanted at the beginning of the article. &lt;code&gt;One =&amp;gt; Two&lt;/code&gt; and &lt;code&gt;Two =&amp;gt; Three&lt;/code&gt; should slide the previous view off to the left and bring the new view in from the right. Since they both have the same transition, both state changes can be defined in a single transition using comma separated values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { trigger, transition } from '@angular/animations';
export const routeTransitionAnimations = trigger('triggerName', [
 transition('One =&amp;gt; Two, Two =&amp;gt; Three', [])
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, for the actual transformation! First, notice what the &lt;a href="https://angular.io/guide/route-animations#styling-the-host-and-child-components"&gt;official Angular documentation&lt;/a&gt; has to say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;During a transition, a new view is inserted directly after the old one and both elements appear on screen at the same time. To prevent this, apply additional styling to the host view, and to the removed and inserted child views. &lt;strong&gt;The host view must use relative positioning, and the child views must use absolute positioning&lt;/strong&gt;. Adding styling to the views animates the containers in place, without the DOM moving things around.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apply this to the style definition by adding the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { trigger, transition, style, query } from '@angular/animations';
export const routeTransitionAnimations = trigger('triggerName', [
  transition('One =&amp;gt; Two, Two =&amp;gt; Three', [
    style({ position: 'relative' }),
    query(':enter, :leave', [
      style({
        position: 'absolute',
        top: 0,
        right: 0,
        width: '100%'
      })
    ])
  ])
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, &lt;code&gt;style({ position: ‘relative’ })&lt;/code&gt; sets the style on the element that is the target of the trigger to be &lt;code&gt;position: relative&lt;/code&gt;. The target element is the one with the synthetic property &lt;code&gt;@triggerName&lt;/code&gt;, which is the div that contains the &lt;code&gt;&amp;lt;router-outlet&amp;gt;&lt;/code&gt;. Now, the “host view” is using relative positioning per the official docs.&lt;/p&gt;

&lt;p&gt;Next, &lt;code&gt;query(':enter, :leave', [...])&lt;/code&gt;. This means “query for child elements that are entering or leaving the view.” Then it applies the following style definition to those elements. I won’t dive too much into the CSS solution for the positions, but the real key is that we are setting the child elements to absolute positioning, per the official docs. Your CSS will almost certainly differ at this point based on your chosen animation style and application DOM layout.&lt;/p&gt;

&lt;p&gt;Now, we need to define the individual transitions, in order. These will follow the first &lt;code&gt;query&lt;/code&gt; in the &lt;code&gt;transition&lt;/code&gt;'s array arguments.&lt;/p&gt;

&lt;p&gt;This query defines what the start state is for the view that is entering, positioning it off screen to the far right:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;query(':enter', [style({ right: '-100%', opacity: 0 })]),
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next query ensures that any child component animations that need to happen on the leaving component happen before the leaving view animates off screen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;query(':leave', animateChild()),
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we group the leave and enter together so that these transitions happen in unison (otherwise, the old would leave, leaving a blank space, and then the new would enter). We &lt;code&gt;animate&lt;/code&gt;, meaning “transition existing styles to the specified styles over a period of time with an easing function.” The leaving view animates its &lt;code&gt;right&lt;/code&gt; value to be 100% (the far left of the screen) and the entering animate’s its &lt;code&gt;right&lt;/code&gt; value to be 0% (the far right of the screen):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;group([
   query(':leave', [animate('1s ease-out', style({ right: '100%', opacity: 0 }))]),
   query(':enter', [animate('1s ease-out', style({ right: '0%', opacity: 1 }))])
  ]),
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, the old view has left, the new one has entered, and we want to trigger any child animations on the new view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;query(':enter', animateChild())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is what that looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9iUYJb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2A3vfPkD8p2KUldeqPWXNWfQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9iUYJb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2A3vfPkD8p2KUldeqPWXNWfQ.gif" alt='Moving image of a mouse clicking buttons. There are three buttons at the top of the image labeled "One", "Two", and "Three". When the mouse clicks "One" a pink bar reading One slides onto the screen, when the mouse clicks "Two" a blue bar reading Two slides onto the screen, and when the mouse clicks "Three" a green bar reading Three slides onto the screen. All bars slide in from right to left.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, add the transition for the reverse direction, &lt;code&gt;Three =&amp;gt; Two&lt;/code&gt;, and &lt;code&gt;Two =&amp;gt; One&lt;/code&gt;, after the first transition, and change the &lt;code&gt;right&lt;/code&gt;’s to &lt;code&gt;left&lt;/code&gt;'s:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;transition('Three =&amp;gt; Two, Two =&amp;gt; One', [
  style({ position: 'relative' }),
  query(':enter, :leave', [
    style({
      position: 'absolute',
      top: 0,
      left: 0,
      width: '100%'
    })
  ]),
  query(':enter', [style({ left: '-100%', opacity: 0 })]),
  query(':leave', animateChild()),
  group([
    query(':leave', [animate('1s ease-out', style({ left: '100%', opacity: 0 }))]),
    query(':enter', [animate('1s ease-out', style({ left: '0%', opacity: 1 }))])
   ]),
   query(':enter', animateChild())
 ])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WS-4M1is--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AU94nNc5IdupWI_iyQLufSQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WS-4M1is--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AU94nNc5IdupWI_iyQLufSQ.gif" alt="The same moving picture as above, only the direction the colored bars slide in from has changed. "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking good! We’re just missing two transition definitions, &lt;code&gt;One =&amp;gt; Three&lt;/code&gt;, and &lt;code&gt;Three =&amp;gt; One&lt;/code&gt;. Rather than defining something different, we will add these to the existing ones. Add &lt;code&gt;One =&amp;gt; Three&lt;/code&gt; to the right definition, and the &lt;code&gt;Three =&amp;gt; One&lt;/code&gt; to the &lt;code&gt;left&lt;/code&gt;. The transitions now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;transition('One =&amp;gt; Two, Two =&amp;gt; Three, One =&amp;gt; Three', [...]),
transition('Three =&amp;gt; Two, Two =&amp;gt; One, Three =&amp;gt; One', [...])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--se-AEaFw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AC_yFC9CUDxbbCR_heG_GpQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--se-AEaFw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AC_yFC9CUDxbbCR_heG_GpQ.gif" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voila! Successful Angular route transition animations!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/fivedice/ng-router-animation/blob/master/src/app/route-transition-animations.ts"&gt;Here is the whole trigger/transition definition&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This just scratches the surface of what can be done with Angular animations. Check out my other article on &lt;a href="https://medium.com/ngconf/animating-angulars-ngif-and-ngfor-32a6ff26ed2d"&gt;Animating Angular’s *ngIf and *ngFor&lt;/a&gt; to have more fun with Angular animations!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ngconf-join-us-for-the-reliable-web-summit"&gt;
  &lt;/a&gt;
  ng-conf: Join us for the Reliable Web Summit
&lt;/h2&gt;

&lt;p&gt;Come learn from community members and leaders the best ways to build reliable web applications, write quality code, choose scalable architectures, and create effective automated tests. Powered by ng-conf, join us for the Reliable Web Summit this August 26th &amp;amp; 27th, 2021.&lt;br&gt;
&lt;a href="https://reliablewebsummit.com/"&gt;https://reliablewebsummit.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>animation</category>
      <category>router</category>
      <category>routing</category>
    </item>
    <item>
      <title>How to build and run Kubernetes locally .</title>
      <author>Rahul Kumar</author>
      <pubDate>Mon, 07 Jun 2021 17:00:07 +0000</pubDate>
      <link>https://dev.to/rahulku48837211/how-to-build-and-run-k8s-locally-5e3m</link>
      <guid>https://dev.to/rahulku48837211/how-to-build-and-run-k8s-locally-5e3m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#install-golang-latest-version"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Install GOLang (latest version):&lt;/strong&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo wget https://golang.org/dl/go1.16.5.linux-amd64.tar.gz
rm -rf /usr/local/go &amp;amp;&amp;amp; tar -C /usr/local -xzf go1.16.5.linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup-the-environment-via-bash-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Setup the environment via Bash :&lt;/strong&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo 'export PATH=${PATH}:/usr/local/go/bin' &amp;gt;&amp;gt; ~/.profile
echo 'export GOPATH_K8S=${HOME}/go/src/k8s.io/kubernetes' &amp;gt;&amp;gt; ~/.profile
echo 'export PATH=${GOPATH_K8S}/third_party/etcd:${PATH}' &amp;gt;&amp;gt; ~/.profile
source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;MAKE SURE YOU HAVE SET THE PATH FOR BOTH GO AND ETCD IN THE SECURE_PATH IN THE /etc/sudoers FILE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MAKE SURE TO EDIT IT AS VISUDO&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clone-kubernetes"&gt;
  &lt;/a&gt;
  clone kubernetes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir -p {GOPATH_K8S}
git clone https://github.com/kubernetes/kubernetes ${GOPATH_K8S}
git remote rename origin upstream 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-etcd"&gt;
  &lt;/a&gt;
  install etcd
&lt;/h2&gt;



&lt;p&gt;&lt;code&gt;$ hack/install-etcd.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-docker-demon"&gt;
  &lt;/a&gt;
  start docker demon
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl enable docker
systemctl start  docker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#build-k8s"&gt;
  &lt;/a&gt;
  Build k8s
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;This step takes 15 minitues
cd ${GOPATH_K8S}
git checkout v1.12.3 (checkout the stable release version)
time make quick-release
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run-a-local-k8s-cluster"&gt;
  &lt;/a&gt;
  Run a Local k8s cluster
&lt;/h2&gt;



&lt;p&gt;&lt;code&gt;$ {GOPATH_K8S}/hack/local-up-cluster.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#verify-the-cluster-is-running-in-another-window"&gt;
  &lt;/a&gt;
  verify the cluster is running in another window
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export KUBERNETES_PROVIDER=local
export KUBECONFIG=/var/run/kubernetes/admin.kubeconfig
${GOPATH_K8S}/cluster/kubectl.sh get nodes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fork-the-k8s-repo-on-github"&gt;
  &lt;/a&gt;
  Fork the k8s repo on github
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;navigate to 
click fork button
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup-gihub-user-name"&gt;
  &lt;/a&gt;
  setup gihub user name
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export GITHUB_USER=[Insert your github user name]
echo 'export GITHUB_USER=${GITHUB_USER}' &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#change-the-k8s-source-code"&gt;
  &lt;/a&gt;
  Change the k8s source code
&lt;/h2&gt;

&lt;p&gt;Navigate to the directory your clone&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ${GOPATH_K8S}
git remote add origin https://github.com/${GITHUB_USER}/kubernetes
git fetch origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#these-instructions-make-the-folllowing-assumptions"&gt;
  &lt;/a&gt;
  These instructions make the folllowing assumptions:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-Your upstream remote going to
http://
-Your origin remote
http://
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#you-can-double-check-by-runnig"&gt;
  &lt;/a&gt;
  you can double check by runnig
&lt;/h2&gt;



&lt;p&gt;&lt;code&gt;$ git remote -v&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-branch-before-making-a-change"&gt;
  &lt;/a&gt;
  Create a new branch before making a change
&lt;/h2&gt;

&lt;p&gt;branch should have some meaning means what you have added to the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout upstream/master
git checkout -b my-brnach-of-k8s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#if-you-would-like-to-make-change-we-recommend-finding-some-untested-code-and-adding-a-few-unit-tests-if-you-dont-know-how-to-write-unit-tests-in-go-read-this"&gt;
  &lt;/a&gt;
  If you would like to make change we recommend finding some untested code and adding a few unit tests. If you don't know how to write unit tests in go read this
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://golang.org/doc/code.html#Testing"&gt;GOLang_Testing&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-new-test"&gt;
  &lt;/a&gt;
  Example new test
&lt;/h2&gt;



&lt;p&gt;&lt;code&gt;File: pkg/util/normalizer/normalizer_test.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run-kubernetes-locally"&gt;
  &lt;/a&gt;
  Run Kubernetes Locally
&lt;/h2&gt;



&lt;p&gt;&lt;code&gt;$ make test WHAT-k8s.io/kubernetes/pkg/util/normalizer&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contribute-a-pull-request"&gt;
  &lt;/a&gt;
  Contribute a pull request
&lt;/h2&gt;

&lt;p&gt;Commit your changes and push to your fork&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gofmt -v [insert path to changed file]
gofmt -v pkg/util/normalizer/normalier_test.go
git add .
git config --global user.name ""
git config --global user.email ""
git commit -m "commit msg"
git push -u origin/my-branch-of-k8s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-pull-request-via-gihub-ui"&gt;
  &lt;/a&gt;
  create a pull request via GiHub UI
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Navigate to https://github.com/kubernetes/kubernetes page
click on the new pull request
click on compare across forks link
select your fork and branch from the two dropdowns on the right
click on create pull request
Note that an existing maintainer must comment with the /ok-to-test comment the automated test for new contributer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have any doubt please ASK .&lt;br&gt;
Thank you for reading 🔥&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>kubernetes</category>
      <category>devops</category>
    </item>
    <item>
      <title>Let's Dive into React (Pt. 2)</title>
      <author>Abdur-Rahman</author>
      <pubDate>Mon, 07 Jun 2021 16:52:40 +0000</pubDate>
      <link>https://dev.to/shafspecs/let-s-dive-into-react-pt-2-3omm</link>
      <guid>https://dev.to/shafspecs/let-s-dive-into-react-pt-2-3omm</guid>
      <description>&lt;p&gt;Downloaded NPM, got snowpack, ran commands and got our first React page running. You can read about it &lt;a href="https://dev.to/shafspecs/let-s-dive-into-react-pt-1-4i7b"&gt;here&lt;/a&gt;. Let's continue!&lt;/p&gt;

&lt;p&gt;First, let's leave the keyboard alone and learn what we actually did. React is a front-end library, for building User Interfaces (UI), over the years it has been improved and made powerful that we can depend on it solely for the front-end of our application. In the &lt;a href="https://dev.to/shafspecs/let-s-dive-into-react-pt-1-4i7b"&gt;first&lt;/a&gt; article, I mentioned that you can't just add a &lt;code&gt;.js&lt;/code&gt; or whatever to a file and call it React, and the reason has been stated above, &lt;strong&gt;it's a library, not a file&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next, what language is used? Is it JavaScript? Answer is, yes. But a special type of JavaScript called JSX. An example of JSX is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyComponents = {
  DatePicker: function DatePicker(props) {
    return &amp;lt;div&amp;gt;Imagine a {props.color} datepicker here.&amp;lt;/div&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't worry about what this exactly does, just notice the special thing about it, it's HTML + JS inline, we wrote HTML in JavaScript! That's the basics, there's more to JSX but that's for another article.&lt;/p&gt;

&lt;p&gt;Now, this is special, it means we use just one HTML page (&lt;strong&gt;in our own case, &lt;code&gt;index.html&lt;/code&gt;&lt;/strong&gt;), link it to our entry point, (&lt;strong&gt;in our own case, &lt;code&gt;index.jsx&lt;/code&gt;&lt;/strong&gt;) and keep on building from there. We won't need to touch our HTML file at all for editing!&lt;/p&gt;

&lt;p&gt;I mentioned entry point above, what's an entry point? I expect you to have knowledge of modules in JS to continue. Our entry point is simply just the main module we use to connect all our React code to the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in our HTML file. Don't understand yet? We will have our &lt;code&gt;index.html&lt;/code&gt; as the main document file. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;strong&gt;React is an SPA (a Single-Page-Application) library, we will have just one HTML page, we won't even need to make much changes to it, and certainly no &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag or other. All of those tags and JavaScript will be handled by the React files, which is explained below.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;index.js&lt;/code&gt; is the JavaScript that is linked to the HTML document, we will then add all of our HTML + JS (known as JSX), to the &lt;code&gt;index.js&lt;/code&gt; in functions (JavaScript functions) known as 'Components'. We will see a live example later.&lt;/p&gt;

&lt;p&gt;To run it, we use the command: &lt;code&gt;npm run start&lt;/code&gt;. Now, before you say: "Hold up! why don't we just click our HTML file and run that in the browser?". Well, that's because we wrote our JavaScript(React) in JSX. And browsers don't understand JSX, therefore, we will have to 'compile' the code to JavaScript. Examples of compilers include TypeScript and Babel.&lt;/p&gt;

&lt;p&gt;By running &lt;code&gt;npm run start&lt;/code&gt;, we start the compiler that automatically changes all our gibberish HTML + JS (JSX) to understandable JavaScript (&lt;em&gt;this is done behind the scenes&lt;/em&gt;), and automatically runs the HTML for us on a localhost port (&lt;em&gt;think of a localhost as a way to simulate your site as if it's actually on the web&lt;/em&gt;). So that's why we can't just run our HTML file like that.&lt;/p&gt;

&lt;p&gt;One more thing, I've been mentioning &lt;code&gt;index.js&lt;/code&gt;, yet we renamed our file to &lt;code&gt;index.jsx&lt;/code&gt;. That's due to the package we are using, Snowpack. It requires we name our JS files to &lt;code&gt;.jsx&lt;/code&gt; even though we refer to it in the code as &lt;code&gt;.js&lt;/code&gt; (&lt;em&gt;check our HTML &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag &lt;code&gt;src&lt;/code&gt;, for example&lt;/em&gt;). When using others beside Snowpack (e.g Vite), make sure to confirm their naming conventions.&lt;/p&gt;

&lt;p&gt;So that's it for this article, no coding, no editing, must be disappointing I'm sure. But now that we do have an idea of what goes on behind the scenes, we can continue with less explaining to do and hopefully, you get a clearer picture. See you in the next one!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Rapid Mac Setup for Frontend Development</title>
      <author>Zell Liew 🤗</author>
      <pubDate>Mon, 07 Jun 2021 16:36:39 +0000</pubDate>
      <link>https://dev.to/zellwk/rapid-mac-setup-for-frontend-development-3l1d</link>
      <guid>https://dev.to/zellwk/rapid-mac-setup-for-frontend-development-3l1d</guid>
      <description>&lt;p&gt;My Macbook broke down after using it for a year — the logic board got fried. I got this Mac repaired and it broke down a month later. The logic board got fried again 🤦‍♂️.   &lt;/p&gt;

&lt;p&gt;Long story short, Apple agreed to repair the Mac again for free. They also agreed to send me a new Macbook as a replacement since my current one gave me so many problems.   &lt;/p&gt;

&lt;p&gt;In the meantime, I've gotten pretty good at setting up my Mac and I'd like to share how I do this with you.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-mac-setup"&gt;
  &lt;/a&gt;
  The Mac Setup
&lt;/h2&gt;

&lt;p&gt;The first thing I do is increase the tracking speed for both my mouse and trackpad since it means I become (slightly) more productive with a faster mouse cursor.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G88ELo4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/rapid-mac-setup/trackpad-speed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G88ELo4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/rapid-mac-setup/trackpad-speed.png" alt="Trackpad speed settings"&gt;&lt;/a&gt;&lt;/p&gt;
Trackpad tracking speed

  
 

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oeTyAjLe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/rapid-mac-setup/mouse-speed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oeTyAjLe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/rapid-mac-setup/mouse-speed.png" alt="Mouse speed settings"&gt;&lt;/a&gt;&lt;/p&gt;
Mouse tracking speed

  
  

&lt;p&gt;Then I change the keyboard layout since &lt;a href="https://zellwk.com/blog/dvorak/"&gt;I use Dvorak Qwerty&lt;/a&gt; as my main layout.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_4xpXMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/rapid-mac-setup/keyboard-layout-settings.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_4xpXMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/rapid-mac-setup/keyboard-layout-settings.png" alt="Keyboard layout settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But I don't change the keyboard delay until repeat because I have &lt;a href="https://github.com/zellwk/dotfiles/blob/master/mac/macos"&gt;a macos script&lt;/a&gt; that shortens the delay way beyond what the Mac setting can do.   &lt;/p&gt;

&lt;p&gt;This macos script (inspired by &lt;a href="https://github.com/mathiasbynens/dotfiles/blob/main/.macos"&gt;Mathias Bynen's script&lt;/a&gt;) also configures many other OS-level settings that are gonna be useful for developers.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-external-keyboard"&gt;
  &lt;/a&gt;
  My External Keyboard
&lt;/h2&gt;

&lt;p&gt;I'm very thankful that I bought &lt;a href="https://zellwk.com/blog/moonlander/"&gt;a Moonlander&lt;/a&gt; and configured it a while back. This lets me plug in my keyboard into my computer and almost all my shortcuts come back automatically.   &lt;/p&gt;

&lt;p&gt;It also lets me switch between my Mac and my &lt;a href="https://zellwk.com/blog/windows-wsl/"&gt;Windows machine&lt;/a&gt; (which is my backup computer) without having to get used to changes in the keyboard layout.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dotfiles"&gt;
  &lt;/a&gt;
  Dotfiles
&lt;/h2&gt;

&lt;p&gt;I &lt;a href="https://zellwk.com/blog/mac-setup-2"&gt;wrote about dotfiles&lt;/a&gt; back in 2019 which helps me configure how several programs behave. I &lt;a href="https://github.com/zellwk/dotfiles"&gt;share my Dotfiles publicly on Github&lt;/a&gt; so you're free to use them if you wish to.   &lt;/p&gt;

&lt;p&gt;While setting up my new computer, I realized my Dotfiles weren't optimized for computer setup — they contained many &lt;a href="https://github.com/zellwk/dotfiles/blob/master/mac/brew-binaries.sh"&gt;binaries&lt;/a&gt; that were useful for development, but they weren't essential right away. So I optimized the setup by prioritizing &lt;a href="https://github.com/zellwk/dotfiles/blob/master/mac/brew-essentials.sh"&gt;essential apps&lt;/a&gt; like Alfred, Dropbox, Google Drive, Tower, etc.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#copying-ssh-credentials"&gt;
  &lt;/a&gt;
  Copying SSH Credentials
&lt;/h2&gt;

&lt;p&gt;It's a hassle to create new SSH credentials for every new Macbook, so I decided to save a copy of my SSH configuration into a private Github repository.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tYPlr1mh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/rapid-mac-setup/github-repo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tYPlr1mh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/rapid-mac-setup/github-repo.png" alt="SSH configuration saved in Github repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I then copy these secrets and fix their permissions with a handy script. (I'm not sure whether the &lt;code&gt;755&lt;/code&gt; permission for &lt;code&gt;.ssh&lt;/code&gt; is excessive though).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create .ssh folder&lt;/span&gt;
&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; ~/.ssh

&lt;span class="c"&gt;# Copies SSH config into .ssh folder&lt;/span&gt;
&lt;span class="nb"&gt;sudo cp&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; ssh-mac/&lt;span class="k"&gt;*&lt;/span&gt; ~/.ssh

&lt;span class="c"&gt;# Fix permissions&lt;/span&gt;
&lt;span class="nb"&gt;sudo chmod &lt;/span&gt;755 ~/.ssh
&lt;span class="nb"&gt;sudo chmod &lt;/span&gt;400 ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes it easy for me to SSH anywhere — both to Github and my &lt;a href="https://m.do.co/c/64daa7a7a455"&gt;Digital Ocean&lt;/a&gt; Server.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visual-studio-code"&gt;
  &lt;/a&gt;
  Visual Studio Code
&lt;/h2&gt;

&lt;p&gt;Setting up Visual Studio Code is easy because I've already saved my preferences with the &lt;a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync"&gt;Settings Sync&lt;/a&gt; extension. It saves everything you need — including keyboard shortcuts, visual studio code preferences, and even the snippets you created for each language.   &lt;/p&gt;

&lt;p&gt;If you use Visual Studio Code and haven't created a Settings Sync profile yet, I highly encourage you to do so. You'll never know when you need to setup your code editor... (but I hope you don't have to use it).  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apps"&gt;
  &lt;/a&gt;
  Apps
&lt;/h2&gt;

&lt;p&gt;Aside from the apps I can &lt;a href="https://github.com/zellwk/dotfiles/blob/master/mac/brew-essentials.sh"&gt;download&lt;/a&gt; with &lt;a href="https://zellwk.com/blog/homebrew/"&gt;Homebrew&lt;/a&gt;, I also have paid apps that can't be downloaded with Homebrew. These apps are managed under Setapp and the Mac App store.   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setapp"&gt;
  &lt;/a&gt;
  Setapp
&lt;/h3&gt;

&lt;p&gt;In Setapp, I favourited all the apps I want to download and install and I can install them all with a single click. Makes things easy!  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WxC2pbsE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/rapid-mac-setup/setapp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WxC2pbsE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/rapid-mac-setup/setapp.png" alt="Setapp favourite apps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not to mention, Setapp has really good apps that can cost a bunch. Notable mentions include:   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bartender - for hiding stuff
&lt;/li&gt;
&lt;li&gt;Busycal - my calendar
&lt;/li&gt;
&lt;li&gt;Cleanshot - better screenshot tool
&lt;/li&gt;
&lt;li&gt;Clean My Mac - for cleaning up the mac
&lt;/li&gt;
&lt;li&gt;Dash - reading documentations
&lt;/li&gt;
&lt;li&gt;Mind Node - for creating mindmaps.
&lt;/li&gt;
&lt;li&gt;Petrify - generating code images
&lt;/li&gt;
&lt;li&gt;Sizzy - browser for responsive web development
&lt;/li&gt;
&lt;li&gt;Typeface - organizing my fonts
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I recommend checking out &lt;a href="https://setapp.sjv.io/c/2100771/344537/5114"&gt;Setapp&lt;/a&gt; if you're on a Mac. It has many handy Mac apps.   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mac-app-store"&gt;
  &lt;/a&gt;
  Mac App Store
&lt;/h3&gt;

&lt;p&gt;In the app store, I basically sign in, view my purchase history and download the things I need.   &lt;/p&gt;

&lt;p&gt;The only notable mention here is &lt;a href="https://manytricks.com/moom/"&gt;Moom&lt;/a&gt;, which I use to tile my windows in various positions. Setapp has an app called &lt;a href="https://setapp.sjv.io/c/2100771/354736/5114"&gt;Mosaic&lt;/a&gt; which does the same thing. But I prefer sticking to Moom because I haven't found a need to change the workflow.   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-of-apps"&gt;
  &lt;/a&gt;
  List of apps 🤔
&lt;/h3&gt;

&lt;p&gt;I'm curious if anyone is interested about a list of apps I use on a daily basis. It'll be cool to compile and share this list. But I only want to do it if there's sufficient interest 😂   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-store-my-files-and-documents"&gt;
  &lt;/a&gt;
  How I store my files and documents
&lt;/h2&gt;

&lt;p&gt;With the amount of computer-switching going on, I found myself relying on Dropbox and Google Drive for most of my files — I store almost everything there so I don't lose any documents.   &lt;/p&gt;

&lt;p&gt;But I have a bad habit of storing files on my Desktop (which is how &lt;a href="https://twitter.com/zellwk/status/1389266479409889280?s=20"&gt;I lost the files for my redesign&lt;/a&gt; 😢). It's good to change up this habit so I actually don't lose anything even if my logic board dies again.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q652l75q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/rapid-mac-setup/twitter-post.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q652l75q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/rapid-mac-setup/twitter-post.png" alt="Zell twitter post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don't keep code projects inside Dropbox/Google Drive for obvious reasons — there's a ton of dependencies with &lt;code&gt;npm&lt;/code&gt; for each project. Storing &lt;code&gt;node_modules&lt;/code&gt; in Dropbox or Google Drive is simply a waste of space... I version control them with Git instead 🤓. But this means I'll need to build a habit of committing and pushing updates into the Git repository.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;I hope this gives you a good idea of my workflows on my computer. Everything here is made to minimize downtime should I have to switch to another laptop.   &lt;/p&gt;

&lt;p&gt;It's tedious to set this up. But once you have this ready, getting up to speed can take 1-2 hours instead of 1-2 days. It's a huge time saver going forward.   &lt;/p&gt;

&lt;p&gt;What's your workflow regarding your computer? Do you do something similar to how I do it? I'd love to hear your thoughts so please feel free to &lt;a href="https://zellwk.com/contact"&gt;let me know&lt;/a&gt;!  &lt;/p&gt;




&lt;p&gt;Thanks for reading. This article was originally posted on &lt;a href="https://zellwk.com/blog/rapid-mac-setup/"&gt;my blog&lt;/a&gt;. Sign up for &lt;a href="https://zellwk.com"&gt;my newsletter&lt;/a&gt; if you want more articles to help you become a better frontend developer.&lt;/p&gt;

</description>
      <category>mac</category>
      <category>tools</category>
      <category>workflow</category>
    </item>
    <item>
      <title>API's From Dev to Production - Part 11 - Pulumi</title>
      <author>Pete King</author>
      <pubDate>Mon, 07 Jun 2021 16:30:20 +0000</pubDate>
      <link>https://dev.to/newday-technology/api-s-from-dev-to-production-part-11-pulumi-3pmk</link>
      <guid>https://dev.to/newday-technology/api-s-from-dev-to-production-part-11-pulumi-3pmk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#series-introduction"&gt;
  &lt;/a&gt;
  Series Introduction
&lt;/h2&gt;

&lt;p&gt;Welcome to &lt;strong&gt;Part 11&lt;/strong&gt; of this blog series that will go from the most basic example of a .net 5 webapi in C#, and the journey from development to production with a &lt;a href="https://dev.to/newday-technology/shift-left-engineering-4fpp"&gt;&lt;strong&gt;shift-left&lt;/strong&gt;&lt;/a&gt; mindset. We will use &lt;strong&gt;Azure&lt;/strong&gt;, &lt;strong&gt;Docker&lt;/strong&gt;, &lt;strong&gt;GitHub&lt;/strong&gt;, &lt;strong&gt;GitHub Actions&lt;/strong&gt; for CI/C-Deployment and Infrastructure as Code using &lt;strong&gt;Pulumi&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this post we will be looking at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Infrastructure as Code

&lt;ul&gt;
&lt;li&gt;Pulumi&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;We got to grips with IaC and made use of our C# skills to build our own infrastructure - Go shift-left! Pulumi has been a joy to use, just so easy, the integration of GitHub Actions and Pulumi has equally been awesome.&lt;/p&gt;

&lt;p&gt;We were able to preview our infrastructure changes from a Pull Request using our CI Workflow and achieved C-Deployment by deploying our infrastructure upon merging into &lt;code&gt;main&lt;/code&gt; using our CD Workflow.&lt;/p&gt;

&lt;p&gt;The Pulumi GitHub Bot works great and the Pulumi Console is simply invaluable. 🤓&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-repository"&gt;
  &lt;/a&gt;
  GitHub Repository
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/peteking"&gt;
        peteking
      &lt;/a&gt; / &lt;a href="https://github.com/peteking/Samples.WeatherForecast-Part-10"&gt;
        Samples.WeatherForecast-Part-10
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;We will be picking-up where we left off in &lt;a href="https://dev.to/newday-technology/api-s-from-dev-to-production-part-10-9j1"&gt;Part 10&lt;/a&gt;, which means you’ll need the end-result from &lt;a href="https://github.com/peteking/Samples.WeatherForecast-Part-10"&gt;GitHub Repo - Part 10&lt;/a&gt; to start with.&lt;/p&gt;

&lt;p&gt;If you have followed this series all the way through, and I would encourage you to do so, but it isn't necessary if previous posts are knowledge to you already.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don't forget to ensure you have setup Code Climate Quality with your repository.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This post is all about Infrastructure as Code, we want to be more autonomous to build and manage our own infrastructure instead of being &lt;em&gt;fully&lt;/em&gt; dependant on others. Infrastructure as Code has been around a while and there are many solutions, each cloud provider such as Microsoft Azure, AWS, GCP and more all have their own native solutions, and of course the number one name for some time has been Hashicorp's Terraform (OSS, Cloud). However, they all have something in common... they are all in their own languages, from declarative to DSL's and JSON. Using DSL's can be cumbersome as is learning a new language; however, a purpose built language &lt;em&gt;could&lt;/em&gt; have some advantages. Pulumi is one of those solutions that takes a different angle, the ability to get to your end goal of having your infrastructure written as code but in a language you use all the time.&lt;/p&gt;

&lt;p&gt;In this post we will dive head-first into, Pulumi!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let's get started.&lt;/em&gt; 🤘&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#microsoft-azure"&gt;
  &lt;/a&gt;
  Microsoft Azure
&lt;/h2&gt;

&lt;p&gt;Get access to Azure, this is kind of mandatory, we will be using Microsoft Azure - If however, you don't have an account, you can get one for FREE! 😁&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://azure.microsoft.com/en-gb/free/"&gt;Sign-up&lt;/a&gt; to Microsoft Azure.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#installobtain-access-to-azure-cli"&gt;
  &lt;/a&gt;
  Install/Obtain access to Azure CLI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-windows?tabs=azure-cli"&gt;Azure CLI on your OS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/cli/azure/run-azure-cli-docker"&gt;Azure CLI in Docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/cloud-shell/quickstart"&gt;Azure Cloud Shell in BASH&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;If you already have &lt;a href="https://chocolatey.org/install"&gt;chocolately&lt;/a&gt; installed, you can simply execute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;choco install azure-cli
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;As long as you can get access, that's all we need, so use whichever method you prefer.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#pulumi"&gt;
  &lt;/a&gt;
  Pulumi
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#what-is-pulumi"&gt;
  &lt;/a&gt;
  What is Pulumi?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.pulumi.com"&gt;Pulumi&lt;/a&gt; is a modern infrastructure as code platform built for engineers; developers and infrastructure.&lt;/p&gt;

&lt;p&gt;The beauty of the product is you can build, deploy and manage your applications and infrastructure using languages and tools you are familiar with. Follow your existing engineering practices and guidelines, take advantage of the same toolchain you use today.&lt;/p&gt;

&lt;p&gt;This means if you &lt;em&gt;major&lt;/em&gt; in C# for instance, you have all the power of the C# language and all your existing tools. It means you don't need to learn a bespoke language just to manage and provision your infrastructure = Learning curve is minimised.&lt;/p&gt;

&lt;p&gt;When you deploy applications, everyone can work together, or you can choose to be isolated; maybe I'm trying something out or I have something very unique. You can work together and share infrastructure packages no matter what language it is written, deploy with confidence by validating beforehand and automate it all!&lt;/p&gt;

&lt;p&gt;If that wasn't enough, with Pulumi you can use policies to provide guardrails for teams, allowing them to feel empowered with autonomy (shift-left) and with the Pulumi Console you can see a full audit history.&lt;/p&gt;

&lt;p&gt;Pulumi is a breath of fresh air compared to other solutions, now I know what you're thinking, Terraform... Yes, I love it too, and I've worn that T-shirt, it's a good one, however, I have a preference for Pulumi, it's simplicity by using the same language I'm building API's in, whether that is C#, Go, JS/TS, Python etc. The Terraform T-shirt is now wash, ironed, and in the cupboard for a while. Luckily Pulumi can connect to Terraform also, so even if you have say a centralised Platform team building foundational infrastructure, firewalls, SIEM etc., engineering teams can shift-left to build and manage their components whilst using the outputs of Terraform. If for example I needed the output of a VNET from Terraform, Pulumi can get that and then I can provision my product using Pulumi.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#signup"&gt;
  &lt;/a&gt;
  Sign-up
&lt;/h3&gt;

&lt;p&gt;Pulumi has a free tier and they say it's &lt;a href="https://www.pulumi.com/pricing?_ga=2.230476764.1724642515.1621867711-1194162379.1621867711#community-edition"&gt;free forever&lt;/a&gt; (for individual use) 😁&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://app.pulumi.com/signup"&gt;Sign-up&lt;/a&gt; to Pulumi.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#pulumi-cli"&gt;
  &lt;/a&gt;
  Pulumi CLI
&lt;/h3&gt;

&lt;p&gt;Pulumi is controlled primarily using its command line interface (CLI). It works with the Pulumi service to deploy changes to cloud apps and infrastructure. It also keeps a history of who updated what in your team and when; which is awesome! The CLI has been designed for productivity and ultrafast feedback, in addition to the ability to use it in CI/CD scenarios.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Install &lt;a href="https://www.pulumi.com/docs/get-started/install/"&gt;Pulumi CLI&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(Again) If you already have &lt;a href="https://chocolatey.org/install"&gt;chocolately&lt;/a&gt; installed, you can simply execute:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;choco install pulumi
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#requirements-check"&gt;
  &lt;/a&gt;
  Requirements check
&lt;/h2&gt;

&lt;p&gt;✅ Everything we've done previously, i.e. &lt;a href="https://dev.to/newday-technology/api-s-from-dev-to-production-part-10-9j1"&gt;Part 10&lt;/a&gt; etc.&lt;br&gt;
✅ Azure account&lt;br&gt;
✅ Azure CLI - Version used &lt;code&gt;v2.24.0&lt;/code&gt;&lt;br&gt;
✅ Pulumi account (Console)&lt;br&gt;
✅ Pulumi CLI - Version used &lt;code&gt;v2.14.0&lt;/code&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#lets-get-started-with-pulumi"&gt;
  &lt;/a&gt;
  Let's get started with Pulumi!
&lt;/h2&gt;

&lt;p&gt;Fire-up your console of choice and &lt;strong&gt;&lt;em&gt;navigate&lt;/em&gt;&lt;/strong&gt; to the &lt;code&gt;src&lt;/code&gt; directory of the WeatherAPI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Create&lt;/em&gt;&lt;/strong&gt; a folder called, &lt;code&gt;Samples.WeatherForecast.Infra&lt;/code&gt; and &lt;strong&gt;&lt;em&gt;navigate to it&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;mkdir Samples.WeatherForecast.Infra
cd Samples.WeatherForecast.Infra
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Inside&lt;/strong&gt; the &lt;code&gt;infra&lt;/code&gt; directory - &lt;strong&gt;&lt;em&gt;Create&lt;/em&gt;&lt;/strong&gt; a new Pulumi Project.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;pulumi new azure-csharp
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;From here, you'll be prompted by the Pulumi CLI for some values.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;project name:&lt;/strong&gt; &lt;code&gt;Samples.WeatherForecast.Infra&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;project description:&lt;/strong&gt; &lt;code&gt;Infra for WeatherForecast&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;stack name:&lt;/strong&gt; &lt;code&gt;dev&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;azure-native:location: The Azure location to use:&lt;/strong&gt; &lt;code&gt;uksouth&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've chosen &lt;code&gt;UK South&lt;/code&gt; given my location, for you, please choose whatever suits your needs best.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ℹ️ TIP&lt;br&gt;
If you don't know what locations are available, below is a very quick &amp;amp; easy way to find out.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;az login

&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Once login successful, execute
&lt;span class="go"&gt;az account list-locations --output table
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Open VS Code&lt;/em&gt;&lt;/strong&gt; by executing &lt;code&gt;code .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see a nice, brand new Pulumi C# program! 😄&lt;/p&gt;

&lt;p&gt;If you also login to the Pulumi Console, you should see your project there too!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0L3vBE-3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zz66ccji81739lq7fyp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0L3vBE-3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zz66ccji81739lq7fyp.png" alt="blog-11-01"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RmRdxYTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/659qyc9ltmix7nhp55uy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RmRdxYTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/659qyc9ltmix7nhp55uy.png" alt="blog-11-02"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#our-api-infrastructure"&gt;
  &lt;/a&gt;
  Our API Infrastructure
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nb-Z1m1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x66q7hztfwukd7xq2pth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nb-Z1m1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x66q7hztfwukd7xq2pth.png" alt="blog-post-11-arch"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Open&lt;/em&gt;&lt;/strong&gt; VS Code for the &lt;code&gt;WeatherForecast-API&lt;/code&gt; if you haven't already, and &lt;strong&gt;&lt;em&gt;Navigate&lt;/em&gt;&lt;/strong&gt; → &lt;code&gt;/src/WeatherForecastApi-Infra/&lt;/code&gt;&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Rename&lt;/em&gt;&lt;/strong&gt; &lt;code&gt;MyStack.cs&lt;/code&gt; to &lt;code&gt;AzureStack.cs&lt;/code&gt;&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h4&gt;

&lt;p&gt;Inside &lt;code&gt;AzureStack.cs&lt;/code&gt;, &lt;strong&gt;&lt;em&gt;replace&lt;/em&gt;&lt;/strong&gt; all code with the following&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Pulumi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Pulumi.AzureNative.Resources&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Pulumi.AzureNative.Web&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Pulumi.AzureNative.Web.Inputs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AzureStack&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Stack&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;AzureStack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Pulumi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// Obtain our docker image from config&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dockerImage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"docker-image"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Resource Group&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;rg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ResourceGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rg-weatherforecastapi-uks-"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// AppService Plan&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;appServicePlan&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AppServicePlan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"appplan-weatherforecastapi-uks-"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AppServicePlanArgs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ResourceGroupName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Location&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Kind&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Linux"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Reserved&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Sku&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SkuDescriptionArgs&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"B1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Tier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"BASIC"&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="c1"&gt;// WebApp for Containers&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WebApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"app-weatherforecastapi-uks-"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WebAppArgs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="n"&gt;ResourceGroupName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ServerFarmId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;appServicePlan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;SiteConfig&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SiteConfigArgs&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;AppSettings&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; 
                &lt;span class="p"&gt;{&lt;/span&gt; 
                    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NameValuePairArgs&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"WEBSITES_ENABLE_APP_SERVICE_STORAGE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"false"&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NameValuePairArgs&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"DOCKER_REGISTRY_SERVER_URL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://ghcr.io"&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NameValuePairArgs&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"WEBSITES_PORT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"8080"&lt;/span&gt; &lt;span class="c1"&gt;// Our custom image exposes port 8080. Adjust for your app as needed.&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;AlwaysOn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;LinuxFxVersion&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$"DOCKER|&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dockerImage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;HttpsOnly&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Endpoint&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"https://&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultHostName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/weatherforecast"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HealthEndpoint&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"https://&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultHostName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/health"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Endpoint&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;HealthEndpoint&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I appreciate there is a chunk of code there, so let's break it down just a little.&lt;/p&gt;

&lt;p&gt;The first couple of lines is simply getting the config from Pulumi as in Step 4 below we will add a line. I have chosen the &lt;code&gt;Require&lt;/code&gt; method because I would rather it fails miserably if the config setting is not present; without it, we shouldn't continue because we'll have no container image. 😆&lt;/p&gt;

&lt;p&gt;Up next is the resource group creation, note that we do not actually specify its &lt;em&gt;location&lt;/em&gt; - The location comes from the config file - &lt;code&gt;Pulumi.dev.yaml&lt;/code&gt;, it's value is from, &lt;code&gt;azure-native:location&lt;/code&gt;. 😉&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are a bunch of other Azure native settings, for more information on these, please see, &lt;a href="https://www.pulumi.com/docs/intro/cloud-providers/azure/#configuration"&gt;Azure Native Configuration&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Following-on from there is the creation of the Azure AppService Plan, this is essentially our underlying Virtual Machine (VM), I have picked the smallest available WebApp for Containers (Linux) I can; so if you are paying for this I recommend when you test, to destroy afterwards - Still, if you didn't, it would be a under GBP£10 per month anyway.&lt;/p&gt;

&lt;p&gt;Then we have the WebApp itself, this is the &lt;em&gt;AppService&lt;/em&gt;, there are a few things we need to set here, mainly stating where the Docker registry is, in our case, GitHub Container Registry - Please note that the default is always DockerHub, you can easily point it to ACR (Azure Container Registry) also. We set &lt;code&gt;AlwaysOn&lt;/code&gt; and &lt;code&gt;HttpsOnly&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; and we of course need to set the Docker Image, this is the, &lt;code&gt;LinuxFxVersion&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;We need a way to output values, we want to output the address of the host as the end of the resource names will be dynamically generated. We set one for the &lt;code&gt;weatherforecast&lt;/code&gt; and just to be helpful we set one for the &lt;code&gt;health&lt;/code&gt; endpoint too.&lt;/p&gt;

&lt;p&gt;Finally, the last 2 lines of the file are the declarations of the output properties, what denotes these as outputs is simply the 'Output' attribute.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h4&gt;

&lt;p&gt;Modify the &lt;code&gt;Pulumi.dev.yaml&lt;/code&gt; file.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Replace&lt;/em&gt;&lt;/strong&gt; its contents with the below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;config:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;azure-native:location:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;uksouth&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;Samples.WeatherForecast.Infra:docker-image:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ghcr.io/peteking/samples-weatherforecast-part&lt;/span&gt;&lt;span class="mi"&gt;-11&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;dae&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="err"&gt;cc&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="err"&gt;eff&lt;/span&gt;&lt;span class="mi"&gt;6861687444&lt;/span&gt;&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="mi"&gt;6e91&lt;/span&gt;&lt;span class="err"&gt;be&lt;/span&gt;&lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="err"&gt;bed&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="err"&gt;f&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We've added our &lt;em&gt;own config&lt;/em&gt; here which is our docker image, therefore, it's configuration instead of C# code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This should be the location of your Docker image.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're using the GitHub Container Registry, it should be a simple swap.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h4&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5
&lt;/h4&gt;

&lt;p&gt;We have enough to give it a good manual "interactive" test with the Pulumi CLI, just to make sure everything is working as we expect it to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open&lt;/strong&gt; your terminal and &lt;strong&gt;&lt;em&gt;Navigate&lt;/em&gt;&lt;/strong&gt; → &lt;code&gt;/src/WeatherForecastApi-Infra/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Execute&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pulumi up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;Here you can see it has executed &lt;code&gt;preview&lt;/code&gt; as part of the &lt;code&gt;up&lt;/code&gt; command, it highlights what it plans to do, in this case, it will &lt;strong&gt;create 4 resources&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vAoAmYn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ey9f0l7t4eldc0nnuglw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vAoAmYn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ey9f0l7t4eldc0nnuglw.png" alt="blog-11-04"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Select&lt;/strong&gt; → &lt;em&gt;yes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you've selected &lt;em&gt;yes&lt;/em&gt;, Pulumi will go-ahead and &lt;em&gt;create&lt;/em&gt; those resources, below is the response.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ScD6Hll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xrngxwxgi4z7u8ule5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ScD6Hll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xrngxwxgi4z7u8ule5x.png" alt="blog-11-05"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can see the Pulumi &lt;code&gt;outputs&lt;/code&gt; we created, one that links to the &lt;code&gt;weatherforecast&lt;/code&gt; endpoint and one to the &lt;code&gt;health&lt;/code&gt; endpoint; we've done this because the resources are dynamic, i.e. at the end of our Azure Resources is a random string to ensure uniqueness. If this doesn't suit your use case, you can ensure consistency instead - For more information, see &lt;a href="https://www.pulumi.com/docs/intro/concepts/resources/#autonaming"&gt;Pulumi - Autonaming&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;We now have the opportunity to test our cloud infrastructure as code deployment and see if our API works!&lt;/p&gt;

&lt;p&gt;You can use the links from the &lt;code&gt;output&lt;/code&gt; to save typing.&lt;/p&gt;

&lt;p&gt;The weather forecast gets returned! 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L_k50hMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d60lmy5s49dfk4y4hzrd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L_k50hMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d60lmy5s49dfk4y4hzrd.png" alt="blog-11-08"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Even the &lt;code&gt;/health&lt;/code&gt; endpoint is reporting good news! 🎆&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--irXMGc-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6h1xlps8wstfm3jozuax.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--irXMGc-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6h1xlps8wstfm3jozuax.png" alt="blog-11-09"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;If you want to minimise your costs 💲, you can of course &lt;em&gt;destroy&lt;/em&gt; 💥 your resources, and with the powers of Pulumi that is also a breeze with the, &lt;code&gt;destory&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Execute&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pulumi destory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7djo3Vme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnkktp4f54fsoeqejaul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7djo3Vme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnkktp4f54fsoeqejaul.png" alt="blog-11-06"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Select&lt;/strong&gt; → &lt;em&gt;yes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you've selected &lt;em&gt;yes&lt;/em&gt;, Pulumi will go-ahead and &lt;em&gt;destroy&lt;/em&gt; those resources, below is the output. 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--83d4Mpu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp4mtahj7a3ihpgbjlly.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--83d4Mpu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp4mtahj7a3ihpgbjlly.png" alt="blog-11-07"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ℹ️ &lt;br&gt;
You'll notice the output at the bottom stating the &lt;em&gt;stack is still available&lt;/em&gt; - All this means is you have all the details, history and everything about your stack in the Pulumi Console; which is all rather helpful, don't you think?&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#github-actions-with-pulumi"&gt;
  &lt;/a&gt;
  GitHub Actions with Pulumi
&lt;/h2&gt;

&lt;p&gt;All of what we have achieved is great, we have got everything we need infrastructure wise, built it all as code, we've even deployed and tested it for real. However, it's all rather interactive, we need to bake this into both our CI Workflow and our CD Workflow.&lt;/p&gt;

&lt;p&gt;Our CI Workflow will execute &lt;code&gt;pulumi preview&lt;/code&gt; and utilise the Pulumi GitHub Bot for instant feedback in the Pull Request; by doing this, the person reviewing the PR will be able to see what resources will be created/destroyed/updated - If anything is a miss then you have the opportunity to do something about it.&lt;/p&gt;

&lt;p&gt;Our CD Workflow will execute &lt;code&gt;pulumi up&lt;/code&gt; and deploy our resources to Azure; but only once all our tests pass, code coverage pass and our container scan is all good too.&lt;/p&gt;

&lt;p&gt;In order to interact with Azure in GitHub Actions we will create a Service Principal.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#azure-service-principal"&gt;
  &lt;/a&gt;
  Azure Service Principal
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h4&gt;

&lt;p&gt;A Service Principal is an object in a single tenant or directory in Azure AD. It is the identity of an application instance, it defines access for the application and what resources it can access. Instead of using a &lt;em&gt;user&lt;/em&gt; identity, we can create a &lt;em&gt;service&lt;/em&gt; identity and manage its security and access.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#create-azure-service-principal"&gt;
  &lt;/a&gt;
  Create Azure Service Principal
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Create&lt;/em&gt;&lt;/strong&gt; an, &lt;em&gt;Azure Subscription&lt;/em&gt; (if you don't already have one).&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;p&gt;Obtain the subscription id:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;az account list &lt;span class="c"&gt;#It's the 'id' field.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h4&gt;

&lt;p&gt;Set the subscription:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;az account &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;--subscription&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;#&amp;lt;id&amp;gt; is the 'id' field from above&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;az ad sp create-for-rbac &lt;span class="nt"&gt;--name&lt;/span&gt; sp-weather-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You should see a result from Step 4 with the following values&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"appId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"WWWWWWWW-WWWW-WWWW-WWWW-WWWWWWWWWWWW"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"displayName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ServicePrincipalName"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://ServicePrincipalName"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"tenant"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;ℹ️ TIP&lt;br&gt;
If you'd rather it in another format to save time later, you can use the &lt;code&gt;--sdk-auth&lt;/code&gt; parameter.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#securely-store-azure-service-principal-credentials"&gt;
  &lt;/a&gt;
  Securely store Azure Service Principal credentials
&lt;/h3&gt;

&lt;p&gt;Now we have the Service Principal, we need to be able to store the details securely.&lt;/p&gt;

&lt;p&gt;We can store these in GitHub Secrets which is totally fine right, but that means they are not linked to our Pulumi Stack, so another way is to store them inside Pulumi; which can also store &lt;em&gt;secrets&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From the output of our Service Principal creation command, the following values can be mapped like so:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Service Principal Value&lt;/th&gt;
&lt;th&gt;SDK Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;appId&lt;/td&gt;
&lt;td&gt;clientId&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;td&gt;clientSecret&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tenant&lt;/td&gt;
&lt;td&gt;tenantId&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;This is where the &lt;code&gt;--sdk-auth&lt;/code&gt; parameter can help, it will automatically map these for you.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h4&gt;
  &lt;a href="#pulumi-secrets-secret"&gt;
  &lt;/a&gt;
  Pulumi Secrets ㊙️
&lt;/h4&gt;

&lt;p&gt;By storing these in Pulumi we get multi-user access for deployment which includes using it interactively; if we stored them in GitHub Secrets, we can only use them directly from the pipeline itself; there are pros and cons this of course - Choose what suites you best.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pulumi config &lt;span class="nb"&gt;set &lt;/span&gt;azure-native:clientId &lt;span class="s2"&gt;"WWWWWWWW-WWWW-WWWW-WWWW-WWWWWWWWWWWW"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pulumi config &lt;span class="nb"&gt;set &lt;/span&gt;azure-native:clientSecret &lt;span class="s2"&gt;"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"&lt;/span&gt; &lt;span class="nt"&gt;--secret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;❗ Important&lt;br&gt;
Note the &lt;code&gt;--secret&lt;/code&gt; at the end of the command, this is very important; otherwise, the value will be stored in plane text, whereas we want it to be encrypted and stored as a secret.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pulumi config &lt;span class="nb"&gt;set &lt;/span&gt;azure-native:tenantId &lt;span class="s2"&gt;"YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pulumi config &lt;span class="nb"&gt;set &lt;/span&gt;azure-native:subscriptionId &lt;span class="s2"&gt;"ZZZZZZZZ-ZZZZ-ZZZZ-ZZZZ-ZZZZZZZZZZZZ"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;Once you have executed these commands, you'll notice your &lt;code&gt;Pulumi.dev.yml&lt;/code&gt; file has been updated accordingly.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#ci-workflow"&gt;
  &lt;/a&gt;
  CI Workflow
&lt;/h3&gt;

&lt;p&gt;Let's modify our &lt;strong&gt;CI&lt;/strong&gt; Workflow &lt;code&gt;./github/workflows/ci-pull-request.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Add&lt;/em&gt;&lt;/strong&gt; a new &lt;em&gt;job&lt;/em&gt; at the bottom of the Workflow.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;infra&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ci&lt;/span&gt;
  &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout repo&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Disabling shallow clone is recommended for improving relevancy of reporting&lt;/span&gt;
        &lt;span class="na"&gt;fetch-depth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Pulumi CLI&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pulumi/action-install-pulumi-cli@v1.1.0&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set Pulumi config values&lt;/span&gt;
      &lt;span class="na"&gt;working-directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./src/Samples.WeatherForecast.Infra&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;PULUMI_ACCESS_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.PULUMI_ACCESS_TOKEN }}&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;pulumi stack select dev&lt;/span&gt;
        &lt;span class="s"&gt;pulumi config set Samples.WeatherForecast.Infra:docker-image ${{ env.image-name }}&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pulumi Preview&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pulumi/actions@v3.1.0&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;preview&lt;/span&gt;
        &lt;span class="na"&gt;stack-name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
        &lt;span class="na"&gt;work-dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./src/Samples.WeatherForecast.Infra&lt;/span&gt;
        &lt;span class="na"&gt;github-token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;PULUMI_ACCESS_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.PULUMI_ACCESS_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-the-pulumi-github-bot"&gt;
  &lt;/a&gt;
  Install the Pulumi GitHub Bot
&lt;/h3&gt;

&lt;p&gt;Unless you want to dive into the Actions log to find out how the &lt;code&gt;pulumi preview&lt;/code&gt; went, you better &lt;a href="https://github.com/apps/pulumi"&gt;install the Pulumi GitHub Bot&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.pulumi.com/docs/guides/continuous-delivery/github-app/"&gt;Step by step guide on Pulumi Docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you have the bot installed, when you initiate a PR, you'll see something like the below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hN59nP09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hxxxdvt06kglr37bqoo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hN59nP09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hxxxdvt06kglr37bqoo.png" alt="blog-11-10"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Even better though, is you can view more details in the Pulumi Console like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QVLWloPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9t46n9s070zb8j5zxmh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QVLWloPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9t46n9s070zb8j5zxmh.png" alt="blog-11-11"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a64dmIY8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnlaymqflvzb7mm12w6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a64dmIY8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnlaymqflvzb7mm12w6k.png" alt="blog-11-12"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#cd-workflow"&gt;
  &lt;/a&gt;
  CD Workflow
&lt;/h3&gt;

&lt;p&gt;Let's modify our &lt;strong&gt;CD&lt;/strong&gt; Workflow &lt;code&gt;./github/workflows/build-and-publish.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Add&lt;/em&gt;&lt;/strong&gt; a new &lt;em&gt;job&lt;/em&gt; at the bottom of the Workflow.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;infra&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build-and-push&lt;/span&gt;
  &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout repo&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Disabling shallow clone is recommended for improving relevancy of reporting&lt;/span&gt;
        &lt;span class="na"&gt;fetch-depth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Pulumi CLI&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pulumi/action-install-pulumi-cli@v1.1.0&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set Pulumi config values&lt;/span&gt;
      &lt;span class="na"&gt;working-directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./src/Samples.WeatherForecast.Infra&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;PULUMI_ACCESS_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.PULUMI_ACCESS_TOKEN }}&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;pulumi stack select dev&lt;/span&gt;
        &lt;span class="s"&gt;pulumi config set Samples.WeatherForecast.Infra:docker-image ${{ env.image-name }}&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pulumi Up&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pulumi/actions@v3.1.0&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;up&lt;/span&gt;
        &lt;span class="na"&gt;stack-name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
        &lt;span class="na"&gt;work-dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./src/Samples.WeatherForecast.Infra&lt;/span&gt;
        &lt;span class="na"&gt;github-token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;PULUMI_ACCESS_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.PULUMI_ACCESS_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#commit-your-code"&gt;
  &lt;/a&gt;
  Commit your code
&lt;/h4&gt;

&lt;p&gt;It's time to commit you code, but before you do, let's update our &lt;em&gt;branch protection rule&lt;/em&gt; - Now we have an &lt;code&gt;infra&lt;/code&gt; job in our Workflow which does a &lt;code&gt;pulumi preview&lt;/code&gt;, we most likely want this to be mandatory and pass.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OJo2JSFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsavt2nvgbji5jl0z0g5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OJo2JSFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsavt2nvgbji5jl0z0g5.png" alt="blog-11-13"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Now that we have our branch protection rules updated and CD Workflow file completed, let's ensure it all works.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Raise your PR and see the CI Workflow kick-off.&lt;/li&gt;
&lt;li&gt;Verify everything is fine by looking at the Pulumi GitHub Bot or the Pulumi Console.&lt;/li&gt;
&lt;li&gt;Wait until all GitHub Status Checks pass and merge your PR into &lt;code&gt;main&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Verify your Workflow is successful.&lt;/li&gt;
&lt;li&gt;Either:

&lt;ul&gt;
&lt;li&gt;Go to the Pulumi Console and see your Activity.&lt;/li&gt;
&lt;li&gt;OR see the output from the &lt;code&gt;infra&lt;/code&gt; job in the CD Workflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Try the &lt;em&gt;output&lt;/em&gt; links to verify your API is running.&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;I prefer the Pulumi Console, see below, you can see the merge of my branch and the creation of the infrastructure once it was merged into &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xi1o5Vkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aijjlw68i93s17z0cw2a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xi1o5Vkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aijjlw68i93s17z0cw2a.png" alt="blog-11-14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was then able to validate that both the &lt;code&gt;weatherforecast&lt;/code&gt; and &lt;code&gt;health&lt;/code&gt; endpoints was functional. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#what-have-we-learned-thinking"&gt;
  &lt;/a&gt;
  What have we learned? 🤔
&lt;/h2&gt;

&lt;p&gt;We have learned all about IaC - &lt;strong&gt;I&lt;/strong&gt;nfrastructure &lt;strong&gt;a&lt;/strong&gt;s &lt;strong&gt;C&lt;/strong&gt;ode, and utilised &lt;a href="//htts://www.pulumi.com"&gt;Pulumi&lt;/a&gt; to achieve this - We have leveraged our existing C# skills to shift-left on our infrastructure; therefore, we are now more autonomous.&lt;/p&gt;

&lt;p&gt;We've been able to test (preview) and verify our infrastructure changes during Pull Requests as part of CI, and we have achieved C-Deployment by releasing our infrastructure in our CD Workflow.&lt;/p&gt;

&lt;p&gt;Relief - That's it! 😌 &lt;/p&gt;

&lt;p&gt;If you've made it this far, congratulations and thank you 🤝, I know it's a long post and a lot to take in, but I hope you have found it worthwhile.&lt;/p&gt;

&lt;p&gt;There is unfortunately or fortunately, depending on how you look at it, still a lot to do 😏 So there will be a more coming soon! 🤪&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;📄 Note&lt;br&gt;
Adding Pulumi to your repo in GitHub will break CodeQL, there is an active GitHub issue open for this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/github/codeql-action/issues/544"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Process failed with exit code 100
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#544&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/peteking"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--7lILXf3v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/8613214%3Fv%3D4" alt="peteking avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/peteking"&gt;peteking&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/github/codeql-action/issues/544"&gt;&lt;time&gt;Jun 03, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I have failure in the codeql-action, it has failed with an exit code of 100, looking at the docs it says it's likely a bug based on this error code.&lt;/p&gt;
&lt;p&gt;This is an open source sample project, so all open.&lt;/p&gt;
&lt;p&gt;The recent addition made as you can see from the PR is I've added Pulumi for its Azure infrastructure provisioning.&lt;/p&gt;
&lt;p&gt;I think it start to look at Pulumi here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Running TRAP import for CodeQL database at /home/runner/work/_temp/codeql_databases/csharp...
  Running TRAP import for CodeQL database at /home/runner/work/_temp/codeql_databases/csharp...
  Pulumi.AzureNative.dll.trap.gz, 9885761: java.lang.OutOfMemoryError: Java heap space
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then slowly goes wrong and fails, out of memory.&lt;/p&gt;
&lt;p&gt;Here is the codeql workflow run here:
&lt;a href="https://github.com/peteking/Samples.WeatherForecast-Part-11/pull/1/checks?check_run_id=2738620747"&gt;https://github.com/peteking/Samples.WeatherForecast-Part-11/pull/1/checks?check_run_id=2738620747&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Part of the log is here for quick reference:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Finalizing csharp
  /opt/hostedtoolcache/CodeQL/0.0.0-20210517/x64/codeql/codeql database finalize --threads=2 /home/runner/work/_temp/codeql_databases/csharp
  Running pre-finalize script /opt/hostedtoolcache/CodeQL/0.0.0-20210517/x64/codeql/csharp/tools/pre-finalize.sh in /home/runner/work/Samples.WeatherForecast-Part-11/Samples.WeatherForecast-Part-11.
  Running pre-finalize script /opt/hostedtoolcache/CodeQL/0.0.0-20210517/x64/codeql/csharp/tools/pre-finalize.sh in /home/runner/work/Samples.WeatherForecast-Part-11/Samples.WeatherForecast-Part-11.
  [2021-06-03 15:44:36] [build-stderr] Scanning for files in /home/runner/work/Samples.WeatherForecast-Part-11/Samples.WeatherForecast-Part-11...
  [2021-06-03 15:44:36] [build-stderr] Scanning for files in /home/runner/work/Samples.WeatherForecast-Part-11/Samples.WeatherForecast-Part-11...
  [2021-06-03 15:44:36] [build-stderr] /home/runner/work/_temp/codeql_databases/csharp: Indexing files in in /home/runner/work/Samples.WeatherForecast-Part-11/Samples.WeatherForecast-Part-11...
  [2021-06-03 15:44:36] [build-stderr] /home/runner/work/_temp/codeql_databases/csharp: Indexing files in in /home/runner/work/Samples.WeatherForecast-Part-11/Samples.WeatherForecast-Part-11...
  [2021-06-03 15:44:36] [build-stderr] /home/runner/work/_temp/codeql_databases/csharp: Running in /home/runner/work/Samples.WeatherForecast-Part-11/Samples.WeatherForecast-Part-11: [/opt/hostedtoolcache/CodeQL/0.0.0-20210517/x64/codeql/xml/tools/index-files.sh, /home/runner/work/_temp/codeql_databases/csharp/working/files-to-index16194344738812882790.list]
  [2021-06-03 15:44:36] [build-stderr] /home/runner/work/_temp/codeql_databases/csharp: Running in /home/runner/work/Samples.WeatherForecast-Part-11/Samples.WeatherForecast-Part-11: [/opt/hostedtoolcache/CodeQL/0.0.0-20210517/x64/codeql/xml/tools/index-files.sh, /home/runner/work/_temp/codeql_databases/csharp/working/files-to-index16194344738812882790.list]
  Running TRAP import for CodeQL database at /home/runner/work/_temp/codeql_databases/csharp...
  Running TRAP import for CodeQL database at /home/runner/work/_temp/codeql_databases/csharp...
  Pulumi.AzureNative.dll.trap.gz, 9885761: java.lang.OutOfMemoryError: Java heap space
  com.semmle.inmemory.trap.TrapScanner.getTokenString(TrapScanner.java:521)
  com.semmle.inmemory.trap.TrapScanner.getLabelValue(TrapScanner.java:578)
  com.semmle.inmemory.trap.TRAPReader.scanOneField(TRAPReader.java:754)
  Pulumi.AzureNative.dll.trap.gz, 9885761: java.lang.OutOfMemoryError: Java heap space
  com.semmle.inmemory.trap.TRAPReader.scanTuple(TRAPReader.java:495)
  com.semmle.inmemory.trap.TrapScanner.getTokenString(TrapScanner.java:521)
  com.semmle.inmemory.trap.TRAPReader.scanTuplesAndLabels(TRAPReader.java:439)
  com.semmle.inmemory.trap.TrapScanner.getLabelValue(TrapScanner.java:578)
  com.semmle.inmemory.trap.TRAPReader.importTuples(TRAPReader.java:376)
  com.semmle.inmemory.trap.TRAPReader.scanOneField(TRAPReader.java:754)
  com.semmle.inmemory.trap.ImportTasksProcessor.process(ImportTasksProcessor.java:172)
  com.semmle.inmemory.trap.TRAPReader.scanTuple(TRAPReader.java:495)
  com.semmle.inmemory.trap.ImportTasksProcessor.lambda$null$1(ImportTasksProcessor.java:129)
  com.semmle.inmemory.trap.TRAPReader.scanTuplesAndLabels(TRAPReader.java:439)
  com.semmle.inmemory.trap.ImportTasksProcessor$$Lambda$234/0x000000010031fc40.accept(Unknown Source)
  com.semmle.util.concurrent.FutureUtils.lambda$null$8(FutureUtils.java:136)
  com.semmle.util.concurrent.FutureUtils$$Lambda$236/0x000000010031f440.get(Unknown Source)
  java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(Unknown Source)
  java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
  java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
  java.base/java.lang.Thread.run(Unknown Source)
  com.semmle.inmemory.trap.TRAPReader.importTuples(TRAPReader.java:376)
  com.semmle.inmemory.trap.ImportTasksProcessor.process(ImportTasksProcessor.java:172)
  com.semmle.inmemory.trap.ImportTasksProcessor.lambda$null$1(ImportTasksProcessor.java:129)
  com.semmle.inmemory.trap.ImportTasksProcessor$$Lambda$234/0x000000010031fc40.accept(Unknown Source)
  com.semmle.util.concurrent.FutureUtils.lambda$null$8(FutureUtils.java:136)
  com.semmle.util.concurrent.FutureUtils$$Lambda$236/0x000000010031f440.get(Unknown Source)
  java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(Unknown Source)
  java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
  java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
  java.base/java.lang.Thread.run(Unknown Source)
  Oops! A fatal internal error occurred.
  Oops! A fatal internal error occurred.
  java.lang.RuntimeException: java.lang.OutOfMemoryError: Java heap space
  java.lang.RuntimeException: java.lang.OutOfMemoryError: Java heap space
    at com.semmle.util.exception.Exceptions.asUnchecked(Exceptions.java:103)
    at com.semmle.inmemory.trap.TrapImporter.run(TrapImporter.java:105)
    at com.semmle.cli2.ql.dataset.ImportCommand.executeSubcommand(ImportCommand.java:98)
    at com.semmle.cli2.picocli.PlumbingRunner.run(PlumbingRunner.java:110)
    at com.semmle.cli2.picocli.SubcommandCommon.runPlumbingInProcess(SubcommandCommon.java:159)
    at com.semmle.cli2.database.FinalizeCommand.executeSubcommand(FinalizeCommand.java:110)
    at com.semmle.cli2.picocli.SubcommandCommon.call(SubcommandCommon.java:448)
    at com.semmle.util.exception.Exceptions.asUnchecked(Exceptions.java:103)
    at com.semmle.inmemory.trap.TrapImporter.run(TrapImporter.java:105)
    at com.semmle.cli2.ql.dataset.ImportCommand.executeSubcommand(ImportCommand.java:98)
    at com.semmle.cli2.picocli.PlumbingRunner.run(PlumbingRunner.java:110)
    at com.semmle.cli2.picocli.SubcommandCommon.runPlumbingInProcess(SubcommandCommon.java:159)
    at com.semmle.cli2.database.FinalizeCommand.executeSubcommand(FinalizeCommand.java:110)
    at com.semmle.cli2.picocli.SubcommandCommon.call(SubcommandCommon.java:448)
    at com.semmle.cli2.picocli.SubcommandMaker.runMain(SubcommandMaker.java:201)
    at com.semmle.cli2.picocli.SubcommandMaker.runMain(SubcommandMaker.java:209)
    at com.semmle.cli2.CodeQL.main(CodeQL.java:96)
  Caused by: java.lang.OutOfMemoryError: Java heap space
    at com.semmle.cli2.picocli.SubcommandMaker.runMain(SubcommandMaker.java:201)
    at com.semmle.cli2.picocli.SubcommandMaker.runMain(SubcommandMaker.java:209)
    at com.semmle.cli2.CodeQL.main(CodeQL.java:96)
  Caused by: java.lang.OutOfMemoryError: Java heap space
  Error: The process '/opt/hostedtoolcache/CodeQL/0.0.0-20210517/x64/codeql/codeql' failed with exit code 100
  Error: The process '/opt/hostedtoolcache/CodeQL/0.0.0-20210517/x64/codeql/codeql' failed with exit code 100
      at Object.toolrunnerErrorCatcher (/home/runner/work/_actions/github/codeql-action/v1/lib/toolrunner-error-catcher.js:79:19)
      at processTicksAndRejections (internal/process/task_queues.js:93:5)
      at async Object.finalizeDatabase (/home/runner/work/_actions/github/codeql-action/v1/lib/codeql.js:414:13)
      at async finalizeDatabaseCreation (/home/runner/work/_actions/github/codeql-action/v1/lib/analyze.js:74:9)
      at async Object.runAnalyze (/home/runner/work/_actions/github/codeql-action/v1/lib/analyze.js:172:5)
      at async run (/home/runner/work/_actions/github/codeql-action/v1/lib/analyze-action.js:50:30)
      at async runWrapper (/home/runner/work/_actions/github/codeql-action/v1/lib/analyze-action.js:96:9)
&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/github/codeql-action/issues/544"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;br&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#next-up"&gt;
  &lt;/a&gt;
  Next up
&lt;/h2&gt;

&lt;p&gt;Part 12 in this series will be about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;More&lt;/strong&gt; Infrastructure as Code with Pulumi

&lt;ul&gt;
&lt;li&gt;Environmental support (multiple Stacks)&lt;/li&gt;
&lt;li&gt;Security

&lt;ul&gt;
&lt;li&gt;What can we do on the cheap in Azure?&lt;/li&gt;
&lt;li&gt;What should I do in a more real scenario?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GitHub Actions

&lt;ul&gt;
&lt;li&gt;Clean-up a little and add Environment capabilities&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#more-information"&gt;
  &lt;/a&gt;
  More information
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.azure.com"&gt;https://www.azure.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dotnet.microsoft.com/"&gt;https://dotnet.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.github.com"&gt;https://www.github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com"&gt;https://www.docker.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pulumi.com"&gt;https://www.pulumi.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/coverlet-coverage/"&gt;https://github.com/coverlet-coverage/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codeclimate.com/quality"&gt;https://www.codeclimate.com/quality&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>dotnet</category>
      <category>docker</category>
      <category>csharp</category>
      <category>github</category>
    </item>
    <item>
      <title>My 3 tips about Flexbox that will make your CSS better</title>
      <author>Stas Melnikov</author>
      <pubDate>Mon, 07 Jun 2021 16:25:40 +0000</pubDate>
      <link>https://dev.to/melnik909/my-3-tips-about-flexbox-that-will-make-your-css-better-50g6</link>
      <guid>https://dev.to/melnik909/my-3-tips-about-flexbox-that-will-make-your-css-better-50g6</guid>
      <description>&lt;p&gt;When I check CSS of projects I often face some mistakes that are related to Flexbox. I'd like to tell about them in this post so that you didn't do them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#justifycontent-vs-columngap"&gt;
  &lt;/a&gt;
  justify-content vs column-gap
&lt;/h2&gt;

&lt;p&gt;I'm tired to see that developers use the space-between or space-around value to position the grid's elements. It's a bad practice that leads to incorrect displaying. When people do that they don't think that number of items may be changed. &lt;/p&gt;

&lt;p&gt;For example, if add more elements in a grid from 4 columns they will not be displayed at the start of the line. Thus I see the broken grids. &lt;/p&gt;

&lt;p&gt;There is a nice approach using the column-gap property. This property with Flexbox and you can just define a gap between of elements. And browsers will do all the rest of the work. So you'll get safe grids with any number of elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;item 1&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;item 2&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;item 3&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;item 4&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;item 5&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* or space-around */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;item 1&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;item 2&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;item 3&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;item 4&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;item 5&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;column-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Mk3Mq31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6zMDlRic--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://stas-melnikov.ru/image2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Mk3Mq31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6zMDlRic--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://stas-melnikov.ru/image2.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#justifycontent-and-alignitems-vs-margin-auto"&gt;
  &lt;/a&gt;
  justify-content and align-items vs margin: auto
&lt;/h2&gt;

&lt;p&gt;When we solve issues of alignment we like to use alignment properties such as justify-content or align-items. But few people know these properties can lead to losing data, particularly frequently, when vertical alignment.&lt;/p&gt;

&lt;p&gt;This is due to how these properties work. This process includes the two terms. The first, the alignment container is an element to that you declare the alignment properties. &lt;/p&gt;

&lt;p&gt;The second, the alignment subject is elements that are inside of the alignment container. The alignment properties affect them.&lt;/p&gt;

&lt;p&gt;So there is the case when the alignment subjects' sizes are larger than the alignment container's sizes. In the default alignment mode, it'll lead to overflow and loss of data. So users will see the cropped element.&lt;/p&gt;

&lt;p&gt;I created the example with the modal element to show this behavior. At first, the text is short. But when we make it more we lose the heading and the close button.&lt;/p&gt;

&lt;p&gt;We can fix it using auto margins because it uses extra space to align elements and doesn't lead to overflow. Take a look at how elements are no longer lost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal__main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.modal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal__main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.modal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.modal__main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lNqgNpOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nIY8JvoC--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://stas-melnikov.ru/image4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lNqgNpOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nIY8JvoC--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://stas-melnikov.ru/image4.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flex-items-are-blockified"&gt;
  &lt;/a&gt;
  flex items are blockified
&lt;/h2&gt;

&lt;p&gt;There is an important feature when we use flexbox. When you write display: flex for the element all its child elements (flex items) are blockified. &lt;/p&gt;

&lt;p&gt;What does it mean? All flex items that are set the display property with the inline, inline-block, inline-flex, inline-grid, or inline-table values will be changed. The inline and inline-block will changed to block, inline-flex -&amp;gt; flex, inline-grid -&amp;gt; grid and inline-table -&amp;gt; table. &lt;/p&gt;

&lt;p&gt;So don't use the block, inline and inline-block values and your code will be saved clear.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* inline or inline-block */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; If you like these tips go to read others on my &lt;a href="https://www.linkedin.com/in/melnik909/"&gt;Linkedin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my patrons: Ashlea Gable, Ben Rinehart, Sergio Kagiema, Vlad Bazhanov, Spiridon Konofaos, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Beginners guide to setting up and running Flask web server</title>
      <author>Pratap Sharma</author>
      <pubDate>Mon, 07 Jun 2021 16:24:23 +0000</pubDate>
      <link>https://dev.to/pratap2210/beginners-guide-to-setting-up-and-running-flask-web-server-1710</link>
      <guid>https://dev.to/pratap2210/beginners-guide-to-setting-up-and-running-flask-web-server-1710</guid>
      <description>&lt;p&gt;In this blog post, we will learn how to set up a web server using flask.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Flask&lt;/a&gt; is a Python web framework built with a small core and easy-to-extend philosophy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;Before getting started, let us make sure we have python3 installed in our system.&lt;br&gt;
Follow &lt;a href="https://www.python.org/downloads/"&gt;Python download &lt;/a&gt; link to get python installed in your system. Once the python installation is completed, let start with creating a server.&lt;/p&gt;

&lt;p&gt;Before proceeding with the setup, let us create a folder named flask-app. Run the below command to make a folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;flask-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now cd into the newly created &lt;code&gt;flask-app&lt;/code&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us set up a virtual environment using &lt;code&gt;python3&lt;/code&gt; for the app. To set up a virtual environment, let us run the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After creating a virtual environment, we need to activate the environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, finally, we can start with creating a web server using a flask.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-flask"&gt;
  &lt;/a&gt;
  Setting up flask
&lt;/h3&gt;

&lt;p&gt;As python Flask is an external module, to start working on it, we need to install it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;Flask
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let us create a file called &lt;code&gt;app.py&lt;/code&gt; in the root directory of our project. You can use the terminal or code editor of your choice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the file is created, let us add the following lines of code in the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;p&amp;gt;Hello world&amp;lt;/p&amp;gt;"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#running-flask-server"&gt;
  &lt;/a&gt;
  Running flask server
&lt;/h3&gt;

&lt;p&gt;To run the application, use the flask command or &lt;code&gt;python -m flask&lt;/code&gt;. Before you can do that, you need to tell your terminal the application to work with by exporting the &lt;code&gt;FLASK_APP&lt;/code&gt; environment variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;app
&lt;span class="nv"&gt;$ &lt;/span&gt;flask run
 &lt;span class="k"&gt;*&lt;/span&gt; Running on http://127.0.0.1:5000/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, our server is running on &lt;code&gt;Port 5000&lt;/code&gt;. Go to your browser and open &lt;a href="https://dev.tolocalhost:5000"&gt;localhost:5000&lt;/a&gt;. You should see Hello World in the browser. How cool is that? Amazing right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_zh7hAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b00v8mdc8k8i2ddcfcyd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_zh7hAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b00v8mdc8k8i2ddcfcyd.png" alt="Hello Python"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you check the flask code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;p&amp;gt;Hello world&amp;lt;/p&amp;gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are saying in the code above that if anyone hits &lt;code&gt;/&lt;/code&gt; in the browser. Then the flask app will run the &lt;code&gt;hello_word&lt;/code&gt; function. Since we were returning &lt;code&gt;&amp;lt;p&amp;gt;Hello world&amp;lt;/p&amp;gt;&lt;/code&gt;, this gets rendered in the browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rendering-indexhtml-and-css-using-flask"&gt;
  &lt;/a&gt;
  Rendering index.html and CSS using flask
&lt;/h3&gt;

&lt;p&gt;So far, we returned a string from the server. In this section, let us try to return HTML, CSS, Javascript files when we hit &lt;code&gt;/&lt;/code&gt;in the browser. To do that, we need to create two folders named &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;templates&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;static
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;templates
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will place all the views file, HTML files in the template folder; js and CSS files inside the static folder.&lt;/p&gt;

&lt;p&gt;Let's create an &lt;code&gt;index.html&lt;/code&gt; file inside the &lt;code&gt;template&lt;/code&gt; folder and add the snippet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"static/index.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;
      &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"shortcut icon"&lt;/span&gt;
      &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ url_for('static', filename='favicon.ico') }}"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Pratap&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"static/index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also &lt;code&gt;css&lt;/code&gt; and &lt;code&gt;js&lt;/code&gt; file inside &lt;code&gt;static&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.css&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am running&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you check the &lt;code&gt;index.html&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Loading the css file using this line --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"static/index.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Linking the javascript file using this line --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"static/index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's update our &lt;code&gt;app.py&lt;/code&gt; file and some more code there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;template_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"./templates"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;static_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"./static"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you observe the code above. We have updated the &lt;code&gt;Flask&lt;/code&gt; function. We let the flask know where it should load the &lt;code&gt;templates&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;template_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"./templates"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;static_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"./static"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;By default Flask will look for &lt;code&gt;template&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; folders.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then, we also updated the &lt;code&gt;/&lt;/code&gt; route we return &lt;code&gt;render_template(index.html)&lt;/code&gt;. So, the flask app will load the &lt;code&gt;index.html&lt;/code&gt; file and pass it to the &lt;code&gt;render_template&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Re-run the flask app and hit &lt;a href="https://dev.tolocalhost:5000"&gt;localhost:5000&lt;/a&gt; from the browser. Alas! The HTML file is now loading. Amazing!&lt;/p&gt;

&lt;p&gt;I hope you are going well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#working-with-json"&gt;
  &lt;/a&gt;
  Working with JSON
&lt;/h3&gt;

&lt;p&gt;Until now, we are only working on HTML snippets. In this section, let's return a JSON object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;template_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"./templates"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;static_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"./static"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;json_response&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Pratap"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So if look &lt;code&gt;json_response()&lt;/code&gt; function carefully we are now returning a &lt;code&gt;dictionary&lt;/code&gt;. We than pass it to &lt;code&gt;jsonify()&lt;/code&gt; function which we imported from &lt;code&gt;Flask&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;json_response&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Pratap"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you re-run the application and hit &lt;a href="https://dev.tolocalhost:5000/JSON"&gt;localhost:5000/json&lt;/a&gt; from the browser. You will see a JSON object being displayed in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AS2ss9su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgt9wa9tbg3qxxkx551v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AS2ss9su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgt9wa9tbg3qxxkx551v.png" alt="Hello Python"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#turning-on-autoreload"&gt;
  &lt;/a&gt;
  Turning on auto-reload
&lt;/h3&gt;

&lt;p&gt;Until now, after making each change, you need to restart the app. We can also tell the &lt;code&gt;flask&lt;/code&gt; app to restart after we make any changes. We need to update the &lt;code&gt;app.py&lt;/code&gt; and add the following snippet at the bottom of the file. We have added a condition that if we are running the file directly, add &lt;code&gt;debug=True&lt;/code&gt;. This will make sure to run the app in &lt;strong&gt;debug mode&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when running the app, we can run the app by running it in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also mention which port to run on. Currently, it's running on 5000 port by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#folder-strucure"&gt;
  &lt;/a&gt;
  Folder strucure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BHtHFjfU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1qvwtdwikc72o6vjjsi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BHtHFjfU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1qvwtdwikc72o6vjjsi.png" alt="Flask folder structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Things to remember&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To build a python web application, we need to import the Flask module.&lt;/li&gt;
&lt;li&gt;We need to pass the name of the current module, i.e., &lt;strong&gt;name&lt;/strong&gt;, as an argument into the Flask constructor.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;route()&lt;/code&gt; function of the class defines the URL mapping of the associated function.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app.run()&lt;/code&gt; method is used to run our &lt;strong&gt;Flask Application&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#to-sum-it-up"&gt;
  &lt;/a&gt;
  To sum it up
&lt;/h2&gt;

&lt;p&gt;This is it from this article. I hope I'm able to give you an overview of how the Flask application work. You can find the source code &lt;a href="https://github.com/Pratap22/flask"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;💌 If you'd like to receive more tutorials in your inbox, you can sign up for the newsletter &lt;a href="https://pratap.substack.com"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please don't hesitate to drop a comment here if I miss anything. Also, let me know if I can make the post better.&lt;/p&gt;

</description>
      <category>python</category>
      <category>flask</category>
      <category>web</category>
      <category>server</category>
    </item>
    <item>
      <title>Como utilizar fontes e cores globais no React Native com styled-components</title>
      <author>Hudson Duarte</author>
      <pubDate>Mon, 07 Jun 2021 16:19:14 +0000</pubDate>
      <link>https://dev.to/huduarte/como-utilizar-fontes-e-cores-globais-no-react-native-com-styled-components-3ehp</link>
      <guid>https://dev.to/huduarte/como-utilizar-fontes-e-cores-globais-no-react-native-com-styled-components-3ehp</guid>
      <description>&lt;p&gt;Fala dev, beleza ? Me chamo Hudson, sou desenvolver mobile com React Native e esse é o meu primeiro post aqui no dev.to. &lt;/p&gt;

&lt;p&gt;Normalmente utilizo a própria funcionalidade de artigos do Linkedln para fazer minhas publicações, porém como esse é o meu primeiro conteúdo mais técnico, decidi migrar para cá.&lt;/p&gt;

&lt;p&gt;Espero que goste :D&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introdu%C3%A7%C3%A3omotiva%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdução/Motivação
&lt;/h3&gt;

&lt;p&gt;Quando comecei a desenvolver com React Native, senti muita falta de uma etapa quase que obrigatória no desenvolvimento web com ReactJS e Styled-Components que era a declaração das fontes e cores globais da nossa aplicação. A alternativa que eu utilizava na web consiste em usar a funcionalidade &lt;strong&gt;createGlobalStyle&lt;/strong&gt; como parte da nossa aplicação.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vmT1o_PK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kej6v9tt4jjar0hf9goa.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vmT1o_PK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kej6v9tt4jjar0hf9goa.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Minha maior dúvida era: como faço isso com react-native ? Visto que não consigo utilizar essa função createGlobalStyled.&lt;/p&gt;

&lt;p&gt;Depois de algum tempo e dado início ao curso de React Native da Rocketseat(Ignite), descobri uma forma simples e muito legal de disponibilizar fontes e cores globais no nosso aplicativo.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#m%C3%A3o-na-massa"&gt;
  &lt;/a&gt;
  Mão na massa
&lt;/h2&gt;

&lt;p&gt;Para compartilhar com vocês essa etapa, vou estar utilizando o expo bare workflow, apenas por gosto próprio.&lt;/p&gt;

&lt;p&gt;Depois de criar um projeto com o expo (&lt;em&gt;chamei o projeto de estilosglobais&lt;/em&gt;) o primeiro e próximo passo é já instalar o styled-components e suas tipagens.&lt;/p&gt;

&lt;p&gt;Você pode utilizar os comandos:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add styled-components&lt;/code&gt;&lt;br&gt;
Para instalar o styled components no seu projeto&lt;br&gt;
e&lt;br&gt;
&lt;code&gt;yarn add @types/style-components-react-native -D&lt;/code&gt;&lt;br&gt;
Para instalar suas tipagens&lt;/p&gt;

&lt;p&gt;Essa é a estrutura padrão de um projeto iniciado com expo bare worlflow:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sj2Wcs_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puxtftiqt4s3gagjgt05.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sj2Wcs_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puxtftiqt4s3gagjgt05.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por padrão gosto de criar uma pasta &lt;strong&gt;src&lt;/strong&gt; dentro desse nosso projeto, e a partir dela começar a desenvolver o código. Também vou criar uma pasta &lt;strong&gt;screens&lt;/strong&gt; que vai conter minha página principal que sera a Home.&lt;/p&gt;

&lt;p&gt;Assim ficou a estrutura do meu projeto depois de fazer a configuração inicial:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lLa9pOpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4tz6aejw3ppqgw1sf49.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lLa9pOpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4tz6aejw3ppqgw1sf49.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Dentro do nossa index.tsx da pasta &lt;strong&gt;Home&lt;/strong&gt; eu tenho apenas a declaração do nosso componente e duas tags de retorno, nosso Container, uma View simples e o Title que é um Text do React Native&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4pU7M-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkybzkd8hxsbntyizji0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4pU7M-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkybzkd8hxsbntyizji0.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tvmGfeyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d31qthi4v6pvflhh7z1q.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tvmGfeyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d31qthi4v6pvflhh7z1q.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#criando-nosso-tema-global"&gt;
  &lt;/a&gt;
  Criando nosso tema global
&lt;/h2&gt;

&lt;p&gt;Dentro da nossa pasta src, criaremos também uma pasta chamada global e dentro dela, uma pasta chamada styles, é assim que eu aprendi e curto de utilizar nossas definições de tema global.&lt;/p&gt;

&lt;p&gt;Apenas dois arquivos em styles serão necessários para que possamos começar a implementar esse tema de forma global.&lt;br&gt;
&lt;strong&gt;theme.ts:&lt;/strong&gt; Onde ficarão nossas fontes e cores&lt;br&gt;
&lt;strong&gt;styled.d.ts:&lt;/strong&gt; Onde vamos colocar a tipagem necessária para que o styled entenda o nosso novo tema.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DbM-iE1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h54ysi9dxt2cl338uree.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DbM-iE1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h54ysi9dxt2cl338uree.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#themets"&gt;
  &lt;/a&gt;
  theme.ts
&lt;/h4&gt;

&lt;p&gt;É no theme.ts que vamos exportar o nosso código padrão de fonte e cor por meio de um objeto default:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#ffffff&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#000000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;regular&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Poppins_400Regular&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;medium&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Poppins_500Medium&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Poppins_700Bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Você deve ficar à vontade para nomear como quiser as suas variaveis de cores e fonte, eu por padrão utilizei &lt;em&gt;background e text&lt;/em&gt; para as cores e &lt;em&gt;regular,medium e bold&lt;/em&gt; para as fontes.&lt;/p&gt;

&lt;p&gt;Também para as fontes, como estou utilizando o expo, instalei elas utilizando o próprio expo-font e as fontes do google&lt;br&gt;
&lt;code&gt;expo install expo-font @expo-google-fonts/poppins&lt;/code&gt;&lt;br&gt;
Caso esteja utilizando o React Native CLI, você pode declarar no objeto de fonts o nome padrão dos arquivos que adicionou no projeto.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#stylesdts"&gt;
  &lt;/a&gt;
  styles.d.ts
&lt;/h4&gt;

&lt;p&gt;Nesse arquivo devemos declarar novamente o módulo styled-components porém com a adição das nossas fontes e cores:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ThemeType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;DefaultTheme&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ThemeType&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#quase-tudo-pronto"&gt;
  &lt;/a&gt;
  Quase tudo pronto!
&lt;/h2&gt;

&lt;p&gt;Feito essas duas etapas, o próximo passo é ir no nosso arquivo &lt;strong&gt;App.tsx&lt;/strong&gt; e mexer um pouquinho na sua estrura:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/screens/Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/global/styles/theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useFonts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Poppins_400Regular&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Poppins_500Medium&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Poppins_700Bold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@expo-google-fonts/poppins&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fontsLoaded&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFonts&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;Poppins_400Regular&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Poppins_500Medium&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Poppins_700Bold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora o retorno do nosso App precisa estar envolvido pelo &lt;strong&gt;ThemeProvider&lt;/strong&gt;, que foi importado de dentro do styled-components.&lt;br&gt;
Após envolver a nossa aplicação pelo ThemeProvider, ele pede uma propriedade obrigatória chamada &lt;strong&gt;theme&lt;/strong&gt;, é dentro dela que nós vamos colocar o theme, que foi importado de dentro do nosso global/styles.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#hora-de-testar"&gt;
  &lt;/a&gt;
  Hora de testar
&lt;/h2&gt;

&lt;p&gt;Feito tudo isso, basta irmos até o arquivo styles.ts da nossa aplicação e utilizar a sintaxe padrão do styled para pegar variaveis e usar o theme, o mais legal disso tudo é que o theme já tá tipado, então quando você utilizar o &lt;strong&gt;.&lt;/strong&gt; ele vai te sugerir se são as fontes ou as cores, e depois qual fonte ou cor você quer utilizar:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PoxAUngW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtgwj3wfqhqr61mo3220.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PoxAUngW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtgwj3wfqhqr61mo3220.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C_RECLZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t03txjcriiw28q9gezkt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C_RECLZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t03txjcriiw28q9gezkt.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lZOZpBAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/133rxny6iznkn5juwna3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lZOZpBAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/133rxny6iznkn5juwna3.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#como-utilizar-os-temas-globais-dentro-de-um-componente-jsx"&gt;
  &lt;/a&gt;
  Como utilizar os temas globais dentro de um componente JSX?
&lt;/h2&gt;

&lt;p&gt;Talvez em algum momento desenvolvendo você passe pela necessidade de usar esse tema global para colocar em alguma propriedade de componente pelo JSX, por exemplo.&lt;br&gt;
Para isso, você deve seguir esse padrão:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useTheme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./styles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTheme&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Fontes&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="nx"&gt;Cores&lt;/span&gt; &lt;span class="nx"&gt;Globais&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fim"&gt;
  &lt;/a&gt;
  Fim
&lt;/h2&gt;

&lt;p&gt;Dev, espero que tenha gostado dessa dica, quando descobri a possibilidade de utilizar fontes e cores globais no React Native fiquei super empolgado para compartilhar isso com todo mundo, fica à vontade para compartilhar comigo suas dúvidas e também trazer novos conhecimentos.&lt;/p&gt;

&lt;p&gt;Código no github:&lt;a href="https://github.com/huduarte/react-native-tema-global-styled-components"&gt;https://github.com/huduarte/react-native-tema-global-styled-components&lt;/a&gt;&lt;br&gt;
Meu linkedln: &lt;a href="https://www.linkedin.com/in/huduarte/"&gt;https://www.linkedin.com/in/huduarte/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bye! :D&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>typescript</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introduction To Solidity</title>
      <author>Elegberun Olugbenga</author>
      <pubDate>Mon, 07 Jun 2021 16:18:18 +0000</pubDate>
      <link>https://dev.to/gbengelebs/introduction-to-solidity-228c</link>
      <guid>https://dev.to/gbengelebs/introduction-to-solidity-228c</guid>
      <description>&lt;p&gt;In the previous article we discussed about smart contracts and tokens. In this article I will be taking a look at solidity the language for programming smart contracts. Solidity is a high-level programming language designed for implementing smart contracts. It is statically-typed object-oriented(contract-oriented) language. Solidity is highly influenced by Python, c++, and JavaScript which runs on the Ethereum Virtual Machine(EVM). In this article we will provide an introduction into the solidity language.&lt;/p&gt;

&lt;p&gt;The first thing we need is an IDE to write our solidity code. One of the most popular development environments for programming solidity is the Remix IDE and it is what we will be using in this tutorial. Luckily we can access it online &lt;a href="https://remix.ethereum.org/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sol"&gt;
  &lt;/a&gt;
  .SOL
&lt;/h2&gt;

&lt;p&gt;Solidity Files are saved with the .sol extension to indicate that it is a solidity file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pragma"&gt;
  &lt;/a&gt;
  PRAGMA
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;- The first line of a solidity file is the pragma statement. It indicates the solidity version that is being used. It helps ensure compatibility in code files.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#contract"&gt;
  &lt;/a&gt;
  CONTRACT
&lt;/h2&gt;

&lt;p&gt;This keyword is used to create a smart contract. By convention the name of the contract is usually the name of the solidity file. Every function and variable declaration in the file will be encapsulated within the smart contract.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
 &lt;span class="n"&gt;Functions&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Data&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  VARIABLES
&lt;/h2&gt;

&lt;p&gt;variables are reserved memory locations to store value.&lt;br&gt;
You may like to store information of various data types like character, wide character, integer, floating point, double floating point, boolean etc. Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory.&lt;br&gt;
examples of variables are-- integer,string,bool.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#address"&gt;
  &lt;/a&gt;
  ADDRESS
&lt;/h2&gt;

&lt;p&gt;This is a variable type that holds the 20 byte value representing the size of an Ethereum address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt; &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x212&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mapping-"&gt;
  &lt;/a&gt;
  MAPPING -
&lt;/h2&gt;

&lt;p&gt;A mapping holds a reference to a value. Below is the syntax. They act as hash tables which consist of key types and corresponding value type pairs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_KeyType&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_ValueType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;balances&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This maps the address variable as a key to an integer variable and assigns the mapping to a public variable called balances.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w20kkPzi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5iu42j3qxdheb02lf1m8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w20kkPzi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5iu42j3qxdheb02lf1m8.png" alt="mapping"&gt;&lt;/a&gt;&lt;/p&gt;
https://medium.com/upstate-interactive/mappings-in-solidity-explained-in-under-two-minutes-ecba88aff96e



&lt;p&gt;We can assign a value to a key adress like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="n"&gt;balances&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;keyAddress&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Solidity supports. State,local and global variables.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;State Variables − Variables whose values are permanently stored in a contract storage.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;SolidityTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;storedData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="c1"&gt;// State variable
&lt;/span&gt;   &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;storedData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// Using State variable
&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we declared an integer variable called storedData. And we assign a value to it in the constructor of the contract.This value will be available throughout the contract context.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Local Variables − Variables whose values are present only within a function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Global Variables − Special variables exists in the global namespace used to get information about the blockchain. Common Examples are :&lt;br&gt;
block.coinbase (address payable)     which returns Current block miner's address. See the list of variables here&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YP_J0k3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o9s8rwyhpwzmuixp0rz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YP_J0k3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o9s8rwyhpwzmuixp0rz.png" alt="GlobalVariables"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
Image Source [TutorialPoint](https://www.tutorialspoint.com/solidity/solidity_variables.htm)



&lt;h2&gt;
  &lt;a href="#function"&gt;
  &lt;/a&gt;
  FUNCTION
&lt;/h2&gt;

&lt;p&gt;A function is a group of resuable code that can be used anywhere in your application. They perform a specific task. The most common way to define a function in Solidity is by using the function keyword, followed by a unique function name, a list of parameters (that might be empty), and a statement block surrounded by curly braces.&lt;/p&gt;

&lt;p&gt;Functions can be specified as being external, public, internal or private, where the default is public.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Public: Public functions are part of the contract interface and can be either called internally or via messages.&lt;/li&gt;
&lt;li&gt;Internal: Those functions and state variables can only be accessed internally (i.e. from within the current contract or contracts deriving from it).&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Private: Private functions and state variables are only visible for the contract they are defined in and not in derived contracts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Functions can be declared &lt;em&gt;view&lt;/em&gt; in which case they promise not to modify the state. &lt;strong&gt;Read only functions&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;//statements
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;BlogDemo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;addNumbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// local variable
&lt;/span&gt;      &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example we named our function addNumbers, it is declared as public view Which means it does not modify any contract state, It just adds two numbers together.It returns an integer and it does not take in any parameters.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;function with multiple return Parameters.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;BlogDemo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;addNumbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// local variable
&lt;/span&gt;      &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will return both the product and sum.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;require keyword.
The require keyword in a Solidity function guarantees validity of conditions that cannot be detected before execution. It checks inputs, contract state variables and return values from calls to external contracts. If I wanted to execute a function only if a particular condition is met, I add the required keyword.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;BlogDemo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;addNumbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="n"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'5 is not greater than 4'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// local variable
&lt;/span&gt;      &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will only execute if value1 is greater than value 2. if the condition is not met It will return the error message ('5 is not greater than 4'). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modifiers"&gt;
  &lt;/a&gt;
  Modifiers
&lt;/h2&gt;

&lt;p&gt;Modifier allow control to the behaviour of a function. They can be used in a vareity of scenarios. Like for example checking who has access to a function before executing that function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;testAddress&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;testAddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Check if the function is called by the owner of the contract
&lt;/span&gt;  &lt;span class="k"&gt;modifier&lt;/span&gt; &lt;span class="n"&gt;onlyOwner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;testAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function body is inserted where the special symbol "_;" appears in the definition of a modifier. So if condition of modifier is satisfied while calling this function, the function is executed and otherwise, an exception is thrown.&lt;/p&gt;

&lt;p&gt;We can then use this function modifier as a condition checker in other functions. For example to only execute the function if it is called by the sender.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// Can only be called by the owner cause I am using the onlyOwner modifier
&lt;/span&gt;  &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;onlyOwner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#constructors"&gt;
  &lt;/a&gt;
  Constructors
&lt;/h2&gt;

&lt;p&gt;A constructor is an optional function declared with the constructor keyword which is executed only upon contract creation. Constructor functions can be either public or internal. If there is no constructor, the contract will assume the default constructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="n"&gt;contructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;SolidityTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;storedData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="c1"&gt;// State variable
&lt;/span&gt;   &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;storedData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// Using State variable
&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  Events.
&lt;/h2&gt;

&lt;p&gt;An event stores arguments passed to it in the transaction logs of the blockchain. If you want to store something like transfer information. You could do so using an event.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#event-syntax"&gt;
  &lt;/a&gt;
  Event Syntax
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="k"&gt;indexed&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="k"&gt;indexed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To write to an event. You &lt;em&gt;emit&lt;/em&gt; that event. To write to event Transfer. I emit it using the following syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Emit an event
&lt;/span&gt;&lt;span class="k"&gt;emit&lt;/span&gt; &lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receiverAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this article we have explained some common syntax and terms in the solidity language. In the next article in the series we will be building our own smart contract using solidity and deploying to the Binance Smart Chain. &lt;/p&gt;

</description>
      <category>solidity</category>
    </item>
    <item>
      <title>Corre tus tareas recurrentes con Sidekiq</title>
      <author>Luis Porras</author>
      <pubDate>Mon, 07 Jun 2021 16:18:11 +0000</pubDate>
      <link>https://dev.to/webdox/corre-tus-tareas-recurrentes-con-sidekiq-3nj1</link>
      <guid>https://dev.to/webdox/corre-tus-tareas-recurrentes-con-sidekiq-3nj1</guid>
      <description>&lt;p&gt;En Webdox utilizamos &lt;strong&gt;&lt;a href="https://github.com/mperham/sidekiq"&gt;Sidekiq&lt;/a&gt;&lt;/strong&gt; como nuestra plataforma para procesar tareas asíncronas.  &lt;strong&gt;Sidekiq&lt;/strong&gt; utiliza hilos (threads) para manejar varias tareas al mismo tiempo en un mismo proceso.&lt;/p&gt;

&lt;p&gt;Tenemos muchas tareas que ejecutamos de forma asíncrona con Sidekiq, por ejemplo: El envío de notificaciones por correo, la reindexación de contratos, la generación masiva de contratos y el inicio de la firma electrónica de cada contrato masivo, etc&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sidekiq&lt;/strong&gt; se puede usar de forma gratuita y de forma paga.  Cuando usamos la forma gratuita hay ciertas funcionalidades que no se incluyen y una de estas es ejecutar CRON JOBS.  Con esta funcionalidad podríamos tomar una tarea de Sidekiq y ejecutarla recurrentemente cada cierto tiempo con &lt;a href="https://www.hostinger.es/tutoriales/cron-job"&gt;Cron jobs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Afortunadamente existen Gemas que funcionan como plugins de Sidekiq y en Webdox utilizamos una para ejecutar tareas recurrentes de forma gratuita, su nombre es &lt;strong&gt;&lt;a href="https://github.com/Moove-it/sidekiq-scheduler"&gt;Sidekiq Scheduler&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A continuación un pequeño tutorial de cómo utilizar Sidekiq Scheduler&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#instalaci%C3%B3n-y-configuraci%C3%B3n"&gt;
  &lt;/a&gt;
  Instalación y Configuración
&lt;/h2&gt;

&lt;p&gt;Agregamos la gema en nuestro Gemfile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Gemfile&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'sidekiq-scheduler'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;y Ejecutamos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creamos un Worker de Sidekiq el cual se ejecutará cada cierto tiempo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;hello_world_worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'sidekiq-scheduler'&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorldWorker&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Worker&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Hello world'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para configurar la periodicidad del Worker modificamos el archivo de configuración de Sidekiq, un apartado de Scheduler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/sidekiq.yml&lt;/span&gt;

&lt;span class="s"&gt;:schedule:&lt;/span&gt;
  &lt;span class="s"&gt;hello_world&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;   &lt;span class="c1"&gt;# Runs once per minute&lt;/span&gt;
    &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HelloWorldWorker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y corremos Sidekiq:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;sidekiq &lt;span class="nt"&gt;-C&lt;/span&gt; config/sidekiq.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Una vez iniciado Sidekiq veremos como se imprime "Hello world" cada minuto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-06-07T15:54:38.710Z 62465 TID-ownzi9r98 INFO: Running in ruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-darwin20]
2021-06-07T15:54:38.710Z 62465 TID-ownzi9r98 INFO: See LICENSE and the LGPL-3.0 for licensing details.
2021-06-07T15:54:38.710Z 62465 TID-ownzi9r98 INFO: Upgrade to Sidekiq Pro for more features and support: http://sidekiq.org
2021-06-07T15:54:38.723Z 62465 TID-ownzi9r98 INFO: Loading Schedule
2021-06-07T15:54:38.723Z 62465 TID-ownzi9r98 INFO: Schedule empty! Set Sidekiq.schedule
2021-06-07T15:54:38.724Z 62465 TID-ownzi9r98 INFO: Schedules Loaded
2021-06-07T15:54:38.734Z 62465 TID-ownzi9r98 INFO: Reloading Schedule
2021-06-07T15:54:38.734Z 62465 TID-ownzi9r98 INFO: Loading Schedule
2021-06-07T15:54:38.790Z 62465 TID-ownzi9r98 INFO: Scheduling hello_world {"cron"=&amp;gt;"0 * * * * *", "class"=&amp;gt;"HelloWorldWorker", "queue"=&amp;gt;"default"}
2021-06-07T15:54:38.791Z 62465 TID-ownzi9r98 INFO: Schedules Loaded
2021-06-07T15:54:38.791Z 62465 TID-ownzi9r98 INFO: Starting processing, hit Ctrl-C to stop
2021-06-07T15:59:37.940Z 62990 TID-ov0v1hmpo HelloWorldWorker JID-4a465f9e9646157552de7f5c INFO: start
Hello world
2021-06-07T15:59:37.940Z 62990 TID-ov0v1hmpo HelloWorldWorker JID-4a465f9e9646157552de7f5c INFO: done: 0.0 sec
2021-06-07T15:59:37.940Z 62990 TID-ov0v1hmpo HelloWorldWorker JID-64dc6b6cb06ebf580c3faae6 INFO: start
Hello world
2021-06-07T15:59:37.940Z 62990 TID-ov0v1hmpo HelloWorldWorker JID-64dc6b6cb06ebf580c3faae6 INFO: done: 0.0 sec
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Además tenemos la opción de visualizar las tareas recurrentes en el panel de administración de Sidekiq si realizamos la siguiente configuración:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config.ru&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'sidekiq/web'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'sidekiq-scheduler/web'&lt;/span&gt;

&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Web&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dYr-2Jd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msluy07gqr7th4o4tvxu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dYr-2Jd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msluy07gqr7th4o4tvxu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por último recomendamos utilizar la página &lt;a href="https://crontab.guru/"&gt;CronTabGurú&lt;/a&gt; para cuando necesitemos configurar la periodicidad de las tareas recurrentes con la sintaxis de Cron Jobs.&lt;/p&gt;

&lt;p&gt;Tener en cuenta que la sintaxis de cron jobs que utiliza Sidekiq Scheduler tiene una sección extra en la parte de adelante la cual nos permite configurar los segundos.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>tutorial</category>
      <category>redis</category>
    </item>
  </channel>
</rss>
